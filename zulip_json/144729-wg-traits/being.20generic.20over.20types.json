[
    {
        "content": "<p>So I did a lot of exploratory chalk refactoring over the weekend, since I had time to kill in airports while traveling to RBR. My branch is the <a href=\"https://github.com/nikomatsakis/chalk-ndm/tree/split-tys\" target=\"_blank\" title=\"https://github.com/nikomatsakis/chalk-ndm/tree/split-tys\">split-tys</a> branch over on my repository.</p>",
        "id": 178660971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571668524
    },
    {
        "content": "<p>Current status:</p>\n<ul>\n<li>the chalk-ir crate includes a <code>TypeFamily</code> trait and all things are generic over this type family</li>\n</ul>",
        "id": 178661001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571668542
    },
    {
        "content": "<ul>\n<li>there is one type family (<code>ChalkIr</code>) that all other crates are currently using</li>\n</ul>",
        "id": 178661023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571668557
    },
    {
        "content": "<ul>\n<li>the <code>Fold</code> and <code>Zip</code> traits are also generic over the type family</li>\n</ul>",
        "id": 178661075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571668568
    },
    {
        "content": "<p>I started working on the main <em>goal</em> here, which is to make clause generic generic over the \"output\" type family. It seems to be working \"ok\" but I decided I wanted to step back a bit from that and first do some other refactorings to that code to clean it up</p>",
        "id": 178661112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571668608
    },
    {
        "content": "<p>I'm debating how to manage this branch. On the one hand, I kind of think I should land it ASAP -- it's quite invasive and not something I look forward to rebasing.</p>\n<p>On the other hand, it doesn't yet reach a \"useful\" end-goal, and I'm nervous about introducing a lot of generics to the codebase if we decide this is the wrong direction.</p>\n<p>On the gripping hand, I feel like 95% confident this <em>is</em> the right direction, and the codebase doesn't (yet) feel a lot more complex.</p>",
        "id": 178661961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669137
    },
    {
        "content": "<p><code>impl&lt;T: Zip&lt;TF&gt;, TF: TypeFamily&gt; Zip&lt;TF&gt; for Vec&lt;T&gt;</code></p>\n<p>Interesting, is this indirectly constraining the <code>T</code> by moving the <code>TypeFamily</code> bound to <code>Zip</code> instead?</p>",
        "id": 178662180,
        "sender_full_name": "detrumi",
        "timestamp": 1571669273
    },
    {
        "content": "<p>Merging these changes early doesn't feel like a problem, in the worst case it'll change again later</p>",
        "id": 178662454,
        "sender_full_name": "detrumi",
        "timestamp": 1571669477
    },
    {
        "content": "<blockquote>\n<p>On the other hand, it doesn't yet reach a \"useful\" end-goal</p>\n</blockquote>\n<p>Do you have something in mind already, or is it more a matter of seeing how it will turn out?</p>",
        "id": 178662589,
        "sender_full_name": "detrumi",
        "timestamp": 1571669554
    },
    {
        "content": "<p>actually, <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>, that's a good point; at some point I introducd the <code>HasTypeFamily</code> trait and we could potentially use that instead of having <code>Zip&lt;TF&gt;</code> -- however, it is also useful to sometimes have types (e.g., <code>usize</code> or whatever) that do not belong to any particular type family</p>",
        "id": 178662681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669623
    },
    {
        "content": "<blockquote>\n<p>Do you have something in mind already, or is it more a matter of seeing how it will turn out?</p>\n</blockquote>\n<p>I do definitely have things in mind, in particular I want to use this to change how we do associated type normalization</p>",
        "id": 178662752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669649
    },
    {
        "content": "<p>but I think we can also use it for other things in other codebases</p>",
        "id": 178662757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669655
    },
    {
        "content": "<p>e.g., in the Lark compiler, I used a similar trick to distinguish types that may contain inference variables</p>",
        "id": 178662793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669682
    },
    {
        "content": "<p>from those that cannot</p>",
        "id": 178662799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669685
    },
    {
        "content": "<p>and those that may need substitution</p>",
        "id": 178662808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669690
    },
    {
        "content": "<p>one other thing thing I've found: I think ideally you would have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Fold</span><span class=\"o\">&lt;</span><span class=\"n\">TF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TTF</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>where <code>TTF</code> is the \"target type family\" you are folding into</p>",
        "id": 178662893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669751
    },
    {
        "content": "<p>However, lacking higher-ranked generics bounds (e.g., <code>forall&lt;T&gt; { ... }</code>), I was not able to make that work</p>",
        "id": 178662952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669771
    },
    {
        "content": "<p>though I guess if I were willing to give up on <code>Folder</code> being <code>dyn</code>-compatible I might be able to</p>",
        "id": 178662971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669792
    },
    {
        "content": "<p>Yeah, that does sound a bit too higher-order for Rust atm</p>",
        "id": 178662991,
        "sender_full_name": "detrumi",
        "timestamp": 1571669805
    },
    {
        "content": "<p>( the reason this would matter is that I later had to add some boilerplate, which doesn't show up in the commit history but is true in one of my stashes )</p>",
        "id": 178663029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669821
    },
    {
        "content": "<p>( basically reproducing the \"Fold\" logic but \"cross-family\" folding )</p>",
        "id": 178663058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669839
    },
    {
        "content": "<p>anyway having talked this out a bit I am leaning now towards:</p>\n<ul>\n<li>land this work which seems good and doesn't change (yet) anything too deep about the existing code</li>\n<li>start exploring follow-up work in branches</li>\n</ul>",
        "id": 178663100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669871
    },
    {
        "content": "<p>landing the work also enables more collaboration. For example, I'd like someone to make a custom derive for <code>Fold</code></p>",
        "id": 178663184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669899
    },
    {
        "content": "<p>Right, it does seem to enable further work</p>",
        "id": 178663191,
        "sender_full_name": "detrumi",
        "timestamp": 1571669902
    },
    {
        "content": "<p>currently we use <code>macro_rules</code> and it is ungreat</p>",
        "id": 178663200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669907
    },
    {
        "content": "<p>procedural macros didn't exist when chalk was first created though and -- at the time -- the macro rules macros were a big win :P</p>",
        "id": 178663274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571669954
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/chalk/pull/265\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/265\">https://github.com/rust-lang/chalk/pull/265</a></p>",
        "id": 178702280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571694778
    },
    {
        "content": "<p>I put r? <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span></p>",
        "id": 178702333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571694793
    },
    {
        "content": "<blockquote>\n<p>I'd like someone to make a custom derive for <code>Fold</code></p>\n</blockquote>\n<p>I've gotten most of the <code>struct_fold</code> converted to a derive macro already, but this one'll take some work:</p>\n<div class=\"codehilite\"><pre><span></span>struct_fold!(impl[TF: TypeFamily, F] Fold&lt;TF&gt; for InEnvironment&lt;F&gt; {\n    environment,\n    goal,\n} where F: HasTypeFamily&lt;TypeFamily = TF&gt; + Fold&lt;TF, Result = F&gt;);\n</pre></div>",
        "id": 178838713,
        "sender_full_name": "detrumi",
        "timestamp": 1571824579
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/chalk-ndm/compare/split-tys...detrumi:fold-derive-macro\" target=\"_blank\" title=\"https://github.com/nikomatsakis/chalk-ndm/compare/split-tys...detrumi:fold-derive-macro\">https://github.com/nikomatsakis/chalk-ndm/compare/split-tys...detrumi:fold-derive-macro</a></p>",
        "id": 178838730,
        "sender_full_name": "detrumi",
        "timestamp": 1571824596
    },
    {
        "content": "<p>The <code>F</code> corresponds to the <code>G: HasTypeFamily</code> in the struct definition, right? I guess this'll require merging extra generic parameters in, instead of just replacing them like the cases where a non-generic struct had to be impl'd with <code>Fold&lt;ChalkIr&gt;</code></p>",
        "id": 178839035,
        "sender_full_name": "detrumi",
        "timestamp": 1571824850
    },
    {
        "content": "<p>For the simpler cases I opted for a <code>#[fold_family(ChalkIr)]</code> attribute on the fold-deriving struct. Not sure if that's the best way, but it seems to work fine</p>",
        "id": 178839647,
        "sender_full_name": "detrumi",
        "timestamp": 1571825401
    },
    {
        "content": "<p><code>enum_macro</code> actually was easier to replace (unless I broke something, but the tests are green). <code>Void</code> folding was an edge case but didn't seem to be used, and I don't think the \"Hacky variant for use in slg::context::implementation\" part of <code>enum_fold</code> was being used either</p>",
        "id": 178852646,
        "sender_full_name": "detrumi",
        "timestamp": 1571837003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> hmm so --</p>",
        "id": 178855939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571839091
    },
    {
        "content": "<p>what makes this case different, presumably, is that the type family isn't a direct parameter</p>",
        "id": 178855951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571839100
    },
    {
        "content": "<p>but is rather \"indirected\", right?</p>",
        "id": 178855958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571839106
    },
    {
        "content": "<p>one option would be to say that <code>TypeFamily: HasTypeFamily&lt;TypeFamily = Self&gt;</code></p>",
        "id": 178855967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571839115
    },
    {
        "content": "<p>so that we could essentially permit the derive on any type with a single type parameter, and then have the template be</p>",
        "id": 178855985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571839131
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TF</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Fold</span><span class=\"o\">&lt;</span><span class=\"n\">TF</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">InputType</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"nc\">HasTypeFamily</span><span class=\"o\">&lt;</span><span class=\"n\">TypeFamily</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TF</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TF</span>: <span class=\"nc\">TypeFamily</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cm\">/* plus where clauses from the type */</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178856017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571839152
    },
    {
        "content": "<blockquote>\n<p>For the simpler cases I opted for a <code>#[fold_family(ChalkIr)]</code> attribute on the fold-deriving struct. Not sure if that's the best way, but it seems to work fine</p>\n</blockquote>\n<p>hmm yeah I guess we want to cover the cases where there is no type parameter too; really there are a few patterns I suppose. The idea of a supporting attribute is pretty ok</p>",
        "id": 178856168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571839235
    },
    {
        "content": "<p>I was toying with the idea of detecting the <code>G: HasTypeFamily</code> instead, and then adding a TF parameter in the macro</p>",
        "id": 178856441,
        "sender_full_name": "detrumi",
        "timestamp": 1571839399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> yeah, that's another good option -- now that you mention it, I think when I thought about this before, I was imagining:</p>\n<ul>\n<li>if there is a <code>G: HasTypeFamily</code>, then use that</li>\n<li>else if there is a <code>TF: TypeFamily</code>, use that</li>\n<li>else we either error or assume this is a copy case that is independent of the TF?</li>\n</ul>\n<p>it is a bit... sensitive though</p>",
        "id": 178857279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571839961
    },
    {
        "content": "<p>i.e., it'll require checking the paths which is error-prone</p>",
        "id": 178857290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571839969
    },
    {
        "content": "<p>another option:</p>",
        "id": 178857296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571839973
    },
    {
        "content": "<p>decorate the type parameter, or use a fold argument</p>",
        "id": 178857336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571839997
    },
    {
        "content": "<p>e.g.,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Fold)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"cp\">#[TypeFamily]</span><span class=\"w\"> </span><span class=\"n\">TF</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178857362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840023
    },
    {
        "content": "<p>although I think the \"convention over configuration\" option of using distinctive type parameter names might be the easiest/best thing to do here</p>",
        "id": 178857373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840034
    },
    {
        "content": "<p>i.e., maybe we require the type parameter name <code>TF</code> (for a type family) / <code>HTF</code> (for something that has a type family)</p>",
        "id": 178857470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840081
    },
    {
        "content": "<p>Requiring an exact name for the derive to work is kind of brittle though</p>",
        "id": 178857502,
        "sender_full_name": "detrumi",
        "timestamp": 1571840120
    },
    {
        "content": "<p>I think I can make it work for <code>InEnvironment&lt;G: HasTypeFamily&gt;</code>, the macro can then detect the <code>HasTypeFamily</code> bound and generate this:</p>\n<div class=\"codehilite\"><pre><span></span>impl&lt;TF: TypeFamily, G&gt; Fold&lt;TF&gt; for InEnvironment&lt;G&gt;\nwhere\n    G: HasTypeFamily&lt;TypeFamily = TF&gt; + Fold&lt;TF, Result = G&gt;\n{..}\n</pre></div>",
        "id": 178857696,
        "sender_full_name": "detrumi",
        "timestamp": 1571840250
    },
    {
        "content": "<p>I'm not 100% sure about all potential edge cases, but as long as we only add to the existing bounds I think it'll work out</p>",
        "id": 178857791,
        "sender_full_name": "detrumi",
        "timestamp": 1571840303
    },
    {
        "content": "<blockquote>\n<p>I think I can make it work for <code>InEnvironment&lt;G: HasTypeFamily&gt;</code>, the macro can then detect the <code>HasTypeFamily</code> bound and generate </p>\n</blockquote>\n<p>I was concerned about things like <code>InEnvironment&lt;G: foo::HasTypeFamily&gt;</code></p>",
        "id": 178857967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840429
    },
    {
        "content": "<p>I guess we can make that work by just checking the \"tail\" element of the path</p>",
        "id": 178857982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840443
    },
    {
        "content": "<p>it is still potentially wrong if you do <code>use HasTypeFamily as HTF</code> but that point \"you asked for it\"</p>",
        "id": 178858003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840457
    },
    {
        "content": "<p>I'm fine with any such scheme, as long as we document it</p>",
        "id": 178858015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840467
    },
    {
        "content": "<p>I guess I like the idea of scanning the where-clauses and hoping to find exactly one type parameter <code>T</code> that is either:</p>\n<ul>\n<li>parameterized by <code>*::TypeFamily</code> -- in which case <code>T</code> is the type family for <code>Fold</code></li>\n<li>parameterized by <code>*::HasTypeFamily</code> -- in which case the type family for <code>Fold</code> is <code>&lt;T as HasTypeFamily&gt;::TypeFamily</code></li>\n</ul>",
        "id": 178858125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840544
    },
    {
        "content": "<blockquote>\n<p>For the simpler cases I opted for a <code>#[fold_family(ChalkIr)]</code> attribute on the fold-deriving struct. Not sure if that's the best way, but it seems to work fine</p>\n</blockquote>\n<p>regarding this:</p>",
        "id": 178858175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840589
    },
    {
        "content": "<p>one thing that is sort of annoying is writing <code>HasTypeFamily</code> impls</p>",
        "id": 178858205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840612
    },
    {
        "content": "<p>maybe we should derive <em>that</em> too ?</p>",
        "id": 178858210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840616
    },
    {
        "content": "<p>using the same rules, perhaps, and perhaps with a procedural macro that lets you hard-code it</p>",
        "id": 178858223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840627
    },
    {
        "content": "<p>in that case, when you derive <code>Fold</code>, we could do</p>",
        "id": 178858233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840635
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">TF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Fold</span><span class=\"o\">&lt;</span><span class=\"n\">TF</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">...,</span><span class=\"w\"> </span><span class=\"n\">Self</span>: <span class=\"nc\">HasTypeFamily</span><span class=\"o\">&lt;</span><span class=\"n\">TypeFamily</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TF</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TF</span>: <span class=\"nc\">TypeFamily</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178858305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840671
    },
    {
        "content": "<p>i.e., we move the heuristic from <code>derive(Fold)</code> to <code>derive(TypeFamily)</code></p>",
        "id": 178858317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840686
    },
    {
        "content": "<p>(and if you want to write fold for something that doesn't have a type family, you write it by hand; those are the rare cases like <code>Vec</code>, copy types, etc, and we can't derive those anyway)</p>",
        "id": 178858351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840715
    },
    {
        "content": "<p>Hmm, does that work for enums and structs that have no type parameters?</p>",
        "id": 178858714,
        "sender_full_name": "detrumi",
        "timestamp": 1571840960
    },
    {
        "content": "<p>But yeah, HasTypeFamily wouldn't be too hard to derive probably. Not sure if that would remove all TypeFamily logic from Fold though</p>",
        "id": 178858982,
        "sender_full_name": "detrumi",
        "timestamp": 1571841087
    },
    {
        "content": "<p>I'd like to avoid changing the struct/enum definitions too much while working on the Fold derive macro</p>",
        "id": 178859201,
        "sender_full_name": "detrumi",
        "timestamp": 1571841215
    },
    {
        "content": "<blockquote>\n<p>Hmm, does that work for enums and structs that have no type parameters?</p>\n</blockquote>\n<p>do you mean the ones in rust-ir?</p>",
        "id": 178860655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571841971
    },
    {
        "content": "<p>if so, I think they would require something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Fold, ..)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[has_type_family(ChalkIr)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">StructDatum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>where <code>has_type_family(ChalkIr)</code> generates something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HasTypeFamily</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">StructDatum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">TypeFamily</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ChalkIr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>this kills two birds with one stone, since it prevents the need to manually add such an impl</p>",
        "id": 178860766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571842042
    },
    {
        "content": "<p>if you can do <code>#[derive(HasTypeFamily(ChalkIr), Fold, ..)]</code> that'd be even slicker</p>",
        "id": 178860810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571842077
    },
    {
        "content": "<p>not sure if that's something we support or not though</p>",
        "id": 178860874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571842094
    },
    {
        "content": "<p>(the idea would be that <code>#[derive(HasTypeFamily)]</code> requires a suitable type parameter, whereas <code>derive(HasTypeFamily(X))</code> hard-codes to <code>X</code>)</p>",
        "id": 178860913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571842117
    },
    {
        "content": "<p>Derive arguments like that aren't possible, I think. That's why I had to resort to an extra attribute</p>",
        "id": 178861239,
        "sender_full_name": "detrumi",
        "timestamp": 1571842315
    },
    {
        "content": "<p>yeah, ok</p>",
        "id": 178861319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571842347
    },
    {
        "content": "<p>if you want arguments in all cases I would not use a derive; attribute macros are I believe stable these days so just go for them directly I think</p>",
        "id": 178861398,
        "sender_full_name": "simulacrum",
        "timestamp": 1571842400
    },
    {
        "content": "<p>you don't want them in all cases</p>",
        "id": 178861468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571842433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> (warning, I'm hacking on the Fold trait quite a lot in a branch, so I'm making a lot of edits to the derive)</p>",
        "id": 179164765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572171438
    },
    {
        "content": "<p>Cool, curious to see what you can come up with</p>",
        "id": 179171817,
        "sender_full_name": "detrumi",
        "timestamp": 1572184115
    }
]