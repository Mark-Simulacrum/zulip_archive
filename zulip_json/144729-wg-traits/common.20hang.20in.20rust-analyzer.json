[
    {
        "content": "<p>Hey, I've noticed that we have a couple of issues in rust-analyzer pointing to <a href=\"https://github.com/rust-lang/chalk/issues/688\">https://github.com/rust-lang/chalk/issues/688</a> (the most recent one being <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/8792\">https://github.com/rust-analyzer/rust-analyzer/issues/8792</a>).</p>\n<p>So I want to signal this as something for prioritization :)</p>",
        "id": 239050006,
        "sender_full_name": "matklad",
        "timestamp": 1621239521
    },
    {
        "content": "<p>Friendly re-ping :)</p>\n<p>Got another issue about chalk panicking <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/9754\">today</a>, so I wondering if there's some specific things we can do to improve experience for the user of rust-analyzer. </p>\n<p>For the IDE, the failure modes we see from chalk sometimes (hangs/panics) are rather critical for user-experience. Chalk underpins pretty much every interesting feature in rust-analyzer, so, when it breaks, almost nothing works, and improving that would lead to a significant improvement in the experience for end devs. Note that we are not as sensitive to wrong answers -- wrong answer is a local, isolated failure.</p>",
        "id": 247907748,
        "sender_full_name": "matklad",
        "timestamp": 1627900938
    },
    {
        "content": "<p>I wonder -- does it makes sense to build something like <a href=\"https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasm-smith\">https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasm-smith</a> for chalk-ir?</p>",
        "id": 247907783,
        "sender_full_name": "matklad",
        "timestamp": 1627900976
    },
    {
        "content": "<p>To be clear: the issues are not critical, don't feel bad if they are not on the immediate roadmap: mostly, I want to backpressuer the feedback channel :)</p>",
        "id": 247907888,
        "sender_full_name": "matklad",
        "timestamp": 1627901085
    },
    {
        "content": "<p>I'll take another look at this</p>",
        "id": 249073893,
        "sender_full_name": "detrumi",
        "timestamp": 1628664718
    },
    {
        "content": "<p>And yeah, returning no solutions would be a lot better than looping indefinitely</p>",
        "id": 249073994,
        "sender_full_name": "detrumi",
        "timestamp": 1628664784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/144729-wg-traits/topic/common.20hang.20in.20rust-analyzer/near/247907783\">said</a>:</p>\n<blockquote>\n<p>I wonder -- does it makes sense to build something like <a href=\"https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasm-smith\">https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasm-smith</a> for chalk-ir?</p>\n</blockquote>\n<p>Interesting idea, I assume we'd mostly use that to check for infinite loops (/large running times) and panics?</p>",
        "id": 249074217,
        "sender_full_name": "detrumi",
        "timestamp": 1628665004
    },
    {
        "content": "<p>Might be easier to unleash <code>rust-analyzer</code> on <code>rustwide</code></p>",
        "id": 249074269,
        "sender_full_name": "Laurențiu",
        "timestamp": 1628665070
    },
    {
        "content": "<p>The indirection of rust-analyzer calling chalk makes things harder to debug though, generating chalk-ir directly should make it easier to create reproducing test cases</p>",
        "id": 249074445,
        "sender_full_name": "detrumi",
        "timestamp": 1628665216
    },
    {
        "content": "<p>Yeah, but <code>rust-analyzer</code> and <code>rustwide</code> exist, while <code>chalk-ir-smith</code> doesn't, so it's a trade-off</p>",
        "id": 249074610,
        "sender_full_name": "Laurențiu",
        "timestamp": 1628665366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> it's been a while since I've looked at this, but I spent some time before trying to refactor chalk-integration to better test closures (some work <a href=\"https://github.com/jackh726/chalk/commit/77e606b2eac452d20fba1b18b6c611fa8d7ea69b\">here</a>)</p>",
        "id": 249161713,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628712043
    },
    {
        "content": "<p>Basically, I was trying to have a way to test a closures that we haven't fully inferred their signature yet</p>",
        "id": 249161988,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628712150
    },
    {
        "content": "<p>basically need to add the ability to specify \"variables in the environment\" (something like an <code>exists&lt;T&gt;</code> so they can be used in the closure sig too</p>",
        "id": 249162165,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628712234
    },
    {
        "content": "<p>I never got it to fully work and I was never actually able to reproduce the problem</p>",
        "id": 249162276,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628712272
    },
    {
        "content": "<p>There's also at least one topic on Zulip that I've dug into it a big: i.e. <a href=\"#narrow/stream/144729-wg-traits/topic/closure.20goal.20keeps.20expanding.20lifetimes.20chalk.23688\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/closure.20goal.20keeps.20expanding.20lifetimes.20chalk.23688</a></p>",
        "id": 249162382,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628712343
    },
    {
        "content": "<p>Also <a href=\"#narrow/stream/144729-wg-traits/topic/Functions.20in.20Chalk\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/Functions.20in.20Chalk</a></p>",
        "id": 249162497,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628712398
    }
]