[
    {
        "content": "<p>is there an inverse to <code>liberate_late_bound_regions</code>? Would that make any sense?</p>",
        "id": 240874780,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622498504
    },
    {
        "content": "<p>given the opaque <code>impl Future</code> that is returned from an HRTB closure, I want to see if I can \"un-liberate\" the free regions that the <code>impl Future</code> contains, to re-bind them back under the binder that they were originally bound under, before we created the librated signature to pass to <code>check_fn</code> when checking the closure</p>",
        "id": 240875342,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622499003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125273\">@mikeyhew</span> that sounds kind of suspicious</p>",
        "id": 241068837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622578357
    },
    {
        "content": "<p>can you say a bit more about the scenario you are in?</p>",
        "id": 241068849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622578363
    },
    {
        "content": "<p>basically, I've been trying to see if I could make this possible:</p>",
        "id": 241069131,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622578496
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>fn bar&lt;F&gt;(_: F)\nwhere\n    F: for&lt;&#39;a&gt; FnOnce&lt;(&amp;&#39;a i32,)&gt;,\n    for&lt;&#39;a&gt; &lt;F as FnOnce&lt;(&amp;&#39;a i32,)&gt;&gt;::Output: Future&lt;Output = String&gt;,\n{}\n\nfn baz() {\n    bar(|x| async move {\n        x.to_string()\n    });\n}\n</code></pre></div>",
        "id": 241069347,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622578610
    },
    {
        "content": "<p>right now the sig that gets inferred for the closure that I passed to <code>bar</code> doesn't have any bound lifetimes</p>",
        "id": 241069551,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622578725
    },
    {
        "content": "<p>because <code>deduce_expectations_from_obligations</code> doesn't return an expected signature, because it only looks for an <code>&lt;F as FnOnce&gt;::Output</code> projection predicate, which <code>bar</code> doesn't have</p>",
        "id": 241070365,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622579119
    },
    {
        "content": "<p>I see</p>",
        "id": 241070626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622579268
    },
    {
        "content": "<p>I was trying to make it infer an HRTB closure in the case where there is a <code>for&lt;'a&gt; F: FnOnce&lt;(&amp;'a i32)&gt;</code> trait predicate without a projection predicate. I can get it to infer a signature of <code>for&lt;'a&gt; fn(&amp;'a i32) -&gt; _</code>, where <code>_</code> is some type variable, but that type variable is the same no matter the value of <code>'a</code></p>",
        "id": 241070627,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622579268
    },
    {
        "content": "<p>I see</p>",
        "id": 241070752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622579309
    },
    {
        "content": "<p>so you wanted to generalize the return type</p>",
        "id": 241070763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622579313
    },
    {
        "content": "<p>did you have any ideas about how this could be implemented? I didn't really ask around first, I kind of just jumped into the compiler code to take a look</p>",
        "id": 241070789,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622579325
    },
    {
        "content": "<blockquote>\n<p>so you wanted to generalize the return type</p>\n</blockquote>\n<p>yes</p>",
        "id": 241070826,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622579339
    },
    {
        "content": "<p>well, so, it happens that <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> added a similar operation</p>",
        "id": 241071127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622579490
    },
    {
        "content": "<p>indeed, we were discussing how to handle it <em>properly</em></p>",
        "id": 241071164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622579508
    },
    {
        "content": "<p>this might be a use case where that'd be useful</p>",
        "id": 241071181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622579514
    },
    {
        "content": "<p>this is part of the work to normalize under binders</p>",
        "id": 241071252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622579531
    },
    {
        "content": "<p>actually, I'm basing this off of his binder refactor PR: <a href=\"https://github.com/rust-lang/rust/pull/85499\">https://github.com/rust-lang/rust/pull/85499</a></p>",
        "id": 241071440,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622579624
    },
    {
        "content": "<p>yeah so that code does a similar map</p>",
        "id": 241071687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622579734
    },
    {
        "content": "<p>but I don't know the entire context of that PR, I just used it because I was getting an error about <code>F as FnOnce&lt;(&amp;'a i32)&gt;::Output</code> not implementing <code>Future</code> which went away when I based off of his PR</p>",
        "id": 241071791,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622579774
    },
    {
        "content": "<p>I'll take a closer look at that PR and see if I can understand what it does</p>",
        "id": 241072140,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622579965
    },
    {
        "content": "<p>there's a step that he never implemented</p>",
        "id": 241072237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622580007
    },
    {
        "content": "<p>but basically if you look at the <code>fold_binder</code> method</p>",
        "id": 241072250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622580013
    },
    {
        "content": "<p>you'll see it uses a folder to go back from placeholders to bound things</p>",
        "id": 241072271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622580024
    },
    {
        "content": "<p>in the PR?</p>",
        "id": 241072289,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622580035
    },
    {
        "content": "<p>the step that was never implemented is to manage cases where the inference has not completed by the time that operation must be performed</p>",
        "id": 241072292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622580037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125273\">mikeyhew</span> <a href=\"#narrow/stream/144729-wg-traits/topic/inverse.20of.20liberate_late_bound_regions/near/241072289\">said</a>:</p>\n<blockquote>\n<p>in the PR?</p>\n</blockquote>\n<p>yes</p>",
        "id": 241072294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622580040
    },
    {
        "content": "<p>partly that's because I owe him a test case where this matters :)</p>",
        "id": 241072316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622580051
    },
    {
        "content": "<p>I think I found it, is it this comment? <a href=\"https://github.com/rust-lang/rust/pull/85499/files#r635713696\">https://github.com/rust-lang/rust/pull/85499/files#r635713696</a></p>",
        "id": 241072504,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622580140
    },
    {
        "content": "<blockquote>\n<p>I never implemented the \"normalize to an inference variable then quantify the bound vars over the placeholders when the type is fully known\" scheme, but seems like it's not needed?</p>\n</blockquote>",
        "id": 241072584,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622580187
    },
    {
        "content": "<p>sounds right</p>",
        "id": 241072752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622580252
    },
    {
        "content": "<p>that sounds like what I think I want. A way to create an inference variable for the <code>&lt;F as FnOnce&lt;(&amp;'a i32)&gt;&gt;::Output</code> type, and create a bound function signature with that inference variable as the return type</p>",
        "id": 241072902,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622580339
    },
    {
        "content": "<p>and then when it resolves, all of the <code>'a</code> regions in the resolved type need to be bound in the bound sig</p>",
        "id": 241073042,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622580394
    },
    {
        "content": "<p>how would you implement that?</p>",
        "id": 241073463,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622580558
    },
    {
        "content": "<p>you would basically add a new kind of predicate</p>",
        "id": 241073622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622580623
    },
    {
        "content": "<p><code>Generalize(?A -&gt; ?B)</code></p>",
        "id": 241073635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622580630
    },
    {
        "content": "<p>it probably needs to take a list of placeholders or something</p>",
        "id": 241073644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622580637
    },
    {
        "content": "<p>it would refuse to make progress until <code>?A</code> is \"sufficiently well known\"</p>",
        "id": 241073684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622580650
    },
    {
        "content": "<p>and/or maybe convert itself into new <code>Generalize</code> predicates if it can make progress on some parts but not others</p>",
        "id": 241073705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622580660
    },
    {
        "content": "<p>interesting...</p>",
        "id": 241073778,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622580694
    },
    {
        "content": "<p>what would be an example of <code>?A</code> and <code>?B</code>?</p>",
        "id": 241073918,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622580751
    },
    {
        "content": "<p>also would this just be in chalk, or the old trait solver as well?</p>",
        "id": 241074047,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622580814
    },
    {
        "content": "<p>did you guys talk about this strategy in here before? It would be interesting to read the discussion</p>",
        "id": 241074189,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622580878
    },
    {
        "content": "<p>I'm talking specifically about the old trait solver</p>",
        "id": 241074560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581060
    },
    {
        "content": "<p>this isn't needed in chalk because we just never do this normalization under binders operation</p>",
        "id": 241074587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581073
    },
    {
        "content": "<p>we only go \"downards\"</p>",
        "id": 241074599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581080
    },
    {
        "content": "<p>this is enabled by lazy norm</p>",
        "id": 241074635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581083
    },
    {
        "content": "<p>ah ok</p>",
        "id": 241074653,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622581088
    },
    {
        "content": "<p>we would need it, though, to do generaliation of closure signatures</p>",
        "id": 241074660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581091
    },
    {
        "content": "<p>which is something I've thought about before</p>",
        "id": 241074677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125273\">mikeyhew</span> <a href=\"#narrow/stream/144729-wg-traits/topic/inverse.20of.20liberate_late_bound_regions/near/241074189\">said</a>:</p>\n<blockquote>\n<p>did you guys talk about this strategy in here before? It would be interesting to read the discussion</p>\n</blockquote>\n<p>we did .. I think in <a class=\"stream-topic\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407\">#wg-traits &gt; GAT Bugs #76826, #76407</a></p>",
        "id": 241074709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581116
    },
    {
        "content": "<p>thanks, I read through it, couldn't follow everything but maybe will later when I know more</p>",
        "id": 241076608,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622582049
    },
    {
        "content": "<p>what does a <code>Generalize(?A -&gt; ?B)</code> predicate mean? Is it saying that <code>?A</code> has to generalize to <code>?B</code>? And would <code>?B</code> have a binder around it?</p>",
        "id": 241076616,
        "sender_full_name": "mikeyhew",
        "timestamp": 1622582054
    },
    {
        "content": "<p>probably the proper form is <code>Generalize(?A -&gt; for&lt;'a, ..., 'z&gt; ?B)</code></p>",
        "id": 241078290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622582899
    },
    {
        "content": "<p>that is, you take a type <code>?A</code> with placeholders and you generalize it into bound form where those placeholders become <code>'a...'z</code></p>",
        "id": 241078333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622582921
    }
]