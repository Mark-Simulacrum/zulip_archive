[
    {
        "content": "<p>The <a href=\"https://news.ycombinator.com/item?id=23501474\">recent post of implementing Forth in the trait system</a> made me wonder: could we implement a crate dependency resolution algorithm based on Chalk?</p>",
        "id": 200743769,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592013550
    },
    {
        "content": "<p>What did you have in mind? I'm not quite seeing the connection</p>",
        "id": 200744644,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592015037
    },
    {
        "content": "<p>Note that there's no real point here; this is idle musing.</p>",
        "id": 200745060,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592015669
    },
    {
        "content": "<p>Just that dependency resolution is a \"solve these things within these constraints\". I'm curious how close, conceptually, trait solving is to that.</p>",
        "id": 200745074,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592015711
    },
    {
        "content": "<p>I'm really not sure</p>",
        "id": 200746350,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592018074
    },
    {
        "content": "<p>I'd imagine the fact of version numbers being an ordered set of numbers makes it a relatively different problem domain?</p>\n<p>Chalk seems to deal largely with unordered thing and complete rejects ambiguous results. On the other hand, dependency resolution deals with ordered versions and usually has to pick the best option via a min/max, very rarely getting a fully unambiguous result.</p>\n<p>Maybe it'd be possible to model that in chalk? But I doubt it'd be at all useful compared to just making a separate engine with the different domain constraints in mind...</p>",
        "id": 200756662,
        "sender_full_name": "David Ross",
        "timestamp": 1592038745
    },
    {
        "content": "<p>I don't think chalk's solver is really geared to that, in part for the reasons <span class=\"user-mention\" data-user-id=\"218710\">@David Ross</span> mentioned, but also because we're increasingly tuning the engine to the needs of <em>trait solving</em> (e.g., with things like non-enumerable, builtin rules, even the setup of the recursive solver vs SLG solver)</p>",
        "id": 200760234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592044908
    }
]