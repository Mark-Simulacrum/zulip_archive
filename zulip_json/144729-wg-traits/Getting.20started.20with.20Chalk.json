[
    {
        "content": "<p>Hi! I would like to do some Chalk hacking, could somebody suggest a good issue to get started with please? (And also some tips to get started on the issue) I had a look at the issue tracker but all the issues look to be assigned already or pretty complex.</p>",
        "id": 249529799,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629060488
    },
    {
        "content": "<p>Hmm, let me look</p>",
        "id": 249530788,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629062077
    },
    {
        "content": "<p>Firstly, I wouldn't worry too much about issues being assigned. There really hasn't been any recent activity</p>",
        "id": 249530805,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629062116
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/604\">chalk#604</a> is potentially a good one</p>",
        "id": 249530847,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629062164
    },
    {
        "content": "<p>but I would have to look more into what exactly needs to be done</p>",
        "id": 249530860,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629062180
    },
    {
        "content": "<p>Digging into <a href=\"https://github.com/rust-lang/chalk/issues/587\">chalk#587</a> would be nice</p>",
        "id": 249530887,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629062278
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/518\">chalk#518</a> is also pretty easy</p>",
        "id": 249530933,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629062321
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/512\">chalk#512</a> is \"bigger\", but I think <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> had a branch that was mostly working</p>",
        "id": 249530961,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629062398
    },
    {
        "content": "<p>The canonicalization is a prereq for pushing the rustc integration further</p>",
        "id": 249531096,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629062591
    },
    {
        "content": "<p>604 seems pretty self-contained. Seems like the remaining work is just auto traits for foreign types, but I'm not clear what that means. Is it that if we have some <code>extern { type A; }</code> and <code>A</code> is used as the type of a field in a struct, then Chalk should take into account whether <code>A</code> is <code>Send</code>, etc.?</p>",
        "id": 249531401,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629063105
    },
    {
        "content": "<p>Or about deriving <code>Send</code> for <code>A</code> (which I have no idea how it works)</p>",
        "id": 249531452,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629063147
    },
    {
        "content": "<p>Oh, seens to be about the leaking of auto traits</p>",
        "id": 249531538,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629063344
    },
    {
        "content": "<p>That makes more sense</p>",
        "id": 249531539,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629063350
    },
    {
        "content": "<p>I don't quite remember :)</p>",
        "id": 249531585,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629063418
    },
    {
        "content": "<p>related: <a href=\"https://github.com/rust-lang/wg-traits/issues/26\">https://github.com/rust-lang/wg-traits/issues/26</a></p>",
        "id": 249531599,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629063477
    },
    {
        "content": "<p>Hmm, I'm not sure how this works for foreign types. Do you know where this kind of auto trait handling is done in rustc?</p>",
        "id": 249531710,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629063634
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/blob/2d2bc94c8c3aa778e191f80261c726e4777439f1/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs#L520\">https://github.com/rust-lang/rust/blob/2d2bc94c8c3aa778e191f80261c726e4777439f1/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs#L520</a></p>",
        "id": 249531728,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629063685
    },
    {
        "content": "<p>This might just be done: <a href=\"https://github.com/rust-lang/chalk/blob/master/tests/test/auto_traits.rs\">https://github.com/rust-lang/chalk/blob/master/tests/test/auto_traits.rs</a></p>",
        "id": 249531789,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629063819
    },
    {
        "content": "<p>Okay, if <a href=\"https://rust-lang.github.io/chalk/book/clauses/well_known_traits.html\">https://rust-lang.github.io/chalk/book/clauses/well_known_traits.html</a> is accurate, we need generator witness, opaque,  and foreign types</p>",
        "id": 249531912,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629064044
    },
    {
        "content": "<p>I played with that test, and the behaviour for foreign types is as expected</p>",
        "id": 249531965,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629064137
    },
    {
        "content": "<p>There is code for opaque and generator witness types</p>",
        "id": 249531981,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629064197
    },
    {
        "content": "<p>and tests</p>",
        "id": 249532037,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629064263
    },
    {
        "content": "<p>Yeah, seems like the book needs to be updated and the issue closed</p>",
        "id": 249532183,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629064537
    },
    {
        "content": "<p>I think we need to add  <code>WellKnownTrait::Generator</code></p>",
        "id": 249532245,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629064665
    },
    {
        "content": "<p>Ah yeah, that is here <a href=\"https://github.com/rust-lang/chalk/issues/363\">chalk#363</a></p>",
        "id": 249532292,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629064709
    },
    {
        "content": "<p>That wouldn't be a terrible thing to work on: adding <code>DispatchFromDyn</code> and <code>Generator</code></p>",
        "id": 249532300,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629064726
    },
    {
        "content": "<p>It would be <em>really</em> nice to finally close that issue</p>",
        "id": 249532305,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629064738
    },
    {
        "content": "<p>And then trying to clean up the last X's in <a href=\"https://rust-lang.github.io/chalk/book/clauses/well_known_traits.html\">https://rust-lang.github.io/chalk/book/clauses/well_known_traits.html</a></p>",
        "id": 249532315,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629064787
    },
    {
        "content": "<p>ok, cool, I'll take a look at that</p>",
        "id": 249532482,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629064936
    },
    {
        "content": "<p>Also, unsure why that table says <code>Unsize</code> for arrays isn't implemented: <a href=\"https://github.com/rust-lang/chalk/blob/9a8674f64fa9b6e800d80e3d4afcec5cec5910d8/chalk-solve/src/clauses/builtin_traits/unsize.rs#L320\">https://github.com/rust-lang/chalk/blob/9a8674f64fa9b6e800d80e3d4afcec5cec5910d8/chalk-solve/src/clauses/builtin_traits/unsize.rs#L320</a></p>",
        "id": 249532496,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629064970
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/9a8674f64fa9b6e800d80e3d4afcec5cec5910d8/tests/test/unsize.rs#L395\">https://github.com/rust-lang/chalk/blob/9a8674f64fa9b6e800d80e3d4afcec5cec5910d8/tests/test/unsize.rs#L395</a></p>",
        "id": 249532512,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629065007
    },
    {
        "content": "<p>Ping me if you have questions. Gonna be doing other things, so might miss a message otherwise.</p>",
        "id": 249532857,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629065560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'm trying to test the associated types in the <code>Generator</code> trait and want to check the syntax for such a goal. Is it ok to write <code>&lt;empty_gen as Generator&lt;()&gt;&gt;::Yield = ()</code>? Or do I need <code>Normalize(&lt;empty_gen as Generator&lt;()&gt;&gt;::Yield -&gt; ())</code>? I'm not sure what <code>Normalize</code> is doing?</p>",
        "id": 249544810,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629084977
    },
    {
        "content": "<p>(Neither is working, so I think there is a bug in my code too, but first things first :-) )</p>",
        "id": 249544816,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629085008
    },
    {
        "content": "<p>Either should work, I think</p>",
        "id": 249545304,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629085775
    },
    {
        "content": "<p>I think eq goals get converted to <code>ProjectionEq</code> when one is a projection</p>",
        "id": 249545362,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629085817
    },
    {
        "content": "<p>I think <code>Normalize</code> is more used: see <a href=\"https://github.com/rust-lang/chalk/blob/9a8674f64fa9b6e800d80e3d4afcec5cec5910d8/tests/test/fn_def.rs#L95\">https://github.com/rust-lang/chalk/blob/9a8674f64fa9b6e800d80e3d4afcec5cec5910d8/tests/test/fn_def.rs#L95</a> for example</p>",
        "id": 249545379,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629085858
    },
    {
        "content": "<p><code>Normalize</code> basically means \"given this impl of a trait, what is the value of this associated type\"</p>",
        "id": 249545401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629085915
    },
    {
        "content": "<p>Well, specifically, what is the <em>defined</em> value</p>",
        "id": 249545446,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629085935
    },
    {
        "content": "<p>(versus <code>ProjectionEq</code>, which can have an answer of associated type placeholder)</p>",
        "id": 249545453,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629085960
    },
    {
        "content": "<p>\"specifically, what is the defined value\" - what does this mean?</p>",
        "id": 249545885,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629086608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'm looking at the Fn traits as a reference, but I think they are a bit more complicated due to early and late bound regions? In particular, when pushing clauses, Chalk uses the substitution from the TyKind and <code>builder::push_binders</code>. With generators, it seems like I should only use the substitution from the TyKind, and don't need to push_binders. Is that correct?</p>",
        "id": 249547529,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629088106
    },
    {
        "content": "<p>Another question, when dealing with associated types for FnOnce,  Chalk generalizes the self type (comment: \"If <code>self_ty</code> contains bound vars, we want to universally quantify them.\"). Can generators have generic self_ty? I'm guessing not because they are like closures, but I'm not sure</p>",
        "id": 249550685,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629091897
    },
    {
        "content": "<p>PR for Generator trait: <a href=\"https://github.com/rust-lang/chalk/pull/723\">https://github.com/rust-lang/chalk/pull/723</a></p>",
        "id": 249649599,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629148947
    },
    {
        "content": "<p>(I think I figured out the answers to the above questions)</p>",
        "id": 249649616,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629148962
    },
    {
        "content": "<p>Sorry I couldn't respond yesterday. I'll try to take a look at the PR soon</p>",
        "id": 249724374,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629209512
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 249772091,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629230909
    },
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> did you get a chance to look at the PR?</p>",
        "id": 250241436,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629586394
    },
    {
        "content": "<p>I took a brief skim and I didn't see anything off the bat. Going to look here in a bit</p>",
        "id": 250243230,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629588911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256841\">@Nick Cameron</span> I just have one question, see my comment</p>",
        "id": 250245069,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629592008
    },
    {
        "content": "<p>But looks pretty good to me</p>",
        "id": 250245072,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629592014
    },
    {
        "content": "<p>Thanks for the review (and your help earlier)!</p>",
        "id": 250253551,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629605653
    },
    {
        "content": "<p>I've replied to the question</p>",
        "id": 250253552,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629605662
    },
    {
        "content": "<p>r+ed, misread :)</p>",
        "id": 250253937,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629606414
    },
    {
        "content": "<p>Nice job btw</p>",
        "id": 250253938,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629606421
    },
    {
        "content": "<p>still planning on doing <code>DispatchFromDyn</code>?</p>",
        "id": 250253942,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629606430
    },
    {
        "content": "<p>Yes, will get it done early this week</p>",
        "id": 250260041,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629616528
    },
    {
        "content": "<p>Well, that was optimistic! I did get started this evening though :-)</p>",
        "id": 250742278,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1629968106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> is there a pretty printer (or just a printer) for Chalk ASTs?</p>",
        "id": 251017087,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1630113966
    },
    {
        "content": "<p>Well, for Chalk <em>programs</em>, there is</p>",
        "id": 251017120,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630114016
    },
    {
        "content": "<p>One second</p>",
        "id": 251017125,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630114022
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/chalk/blob/dbe241e18301cb4688c4b9c277d78dae2913073a/chalk-solve/src/logging_db.rs#L32\">https://github.com/rust-lang/chalk/blob/dbe241e18301cb4688c4b9c277d78dae2913073a/chalk-solve/src/logging_db.rs#L32</a></p>",
        "id": 251017248,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630114169
    },
    {
        "content": "<p>I don't think its fully complete (for things like closures) but I might be wrong</p>",
        "id": 251017345,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630114267
    },
    {
        "content": "<p>Cool, thanks!</p>",
        "id": 251018867,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1630116020
    },
    {
        "content": "<p>So, it seems Chalk is not aware of size and alignment of types. Is that correct? Should I add this information? (A WF requirement of DispatchFromDyn is for fields which are not 1-ZST)</p>",
        "id": 251169033,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1630282685
    },
    {
        "content": "<p>Yep, this is correct. That needs to be added to the rust_ir types</p>",
        "id": 251169181,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630282854
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 251169282,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1630282970
    },
    {
        "content": "<p>Some info is directly on AdtDatum (e.g., flags, kind), and some needs looking up in a DB (e.g., the repr). What is the reasoning for where some data should go?</p>",
        "id": 251170672,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1630284390
    },
    {
        "content": "<p>I think we eventually want to transition more to using functions on DB</p>",
        "id": 251171352,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630285171
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/chalk/issues/518\">chalk#518</a></p>",
        "id": 251171475,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630285237
    },
    {
        "content": "<p>And <a href=\"https://github.com/rust-lang/chalk/issues/506\">chalk#506</a></p>",
        "id": 251171484,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630285249
    }
]