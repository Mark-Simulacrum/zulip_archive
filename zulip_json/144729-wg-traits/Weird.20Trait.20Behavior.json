[
    {
        "content": "<p>I've found something rather fun. We can write the following fairly standard code, which compiles and seems fine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Super</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">SuperTy</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">provide</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">SuperTy</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Sub</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">SubTy</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">provide</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">SubTy</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Sub</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Super</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">SuperTy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Sub</span><span class=\"o\">&gt;</span>::<span class=\"n\">SubTy</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">provide</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">SuperTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Sub</span><span class=\"o\">&gt;</span>::<span class=\"n\">provide</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But if I go and add in a <code>where Self: Super</code> bound to the <code>Sub</code> trait definition, ie <code>trait Sub {</code> becomes <code>trait Sub: Super {</code>, then this causes an error, but not at all the one I would expect:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n  --&gt; src/lib.rs:17:9\n   |\n16 |     fn provide() -&gt; Self::SuperTy {\n   |                     ------------- expected `&lt;T as Super&gt;::SuperTy` because of return type\n17 |         &lt;Self as Sub&gt;::provide()\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected Super::SuperTy, found Sub::SubTy\n   |\n   = note: expected associated type `&lt;T as Super&gt;::SuperTy`\n              found associated type `&lt;T as Sub&gt;::SubTy`\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `playground` due to previous error\n</code></pre></div>\n<p>Is this either known or expected? Is it a bug?</p>",
        "id": 261434940,
        "sender_full_name": "Jake",
        "timestamp": 1636919108
    },
    {
        "content": "<p>To be honest, I wouldn't expect the change to cause an error at all and would actually expect it to compile, but this error is definitely not the one I was expecting</p>",
        "id": 261435001,
        "sender_full_name": "Jake",
        "timestamp": 1636919207
    },
    {
        "content": "<p>I think it's a known issue that bounds in where clauses prevent normalization through <code>impl</code>s. In this case the <code>T: Super</code> bound from elaborating the <code>T: Sub</code> bound on the impl is preventing normalizing the return type.</p>",
        "id": 261436193,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1636920937
    }
]