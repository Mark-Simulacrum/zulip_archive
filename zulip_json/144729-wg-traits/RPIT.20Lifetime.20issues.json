[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and I discussed this previously (and <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> chipped in a bit). I think we want to use <code>for&lt;'a&gt;</code> (or a new keyword, but preferably reuse that one) to bind such lifetimes.</p>",
        "id": 155109123,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547493941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span></p>",
        "id": 155109132,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547493945
    },
    {
        "content": "<p>^</p>",
        "id": 155109212,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547493976
    },
    {
        "content": "<p>I guess the semantics would be quite simple: capturing the variables and doing nothing.</p>",
        "id": 155109274,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494044
    },
    {
        "content": "<p>Maybe paste in the issues for context here?</p>",
        "id": 155109289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547494055
    },
    {
        "content": "<p>appropriate diagnostics might be a bit harder</p>",
        "id": 155109290,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494056
    },
    {
        "content": "<p>I want to be sure I know which issues you are talking about</p>",
        "id": 155109304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547494070
    },
    {
        "content": "<p>Here they are.</p>",
        "id": 155109306,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494072
    },
    {
        "content": "<p>1. <a href=\"https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999\">https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999</a> (@eddyb has some thoughts about this, but he hasn't been around for a while now, and @nikomatsakis understands it anyway)<br>\n2. <a href=\"https://github.com/rust-lang/rust/issues/42940\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/42940\">https://github.com/rust-lang/rust/issues/42940</a><br>\n3. Possibly <a href=\"https://github.com/rust-lang/rust/issues/55929\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55929\">https://github.com/rust-lang/rust/issues/55929</a> is related to or even the same as 1?</p>",
        "id": 155109310,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494078
    },
    {
        "content": "<p>I'm not sure what the \"issue\" with (1) is</p>",
        "id": 155109411,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494119
    },
    {
        "content": "<p>It was addressed in <a href=\"https://github.com/rust-lang/rust/pull/49041\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/49041\">https://github.com/rust-lang/rust/pull/49041</a></p>",
        "id": 155109476,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494159
    },
    {
        "content": "<p>in order to capture lifetimes, you have to add a <code>Captures</code> trait in order to pick up the lifetime in the bounds</p>",
        "id": 155109613,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494234
    },
    {
        "content": "<p>Is there something else going on there that you think we should resolve?</p>",
        "id": 155109660,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494267
    },
    {
        "content": "<p>\"The key thing here is that TyCtxt is invariant w/r/t 'tcx and 'gcx, so they must appear in the return type. And yet only 'cx and 'tcx appear in the impl trait bounds, so only those two lifetimes are supposed to be \"captured\". The old compiler was accepting this because 'gcx: 'cx, but that's not really correct if you think about the desugaring we have in mind. That desugaring would create an abstract type like this:\"</p>",
        "id": 155109662,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494269
    },
    {
        "content": "<p>that's the key bit</p>",
        "id": 155109670,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> I started doing that, but <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> doesn't like it, and prefers a language-based solution.</p>",
        "id": 155109676,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494283
    },
    {
        "content": "<p>What sort of \"language-based\" solution?</p>",
        "id": 155109778,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494350
    },
    {
        "content": "<p>(I'm curious because some kind of language-level LUB('a, 'b, ...) would also fix my issues with <code>async fn</code>)</p>",
        "id": 155109908,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494446
    },
    {
        "content": "<p>as well as fixing (2), I believe</p>",
        "id": 155109924,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494471
    },
    {
        "content": "<p>(or at least giving a workaround)</p>",
        "id": 155109930,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494477
    },
    {
        "content": "<p>See my first comment in this thread. :-)</p>",
        "id": 155109935,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494480
    },
    {
        "content": "<p>At least, that's what we talked about before.</p>",
        "id": 155109946,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494489
    },
    {
        "content": "<p>It need not be the only possible solution though...</p>",
        "id": 155109956,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494494
    },
    {
        "content": "<p>using <code>for&lt;'a&gt;</code>?</p>",
        "id": 155109962,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494501
    },
    {
        "content": "<p>/me waits for <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> to chip in.</p>",
        "id": 155109976,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494503
    },
    {
        "content": "<p>yeah</p>",
        "id": 155109984,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494506
    },
    {
        "content": "<p>can you give an example?</p>",
        "id": 155109985,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494506
    },
    {
        "content": "<p>I think something like <code>fn foo(self) -&gt; impl for&lt;'gcx&gt; Iterator&lt;Item = &amp;'tcx Foo&gt; + 'cx {</code></p>",
        "id": 155110108,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494613
    },
    {
        "content": "<p>that seems misleading to me</p>",
        "id": 155110134,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494652
    },
    {
        "content": "<p>alternatively, we build it into the <code>impl</code> syntax, e.g. <code>impl&lt;'gcx&gt; Iterator...</code></p>",
        "id": 155110135,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494652
    },
    {
        "content": "<p>because <code>for</code> there looks like part of the bound</p>",
        "id": 155110145,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494662
    },
    {
        "content": "<p>it is part of the bound</p>",
        "id": 155110154,
        "sender_full_name": "centril",
        "timestamp": 1547494676
    },
    {
        "content": "<p>and I'd expect the bound to be quantified over <code>'gcx</code></p>",
        "id": 155110157,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494677
    },
    {
        "content": "<p>sorry, your thumb indicates that you agree, but I think the feature that is being suggested here is different?</p>",
        "id": 155110218,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494716
    },
    {
        "content": "<p>okay, move it outside the <code>impl</code> then? or take my alternative syntax?</p>",
        "id": 155110229,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494726
    },
    {
        "content": "<p>that it actually makes it part of the <code>extistentail type&lt;...&gt;</code> rather than the bound on the RHS of <code>:</code></p>",
        "id": 155110242,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> maybe?</p>",
        "id": 155110261,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547494751
    },
    {
        "content": "<p>I'd expect <code>impl&lt;'a&gt; Foo&lt;'a&gt; + Bar&lt;'a&gt;</code> to be equivalent to <code>impl for&lt;'a&gt; (Foo&lt;'a&gt; + Bar&lt;'a&gt;)</code></p>",
        "id": 155110272,
        "sender_full_name": "centril",
        "timestamp": 1547494774
    },
    {
        "content": "<p>(which you cannot express)</p>",
        "id": 155110287,
        "sender_full_name": "centril",
        "timestamp": 1547494786
    },
    {
        "content": "<p>yes...</p>",
        "id": 155110295,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thoughts on syntax? options:<br>\n1. <code>impl for&lt;'a&gt; Foo&lt;'a&gt;</code><br>\n2. <code>for&lt;'a&gt; impl Foo&lt;'a&gt;</code><br>\n3. <code>impl&lt;'a&gt; Foo&lt;'a&gt;</code><br>\n4. other?</p>",
        "id": 155110453,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> should I put you down for these things in the meeting notes; is that okay? (I think you know what needs to be tackle, syntax pending)</p>",
        "id": 155110541,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494927
    },
    {
        "content": "<p>and 2. doesn't require any syntactical enhancements</p>",
        "id": 155110556,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494950
    },
    {
        "content": "<p>that is, issue 2. <a href=\"https://github.com/rust-lang/rust/issues/42940\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/42940\">https://github.com/rust-lang/rust/issues/42940</a></p>",
        "id": 155110557,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547494950
    },
    {
        "content": "<p>So...?</p>",
        "id": 155111733,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547495928
    },
    {
        "content": "<p>i'm not sure I agree that something needs to happen here</p>",
        "id": 155112038,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496128
    },
    {
        "content": "<p>and certainly not without an RFC</p>",
        "id": 155112047,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496137
    },
    {
        "content": "<p>although we could possibly justify it as \"experimentation\"</p>",
        "id": 155112077,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496166
    },
    {
        "content": "<p>but the motivation (not using <code>Captures&lt;...&gt;</code>) seems unclear to me</p>",
        "id": 155112105,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496182
    },
    {
        "content": "<p>Also there's an interesting parallel here between <code>Captures</code> and <code>PhantomData</code></p>",
        "id": 155112140,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496212
    },
    {
        "content": "<p>I wonder if there's room for <code>PhantomTrait</code> or something</p>",
        "id": 155112149,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496221
    },
    {
        "content": "<p>can someone TL;DR the lifetime issues under discussion here?</p>",
        "id": 155112226,
        "sender_full_name": "centril",
        "timestamp": 1547496254
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/42940\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/42940\">https://github.com/rust-lang/rust/issues/42940</a> is the more interesting one to me</p>",
        "id": 155112244,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496276
    },
    {
        "content": "<p>I think that's the only one that just needs \"fixing\"</p>",
        "id": 155112253,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496282
    },
    {
        "content": "<p><code>for&lt;'a&gt; impl Foo&lt;'a&gt;</code> would be a higher ranked type; <code>impl&lt;'a&gt; Foo&lt;'a&gt;</code> would just be sugar for <code>impl for&lt;'a&gt; Foo&lt;'a&gt;</code></p>",
        "id": 155112301,
        "sender_full_name": "centril",
        "timestamp": 1547496333
    },
    {
        "content": "<p>It's just a bug</p>",
        "id": 155112302,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I think you're getting mixed up--none of this has to do with higher-rankedness</p>",
        "id": 155112324,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496359
    },
    {
        "content": "<p>that's why I don't want to use this syntax</p>",
        "id": 155112372,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496365
    },
    {
        "content": "<p>IIUC <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> is trying to get another way to spell <code>Captures&lt;...&gt;</code></p>",
        "id": 155112396,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496388
    },
    {
        "content": "<p>which is more about variance than about higher-rankedness</p>",
        "id": 155112416,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>  I'm not mixing up anything, I'm giving expected semantics to the syntaxes <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  referenced</p>",
        "id": 155112419,
        "sender_full_name": "centril",
        "timestamp": 1547496406
    },
    {
        "content": "<p>(i.e. 1-3)</p>",
        "id": 155112444,
        "sender_full_name": "centril",
        "timestamp": 1547496422
    },
    {
        "content": "<p>I'm saying those aren't the semantics he's looking for</p>",
        "id": 155112456,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> sure, that's my point :P</p>",
        "id": 155112460,
        "sender_full_name": "centril",
        "timestamp": 1547496441
    },
    {
        "content": "<p>unless I'm confused (which is possible)</p>",
        "id": 155112461,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496443
    },
    {
        "content": "<p>Okay, so we're on the same page that we shouldn't reuse <code>for</code> or <code>impl</code> to add captured lifetimes to <code>impl Trait</code></p>",
        "id": 155112478,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496473
    },
    {
        "content": "<p>yep</p>",
        "id": 155112532,
        "sender_full_name": "centril",
        "timestamp": 1547496486
    },
    {
        "content": "<p>when was <code>Captures&lt;...&gt;</code> needed again?</p>",
        "id": 155112539,
        "sender_full_name": "centril",
        "timestamp": 1547496503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> does that make sense to you? or did I get mixed up?</p>",
        "id": 155112542,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> when you have a return type that is quantified over a lifetime but you don't want to require that the type outlive that lifetime</p>",
        "id": 155112579,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496553
    },
    {
        "content": "<p>it <em>can't live longer than</em> that lifetime</p>",
        "id": 155112588,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496559
    },
    {
        "content": "<p>but not <em>as long as</em></p>",
        "id": 155112590,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496565
    },
    {
        "content": "<p>e.g. <code>fn foo&lt;'a, 'b: 'a&gt;(x: &amp;'a str, y: &amp;'b str) -&gt; impl Debug + Captures&lt;'b&gt; + 'a { (x, y) }</code></p>",
        "id": 155112677,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496623
    },
    {
        "content": "<p>it doesn't live as long as <code>'b</code></p>",
        "id": 155112683,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496632
    },
    {
        "content": "<p>but it captures <code>'b</code></p>",
        "id": 155112689,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547496638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> hmm, is this <code>Captures&lt;'a&gt;</code> a common need?</p>",
        "id": 155113963,
        "sender_full_name": "centril",
        "timestamp": 1547497723
    },
    {
        "content": "<p>not <em>super</em> common, but it happens</p>",
        "id": 155113987,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547497740
    },
    {
        "content": "<p>it's in rustc in several places</p>",
        "id": 155114003,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547497746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>  hmm remind me again... what is the variance of <code>Captures&lt;'b&gt;</code> ?</p>",
        "id": 155114236,
        "sender_full_name": "centril",
        "timestamp": 1547497909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I already linked to them above.</p>",
        "id": 155118308,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547499798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> I wasn't against using Captures, but it seems Niko wanted to avoid it.</p>",
        "id": 155118489,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547499848
    },
    {
        "content": "<p>So let's get his reasoning</p>",
        "id": 155118499,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547499855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> are you good to work on issue 2 until we decide that?</p>",
        "id": 155120197,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547500917
    },
    {
        "content": "<p>also, <a href=\"https://github.com/rust-lang/rust/pull/56047\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56047\">https://github.com/rust-lang/rust/pull/56047</a></p>",
        "id": 155120351,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547501039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <code>Captures&lt;'a&gt;</code> would surely be covariant, since it's an empty trait</p>",
        "id": 155132376,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547511351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Could we kindly get your reasoning on 1 and why you want a solution built into the language rather than a <code>Captures</code> trait or such? I know you expressed this on my closed PR, but I think elaboration would be nice, especially for <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>.</p>",
        "id": 155227256,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547612570
    },
    {
        "content": "<p>sorry y'all I was late on this thread, catching up now</p>",
        "id": 155337791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547734588
    },
    {
        "content": "<p>to go back, the problem is when you have some function like <code>fn foo(..) -&gt; impl Iterator&lt;Item = &amp;'a Blah&gt;</code> but it references some lifetime like <code>'tcx</code></p>",
        "id": 155337879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547734648
    },
    {
        "content": "<p>my <em>preference</em> here would be to just accept the code as is</p>",
        "id": 155337891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547734657
    },
    {
        "content": "<p>but I want to figure out how we <em>justify</em> that :)</p>",
        "id": 155337897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547734663
    },
    {
        "content": "<p>as I wrote.. somewhere... you <em>can</em> hide lifetimes using a <code>dyn</code> type</p>",
        "id": 155337918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547734682
    },
    {
        "content": "<p>(you do need some common \"denominator\", though)</p>",
        "id": 155337968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547734698
    },
    {
        "content": "<p>i.e., a bound</p>",
        "id": 155337970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547734701
    },
    {
        "content": "<p>but I am now looking at <a href=\"https://github.com/rust-lang/rust/issues/42940\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/42940\">#42940</a> and trying to catch up with what <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> was saying</p>",
        "id": 155338067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547734797
    },
    {
        "content": "<p>it seems like we should split the discussion a bit further</p>",
        "id": 155338079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547734802
    },
    {
        "content": "<p>OK, re: <a href=\"https://github.com/rust-lang/rust/issues/42940\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/42940\">#42940</a>, I posted a <a href=\"https://github.com/rust-lang/rust/issues/42940#issuecomment-455198309\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/42940#issuecomment-455198309\">comment with my thoughts</a>. The TL;DR is \"seems like a bug\" and the fix, while non-trivial, is straight-forward-ish I think. <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> maybe you want to work on it?</p>",
        "id": 155340538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547736689
    },
    {
        "content": "<p>Yeah, I can work on it, thanks for your comments. And wrt <a href=\"https://github.com/rust-lang/rust/issues/42940\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/42940\">#42940</a> I agree that it should \"just work\" but I don't know how to make that clear in the existential type desugaring. It reminds me a bit of the closure type replacement issue where you could imagine that we just replaced all lifetimes with the explicitly-mentioned bound and that the change due to invalid variance was just \"unobservable\", but that seems like quite a hack and not really a good justification in any formal-ish sense</p>",
        "id": 155347385,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547741470
    },
    {
        "content": "<p>right, I've been hoping to put off that question</p>",
        "id": 155347419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547741504
    },
    {
        "content": "<p>which reminds me that I thought of a better variant of the captures trait...</p>",
        "id": 155347424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547741511
    },
    {
        "content": "<p>right now I think it is <code>Captures&lt;'a&gt;</code>, but that leads to trouble if you have more than one lifetime</p>",
        "id": 155347438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547741521
    },
    {
        "content": "<p>I <em>think</em> if we did <code>Captures&lt;T&gt;</code> instead, it would be better</p>",
        "id": 155347485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547741530
    },
    {
        "content": "<p>and then you could do e.g. <code>impl Foo + Captures&lt;(&amp;'a (), &amp;'b ())&gt;</code></p>",
        "id": 155347498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547741544
    },
    {
        "content": "<p>still a horrible hack</p>",
        "id": 155347500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547741546
    },
    {
        "content": "<p>but could be useful in rustc anyway</p>",
        "id": 155347513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547741558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> So the idea is to fix both of these problems by making the code “just work”?</p>",
        "id": 155351775,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547745034
    },
    {
        "content": "<p>Yeah, <a href=\"https://github.com/rust-lang/rust/issues/42940\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/42940\">#42940</a> was always just a bug (albeit a subtle one), and the other thing I think niko and I agree that we should just allow the code without having to explicitly mention the lifetimes. Still not sure exactly what it should desugar to or how we should explain the fact that it works, though</p>",
        "id": 155354047,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547747099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> Yeah, I've been thinking about that too, and it's a tricky one... maybe it can be justified in an analogous way to <code>dyn Trait</code> though? Anyway, do please let me know if you and Niko decide on anything, just out of curiosity.</p>",
        "id": 156400592,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547846435
    },
    {
        "content": "<p>I feel like the answer is that we'd have some kind of <code>exists&lt;'a&gt; Type</code> notion</p>",
        "id": 156401706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547847478
    },
    {
        "content": "<p>and just try to convince ourselves that it will work out ;)</p>",
        "id": 156401756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547847489
    },
    {
        "content": "<p>it feels like it has to be ok</p>",
        "id": 156401765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547847501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> why would you have that for <code>impl Trait</code> but not for <code>dyn Trait</code>?</p>",
        "id": 156401791,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547847541
    },
    {
        "content": "<p>dyn Trait <em>does</em> have that, in some sense. That is, <code>dyn Trait</code> is basically <code>exists T: Trait</code></p>",
        "id": 156402011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547847730
    },
    {
        "content": "<p>oh, true</p>",
        "id": 156402024,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547847754
    },
    {
        "content": "<p>so what I am saying is -- conceptually -- <code>impl Trait</code> would be inferred not to <code>Foo&lt;'a, 'gcx&gt;</code> but <code>exists&lt;'gcx&gt; Foo&lt;'gcx&gt;</code></p>",
        "id": 156402029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547847766
    },
    {
        "content": "<p>actually chalk already has this kind of type, iirc</p>",
        "id": 156402034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547847773
    },
    {
        "content": "<p>well, not exactly</p>",
        "id": 156402048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547847784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh right, so there would be no syntactical additions?</p>",
        "id": 156402053,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547847791
    },
    {
        "content": "<p>but I mean that <code>forall</code> types are distinct from fns</p>",
        "id": 156402055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547847791
    },
    {
        "content": "<p>yeah I don't mean that the syntax changes</p>",
        "id": 156402060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547847800
    },
    {
        "content": "<p>sounds reasonable</p>",
        "id": 156402066,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547847808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so correct me if I'm wrong, this still wouldn't make <code>impl Trait</code> existential in nature, but it would (just) implicitly existentially quantify invariant lifetimes?</p>",
        "id": 156402922,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547848447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> correct, this is what I have in mind</p>",
        "id": 156403805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547849227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay, great. the question then is: is <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> comfortable enough with Chalk to tackle this too, or should it be assigned to someone else? (Sadly I'm definitely not comfortable enough, but maybe that will change some day.)</p>",
        "id": 156403948,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547849348
    },
    {
        "content": "<p>I definitely don't know enough to model this today</p>",
        "id": 156404956,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547850365
    },
    {
        "content": "<p>but I'd be happy to work on learning</p>",
        "id": 156404962,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547850371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> I want to learn about Chalk too. the \"technical deep dive\" should be coming up soon... maybe one (or both) of us can take it on after then?</p>",
        "id": 156404974,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547850405
    },
    {
        "content": "<p>at least, if it's next week (as I believe it is)</p>",
        "id": 156404979,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547850419
    },
    {
        "content": "<p>well, next week we were going to focus on trait objects, but not \"all of chalk\" -- still, I'd be happy to schedule some time to talk this stuff through in an exploratory fashion (probably with both of y'all and whomever else wants to)</p>",
        "id": 156405253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547850670
    },
    {
        "content": "<p>(we could record and post too)</p>",
        "id": 156405256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547850678
    },
    {
        "content": "<p>I suspect the end result of all of this is that we'll basically just wind up removing the check we added to make the existing code an error ...</p>",
        "id": 156405378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547850785
    },
    {
        "content": "<p>Yeah, that was sort of what I was wondering ;)</p>",
        "id": 156405795,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547851227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> It seems like the actual task here is to just open a PR reverting that change</p>",
        "id": 156405817,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547851257
    },
    {
        "content": "<p>now that we're comfortable that there exists <em>some way</em> to model this more formally</p>",
        "id": 156405831,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547851275
    },
    {
        "content": "<p>(provided you actually do believe that now)</p>",
        "id": 156405839,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547851301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ostensibly <code>fn foo(x: impl Trait) { ... }</code> ==&gt; <code>fn foo(x: exists&lt;T: Trait&gt; T)</code> ==&gt; <code>fn foo&lt;T: Trait&gt;(x: T)</code> whereas <code>fn foo() -&gt; impl Trait</code> ==&gt; <code>exists&lt;T: Trait&gt; fn foo()</code> but <em>not</em> <code>fn foo() -&gt; exists&lt;T: Trait&gt; T</code></p>",
        "id": 156406011,
        "sender_full_name": "centril",
        "timestamp": 1547851475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> sounds fair. so we don't need to model this in Chalk then? :-)</p>",
        "id": 156407220,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547852769
    },
    {
        "content": "<p>I mean, it should probably be done at some point</p>",
        "id": 156408733,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547854743
    },
    {
        "content": "<p>but it's not a blocker for resolving the issue IMO</p>",
        "id": 156408741,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547854751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> from what I've just heard, I agree, yes.</p>",
        "id": 156408997,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547855092
    },
    {
        "content": "<p>had any luck with the other issue yet?</p>",
        "id": 156409001,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547855097
    },
    {
        "content": "<p>or still trying to find time to look at it?</p>",
        "id": 156409013,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547855105
    },
    {
        "content": "<p>I haven't had time yet</p>",
        "id": 156409098,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547855194
    },
    {
        "content": "<p>If you have time, feel free to go at it</p>",
        "id": 156409107,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547855206
    },
    {
        "content": "<p>but I have a several day latency on actually having time to do anything :)</p>",
        "id": 156409115,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547855218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>  I know the feeling :P</p>",
        "id": 156409127,
        "sender_full_name": "centril",
        "timestamp": 1547855252
    },
    {
        "content": "<p>hehe, yeah, that's not uncommon I also find! I feel you're legitimately in a better position to make this fix, so let's touch base on the wg-traits meeting on Monday, and decide then (if you haven't started by then) :-)</p>",
        "id": 156410117,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547856373
    },
    {
        "content": "<blockquote>\n<p>now that we're comfortable that there exists <em>some way</em> to model this more formally</p>\n</blockquote>\n<p>I mean I always believed that, but that's not the same as sort of <em>doing</em> it and convincing ourselves we're not messing something up. I guess though I could be persuaded to go ahead and revert the check on the premise that it seems almost certainly correct, and we'll deal with any unsoundness as we ever do :P</p>",
        "id": 156637562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548189668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> I see your PR for issue (1). Good stuff. I think that covers (3) too. Will you be tackling (2) afterwards, out of curiosity?</p>",
        "id": 156739577,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548291766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> yeah I was going to</p>",
        "id": 156746409,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1548301670
    },
    {
        "content": "<p>but I haven't had time yet</p>",
        "id": 156746410,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1548301676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> Okay cool. :-)</p>",
        "id": 156746760,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548302270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Does <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>'s bug report and my suggestion make sense on <a href=\"https://github.com/rust-lang/rust/pull/57870\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57870\">https://github.com/rust-lang/rust/pull/57870</a> ?</p>",
        "id": 157043612,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548698238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so, it turns out I might need to speak to you about this after all... if you have time. the fix isn't as obvious as I'd hoped!</p>",
        "id": 161530806,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553355958
    },
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>, what I was imagining is that we need some sort of \"bound\"</p>",
        "id": 161672351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538171
    },
    {
        "content": "<p>In other words, when you \"hide\" lifetimes with <code>dyn Trait</code>, you can only do it because we have a lifetime bound <code>'b</code> on <code>dyn Trait</code> (i.e., <code>dyn Trait + 'b</code>) and the hidden type must outlive <code>'b</code></p>",
        "id": 161672432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538211
    },
    {
        "content": "<p>It sounds like you were roughly coming to the same conclusion in that PR</p>",
        "id": 161672446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538223
    },
    {
        "content": "<p>yeah</p>",
        "id": 161672451,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538227
    },
    {
        "content": "<p>though didn't quite eget there</p>",
        "id": 161672455,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538231
    },
    {
        "content": "<p>which I agree with</p>",
        "id": 161672457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538232
    },
    {
        "content": "<p>I'm not exactly sure what form this should take</p>",
        "id": 161672481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538241
    },
    {
        "content": "<p>but basically we can't \"ignore' lifetimes unless there is <em>some</em> named lifetime that <em>is</em> captured which they outlive</p>",
        "id": 161672539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538257
    },
    {
        "content": "<p>did you see matthewjasper's tricky way to create unsound behaviour?</p>",
        "id": 161672540,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538260
    },
    {
        "content": "<p>(a new one)</p>",
        "id": 161672543,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538262
    },
    {
        "content": "<p>right</p>",
        "id": 161672546,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538265
    },
    {
        "content": "<p>that makes sense, I think....</p>",
        "id": 161672551,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538270
    },
    {
        "content": "<p>I'm reading what they wrote now</p>",
        "id": 161672609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538307
    },
    {
        "content": "<p>well ok so the problem is</p>",
        "id": 161672617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538312
    },
    {
        "content": "<p>yeah, this makes sense</p>",
        "id": 161672620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538315
    },
    {
        "content": "<p>so basically we can only allow this hiding if <code>opaque_defn.has_required_region_bounds</code>?</p>",
        "id": 161672628,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538326
    },
    {
        "content": "<p>that condition being necessary but not sufficient</p>",
        "id": 161672640,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538337
    },
    {
        "content": "<p>I think if you combine it with the condition I currently have, that may be enough then?</p>",
        "id": 161672653,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538348
    },
    {
        "content": "<p>so, when I was talking earlier, I mentioned that the way I wanted to think about this was basically \"as if\" we introduced an existential type construct</p>",
        "id": 161672710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538364
    },
    {
        "content": "<p>in what sense? RPIT is already \"kind of\" existential. :-)</p>",
        "id": 161672804,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538418
    },
    {
        "content": "<p>not really</p>",
        "id": 161672834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538435
    },
    {
        "content": "<p>I mean not in the sense I mean</p>",
        "id": 161672846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538440
    },
    {
        "content": "<p>i.e., the hidden type in <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>'s example is <code>Rc&lt;RefCell&lt;&amp;'b T&gt;&gt;</code> -- but that doesn't work beacuse it names <code>'b</code></p>",
        "id": 161672859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538449
    },
    {
        "content": "<p>the hidden type would have to be <code>exists&lt;'b&gt; Rc&lt;RefCell&lt;&amp;'b T&gt;&gt;</code></p>",
        "id": 161672877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538463
    },
    {
        "content": "<p>er</p>",
        "id": 161672885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538468
    },
    {
        "content": "<p><code>exists&lt;'b: 'a&gt;  Rc&lt;RefCell&lt;&amp;'b T&gt;&gt;</code></p>",
        "id": 161672896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538479
    },
    {
        "content": "<p>and the key point here is that this would not implement <code>Swap</code></p>",
        "id": 161672946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538486
    },
    {
        "content": "<p>because <code>Swap</code> is implemented for <code>Rc&lt;RefCell&lt;&amp;'b T&gt;&gt;</code>, not <code>exists&lt;...&gt; ...</code></p>",
        "id": 161672972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538505
    },
    {
        "content": "<p>anyway, this all feels tricky to me</p>",
        "id": 161672986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538517
    },
    {
        "content": "<p>which is why I've been discouraging us from pushing too hard :)</p>",
        "id": 161672995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538523
    },
    {
        "content": "<p>(though <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>'s example is a very good one)</p>",
        "id": 161673004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538538
    },
    {
        "content": "<p>and basically highlights where using a \"real\" existential type would start to differ from just ignoring stuff</p>",
        "id": 161673062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538560
    },
    {
        "content": "<p>that said, there is a <em>different but related</em> area that might be worth pushing on</p>",
        "id": 161673104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538584
    },
    {
        "content": "<p>that was blocking some of the async-await stuff</p>",
        "id": 161673118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538595
    },
    {
        "content": "<p>yeah...</p>",
        "id": 161673186,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538610
    },
    {
        "content": "<p>hmm</p>",
        "id": 161673190,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538611
    },
    {
        "content": "<p>I spent a while <a href=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/Lifetime.20Fixes/near/161160286\" title=\"#narrow/stream/187312-t-compiler.2Fwg-async-await/topic/Lifetime.20Fixes/near/161160286\">outlining the problem/possible solutions</a> to <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> over in <a class=\"stream\" data-stream-id=\"187312\" href=\"/#narrow/stream/187312-t-compiler.2Fwg-async-await\">#t-compiler/wg-async-await</a></p>",
        "id": 161673246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538643
    },
    {
        "content": "<p>do you have an example of where adding <code>+ 'b</code> to the bounds isn't good enough?</p>",
        "id": 161673251,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538645
    },
    {
        "content": "<p>okay</p>",
        "id": 161673253,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538646
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 161673256,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538650
    },
    {
        "content": "<blockquote>\n<p>do you have an example of where adding <code>+ 'b</code> to the bounds isn't good enough?</p>\n</blockquote>\n<p>well that is good enough</p>",
        "id": 161673262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538655
    },
    {
        "content": "<p>but that changes the whole problem</p>",
        "id": 161673270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538660
    },
    {
        "content": "<p>that is, the problem is to find a way where we can have a type that includes lifetimes</p>",
        "id": 161673293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538670
    },
    {
        "content": "<p>which are NOT part of the trait bounds</p>",
        "id": 161673307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538679
    },
    {
        "content": "<p>i.e., which don't appear in the capture list</p>",
        "id": 161673312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538684
    },
    {
        "content": "<p>and I think the answer is that, as <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>'s example shows, we can't really do that very easily</p>",
        "id": 161673341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553538706
    },
    {
        "content": "<p>oh yes, duh</p>",
        "id": 161673347,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538712
    },
    {
        "content": "<p>hmm</p>",
        "id": 161673351,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'll take a look at that one in a bit, but for this issue, how would go around creating an existential type, binding by lifetime?</p>",
        "id": 161673708,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538935
    },
    {
        "content": "<p>in terms of implementation</p>",
        "id": 161673718,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553538946
    },
    {
        "content": "<p>I mean, we have <code>for&lt;'a: 'b&gt;</code> already today as HRLB</p>",
        "id": 161674002,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553539091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> well, I don't quite know, to be totally honest =)</p>",
        "id": 161674672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553539459
    },
    {
        "content": "<p>heh, yeah, it's tricky...</p>",
        "id": 161674745,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553539491
    },
    {
        "content": "<p>we'd have to figure out the rules for the type, which probably isn't <em>too</em> hard, but also define whre the \"open and close\" operations occur</p>",
        "id": 161674775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553539503
    },
    {
        "content": "<p>those would presumably be connected to returning a value from a fn w/ an RPIT</p>",
        "id": 161674815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553539524
    },
    {
        "content": "<p>open &amp; close?</p>",
        "id": 161674846,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553539547
    },
    {
        "content": "<p>'close' refers to 'hiding' the existential lifetime</p>",
        "id": 161674927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553539572
    },
    {
        "content": "<p>right</p>",
        "id": 161674930,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553539576
    },
    {
        "content": "<p>i.e., converting from <code>Foo&lt;'b&gt;</code> to <code>exists&lt;'b&gt; Foo&lt;'b&gt;</code></p>",
        "id": 161674935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553539581
    },
    {
        "content": "<p>that seems the more obvious (?) one: that could be done where I'm doing my checks now for hidden lifetimes</p>",
        "id": 161674982,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553539615
    },
    {
        "content": "<p>in <code>constrain_type</code></p>",
        "id": 161674987,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553539620
    },
    {
        "content": "<p>or whatever it's called</p>",
        "id": 161675008,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553539628
    },
    {
        "content": "<p>opening... I'm not so sure!</p>",
        "id": 161675018,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553539634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I can try to throw something together if you give me a few tips about how/where to do the opening :-)</p>",
        "id": 161675685,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553540031
    },
    {
        "content": "<p>just experiment</p>",
        "id": 161675689,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553540034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so, I'm willing to pursue this, but I feel I'd need mentoring from someone who really understands the semantics and implementation... this could be informal, or in the form of an eRFC...</p>",
        "id": 161778734,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553617653
    },
    {
        "content": "<p>I think the immediate next step here should be to add <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>'s tests on both PRs as compile-fail tests to ensure that accidents don't occur.</p>",
        "id": 161855836,
        "sender_full_name": "centril",
        "timestamp": 1553691267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  The notion of <code>exists&lt;'x: 'y&gt;</code> is appealing; It was discussed in <a href=\"https://medium.com/@GolDDranks/things-rust-doesnt-let-you-do-draft-f596a3c740a5\" target=\"_blank\" title=\"https://medium.com/@GolDDranks/things-rust-doesnt-let-you-do-draft-f596a3c740a5\">https://medium.com/@GolDDranks/things-rust-doesnt-let-you-do-draft-f596a3c740a5</a> as a means of having \"dependent lifetimes\" which I found intriguing... Definitely worth exploring but will need deeper thinking + buy-in from the language team.</p>",
        "id": 161855996,
        "sender_full_name": "centril",
        "timestamp": 1553691365
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>. got a bit of free time coming up to discuss RPIT existential lifetime issues more?</p>",
        "id": 162434630,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554301772
    },
    {
        "content": "<p>I think niko is on vacation this week <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span></p>",
        "id": 162446418,
        "sender_full_name": "tmandry",
        "timestamp": 1554310291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> okay thanks</p>",
        "id": 162447624,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554311092
    }
]