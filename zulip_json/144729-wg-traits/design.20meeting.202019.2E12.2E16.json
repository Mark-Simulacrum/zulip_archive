[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span>, I think we'll mostly talk associated types and normalization. I've been working on putting down some thoughts on the Hackmd <a href=\"https://hackmd.io/nQyCMpIvTQe5DsC90qFSKg\" target=\"_blank\" title=\"https://hackmd.io/nQyCMpIvTQe5DsC90qFSKg\">doc</a>. I might add a few more things before the meeting starts, but feel free to add your thoughts :)</p>",
        "id": 183576530,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576521110
    },
    {
        "content": "<p>Additionally, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if it's okay with you, I would like to spend 5 minutes at the start to talk about the Chalk book and what plans are for that. And 5 or so minutes to talk about the coinduction branch and what is left to push that through</p>",
        "id": 183576648,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576521189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> yeah, that seems fine</p>",
        "id": 183578957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576522745
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span>, design meeting starting now-ish!</p>",
        "id": 183578976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576522759
    },
    {
        "content": "<p>So, we had planned to talk about \"lazy normalization strategies\" today, but <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> was mentioning that we could also discuss the Chalk Book (and perhaps a bit about coinduction, although I think maybe detailed discussion of that should wait)</p>",
        "id": 183579116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576522835
    },
    {
        "content": "<p>I have also been thinking more about \"overall roadmap\" and wanted to maybe discuss <em>that</em> a bit, though it fits I think into the chalk book</p>",
        "id": 183579149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576522858
    },
    {
        "content": "<p>I just wanted to quickly go over chalk book, just because I think it would be good to have some definite ideas of what we're putting in it</p>",
        "id": 183579198,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576522887
    },
    {
        "content": "<p>Considering it would be helpful for others :)</p>",
        "id": 183579214,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576522897
    },
    {
        "content": "<p>Yeah. I was thinking about it this weekend</p>",
        "id": 183579229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576522909
    },
    {
        "content": "<p>in part because I was looking into how to document the plans around types and chalk-ir</p>",
        "id": 183579267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576522923
    },
    {
        "content": "<p>Coinduction doesn't necessarily need a discussion now. We can talk elsewhere</p>",
        "id": 183579288,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576522932
    },
    {
        "content": "<p>so, it seems like it should cover a few things</p>",
        "id": 183579289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576522933
    },
    {
        "content": "<ul>\n<li>some tips for contribution etc</li>\n</ul>",
        "id": 183579290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576522937
    },
    {
        "content": "<ul>\n<li>understanding the big ideas behind chalk</li>\n</ul>",
        "id": 183579300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576522960
    },
    {
        "content": "<ul>\n<li>documenting <strong>and justifying</strong> the lowering rules</li>\n</ul>",
        "id": 183579315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576522974
    },
    {
        "content": "<p>I think a lot of this content exists in the rustc-guide to some extent but should be moved here instead</p>",
        "id": 183579333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576522986
    },
    {
        "content": "<ul>\n<li>documenting how the chalk-engine crate works etc</li>\n</ul>",
        "id": 183579358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523008
    },
    {
        "content": "<p>one thing I'm toying with is how to think about e.g. the roadmap</p>",
        "id": 183579372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523018
    },
    {
        "content": "<p>I'm assuming \"big ideas\" includes the distinction between the crates</p>",
        "id": 183579448,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576523054
    },
    {
        "content": "<p>I'd like for next year to have some more concrete goals outlined etc, but I'm not sure if stuff like that belongs in the book, or maybe better represented as issues, GH projects, or other such things</p>",
        "id": 183579454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523058
    },
    {
        "content": "<blockquote>\n<p>I'm assuming \"big ideas\" includes the distinction between the crates</p>\n</blockquote>\n<p>in fact I started drafting such a chapter</p>",
        "id": 183579465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523065
    },
    {
        "content": "<p>I could see it being pretty useful to start by trying to write a table of contents, actually</p>",
        "id": 183579478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523077
    },
    {
        "content": "<p>A roadmap should only be part of the book if we're fairly certain we're going to follow it</p>",
        "id": 183579509,
        "sender_full_name": "detrumi",
        "timestamp": 1576523107
    },
    {
        "content": "<p>I agree. Having a table of contents would also be good if somebody wants to help</p>",
        "id": 183579524,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576523121
    },
    {
        "content": "<blockquote>\n<p>A roadmap should only be part of the book if we're fairly certain we're going to follow it</p>\n</blockquote>\n<p>agreed. :) I guess I would like to be certain :)</p>",
        "id": 183579601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523167
    },
    {
        "content": "<p>I think though that the \"milestones\" prob dont' belong there</p>",
        "id": 183579612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523178
    },
    {
        "content": "<p>but what might belong there</p>",
        "id": 183579616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523181
    },
    {
        "content": "<p>is documenting the <em>end state we are shooting for</em></p>",
        "id": 183579620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523185
    },
    {
        "content": "<p>e.g., I could see that we could try to sketch out what we think the types should look like</p>",
        "id": 183579641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523207
    },
    {
        "content": "<p>and document that</p>",
        "id": 183579642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523208
    },
    {
        "content": "<p>and then work towards it</p>",
        "id": 183579645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523211
    },
    {
        "content": "<p>Well, ideally there'd be some info on how to see the Chalk representation of an existing program (though of course that doesn't exist yet)</p>",
        "id": 183579687,
        "sender_full_name": "detrumi",
        "timestamp": 1576523256
    },
    {
        "content": "<p>I'm not 100% sure what that means</p>",
        "id": 183579703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523271
    },
    {
        "content": "<p>but I think I agree ;)</p>",
        "id": 183579708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523273
    },
    {
        "content": "<blockquote>\n<p>e.g., I could see that we could try to sketch out what we think the types should look like</p>\n</blockquote>\n<p>let me clarify what I mean here</p>",
        "id": 183579718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523279
    },
    {
        "content": "<p>I was imagining a diagram like</p>",
        "id": 183579722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523282
    },
    {
        "content": "<p>hmm how to convey :)</p>",
        "id": 183579765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523293
    },
    {
        "content": "<p>kind of two columns, where the left-hand side shows types like <code>TyData&lt;TF&gt;</code> and the right-hand side shows the <code>TypeFamily</code> associated types</p>",
        "id": 183579789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523322
    },
    {
        "content": "<p>trying to show the connections between them</p>",
        "id": 183579795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523328
    },
    {
        "content": "<p>to say \"here is how chalk represents types, and these are the 'customization points' that can be used by a type family\"</p>",
        "id": 183579805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523341
    },
    {
        "content": "<p>and then talking a bit about how to map rustc types to that</p>",
        "id": 183579816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523347
    },
    {
        "content": "<p>(in a subsection)</p>",
        "id": 183579821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523350
    },
    {
        "content": "<p>this is effectively a \"Design proposal\" that we can take to the broader team</p>",
        "id": 183579829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523357
    },
    {
        "content": "<p>and it also serves as the kind of documentation of what we are shooting for</p>",
        "id": 183579833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523363
    },
    {
        "content": "<p>Anyway, so as not to use the whole meeting on this,</p>",
        "id": 183579946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523443
    },
    {
        "content": "<p>maybe we should say that a good goal is to create a hackmd and play with a table of contents there?</p>",
        "id": 183579962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523462
    },
    {
        "content": "<p>( and/or a PR )</p>",
        "id": 183579970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523472
    },
    {
        "content": "<p>I gotta figure out a good way to organize all these documents...</p>",
        "id": 183579982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523487
    },
    {
        "content": "<p><a href=\"https://hackmd.io/fd7oOHpoTtCGoCmd00UKYQ\" target=\"_blank\" title=\"https://hackmd.io/fd7oOHpoTtCGoCmd00UKYQ\">chalk-book table of contents draft hackmd</a></p>",
        "id": 183579999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523508
    },
    {
        "content": "<p>sorry, distracted for a bit</p>",
        "id": 183580001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576523512
    },
    {
        "content": "<p>so normalization and associated types?</p>",
        "id": 183580321,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576523742
    },
    {
        "content": "<p>yep, sorry, I was updating the hackmd above a bit :)</p>",
        "id": 183580381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523770
    },
    {
        "content": "<p>So...where exactly to start :)</p>",
        "id": 183580414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523801
    },
    {
        "content": "<p>Maybe sketch out what we do now and what some of the problems with it are</p>",
        "id": 183580435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523817
    },
    {
        "content": "<p>Not sure if everybody is familiar who's attending?</p>",
        "id": 183580444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523823
    },
    {
        "content": "<p>(ps, cc <span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> if you're around)</p>",
        "id": 183580456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523833
    },
    {
        "content": "<p>In short, we have these two goals, <code>ProjectionEq</code> and <code>Normalize</code></p>",
        "id": 183580559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523890
    },
    {
        "content": "<p>one of the questions that <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> has raised is why there are two</p>",
        "id": 183580571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523900
    },
    {
        "content": "<p>to be honest I don't <em>entirely</em> remember, maybe we'll uncover the reason</p>",
        "id": 183580578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523908
    },
    {
        "content": "<p>the idea is that when you have to unify a projection type like <code>&lt;T as Iterator&gt;::Item</code> with some other type <code>X</code>,</p>",
        "id": 183580605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523925
    },
    {
        "content": "<p>you convert that into a goal to be solved, written <code>ProjectionEq(&lt;T as Iterator&gt;::Item = X)</code></p>",
        "id": 183580644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523946
    },
    {
        "content": "<p>there are exactly two rules by which we can solve such a goal</p>",
        "id": 183580652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523955
    },
    {
        "content": "<p>(both of them created from lowering the <code>trait Iterator</code> definition)</p>",
        "id": 183580661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523965
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>forall&lt;A, B&gt; {\n  ProjectionEq(&lt;A as Iterator&gt;::Item = B) :- Normalize(&lt;A as Iterator&gt;::Item -&gt; B)\n}\n</pre></div>",
        "id": 183580687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523989
    },
    {
        "content": "<p><code>ProjectionEq</code> clauses are generated for <em>trait</em> and <code>Normalize</code> clauses are generated for the <em>impls</em></p>",
        "id": 183580693,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576523992
    },
    {
        "content": "<p>and</p>",
        "id": 183580703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576523999
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>forall&lt;A, B&gt; {\n    ProjectionEq(&lt;A as Iterator&gt;::Item = (Iterator::Item)&lt;A&gt;)\n}\n</pre></div>",
        "id": 183580763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524017
    },
    {
        "content": "<p>this last one makes use of the concept of a \"projection placeholder\", which I denoted here as <code>(Iterator::Item)&lt;A&gt;</code></p>",
        "id": 183580786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524031
    },
    {
        "content": "<p>the idea is that sometimes you know that there is <em>some</em> <code>Item</code> (say) of an iterator, but you don't know what it is</p>",
        "id": 183580810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524043
    },
    {
        "content": "<p>so e.g. in a case like <code>fn foo&lt;T: Iterator&gt;() { .. }</code></p>",
        "id": 183580834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524060
    },
    {
        "content": "<p>if you ask \"what is <code>T::Item</code>? the answer is just ... <code>T::Item</code></p>",
        "id": 183580850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524068
    },
    {
        "content": "<p>we can't say anything more specific than that</p>",
        "id": 183580853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524073
    },
    {
        "content": "<p>so yeah the two rules break down into:</p>\n<ul>\n<li>we can <em>normalize</em> by finding some applicable <code>impl</code> that tells us what the <code>Item</code> is</li>\n<li>we can treat the associated item abstractly, using a placeholder</li>\n</ul>",
        "id": 183580882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524101
    },
    {
        "content": "<p>one challenge here is that the second rule <em>always</em> applies, even when we have a normalization</p>",
        "id": 183580902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524121
    },
    {
        "content": "<p>that is partly a \"consequence\" of using a relatively simple logic</p>",
        "id": 183580963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524140
    },
    {
        "content": "<p>i.e., we can say things that are true, but we can't give \"preferences\" between them</p>",
        "id": 183580976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524158
    },
    {
        "content": "<p>and it's kind of .. complicated to decide when the normalization is better</p>",
        "id": 183581273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524177
    },
    {
        "content": "<p>I sort of brought this up in the doc, but we could only generate the placeholder type if there are no impls</p>",
        "id": 183581334,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576524219
    },
    {
        "content": "<p>well..</p>",
        "id": 183581342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524227
    },
    {
        "content": "<p>but how do you decide if there are no impls? it's not always clear</p>",
        "id": 183581344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524233
    },
    {
        "content": "<p>e.g., consider</p>",
        "id": 183581347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524235
    },
    {
        "content": "<p>that conflicts with well-formed goals too</p>",
        "id": 183581412,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576524250
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">ProjectionEq</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;?</span><span class=\"n\">U</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>",
        "id": 183581426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524259
    },
    {
        "content": "<p>now maybe we have an impl <code>impl Foo&lt;u32&gt; for i32</code></p>",
        "id": 183581444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524280
    },
    {
        "content": "<p>that applies, but it's not <em>required</em> that <code>?U = u32</code></p>",
        "id": 183581454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524290
    },
    {
        "content": "<p>there could also be impls (that we can't see, maybe provided by downstream crates) that do <code>impl Foo&lt;SomeOtherType&gt; for i32</code></p>",
        "id": 183581483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524307
    },
    {
        "content": "<p>there are other problems too</p>",
        "id": 183581532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524341
    },
    {
        "content": "<p>e.g., I debated something like</p>",
        "id": 183581540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524345
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>ProjectionEq(&lt;T as Iterator&gt;::Item = (Iterator::Item)&lt;T&gt;) :-\n    not { exists&lt;X&gt; { Normalize(&lt;T as Iterator&gt;::Item -&gt; X) } }\n</pre></div>",
        "id": 183581624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524378
    },
    {
        "content": "<p>I think this is one way to try to capture the intution you were giving</p>",
        "id": 183581634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524386
    },
    {
        "content": "<p>i.e., you can use the placeholder, but only if we can't normalize</p>",
        "id": 183581638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524392
    },
    {
        "content": "<p>but one tricky part about that is -- sometimes normalizing <code>T::Item</code> might have a cyclic requirement to test whether <code>T::Item</code> is equal to something</p>",
        "id": 183581673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524423
    },
    {
        "content": "<p>this might work out, I guess it's worth spelling out some examples, but it could also lead to negative cycles</p>",
        "id": 183581708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524451
    },
    {
        "content": "<p>(which wouldn't be the end of the world, I actually think they have a ton in common with the mechanisms we are building for coinduction, and we may already have that problem thanks to specialization, as I realized recently)</p>",
        "id": 183581790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524495
    },
    {
        "content": "<p>(Does this all make sense so far?)</p>",
        "id": 183581809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524513
    },
    {
        "content": "<p>I think overall what might be good here is to do a bit more experimentation</p>",
        "id": 183582111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524718
    },
    {
        "content": "<p>Like, I'd like to start expanding this document by trying some of the alternative strategies</p>",
        "id": 183582195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524748
    },
    {
        "content": "<p>and (using rust-analyzer, or whatever means) seeing what happens</p>",
        "id": 183582203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524755
    },
    {
        "content": "<p>I think stepping back it's worth saying what's <em>wrong</em> with current design, I see two problems</p>",
        "id": 183582215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524770
    },
    {
        "content": "<ul>\n<li>you get non-unique answers sometimes</li>\n</ul>",
        "id": 183582219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524774
    },
    {
        "content": "<ul>\n<li>it will do more work than is needed</li>\n</ul>",
        "id": 183582226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524781
    },
    {
        "content": "<p>in particular, in some cases, it will try to solve problems both with the normalized and placeholder form</p>",
        "id": 183582251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524796
    },
    {
        "content": "<p>and that can be silly</p>",
        "id": 183582255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524800
    },
    {
        "content": "<p>however, if we could solve the first one, we might find the second one is not such a big problem -- and we might be able to attack it in practice quite a bit</p>",
        "id": 183582285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524826
    },
    {
        "content": "<p>The experimenting that I've done with my branches have gotten me <em>close</em></p>",
        "id": 183582292,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576524830
    },
    {
        "content": "<p>e.g. maybe by eschewing the placeholder in the easy cases</p>",
        "id": 183582299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524835
    },
    {
        "content": "<p>I'd be happy to try out alternative strategies with rust-analyzer btw, I think this problem is responsible for quite a few of the remaining cases where we can't infer types currently</p>",
        "id": 183582357,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576524859
    },
    {
        "content": "<p>(one nice thing about the current setup is that it is conceptually fairly simple)</p>",
        "id": 183582362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524863
    },
    {
        "content": "<blockquote>\n<p>The experimenting that I've done with my branches have gotten me <em>close</em></p>\n</blockquote>\n<p>say a bit more</p>",
        "id": 183582363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576524869
    },
    {
        "content": "<p>Let me try to put thoughts together</p>",
        "id": 183582381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576524894
    },
    {
        "content": "<p>So, some things that I've been experimenting with locally:</p>",
        "id": 183582401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576524907
    },
    {
        "content": "<p>Mentioned this last week a bit, but I think the big thing that my branch does is maintain a sense of \"projection\"</p>",
        "id": 183582459,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576524955
    },
    {
        "content": "<p>so, for the test in <a href=\"https://github.com/rust-lang/rust/issues/234\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/234\">#234</a></p>",
        "id": 183582510,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576524967
    },
    {
        "content": "<p>The answer is not just <code>u32</code>, it's <code>(Trait1::Type)&lt;S&gt; as u32</code></p>",
        "id": 183582546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576524995
    },
    {
        "content": "<p>where the latter means \"that projection normalized to <code>u32</code>\"</p>",
        "id": 183582563,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576525012
    },
    {
        "content": "<p>oh, right</p>",
        "id": 183582621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525072
    },
    {
        "content": "<p>I've also experimented with removing <code>Normalize</code> and <code>ProjectionEq</code>, which I think is fine. Since really <code>Normalize</code> is only a layer of indirection from <code>ProjectionEq</code> (except for the placeholder, but if we don't use the placeholder, it doesn't serve much use)</p>",
        "id": 183582677,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576525087
    },
    {
        "content": "<p>yeah, I'm not sure what I think about this approach, as I said earlier :)</p>",
        "id": 183582678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525089
    },
    {
        "content": "<p>right</p>",
        "id": 183582687,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576525094
    },
    {
        "content": "<p>I don't see much benefit to removing normalize/projection-eq, but also little harm</p>",
        "id": 183582705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525108
    },
    {
        "content": "<p>I can see it being useful sometimes</p>",
        "id": 183582712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525111
    },
    {
        "content": "<p>to be able to say you just want <code>Normalize</code></p>",
        "id": 183582723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525121
    },
    {
        "content": "<p>i.e., in the monomorphiation phase of the compiler</p>",
        "id": 183582729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525127
    },
    {
        "content": "<p>we want to get the types from impls only</p>",
        "id": 183582736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525135
    },
    {
        "content": "<p>I don't think I've tried to test the former changes without removing <code>Normalize</code> yet</p>",
        "id": 183582780,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576525164
    },
    {
        "content": "<p>I guess one design question to think about is what is the \"correct\" answer for the \"With inference variables\" case from the Hackmd doc</p>",
        "id": 183582802,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576525195
    },
    {
        "content": "<p>Would we rather have \"ambiguous\" or <code>?0 = ^0, ?1 = &lt;?0 as Trait1&gt;::Type</code></p>",
        "id": 183582914,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576525231
    },
    {
        "content": "<p>Yeah, so,</p>",
        "id": 183582952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525254
    },
    {
        "content": "<p>this is a good consideration too</p>",
        "id": 183582958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525259
    },
    {
        "content": "<p>(or I guess a third answer could be <code>?0 = ^0, ?1 = ?2</code></p>",
        "id": 183582961,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576525261
    },
    {
        "content": "<p>I have to check the compiler's current behavior but</p>",
        "id": 183582976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525267
    },
    {
        "content": "<p>it definitely guesses <em>sometimes</em></p>",
        "id": 183582987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525274
    },
    {
        "content": "<p>but what it does not presently do</p>",
        "id": 183583011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525287
    },
    {
        "content": "<p>though chalk could do it</p>",
        "id": 183583017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525289
    },
    {
        "content": "<p>is to handle cases like <code>ProjectionEq(&lt;A as Foo&lt;?B&gt;&gt;::Bar = i32)</code></p>",
        "id": 183583052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525307
    },
    {
        "content": "<p>i.e., maybe knowing the target type</p>",
        "id": 183583058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525311
    },
    {
        "content": "<p>would allow us to infer <code>?B</code></p>",
        "id": 183583065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525314
    },
    {
        "content": "<p>where you couldn't otherwise</p>",
        "id": 183583069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525317
    },
    {
        "content": "<p>chalk doesn't draw any distinction between the 'role' of the type</p>",
        "id": 183583126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525329
    },
    {
        "content": "<p>but the compiler today does</p>",
        "id": 183583129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525332
    },
    {
        "content": "<p>I guess that's a separate question</p>",
        "id": 183583141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525348
    },
    {
        "content": "<p>Can you rephrase that?</p>",
        "id": 183583174,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576525379
    },
    {
        "content": "<blockquote>\n<p>Would we rather have \"ambiguous\" or <code>?0 = ^0, ?1 = &lt;?0 as Trait1&gt;::Type</code></p>\n</blockquote>\n<p>as far as <em>this</em> inference goes, I don't see this result as being all that useful (i.e., knowing that it's the projection of something, but not what)</p>",
        "id": 183583186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525388
    },
    {
        "content": "<p>let me try to write out an example</p>",
        "id": 183583196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525398
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 183583369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525536
    },
    {
        "content": "<p>Given <code>ProjectionEq(&lt;?X as Id&gt;::Output = i32)</code>, can we infer that <code>?X = i32</code>?</p>",
        "id": 183583379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525542
    },
    {
        "content": "<p>The compiler today cannot</p>",
        "id": 183583402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525560
    },
    {
        "content": "<p>In part because it doesn't use this strategy for handling associated types</p>",
        "id": 183583454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525569
    },
    {
        "content": "<p>It uses a 'normalization' strategy where you just say \"for a given projection, what is its normalized form?\"</p>",
        "id": 183583477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525583
    },
    {
        "content": "<p>so it only has <code>&lt;?X as Id&gt;::Output</code> at hand</p>",
        "id": 183583483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525589
    },
    {
        "content": "<p>it doesn't know what you <em>want</em> to be equal to</p>",
        "id": 183583509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525608
    },
    {
        "content": "<p>Hmm</p>",
        "id": 183583557,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576525639
    },
    {
        "content": "<p>(from what I understood of \"that haskell paper\" that I've mentioned, they too took an approach like this, but a different and more iterative one, where they apply normalization strategies repeatedly and in various orders to derive a normalized form for some projection)</p>",
        "id": 183583559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525640
    },
    {
        "content": "<blockquote>\n<p>it doesn't know what you <em>want</em> to be equal to</p>\n</blockquote>\n<p>however, people have sometimes requested this sort of inference.</p>",
        "id": 183583615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525674
    },
    {
        "content": "<p>(otoh, every time we get smarter, we also make it so that people are more likely to rely on some random pattern that existing impls happen to exhibit)</p>",
        "id": 183583679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525693
    },
    {
        "content": "<p>we could however</p>",
        "id": 183583682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525696
    },
    {
        "content": "<p>easily encode some of these st.. well, easily? maybe easily</p>",
        "id": 183583692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525706
    },
    {
        "content": "<p>I was going to say \"easily encode some of these strategies\" but I'm not sure how true that is</p>",
        "id": 183583714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525735
    },
    {
        "content": "<p>I guess we could <em>force</em> ourselves to never take the output type into account if we wanted</p>",
        "id": 183583751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525778
    },
    {
        "content": "<p>by tweaking how we canonicalize the goals in such a case</p>",
        "id": 183583759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525789
    },
    {
        "content": "<p>i.e., kind of like truncation, we could <em>force</em> an inference variable</p>",
        "id": 183583770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525798
    },
    {
        "content": "<p>hmm no that wouldn't work :)</p>",
        "id": 183583824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525809
    },
    {
        "content": "<p>anyway, I think this is <em>maybe</em> a secondary consideration.</p>",
        "id": 183583838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525824
    },
    {
        "content": "<blockquote>\n<p>It uses a 'normalization' strategy where you just say \"for a given projection, what is its normalized form?\"</p>\n</blockquote>\n<p>what I don't like about this (contra the chalk strategy) is that it's a new fundamental thing</p>",
        "id": 183583851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525841
    },
    {
        "content": "<p>i.e., it's a \"function\" or something</p>",
        "id": 183583859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525851
    },
    {
        "content": "<p>it also makes cycles harder to reason about</p>",
        "id": 183583863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525860
    },
    {
        "content": "<p>so we're 51 minutes in</p>",
        "id": 183583897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525898
    },
    {
        "content": "<p>right</p>",
        "id": 183583907,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576525905
    },
    {
        "content": "<p>I doubt we'll reach a final answer :)</p>",
        "id": 183583914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525912
    },
    {
        "content": "<p>so, this is a difficult problem :)</p>",
        "id": 183583919,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576525921
    },
    {
        "content": "<p>one thing I wanted to mention: I've been working on some branches of chalk, one of which is trying to make this change:</p>\n<blockquote>\n<ul>\n<li><strong>Remove unnormalized types</strong>. This is somewhat of a stepping stone. The idea here is to \"desugar\" projection types into explicit goals when lowering, so there is no longer \"unnormalized projections\", only normalized projections and placeholder types. [source 2]</li>\n</ul>\n</blockquote>",
        "id": 183583970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525929
    },
    {
        "content": "<p>Is there <em>something</em> we're sure about?</p>",
        "id": 183583973,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576525933
    },
    {
        "content": "<p>which doesn't really change anything fundamental</p>",
        "id": 183583997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525948
    },
    {
        "content": "<p>or really anything at all :)</p>",
        "id": 183584002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525953
    },
    {
        "content": "<p>Which branch is that?</p>",
        "id": 183584009,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576525958
    },
    {
        "content": "<p>it's called \"placeholder\"</p>",
        "id": 183584028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525976
    },
    {
        "content": "<p>my motivations are rather different</p>",
        "id": 183584037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525980
    },
    {
        "content": "<p>I want to explore an alternative idea for region ifnerence, which requires that I be able to distinguish syntactic from semantic equality,</p>",
        "id": 183584070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576525996
    },
    {
        "content": "<p>I also want to solve the problem that we should not request impls with a self type that is some \"unnormalized projection\"</p>",
        "id": 183584107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576526013
    },
    {
        "content": "<p>I am also kind of cleaning up <code>TyData</code> a bit in that branch, which is what had me thinking about documenting the desired \"end state\"  for how types look</p>",
        "id": 183584199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576526055
    },
    {
        "content": "<p>maybe I should take a look at your PR</p>",
        "id": 183584251,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576526096
    },
    {
        "content": "<p>I just don't know a ton about the direction for the recent TypeFamily and related changes</p>",
        "id": 183584285,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576526124
    },
    {
        "content": "<blockquote>\n<p>Is there <em>something</em> we're sure about?</p>\n</blockquote>\n<p>I guess I still kind of feel like I'd like to push a bit harder on the current approach, and in particular I'm curious if we can improve the \"aggregator\" here to discard some of the duplicates; I guess I should look more at your branch, I remain sort of skeptical about having types that mean \"this was the result of normalization\" -- in part because I think it'll potentially create duplicate work as well, though I should come up with an example (i.e., if we can derive <code>u32</code> both via normalization and maybe some other means? not sure if that's realistic) but just in general because it means that types are carrying a kind of \"history\" with them, versus just their 'meaning'</p>",
        "id": 183584302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576526140
    },
    {
        "content": "<blockquote>\n<p>I just don't know a ton about the direction for the recent TypeFamily and related changes</p>\n</blockquote>\n<p>another reason for me to try and document a full proposal, I guess</p>",
        "id": 183584328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576526159
    },
    {
        "content": "<p>yeah, I understand the concern with having the \"history\" of the type in them</p>",
        "id": 183584427,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576526222
    },
    {
        "content": "<p>maybe what we can say for sure is that there are a few directions we can explore:</p>",
        "id": 183584430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576526225
    },
    {
        "content": "<ul>\n<li>\"history\" types</li>\n</ul>",
        "id": 183584439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576526234
    },
    {
        "content": "<ul>\n<li>improving the deaggregator</li>\n</ul>",
        "id": 183584443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576526245
    },
    {
        "content": "<ul>\n<li>introducing a <code>not</code> so that we only use placeholders when we <em>can't</em> normalize</li>\n</ul>",
        "id": 183584461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576526261
    },
    {
        "content": "<p>the last one may lead to more floundering</p>",
        "id": 183584466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576526264
    },
    {
        "content": "<p>but that might be ok</p>",
        "id": 183584467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576526267
    },
    {
        "content": "<p>those all seem pretty \"actionable\"</p>",
        "id": 183584528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576526284
    },
    {
        "content": "<p>(I also plan to do a bit of \"reaching out\" to some folks who may have suggestions for related work to follow up on)</p>",
        "id": 183584554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576526310
    },
    {
        "content": "<p>I think the aggregator/antiunifier could definitely be improved</p>",
        "id": 183584569,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576526321
    },
    {
        "content": "<p>the <code>not</code> might be the easiest to try</p>",
        "id": 183584653,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576526391
    },
    {
        "content": "<p>I'll also work a bit on my branch(es) and see if I can get all the tests to pass</p>",
        "id": 183584838,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576526496
    },
    {
        "content": "<p>I think it is the easiest to try</p>",
        "id": 183584840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576526498
    },
    {
        "content": "<p>I think I'm <em>close</em>, but we'll see</p>",
        "id": 183584914,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576526529
    },
    {
        "content": "<p>Hello, sorry for missing this. Is there a Google Calendar (or whatever) that I can subscribe to I can be present for these going forward?</p>",
        "id": 183586477,
        "sender_full_name": "David Barsky",
        "timestamp": 1576527665
    },
    {
        "content": "<p>I think there is a calendar invite link in the wg-traits repo</p>",
        "id": 183586534,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576527696
    },
    {
        "content": "<p>But it's every Monday at 2PM EST</p>",
        "id": 183586546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576527704
    },
    {
        "content": "<p><a href=\"https://calendar.google.com/calendar/r/eventedit/copy/MnFmbmdkaGV0aXE3Zjc4cjlpNWVjNDRoZXMgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw/amFja2g3MjZAZ21haWwuY29t?sf=true\" target=\"_blank\" title=\"https://calendar.google.com/calendar/r/eventedit/copy/MnFmbmdkaGV0aXE3Zjc4cjlpNWVjNDRoZXMgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw/amFja2g3MjZAZ21haWwuY29t?sf=true\">https://calendar.google.com/calendar/r/eventedit/copy/MnFmbmdkaGV0aXE3Zjc4cjlpNWVjNDRoZXMgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw/amFja2g3MjZAZ21haWwuY29t?sf=true</a></p>",
        "id": 183586610,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576527733
    },
    {
        "content": "<p>Thanks very much!</p>",
        "id": 183591951,
        "sender_full_name": "David Barsky",
        "timestamp": 1576531191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> I can invite you if you like</p>",
        "id": 183593356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576532141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that'd be handy! You should have my email on file :)</p>",
        "id": 183593969,
        "sender_full_name": "David Barsky",
        "timestamp": 1576532498
    }
]