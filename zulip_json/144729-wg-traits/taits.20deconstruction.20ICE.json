[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about the bug you pointed out <a href=\"https://github.com/rust-lang/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L1293-L1296\">here</a></p>",
        "id": 242943572,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623877714
    },
    {
        "content": "<p>I was trying to come up with a test case</p>",
        "id": 242943620,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623877746
    },
    {
        "content": "<p>was trying things out and used ...</p>",
        "id": 242943638,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623877753
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(impl_trait_in_bindings)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">B</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">(</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242943643,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623877756
    },
    {
        "content": "<p>got</p>",
        "id": 242943663,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623877765
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: broken MIR in DefId(0:3 ~ test[317d]::f) (_3 = (move _4, move _5)): bad assignment ((impl std::convert::Into&lt;A&gt;, impl std::convert::Into&lt;B&gt;) = (A, B)): NoSolution\n --&gt; test.rs:4:43\n  |\n4 |     let x: (impl Into&lt;A&gt;, impl Into&lt;B&gt;) = (a, b);\n  |                                           ^^^^^^\n  |\n  = note: delayed at compiler/rustc_mir/src/borrow_check/type_check/mod.rs:253:27\n\nthread &#39;rustc&#39; panicked at &#39;no errors encountered even though `delay_span_bug` issued&#39;, compiler/rustc_errors/src/lib.rs:1023:13\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.55.0-dev running on x86_64-unknown-linux-gnu\n\nquery stack during panic:\nend of query stack\n</code></pre></div>",
        "id": 242943664,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623877768
    },
    {
        "content": "<p>interesting ...</p>",
        "id": 242945900,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623878997
    },
    {
        "content": "<p>in this particular example I'm looking at what I have is:</p>",
        "id": 242945950,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623879006
    },
    {
        "content": "<p>here <a href=\"https://github.com/rust-lang/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L1136\">https://github.com/rust-lang/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L1136</a></p>",
        "id": 242945989,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623879037
    },
    {
        "content": "<p><code>sub=(A, B) sup=(impl std::convert::Into&lt;A&gt;, impl std::convert::Into&lt;B&gt;)</code></p>",
        "id": 242946020,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623879056
    },
    {
        "content": "<p>so</p>",
        "id": 242946027,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623879061
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L1144\">https://github.com/rust-lang/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L1144</a></p>",
        "id": 242946050,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623879084
    },
    {
        "content": "<p><code>sup</code> is not Opaque</p>",
        "id": 242946059,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623879090
    },
    {
        "content": "<p>returns err <a href=\"https://github.com/rust-lang/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L1152\">https://github.com/rust-lang/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L1152</a></p>",
        "id": 242946068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623879103
    },
    {
        "content": "<p>and explodes here <a href=\"https://github.com/rust-lang/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L1466-L1473\">https://github.com/rust-lang/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L1466-L1473</a></p>",
        "id": 242946157,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623879147
    },
    {
        "content": "<p>well, I guess <a href=\"https://github.com/rust-lang/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L1143\">https://github.com/rust-lang/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L1143</a> shouldn't return Err in the first place</p>",
        "id": 242946905,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623879664
    },
    {
        "content": "<p>I'm not sure if now this <a href=\"https://github.com/rust-lang/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_middle/src/ty/relate.rs#L338\">https://github.com/rust-lang/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_middle/src/ty/relate.rs#L338</a> needs to handle <code>(Param, Opaque)</code></p>",
        "id": 242949865,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623881494
    },
    {
        "content": "<p>So, the <code>impl Trait</code> in let bindings code is very wrong</p>",
        "id": 242992235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623921835
    },
    {
        "content": "<p>I sort of think we should remove support and re-implement it later</p>",
        "id": 242992279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623921844
    },
    {
        "content": "<p>But I'm trying to think how to reveal that bug, I'm a touch surprised your existing test cases didn't already do it, I suspect the problem is that the error winds up getting detected earlier</p>",
        "id": 242992340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623921904
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 242992354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623921918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/242992340\">said</a>:</p>\n<blockquote>\n<p>But I'm trying to think how to reveal that bug, I'm a touch surprised your existing test cases didn't already do it, I suspect the problem is that the error winds up getting detected earlier</p>\n</blockquote>\n<p>probably?</p>",
        "id": 243018592,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623937247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/242992279\">said</a>:</p>\n<blockquote>\n<p>I sort of think we should remove support and re-implement it later</p>\n</blockquote>\n<p>if you want we can talk about this</p>",
        "id": 243018653,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623937281
    },
    {
        "content": "<p>yes, maybe we should do that</p>",
        "id": 243022241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623938715
    },
    {
        "content": "<p>I was thinking <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> -- maybe you can modify <code>get_by</code></p>",
        "id": 243022288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623938729
    },
    {
        "content": "<p>right now it returns the first match</p>",
        "id": 243022300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623938737
    },
    {
        "content": "<p>what if it asserted that there is <em>exactly one</em> match</p>",
        "id": 243022313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623938743
    },
    {
        "content": "<p>I'd be curious to see where those assertions fail, I think any such failure is a bug</p>",
        "id": 243022334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623938751
    },
    {
        "content": "<p>if we did that, I'd feel comfortable shipping the code as-is, since we'll get ICEs if the assumption is wrong</p>",
        "id": 243022406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623938769
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 243022439,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623938781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> but you literally meant to modify the <code>VecMap::get_by</code>?</p>",
        "id": 243022566,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623938832
    },
    {
        "content": "<p>unsure how weird it is for that specific method to have an assert about that inside :)</p>",
        "id": 243022600,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623938848
    },
    {
        "content": "<p>I would be ok with it</p>",
        "id": 243022638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623938865
    },
    {
        "content": "<p>ok :)</p>",
        "id": 243022656,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623938872
    },
    {
        "content": "<p>\"get\" sort of implies that it's doing a hashmap lookup</p>",
        "id": 243022657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623938872
    },
    {
        "content": "<p>and that there is a single entry</p>",
        "id": 243022661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623938875
    },
    {
        "content": "<p>we could modify the name</p>",
        "id": 243022672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623938881
    },
    {
        "content": "<p>yep</p>",
        "id": 243022673,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623938881
    },
    {
        "content": "<p>\"get_only_key_matching\"</p>",
        "id": 243022717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623938884
    },
    {
        "content": "<p>or <code>get_value_matching(...)</code> or something</p>",
        "id": 243022756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623938905
    },
    {
        "content": "<p>the singular suggests there is just one</p>",
        "id": 243022771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623938912
    },
    {
        "content": "<p>the assert message can say ... if you see this ICE, it's @spastorino's fault, ping him on github <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 243024266,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623939555
    },
    {
        "content": "<p>heh</p>",
        "id": 243028293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623941059
    },
    {
        "content": "<p>I'm curious first to see if all of our tests pass :)</p>",
        "id": 243028312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623941070
    },
    {
        "content": "<p>yeah, will try this out a bit later</p>",
        "id": 243029267,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623941430
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/86410\">#86410</a></p>",
        "id": 243064804,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623955444
    },
    {
        "content": "<p>ok, unsure why I got no failures locally but ui tests are failing</p>",
        "id": 243068323,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623956966
    },
    {
        "content": "<p>anyway, this is good :)</p>",
        "id": 243068327,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623956969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do we want to apply the <code>assert</code> also in this case ... <a href=\"https://github.com/spastorino/rust/blob/95a327b4e5ebcf81dcc3a178d4bddad165bb596b/compiler/rustc_typeck/src/collect/type_of.rs#L522\">https://github.com/spastorino/rust/blob/95a327b4e5ebcf81dcc3a178d4bddad165bb596b/compiler/rustc_typeck/src/collect/type_of.rs#L522</a> ?</p>",
        "id": 243069946,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623957608
    },
    {
        "content": "<p>I think I'm a bit confused now,  just in case, let me re ask a couple of question to confirm things ...</p>",
        "id": 243070214,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623957724
    },
    {
        "content": "<p>why should always be one element with that <code>def_id</code>? and why do we want to not match using <code>substs</code> there?</p>",
        "id": 243070222,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623957726
    },
    {
        "content": "<p>I want the ICE all the time</p>",
        "id": 243070315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623957772
    },
    {
        "content": "<p>If it's firing, it means we're doing something wrong</p>",
        "id": 243070329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623957779
    },
    {
        "content": "<p>oh well, wait</p>",
        "id": 243070344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623957789
    },
    {
        "content": "<p>this is looking for <em>does no value match</em></p>",
        "id": 243070353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623957794
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> we don't want the ICE for that case</p>",
        "id": 243070389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623957810
    },
    {
        "content": "<p>we probably just want a function like <code>any_value_matching</code> or maybe just <code>iter().any(...)</code></p>",
        "id": 243070408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623957821
    },
    {
        "content": "<p>er, <code>.keys().any(...)</code></p>",
        "id": 243070427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623957830
    },
    {
        "content": "<p>right, that seemed to me also</p>",
        "id": 243070776,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623957964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> after these changes is exactly ICEing in the code you said was wrong :)</p>",
        "id": 243077123,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623960608
    },
    {
        "content": "<p>I guess tests are not failing because the first element (the one that was being returned) is exactly the one that also matches on <code>(def_id, substs)</code></p>",
        "id": 243077270,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623960684
    },
    {
        "content": "<p>I guess</p>",
        "id": 243077276,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623960687
    },
    {
        "content": "<p>but I also guess it should be easy to start from those examples and build one where this fails, so we have a regression test just in case</p>",
        "id": 243077347,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623960717
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">Z</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&lt;</span><span class=\"n\">Z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 243084898,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623964006
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_mir::borrow_check::type_check CHECK: concrete_opaque_types = VecMap([(OpaqueTypeKey { def_id: DefId(0:6 ~ multiple_def_uses_in_one_fn[317d]::X::{opaque#0}), substs: [T, Z] }, B), (OpaqueTypeKey { def_id: DefId(0:6 ~ multip    le_def_uses_in_one_fn[317d]::X::{opaque#0}), substs: [Z, T] }, B)])\nDEBUG rustc_mir::borrow_check::type_check CHECK: opaque_type_key = OpaqueTypeKey { def_id: DefId(0:6 ~ multiple_def_uses_in_one_fn[317d]::X::{opaque#0}), substs: [T, Z] }\nDEBUG rustc_mir::borrow_check::type_check CHECK: concrete_ty = B\nDEBUG rustc_mir::borrow_check::renumber renumber_regions(value=Z)\nDEBUG rustc_mir::borrow_check::type_check eq_opaque_type_and_type: concrete_ty=B=_ opaque_defn_ty=Z\nDEBUG rustc_mir::borrow_check::type_check CHECK: concrete_opaque_types = VecMap([(OpaqueTypeKey { def_id: DefId(0:6 ~ multiple_def_uses_in_one_fn[317d]::X::{opaque#0}), substs: [T, Z] }, B), (OpaqueTypeKey { def_id: DefId(0:6 ~ multip    le_def_uses_in_one_fn[317d]::X::{opaque#0}), substs: [Z, T] }, B)])\nDEBUG rustc_mir::borrow_check::type_check CHECK: opaque_type_key = OpaqueTypeKey { def_id: DefId(0:6 ~ multiple_def_uses_in_one_fn[317d]::X::{opaque#0}), substs: [Z, T] }\nDEBUG rustc_mir::borrow_check::type_check CHECK: concrete_ty = B\n</code></pre></div>",
        "id": 243084945,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623964041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was wondering, why <code>concrete_opaque_types</code> has as value always <code>B</code> here?</p>",
        "id": 243085120,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623964117
    },
    {
        "content": "<p>there's two entries, for def_id <code>6</code>, one with substs <code>[T, Z]</code> and the other with <code>[Z, T]</code> but both with <code>B</code> value</p>",
        "id": 243085183,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623964166
    },
    {
        "content": "<p>and if I return <code>(a, b)</code> the value is always <code>A</code></p>",
        "id": 243085732,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623964492
    },
    {
        "content": "<p>I meant, I'd get that that makes sense for the first defining use of <code>X</code>, but what about the other one?</p>",
        "id": 243085928,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623964543
    },
    {
        "content": "<p>ohh well, the other use is not a defining one? I guess, the other occurrence just check if it's compatible and never exercise this code again?</p>",
        "id": 243086103,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623964591
    },
    {
        "content": "<p>yes, I figured it would ICE</p>",
        "id": 243090837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623967290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> unsure I got what you meant</p>",
        "id": 243091436,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623967682
    },
    {
        "content": "<p>sorry</p>",
        "id": 243091484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623967692
    },
    {
        "content": "<p>I didnt' finish :)</p>",
        "id": 243091488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623967696
    },
    {
        "content": "<p>I meant \"good that it is ICEing, that confirms my suspicions\"</p>",
        "id": 243091495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623967703
    },
    {
        "content": "<p>ahh :)</p>",
        "id": 243091498,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623967704
    },
    {
        "content": "<p>so in terms of why it has that value</p>",
        "id": 243091516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623967715
    },
    {
        "content": "<p>so it ICEs because there's more than one element</p>",
        "id": 243091550,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623967736
    },
    {
        "content": "<p>I believe yes the value is in terms of the definition</p>",
        "id": 243091557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623967741
    },
    {
        "content": "<p>we really should be looking for the element with the right substs I think</p>",
        "id": 243091576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623967751
    },
    {
        "content": "<p>let me look back at that code</p>",
        "id": 243091584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623967755
    },
    {
        "content": "<p>can you send me a link?</p>",
        "id": 243091588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623967763
    },
    {
        "content": "<p>sure</p>",
        "id": 243091593,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623967766
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/86410\">#86410</a></p>",
        "id": 243091611,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623967784
    },
    {
        "content": "<p>or well you want a link to that particular section?</p>",
        "id": 243091631,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623967797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243091557\">said</a>:</p>\n<blockquote>\n<p>I believe yes the value is in terms of the definition</p>\n</blockquote>\n<p>I'm not 100% sure how everything is build up to be honest, I'd need to investigate, but what I was wondering before investigating that is ... if regardless of what the substs are, for the same def_id I get more than one element but all of them give me the same value, does finding the right one even matters?</p>",
        "id": 243093220,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623968774
    },
    {
        "content": "<p>I meant, it would matter semantically but I can't see if it creates harm and how</p>",
        "id": 243093250,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623968794
    },
    {
        "content": "<p>I guess I really need to investigate how things are build to answer that question :)</p>",
        "id": 243093278,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623968812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I meant -- a link to where the ICE occurs</p>",
        "id": 243149333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624016958
    },
    {
        "content": "<p>but I can reproduce it</p>",
        "id": 243149337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624016960
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86410/files#diff-88ddacabf09eb79ece1dbfada296b5f0312b22bdfeba5013740b4f480e853355R1294\">https://github.com/rust-lang/rust/pull/86410/files#diff-88ddacabf09eb79ece1dbfada296b5f0312b22bdfeba5013740b4f480e853355R1294</a></p>",
        "id": 243149462,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624017027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> given that we have the <code>opaque_type_key</code>, it seems like we can do a better match, but this is I thnk exactly the code that I wanted to comment better</p>",
        "id": 243159106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624022250
    },
    {
        "content": "<p>I'm having a hard time remembering e.g. the role of <code>concrete_opaque_types</code></p>",
        "id": 243159120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624022257
    },
    {
        "content": "<p>OK, I opened <a href=\"https://github.com/rust-lang/rust/pull/86437\">https://github.com/rust-lang/rust/pull/86437</a> with some comments :)</p>",
        "id": 243178447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624031250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so I think we can just change <a href=\"https://github.com/rust-lang/rust/blob/50cc3de2ac37969080e5afb3cada6977eba20533/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L1293-L1295\">this code</a> to do <code>concrete_opaque_types.get(opaque_type_key)</code> here</p>",
        "id": 243179189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624031651
    },
    {
        "content": "<p>let me know if that fixes the ICE :)</p>",
        "id": 243179243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624031687
    },
    {
        "content": "<p>also, please read the docs in <a href=\"https://github.com/rust-lang/rust/issues/86437\">#86437</a> and tell me if they make sense to you</p>",
        "id": 243179320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624031728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243159106\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> given that we have the <code>opaque_type_key</code>, it seems like we can do a better match, but this is I thnk exactly the code that I wanted to comment better</p>\n</blockquote>\n<p>agreed on that point, better to correctly match rather than doing something that it is uncertain if works because of some random facts</p>",
        "id": 243204384,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624047700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243178447\">said</a>:</p>\n<blockquote>\n<p>OK, I opened <a href=\"https://github.com/rust-lang/rust/pull/86437\">https://github.com/rust-lang/rust/pull/86437</a> with some comments :)</p>\n</blockquote>\n<p>reading them</p>",
        "id": 243204521,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624047764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243179189\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> so I think we can just change <a href=\"https://github.com/rust-lang/rust/blob/50cc3de2ac37969080e5afb3cada6977eba20533/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L1293-L1295\">this code</a> to do <code>concrete_opaque_types.get(opaque_type_key)</code> here</p>\n</blockquote>\n<p>yes, I guess it shouldn't, I wanted to introduce a regression test for this and that's what I couldn't come up with</p>",
        "id": 243204567,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624047791
    },
    {
        "content": "<p>\"The <em>liberated</em> form of this would be\"</p>",
        "id": 243204702,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624047858
    },
    {
        "content": "<p>what's the meaning of liberated? I understand from context what you meant, I guess, but wondering if that terms is something that's used around</p>",
        "id": 243204759,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624047888
    },
    {
        "content": "<p>maybe you meant, revealed?</p>",
        "id": 243204823,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624047927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243204521\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243178447\">said</a>:</p>\n<blockquote>\n<p>OK, I opened <a href=\"https://github.com/rust-lang/rust/pull/86437\">https://github.com/rust-lang/rust/pull/86437</a> with some comments :)</p>\n</blockquote>\n<p>reading them</p>\n</blockquote>\n<p>the comments make sense to me</p>",
        "id": 243205386,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624048245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> my main question still is ... I can change the code to use <code>concrete_opaque_types.get(opaque_type_key)</code> but I guess we wanted a regression test before we do that, right?</p>",
        "id": 243205594,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624048370
    },
    {
        "content": "<p>I can investigate a bit more how to build one, but wasn't able to come up with something yesterday, maybe if I re-read the code with your comments ...</p>",
        "id": 243205645,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624048408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243204702\">said</a>:</p>\n<blockquote>\n<p>\"The <em>liberated</em> form of this would be\"</p>\n</blockquote>\n<p>it's a term we use in the compiler -- e.g., the <code>liberated_fn_sigs</code></p>",
        "id": 243211172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052739
    },
    {
        "content": "<p>it describes converting from \"bound\" regions to \"free\" regions</p>",
        "id": 243211179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052749
    },
    {
        "content": "<p>but it also implies the revelead forms of opaque types</p>",
        "id": 243211188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052759
    },
    {
        "content": "<p>ok, yeah, I got what you meant but wasn't sure if the term was something used along the compiler</p>",
        "id": 243211243,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624052779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243205594\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> my main question still is ... I can change the code to use <code>concrete_opaque_types.get(opaque_type_key)</code> but I guess we wanted a regression test before we do that, right?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I thought we were getting an ICE with the existing tests, right?</p>",
        "id": 243211244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243211243\">said</a>:</p>\n<blockquote>\n<p>ok, yeah, I got what you meant but wasn't sure if the term was something used along the compiler</p>\n</blockquote>\n<p>it's not a standard term, just something I made up</p>",
        "id": 243211254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052790
    },
    {
        "content": "<p>but it is used</p>",
        "id": 243211256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052793
    },
    {
        "content": "<p>so ... you get an ICE if you leave the assert</p>",
        "id": 243211267,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624052802
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckResults.html#structfield.liberated_fn_sigs\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckResults.html#structfield.liberated_fn_sigs</a></p>",
        "id": 243211272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243211267\">said</a>:</p>\n<blockquote>\n<p>so ... you get an ICE if you leave the assert</p>\n</blockquote>\n<p>I want to leave the assert</p>",
        "id": 243211281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052817
    },
    {
        "content": "<p>I do agree though it'd be good to get a regression test that does the wrong thing</p>",
        "id": 243211297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052834
    },
    {
        "content": "<p>I'm wodnering if that's actually <em>possble</em></p>",
        "id": 243211300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243211297\">said</a>:</p>\n<blockquote>\n<p>I do agree though it'd be good to get a regression test that does the wrong thing</p>\n</blockquote>\n<p>right</p>",
        "id": 243211305,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624052846
    },
    {
        "content": "<p>that's what I wanted</p>",
        "id": 243211308,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624052849
    },
    {
        "content": "<p>well ok</p>",
        "id": 243211321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052865
    },
    {
        "content": "<p>what was the original regression test that we were trying to fix?</p>",
        "id": 243211332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624052877
    },
    {
        "content": "<p>the assert could still live there but the code can be refactored or something and you could still have the issue</p>",
        "id": 243211372,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624052884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243084898\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">Z</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&lt;</span><span class=\"n\">Z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>so I think my messages starting here <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> are more or less close to what the test should be</p>",
        "id": 243211421,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624052945
    },
    {
        "content": "<p>and the original example was similar to that one</p>",
        "id": 243211440,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624052961
    },
    {
        "content": "<p>the test we want is one where you have a list with <code>[A, B]</code> and <code>[B, A]</code> as substs whose values on the map are different</p>",
        "id": 243211508,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053003
    },
    {
        "content": "<p>but I'm getting the same values on the map for both of them as you can see in this message ...</p>",
        "id": 243211529,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243084945\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_mir::borrow_check::type_check CHECK: concrete_opaque_types = VecMap([(OpaqueTypeKey { def_id: DefId(0:6 ~ multiple_def_uses_in_one_fn[317d]::X::{opaque#0}), substs: [T, Z] }, B), (OpaqueTypeKey { def_id: DefId(0:6 ~ multip    le_def_uses_in_one_fn[317d]::X::{opaque#0}), substs: [Z, T] }, B)])\nDEBUG rustc_mir::borrow_check::type_check CHECK: opaque_type_key = OpaqueTypeKey { def_id: DefId(0:6 ~ multiple_def_uses_in_one_fn[317d]::X::{opaque#0}), substs: [T, Z] }\nDEBUG rustc_mir::borrow_check::type_check CHECK: concrete_ty = B\nDEBUG rustc_mir::borrow_check::renumber renumber_regions(value=Z)\nDEBUG rustc_mir::borrow_check::type_check eq_opaque_type_and_type: concrete_ty=B=_ opaque_defn_ty=Z\nDEBUG rustc_mir::borrow_check::type_check CHECK: concrete_opaque_types = VecMap([(OpaqueTypeKey { def_id: DefId(0:6 ~ multiple_def_uses_in_one_fn[317d]::X::{opaque#0}), substs: [T, Z] }, B), (OpaqueTypeKey { def_id: DefId(0:6 ~ multip    le_def_uses_in_one_fn[317d]::X::{opaque#0}), substs: [Z, T] }, B)])\nDEBUG rustc_mir::borrow_check::type_check CHECK: opaque_type_key = OpaqueTypeKey { def_id: DefId(0:6 ~ multiple_def_uses_in_one_fn[317d]::X::{opaque#0}), substs: [Z, T] }\nDEBUG rustc_mir::borrow_check::type_check CHECK: concrete_ty = B\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 243211539,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053029
    },
    {
        "content": "<p><code>concrete_ty = B</code> twice</p>",
        "id": 243211559,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053065
    },
    {
        "content": "<p>so there opaque_type_key's substs are [T, Z] and the concrete_ty that comes from concrete_opaque_types is B</p>",
        "id": 243211642,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053133
    },
    {
        "content": "<p>and in the following case is [Z, T] but also concrete_ty is B</p>",
        "id": 243211652,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053144
    },
    {
        "content": "<p>if I can get an example where the second concrete_ty is something other than B, I'd be creating the test I need</p>",
        "id": 243211678,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053170
    },
    {
        "content": "<p>because, the old code does a find using the def_id so it grabs the first value (both matches), but I really want to grab the exact match (def_id + substs), in one of those cases would be the second value</p>",
        "id": 243211717,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053213
    },
    {
        "content": "<p>ok so</p>",
        "id": 243211797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053270
    },
    {
        "content": "<p>I think to get it to do the wrong thing</p>",
        "id": 243211806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053274
    },
    {
        "content": "<p>it is going to have to involve regions</p>",
        "id": 243211812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053278
    },
    {
        "content": "<p>because the borrow check is <em>just</em> inferring region info</p>",
        "id": 243211820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053285
    },
    {
        "content": "<p>the rest is figured out by typeck</p>",
        "id": 243211822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053288
    },
    {
        "content": "<p>one challenge is that typeck does still do some region analysis</p>",
        "id": 243211829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053297
    },
    {
        "content": "<p>oh wait</p>",
        "id": 243211837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053304
    },
    {
        "content": "<p>there might be some flag to skip that</p>",
        "id": 243211847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243211812\">said</a>:</p>\n<blockquote>\n<p>it is going to have to involve regions</p>\n</blockquote>\n<p>makes sense</p>",
        "id": 243211858,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243211847\">said</a>:</p>\n<blockquote>\n<p>there might be some flag to skip that</p>\n</blockquote>\n<p>that would be cool :)</p>",
        "id": 243211922,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053367
    },
    {
        "content": "<p>ok, wait</p>",
        "id": 243212037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053485
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(min_type_alias_impl_trait)]</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;'</span><span class=\"na\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">u</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">t</span> <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">u</span> <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">&lt;'</span><span class=\"na\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">u</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&lt;'</span><span class=\"na\">u</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 243212041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053489
    },
    {
        "content": "<p>so if <code>X&lt;'a, 'b&gt; = &amp;'a u32</code></p>",
        "id": 243212056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053506
    },
    {
        "content": "<p>no wait</p>",
        "id": 243212062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053512
    },
    {
        "content": "<p>ok so</p>",
        "id": 243212072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053526
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(min_type_alias_impl_trait)]</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;'</span><span class=\"na\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">u</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">t</span> <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">u</span> <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">&lt;'</span><span class=\"na\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">u</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&lt;'</span><span class=\"na\">u</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 243212075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053528
    },
    {
        "content": "<p>this test should not pass, but it does</p>",
        "id": 243212080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053536
    },
    {
        "content": "<p>in the first case, we require that <code>X&lt;'t, 'u&gt; = &amp;'t u32</code>, which means <code>type X&lt;'a, 'b&gt; = &amp;'a u32</code></p>",
        "id": 243212112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053560
    },
    {
        "content": "<p>ok, let me try this out</p>",
        "id": 243212135,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053587
    },
    {
        "content": "<p>in the first case, we require that <code>X&lt;'u, 't&gt; = &amp;'t u32</code>, which means <code>type X&lt;'a, 'b&gt; = &amp;'b u32</code></p>",
        "id": 243212144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053596
    },
    {
        "content": "<p>which are different :)</p>",
        "id": 243212152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053602
    },
    {
        "content": "<p>yes, makes sense</p>",
        "id": 243212380,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053752
    },
    {
        "content": "<p>that's what I was trying to do exactly but using types</p>",
        "id": 243212395,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053763
    },
    {
        "content": "<p>as you've said, we are borrow checking here so lifetimes are what I want in this case</p>",
        "id": 243212430,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053796
    },
    {
        "content": "<p>thanks</p>",
        "id": 243212434,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> on your branch, if you have one, does it get an error?</p>",
        "id": 243212453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053813
    },
    {
        "content": "<p>or at least an ICE :)</p>",
        "id": 243212457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243211272\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckResults.html#structfield.liberated_fn_sigs\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckResults.html#structfield.liberated_fn_sigs</a></p>\n</blockquote>\n<p>maybe I should lnk to this in the comment where I use the phrase \"liberated\"</p>",
        "id": 243212496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053842
    },
    {
        "content": "<p>or to <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.liberate_late_bound_regions\"><code>liberate_late_bound_regions</code></a></p>",
        "id": 243212542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624053862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243212453\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> on your branch, if you have one, does it get an error?</p>\n</blockquote>\n<p>I have some local changes but I can push everything in a bit</p>",
        "id": 243212560,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053877
    },
    {
        "content": "<p>so ... if I call ...</p>",
        "id": 243212619,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053955
    },
    {
        "content": "<p><code>get_value_matching(|(key, _)| key.def_id == opaque_type_key.def_id)</code> I get an ICE</p>",
        "id": 243212667,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053970
    },
    {
        "content": "<p><code>any_value_matching(|(key, _)| key.def_id == opaque_type_key.def_id)</code> it compiles</p>",
        "id": 243212682,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624053989
    },
    {
        "content": "<p>but I should just <code>get</code> using the whole key</p>",
        "id": 243212690,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624054005
    },
    {
        "content": "<p>let me see what happens if I do so</p>",
        "id": 243212693,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624054011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> doing that I get ...</p>",
        "id": 243212896,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624054198
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0720]: cannot resolve opaque type\n  --&gt; library/core/src/iter/adapters/enumerate.rs:80:14\n   |\n80 |         ) -&gt; impl FnMut(Acc, T) -&gt; R + &#39;a {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive opaque type\n\nerror[E0720]: cannot resolve opaque type\n  --&gt; library/core/src/iter/adapters/filter.rs:43:6\n   |\n43 | ) -&gt; impl FnMut(Acc, T) -&gt; R + &#39;a {\n   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive opaque type\n\nerror[E0720]: cannot resolve opaque type\n  --&gt; library/core/src/iter/adapters/filter_map.rs:45:6\n   |\n45 | ) -&gt; impl FnMut(Acc, T) -&gt; R + &#39;a {\n   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive opaque type\n\nerror[E0720]: cannot resolve opaque type\n  --&gt; library/core/src/iter/adapters/filter_map.rs:99:14\n   |\n99 |         ) -&gt; impl FnMut((), T) -&gt; ControlFlow&lt;B&gt; + &#39;_ {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive opaque type\n\nerror[E0720]: cannot resolve opaque type\n   --&gt; library/core/src/iter/adapters/flatten.rs:302:14\n    |\n302 |         ) -&gt; impl FnMut(Acc, T) -&gt; R + &#39;a {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive opaque type\n\nerror[E0720]: cannot resolve opaque type\n   --&gt; library/core/src/iter/adapters/flatten.rs:335:14\n    |\n335 |         ) -&gt; impl FnMut(Acc, T) -&gt; Acc + &#39;_ {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive opaque type\n\nerror[E0720]: cannot resolve opaque type\n   --&gt; library/core/src/iter/adapters/flatten.rs:391:14\n    |\n391 |         ) -&gt; impl FnMut(Acc, T) -&gt; R + &#39;a\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive opaque type\n\nerror[E0720]: cannot resolve opaque type\n   --&gt; library/core/src/iter/adapters/flatten.rs:427:14\n    |\n427 |         ) -&gt; impl FnMut(Acc, T) -&gt; Acc + &#39;_\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive opaque type\n</code></pre></div>",
        "id": 243212901,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624054201
    },
    {
        "content": "<p>in code like ...</p>",
        "id": 243212974,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624054241
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">try_fold</span><span class=\"o\">&lt;</span><span class=\"n\">Acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Fold</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">init</span>: <span class=\"nc\">Acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fold</span>: <span class=\"nc\">Fold</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Fold</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"n\">Acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">R</span>: <span class=\"nc\">Try</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Acc</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">enumerate</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">count</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">fold</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"n\">Acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">))</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"n\">Acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#[rustc_inherit_overflow_checks]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fold</span><span class=\"p\">(</span><span class=\"n\">acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">count</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">*</span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">acc</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">try_fold</span><span class=\"p\">(</span><span class=\"n\">init</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">enumerate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fold</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 243212995,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624054271
    },
    {
        "content": "<p>huh</p>",
        "id": 243213006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624054284
    },
    {
        "content": "<p>unsure why it doesn't like fns, inside fns</p>",
        "id": 243213013,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624054301
    },
    {
        "content": "<p>anyway, can debug this</p>",
        "id": 243213067,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624054330
    },
    {
        "content": "<p>not right now but I will</p>",
        "id": 243213079,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624054359
    },
    {
        "content": "<p>but I guess substs for those lifetimes don't match?</p>",
        "id": 243213097,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624054396
    },
    {
        "content": "<p>unsure if they were already renumbered?</p>",
        "id": 243213108,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624054407
    },
    {
        "content": "<p>I meant, what I have in the key and what really is in the map</p>",
        "id": 243213160,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624054447
    },
    {
        "content": "<p>did you print out what the substs say?</p>",
        "id": 243214546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624056359
    },
    {
        "content": "<p>i was wondering if they might not match for some reason</p>",
        "id": 243214588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624056366
    },
    {
        "content": "<p>I filed <a href=\"https://github.com/rust-lang/rust/issues/86465\">https://github.com/rust-lang/rust/issues/86465</a> for this example</p>",
        "id": 243237481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624091348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/243213108\">said</a>:</p>\n<blockquote>\n<p>unsure if they were already renumbered?</p>\n</blockquote>\n<p>yes, that's the problem</p>",
        "id": 243238242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624092626
    },
    {
        "content": "<p>I did a bit of digging</p>",
        "id": 243238244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624092628
    },
    {
        "content": "<p>so we either have to (a) renumber the keys in the <code>concrete_opaque_types</code> map</p>",
        "id": 243238248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624092638
    },
    {
        "content": "<p>or (b) convert the <code>opaque_type_key</code> back</p>",
        "id": 243238252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624092654
    },
    {
        "content": "<p>I think (a) is probably easier</p>",
        "id": 243238253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624092656
    },
    {
        "content": "<p>the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/universal_regions/struct.UniversalRegionIndices.html#method.fold_to_region_vids\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/universal_regions/struct.UniversalRegionIndices.html#method.fold_to_region_vids</a> could be helpful, roughly as <span class=\"user-mention\" data-user-id=\"328097\">@BN</span> did in <a href=\"https://github.com/rust-lang/rust/issues/85755\">#85755</a></p>",
        "id": 243238264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624092715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you told me to fix this problem here <a href=\"https://github.com/spastorino/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L969\">https://github.com/spastorino/rust/blob/246571a846e29691bd535d531365acd318857207/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L969</a></p>",
        "id": 243973246,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624656575
    },
    {
        "content": "<p>but I was wondering ... hmm I'm not sure exactly what were you planning</p>",
        "id": 243973457,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624656702
    },
    {
        "content": "<p>I meant, because at that point <code>opaque_type_values</code> are still empty</p>",
        "id": 243973735,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624656855
    },
    {
        "content": "<p>maybe I misunderstood what you were trying to say</p>",
        "id": 243973754,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624656865
    },
    {
        "content": "<p>I guess the conversion could be done here <a href=\"https://github.com/spastorino/rust/blob/50cc3de2ac37969080e5afb3cada6977eba20533/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L186\">https://github.com/spastorino/rust/blob/50cc3de2ac37969080e5afb3cada6977eba20533/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L186</a></p>",
        "id": 243974332,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624657258
    },
    {
        "content": "<p>but I'm not sure what did you mean when you said do it in <code>TypeCheck::new</code> and how did you mean to do it there</p>",
        "id": 243974377,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624657294
    },
    {
        "content": "<p>well, it seems that what I'm saying doesn't work :)</p>",
        "id": 243975394,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624657990
    },
    {
        "content": "<p>have pushed what I have <a href=\"https://github.com/rust-lang/rust/issues/86410\">#86410</a></p>",
        "id": 243975402,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624658002
    },
    {
        "content": "<p>I'd need to take a deeper look into this because I've gone over it quickly</p>",
        "id": 243975429,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624658023
    },
    {
        "content": "<p>I'm trying to remember, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 244156248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891804
    },
    {
        "content": "<p>Let me start with the \"naïve\" fix</p>",
        "id": 244156288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 244156444,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624891872
    },
    {
        "content": "<p>I think <a href=\"https://github.com/rust-lang/rust/issues/86410\">#86410</a> has the naive fix</p>",
        "id": 244156456,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624891877
    },
    {
        "content": "<p>but it doesn't compile, I needed to just take a look and fix the compilation error</p>",
        "id": 244156497,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624891891
    },
    {
        "content": "<p>just did something quickly and pushed</p>",
        "id": 244156511,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624891897
    },
    {
        "content": "<p>need to check</p>",
        "id": 244156520,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624891902
    },
    {
        "content": "<p>I see; yes, I believe that is the naive fix</p>",
        "id": 244156600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891925
    },
    {
        "content": "<p>I think what I was suggesting is that you could do that same thing</p>",
        "id": 244156692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891960
    },
    {
        "content": "<p>but you could do it <em>earlier</em></p>",
        "id": 244156699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891963
    },
    {
        "content": "<p>and cache the result</p>",
        "id": 244156703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891965
    },
    {
        "content": "<p><code>let concrete_opaque_types = &amp;tcx.typeck(anon_owner_def_id).concrete_opaque_types;</code></p>",
        "id": 244156737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891979
    },
    {
        "content": "<p>this is independent of all the parameters to that function</p>",
        "id": 244156760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891987
    },
    {
        "content": "<p>so <code>concrete_opaque_types</code> could be stored in a field on the <code>TypeChecker</code></p>",
        "id": 244156772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624891996
    },
    {
        "content": "<p>as for why it doesn't build, you just need</p>",
        "id": 244156799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624892010
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">concrete_opaque_types</span>: <span class=\"nc\">VecMap</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244156824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624892023
    },
    {
        "content": "<p>or something like that</p>",
        "id": 244156841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624892026
    },
    {
        "content": "<p>yes</p>",
        "id": 244157117,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624892137
    },
    {
        "content": "<p>I've already done that</p>",
        "id": 244157134,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624892144
    },
    {
        "content": "<p>lol :P</p>",
        "id": 244157139,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624892146
    },
    {
        "content": "<p>I think there's another problem</p>",
        "id": 244157155,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624892152
    },
    {
        "content": "<p>let me see</p>",
        "id": 244157161,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624892154
    },
    {
        "content": "<p>I was doing this the saturday meanwhile my daughter was around :)</p>",
        "id": 244157260,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624892182
    },
    {
        "content": "<p>let me re-check and push again or something</p>",
        "id": 244157279,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624892192
    },
    {
        "content": "<p>ohh I see</p>",
        "id": 244157313,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624892206
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: compiler/rustc_mir/src/borrow_check/universal_regions.rs:782:36: cannot convert `ReErased` to a region vid\n\nthread &#39;rustc&#39; panicked at &#39;Box&lt;dyn Any&gt;&#39;, compiler/rustc_errors/src/lib.rs:1007:9\nstack backtrace:\n   0: std::panicking::begin_panic\n             at ./library/std/src/panicking.rs:541:12\n   1: std::panic::panic_any\n             at ./library/std/src/panic.rs:60:5\n   2: rustc_errors::HandlerInner::bug\n             at ./compiler/rustc_errors/src/lib.rs:1007:9\n   3: rustc_errors::Handler::bug\n             at ./compiler/rustc_errors/src/lib.rs:715:9\n   4: rustc_middle::util::bug::opt_span_bug_fmt::{{closure}}\n             at ./compiler/rustc_middle/src/util/bug.rs:34:34\n   5: rustc_middle::ty::context::tls::with_opt::{{closure}}\n             at ./compiler/rustc_middle/src/ty/context.rs:1806:40\n   6: rustc_middle::ty::context::tls::with_context_opt\n             at ./compiler/rustc_middle/src/ty/context.rs:1758:22\n   7: rustc_middle::ty::context::tls::with_opt\n             at ./compiler/rustc_middle/src/ty/context.rs:1806:9\n   8: rustc_middle::util::bug::opt_span_bug_fmt\n             at ./compiler/rustc_middle/src/util/bug.rs:30:5\n   9: rustc_middle::util::bug::bug_fmt\n             at ./compiler/rustc_middle/src/util/bug.rs:14:5\n  10: rustc_mir::borrow_check::universal_regions::UniversalRegionIndices::to_region_vid::{{closure}}\n             at ./compiler/rustc_mir/src/borrow_check/universal_regions.rs:782:36\n  11: core::option::Option&lt;T&gt;::unwrap_or_else\n             at ./library/core/src/option.rs:429:21\n  12: rustc_mir::borrow_check::universal_regions::UniversalRegionIndices::to_region_vid\n             at ./compiler/rustc_mir/src/borrow_check/universal_regions.rs:779:14\n  13: rustc_mir::borrow_check::universal_regions::UniversalRegionIndices::fold_to_region_vids::{{closure}}\n             at ./compiler/rustc_mir/src/borrow_check/universal_regions.rs:793:37\n  14: &lt;rustc_middle::ty::fold::RegionFolder as rustc_middle::ty::fold::TypeFolder&gt;::fold_region\n             at ./compiler/rustc_middle/src/ty/fold.rs:437:17\n  15: rustc_middle::ty::structural_impls::&lt;impl rustc_middle::ty::fold::TypeFoldable for &amp;rustc_middle::ty::sty::RegionKind&gt;::fold_with\n             at ./compiler/rustc_middle/src/ty/structural_impls.rs:957:9\n  16: &lt;rustc_middle::ty::subst::GenericArg as rustc_middle::ty::fold::TypeFoldable&gt;::super_fold_with\n             at ./compiler/rustc_middle/src/ty/subst.rs:158:45\n  17: rustc_middle::ty::fold::TypeFoldable::fold_with\n             at ./compiler/rustc_middle/src/ty/fold.rs:51:9\n  18: rustc_middle::ty::subst::&lt;impl rustc_middle::ty::fold::TypeFoldable for &amp;rustc_middle::ty::list::List&lt;rustc_middle::ty::subst::GenericArg&gt;&gt;::super_fold_with::{{closure}}\n             at ./compiler/rustc_middle/src/ty/subst.rs:390:68\n  19: core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once\n             at ./library/core/src/ops/function.rs:280:13\n  20: core::option::Option&lt;T&gt;::map\n             at ./library/core/src/option.rs:489:29\n  21: &lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next\n             at ./library/core/src/iter/adapters/map.rs:101:9\n  22: &lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend\n             at /home/santiago/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.6.1/src/lib.rs:1663:36\n  23: &lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter\n             at /home/santiago/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.6.1/src/lib.rs:1648:9\n  24: core::iter::traits::iterator::Iterator::collect\n             at ./library/core/src/iter/traits/iterator.rs:1748:9\n  25: rustc_middle::ty::subst::&lt;impl rustc_middle::ty::fold::TypeFoldable for &amp;rustc_middle::ty::list::List&lt;rustc_middle::ty::subst::GenericArg&gt;&gt;::super_fold_with\n             at ./compiler/rustc_middle/src/ty/subst.rs:390:48\n  26: rustc_middle::ty::fold::TypeFoldable::fold_with\n             at ./compiler/rustc_middle/src/ty/fold.rs:51:9\n  27: rustc_middle::ty::structural_impls::&lt;impl rustc_middle::ty::fold::TypeFoldable for &amp;rustc_middle::ty::TyS&gt;::super_fold_with\n             at ./compiler/rustc_middle/src/ty/structural_impls.rs:878:58\n  28: rustc_middle::ty::fold::TypeFolder::fold_ty\n             at ./compiler/rustc_middle/src/ty/fold.rs:174:9\n  29: rustc_middle::ty::structural_impls::&lt;impl rustc_middle::ty::fold::TypeFoldable for &amp;rustc_middle::ty::TyS&gt;::fold_with\n             at ./compiler/rustc_middle/src/ty/structural_impls.rs:901:9\n  30: rustc_middle::ty::fold::&lt;impl rustc_middle::ty::context::TyCtxt&gt;::fold_regions\n             at ./compiler/rustc_middle/src/ty/fold.rs:274:9\n  31: rustc_mir::borrow_check::universal_regions::UniversalRegionIndices::fold_to_region_vids\n             at ./compiler/rustc_mir/src/borrow_check/universal_regions.rs:792:9\n  32: rustc_mir::borrow_check::type_check::TypeChecker::eq_opaque_type_and_type::{{closure}}\n             at ./compiler/rustc_mir/src/borrow_check/type_check/mod.rs:1281:21\n  33: core::iter::adapters::map::map_fold::{{closure}}\n             at ./library/core/src/iter/adapters/map.rs:82:28\n  34: core::iter::traits::iterator::Iterator::fold\n             at ./library/core/src/iter/traits/iterator.rs:2173:21\n  35: &lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold\n             at ./library/core/src/iter/adapters/map.rs:122:9\n  36: core::iter::traits::iterator::Iterator::for_each\n             at ./library/core/src/iter/traits/iterator.rs:736:9\n  37: &lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend\n             at ./library/alloc/src/vec/spec_extend.rs:40:17\n  38: &lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter\n             at ./library/alloc/src/vec/spec_from_iter_nested.rs:56:9\n  39: &lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter\n             at ./library/alloc/src/vec/spec_from_iter.rs:33:9\n  40: &lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter\n             at ./library/alloc/src/vec/mod.rs:2461:9\n  41: core::iter::traits::iterator::Iterator::collect\n             at ./library/core/src/iter/traits/iterator.rs:1748:9\n  42: &lt;rustc_data_structures::vec_map::VecMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter\n             at ./compiler/rustc_data_structures/src/vec_map.rs:115:14\n  43: core::iter::traits::iterator::Iterator::collect\n             at ./library/core/src/iter/traits/iterator.rs:1748:9\n  44: rustc_mir::borrow_check::type_check::TypeChecker::eq_opaque_type_and_type\n             at ./compiler/rustc_mir/src/borrow_check/type_check/mod.rs:1276:76\n  45: rustc_mir::borrow_check::type_check::input_output::&lt;impl rustc_mir::borrow_check::type_check::TypeChecker&gt;::equate_inputs_and_outputs\n             at ./compiler/rustc_mir/src/borrow_check/type_check/input_output.rs:122:28\n  46: rustc_mir::borrow_check::type_check::type_check::{{closure}}\n             at ./compiler/rustc_mir/src/borrow_check/type_check/mod.rs:179:13\n  47: rustc_mir::borrow_check::type_check::type_check_internal\n             at ./compiler/rustc_mir/src/borrow_check/type_check/mod.rs:221:5\n  48: rustc_mir::borrow_check::type_check::type_check\n             at ./compiler/rustc_mir/src/borrow_check/type_check/mod.rs:169:30\n  49: rustc_mir::borrow_check::nll::compute_regions\n             at ./compiler/rustc_mir/src/borrow_check/nll.rs:177:9\n  50: rustc_mir::borrow_check::do_mir_borrowck\n             at ./compiler/rustc_mir/src/borrow_check/mod.rs:208:9\n  51: rustc_mir::borrow_check::mir_borrowck::{{closure}}\n             at ./compiler/rustc_mir/src/borrow_check/mod.rs:111:9\n  52: rustc_infer::infer::InferCtxtBuilder::enter\n             at ./compiler/rustc_infer/src/infer/mod.rs:580:9\n  53: rustc_mir::borrow_check::mir_borrowck\n             at ./compiler/rustc_mir/src/borrow_check/mod.rs:108:27\n  54: rustc_mir::borrow_check::provide::{{closure}}\n             at ./compiler/rustc_mir/src/borrow_check/mod.rs:91:17\n  55: core::ops::function::FnOnce::call_once\n             at ./library/core/src/ops/function.rs:227:5\n  56: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl::{{closure}}\n             at ./compiler/rustc_query_system/src/dep_graph/graph.rs:243:62\n  57: rustc_middle::dep_graph::&lt;impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind&gt;::with_deps::{{closure}}::{{closure}}\n             at ./compiler/rustc_middle/src/dep_graph/mod.rs:76:46\n  58: rustc_middle::ty::context::tls::enter_context::{{closure}}\n             at ./compiler/rustc_middle/src/ty/context.rs:1741:50\n  59: rustc_middle::ty::context::tls::set_tlv\n             at ./compiler/rustc_middle/src/ty/context.rs:1725:9\n  60: rustc_middle::ty::context::tls::enter_context\n             at ./compiler/rustc_middle/src/ty/context.rs:1741:9\n  61: rustc_middle::dep_graph::&lt;impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind&gt;::with_deps::{{closure}}\n             at ./compiler/rustc_middle/src/dep_graph/mod.rs:76:13\n  62: rustc_middle::ty::context::tls::with_context::{{closure}}\n             at ./compiler/rustc_middle/src/ty/context.rs:1769:40\n  63: rustc_middle::ty::context::tls::with_context_opt\n             at ./compiler/rustc_middle/src/ty/context.rs:1758:22\n  64: rustc_middle::ty::context::tls::with_context\n             at ./compiler/rustc_middle/src/ty/context.rs:1769:9\n  65: rustc_middle::dep_graph::&lt;impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind&gt;::with_deps\n             at ./compiler/rustc_middle/src/dep_graph/mod.rs:73:9\n  66: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n             at ./compiler/rustc_query_system/src/dep_graph/graph.rs:243:26\n  67: rustc_query_system::query::plumbing::force_\n</code></pre></div>",
        "id": 244157317,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624892209
    },
    {
        "content": "<p>anyway, don't worry, will take a look</p>",
        "id": 244157642,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624892346
    },
    {
        "content": "<p>ohh right, we are trying to convert a <code>ReErased</code> region, unsure how this is in general done but I guess we want to skip those?</p>",
        "id": 244157940,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624892472
    },
    {
        "content": "<p>I guess we need something like ...</p>",
        "id": 244160335,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624893453
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_mir/src/borrow_check/type_check/mod.rs b/compiler/rustc_mir/src/borrow_check/type_check/mod.rs</span>\n<span class=\"gh\">index a535b1fa354..607af7bd763 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_mir/src/borrow_check/type_check/mod.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_mir/src/borrow_check/type_check/mod.rs</span>\n<span class=\"gu\">@@ -1276,13 +1276,18 @@ fn eq_opaque_type_and_type(</span>\n         let concrete_opaque_types: VecMap&lt;_, _&gt; = concrete_opaque_types\n             .iter()\n             .map(|(k, v)| {\n<span class=\"gd\">-                (</span>\n<span class=\"gd\">-                    *k,</span>\n<span class=\"gd\">-                    self.borrowck_context</span>\n<span class=\"gd\">-                        .universal_regions</span>\n<span class=\"gd\">-                        .indices</span>\n<span class=\"gd\">-                        .fold_to_region_vids(infcx.tcx, *v),</span>\n<span class=\"gd\">-                )</span>\n<span class=\"gi\">+                let substs = tcx.fold_regions(k.substs, &amp;mut false, |region, _| {</span>\n<span class=\"gi\">+                    if let ty::ReVar(..) = region {</span>\n<span class=\"gi\">+                        self.borrowck_context</span>\n<span class=\"gi\">+                            .universal_regions</span>\n<span class=\"gi\">+                            .indices</span>\n<span class=\"gi\">+                            .fold_to_region_vids(tcx, region)</span>\n<span class=\"gi\">+                    } else {</span>\n<span class=\"gi\">+                        region</span>\n<span class=\"gi\">+                    }</span>\n<span class=\"gi\">+                });</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+                (OpaqueTypeKey { def_id: k.def_id, substs }, *v)</span>\n             })\n             .collect();\n</code></pre></div>",
        "id": 244160342,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624893456
    },
    {
        "content": "<p>trying that out</p>",
        "id": 244160381,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624893474
    },
    {
        "content": "<p>hmmm still getting ...</p>",
        "id": 244162501,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624894335
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0720]: cannot resolve opaque type\n  --&gt; library/core/src/iter/adapters/take.rs:85:14\n   |\n85 |         ) -&gt; impl FnMut(Acc, T) -&gt; ControlFlow&lt;R, Acc&gt; + &#39;a {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ recursive opaque type\n</code></pre></div>",
        "id": 244162524,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624894344
    },
    {
        "content": "<p>but I'm not sure how right my proposed \"fix\" was</p>",
        "id": 244162558,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624894358
    },
    {
        "content": "<p>well there's no <code>ReVar</code> region at that point</p>",
        "id": 244173051,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624898922
    },
    {
        "content": "<p>would need to read a bit to understand how it works</p>",
        "id": 244173089,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624898948
    },
    {
        "content": "<p>meanwhile pointers are appreciated</p>",
        "id": 244173102,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624898954
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_mir::borrow_check::type_check CHECK: concrete_opaque_types=VecMap([(OpaqueTypeKey { def_id: DefId(0:7394 ~ core[ef11]::iter::traits::iterator::Iterator::partition_in_place::is_true::{opaque#1}), substs: [T, impl FnMut(&amp;       T) -&gt; bool, ReFree(DefId(0:7391 ~ core[ef11]::iter::traits::iterator::Iterator::partition_in_place::is_true), BrAnon(0))] }, [closure@library/core/src/iter/traits/iterator.rs:1862:13: 1862:37])])\nDEBUG rustc_mir::borrow_check::type_check CHECK: opaque_type_key=OpaqueTypeKey { def_id: DefId(0:7394 ~ core[ef11]::iter::traits::iterator::Iterator::partition_in_place::is_true::{opaque#1}), substs: [T, impl FnMut(&amp;T) -&gt; bool, &#39;_#       1r] }\n</code></pre></div>",
        "id": 244175280,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624899926
    },
    {
        "content": "<p>I have a <code>ReFree</code> in the <code>concrete_opaque_types</code> map and <code>ReVar</code> in <code>opaque_type_key</code></p>",
        "id": 244178366,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624901257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/244157940\">said</a>:</p>\n<blockquote>\n<p>ohh right, we are trying to convert a <code>ReErased</code> region, unsure how this is in general done but I guess we want to skip those?</p>\n</blockquote>\n<p>hmm, I'm not sure I expect to get an <code>ReErased</code> region here! that's funny. Is this building lib core, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ?</p>",
        "id": 244340834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624997675
    },
    {
        "content": "<p>yes</p>",
        "id": 244341054,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624997763
    },
    {
        "content": "<p>it's building core</p>",
        "id": 244341093,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624997767
    },
    {
        "content": "<p>I'm not sure what kind of lifetimes are we supposed to have there</p>",
        "id": 244341112,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624997776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/244340834\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/244157940\">said</a>:</p>\n<blockquote>\n<p>ohh right, we are trying to convert a <code>ReErased</code> region, unsure how this is in general done but I guess we want to skip those?</p>\n</blockquote>\n<p>hmm, I'm not sure I expect to get an <code>ReErased</code> region here! that's funny. Is this building lib core, <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> ?</p>\n</blockquote>\n<p>you get <code>ReErased</code>, <code>ReFree</code> and all the different types of lifetimes but <code>ReVar</code> which is the one this method assumes that you would be getting</p>",
        "id": 244341241,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1624997832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> can you push the ICEing version to github?</p>",
        "id": 244357341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625006283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what do you mean by ICEing version?</p>",
        "id": 244357608,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625006451
    },
    {
        "content": "<p>the latest stuff is up</p>",
        "id": 244357611,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625006455
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/86410\">#86410</a></p>",
        "id": 244357626,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625006466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you would see here <a href=\"https://github.com/rust-lang/rust/pull/86410/files#diff-88ddacabf09eb79ece1dbfada296b5f0312b22bdfeba5013740b4f480e853355R1280\">https://github.com/rust-lang/rust/pull/86410/files#diff-88ddacabf09eb79ece1dbfada296b5f0312b22bdfeba5013740b4f480e853355R1280</a> that that never matches</p>",
        "id": 244357694,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625006523
    },
    {
        "content": "<p>region is never <code>ReVar</code> and if I remove the if let you would get an ICE</p>",
        "id": 244357734,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625006546
    },
    {
        "content": "<p>maybe that's what you meant by ICEing?</p>",
        "id": 244357737,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625006553
    },
    {
        "content": "<p>to ICE we need to remove the if let else part and leave the call to <code>fold_to_region_vids</code></p>",
        "id": 244357759,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625006582
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, are you around now?</p>",
        "id": 245039904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625578910
    },
    {
        "content": "<p>I was going to look into this a bit with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 245039911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625578914
    },
    {
        "content": "<p>hey</p>",
        "id": 245047048,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625582014
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 245047057,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625582021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> do you need something from me?</p>",
        "id": 245047087,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625582034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> we just pushed some things to your branch :)</p>",
        "id": 245047750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625582295
    },
    {
        "content": "<p>We got the code here working</p>",
        "id": 245047764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625582301
    },
    {
        "content": "<p>cool</p>",
        "id": 245047778,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625582306
    },
    {
        "content": "<p>I was going to invite you to join into our chat session</p>",
        "id": 245047789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625582310
    },
    {
        "content": "<p>ohh ouch :)</p>",
        "id": 245047814,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625582318
    },
    {
        "content": "<p>did you record it? :P</p>",
        "id": 245047840,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625582326
    },
    {
        "content": "<p>no :)</p>",
        "id": 245047852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625582329
    },
    {
        "content": "<p>but you can see the two commits, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> or I can explain</p>",
        "id": 245047863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625582336
    },
    {
        "content": "<p>there were 2 separate problems</p>",
        "id": 245047903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625582357
    },
    {
        "content": "<p>(1) you were doing the mapping wrong, which is what led to the value not being found</p>",
        "id": 245047923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625582365
    },
    {
        "content": "<p>(2) in the typeck/collect code, some of what we we did in the first PR wasn't right -- instead of getting a single value out from the map, what we needed to do was to iterate over all values</p>",
        "id": 245047968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625582386
    },
    {
        "content": "<p>(that was my bad, I misunderstood that part in review)</p>",
        "id": 245047981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625582393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/245047923\">said</a>:</p>\n<blockquote>\n<p>(1) you were doing the mapping wrong, which is what led to the value not being found</p>\n</blockquote>\n<p>mapping wrong? say more :)</p>",
        "id": 245048224,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625582484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/245047968\">said</a>:</p>\n<blockquote>\n<p>(2) in the typeck/collect code, some of what we we did in the first PR wasn't right -- instead of getting a single value out from the map, what we needed to do was to iterate over all values</p>\n</blockquote>\n<p>ohh ok I see that the code goes over all the elements but curious about what issue was produced without doing that</p>",
        "id": 245048434,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625582567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/245048434\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/245047968\">said</a>:</p>\n<blockquote>\n<p>(2) in the typeck/collect code, some of what we we did in the first PR wasn't right -- instead of getting a single value out from the map, what we needed to do was to iterate over all values</p>\n</blockquote>\n<p>ohh ok I see that the code goes over all the elements but curious about what issue was produced without doing that</p>\n</blockquote>\n<p>the issue was that it did not see the second defining use in the same function, and thus did not error with a conflict</p>",
        "id": 245048545,
        "sender_full_name": "oli",
        "timestamp": 1625582611
    },
    {
        "content": "<p>it just compiled successfully, like before all the other changes</p>",
        "id": 245048572,
        "sender_full_name": "oli",
        "timestamp": 1625582623
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 245048598,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625582633
    },
    {
        "content": "<p>which makes me wonder why the original thing (different types), was fixed. Is that checked elsewhere? do we have duplicate checks now?</p>",
        "id": 245048710,
        "sender_full_name": "oli",
        "timestamp": 1625582672
    },
    {
        "content": "<p>I would have thought that to be checked right here with a loop</p>",
        "id": 245048746,
        "sender_full_name": "oli",
        "timestamp": 1625582691
    },
    {
        "content": "<p>but I should probably stop asking and start getting up to date on all the TAIT PRs that happened</p>",
        "id": 245048785,
        "sender_full_name": "oli",
        "timestamp": 1625582710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/245048710\">said</a>:</p>\n<blockquote>\n<p>which makes me wonder why the original thing (different types), was fixed. Is that checked elsewhere? do we have duplicate checks now?</p>\n</blockquote>\n<p>it's a good question, actually</p>",
        "id": 245049327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625582933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/taits.20deconstruction.20ICE/near/245048224\">said</a>:</p>\n<blockquote>\n<p>mapping wrong? say more :)</p>\n</blockquote>\n<p>well, the code you had written was only mapping <code>ReVar</code> instances</p>",
        "id": 245049506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583013
    },
    {
        "content": "<p>but that is kind of the opposite of what we want</p>",
        "id": 245049532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583023
    },
    {
        "content": "<p>we want to map non-variables <em>into</em> variables</p>",
        "id": 245049549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583035
    },
    {
        "content": "<p>yeah yeah, I've added that because otherwise was ICEing</p>",
        "id": 245049565,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625583039
    },
    {
        "content": "<p>beacuse in the NLL checker, we represent <em>all</em> regions as ReVar</p>",
        "id": 245049569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583040
    },
    {
        "content": "<p>but I think I see what was wrong anyway</p>",
        "id": 245049610,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625583058
    },
    {
        "content": "<p>and so we have to convert from the <code>ReFree</code> and whatever else into <code>ReVar</code></p>",
        "id": 245049612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583058
    },
    {
        "content": "<p>my original code was ...</p>",
        "id": 245049634,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625583072
    },
    {
        "content": "<p>I also took the opportunity to fold the entire key, but that's a minor detail</p>",
        "id": 245049635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583073
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">concrete_opaque_types</span>: <span class=\"nc\">VecMap</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">concrete_opaque_types</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">fold_regions</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">.</span><span class=\"n\">substs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">region</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">borrowck_context</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">universal_regions</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">indices</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">fold_to_region_vids</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">region</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"n\">OpaqueTypeKey</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def_id</span>: <span class=\"nc\">k</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 245049804,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625583148
    },
    {
        "content": "<p>I was doing that originally, and was ICEing</p>",
        "id": 245049812,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625583154
    },
    {
        "content": "<p>but unsure why I've added the tcx.fold_regions first, and I guess that's the problem</p>",
        "id": 245049850,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625583173
    },
    {
        "content": "<p>end calling <code>fold_to_region_vids</code> on <code>region</code> instead of on <code>k</code>, and I guess for some reason that's wrong</p>",
        "id": 245049930,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625583214
    },
    {
        "content": "<p>hmm</p>",
        "id": 245050475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583424
    },
    {
        "content": "<p>I don't know what that would be wrong</p>",
        "id": 245050481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583427
    },
    {
        "content": "<p>well</p>",
        "id": 245050507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583438
    },
    {
        "content": "<p>oh, I guess you probably have to be a <em>bit</em> more careful than that</p>",
        "id": 245050529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583447
    },
    {
        "content": "<p>you're probably not handling bound regions correctly</p>",
        "id": 245050565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583461
    },
    {
        "content": "<p>I forget if <code>fold_regions</code> invokes the callback on <em>every</em> region, I think it does</p>",
        "id": 245050594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583472
    },
    {
        "content": "<p>so if you have something like <code>for&lt;'a&gt; fn(&amp;'a u32)</code> in the substs, you would invoke for <code>'a</code> too</p>",
        "id": 245050625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583484
    },
    {
        "content": "<p>I guess that invoking on <code>k</code> sidesteps that problem</p>",
        "id": 245050666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583490
    },
    {
        "content": "<p>ohh right</p>",
        "id": 245050750,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625583530
    },
    {
        "content": "<p>I was hitting this ...</p>",
        "id": 245050853,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625583575
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/de7084414b974d47e190c73d68cd33c6a1fc5ecc/compiler/rustc_mir/src/borrow_check/universal_regions.rs#L782\">https://github.com/rust-lang/rust/blob/de7084414b974d47e190c73d68cd33c6a1fc5ecc/compiler/rustc_mir/src/borrow_check/universal_regions.rs#L782</a></p>",
        "id": 245050854,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625583576
    },
    {
        "content": "<p>the <code>else</code> part of it</p>",
        "id": 245050866,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625583583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> did you see that the PR is not compiling?</p>",
        "id": 245051055,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625583638
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0720]: cannot resolve opaque type\n   --&gt; compiler/rustc_middle/src/ty/sty.rs:656:31\n    |\n656 |     ) -&gt; impl Iterator&lt;Item = impl Iterator&lt;Item = Ty&lt;&#39;tcx&gt;&gt; + Captures&lt;&#39;tcx&gt;&gt; {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot resolve opaque type\n</code></pre></div>",
        "id": 245051064,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625583642
    },
    {
        "content": "<p>oh</p>",
        "id": 245051118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583660
    },
    {
        "content": "<p>interesting</p>",
        "id": 245051180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583689
    },
    {
        "content": "<p>let me try <code>x.py build --stage 2</code></p>",
        "id": 245051193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583696
    },
    {
        "content": "<p>ok, well, I see the problem</p>",
        "id": 245051652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583885
    },
    {
        "content": "<p>I wonder if we can minimize it :)</p>",
        "id": 245051656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583888
    },
    {
        "content": "<p>(also, I think that this <code>Captures&lt;'tcx&gt;</code> does nothing there)</p>",
        "id": 245051689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what's the problem?</p>",
        "id": 245070825,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625592077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I didn't have time to dig in yet!</p>",
        "id": 245082530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625597393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so it looks like the problem is tied to <code>-&gt; impl Iterator&lt;Item = impl Bar&gt;</code>, the nested</p>",
        "id": 245088080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625599993
    },
    {
        "content": "<p>the good news is that we have several tests that are now failing</p>",
        "id": 245088121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600012
    },
    {
        "content": "<p>e.g., ui/impl-trait/nested-return-type.rs</p>",
        "id": 245088135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600024
    },
    {
        "content": "<p>so we can debug those</p>",
        "id": 245088151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600030
    },
    {
        "content": "<p>yeah</p>",
        "id": 245088457,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625600165
    },
    {
        "content": "<p>but why are those tests showing up now?</p>",
        "id": 245088467,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625600172
    },
    {
        "content": "<p>I don't know!</p>",
        "id": 245088536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600216
    },
    {
        "content": "<p>Have to debug :)</p>",
        "id": 245088539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600218
    },
    {
        "content": "<p>ok</p>",
        "id": 245088552,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625600224
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> -- I think you're away today -- but I assigned <a href=\"https://github.com/rust-lang/rust/issues/86465\">https://github.com/rust-lang/rust/issues/86465</a> to you, it's the issue we were poking at earlier.</p>",
        "id": 245225921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625683890
    },
    {
        "content": "<p>But we should setup a \"sync time\" for TAIT, together with <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and whomever else wants to join (we could do it on Zulip)</p>",
        "id": 245226036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625683944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, what's a good time to setup and meet?</p>",
        "id": 245338211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625762085
    },
    {
        "content": "<p>I guess I’m fine to set it up when you both are able</p>",
        "id": 245340358,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625763235
    },
    {
        "content": "<p>and niko has access to my calendar <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> pick anything that fits you</p>",
        "id": 245437438,
        "sender_full_name": "oli",
        "timestamp": 1625834600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, just let me know</p>",
        "id": 245440290,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1625836161
    }
]