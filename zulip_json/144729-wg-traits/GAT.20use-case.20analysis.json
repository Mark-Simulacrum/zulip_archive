[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> you ready to chat?</p>",
        "id": 160134704,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1551906537
    },
    {
        "content": "<p>Sure; should we use hangouts? would be more effective</p>",
        "id": 160134750,
        "sender_full_name": "centril",
        "timestamp": 1551906586
    },
    {
        "content": "<p>hm, i was hoping we could do it here to provide a more clear log / room for other people to jump in</p>",
        "id": 160134820,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1551906618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> ah; ummh.. well I was thinking a paper doc + hangouts; we link to it here so people can dump stuff</p>",
        "id": 160134845,
        "sender_full_name": "centril",
        "timestamp": 1551906658
    },
    {
        "content": "<p>(i will be ready in just a minute)</p>",
        "id": 160134846,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1551906659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <a href=\"https://paper.dropbox.com/doc/GAT-use-cases--AY1Ck74Fgk1Ztq1kHrethI8BAg-xFJQMxHXTOUekCyweukU1\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/GAT-use-cases--AY1Ck74Fgk1Ztq1kHrethI8BAg-xFJQMxHXTOUekCyweukU1\">https://paper.dropbox.com/doc/GAT-use-cases--AY1Ck74Fgk1Ztq1kHrethI8BAg-xFJQMxHXTOUekCyweukU1</a></p>",
        "id": 160135012,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1551906817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> If you don't mind; I would prefer to also talk things through through voice</p>",
        "id": 160135105,
        "sender_full_name": "centril",
        "timestamp": 1551906876
    },
    {
        "content": "<p>ok</p>",
        "id": 160135110,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1551906883
    },
    {
        "content": "<p>lemme grab a room</p>",
        "id": 160135119,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1551906893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>  <a href=\"https://meet.google.com/hxa-pjpd-uvx\" target=\"_blank\" title=\"https://meet.google.com/hxa-pjpd-uvx\">https://meet.google.com/hxa-pjpd-uvx</a> ?</p>",
        "id": 160135145,
        "sender_full_name": "centril",
        "timestamp": 1551906913
    },
    {
        "content": "<p>yep i'm there now</p>",
        "id": 160135173,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1551906951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok, we've generated a small set of some representative examples and analysis: <a href=\"https://paper.dropbox.com/doc/GAT-use-case-analysis--AY1Ck74Fgk1Ztq1kHrethI8BAg-xFJQMxHXTOUekCyweukU1\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/GAT-use-case-analysis--AY1Ck74Fgk1Ztq1kHrethI8BAg-xFJQMxHXTOUekCyweukU1\">https://paper.dropbox.com/doc/GAT-use-case-analysis--AY1Ck74Fgk1Ztq1kHrethI8BAg-xFJQMxHXTOUekCyweukU1</a></p>",
        "id": 160137335,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1551908615
    },
    {
        "content": "<p>TLDR we can get quite a lot of benefit from lifetime/type abstraction without any bounds at all</p>",
        "id": 160137381,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1551908643
    },
    {
        "content": "<p>this is perhaps most vital for abstracting over async functions that borrow</p>",
        "id": 160137413,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1551908660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> i bet you have other good GAT examples to add -- particularly interested in things that are relatively \"urgent\" since this is partly feeding into prioritization</p>",
        "id": 160144556,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1551910202
    },
    {
        "content": "<p>ooh ooh</p>",
        "id": 160149379,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1551913267
    },
    {
        "content": "<p>so many things :)</p>",
        "id": 160149385,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1551913276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> are you primarily asking about lifetime ones, or do type ones count as well?</p>",
        "id": 160149405,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1551913297
    },
    {
        "content": "<p>types are surely just as important</p>",
        "id": 160149516,
        "sender_full_name": "varkor",
        "timestamp": 1551913343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> everything and anything ;) The distinction between \"has bound\" and not is probably more important wrt. chalk vs. rustc than types vs. lifetimes</p>",
        "id": 160150101,
        "sender_full_name": "centril",
        "timestamp": 1551913894
    },
    {
        "content": "<p>Ah, so you're looking for examples that have bounds?</p>",
        "id": 160150838,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1551914544
    },
    {
        "content": "<p>Bounds on the parameters of the associated type itself is very unclear to me since I've never been sure what parts of that are inferred from WF requirements</p>",
        "id": 160150853,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1551914579
    },
    {
        "content": "<p>do you mean bounds that wouldn't be included in WF requirements?</p>",
        "id": 160150866,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1551914591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> well use cases of GATs in general; just dump them in the doc and then we can segregate based on type/lifetime and bound-on-assoc-type/bound-on-parameters-of-assoc-type/no-bounds</p>",
        "id": 160150987,
        "sender_full_name": "centril",
        "timestamp": 1551914685
    },
    {
        "content": "<p>iirc bounds on the parameters of an associated type need to be satisfies when the associated type is used as opposed to those on an associated type itself (which are really just constraints on the trait)</p>",
        "id": 160151027,
        "sender_full_name": "centril",
        "timestamp": 1551914745
    },
    {
        "content": "<p>(the Haskell equivalent is probably clearer in this respect)</p>",
        "id": 160151075,
        "sender_full_name": "centril",
        "timestamp": 1551914767
    },
    {
        "content": "<p>for the <code>Functor</code> example, you could plausibly want <code>type Out&lt;B&gt;: Functor&lt;B&gt;;</code>, which is a nontrivial bound</p>",
        "id": 160151083,
        "sender_full_name": "varkor",
        "timestamp": 1551914773
    },
    {
        "content": "<p>or are we talking bounds on the type parameter?</p>",
        "id": 160151112,
        "sender_full_name": "varkor",
        "timestamp": 1551914801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  I think it's useful without it as well; you accept more things that maybe you shouldn't</p>",
        "id": 160151120,
        "sender_full_name": "centril",
        "timestamp": 1551914814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> it's unclear really; Niko knows better what sort of bounds need chalk and which dont</p>",
        "id": 160151156,
        "sender_full_name": "centril",
        "timestamp": 1551914841
    },
    {
        "content": "<p>(I'm not sure I would actually enforce it in a real API, but for \"generating use cases\", it's a potential example)</p>",
        "id": 160151170,
        "sender_full_name": "varkor",
        "timestamp": 1551914861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  ah; well -- use cases with emphasis on real world practicality ;)</p>",
        "id": 160151253,
        "sender_full_name": "centril",
        "timestamp": 1551914929
    },
    {
        "content": "<p>that's what I'm saying: it's a reasonable bound to have</p>",
        "id": 160151273,
        "sender_full_name": "varkor",
        "timestamp": 1551914962
    },
    {
        "content": "<p>oh, in my current draft of <code>Functor</code>, I <em>do</em> have this bound</p>",
        "id": 160151344,
        "sender_full_name": "varkor",
        "timestamp": 1551915003
    },
    {
        "content": "<p>so I think it is a realistic example :)</p>",
        "id": 160151371,
        "sender_full_name": "varkor",
        "timestamp": 1551915018
    },
    {
        "content": "<p>Right; that's probably true, but I think you can get away without it also so it might not be all we want in the end but the initial version may not require chalk</p>",
        "id": 160151429,
        "sender_full_name": "centril",
        "timestamp": 1551915069
    },
    {
        "content": "<p>(so we can maybe ship sooner)</p>",
        "id": 160151437,
        "sender_full_name": "centril",
        "timestamp": 1551915077
    },
    {
        "content": "<p>yeah, it's definitely not one that is absolutely dependent on bounds</p>",
        "id": 160151663,
        "sender_full_name": "varkor",
        "timestamp": 1551915293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> nice, I've not had time to look at the examples yet, I'll try to schedule some time for that on Monday.</p>",
        "id": 160328182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552081239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  feel free to add your own <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 160328227,
        "sender_full_name": "centril",
        "timestamp": 1552081283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> no worries -- fwiw i think this list could be a <em>lot</em> longer (cc <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>) but i think we already have enough to answer the basic questions around what benefits we could get from the most basic form of GATs</p>",
        "id": 160328607,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552081633
    },
    {
        "content": "<p>Yup, I have it on my list to fill this out more</p>",
        "id": 160328914,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552081862
    },
    {
        "content": "<p>Sorry I haven't had a chance to do that yet <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span></p>",
        "id": 160328932,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552081871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> no worries, and no rush!</p>",
        "id": 160328944,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552081882
    },
    {
        "content": "<p>we have what we need for now, i think, and otherwise this is just a catalog that could be helpful for answering futures design/impl questions</p>",
        "id": 160328966,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552081904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>  and also test cases!</p>",
        "id": 160329298,
        "sender_full_name": "centril",
        "timestamp": 1552082169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>  I believe you would need an additional bound on the <code>StreamingIterator</code> example</p>",
        "id": 160381001,
        "sender_full_name": "scalexm",
        "timestamp": 1552160963
    },
    {
        "content": "<p>something along the lines of:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">StreamingIterator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Self</span>: <span class=\"na\">&#39;a</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">   </span><span class=\"c1\">// there already is some sort of implicit `where Self: &#39;a` here because of `&amp;&#39;a mut self`</span>\n<span class=\"w\">   </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160381064,
        "sender_full_name": "scalexm",
        "timestamp": 1552161046
    },
    {
        "content": "<p>otherwise, you cannot do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">StreamingIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// error: `T` does not outlive `&#39;a`, hence `&amp;&#39;a T` is not well-formed</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160381078,
        "sender_full_name": "scalexm",
        "timestamp": 1552161103
    },
    {
        "content": "<p>whereas with the <code>were Self: 'a</code>, it means that you can project <code>&lt;SomeType&lt;...&gt; as StreamingIterator&gt;::Item&lt;'a&gt;</code>  only if <code>SomeType&lt;...&gt;: 'a</code></p>",
        "id": 160381126,
        "sender_full_name": "scalexm",
        "timestamp": 1552161171
    },
    {
        "content": "<p>but on the assoc type value you can now rely on <code>Self: 'a</code>, which in my example is <code>Foo&lt;T&gt;: 'a</code> which would imply the needed <code>T: 'a</code></p>",
        "id": 160381133,
        "sender_full_name": "scalexm",
        "timestamp": 1552161199
    },
    {
        "content": "<p>hence this invalidates your sentence:</p>\n<blockquote>\n<p>Most of our examples don’t use any bounds at all; those that do tend to bound the associated type itself, not its parameter</p>\n</blockquote>\n<p>here, I'm bounding the <code>Self</code> parameter</p>",
        "id": 160381184,
        "sender_full_name": "scalexm",
        "timestamp": 1552161259
    },
    {
        "content": "<p>regarding whether chalk is needed or not, I don't think chalk is actually <em>really</em> needed, it's just that we have already modeled in chalk things like what bounds should be relied on vs what bounds you should be proving and when, and all this stuff naturally translates into logical rules which the engine can solve</p>",
        "id": 160381273,
        "sender_full_name": "scalexm",
        "timestamp": 1552161426
    },
    {
        "content": "<p>The functor example also has a <code>B: Sized</code> bound</p>",
        "id": 160381275,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1552161434
    },
    {
        "content": "<p>so you don't need to think too much about the implementation details</p>",
        "id": 160381280,
        "sender_full_name": "scalexm",
        "timestamp": 1552161456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> yes totally, although you'll have implicit <code>Sized</code> bounds on parameters as soon as you allow generic type parameters</p>",
        "id": 160381346,
        "sender_full_name": "scalexm",
        "timestamp": 1552161533
    },
    {
        "content": "<p>Well, you could require that <code>?Sized</code> is always used. But that seems unlikely to be a version that we want stabilized.</p>",
        "id": 160381426,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1552161609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> also I believe chalk has more \"first-class\" support for quantification over types (although I've already added some support for that in rustc within the chalk integration work), but again it is not needed if we want to target something quickly shippable which would e.g. only have generic lifetimes</p>",
        "id": 160381455,
        "sender_full_name": "scalexm",
        "timestamp": 1552161681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> commented on the doc -- perhaps this belongs more in the lang chat, but I realized I didn't remember discussing the syntax for specifying required GATs in bounds-- a la <code>Box&lt;dyn Iterator&lt;Item = u8&gt;&gt;</code> today, would you have <code>Box&lt;dyn for&lt;'a&gt; StreamingIterator&lt;Item&lt;'a&gt; = &amp;'a u8&gt;&gt;</code>?</p>",
        "id": 160404870,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552203505
    },
    {
        "content": "<p>or, given the above, <code>Box&lt;dyn for&lt;'a&gt; where(Self: 'a) StreamingIterator&lt;Item&lt;'a&gt; = &amp;'a u8&gt;&gt;</code></p>",
        "id": 160405043,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552203917
    },
    {
        "content": "<p>ick ick ick</p>",
        "id": 160405046,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552203929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> I think the only way for this bound to be valid would be through <code>Box&lt;dyn for&lt;‘a&gt; StreamingIterator&lt;Item&lt;‘a&gt; = &amp;’a u8&gt; + ‘static&gt;</code></p>",
        "id": 160409211,
        "sender_full_name": "scalexm",
        "timestamp": 1552211677
    },
    {
        "content": "<p>But this seems restrictive, since you’re going to call <code>next()</code> only with short lifetimes</p>",
        "id": 160409399,
        "sender_full_name": "scalexm",
        "timestamp": 1552212023
    },
    {
        "content": "<p>I think we might be able to just not need specifying the <code>where</code> bounds so that <code>Box&lt;dyn for&lt;‘a&gt; StreamingIterator&lt;Item&lt;‘a&gt; = &amp;’a u8&gt;&gt;</code> just works (even in the presence of a <code>where Self: ‘a</code> bound in the trait decl)</p>",
        "id": 160409465,
        "sender_full_name": "scalexm",
        "timestamp": 1552212129
    },
    {
        "content": "<p>Proving the <code>where Self: ‘a</code> bound is only important when projecting, e.g. naming <code>(dyn for&lt;‘a&gt; StreamingIterator&lt;Item&lt;‘a&gt; = &amp;’a u8&gt;)::Item&lt;‘lifetime&gt;</code> with a concrete <code>’lifetime</code></p>",
        "id": 160409498,
        "sender_full_name": "scalexm",
        "timestamp": 1552212217
    },
    {
        "content": "<p>The ability to specify <code>where</code> on <code>for&lt;...&gt;</code> binders is useful tho and we should think of ways to introduce it</p>",
        "id": 160409502,
        "sender_full_name": "centril",
        "timestamp": 1552212226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> that’s right but probably out of scope for an initial GATs implementation</p>",
        "id": 160409546,
        "sender_full_name": "scalexm",
        "timestamp": 1552212257
    },
    {
        "content": "<p>probably</p>",
        "id": 160409557,
        "sender_full_name": "centril",
        "timestamp": 1552212267
    }
]