[
    {
        "content": "<p>Howdy all. Because of the time shift in the US, just wanted to make sure everyone's aware that we're meeting at <time datetime=\"2021-03-16T20:00:00Z\">2021-03-16T16:00:00-04:00</time></p>",
        "id": 230528406,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615907138
    },
    {
        "content": "<p>Wow, it's that time of year again? How time has flown</p>",
        "id": 230580034,
        "sender_full_name": "detrumi",
        "timestamp": 1615924462
    },
    {
        "content": "<p>Oh don't remind me</p>",
        "id": 230580085,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615924484
    },
    {
        "content": "<p>For those who don't remember, today we're discussing lazy norm in rustc</p>",
        "id": 230580197,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615924536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> had some notes <a href=\"https://gist.github.com/matthewjasper/358245b033a1b7bd158acfe0c08d0d09\">here</a></p>",
        "id": 230580216,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615924546
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> meeting time</p>",
        "id": 230581127,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615924876
    },
    {
        "content": "<p>Oof <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> isn't here</p>",
        "id": 230581387,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615924965
    },
    {
        "content": "<p>I am</p>",
        "id": 230581397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615924970
    },
    {
        "content": "<p>oh hi</p>",
        "id": 230581404,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615924973
    },
    {
        "content": "<p>It shows you as away <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 230581482,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615924995
    },
    {
        "content": "<p>oh, I have no idea what that means</p>",
        "id": 230581495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925002
    },
    {
        "content": "<p>I wasn't aware there was even a notion of 'away' in zulip :)</p>",
        "id": 230581518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925015
    },
    {
        "content": "<p>(Appears as active for me, maybe you need to refresh?)</p>",
        "id": 230581534,
        "sender_full_name": "LÃ©o Lanteri Thauvin",
        "timestamp": 1615925025
    },
    {
        "content": "<p>I refreshed and it updated</p>",
        "id": 230581541,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925027
    },
    {
        "content": "<p>I was afk for a few minutes, so maybe that's why :)</p>",
        "id": 230581607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925045
    },
    {
        "content": "<p>Sorry, I just spent like two hours trying to get github actions to upload some rust build artifacts and I'm a bit frizzled</p>",
        "id": 230581658,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925065
    },
    {
        "content": "<p>Anyways, any annoucements or other good news?</p>",
        "id": 230581706,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925090
    },
    {
        "content": "<p>Not many on my part. I spent some time thinking about coinduction</p>",
        "id": 230581788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925120
    },
    {
        "content": "<p>it's been hard for me to carve out the time i need for that PR though</p>",
        "id": 230581822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925138
    },
    {
        "content": "<p>There's a PR up to prepare the move of types in rustc: <a href=\"https://github.com/rust-lang/rust/issues/83142\">#83142</a></p>",
        "id": 230581916,
        "sender_full_name": "detrumi",
        "timestamp": 1615925163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> (and <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>) made a PR for some rustc_type_ir changes: <a href=\"https://github.com/rust-lang/rust/issues/83142\">#83142</a></p>",
        "id": 230581922,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925164
    },
    {
        "content": "<p>beat me</p>",
        "id": 230581942,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925173
    },
    {
        "content": "<p>So that's moving along nicely</p>",
        "id": 230582057,
        "sender_full_name": "detrumi",
        "timestamp": 1615925223
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/76814\">#76814</a> and <a href=\"https://github.com/rust-lang/rust/issues/82743\">#82743</a> are \"done\" and awaiting <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s review :P</p>",
        "id": 230582084,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-16/near/230582057\">said</a>:</p>\n<blockquote>\n<p>So that's moving along nicely</p>\n</blockquote>\n<p>Yeah, I'm quite excited</p>",
        "id": 230582117,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925243
    },
    {
        "content": "<p>I also tried to spend some time this weekend looking into the Chalk hangs with closures (<a href=\"https://github.com/rust-lang/chalk/issues/688\">chalk#688</a>) and got basically nowhere</p>",
        "id": 230582287,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925298
    },
    {
        "content": "<p>wasn't able to repro the issue at all</p>",
        "id": 230582299,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925306
    },
    {
        "content": "<p>I was just reviewing <a href=\"https://github.com/rust-lang/rust/issues/82743\">#82743</a>, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 230582347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925316
    },
    {
        "content": "<p>honestly, considering changing how we handle closure substs in chalk-integration to match how rust-analyzer/rustc does it; maybe that would unveil the problem</p>",
        "id": 230582431,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925351
    },
    {
        "content": "<p>Since rust-analyzer is slowly moving to chalk types, that sounds like a good idea anyways</p>",
        "id": 230582627,
        "sender_full_name": "detrumi",
        "timestamp": 1615925421
    },
    {
        "content": "<p>or at least, for one of the two sides to change</p>",
        "id": 230582662,
        "sender_full_name": "detrumi",
        "timestamp": 1615925431
    },
    {
        "content": "<p>what is the difference between the two?</p>",
        "id": 230582709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925446
    },
    {
        "content": "<p>Well, I mean, theoretically it <em>shouldn't</em> matter</p>",
        "id": 230582717,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925448
    },
    {
        "content": "<p>So, in rust-analyzer/rustc, closure substs are like &lt;T, U, V, fnsig, CK, upvars&gt;</p>",
        "id": 230582793,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925477
    },
    {
        "content": "<p>(in rust-analyzer it's only &lt;fnsig&gt;)</p>",
        "id": 230582836,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925493
    },
    {
        "content": "<p>In chalk-integration it's only &lt;T, U, V&gt; and fnsig, CK, and upvars are stored separately</p>",
        "id": 230582925,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925522
    },
    {
        "content": "<p>I see</p>",
        "id": 230583010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925549
    },
    {
        "content": "<p>I imagine the issue is caused by something like we're trying to generalize the <code>FnSig</code></p>",
        "id": 230583029,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925560
    },
    {
        "content": "<p>but I haven't dug into <em>why</em> that's happening</p>",
        "id": 230583056,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925570
    },
    {
        "content": "<p>I'm not sure how rustc represents the function <code>fn&lt;T&gt;(&amp;'static T)</code> in the <code>fnsig</code> portion</p>",
        "id": 230583268,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925647
    },
    {
        "content": "<p>we don't have functions generic over types in rustc?</p>",
        "id": 230583316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925666
    },
    {
        "content": "<p>I guess, <code>T</code> is just a <code>Param</code></p>",
        "id": 230583324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925668
    },
    {
        "content": "<p>right</p>",
        "id": 230583345,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925676
    },
    {
        "content": "<p>(or closures)</p>",
        "id": 230583351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925679
    },
    {
        "content": "<p>should we talk about lazy norm?</p>",
        "id": 230583397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925700
    },
    {
        "content": "<p>yes</p>",
        "id": 230583408,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925704
    },
    {
        "content": "<p>(I'll keep digging into this whenever I get time to)</p>",
        "id": 230583434,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925714
    },
    {
        "content": "<p>So, did anyone get a chance to look over <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>'s notes?</p>",
        "id": 230583475,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925728
    },
    {
        "content": "<p>I was reading the gist</p>",
        "id": 230583488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925734
    },
    {
        "content": "<p>Some portion of them appear to be changes that I think would be (potentially) addressed by a shift to a more chalk-like model</p>",
        "id": 230583531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925757
    },
    {
        "content": "<p>Some of them not so much :)</p>",
        "id": 230583545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925761
    },
    {
        "content": "<p><a href=\"https://gist.github.com/matthewjasper/358245b033a1b7bd158acfe0c08d0d09\">https://gist.github.com/matthewjasper/358245b033a1b7bd158acfe0c08d0d09</a></p>",
        "id": 230583584,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615925765
    },
    {
        "content": "<p>So \"Ambiguity in where clauses\" is something that Chalk avoids.</p>",
        "id": 230583644,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615925792
    },
    {
        "content": "<p>yes, also <em>potentially</em> coherence, we still haven't really talked about what coherence means in a chalk-like universe in that much depth</p>",
        "id": 230583732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925831
    },
    {
        "content": "<p>\"Coherence\" probably needs some experimentation, but doesn't seem to be unsolvable.</p>",
        "id": 230583750,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615925839
    },
    {
        "content": "<p>This just reminds me of <a href=\"https://github.com/rust-lang/chalk/issues/234\">chalk#234</a></p>",
        "id": 230583809,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925868
    },
    {
        "content": "<p>It's basically, \"we can't use the existing code unchanged\".</p>",
        "id": 230583851,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615925882
    },
    {
        "content": "<p>why don' we go point by point?</p>",
        "id": 230583887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925887
    },
    {
        "content": "<blockquote>\n<p>Ambiguity in where clauses</p>\n</blockquote>",
        "id": 230583944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925909
    },
    {
        "content": "<p>so, chalk wouldn't be upset by the duplicate bounds;</p>",
        "id": 230583969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925921
    },
    {
        "content": "<p>of course it'd be more efficient if it didn't waste time trying to prove them both</p>",
        "id": 230583999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925931
    },
    {
        "content": "<p>Right</p>",
        "id": 230584115,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615925974
    },
    {
        "content": "<p>I don't think that there are that many cases like this to really be concerned though.</p>",
        "id": 230584128,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615925985
    },
    {
        "content": "<p>I agree</p>",
        "id": 230584141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925994
    },
    {
        "content": "<p>at that point it's just an optimization</p>",
        "id": 230584153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615925999
    },
    {
        "content": "<p>if we get to the point that we are tuning performance I'll be very happy :)</p>",
        "id": 230584231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926016
    },
    {
        "content": "<h1>Type outlives bounds and normalization</h1>",
        "id": 230584241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926022
    },
    {
        "content": "<p>Indeed</p>",
        "id": 230584259,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615926026
    },
    {
        "content": "<p>I didn't quite understand this</p>",
        "id": 230584266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926028
    },
    {
        "content": "<blockquote>\n<p>Given a where clause like: <code>&lt;&lt;X as Y&gt;::Z as A&gt;::B: 'a</code> we need to normalize<br>\nthis eagerly. Region checking runs too late to compare types with relate, and<br>\ninstead has to use \"syntatic equality\" (<code>==</code>). This means that we have to<br>\nnormalize this before region checking.</p>\n</blockquote>",
        "id": 230584290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926037
    },
    {
        "content": "<p>are you just saying that region checking, generally, can't normalize</p>",
        "id": 230584426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926085
    },
    {
        "content": "<p>Yes</p>",
        "id": 230584442,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615926093
    },
    {
        "content": "<p>and by this you mean the regionck code</p>",
        "id": 230584448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926096
    },
    {
        "content": "<p>(versus, say, NLL)</p>",
        "id": 230584457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926101
    },
    {
        "content": "<p>Hmm, I'm not sure if NLL can avoid this.</p>",
        "id": 230584556,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615926127
    },
    {
        "content": "<p>avoid what exactly</p>",
        "id": 230584644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926166
    },
    {
        "content": "<p>I was going to ask if we know the types of everything by the time we get to region checking, but I imagine not</p>",
        "id": 230584646,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615926167
    },
    {
        "content": "<p>having to normalize?</p>",
        "id": 230584651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926169
    },
    {
        "content": "<p>By the time it's trying to prove type outlives bounds I think that the Infcx it's usable.</p>",
        "id": 230584661,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615926172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-16/near/230584646\">said</a>:</p>\n<blockquote>\n<p>I was to ask if we know the types of everything by the time we get to region checking, but I imagine not</p>\n</blockquote>\n<p>we do</p>",
        "id": 230584668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926175
    },
    {
        "content": "<p>Yes, having to normalize.</p>",
        "id": 230584707,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615926186
    },
    {
        "content": "<p>I think it's expected that it has to normalize</p>",
        "id": 230584769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926204
    },
    {
        "content": "<p>I guess what I expect is</p>",
        "id": 230584783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926210
    },
    {
        "content": "<p>And only being able to do it lazily.</p>",
        "id": 230584793,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615926216
    },
    {
        "content": "<p>well, this touches on the question of how outlives should work in chalk to begin with :)</p>",
        "id": 230584808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926222
    },
    {
        "content": "<p>but what i imagine is that chalk the job of emitting, as part of its region constraints, outlives bounds that are fully normalized</p>",
        "id": 230584904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926249
    },
    {
        "content": "<p>The constaints being normalized isn't the problem. It's the predicates in the ParamEnv that also have to be normalized.</p>",
        "id": 230585022,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615926298
    },
    {
        "content": "<p>(I think it also has to do some amount of work around higher-ranked things)</p>",
        "id": 230585053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926310
    },
    {
        "content": "<p>so</p>",
        "id": 230585277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926392
    },
    {
        "content": "<p>So, how much of a problem is it to normalize right before regionck</p>",
        "id": 230585289,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615926405
    },
    {
        "content": "<p>you are thinking of that code that kind of \"lowers\" outlives constraints into something more primitive</p>",
        "id": 230585294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926408
    },
    {
        "content": "<p>(right?)</p>",
        "id": 230585334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926428
    },
    {
        "content": "<p>I'm thinking of the code that sees it has to prove <code>&lt;T as X&gt;::A: 'a</code> and checks the ParamEnv for a matching predicate.</p>",
        "id": 230585410,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615926461
    },
    {
        "content": "<p>ok</p>",
        "id": 230585578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926517
    },
    {
        "content": "<p>anyway normalizing doesn't seem so bad</p>",
        "id": 230585621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926534
    },
    {
        "content": "<p>We can normlize before regionck, but we get more cycle issues.</p>",
        "id": 230585622,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615926534
    },
    {
        "content": "<p>elaborate?</p>",
        "id": 230585640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926541
    },
    {
        "content": "<p>Maybe we should move on for now?</p>",
        "id": 230586010,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615926672
    },
    {
        "content": "<p>Well, I'm not sure if there are any cases this matters today.</p>",
        "id": 230586037,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615926681
    },
    {
        "content": "<p>(i.e. without new syntax/features)</p>",
        "id": 230586120,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615926712
    },
    {
        "content": "<p>agreed with moving on--</p>",
        "id": 230586137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926719
    },
    {
        "content": "<p>but this is a good thing to dig more into when we talk about how to prove outlives</p>",
        "id": 230586205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926731
    },
    {
        "content": "<h3>Coherence</h3>",
        "id": 230586294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926773
    },
    {
        "content": "<p>but i think we kind of already said it --</p>",
        "id": 230586305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926779
    },
    {
        "content": "<p>in my ideal world, we would model coherence as a set of logical predicates we have to prove, much as <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span> did</p>",
        "id": 230586368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926797
    },
    {
        "content": "<p>the current code for handling coherence is rather more special</p>",
        "id": 230586386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926808
    },
    {
        "content": "<p>i'm not sure how well the logic that <span class=\"user-mention silent\" data-user-id=\"117350\">Sunjay Varma</span> wrote up will really compare, but if we did that, I think this is kind of a non-issue</p>",
        "id": 230586424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926830
    },
    {
        "content": "<p>Special how?</p>",
        "id": 230586483,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615926845
    },
    {
        "content": "<p>it operates in some special modes, and it does things like walk over the list of obligations and check if any of them (individually) are non-provable</p>",
        "id": 230586550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926872
    },
    {
        "content": "<p>so it's not just asking the solver to prove something</p>",
        "id": 230586559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926877
    },
    {
        "content": "<p>it's like some higher-order logic that drives the solver in a particular way</p>",
        "id": 230586603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615926897
    },
    {
        "content": "<p>gotcha</p>",
        "id": 230586867,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927004
    },
    {
        "content": "<p>Moving on?</p>",
        "id": 230586939,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927041
    },
    {
        "content": "<h1><code>can_eq</code> and <code>can_sub</code></h1>",
        "id": 230586942,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927042
    },
    {
        "content": "<p>eah so</p>",
        "id": 230587004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927079
    },
    {
        "content": "<p>These functions make me sad.</p>",
        "id": 230587045,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615927083
    },
    {
        "content": "<p>yes :)</p>",
        "id": 230587056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927087
    },
    {
        "content": "<p>I'm wondering how many uses of them can be mremoved</p>",
        "id": 230587071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927094
    },
    {
        "content": "<p>I think it's all diagnostics.</p>",
        "id": 230587228,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615927169
    },
    {
        "content": "<p>really?</p>",
        "id": 230587347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927212
    },
    {
        "content": "<p>Which is why I'm tempted to say that they return false if we would have to normalize.</p>",
        "id": 230587351,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615927214
    },
    {
        "content": "<p>that'd be good if true</p>",
        "id": 230587356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927217
    },
    {
        "content": "<p>I am wondering</p>",
        "id": 230587506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927278
    },
    {
        "content": "<p>I guess I'm wondering if there is a PR trying to refactor some of those away</p>",
        "id": 230587536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927290
    },
    {
        "content": "<p>It's used in rustc_mir</p>",
        "id": 230587545,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927295
    },
    {
        "content": "<p>I feel like there are probably some prs to be written that try to 'prep' for chalk</p>",
        "id": 230587570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927304
    },
    {
        "content": "<p><code>equal_up_to_regions</code></p>",
        "id": 230587579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927308
    },
    {
        "content": "<p>by removing various things that are not phrased in 'logical ways'</p>",
        "id": 230587589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927312
    },
    {
        "content": "<p>one of them is the way we do unsize coercions</p>",
        "id": 230587606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927319
    },
    {
        "content": "<p>which terrifies me a bit =)</p>",
        "id": 230587645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927324
    },
    {
        "content": "<p>that would be decent</p>",
        "id": 230587651,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-16/near/230587606\">said</a>:</p>\n<blockquote>\n<p>one of them is the way we do unsize coercions</p>\n</blockquote>\n<p>do I want to know??</p>",
        "id": 230587673,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927341
    },
    {
        "content": "<p>well</p>",
        "id": 230587833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927424
    },
    {
        "content": "<p>let me find the code :)</p>",
        "id": 230587842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927429
    },
    {
        "content": "<p>it's probably not relevant for today :)</p>",
        "id": 230587896,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927444
    },
    {
        "content": "<p>so maybe just move on</p>",
        "id": 230587911,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927447
    },
    {
        "content": "<p>it's not too relevant really</p>",
        "id": 230587934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927458
    },
    {
        "content": "<p>I should file an issue</p>",
        "id": 230587940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927461
    },
    {
        "content": "<p>I probaly already have</p>",
        "id": 230587945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927463
    },
    {
        "content": "<p>it'd be a good wg-traits task regardless :)</p>",
        "id": 230587972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-16/near/230587589\">said</a>:</p>\n<blockquote>\n<p>by removing various things that are not phrased in 'logical ways'</p>\n</blockquote>\n<p>but I do like this idea; we should get back to it someday</p>",
        "id": 230587981,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927473
    },
    {
        "content": "<h1>Unnormalizing</h1>",
        "id": 230588012,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927489
    },
    {
        "content": "<p>So, what is unnormalizing</p>",
        "id": 230588042,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927501
    },
    {
        "content": "<p>yeah, I didn't 100%-- oh, right, I get it</p>",
        "id": 230588047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927502
    },
    {
        "content": "<p>so the problem is this-- in chalk, right, we have two forms for associated types, the \"placeholder\" form and the \"alias\" form</p>",
        "id": 230588105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927528
    },
    {
        "content": "<p>when you unify an alias with something, you add an obliation and it may wind up being normalized to the placeholder form</p>",
        "id": 230588153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927555
    },
    {
        "content": "<p>so e.g.</p>",
        "id": 230588225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927575
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">item</span>: <span class=\"nc\">T</span>::<span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 230588264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927590
    },
    {
        "content": "<p><code>&lt;T as Iterator&gt;::Item</code> there would be normalized to <code>(Iterator::Item)&lt;T&gt;</code> or whatever our notation is now</p>",
        "id": 230588307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927609
    },
    {
        "content": "<p>but then if we monomorpize <code>foo</code> with <code>T = vec::IntoIter&lt;u32&gt;</code> or something</p>",
        "id": 230588351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927633
    },
    {
        "content": "<p>if we just substitute, we get a placeholder <code>(Iterator::Item)&lt;vec::IntoIter&lt;u32&gt;&gt;</code></p>",
        "id": 230588400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927650
    },
    {
        "content": "<p>but actually we have fresh information and we may be able to do a better normalization</p>",
        "id": 230588434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927667
    },
    {
        "content": "<p>really this should probably just be part of substitution, oddly enough, that whenever you substitute soething into a placeholder like this, you revert it to alias form</p>",
        "id": 230588524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927690
    },
    {
        "content": "<p>Okay, I think I'm following</p>",
        "id": 230588575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927717
    },
    {
        "content": "<p>I'm not sure if I have good reasons for it, but I'm still weirdly skeptical of the reason to split out a <code>AssociatedType</code> from an <code>Alias</code></p>",
        "id": 230588711,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927782
    },
    {
        "content": "<p>do you mean to 'normalize'</p>",
        "id": 230588795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927803
    },
    {
        "content": "<p>in general I am not super keen on it but i haven't found a better alternative really</p>",
        "id": 230588843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927819
    },
    {
        "content": "<p>no, I just mean the reasoning of having <code>(Iterator::Item)&lt;T&gt;</code> vs just keeping it as <code>&lt;T as Iterator&gt;::Item</code></p>",
        "id": 230588901,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927837
    },
    {
        "content": "<p>I mean, I know we've discussed it before</p>",
        "id": 230588954,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615927861
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 230589183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927950
    },
    {
        "content": "<p>we certainly have</p>",
        "id": 230589220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927965
    },
    {
        "content": "<p>there is some universe where you don't <em>have</em> to have the placeholder form</p>",
        "id": 230589244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615927975
    },
    {
        "content": "<p>Anyways, back on topic (we've been slow today)</p>",
        "id": 230589463,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-16/near/230588434\">said</a>:</p>\n<blockquote>\n<p>but actually we have fresh information and we may be able to do a better normalization</p>\n</blockquote>\n<p>I think this makes sense to me</p>",
        "id": 230589503,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928070
    },
    {
        "content": "<p>well, so long as this is part of monomorpizing, it doesn't seem like a big deal ultimately</p>",
        "id": 230589520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615928077
    },
    {
        "content": "<p>like we can special case it if we have to</p>",
        "id": 230589530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615928082
    },
    {
        "content": "<p>and 'reset'</p>",
        "id": 230589548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615928092
    },
    {
        "content": "<p>or we can do it as part of substitution more generally</p>",
        "id": 230589559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615928096
    },
    {
        "content": "<p>Probably, there might be some mir opts that also need some changes, but it's mostly a matter of realizing that it's required.</p>",
        "id": 230589695,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615928145
    },
    {
        "content": "<p>Okay, so I'm not sure we'll make it through the list</p>",
        "id": 230589781,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928170
    },
    {
        "content": "<p>So, maybe instead, <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> do you want to talk about your branch?</p>",
        "id": 230589831,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928186
    },
    {
        "content": "<p>I know it's a bit oldish at this point</p>",
        "id": 230589860,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928198
    },
    {
        "content": "<p>I don't really have a lot to say, it's old and based on some previous work. I'm not sure when I'll get back to it.</p>",
        "id": 230589924,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615928223
    },
    {
        "content": "<p>Is it something that can be built off of? Or just needs to be restarted</p>",
        "id": 230589969,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928237
    },
    {
        "content": "<p>I guess there's the matter of how to go about making something that can be merged.</p>",
        "id": 230590002,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615928250
    },
    {
        "content": "<p>Hmm</p>",
        "id": 230590118,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928291
    },
    {
        "content": "<p>yeah, figuring out what are the actonable transformatons that take us incrementally closer to the goal is going to be interesting</p>",
        "id": 230590128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615928295
    },
    {
        "content": "<p>but this list is good in that regards</p>",
        "id": 230590147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615928303
    },
    {
        "content": "<p>Was about to say something to that effect</p>",
        "id": 230590170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928309
    },
    {
        "content": "<p>i.e. what should we do or think about doing next?</p>",
        "id": 230590194,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928320
    },
    {
        "content": "<p>there may be items in there we can start to peel off, and certainly things like that coercion I mentioned</p>",
        "id": 230590198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615928322
    },
    {
        "content": "<p>Also should this get an MCP?</p>",
        "id": 230590201,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615928324
    },
    {
        "content": "<p>I feel like we're not necessarily ready for mcp yet because we don't quite know what \"this\" is</p>",
        "id": 230590245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615928350
    },
    {
        "content": "<p>true</p>",
        "id": 230590260,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928358
    },
    {
        "content": "<p>reworking how coherence works might be an example of something we could peel off</p>",
        "id": 230590302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615928376
    },
    {
        "content": "<p>So I guess the first step is take another look at the branch to find out what the next steps here are.</p>",
        "id": 230590321,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615928387
    },
    {
        "content": "<p>I'm sure a few things have changed in the year since the last commit too</p>",
        "id": 230590457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928428
    },
    {
        "content": "<p>Just a few. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 230590526,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615928447
    },
    {
        "content": "<p>Well, I think today was somewhat helpful</p>",
        "id": 230590725,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928517
    },
    {
        "content": "<p>We're past the hour, but thanks everyone for attending</p>",
        "id": 230590786,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928530
    }
]