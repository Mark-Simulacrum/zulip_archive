[
    {
        "content": "<p>Can we change<code>kind</code> to return <code>TypeKind</code> instead of <code>&amp;TypeKind</code>?</p>\n<p>This would improve pattern matching quite a lot imo</p>",
        "id": 205762268,
        "sender_full_name": "lcnr",
        "timestamp": 1596434634
    },
    {
        "content": "<p>We can’t without moving values, right? TyKind is not Copy AFAICT</p>",
        "id": 205765169,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1596438782
    },
    {
        "content": "<p>It really should be <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> Let me check why it isn't <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 205768049,
        "sender_full_name": "lcnr",
        "timestamp": 1596441523
    },
    {
        "content": "<p>Everything works if we derive <code>Copy</code> there</p>",
        "id": 205768068,
        "sender_full_name": "lcnr",
        "timestamp": 1596441555
    },
    {
        "content": "<p>tbh I really don't see why it's not rn, maybe an oversight <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 205768086,
        "sender_full_name": "lcnr",
        "timestamp": 1596441592
    },
    {
        "content": "<p>or we previously had something which was not copy there and now don't</p>",
        "id": 205768138,
        "sender_full_name": "lcnr",
        "timestamp": 1596441606
    },
    {
        "content": "<p>so IMO we should derive Copy and change <code>kind</code>, but maybe there's a reason why <code>TyKind</code> is not <code>Copy</code> rn</p>",
        "id": 205768248,
        "sender_full_name": "lcnr",
        "timestamp": 1596441689
    },
    {
        "content": "<p>Also, will it be <code>Copy</code> in the new type library?</p>",
        "id": 205768758,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1596442045
    },
    {
        "content": "<p>I hope so</p>",
        "id": 205768846,
        "sender_full_name": "lcnr",
        "timestamp": 1596442091
    },
    {
        "content": "<p>Since TypeKind can be copy in both RA and rustc currently, I suppose we can just make that a requirement in the type library</p>",
        "id": 205769756,
        "sender_full_name": "detrumi",
        "timestamp": 1596442785
    },
    {
        "content": "<p>I'd be ok with that change</p>",
        "id": 208260749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598554658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Looking.20to.20contribute/near/205762268\">said</a>:</p>\n<blockquote>\n<p>Can we change<code>kind</code> to return <code>TypeKind</code> instead of <code>&amp;TypeKind</code>?</p>\n<p>This would improve pattern matching quite a lot imo</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> did you investigate making this change? Given that the MCP is approved, and we saw that perf looked good, I would r+ the PR -- but I do think that change may be worth making (actually, we ought to measure the perf afterwards too -- maybe best to make it without a rebase first to keep the comparison valid?)</p>",
        "id": 208267835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598558235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Looking.20to.20contribute/near/208267835\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Looking.20to.20contribute/near/205762268\">said</a>:</p>\n<blockquote>\n<p>Can we change<code>kind</code> to return <code>TypeKind</code> instead of <code>&amp;TypeKind</code>?</p>\n<p>This would improve pattern matching quite a lot imo</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"255061\">LeSeulArtichaut</span> did you investigate making this change? Given that the MCP is approved, and we saw that perf looked good, I would r+ the PR -- but I do think that change may be worth making (actually, we ought to measure the perf afterwards too -- maybe best to make it without a rebase first to keep the comparison valid?)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I thnk you won't be able to do a try build if there are merge conflicts, right?</p>",
        "id": 208373376,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1598636282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> I'm not sure actaully</p>",
        "id": 208380521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598640164
    },
    {
        "content": "<p>I guess prob a good idea to rebase regardless</p>",
        "id": 208380530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1598640170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> had tried <a href=\"https://github.com/rust-lang/rust/pull/75077#issuecomment-674206704\">earlier</a> and it didn't work, but at the same time, in the homu queue, the \"mergable state\" is blank...</p>",
        "id": 208381461,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1598640669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I resolved the conflicts, if you want to \"keep the comparison fair\" you might want to re-run perf now? I'll try work on changing <code>kind() -&gt; &amp;TyKind</code> to <code>kind() -&gt; TyKind</code> tomorrow.</p>",
        "id": 208401222,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1598653536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I found a disadvantage to having <code>ty.kind()</code> returning <code>TyKind</code>. Consider the following code (from <code>src/librustc_middle/ty/codec.rs</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span>: <span class=\"nc\">TyEncoder</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">EncodableWithShorthand</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Variant</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">TyKind</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">variant</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span>::<span class=\"n\">Variant</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>This doesn't compile, because <code>kind()</code> creates a copy of the <code>TyKind</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0515]: cannot return reference to temporary value\n  --&gt; src/librustc_middle/ty/codec.rs:42:9\n   |\n42 |         &amp;self.kind()\n   |         ^-----------\n   |         ||\n   |         |temporary value created here\n   |         returns a reference to data owned by the current function\n</code></pre></div>\n\n\n<p>And I don't think there is any workaround possible, other than accessing <code>ty.kind</code> directly without going through the method.</p>",
        "id": 208444172,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1598721302
    }
]