[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281304\">@Mark McCaskey</span> I took a look at your PR and made some initial comments. See my comment there, but I need to think a little bit about whether <code>TypeName</code> is <em>actually</em> a good place for these.</p>",
        "id": 192979203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586122234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> Thanks!!  Your review has a lot of useful information in it.  It looks like I got a bit confused on some parts of it, I'll work on this some more tonight</p>",
        "id": 193074386,
        "sender_full_name": "Mark McCaskey",
        "timestamp": 1586194162
    },
    {
        "content": "<p>Hey!  Sorry I haven't made much progress on this recently: I'm a bit lost as to what the next steps are.  I think I can push through some more of the implementation of <code>Closure</code> (get it up to parity with <code>FnDef</code>), but other than that I'm not quite sure what to do.  It seems like this PR is touching on a number of non-trivial things that may require some design work.  Would it perhaps make sense to shift focus onto a new PR with the scalars first?  Alternatively,  this PR, as-is, has a decent amount of placeholder code so I can try to fill those parts in with proper implementations.</p>",
        "id": 193821910,
        "sender_full_name": "Mark McCaskey",
        "timestamp": 1586812243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281304\">@Mark McCaskey</span> I was thinking you could extract out the code for the scalars etc first</p>",
        "id": 193822011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812322
    },
    {
        "content": "<p>Agreed</p>",
        "id": 193822049,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586812330
    },
    {
        "content": "<p>and we can land that separately</p>",
        "id": 193822054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812332
    },
    {
        "content": "<p>and then come back to the fn-def/closures</p>",
        "id": 193822063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812340
    },
    {
        "content": "<p>But I also want to discuss this tomorrow before we land</p>",
        "id": 193822067,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586812344
    },
    {
        "content": "<p>one thing -- you will need to extend the parser I imagine with the appropriate keywords</p>",
        "id": 193822081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812353
    },
    {
        "content": "<p>or else we can't write tests for it</p>",
        "id": 193822085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812357
    },
    {
        "content": "<p>I forget if that was in the PR already</p>",
        "id": 193822100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812367
    },
    {
        "content": "<p>Mostly because I wonder if we want these types in <code>chalk-ir</code> or only in <code>chalk-rust-ir</code></p>",
        "id": 193822114,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586812374
    },
    {
        "content": "<p>i.e., <code>usize</code>, <code>bool</code>, and so forth</p>",
        "id": 193822116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812375
    },
    {
        "content": "<p>I think we want them in both</p>",
        "id": 193822135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812387
    },
    {
        "content": "<p>Great -- sounds good!  I removed it from the PR already, I can open a PR with the code I removed!</p>\n<p>I started adding parsing for FnDef but it's super basic -- I'll thread the scalars through and do the same!</p>",
        "id": 193822147,
        "sender_full_name": "Mark McCaskey",
        "timestamp": 1586812396
    },
    {
        "content": "<p>or at least .. I'm not sure what it looks like if they are only in chalk-rust-ir</p>",
        "id": 193822161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812400
    },
    {
        "content": "<p>certainly we have to generate special rules in chalk-solve for them</p>",
        "id": 193822176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812410
    },
    {
        "content": "<p>Right</p>",
        "id": 193822194,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586812424
    },
    {
        "content": "<p>and if -- as I hope -- chalk-ir eventually becomes the \"standard IR for manipulating types\" that is the foundation for type-checker, trait checking, etc</p>",
        "id": 193822206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812431
    },
    {
        "content": "<p>it'll need to be able to talk pleasantly about such types</p>",
        "id": 193822213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812436
    },
    {
        "content": "<p>Hmm</p>",
        "id": 193822267,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586812452
    },
    {
        "content": "<p>I wonder if it's worth merging chalk-ir and chalk-rust-ir</p>",
        "id": 193822277,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586812462
    },
    {
        "content": "<p>probably...not?</p>",
        "id": 193822289,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586812472
    },
    {
        "content": "<p>I .. yeah, I don't know.</p>",
        "id": 193822321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812502
    },
    {
        "content": "<p>I suspect not</p>",
        "id": 193822334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812509
    },
    {
        "content": "<p>But maybe</p>",
        "id": 193822336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812511
    },
    {
        "content": "<p>I'm already nearly persuaded that these types should go in chalk-ir</p>",
        "id": 193822371,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586812533
    },
    {
        "content": "<p>i.e, I think we could \"tease out\" the solver and have it depend only on chalk-ir</p>",
        "id": 193822373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812534
    },
    {
        "content": "<p>as well as stuff like \"unification\"</p>",
        "id": 193822386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812544
    },
    {
        "content": "<p>and subtyping</p>",
        "id": 193822388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812545
    },
    {
        "content": "<p>ah</p>",
        "id": 193822392,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586812549
    },
    {
        "content": "<p>yeah, possibly</p>",
        "id": 193822397,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586812555
    },
    {
        "content": "<p>not sure how important that is, but there is some value in having those layers exposed via crate layering</p>",
        "id": 193822450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812569
    },
    {
        "content": "<p>I started working on parsing scalars and opened a PR <a href=\"https://github.com/rust-lang/chalk/pull/394\" title=\"https://github.com/rust-lang/chalk/pull/394\">https://github.com/rust-lang/chalk/pull/394</a>!</p>\n<p>I added parsing for integers and boolean literals, which I'm just now realizing may not be useful for this PR <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> ... did we just need to parse the type names?  Either way, I had fun writing that code.</p>\n<p>I suppose I should ask for more clarification before writing any more code: does the \"internal\" implementation of these scalar types just consist of connecting them to the other \"intrinsic\" types like the built-in/well-known traits?</p>",
        "id": 193852278,
        "sender_full_name": "Mark McCaskey",
        "timestamp": 1586842863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281304\">@Mark McCaskey</span> in this PR, I'd probably not touch the built-in traits, just add support for the types -- we could have some tests that let you e.g. write things like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">S1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">S1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and then test a goal like <code>Implemented((S1, S2): Foo)</code> or whatever. (Same for <code>u32</code> and friends.)</p>",
        "id": 193873744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586858068
    },
    {
        "content": "<p>Thanks again for all guidance!  Unfortunately I didn't have as much time as I'd hoped to work on it tonight and wasn't able to finish.  I did write a few more tests though and some are passing when it seems like they should be failing.</p>\n<p>An example of some surprising behavior I noticed is that given</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>, <code>(A, B): Foo</code> resolves as <code>Implemented(2&lt;A, B&gt;: Foo)</code> even though <code>A</code> and <code>B</code> are not the same type and even when <code>B</code> doesn't implement <code>Foo</code>.</p>\n<p>This logic holds for structs too with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">C</span><span class=\"o\">&lt;</span><span class=\"n\">T1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T2</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>in place of the tuple code causing <code>C&lt;A, B&gt;: Foo</code> to produce <code>Implemented(C&lt;A, B&gt;: Foo)</code>.</p>\n<p>Is this correct behavior and I'm misunderstanding how this is supposed to work?</p>",
        "id": 194259912,
        "sender_full_name": "Mark McCaskey",
        "timestamp": 1587015704
    },
    {
        "content": "<p>Well, <code>(A,B): Foo</code> should be lowered as <code>Implemented((A, B): Foo)</code>, you just can't prove it</p>",
        "id": 194268160,
        "sender_full_name": "Areredify",
        "timestamp": 1587023836
    },
    {
        "content": "<p>Oh, okay -- thanks!  That makes sense then.  I thought it was asserting it, but it was just parsing the the query</p>",
        "id": 194318631,
        "sender_full_name": "Mark McCaskey",
        "timestamp": 1587049705
    },
    {
        "content": "<p>I left some comments btw on your PR</p>",
        "id": 194320322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587050304
    },
    {
        "content": "<p>that show how to run the tests you were trying to run</p>",
        "id": 194320335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587050309
    },
    {
        "content": "<p>Getting some test failures in <code>projection.rs</code> when I replaced <code>struct u32 { }</code> with the scalar u32:</p>\n<div class=\"codehilite\"><pre><span></span>---- test::projection::projection_equality stdout ----\nprogram {\n    trait Trait1 { type Type ; } trait Trait2 &lt; T &gt; { } impl &lt; T, U &gt; Trait2 &lt;\n    T &gt; for U where U : Trait1 &lt; Type = T &gt; { } struct S { } impl Trait1 for S\n    { type Type = u32 ; }\n}\nthread &#39;test::projection::projection_equality&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: ChalkError { error_text: &quot;trait impl for `Trait1` does not meet well-formedness requirements&quot; }&#39;, tests/test/mod.rs:227:19\n</pre></div>\n\n\n<p>Investigating this now, but haven't found a fix yet</p>",
        "id": 194327516,
        "sender_full_name": "Mark McCaskey",
        "timestamp": 1587052883
    },
    {
        "content": "<p>Okay, I think it might be because <code>WellFormed(u32)</code> fails!</p>",
        "id": 194333416,
        "sender_full_name": "Mark McCaskey",
        "timestamp": 1587055351
    },
    {
        "content": "<p>You probably need to add <code>WellFormed(T)</code> for most (all?) builtin types</p>",
        "id": 194334772,
        "sender_full_name": "Areredify",
        "timestamp": 1587056008
    },
    {
        "content": "<p>Huh, on the other hand, should that kind of reasoning live in the solver instead? Something like impls for well known traits that are only generated on demand? <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 194336500,
        "sender_full_name": "Areredify",
        "timestamp": 1587056724
    },
    {
        "content": "<p>WellFormed logic for builtin types should live in <code>chalk-solve</code></p>",
        "id": 194358571,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587066871
    },
    {
        "content": "<p>left <a href=\"https://github.com/rust-lang/chalk/pull/394#pullrequestreview-395333283\" title=\"https://github.com/rust-lang/chalk/pull/394#pullrequestreview-395333283\">more detailed notes here</a></p>",
        "id": 194420507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587118995
    },
    {
        "content": "<p>Thanks!</p>\n<p>I'm working on implementing this now and am currently confused by <code>FromEnv</code>:</p>\n<p>The existing logic for placeholders relies on <code>WellFormed(T) :- FromEnv(T)</code> (<code>builder.push_clause(WellFormed::Ty(ty.clone()), Some(FromEnv::Ty(ty.clone())));</code>), and scalar types don't currently satisfy <code>FromEnv</code>, so I split it out into a separate branch but I noticed that <code>builder.push_fact(FromEnv::Ty(ty.clone()));</code> doesn't make scalars satisfy <code>FromEnv</code>, even though <code>builder.push_fact(WellFormed::Ty(ty.clone()));</code> _does_ make them satisfy WellFormed</p>",
        "id": 194526853,
        "sender_full_name": "Mark McCaskey",
        "timestamp": 1587186920
    },
    {
        "content": "<p>Ah, that reminds me that our next meeting is about implied bounds, so I want to read over the various docs and bring that stuff back into my head</p>",
        "id": 194538294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587207023
    },
    {
        "content": "<p>That said, I actually think what you have is correct</p>",
        "id": 194538375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587207141
    },
    {
        "content": "<p>The idea of <code>FromEnv(...)</code> is that, as the name suggests, it is supposed to indicate something that you know is true because you are in a context where your caller (...assuming it's a fn) has proven it for you.</p>",
        "id": 194538391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587207191
    },
    {
        "content": "<p>In this case, we know that <code>u32</code> is well-formed from \"first principles\", so I think it is correct to just add a <code>WellFormed(u32)</code> fact.</p>",
        "id": 194538398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587207220
    },
    {
        "content": "<p>(In contrast, placeholder types are only known valid because we know that the caller won't supply us with an invalid one.)</p>",
        "id": 194538444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587207250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/extend.20chalk.20.60TypeName.60.20with.20builtin.20types.20chalk.23368/near/194538294\" title=\"#narrow/stream/144729-wg-traits/topic/extend.20chalk.20.60TypeName.60.20with.20builtin.20types.20chalk.23368/near/194538294\">said</a>:</p>\n<blockquote>\n<p>Ah, that reminds me that our next meeting is about implied bounds, so I want to read over the various docs and bring that stuff back into my head</p>\n</blockquote>\n<p>That would be mostly the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2089-implied-bounds.md\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/2089-implied-bounds.md\">RFC</a> and the <a href=\"https://rustc-dev-guide.rust-lang.org/traits/implied-bounds.html\" title=\"https://rustc-dev-guide.rust-lang.org/traits/implied-bounds.html\">rustc-dev-guide chapter</a>, right?</p>",
        "id": 194586568,
        "sender_full_name": "detrumi",
        "timestamp": 1587285863
    }
]