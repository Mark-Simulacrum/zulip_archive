[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 196359047,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588708727
    },
    {
        "content": "<p>Meeting is 2ish minutes</p>",
        "id": 196359057,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588708731
    },
    {
        "content": "<p>There isn't currently anything on the agenda for today</p>",
        "id": 196359237,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588708808
    },
    {
        "content": "<p>(link <a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\" title=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\">https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both</a>)</p>",
        "id": 196359264,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588708815
    },
    {
        "content": "<p>one thing I was thinking of doing</p>",
        "id": 196359458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588708888
    },
    {
        "content": "<p>9 PRs merged the last week :)</p>",
        "id": 196359487,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588708903
    },
    {
        "content": "<p>is creating issues for the various bits of rust types we need to support</p>",
        "id": 196359513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588708915
    },
    {
        "content": "<p>And 0.10.0 has been released :)</p>",
        "id": 196359531,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588708920
    },
    {
        "content": "<p>there's a reasonably big list in <a href=\"https://github.com/rust-lang-nursery/chalk/issues/368\" title=\"https://github.com/rust-lang-nursery/chalk/issues/368\">chalk#368</a></p>",
        "id": 196359617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588708938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196359513\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196359513\">said</a>:</p>\n<blockquote>\n<p>is creating issues for the various bits of rust types we need to support</p>\n</blockquote>\n<p>Other than types?</p>",
        "id": 196359630,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588708942
    },
    {
        "content": "<p>and I guess we can mostly point at <span class=\"user-mention\" data-user-id=\"281304\">@Mark McCaskey</span>'s PR for the model for most of them</p>",
        "id": 196359703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588708967
    },
    {
        "content": "<p>So, in terms of agenda... I'm ok with a light meeting. <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> and I were talking about the question of how to handle types in const generics though</p>",
        "id": 196359818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709010
    },
    {
        "content": "<p>which turns out to be more annoying than one might think</p>",
        "id": 196359834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709017
    },
    {
        "content": "<p>I skimmed through that</p>",
        "id": 196359851,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709026
    },
    {
        "content": "<p>Maybe we can get back to that?</p>",
        "id": 196359927,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709045
    },
    {
        "content": "<p>But let's maybe start with sprint progress updates?</p>",
        "id": 196359965,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709061
    },
    {
        "content": "<p>If there are any</p>",
        "id": 196359977,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709068
    },
    {
        "content": "<p>(last week)</p>",
        "id": 196360027,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709100
    },
    {
        "content": "<p>So, I'm feeling a bit lost as to what <em>I</em> should be doing</p>",
        "id": 196360040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709107
    },
    {
        "content": "<p>I keep wanting to do something and feeling like \"uh...mind blank\"</p>",
        "id": 196360057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709119
    },
    {
        "content": "<p>Yeah, I can understand that</p>",
        "id": 196360083,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709131
    },
    {
        "content": "<p>You should review my <code>Unsize</code> pr <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 196360085,
        "sender_full_name": "Areredify",
        "timestamp": 1588709131
    },
    {
        "content": "<p>But I did start looking into the refactorings of predicates and things in rustc</p>",
        "id": 196360089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"251766\">Areredify</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196360085\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196360085\">said</a>:</p>\n<blockquote>\n<p>You should review my <code>Unsize</code> pr <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>\n</blockquote>\n<p>should I? I was waiting until <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>'s comments were addressed, but I can :)</p>",
        "id": 196360113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709148
    },
    {
        "content": "<p>although reviewing PRs is one thing I've been able to do</p>",
        "id": 196360135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709162
    },
    {
        "content": "<p>looking over <a href=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\" title=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\">the skill tree</a>...</p>",
        "id": 196360295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709226
    },
    {
        "content": "<p>(which I somewhat updated...)</p>",
        "id": 196360325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709249
    },
    {
        "content": "<p>...it seems like one major area that's not making too much progress is the \"aligning\" of rustc/chalk</p>",
        "id": 196360423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709292
    },
    {
        "content": "<p>which is why I started trying to write-out some of the predicate work</p>",
        "id": 196360434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709303
    },
    {
        "content": "<p><code>Unsize</code> logic is ready to be reviewed, I am missing some tests and comments here and there</p>",
        "id": 196360442,
        "sender_full_name": "Areredify",
        "timestamp": 1588709308
    },
    {
        "content": "<p>which I think would <em>also</em> help towards trying to implement GATs in the native solve</p>",
        "id": 196360450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709313
    },
    {
        "content": "<p>though I realize now that we may have to resolve some of the region interactions</p>",
        "id": 196360470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709327
    },
    {
        "content": "<p>that's not really on the skill tree I guess</p>",
        "id": 196360499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709343
    },
    {
        "content": "<p>And also a possibility of adding <code>ObjectSafe(Trait)</code>, which I wanted you to weigh in on</p>",
        "id": 196360500,
        "sender_full_name": "Areredify",
        "timestamp": 1588709345
    },
    {
        "content": "<p>Yeah, I would say the work there that <em>hasn't</em> been worked on is on the rustc side</p>",
        "id": 196360504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709349
    },
    {
        "content": "<blockquote>\n<p>Adapt rustc's representation of late-bound items</p>\n</blockquote>",
        "id": 196360525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196360470\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196360470\">said</a>:</p>\n<blockquote>\n<p>though I realize now that we may have to resolve some of the region interactions</p>\n</blockquote>\n<p>What region interactions?</p>",
        "id": 196360526,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709362
    },
    {
        "content": "<p>ninja'd</p>",
        "id": 196360548,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709376
    },
    {
        "content": "<p>well, we're in the midst of the <a href=\"https://github.com/rust-lang/rust/issues/56105\" title=\"https://github.com/rust-lang/rust/issues/56105\">\"universe transition\"</a> in rustc</p>",
        "id": 196360573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709401
    },
    {
        "content": "<p>and that basically affects how <code>forall</code> is handled</p>",
        "id": 196360632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709416
    },
    {
        "content": "<p>to make it match chalk</p>",
        "id": 196360638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709419
    },
    {
        "content": "<p>but there are some...<em>interactions</em> with backwards compatibility</p>",
        "id": 196360648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709426
    },
    {
        "content": "<p>Oh, I haven't seen this one</p>",
        "id": 196360681,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709448
    },
    {
        "content": "<p>I could elaborate but suffice to say for now that the plan I <em>did</em> want to do would have a big impact on wasm-bindgen (and maybe break other crates too), so it probably makes sense to try and explore some other plans</p>",
        "id": 196360696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"251766\">Areredify</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196360500\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196360500\">said</a>:</p>\n<blockquote>\n<p>And also a possibility of adding <code>ObjectSafe(Trait)</code>, which I wanted you to weigh in on</p>\n</blockquote>\n<p>Let's be sure to get back to this in a bit</p>",
        "id": 196360699,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709462
    },
    {
        "content": "<p>Was this related to <a href=\"https://github.com/rust-lang/rust/pull/66037\" title=\"https://github.com/rust-lang/rust/pull/66037\">https://github.com/rust-lang/rust/pull/66037</a></p>",
        "id": 196360766,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709506
    },
    {
        "content": "<p>no</p>",
        "id": 196360777,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709514
    },
    {
        "content": "<p>I'm thinking of the other one</p>",
        "id": 196360790,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709519
    },
    {
        "content": "<p>leak check stuff</p>",
        "id": 196360871,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709543
    },
    {
        "content": "<p>(sorry, was afk, back now)</p>",
        "id": 196361089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709664
    },
    {
        "content": "<p>it is related to the leak check stuff, yes</p>",
        "id": 196361102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709674
    },
    {
        "content": "<p>that is, leak check is the old system</p>",
        "id": 196361110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709682
    },
    {
        "content": "<p>Can you explain a little bit about the problem?</p>",
        "id": 196361123,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709692
    },
    {
        "content": "<p>I swear I have to re-remember things every time</p>",
        "id": 196361151,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588709716
    },
    {
        "content": "<p>so</p>",
        "id": 196361180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709733
    },
    {
        "content": "<p>in rustc today we have this thing called the 'leak check'</p>",
        "id": 196361190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709741
    },
    {
        "content": "<p>the idea is that, to handle higher-ranked operations,</p>",
        "id": 196361220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709761
    },
    {
        "content": "<p>e.g., in order to figure out if <code>for&lt;'a&gt; T: Trait&lt;'a&gt;</code></p>",
        "id": 196361286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709783
    },
    {
        "content": "<p>we would (a) first create a fresh placeholder for <code>'a</code></p>",
        "id": 196361314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709798
    },
    {
        "content": "<p>(b) execute the impl match, which yields up some obligations,</p>",
        "id": 196361336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709811
    },
    {
        "content": "<p>and then (c) we look through those obligations to see if any of them would constrain <code>'a</code></p>",
        "id": 196361378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709832
    },
    {
        "content": "<p>for example if there was <code>impl&lt;T&gt; Trait&lt;'static&gt; for T</code>,</p>",
        "id": 196361395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709842
    },
    {
        "content": "<p>then we'd have some obligation that <code>'a = 'static</code>,</p>",
        "id": 196361400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709848
    },
    {
        "content": "<p>and we would error</p>",
        "id": 196361405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709852
    },
    {
        "content": "<p>so far, so good</p>",
        "id": 196361407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709854
    },
    {
        "content": "<p>the problem is that the way rustc does this is that it pushes those placeholders onto a stack</p>",
        "id": 196361429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709866
    },
    {
        "content": "<p>does the operation</p>",
        "id": 196361442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709873
    },
    {
        "content": "<p>then pops things from the stack, looking for errors at the same time</p>",
        "id": 196361473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709883
    },
    {
        "content": "<p>like, there is a Rust function that does:</p>\n<div class=\"codehilite\"><pre><span></span><code>push_placeholders();\ndo_operation();\nif pop_placeholders_and_scan_constraints() == error {\n    return Error;\n}\n...\n</code></pre></div>",
        "id": 196361556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709929
    },
    {
        "content": "<p>we've since adapted this code to use universes much like chalk, but it still has this  kind of \"eager\" check</p>",
        "id": 196361606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588709960
    },
    {
        "content": "<p>in contrast, in the \"universe-based\" system that chalk uses, you handle placeholders by creating the placeholders in the new universe and proceeding, but there is no notion of popping -- but this in turn can mean that we won't detect the error until later</p>",
        "id": 196361717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710010
    },
    {
        "content": "<p>to be more concrete, if we imagine lazy normalization,</p>",
        "id": 196361749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710034
    },
    {
        "content": "<p>the operation might be like \"unify <code>&lt;T as Trait&lt;'a&gt;&gt;::Foo = u32</code>\" or something</p>",
        "id": 196361776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710052
    },
    {
        "content": "<p>Can you give a more concrete example? (or maybe you're about to do that)</p>",
        "id": 196361790,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588710061
    },
    {
        "content": "<p>ninja'd</p>",
        "id": 196361820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588710078
    },
    {
        "content": "<p>in chalk's scheme, the type unifier would create a <code>AliasEq(&lt;T as Trait&lt;'a&gt;&gt;::Foo, u32)</code> goal and put it on a list of \"things to solve later\"</p>",
        "id": 196361893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710122
    },
    {
        "content": "<p>but if that list of things to solve later is returned out,</p>",
        "id": 196361997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710178
    },
    {
        "content": "<p>basically we can't go \"scanning the constraints\" until all those things are solved</p>",
        "id": 196362013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710187
    },
    {
        "content": "<p>the whole stack-based scheme kind of unravels unless you want the <em>program stack</em> to match the <em>solving stack</em> (which isn't so terrible, it's more-or-less true in the recursive solver, but it's not true in the SLG solver nor in many parts of how rustc works)</p>",
        "id": 196362068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710229
    },
    {
        "content": "<p>this is also related to the fact that rustc's current leak check is incorrect</p>",
        "id": 196362134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710251
    },
    {
        "content": "<p>it rejects some subtypes and things it should accept</p>",
        "id": 196362156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710267
    },
    {
        "content": "<p>this in turn has an impact on coherence --</p>",
        "id": 196362198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710290
    },
    {
        "content": "<p>i.e., it might accept two impls as \"not overlapping\" because it thinks that their self types are not equal, but in fact they are</p>",
        "id": 196362226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710313
    },
    {
        "content": "<p>there's a space of designs here</p>",
        "id": 196362271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710341
    },
    {
        "content": "<p>I was pushing so far in my code to adopt the \"most conservative\" (in some sense), which is also what chalk currently does, which is where the core \"solver operation\" sort of looks like:</p>\n<div class=\"codehilite\"><pre><span></span><code>Op(Args) = one of {\n    Ok(RegionConstraints)\n    Err\n}\n</code></pre></div>\n\n\n<p>and, if the higher-ranked things don't work, it might just happen that the region constraints are not solvable</p>",
        "id": 196362394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710404
    },
    {
        "content": "<p>This is a lot to follow, anyone else a bit lost?</p>",
        "id": 196362416,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588710416
    },
    {
        "content": "<p>heh, sorry</p>",
        "id": 196362427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710421
    },
    {
        "content": "<p>it <em>is</em> complex :/</p>",
        "id": 196362437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710427
    },
    {
        "content": "<p>Nature of the beast</p>",
        "id": 196362440,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588710428
    },
    {
        "content": "<p>let's pull back a bit but suffices to say that</p>",
        "id": 196362468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710444
    },
    {
        "content": "<p>when we try to support a distinct \"forall\" predicate in rustc, it will interact with this --</p>",
        "id": 196362517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710468
    },
    {
        "content": "<p>but there is plenty of work to do that is distinct from that</p>",
        "id": 196362526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710474
    },
    {
        "content": "<p>(please postpone responding if I'm interrupting)<br>\nIf there are any issues that would be a good intro to the codebase, I'm looking for how to get involved in Chalk.</p>\n<p>It sounds like there's a lot of hard problems which are blocking progress. Maybe you know of some resources which can help get a new contributor up to speed on the problems? I have some background in Prolog and have read the string of Chalk blog posts.</p>",
        "id": 196362582,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1588710485
    },
    {
        "content": "<p>and I guess that means it makes sense for me to do some of the experimentation I wanted to do that might unblock that</p>",
        "id": 196362591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218805\">@Mark Drobnak</span>  there are indeed some good starter issues!</p>",
        "id": 196362617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710505
    },
    {
        "content": "<p>probably the <a href=\"http://rust-lang.github.io/chalk/book/\" title=\"http://rust-lang.github.io/chalk/book/\">chalk book</a> is also worth highlighting</p>",
        "id": 196362667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710529
    },
    {
        "content": "<p>but in terms of starter issues I was specifically going to spend some time carving up <a href=\"https://github.com/rust-lang/chalk/issues/368\" title=\"https://github.com/rust-lang/chalk/issues/368\">https://github.com/rust-lang/chalk/issues/368</a> into issues, and I think those would be a good starting point</p>",
        "id": 196362704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710552
    },
    {
        "content": "<p>Ya, I'm actually working on a PR to fix the \"file an issue\" link (goes to rustc dev repo)</p>",
        "id": 196362709,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1588710557
    },
    {
        "content": "<p>lol there you go :)</p>",
        "id": 196362719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710564
    },
    {
        "content": "<p>So I guess the question I have in regards to this is: Is there something that <em>chalk</em> needs to change here?</p>",
        "id": 196362785,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588710601
    },
    {
        "content": "<p>I think the answer is <em>maybe</em></p>",
        "id": 196362841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710611
    },
    {
        "content": "<p>but probably it has to start on the rustc side</p>",
        "id": 196362856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710617
    },
    {
        "content": "<p>(I realized btw a flaw in my old plans around region solving, in that I'm not sure if they'll work as well with the recursive solver, but let's not try to get into the details just now)</p>",
        "id": 196362915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710646
    },
    {
        "content": "<p>Is that maybe because of backwards compatibility?</p>",
        "id": 196362930,
        "sender_full_name": "detrumi",
        "timestamp": 1588710655
    },
    {
        "content": "<p>not entirely</p>",
        "id": 196362944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710664
    },
    {
        "content": "<p>but partially</p>",
        "id": 196362953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710669
    },
    {
        "content": "<p>yeah, that was my other thought</p>",
        "id": 196362983,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588710691
    },
    {
        "content": "<p>basically right now chalk just does <em>nothing</em> about higher-ranked region constraints except for pushing them back to the caller</p>",
        "id": 196362992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710697
    },
    {
        "content": "<p>I think maybe it should do a bit more work in simplifying things</p>",
        "id": 196363008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710704
    },
    {
        "content": "<p>this impacts the interface with polonius</p>",
        "id": 196363031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710720
    },
    {
        "content": "<p>Resolve everything we can resolve?</p>",
        "id": 196363090,
        "sender_full_name": "Areredify",
        "timestamp": 1588710733
    },
    {
        "content": "<p>e.g., I would like chalk to be able to say that <code>exists&lt;'a&gt; { forall&lt;'b&gt; { 'a = 'b } }</code> cannot be proven</p>",
        "id": 196363104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710742
    },
    {
        "content": "<p>just like it does with types</p>",
        "id": 196363112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710748
    },
    {
        "content": "<p>Speaking of polonious...where is that \"interaction boundary\"</p>",
        "id": 196363117,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588710749
    },
    {
        "content": "<p>or, more precisely</p>",
        "id": 196363142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710764
    },
    {
        "content": "<p><code>exists&lt;'a&gt; { forall&lt;'b&gt; { 'a: 'b, 'b: 'a } }</code></p>",
        "id": 196363167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710777
    },
    {
        "content": "<p>but that <em>would</em>, I think, require us to understand that</p>",
        "id": 196363191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710791
    },
    {
        "content": "<p><code>exists&lt;'a&gt; { forall&lt;'b&gt; { if ('a: 'b, 'b: 'a) { 'a: 'b, 'b: 'a } } }</code> <em>is</em> provable</p>",
        "id": 196363233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710811
    },
    {
        "content": "<p>(this last part is one of the tricky bits around with rustc)</p>",
        "id": 196363274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710833
    },
    {
        "content": "<p>and it gets more fun than that...</p>",
        "id": 196363341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710849
    },
    {
        "content": "<p>(so much for a \"light\" meeting. Some complex discussion)</p>",
        "id": 196363363,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588710867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196363117\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196363117\">said</a>:</p>\n<blockquote>\n<p>Speaking of polonious...where is that \"interaction boundary\"</p>\n</blockquote>\n<p>so, the idea is basically that chalk exports region constraints, and those can be translated to inputs to polonius -- but polonius can't handle higher-ranked things, and sometimes this interacts with other concepts that chalk is better equippe to handle, like well-formed types. </p>\n<p>So I think it comes to</p>\n<div class=\"codehilite\"><pre><span></span><code>chalk --&gt;\n   potentially some intermediate simplifier --&gt;\n       polonius\n</code></pre></div>\n\n\n<p>or maybe that simplification happens within chalk</p>",
        "id": 196363484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710921
    },
    {
        "content": "<p>originally I pursued a design where that simplification happend within <em>polonius</em>, but I ultimately felt that wasn't a good fit</p>",
        "id": 196363535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710947
    },
    {
        "content": "<p>I feel like we need more/better tests for region constraints in Chalk</p>",
        "id": 196363547,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588710959
    },
    {
        "content": "<p>which reminds me..</p>",
        "id": 196363608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710972
    },
    {
        "content": "<p>did I open a PR to introduce outlives?</p>",
        "id": 196363616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710977
    },
    {
        "content": "<p>did we land that?</p>",
        "id": 196363620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710978
    },
    {
        "content": "<p>Yes and no</p>",
        "id": 196363639,
        "sender_full_name": "Areredify",
        "timestamp": 1588710985
    },
    {
        "content": "<p>that's another big hunk of the rustc integration story</p>",
        "id": 196363650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588710988
    },
    {
        "content": "<p>yes and yes</p>",
        "id": 196363658,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588710994
    },
    {
        "content": "<p>oh right</p>",
        "id": 196363681,
        "sender_full_name": "Areredify",
        "timestamp": 1588711008
    },
    {
        "content": "<p>yes and yes indeed</p>",
        "id": 196363691,
        "sender_full_name": "Areredify",
        "timestamp": 1588711015
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/419\" title=\"https://github.com/rust-lang/chalk/pull/419\">https://github.com/rust-lang/chalk/pull/419</a></p>",
        "id": 196363696,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711018
    },
    {
        "content": "<p>On a related note: we need an <code>Outlives(T, 'a)</code> clause</p>",
        "id": 196363704,
        "sender_full_name": "Areredify",
        "timestamp": 1588711022
    },
    {
        "content": "<p>Yeah, maybe we want to switch a bit and talk about that?</p>",
        "id": 196363795,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711066
    },
    {
        "content": "<p>(37 minutes in)</p>",
        "id": 196363808,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711072
    },
    {
        "content": "<p>yeah, let's talk a bit about the steps there</p>",
        "id": 196363838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711082
    },
    {
        "content": "<p>also whatever it was we pushed on the stack for <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span></p>",
        "id": 196363887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> brought up <code>ObjectSafe</code> earlier</p>",
        "id": 196363894,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711097
    },
    {
        "content": "<p>These are both <em>somewhat</em> related, in the fact that they're sort of ignored in the current rustc integration</p>",
        "id": 196363996,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711155
    },
    {
        "content": "<p>but other than that, a bit different</p>",
        "id": 196364019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711165
    },
    {
        "content": "<p>(ps, I think I will merge <a href=\"https://github.com/rust-lang/chalk/pull/428/\" title=\"https://github.com/rust-lang/chalk/pull/428/\">https://github.com/rust-lang/chalk/pull/428/</a> now...I'd like to be able to refer to that table :)</p>",
        "id": 196364049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711183
    },
    {
        "content": "<p>well so object-safe</p>",
        "id": 196364082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711196
    },
    {
        "content": "<p>I think what we want there is relatively simple</p>",
        "id": 196364137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711205
    },
    {
        "content": "<p>(saw that and wanted to defer to you for function ptr changes)</p>",
        "id": 196364163,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711215
    },
    {
        "content": "<p>We can't have object safe until we have assoc functions and what not</p>",
        "id": 196364166,
        "sender_full_name": "Areredify",
        "timestamp": 1588711216
    },
    {
        "content": "<p>I would not make that part of chalk</p>",
        "id": 196364190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711225
    },
    {
        "content": "<p>Oh?</p>",
        "id": 196364210,
        "sender_full_name": "Areredify",
        "timestamp": 1588711237
    },
    {
        "content": "<p>I would make a <code>RustIrDatabase</code> callback method <code>is_object_safe(TraitId)</code></p>",
        "id": 196364213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711239
    },
    {
        "content": "<p>and have chalk-solve invoke it on demand</p>",
        "id": 196364231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711247
    },
    {
        "content": "<p>we can maybe integrate later</p>",
        "id": 196364242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711252
    },
    {
        "content": "<p>(which is how it's handled in the current <code>Unsize</code> pr)</p>",
        "id": 196364255,
        "sender_full_name": "Areredify",
        "timestamp": 1588711261
    },
    {
        "content": "<p>well...</p>",
        "id": 196364271,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711267
    },
    {
        "content": "<p>(and in our tests, I'd add a #[object_safe] flag)</p>",
        "id": 196364285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711273
    },
    {
        "content": "<p>I still think we need the <code>ObjectSafe</code> goal</p>",
        "id": 196364289,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711274
    },
    {
        "content": "<p>yes</p>",
        "id": 196364293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711279
    },
    {
        "content": "<p>I'm just saying that \"when we need to prove this goal, we invoke the callback\"</p>",
        "id": 196364310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711289
    },
    {
        "content": "<p>Since rustc needs to register that</p>",
        "id": 196364332,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711298
    },
    {
        "content": "<p>eventually we probably do want to reproduce that logic</p>",
        "id": 196364342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711301
    },
    {
        "content": "<p>but I don't think it makes sense to do so right now</p>",
        "id": 196364355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711306
    },
    {
        "content": "<p>right</p>",
        "id": 196364368,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711309
    },
    {
        "content": "<p>That was basically what I was thinking</p>",
        "id": 196364390,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711319
    },
    {
        "content": "<p>should I open an issue?</p>",
        "id": 196364450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711331
    },
    {
        "content": "<p>I think I'll just incorporate it in my pr</p>",
        "id": 196364476,
        "sender_full_name": "Areredify",
        "timestamp": 1588711349
    },
    {
        "content": "<p>OK, it might be nice to land in a separate PR</p>",
        "id": 196364503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711363
    },
    {
        "content": "<p>Agreed</p>",
        "id": 196364515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711369
    },
    {
        "content": "<p>Almost wanted to ask you (<span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span>) to split out the <code>DynTy</code> changes</p>",
        "id": 196364570,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711392
    },
    {
        "content": "<p>but decided it's fine</p>",
        "id": 196364577,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711396
    },
    {
        "content": "<p>I can do that, they are in a separate commit</p>",
        "id": 196364600,
        "sender_full_name": "Areredify",
        "timestamp": 1588711408
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/chalk/issues/434\" title=\"https://github.com/rust-lang/chalk/issues/434\">https://github.com/rust-lang/chalk/issues/434</a></p>",
        "id": 196364642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711427
    },
    {
        "content": "<p>so regions and outlives?</p>",
        "id": 196364706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711443
    },
    {
        "content": "<p>I have some related work for this too on a branch, actually ;)</p>",
        "id": 196364729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711451
    },
    {
        "content": "<p>yeah</p>",
        "id": 196364741,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711455
    },
    {
        "content": "<p>So, there's two things we need to think about</p>",
        "id": 196364850,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711501
    },
    {
        "content": "<p>so rustc has the same basic model of chalk (modulo details around the leak-check), wherein each operation succeeds or fails, and if it succeeds, it gives back \"region constraints\",  and they have the form:</p>\n<ul>\n<li><code>'a: 'b</code>, or</li>\n<li><code>T: 'a</code></li>\n</ul>",
        "id": 196364870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711509
    },
    {
        "content": "<p><code>RegionOutlives</code> and <code>TypeOutlives</code></p>",
        "id": 196364871,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711509
    },
    {
        "content": "<p>I ninja'd you this time</p>",
        "id": 196364911,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711526
    },
    {
        "content": "<p>so we probably want to extend chalk to be able to generate similar region constraints</p>",
        "id": 196364934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711535
    },
    {
        "content": "<p>on the other side, we probably want chalk goals that are \"always solveable\" and just generate the constraints</p>",
        "id": 196364962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711548
    },
    {
        "content": "<p>so that we can (e.g.) translate where clauses like <code>where 'a: 'b</code></p>",
        "id": 196364991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711561
    },
    {
        "content": "<p>Hmm, that would work I think</p>",
        "id": 196365076,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711584
    },
    {
        "content": "<p>I have a branch where I did exactly this, and I also modified unification so that it just succeeds with a list of auxiliary goals (some of which are outlives goals)</p>",
        "id": 196365088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711588
    },
    {
        "content": "<p>but rebasing that branch was proving annoying</p>",
        "id": 196365111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711596
    },
    {
        "content": "<p>(also I don't think I handled type outlives)</p>",
        "id": 196365145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711609
    },
    {
        "content": "<p>it's honestly maybe easier to just reimplement it</p>",
        "id": 196365215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711646
    },
    {
        "content": "<p>been a lot of drift since that branch started (e.g., TypeFamily =&gt; Interner, etc)</p>",
        "id": 196365242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711661
    },
    {
        "content": "<p>So region outlives is simple (I think)</p>",
        "id": 196365252,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711666
    },
    {
        "content": "<p>What does type outlives actually entail</p>",
        "id": 196365274,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711675
    },
    {
        "content": "<p>nothing really</p>",
        "id": 196365331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711682
    },
    {
        "content": "<p>that is something else I would export to rustc for now</p>",
        "id": 196365352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711690
    },
    {
        "content": "<p><em>eventually</em> I think chalk will have more complex rules for these two goals</p>",
        "id": 196365373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711697
    },
    {
        "content": "<p>certainly today's trait solver in rustc just exports this to another bit of the code</p>",
        "id": 196365399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711709
    },
    {
        "content": "<p>one sec...</p>",
        "id": 196365451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711740
    },
    {
        "content": "<p>Nll 3.0 with chalk and polonius forming a megazord?</p>",
        "id": 196365461,
        "sender_full_name": "Areredify",
        "timestamp": 1588711746
    },
    {
        "content": "<p>this is the <a href=\"https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src/librustc_trait_selection/traits/fulfill.rs#L371-L420\" title=\"https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src/librustc_trait_selection/traits/fulfill.rs#L371-L420\">relevant rustc code</a></p>",
        "id": 196365494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711770
    },
    {
        "content": "<p>well so in rustc today</p>",
        "id": 196365509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711780
    },
    {
        "content": "<p>the NLL solver is responsible for handling higher-ranked things</p>",
        "id": 196365520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711787
    },
    {
        "content": "<p>so it kind of plays that \"simplify -&gt; solve regions\" role I described above</p>",
        "id": 196365589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711806
    },
    {
        "content": "<p>and I think for now we should just try to fit in there</p>",
        "id": 196365603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711814
    },
    {
        "content": "<p>I guess there is one bit of special-ness that we do today for type-outlives</p>",
        "id": 196365635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711830
    },
    {
        "content": "<p>if you have <code>for&lt;'a&gt; T: 'a</code></p>",
        "id": 196365658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711842
    },
    {
        "content": "<p>where <code>T</code> does not reference <code>'a</code></p>",
        "id": 196365694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711857
    },
    {
        "content": "<p>we convert that to <code>T: 'static</code></p>",
        "id": 196365702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711861
    },
    {
        "content": "<p>that would sort of \"fall out\" from the more general chalk scheme I was imagining, not sure how we want to handle it for now, perhaps with some hacky code, idk</p>",
        "id": 196365756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711885
    },
    {
        "content": "<p>(9 minutes left)</p>",
        "id": 196365790,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711904
    },
    {
        "content": "<p>(probably should switch to const stuff now)</p>",
        "id": 196365817,
        "sender_full_name": "Areredify",
        "timestamp": 1588711919
    },
    {
        "content": "<p>I think though the right dependencies are</p>\n<ul>\n<li>add region outlives goals that generate region outlives constraints</li>\n<li>use region outlives goals in unification to simplify things</li>\n<li>add type outlives goals and constraints (and don't address the for <code>for&lt;'a&gt; T: 'a</code> thing)</li>\n<li>connect to rustc</li>\n<li>consider how to solve the <code>for&lt;'a&gt;</code> thing :)</li>\n</ul>",
        "id": 196365892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711942
    },
    {
        "content": "<p>I'm going to make a list in the skill tree roughly like that</p>",
        "id": 196365917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588711957
    },
    {
        "content": "<p>Awesome</p>",
        "id": 196365936,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711966
    },
    {
        "content": "<p>We can discuss more async as needed</p>",
        "id": 196365971,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711978
    },
    {
        "content": "<p>Ok const</p>",
        "id": 196365991,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588711995
    },
    {
        "content": "<p>Quick summary?</p>",
        "id": 196366010,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588712006
    },
    {
        "content": "<p>From what I can tell, the problem/question is around whether we want a <code>Ty</code> for consts to stick around all the time?</p>",
        "id": 196366066,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588712034
    },
    {
        "content": "<p>filed  <em>extend chalk to include outlives goals</em> <a href=\"https://github.com/rust-lang-nursery/chalk/issues/435\" title=\"https://github.com/rust-lang-nursery/chalk/issues/435\">chalk#435</a>  btw</p>",
        "id": 196366265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196366066\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196366066\">said</a>:</p>\n<blockquote>\n<p>From what I can tell, the problem/question is around whether we want a <code>Ty</code> for consts to stick around all the time?</p>\n</blockquote>\n<p>and kind of \"where to put it\"</p>",
        "id": 196366294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712133
    },
    {
        "content": "<p>to see the problem, consider that <code>forall&lt;T&gt; { .. }</code> gives you all you need to know -- \"some type T\"</p>",
        "id": 196366341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712155
    },
    {
        "content": "<p>but for a constant, <code>forall&lt;const C&gt;</code> is maybe not enough</p>",
        "id": 196366366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712162
    },
    {
        "content": "<p>maybe you want <code>const C: usize</code></p>",
        "id": 196366408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712167
    },
    {
        "content": "<p>this \"extra information\"</p>",
        "id": 196366418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712171
    },
    {
        "content": "<p>if we don't include the type, then this pushes chalk (at least) to have the notion of \"some constant of some type\"</p>",
        "id": 196366452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712188
    },
    {
        "content": "<p>this actually..can kind of work out just fine, and it's elegant in the sense that everything works the same,</p>",
        "id": 196366485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712204
    },
    {
        "content": "<p>but it'd be weird for (say) rustc, depending how much we wind up sharing details,</p>",
        "id": 196366504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712212
    },
    {
        "content": "<p>in that rustc probably expects that if it sees an expression like <code>C</code>, it has the type <code>usize</code> (whereas in the way that chalk would be modeling things, it could have 0, 1, or N types...)</p>",
        "id": 196366557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712236
    },
    {
        "content": "<p>this is why <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span>, in their PR, extended <code>ParameterKind</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">ParameterKind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Type</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Lifetime</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span>: <span class=\"nc\">C</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196366649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712278
    },
    {
        "content": "<p>so it is always carrying that \"extra information\" along (the type)</p>",
        "id": 196366704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712288
    },
    {
        "content": "<p>Makes sense?</p>",
        "id": 196366827,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588712357
    },
    {
        "content": "<p>the key point seems to me to be that, whatever we do, <code>Binders</code> is going to need the type info. Currently <code>Binders</code> stores a <code>ParameterKind&lt;()&gt;</code>, so the approach that <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> took does make sense</p>",
        "id": 196366838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712365
    },
    {
        "content": "<p>something's bugging me though</p>",
        "id": 196366884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712385
    },
    {
        "content": "<p>I'm trying to put my finger on what it is</p>",
        "id": 196366974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712413
    },
    {
        "content": "<p>I mean I guess it's partly the \"non-analogous\" nature of the variants</p>",
        "id": 196366992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712420
    },
    {
        "content": "<p>it's also that we probably want some type that is the pair (Ty, C)</p>",
        "id": 196367011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712433
    },
    {
        "content": "<p>which is more how rustc has things setup</p>",
        "id": 196367031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712438
    },
    {
        "content": "<p>it may be that the <code>ParameterKind</code> enum just doesn't work out so well</p>",
        "id": 196367051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712446
    },
    {
        "content": "<p>and we should break to like, one type for use in <code>Binders</code> (which takes the role of <code>ParameterKind&lt;()&gt;</code>),</p>",
        "id": 196367105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712471
    },
    {
        "content": "<p>one type for use as <code>Parameter</code> (which I think we want anyway, for rustc interop, and I think it wants to be called <code>GenericArg</code>)</p>",
        "id": 196367139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712490
    },
    {
        "content": "<p>Right</p>",
        "id": 196367151,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588712500
    },
    {
        "content": "<p>and maybe some other type for <code>ParameterKind&lt;EnaVariable&gt;</code>, since apparently we use that</p>",
        "id": 196367159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712503
    },
    {
        "content": "<p>(although it may be that const inference variables can't share as much code?)</p>",
        "id": 196367198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712520
    },
    {
        "content": "<p>I haven't read these changes in the PR closely</p>",
        "id": 196367247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712528
    },
    {
        "content": "<p>since when I saw that enum I got too distracted ;) but now that I understand better what motivated it, I should re-read</p>",
        "id": 196367287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712553
    },
    {
        "content": "<p>There's also <code>CanonicalVarKind</code> for <code>ParameterKind&lt;UniverseIndex&gt;</code></p>",
        "id": 196367298,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588712559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196367198\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196367198\">said</a>:</p>\n<blockquote>\n<p>(although it may be that const inference variables can't share as much code?)</p>\n</blockquote>\n<p>They are basically the same, you just copy <code>ty</code>s around a lot</p>",
        "id": 196367318,
        "sender_full_name": "Areredify",
        "timestamp": 1588712572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196367298\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E05.2E05/near/196367298\">said</a>:</p>\n<blockquote>\n<p>There's also <code>CanonicalVarKind</code> for <code>ParameterKind&lt;UniverseIndex&gt;</code></p>\n</blockquote>\n<p>yeah, and that is something we probably need to change too</p>",
        "id": 196367341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712590
    },
    {
        "content": "<p>at least, in rustc, we also have info like \"placeholder\" and I think it makes sense for chalk</p>",
        "id": 196367371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712603
    },
    {
        "content": "<p>it's not \"just\" a universe index</p>",
        "id": 196367382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712611
    },
    {
        "content": "<p>I'm also reminded of int/float variables, that fit in this..somehow</p>",
        "id": 196367393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712618
    },
    {
        "content": "<p>(also it's 5:03, so if anyone has to leave)</p>",
        "id": 196367429,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588712638
    },
    {
        "content": "<p>I should run soon-ish</p>",
        "id": 196367480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712649
    },
    {
        "content": "<p>I am not sure what the 'conclusion' is here</p>",
        "id": 196367502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712661
    },
    {
        "content": "<p>Don't think we have one</p>",
        "id": 196367519,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588712670
    },
    {
        "content": "<p>I think it would be ok to land the const generics PR in one form, also, and consider</p>",
        "id": 196367531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712676
    },
    {
        "content": "<p>depends how intrusive things feel</p>",
        "id": 196367543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712682
    },
    {
        "content": "<p>(I'm not sure if there are bits we can land first?)</p>",
        "id": 196367559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712691
    },
    {
        "content": "<p>(I'm also still unsure of what <code>CanonicalVarKind::Placeholder*</code> means)</p>",
        "id": 196367577,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588712700
    },
    {
        "content": "<p>I'll look over the const PR again</p>",
        "id": 196367621,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588712726
    },
    {
        "content": "<p>and think a bit more about it</p>",
        "id": 196367645,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588712740
    },
    {
        "content": "<p>it means a placeholder :)</p>",
        "id": 196367768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712781
    },
    {
        "content": "<p>i.e., if you have <code>Implemented(!U1_1: Foo)</code>, in chalk we just pass <code>U1_1</code> through--</p>",
        "id": 196368051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712824
    },
    {
        "content": "<p>Well I guess...why is it a <em>Binder</em></p>",
        "id": 196368060,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588712828
    },
    {
        "content": "<p>actually we might normalize the <em>universes</em> but not the index</p>",
        "id": 196368067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712832
    },
    {
        "content": "<p>why wouldn't it be?</p>",
        "id": 196368103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712843
    },
    {
        "content": "<p>in rustc, we replace that with <code>canonical&lt;!U1&gt; { ^0: Foo }</code>, effectively</p>",
        "id": 196368149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712866
    },
    {
        "content": "<p>i.e., \"some placeholder in U1\"</p>",
        "id": 196368163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712874
    },
    {
        "content": "<p>we actually <em>don't</em> normalize the universes, but we should ..</p>",
        "id": 196368198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712882
    },
    {
        "content": "<p>this is kind of good in rustc because if you had <code>Implemented(!U1_1: Foo&lt;!U1_2&gt;)</code></p>",
        "id": 196368259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712899
    },
    {
        "content": "<p>and</p>",
        "id": 196368264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712902
    },
    {
        "content": "<p><code>Implemented(!U1_1: Foo&lt;!U1_3&gt;)</code></p>",
        "id": 196368287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712915
    },
    {
        "content": "<p>they have the same canonical form</p>",
        "id": 196368297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712918
    },
    {
        "content": "<p>but in chalk they don't</p>",
        "id": 196368304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712921
    },
    {
        "content": "<p>but indeed they are equivalent</p>",
        "id": 196368311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712923
    },
    {
        "content": "<p>i.e, the only thing that matters is \"two distinct placeholders in the same universe\"</p>",
        "id": 196368333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712937
    },
    {
        "content": "<p>it doesn't matter what index they have</p>",
        "id": 196368336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588712940
    },
    {
        "content": "<p>hmm</p>",
        "id": 196368364,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588712954
    },
    {
        "content": "<p>I updated the <a href=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\" title=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\">skill tree</a> -- though it may not have re-rendered yet</p>",
        "id": 196370677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588714090
    }
]