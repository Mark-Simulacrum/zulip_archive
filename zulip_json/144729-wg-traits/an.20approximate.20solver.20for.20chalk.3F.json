[
    {
        "content": "<p>One of the things that <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> and I were discussing -- basically, maybe it would make sense to build something more like rustc's engine, but operating on lowered chalk predicates? rustc's engine is quirky but of course it works \"well enough\" for rustc today, and it might make it easier to adopt chalk into rustc sooner rather than later.</p>\n<p>Following up from that, I was pondering another possible design, one closer to the older 'recursive' solver that chalk used to have before the SLG solver. In short, it was always looking for a <em>unique</em> solution, unlike the existing chalk-engine solver that is based around finding exact solutions (and then having an outer layer that stops asking for more answers). I do remember we had some problems where the recursive solver wasn't strong enough to handle some cases, though I can't remember exactly what (<span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> maybe remembers). </p>\n<p>Anyway, I think that one of these two things might make sense as a way to get chalk integrated \"sooner rather than later\". But I think this is something to consider more as a second step, once we've integrated the chalk-solve crate into rustc.</p>",
        "id": 184952568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578342186
    },
    {
        "content": "<blockquote>\n<p>build something more like rustc's engine, but operating on lowered chalk predicates?</p>\n</blockquote>\n<p>Can we refactor existing solver from within such that it operates on the said input format?</p>",
        "id": 184952815,
        "sender_full_name": "matklad",
        "timestamp": 1578342364
    },
    {
        "content": "<p>(existing rustc solver that is)</p>",
        "id": 184952825,
        "sender_full_name": "matklad",
        "timestamp": 1578342374
    },
    {
        "content": "<p>This has a benefit of having only two parallel solvers, and not three, at any given point in time)</p>",
        "id": 184952871,
        "sender_full_name": "matklad",
        "timestamp": 1578342402
    },
    {
        "content": "<p>I wondered about that path</p>",
        "id": 184953375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578342785
    },
    {
        "content": "<p>I think it's roughly equivalent</p>",
        "id": 184953389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578342795
    },
    {
        "content": "<p>That is, I think the goal would be to build up the solver in chalk and then asap remove the one from rustc</p>",
        "id": 184953412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578342820
    },
    {
        "content": "<p>Well I guess the question is can we do it <em>gradually</em> within rustc</p>",
        "id": 184953432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578342827
    },
    {
        "content": "<p>I don't see how, but maybe</p>",
        "id": 184953438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578342830
    },
    {
        "content": "<p>Really the most important thing here -- probably -- is to figure out the caching questions for 'lowering'</p>",
        "id": 184953489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578342848
    },
    {
        "content": "<p>Also, a related question:</p>",
        "id": 184953505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578342864
    },
    {
        "content": "<p>I've been describing a design that merges chalk types with rust types by having two parallel definitions that will eventually merge</p>",
        "id": 184953524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578342883
    },
    {
        "content": "<p>But this could be a performance hazard, and I guess the goal should probably be to merge the type definitions sooner rather than later</p>",
        "id": 184953552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578342906
    },
    {
        "content": "<p>Probably \"just\" rote work within rustc</p>",
        "id": 184953566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578342918
    },
    {
        "content": "<p>(<em>That</em> could be done gradually, though)</p>",
        "id": 184953588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578342933
    },
    {
        "content": "<p>i.e., we could gradually refactor rustc's enum until it basically matches the chalk enum</p>",
        "id": 184953608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578342956
    },
    {
        "content": "<p>which would probably be good, since it might inform whether chalk's enum has the right set of variants (in particular, I think we might want to extract the integral / floating point types out, because of the way that rustc's integer literals work)</p>",
        "id": 184953688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578342987
    }
]