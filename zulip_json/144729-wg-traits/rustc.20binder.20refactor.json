[
    {
        "content": "<p>Well, I'm down a rabbit hole</p>",
        "id": 212328935,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601917772
    },
    {
        "content": "<p>So, I tried to add a <code>'tcx List&lt;BinderVariableKind&gt;</code> field to <code>Binder</code></p>",
        "id": 212328989,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601917799
    },
    {
        "content": "<p>So, I have to add a new <code>'tcx</code> param</p>",
        "id": 212329055,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601917814
    },
    {
        "content": "<p>well, that seems to have broken hashing related stuff</p>",
        "id": 212329087,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601917834
    },
    {
        "content": "<p>I'm not quite sure if all the holes I've plugged have been right</p>",
        "id": 212329127,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601917864
    },
    {
        "content": "<p>But, it's essentially let me to this function: <a href=\"https://github.com/rust-lang/rust/blob/f317a93d4d326442680eaeb78c22eece739433c7/compiler/rustc_middle/src/ich/impls_ty.rs#L136\">https://github.com/rust-lang/rust/blob/f317a93d4d326442680eaeb78c22eece739433c7/compiler/rustc_middle/src/ich/impls_ty.rs#L136</a></p>",
        "id": 212329169,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601917892
    },
    {
        "content": "<p>That the <code>'tcx</code> there can't escape the closure</p>",
        "id": 212329200,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601917912
    },
    {
        "content": "<p>Because I had to add a <code>'tcx: '__ctx</code> (technically all lifetimes on the struct outlive the '__ctx) here: <a href=\"https://github.com/rust-lang/rust/blob/f317a93d4d326442680eaeb78c22eece739433c7/compiler/rustc_macros/src/hash_stable.rs#L92\">https://github.com/rust-lang/rust/blob/f317a93d4d326442680eaeb78c22eece739433c7/compiler/rustc_macros/src/hash_stable.rs#L92</a></p>",
        "id": 212329381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601918007
    },
    {
        "content": "<p>Which is probably not the right thing</p>",
        "id": 212329392,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601918014
    },
    {
        "content": "<p>But, if I don't add that, I get errors like:</p>\n<div class=\"codehilite\"><pre><span></span><code>1178 |   #[derive(HashStable, TypeFoldable)]\n     |            ^^^^^^^^^^\n     |            |\n     |            lifetime `&#39;__ctx` defined here\n     |            argument requires that `&#39;tcx` must outlive `&#39;__ctx`\n     |            in this macro invocation\n1179 |   pub struct FnSig&lt;&#39;tcx&gt; {\n     |                    ---- lifetime `&#39;tcx` defined here\n</code></pre></div>",
        "id": 212329787,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601918205
    },
    {
        "content": "<p>one thing</p>",
        "id": 212478877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602015020
    },
    {
        "content": "<p>in chalk we have the <code>HasInterner</code> trait partly for this reason</p>",
        "id": 212478905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602015030
    },
    {
        "content": "<p>I think it's important that it is <code>Binder&lt;Ty&lt;'tcx&gt;&gt;</code> and not <code>Binder&lt;'tcx, Ty&lt;'tcx&gt;&gt;</code></p>",
        "id": 212478926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602015041
    },
    {
        "content": "<p>or whatever</p>",
        "id": 212478931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602015044
    },
    {
        "content": "<p>I'm not sure if that in any way adresses your <em>actual</em> problem</p>",
        "id": 212478965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602015059
    },
    {
        "content": "<p>Well, I fixed the actual problem</p>",
        "id": 212479237,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602015194
    },
    {
        "content": "<p>But I had to make it <code>Binder&lt;'tcx, Ty&lt;'tcx&gt;&gt;</code></p>",
        "id": 212479254,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602015205
    },
    {
        "content": "<p>Since I'm storing a <code>&amp;'tcx List&lt;...&gt;</code></p>",
        "id": 212479290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602015219
    },
    {
        "content": "<p>But yeah, <code>HasInterner</code> would be good</p>",
        "id": 212479415,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602015267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any thoughts on: <a href=\"https://github.com/rust-lang/rust/issues/77685\">#77685</a></p>",
        "id": 213087672,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602537627
    },
    {
        "content": "<p>(don't mind the error, I have to fix that)</p>",
        "id": 213087679,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602537634
    },
    {
        "content": "<p>particularly: <a href=\"https://github.com/rust-lang/rust/pull/77685#issuecomment-705675057\">https://github.com/rust-lang/rust/pull/77685#issuecomment-705675057</a></p>",
        "id": 213087745,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602537687
    },
    {
        "content": "<p>looking now</p>",
        "id": 213087855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602537775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> left my thoughts</p>",
        "id": 213089222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602538875
    },
    {
        "content": "<p>I saw, left a response to your review</p>",
        "id": 213089533,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602539152
    },
    {
        "content": "<p>I'd be curious <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> <a href=\"https://github.com/rust-lang/rust/pull/77685#issuecomment-707360274\">what you think about this</a>. I can imagine an argument of \"sounds nice in theory but doesn't really seem to make code that much easier to read in practice\"</p>",
        "id": 213404990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602757448
    },
    {
        "content": "<p>it does seem nice in theory <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 213429849,
        "sender_full_name": "lcnr",
        "timestamp": 1602770587
    },
    {
        "content": "<p>I think using something like <code>y.with_binders_of(&amp;x)</code> is useful and we can even <code>debug_assert</code> that this is correct afaict</p>",
        "id": 213430097,
        "sender_full_name": "lcnr",
        "timestamp": 1602770680
    },
    {
        "content": "<p>So I think that if we use a new method for this which does check that we actually keep the same bound vars I think that this change is good even if we never want to store the number of bound vars in the binder itself</p>",
        "id": 213430472,
        "sender_full_name": "lcnr",
        "timestamp": 1602770826
    },
    {
        "content": "<p>So, the things is, we don't know what the bound vars actually are. And, short of walking the type and collecting them, we can't. Assuming that things work out perf wise and such, we <em>will</em>. So there's nothing to debug assert.</p>",
        "id": 213453378,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602780215
    },
    {
        "content": "<p>My only concern with <code>y.with_binders(&amp;x)</code> is that we would probably do that with a trait, and then we have to <code>use</code> the trait everywhere</p>",
        "id": 213453568,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602780303
    },
    {
        "content": "<p>so otherwise <code>ty::Binder::bind_with_binders(&amp;value).of(&amp;original_value)</code></p>",
        "id": 213466887,
        "sender_full_name": "lcnr",
        "timestamp": 1602786003
    },
    {
        "content": "<p>or <code>original_values.use_binder_for(result)</code></p>",
        "id": 213466931,
        "sender_full_name": "lcnr",
        "timestamp": 1602786018
    },
    {
        "content": "<blockquote>\n<p>short of walking the type and collecting them</p>\n</blockquote>\n<p>yeah, that's what I would do as a debug assertion, not sure what the perf impact for this would be though</p>",
        "id": 213467008,
        "sender_full_name": "lcnr",
        "timestamp": 1602786065
    },
    {
        "content": "<p>I do think it would be nice if we were able to just do that</p>",
        "id": 213467076,
        "sender_full_name": "lcnr",
        "timestamp": 1602786104
    },
    {
        "content": "<p>we may even add the amount of unbound vars to <code>TyS</code> or something like this to speed this up</p>",
        "id": 213467185,
        "sender_full_name": "lcnr",
        "timestamp": 1602786147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/213466887\">said</a>:</p>\n<blockquote>\n<p>so otherwise <code>ty::Binder::bind_with_binders(&amp;value).of(&amp;original_value)</code></p>\n</blockquote>\n<p>That is imo much worse the <code>original_value.map_bound(|| value)</code></p>",
        "id": 213468130,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602786587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/213466931\">said</a>:</p>\n<blockquote>\n<p>or <code>original_values.use_binder_for(result)</code></p>\n</blockquote>\n<p>Which this is, other than name</p>",
        "id": 213468203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602786612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/213467008\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>short of walking the type and collecting them</p>\n</blockquote>\n<p>yeah, that's what I would do as a debug assertion, not sure what the perf impact for this would be though</p>\n</blockquote>\n<p>This is more or less what I originally did in my other PR. Perf was <em>really</em> bad.</p>",
        "id": 213468288,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602786655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/213467185\">said</a>:</p>\n<blockquote>\n<p>we may even add the amount of unbound vars to <code>TyS</code> or something like this to speed this up</p>\n</blockquote>\n<p>I mean, you theoretically could optimize this based on the <code>has_escaping_vars</code> flag</p>",
        "id": 213468455,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602786725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/213468203\">said</a>:</p>\n<blockquote>\n<p>Which this is, other than name</p>\n</blockquote>\n<p>I think that the point is that using a distinct name is a good idea</p>",
        "id": 213469638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602787302
    },
    {
        "content": "<p>(which I agree with)</p>",
        "id": 213469650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602787306
    },
    {
        "content": "<p>I'm not sure I like the name <code>use_binder_for</code>, but some distinct name makes sense; it's kind of nonobvious what's going on with <code>map_bound_ref</code>, kind of like when people use <code>foo.all(c =&gt; ...)</code> in JS to do a for loop.</p>",
        "id": 213469758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602787340
    },
    {
        "content": "<p>I'm trying to brainstorm some names now</p>",
        "id": 213469801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602787359
    },
    {
        "content": "<p><code>copy_binders</code></p>",
        "id": 213469822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602787365
    },
    {
        "content": "<p>I guess <code>use_binders_for</code> or something is not terrible</p>",
        "id": 213469843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602787381
    },
    {
        "content": "<p>I mean, I kind of prefer just <code>map_bound</code></p>",
        "id": 213470279,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602787603
    },
    {
        "content": "<p>But I could also imagine that we could do: <code>original_value.binders().bind(value)</code></p>",
        "id": 213470379,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602787653
    },
    {
        "content": "<p>Where <code>binders()</code> returns a ZST</p>",
        "id": 213470407,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602787666
    },
    {
        "content": "<p>You could also imagine this could extend to like chalk, where <code>binders()</code> would return <code>VariableKinds</code> and then there can also be a <code>bind</code> function</p>",
        "id": 213470561,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602787734
    },
    {
        "content": "<p>In chalk, it would look like:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;I: Interner&gt; VariableKinds&lt;I&gt; {\n  fn bind&lt;T&gt;(self, value: T) -&gt; Binders&lt;T&gt;  {\n    Binders::new(self, value)\n  }\n}\n</code></pre></div>",
        "id": 213470851,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602787870
    },
    {
        "content": "<p><code>old.binders().bind(value)</code> does look quite nice to me</p>",
        "id": 213472098,
        "sender_full_name": "lcnr",
        "timestamp": 1602788309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/213468288\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/213467008\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>short of walking the type and collecting them</p>\n</blockquote>\n<p>yeah, that's what I would do as a debug assertion, not sure what the perf impact for this would be though</p>\n</blockquote>\n<p>This is more or less what I originally did in my other PR. Perf was <em>really</em> bad.</p>\n</blockquote>\n<p>what level of <em>really</em> bad are we talking about here?</p>",
        "id": 213472141,
        "sender_full_name": "lcnr",
        "timestamp": 1602788333
    },
    {
        "content": "<p>i am not too sure about debug builds, but I personally feel that about a 10 % perf hit is ok if this is something we care about. Otherwise it might make sense to put this behind a feature flag or something</p>",
        "id": 213472313,
        "sender_full_name": "lcnr",
        "timestamp": 1602788418
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/_Y4WMUwRQz-CFXPuthBsoePE/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/_Y4WMUwRQz-CFXPuthBsoePE/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/_Y4WMUwRQz-CFXPuthBsoePE/image.png\"></a></div>",
        "id": 213472607,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788538
    },
    {
        "content": "<p>(<a href=\"https://perf.rust-lang.org/compare.html?start=285fc7d704fcdd7b2a37d475d04d5d955490e000&amp;end=e3ccacbe714c3e189a4895651ada1f854960ddf8\">https://perf.rust-lang.org/compare.html?start=285fc7d704fcdd7b2a37d475d04d5d955490e000&amp;end=e3ccacbe714c3e189a4895651ada1f854960ddf8</a>)</p>",
        "id": 213472628,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788547
    },
    {
        "content": "<p>ok</p>",
        "id": 213472694,
        "sender_full_name": "lcnr",
        "timestamp": 1602788573
    },
    {
        "content": "<p>ok</p>",
        "id": 213472701,
        "sender_full_name": "lcnr",
        "timestamp": 1602788575
    },
    {
        "content": "<p>For the other tests, it wasn't <em>that</em> bad</p>",
        "id": 213472722,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788583
    },
    {
        "content": "<p>Most were 10% or less</p>",
        "id": 213472735,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788588
    },
    {
        "content": "<p>But this was also just about the most naive way to do this</p>",
        "id": 213472767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788602
    },
    {
        "content": "<p>yeah, we should be able to only do a shallow inspection here</p>",
        "id": 213472779,
        "sender_full_name": "lcnr",
        "timestamp": 1602788609
    },
    {
        "content": "<p>so that we can stop at <code>Ty</code> and <code>Predicate</code></p>",
        "id": 213472831,
        "sender_full_name": "lcnr",
        "timestamp": 1602788628
    },
    {
        "content": "<p>which should be the only deeply nested things we use</p>",
        "id": 213472852,
        "sender_full_name": "lcnr",
        "timestamp": 1602788639
    },
    {
        "content": "<p>and already cache some stuff</p>",
        "id": 213472926,
        "sender_full_name": "lcnr",
        "timestamp": 1602788658
    },
    {
        "content": "<p>Well, if a <code>Ty</code> does have escaping bound vars, we have to descend</p>",
        "id": 213472941,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788664
    },
    {
        "content": "<p>but not all <em>parts</em> of the <code>Ty</code> might</p>",
        "id": 213472960,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788678
    },
    {
        "content": "<p>The only other bit that makes debug asserting difficult</p>",
        "id": 213472988,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788694
    },
    {
        "content": "<p>is that there <em>are</em> times were a type may have <code>^0</code> and <code>^2</code></p>",
        "id": 213473048,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788719
    },
    {
        "content": "<p>And skip one</p>",
        "id": 213473058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788723
    },
    {
        "content": "<p>And, by that logic, it's also completely that a <code>Ty</code> may not name the <em>last</em> bound var</p>",
        "id": 213473193,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788775
    },
    {
        "content": "<p>But then on rebind it could</p>",
        "id": 213473202,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788784
    },
    {
        "content": "<p>In practice, I don't know how often that actually happens</p>",
        "id": 213473223,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788793
    },
    {
        "content": "<p>(last time I worked on that branch, that's about where I had to stop)</p>",
        "id": 213473256,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/213472098\">said</a>:</p>\n<blockquote>\n<p><code>old.binders().bind(value)</code> does look quite nice to me</p>\n</blockquote>\n<p>For now, I also kind of like this. If everyone is on board, I can update the PR to use this</p>",
        "id": 213473311,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788851
    },
    {
        "content": "<p>And we can postpone the debug assert to another PR</p>",
        "id": 213473330,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602788863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/213473048\">said</a>:</p>\n<blockquote>\n<p>is that there <em>are</em> times were a type may have <code>^0</code> and <code>^2</code></p>\n</blockquote>\n<p>just looked a bit at the current approach in chalk and <a href=\"#narrow/stream/144729-wg-traits/topic/extending.20.60Binder.60.20in.20rustc.20to.20include.20.23.20of.20bound.20variables\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/extending.20.60Binder.60.20in.20rustc.20to.20include.20.23.20of.20bound.20variables</a> and think that I now actually understand both the goal and this concern.</p>",
        "id": 213475966,
        "sender_full_name": "lcnr",
        "timestamp": 1602790120
    },
    {
        "content": "<p>so yeah, I think that going ahead with <code>old.binders().bind(value)</code> is good. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are you also on board here?</p>",
        "id": 213476057,
        "sender_full_name": "lcnr",
        "timestamp": 1602790156
    },
    {
        "content": "<p>yeah I like that well enough</p>",
        "id": 213489754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602797040
    },
    {
        "content": "<p>\"cute\"</p>",
        "id": 213489773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602797043
    },
    {
        "content": "<p>I'm not sure I'd bother with the <code>binders().bind</code> but it seems \"ok\"</p>",
        "id": 213489825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602797062
    },
    {
        "content": "<p>vs <code>.rebind()</code> or something?</p>",
        "id": 213489833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602797075
    },
    {
        "content": "<p>or even just <code>foo.bind(bar)</code></p>",
        "id": 213489877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602797106
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> <code>binders</code> could return a <code>Binder&lt;()&gt;</code></p>",
        "id": 213489900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602797125
    },
    {
        "content": "<p>I like <code>.binders().bind()</code> better than <code>map_bound_ref</code>, which I think is not very clear</p>",
        "id": 213489931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602797152
    },
    {
        "content": "<p>I mean, if <code>binders</code> returned <code>Binder&lt;()&gt;</code>, then we're still back to \"what name should we pick\"</p>",
        "id": 213490047,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602797209
    },
    {
        "content": "<p>i.e. what <code>map_bound_ref</code> is</p>",
        "id": 213490054,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602797217
    },
    {
        "content": "<p>(using type ascription here for clarity): <code>(old: Binder&lt;T&gt;).rebind(value)</code> could work</p>",
        "id": 213490190,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602797285
    },
    {
        "content": "<p>So far, I prefer <code>old.binders().bind(value)</code> or just <code>old.rebind(value)</code></p>",
        "id": 213490373,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602797412
    },
    {
        "content": "<p>Or, if we like having <code>binders()</code> return <code>Binder&lt;()&gt;</code>, then <code>old.binders().rebind(value)</code> is also valid</p>",
        "id": 213490409,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602797443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/213490047\">said</a>:</p>\n<blockquote>\n<p>I mean, if <code>binders</code> returned <code>Binder&lt;()&gt;</code>, then we're still back to \"what name should we pick\"</p>\n</blockquote>\n<p>I just imagined <code>bind</code> might be offered only on <code>Binders&lt;()&gt;</code>, but it's kind of silly</p>",
        "id": 213491995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602798319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/213490373\">said</a>:</p>\n<blockquote>\n<p>So far, I prefer <code>old.binders().bind(value)</code> or just <code>old.rebind(value)</code></p>\n</blockquote>\n<p>agreed</p>",
        "id": 213492011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602798332
    },
    {
        "content": "<p>I feel like the former is cute but might feel clunky after a while</p>",
        "id": 213492030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602798342
    },
    {
        "content": "<p>Okay so <code>old.rebind(value)</code> it is</p>",
        "id": 213492897,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602798822
    },
    {
        "content": "<p>yeah, looks fine to me <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 213535714,
        "sender_full_name": "lcnr",
        "timestamp": 1602839322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>  PR is ready (<a href=\"https://github.com/rust-lang/rust/issues/77685\">#77685</a>)</p>",
        "id": 213595307,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602871876
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> gj</p>",
        "id": 213600263,
        "sender_full_name": "lcnr",
        "timestamp": 1602874479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> updated for your review</p>",
        "id": 213602674,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602875832
    },
    {
        "content": "<p>So, whelp rebasing this on master has <em>worse</em> perf results from before</p>",
        "id": 213715671,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603041062
    },
    {
        "content": "<p>Importantly, there was a change between the last perf run and now regarding cyclic tys, so I don't know if that's the problem</p>",
        "id": 213715692,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603041100
    },
    {
        "content": "<p>(I ran into that issue while rebasing at some point, but thought I had covered that)</p>",
        "id": 213715745,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603041128
    },
    {
        "content": "<p>there are cyclic types?</p>",
        "id": 213715756,
        "sender_full_name": "lcnr",
        "timestamp": 1603041150
    },
    {
        "content": "<p>But also, there has been the projection bounds PR that got merged</p>",
        "id": 213715774,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603041198
    },
    {
        "content": "<p>Well, cyclic type errors</p>",
        "id": 213715778,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603041207
    },
    {
        "content": "<p>let me find that PR</p>",
        "id": 213715780,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603041212
    },
    {
        "content": "<p>Sorry, type length: <a href=\"https://github.com/rust-lang/rust/issues/76843\">#76843</a></p>",
        "id": 213715842,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603041283
    },
    {
        "content": "<p>From this, I had to add <code>Miniset</code> to the <code>CountBoundVars</code> struct</p>",
        "id": 213715883,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603041362
    },
    {
        "content": "<p>Wait....did I backport that change to this commit...</p>",
        "id": 213715918,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603041373
    },
    {
        "content": "<p>are you sure that <a href=\"https://github.com/rust-lang/rust/issues/76843\">#76843</a> is the right PR? can't see how that one's related rn</p>",
        "id": 213715952,
        "sender_full_name": "lcnr",
        "timestamp": 1603041425
    },
    {
        "content": "<p>maybe that's not it</p>",
        "id": 213715963,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603041471
    },
    {
        "content": "<p>it was related, though</p>",
        "id": 213715967,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603041475
    },
    {
        "content": "<p>It was: <a href=\"https://github.com/rust-lang/rust/issues/72412\">#72412</a></p>",
        "id": 213716068,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603041597
    },
    {
        "content": "<p>And I <em>didn't</em> backport my <code>Miniset</code> fix, so I guess that makes sense why it was taking so long</p>",
        "id": 213716139,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603041687
    },
    {
        "content": "<p>annnnd....I can't find the changes I had made</p>",
        "id": 213716513,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603042222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-27/near/214765275\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-27/near/214763401\">said</a>:</p>\n<blockquote>\n<h1>Refactor rustc’s Binder to track bound vars</h1>\n</blockquote>\n<p>that's something I am quite interested in, so if you ever need another opinion or pair of eyes here please notify me</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/compare/master...jackh726:binder-refactor-tcx-rebase2\">https://github.com/rust-lang/rust/compare/master...jackh726:binder-refactor-tcx-rebase2</a> is current status</p>",
        "id": 214766158,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603833878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> ^</p>",
        "id": 214766170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603833888
    },
    {
        "content": "<p>Forgive the terrible branch name, obviously gone through a rebase or two</p>",
        "id": 214766202,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603833913
    },
    {
        "content": "<p>I'm currently just going through the remaining <code>Binder::bind</code>s and either: a) changing it to <code>Binder::dummy</code> when it probably should be or b) Explicitly giving a <code>List&lt;BoundVariableKind&gt;</code></p>",
        "id": 214766329,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603833980
    },
    {
        "content": "<p>Or I guess c) making sure we're probably passing around a <code>Binder</code> wrapper</p>",
        "id": 214766368,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603834006
    },
    {
        "content": "<p>So turns out <a href=\"https://github.com/rust-lang/rust/blob/0fb00251a578018430bad6687ff74e14031d2a07/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1691\">this</a> comment is perhaps no so correct when you think about out <code>Binder</code> being more than just a newtype wrapper</p>",
        "id": 215673244,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604554944
    },
    {
        "content": "<p>So, current status here:</p>",
        "id": 216644163,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605288433
    },
    {
        "content": "<p>Basically, been trying to make <em>all</em> late bound regions in a types be anon, with the <code>ReNamed</code>/<code>ReAnon</code>/<code>ReEnv</code> info being stored in the binders</p>",
        "id": 216644312,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605288491
    },
    {
        "content": "<p><code>ReEnv</code> was actually really easy</p>",
        "id": 216644340,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605288508
    },
    {
        "content": "<p><code>ReAnon</code>/<code>ReNamed</code> are harder.</p>",
        "id": 216644392,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605288537
    },
    {
        "content": "<p>Since these are generated by <code>AstConv</code></p>",
        "id": 216644419,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605288550
    },
    {
        "content": "<p>by essentially calling <code>AstConv::ast_ty_to_ty</code> and then <code>Binder::bind</code> over that</p>",
        "id": 216644478,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605288584
    },
    {
        "content": "<p>The problem, is that currently it seems like there isn't sort of a single unified place that the list of binders are created</p>",
        "id": 216644588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605288628
    },
    {
        "content": "<p>But I'm <em>really</em> not familiar with this code.</p>",
        "id": 216644640,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605288654
    },
    {
        "content": "<p>So, could use some guidance. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 216644660,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605288662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> yeah :)</p>",
        "id": 216726745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357398
    },
    {
        "content": "<p>hmm</p>",
        "id": 216726748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357400
    },
    {
        "content": "<p>this code is kind of a mess</p>",
        "id": 216726765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> how about we schedule an hour on monday to talk over it?</p>",
        "id": 216726786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357435
    },
    {
        "content": "<p>we probably want to start in <code>resolve_lifetimes</code></p>",
        "id": 216726805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357456
    },
    {
        "content": "<p>I'm good to schedule some time on Monday. Anytime is good for me.</p>",
        "id": 216740895,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605375896
    },
    {
        "content": "<p>how about <time datetime=\"2020-11-16T18:00:00Z\">2020-11-16T13:00:00-05:00</time> ?</p>",
        "id": 216788387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605441438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 216788388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605441444
    },
    {
        "content": "<p>sent an invite, put on the compiler team calendar</p>",
        "id": 216788455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605441548
    },
    {
        "content": "<p>I attached a zoom room though maybe this would be nice over zulip for accessibility of others</p>",
        "id": 216788458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605441560
    },
    {
        "content": "<p>Works for me</p>",
        "id": 216799411,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605455754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> still good for meeting?</p>",
        "id": 216907830,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605549577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> yep but i'm making some coffee, gimme 5 minutes</p>",
        "id": 216908560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605549847
    },
    {
        "content": "<p>no problem, still want to do zoom?</p>",
        "id": 216908607,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605549867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ok I'm here</p>",
        "id": 216909403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605550209
    },
    {
        "content": "<p>zoom or zulip is fine</p>",
        "id": 216909409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605550211
    },
    {
        "content": "<p>maybe zoom</p>",
        "id": 216909421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605550216
    },
    {
        "content": "<p>Let's do zoom</p>",
        "id": 216909429,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605550220
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...jackh726:binder-refactor-tcx-rebase2\">https://github.com/rust-lang/rust/compare/master...jackh726:binder-refactor-tcx-rebase2</a></p>",
        "id": 216909517,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605550269
    },
    {
        "content": "<p><a href=\"https://github.com/jackh726/rust/commit/8ad856451402255b25cb83586890cda528c650b7\">https://github.com/jackh726/rust/commit/8ad856451402255b25cb83586890cda528c650b7</a></p>",
        "id": 216909535,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605550278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> around?</p>",
        "id": 217457281,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605905558
    },
    {
        "content": "<p>So, <code>resolve_lifetimes</code> visit closures, right?</p>",
        "id": 217457311,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605905582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'm sort of around</p>",
        "id": 217457678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605905833
    },
    {
        "content": "<p>it does visit closures</p>",
        "id": 217457679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605905836
    },
    {
        "content": "<p>I guess, let me back up and say: turns out we can't just walk the e.g. <code>FnSig</code> later to get late bound vars</p>",
        "id": 217457731,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605905880
    },
    {
        "content": "<p>since you can have something like <code>fn foo&lt;'a&gt;()</code> where <code>'a</code> is unused</p>",
        "id": 217457783,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605905901
    },
    {
        "content": "<p>So, been basically making <code>resolve_lifetimes</code> try to store the bound vars</p>",
        "id": 217457811,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605905929
    },
    {
        "content": "<p>I'm like 70% there</p>",
        "id": 217457818,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605905935
    },
    {
        "content": "<p>But, at a point where running into issues compiling this: <a href=\"https://github.com/rust-lang/rust/blob/593fe977a77ad5a7aec23c6cb0f86a3470221670/library/core/src/iter/adapters/mod.rs#L246\">https://github.com/rust-lang/rust/blob/593fe977a77ad5a7aec23c6cb0f86a3470221670/library/core/src/iter/adapters/mod.rs#L246</a></p>",
        "id": 217457855,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605905967
    },
    {
        "content": "<p>Because it asks \"what are the binders for that inner closure\"</p>",
        "id": 217457884,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605905990
    },
    {
        "content": "<p>and that didn't get stored</p>",
        "id": 217457905,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605906001
    },
    {
        "content": "<p>I <code>RUSTC_LOG</code>ed it and it enters the <code>Body</code> and then exits it</p>",
        "id": 217458028,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605906054
    },
    {
        "content": "<p>without any other scopes, so investigating</p>",
        "id": 217458038,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605906062
    },
    {
        "content": "<p>but yeah, looking through the code, it looks like it <em>should</em> be visiting that</p>",
        "id": 217458210,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605906149
    },
    {
        "content": "<p>Oh hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you're on :)</p>",
        "id": 217515903,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605988186
    },
    {
        "content": "<p>Figured this out</p>",
        "id": 217515904,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605988192
    },
    {
        "content": "<p>So, yeah, closures are visited, but <em>aren't</em> wrapped in a <code>Binder</code> scope</p>",
        "id": 217515949,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605988212
    },
    {
        "content": "<p>Bleh. So, I thought I could jump to just making <code>ReLateBound</code> store a <code>u32</code> instead of <code>BoundRegion</code>, but let's just say I was wrong</p>",
        "id": 217717979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606198592
    },
    {
        "content": "<p>Basically two different problems:</p>",
        "id": 217717980,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606198601
    },
    {
        "content": "<p>1) There are non-trivial amount of cases where rustc tries to print a <code>Ty</code> and there's a late-bound region in there</p>",
        "id": 217718007,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606198664
    },
    {
        "content": "<p>I <em>expect</em> that eventually this can be solved by either creating like a <code>PrettyTy</code> or something. Or by just being a little more careful with making sure that if a type may have late bound vars, we also make sure we're clear <em>where</em> that comes from</p>",
        "id": 217718065,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606198743
    },
    {
        "content": "<p>(in pretty-printing code)</p>",
        "id": 217718075,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606198755
    },
    {
        "content": "<p>If this alone was a problem, I could deal, but it's not because....</p>",
        "id": 217718083,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606198777
    },
    {
        "content": "<p>2) I ended up making <code>BoundRegion</code> be similar to <code>BoundTy</code> where there is a <code>var: BoundVar</code> and <code>kind: BoundRegionKind</code> (which has <code>BrAnon</code>/<code>BrNamed</code>/<code>BrEnv</code>), and well, this combined with some extra debug assertions have shown that there are <em>many</em> places where <code>Binder::bind</code>s are hiding \"sharing\" of bound var indices</p>",
        "id": 217718182,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606198910
    },
    {
        "content": "<p>Take this test, for example: <a href=\"https://github.com/rust-lang/rust/blob/4167d731dcaed3a37217f8850b27d30cbde5f15b/src/test/ui/issues/issue-57156.rs\">https://github.com/rust-lang/rust/blob/4167d731dcaed3a37217f8850b27d30cbde5f15b/src/test/ui/issues/issue-57156.rs</a></p>",
        "id": 217718245,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606198978
    },
    {
        "content": "<p>A super minimal gist of that:</p>",
        "id": 217718259,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606199003
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>trait Foo&lt;Args&gt; { type Output; }\ntrait Bar&lt;&#39;a&gt;: for&lt;&#39;s&gt; Foo&lt;&amp;&#39;s ()&gt; {}\nfn cb&lt;&#39;a&gt;() -&gt; Box&lt;dyn Bar&lt;&#39;a, Output=bool&gt;&gt;;\n</code></pre></div>",
        "id": 217718261,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606199007
    },
    {
        "content": "<p>Now,  a few things to point out here:</p>",
        "id": 217718432,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606199172
    },
    {
        "content": "<p>Actually, let me change this a bit to make it easier to explain</p>",
        "id": 217718464,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606199226
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>trait Foo&lt;Args&gt; { type Output; }\ntrait Bar: for&lt;&#39;s&gt; Foo&lt;&amp;&#39;s ()&gt; {}\nfn cb&lt;T: for&lt;&#39;a&gt; Bar&lt;Output=&amp;&#39;a ()&gt;&gt;();\n</code></pre></div>",
        "id": 217718474,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606199268
    },
    {
        "content": "<p>Now, let's look at that <code>Output=&amp;'a ()</code> part, and imagine what kind of predicate that gets turned into:</p>",
        "id": 217718524,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606199320
    },
    {
        "content": "<p>Without going through every detail it essentially turns into</p>",
        "id": 217718553,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606199372
    },
    {
        "content": "<p><code>for&lt;...&gt; &lt;T as Foo&lt;&amp;'s ()&gt;&gt;::Output = &amp;'a ()</code></p>",
        "id": 217718636,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606199505
    },
    {
        "content": "<p>Well, now we have a problem</p>",
        "id": 217718670,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606199523
    },
    {
        "content": "<p>Because this has <em>both</em> <code>'s</code> <em>and</em> <code>'a</code></p>",
        "id": 217718697,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606199540
    },
    {
        "content": "<p>But, if you get <code>'a</code> as <code>^0</code> from the <code>for&lt;'a&gt;</code> in line 3 and <code>'s</code> as <code>^0</code> from the <code>for&lt;'s&gt;</code> in line 2, then we can't just reuse either binders, because they would clash in our predicate</p>",
        "id": 217718752,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606199639
    },
    {
        "content": "<p>Unfortunately, since currently rustc doesn't care what \"index\" <code>'a</code> and <code>'s</code> are, it doesn't really matter, and there's no code in place to \"shift\" vars</p>",
        "id": 217718872,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606199777
    },
    {
        "content": "<p>Well, now we have to</p>",
        "id": 217718876,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606199792
    },
    {
        "content": "<p>This is really only one example where this sort of thing comes up</p>",
        "id": 217718909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606199862
    },
    {
        "content": "<p>Hmm, so there is a particular function called <code>subst_supertrait</code>, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 217923746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606329903
    },
    {
        "content": "<p>that I think is managing this particular combination</p>",
        "id": 217923753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606329909
    },
    {
        "content": "<p>It doesn't manage this case correctly, no</p>",
        "id": 217926022,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606331195
    },
    {
        "content": "<p>Well, it does sort of think about \"nested\" <code>for&lt;...&gt;</code>s, but it doesn't shift variables or anything when they overlap</p>",
        "id": 217926140,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606331272
    },
    {
        "content": "<p>Also, when I do shift variables, I'm getting region errors. So still more work to do</p>",
        "id": 217926213,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606331301
    },
    {
        "content": "<p>yeah I just meant that it's the point where we <em>combine</em> those two binders</p>",
        "id": 217929031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606332740
    },
    {
        "content": "<p>It is one point</p>",
        "id": 217930709,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606333668
    },
    {
        "content": "<p>but it's done elsewhere</p>",
        "id": 217930716,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606333674
    },
    {
        "content": "<p>Well, I'm really stuck with this.</p>",
        "id": 217963258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606362641
    },
    {
        "content": "<p>This is a really fundamental issue.</p>",
        "id": 217963261,
        "sender_full_name": "Jack Huey",
        "timestamp": 1606362652
    },
    {
        "content": "<p>Alright, so I've <a href=\"https://github.com/rust-lang/rust/compare/master...jackh726:cont\">this branch</a> to where all the ui tests pass</p>",
        "id": 219392217,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607545276
    },
    {
        "content": "<p>But, along the way, I changed behavior slightly in regards to incremental</p>",
        "id": 219392289,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607545319
    },
    {
        "content": "<p>Basically around extra unused generics</p>",
        "id": 219392362,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607545347
    },
    {
        "content": "<p>So, incremental tests fail here: <a href=\"https://github.com/rust-lang/rust/blob/c16d52db7778fba1c8b6c07b06510cfd6c32ae4f/src/test/incremental/hashes/inherent_impls.rs#L317\">https://github.com/rust-lang/rust/blob/c16d52db7778fba1c8b6c07b06510cfd6c32ae4f/src/test/incremental/hashes/inherent_impls.rs#L317</a></p>",
        "id": 219392478,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607545413
    },
    {
        "content": "<p>The reasoning behind this is a bit subtle, but essentially it's because somewhere along the line, one has empty binders vs ['a]</p>",
        "id": 219392619,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607545476
    },
    {
        "content": "<p>that change seems absolutely fine to me <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> gj</p>",
        "id": 219453466,
        "sender_full_name": "lcnr",
        "timestamp": 1607595441
    },
    {
        "content": "<p>did you already run a perf run with the current changes?</p>",
        "id": 219453503,
        "sender_full_name": "lcnr",
        "timestamp": 1607595457
    },
    {
        "content": "<p>why do you wrap <code>PredicateKind::Atom</code> with a dummy binder in <a href=\"https://github.com/jackh726/rust/blob/5698bff0034bcd5535be7e508358a2826f985efd/compiler/rustc_infer/src/traits/util.rs#L18\">https://github.com/jackh726/rust/blob/5698bff0034bcd5535be7e508358a2826f985efd/compiler/rustc_infer/src/traits/util.rs#L18</a>?</p>",
        "id": 219453955,
        "sender_full_name": "lcnr",
        "timestamp": 1607595715
    },
    {
        "content": "<p>ah in <a href=\"https://github.com/rust-lang/rust/issues/76814\">#76814</a></p>",
        "id": 219454258,
        "sender_full_name": "lcnr",
        "timestamp": 1607595902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>  so that</p>",
        "id": 219483189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607612418
    },
    {
        "content": "<p>That came from a domino effect</p>",
        "id": 219483235,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607612441
    },
    {
        "content": "<p>I don't remember exactly what it was, but in some error cases we have something like <code>for&lt;'a&gt; fn() -&gt; &amp;'a</code> (it wasn't fn, but the point stands). But basically, the <code>'a</code> wasn't in the <em>inputs</em>, so it wasn't counted when bound vars are created, so there was an empty vars list. But in other cases we actually <em>need</em> that. Well, in other cases, having that around is a problem (because there's still a bunch of <code>potentially_qualified</code> around).</p>",
        "id": 219484250,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607612857
    },
    {
        "content": "<p>This started the dominos: <a href=\"https://github.com/rust-lang/rust/pull/76814/commits/b00b3a12dc10005b9641ed3148261c254f49202f#diff-2c47d694652e4851afc17740220c986ca445f9a9bc0e188893f2089e12024621R1150\">https://github.com/rust-lang/rust/pull/76814/commits/b00b3a12dc10005b9641ed3148261c254f49202f#diff-2c47d694652e4851afc17740220c986ca445f9a9bc0e188893f2089e12024621R1150</a></p>",
        "id": 219484503,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607612956
    },
    {
        "content": "<p>The proper solution is to just remove <code>PredicateKind::Atom</code> eventually, I think. (And whenever we currently use that difference, we just check for escaping vars there)</p>",
        "id": 219484653,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607613007
    },
    {
        "content": "<p>so we once again want to go back to <code>Predicate::Trait(Binder(...))</code>?</p>",
        "id": 219484718,
        "sender_full_name": "lcnr",
        "timestamp": 1607613036
    },
    {
        "content": "<p>no, just everything would be like the currently <code>PredicateKind::ForAll(Binder(PredicateAtom::...))</code></p>",
        "id": 219484982,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607613132
    },
    {
        "content": "<p>So, I gotta figure out why the hashing is different on CI than local</p>",
        "id": 219485367,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607613285
    },
    {
        "content": "<p>Also, re. perf, doesn't look too bad! There might be some improvements to make. But I guess the question is: how much are we will to accept a perf drop? (I.e. at what point can we call the PR \"good\" module other review comments; I'm somewhat wary of trying to chase optimizations on an already heavy PR that will probably always be perf-negative unless we start <em>using</em> the binders)</p>",
        "id": 219488058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607614314
    },
    {
        "content": "<p>Love trying to come up with test cases to try to break things:</p>",
        "id": 223442655,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611180114
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>trait I&lt;&#39;a, &#39;b&gt; {\n    type As;\n}\ntrait H&lt;&#39;h&gt;: for&lt;&#39;a&gt; I&lt;&#39;a, &#39;h&gt; {}\nfn foo2&lt;T&gt;() where T: for&lt;&#39;c&gt; H&lt;&#39;c, As: for&lt;&#39;d&gt; I&lt;&#39;d, &#39;c&gt;&gt; {}\n</code></pre></div>",
        "id": 223442673,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611180119
    },
    {
        "content": "<p>As if hrtb supertraits and associated type bounds weren't complicated enough, their interaction is even better</p>",
        "id": 223443496,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611180353
    },
    {
        "content": "<p>The good news is that passes. The bad news is I expected to fail so I might not be writing the right test.</p>",
        "id": 223445727,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611181404
    },
    {
        "content": "<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>I haven't been properly validating the bound vars for regions (by checking that the kinds are equal), which was masking some still-incorrect shifting</p>",
        "id": 223473919,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611210373
    },
    {
        "content": "<p>Something <em>seemed</em> wrong lol</p>",
        "id": 223473936,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611210406
    },
    {
        "content": "<p>Okay, so, I'm going to babble here for a bit.</p>",
        "id": 223580693,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611268431
    },
    {
        "content": "<p>Maybe it'll help me get my thoughts straight</p>",
        "id": 223580764,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611268447
    },
    {
        "content": "<p>So, let's start by introducing some background</p>",
        "id": 223580812,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611268476
    },
    {
        "content": "<p>imagine you have <code>trait Foo&lt;T&gt; where T: for&lt;'a&gt; Bar&lt;'a&gt; {}</code></p>",
        "id": 223580899,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611268537
    },
    {
        "content": "<p>Where <code>Bar</code> is defined as:</p>\n<div class=\"codehilite\"><pre><span></span><code>trait Bar&lt;&#39;a&gt; {\n  type As;\n}\n</code></pre></div>",
        "id": 223580982,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611268580
    },
    {
        "content": "<p>Then imagine you have a trait ref <code>for&lt;'b&gt; U: Foo&lt;V,  As = &amp;'b ()&gt;</code></p>",
        "id": 223581080,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611268648
    },
    {
        "content": "<p>(I did explain this bit a while ago above in this topic, but recapping now)</p>",
        "id": 223581117,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611268679
    },
    {
        "content": "<p>That <code>As = &amp;'b ()</code> bit gets desugared into: <code>for&lt;'a, 'b&gt; &lt;U as Foo&lt;V&gt;&gt;::As = &amp;'b ()</code></p>",
        "id": 223581242,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611268740
    },
    {
        "content": "<p>Now, let's pause here:</p>",
        "id": 223581262,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611268753
    },
    {
        "content": "<p>I <em>thought</em> I was handling this correctly. But I wasn't, not quite. I <em>was</em> handling lifetimes in the projection type (<code>&lt;U as Foo&lt;V&gt;&gt;::As</code>) correctly. But I was missing the <code>&amp;'b ()</code> bit.</p>",
        "id": 223581399,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611268829
    },
    {
        "content": "<p>Perhaps it's also important to define \"handling\" here: because when you write the trait ref, <code>'b</code> refers to the bound var at index 0 in <code>for&lt;'b&gt;</code>, but in the final projection predicate, it refers to the bound var at index 1 in <code>for&lt;'a, 'b&gt;</code>, we have to shift that somewhere</p>",
        "id": 223581558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611268938
    },
    {
        "content": "<p>(also, this was a bad example, since it doesn't show <em>why</em> we need a shift: imagine instead you had <code>trait Foo&lt;'f&gt; ...</code>; then, the projection predicate would be <code>for&lt;'a, 'b&gt; &lt;U as Foo&lt;'a&gt;&gt;::As = &amp;'b ()</code>. So, you really do need both bound vars around)</p>",
        "id": 223581653,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611269008
    },
    {
        "content": "<p>Anyways, like I said, I <em>wasn't</em> shifting the <code>'b</code> in <code>&amp;'b ()</code>. But that's okay, that's actually an easy fix: We can compare <code>for&lt;'a, 'b&gt;</code> with <code>for&lt;'b&gt;</code> and see we added an extra bound var. So we can just take all bound vars in <code>&amp;'b ()</code> and shift by one since it can't contain any bound vars defined elsewhere</p>",
        "id": 223581857,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611269137
    },
    {
        "content": "<p>(also...GATs...aren't defined well here. But I need to look how this fits with <a href=\"https://github.com/rust-lang/rust/issues/79554\">#79554</a>)</p>",
        "id": 223582019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611269240
    },
    {
        "content": "<p>Now, everything I've said so far, I've understood and is straightforward</p>",
        "id": 223582058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611269275
    },
    {
        "content": "<p>Now, let's talk about associated type bounds</p>",
        "id": 223582098,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611269284
    },
    {
        "content": "<p>For reference, imagine we have </p>\n<div class=\"codehilite\"><pre><span></span><code>trait Foo&lt;&#39;a&gt; {\ntype As;\n}\n</code></pre></div>\n<p>with the trait ref<br>\n<code>for&lt;'a&gt; T: Foo&lt;'a, As: Foo&lt;'a&gt;&gt;</code></p>",
        "id": 223582234,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611269387
    },
    {
        "content": "<p>Or, even better</p>",
        "id": 223582307,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611269411
    },
    {
        "content": "<p>For reference, imagine we have </p>\n<div class=\"codehilite\"><pre><span></span><code>trait Foo&lt;&#39;a&gt; {\n  type As;\n}\ntrait Bar&lt;&#39;a&gt; {}\n</code></pre></div>\n<p>with the trait ref<br>\n<code>for&lt;'a&gt; T: Foo&lt;'a, As: for&lt;'b&gt; Bar&lt;'a, 'b&gt;&gt;</code></p>",
        "id": 223582347,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611269441
    },
    {
        "content": "<p>Now, this isn't exactly how it's desugared, you can imagine that the trait ref can be written by these bounds:<br>\n<code>for&lt;'a&gt; T: Foo&lt;'a&gt; + for&lt;'a, 'b&gt; &lt;T as Foo&lt;'a&gt;&gt;::As: Bar&lt;'a, 'b&gt;</code></p>",
        "id": 223582625,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611269623
    },
    {
        "content": "<p>And I want to note here that <code>Bar&lt;'a, 'b&gt;</code> has the bound vars of both <code>for&lt;'a&gt;</code> and <code>for&lt;'b&gt;</code> together</p>",
        "id": 223582742,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611269683
    },
    {
        "content": "<p>Sound familiar?</p>",
        "id": 223582753,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611269689
    },
    {
        "content": "<p>Well, it somewhat is similar to the supertrait hrtb, but a key difference is lies in that bit I said before:</p>\n<blockquote>\n<p>But that's okay, that's actually an easy fix: We can compare for&lt;'a, 'b&gt; with for&lt;'b&gt; and see we added an extra bound var.</p>\n</blockquote>",
        "id": 223583072,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611269887
    },
    {
        "content": "<p>Well, turns out, that <code>As = &amp;'b ()</code> versus <code>As: Bar&lt;'a, 'b&gt;</code> difference is massive</p>",
        "id": 223583155,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611269965
    },
    {
        "content": "<p>In terms of implementation</p>",
        "id": 223583165,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611269975
    },
    {
        "content": "<p>Well, ugh, I'm actually making this more complicated by not clarifying that ATBs can also be affected by supertrait hrtbs</p>",
        "id": 223583312,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270063
    },
    {
        "content": "<p>So, you could imagine a scenario where we end up with a bound like <code>for&lt;'a, 'b, 'c&gt; &lt;T as Baz&lt;'a, 'b&gt;&gt;::As: Bar&lt;'b, 'c&gt;</code> where the definitions look something like </p>\n<div class=\"codehilite\"><pre><span></span><code>trait Baz&lt;&#39;a, &#39;b&gt; {\n  type As;\n}\ntrait Foo&lt;&#39;b&gt;: for&lt;&#39;a&gt; Baz&lt;&#39;a, &#39;b&gt; {}\ntrait Bar&lt;&#39;a, &#39;b&gt; {}\nfor&lt;&#39;b&gt; Foo&lt;&#39;b, As: for&lt;&#39;c&gt; Bar&lt;&#39;b, &#39;c&gt;&gt;&#39;\n</code></pre></div>",
        "id": 223583711,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270332
    },
    {
        "content": "<p>(I almost certainly botched that example, but you get the picture)</p>",
        "id": 223583872,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270435
    },
    {
        "content": "<p>Now, back to this</p>\n<blockquote>\n<p>Well, turns out, that As = &amp;'b () versus As: Bar&lt;'a, 'b&gt; difference is massive</p>\n</blockquote>",
        "id": 223583975,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270513
    },
    {
        "content": "<p>Well, I guess, first I should elaborate how we could up with the final <code>for&lt;'a, 'b&gt;</code> and <code>for&lt;'a, 'b&gt;</code> binders in the \"final\" desugaring</p>",
        "id": 223584084,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270597
    },
    {
        "content": "<p>For the supertrait hrtb, this is all done through <code>subst_supertrait</code></p>",
        "id": 223584152,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270618
    },
    {
        "content": "<p>But for associated type bounds, in the current PR state, this is done by keeping track of the \"outer\" bound vars for a trait ref</p>",
        "id": 223584180,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270646
    },
    {
        "content": "<p>So, for <code>for&lt;'a&gt; T: Foo&lt;'a, As: for&lt;'b&gt; Bar&lt;'a, 'b&gt;&gt;</code>, when looking specifically at the trait ref <code>As: for&lt;'b&gt; Bar&lt;'a, 'b&gt;</code>, the outer bound vars are <code>for&lt;'a&gt;</code></p>",
        "id": 223584260,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270716
    },
    {
        "content": "<p>And you can imagine that even nested trait refs, the outer bound vars accumulate</p>",
        "id": 223584313,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270732
    },
    {
        "content": "<p>And the \"final\" bound vars end up being <code>for&lt;'a, 'b&gt;</code>, because they are concatenated</p>",
        "id": 223584333,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270751
    },
    {
        "content": "<p>And this is all well and dandy: We know that the outer bound vars has a length of 1, so we can shift all bound vars by 1 when we encounter them</p>",
        "id": 223584408,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270808
    },
    {
        "content": "<p>But, this requires keeping track of those in <code>astconv/mod</code></p>",
        "id": 223584500,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270859
    },
    {
        "content": "<p>So, my plan was: just do this in resolve</p>",
        "id": 223584539,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270887
    },
    {
        "content": "<p>And that works all and good (in resolve, we can just keep track of the fact that we are in nested trait refs) UNTIL YOU ADD IN SUPERTRAITS</p>",
        "id": 223584598,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270932
    },
    {
        "content": "<p>and that's where I'm at</p>",
        "id": 223584602,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611270937
    },
    {
        "content": "<p>Specifically, that devilish example I wrote yesterday:</p>\n<div class=\"codehilite\"><pre><span></span><code>trait I&lt;&#39;a, &#39;b, &#39;c&gt; {\n    type As;\n}\ntrait H&lt;&#39;a, &#39;b&gt;: for&lt;&#39;c&gt; I&lt;&#39;a, &#39;c, &#39;b&gt; + &#39;a {}\nfn foo2&lt;T&gt;() where T: for&lt;&#39;c&gt; H&lt;&#39;c, &#39;c, As: for&lt;&#39;d&gt; H&lt;&#39;d, &#39;c&gt; + &#39;c&gt; {}\n</code></pre></div>",
        "id": 223584757,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271032
    },
    {
        "content": "<p>Let's try to desugar things a bit</p>",
        "id": 223584977,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271162
    },
    {
        "content": "<p>But first, let me give everything a completely unique name</p>",
        "id": 223584991,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271175
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>trait I&lt;&#39;a, &#39;b, &#39;c&gt; {\n    type As;\n}\ntrait H&lt;&#39;d, &#39;e&gt;: for&lt;&#39;f&gt; I&lt;&#39;d, &#39;f, &#39;e&gt; + &#39;d {}\nfn foo2&lt;T&gt;() where T: for&lt;&#39;g&gt; H&lt;&#39;g, &#39;g, As: for&lt;&#39;h&gt; H&lt;&#39;h, &#39;g&gt; + &#39;g&gt; {}\n</code></pre></div>",
        "id": 223585103,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271233
    },
    {
        "content": "<p>And then start to desugar that <code>T: for&lt;'g&gt; H&lt;'g, 'g, As: for&lt;'h&gt; H&lt;'h, 'g&gt; +'g&gt;</code> bound</p>",
        "id": 223585144,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271271
    },
    {
        "content": "<p><code>for&lt;'g&gt; T: H&lt;'g, 'g&gt; + for&lt;'g, 'h&gt; &lt;T as H&lt;'g, 'g&gt;::As: H&lt;'h, 'g&gt; + 'g</code></p>",
        "id": 223585274,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271352
    },
    {
        "content": "<p>That looks right. And awful</p>",
        "id": 223585285,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271363
    },
    {
        "content": "<p>But, not quite done yet</p>",
        "id": 223585295,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271368
    },
    {
        "content": "<p>have to subst through supertraits</p>",
        "id": 223585309,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271383
    },
    {
        "content": "<p><code>for&lt;'g&gt; T: H&lt;'g, 'g&gt; + for&lt;'f, 'g, 'h&gt; &lt;T as I&lt;'g, 'f, 'g&gt;::As: H&lt;'h, 'g&gt; + 'g + 'g</code></p>",
        "id": 223585457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271503
    },
    {
        "content": "<p>So terrible</p>",
        "id": 223585574,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271568
    },
    {
        "content": "<p>Now, let's look at one of the choices I made here: <code>for&lt;'f, 'g, 'h&gt;</code></p>",
        "id": 223585698,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271678
    },
    {
        "content": "<p>When creating these bound vars, I first concatenated those that are nested <code>for&lt;'g&gt;</code> and <code>for&lt;'h&gt;</code> and then added those from the super trait <code>'f</code> after</p>",
        "id": 223585790,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271728
    },
    {
        "content": "<p>This is a bit arbitrary: You could also imagine that I create this by substing the supertraits first and then appending the bound vars: <code>for&lt;'g, 'f, 'h&gt;</code></p>",
        "id": 223585998,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271866
    },
    {
        "content": "<p>(also, at this point, I'm working through things in my head, so what I say will be sporadic)</p>",
        "id": 223586035,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611271893
    },
    {
        "content": "<p>This was has the advantage that we can shift all the bounds of <code>As</code> (in this case <code>: H&lt;'h, 'g&gt;</code>) together</p>",
        "id": 223586215,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611272037
    },
    {
        "content": "<p>What's difficult here is how the astconv/mod code is written currently</p>",
        "id": 223586348,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611272132
    },
    {
        "content": "<p>Let's go back to <code>T: for&lt;'g&gt; H&lt;'g, 'g, As: for&lt;'h&gt; H&lt;'h, 'g&gt; +'g&gt;</code></p>",
        "id": 223586462,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611272206
    },
    {
        "content": "<p>What actually happens is we get a trait ref <code>T: for&lt;'g&gt; H&lt;'g, 'g&gt;</code> and the bounds <code>As: for&lt;'h&gt; H&lt;'h, 'g&gt; + 'g</code></p>",
        "id": 223586705,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611272410
    },
    {
        "content": "<p>We see that <code>As</code> isn't defined on <code>H</code>, so we subst supertrait until we get <code>T: for&lt;'f, 'g&gt; I&lt;'g, 'f, 'g&gt;</code></p>",
        "id": 223586827,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611272527
    },
    {
        "content": "<p>Then we can make a projection: <code>for&lt;'f, 'g&gt; &lt;T as I&lt;'g, 'f, 'g&gt;&gt;::As</code></p>",
        "id": 223586869,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611272577
    },
    {
        "content": "<p>So far, this is okay, since <code>subst_supertrait</code> handles the shifting of vars here</p>",
        "id": 223586891,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611272599
    },
    {
        "content": "<p>But, the vars in <code>As: for&lt;'h&gt; H&lt;'h, 'g&gt; + 'g</code> haven't been shifted</p>",
        "id": 223586906,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611272621
    },
    {
        "content": "<p>And, these are still in <code>hir</code> too, so we can't shift things yet <em>anyways</em></p>",
        "id": 223587012,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611272702
    },
    {
        "content": "<p>(this happens in <code>add_predicates_for_ast_type_binding</code>)</p>",
        "id": 223587031,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611272721
    },
    {
        "content": "<p>It seems like the most straightfoward option here is to pass down the \"shift vars by 1\" information</p>",
        "id": 223587191,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611272848
    },
    {
        "content": "<p>But I'm really not sure that's quite correct. Some thoughts:<br>\n1) What if we have outer bound vars above the current trait ref. Does this get shifted with <code>subst_supertrait</code>? I'm thinking something like <code>for&lt;'a&gt; T: Foo&lt;'a, As: for&lt;'b&gt; H&lt;'a, 'b, As: for&lt;'c&gt; H&lt;'a, 'c&gt;&gt;&gt;</code>. Does that work correctly?<br>\n2) That is really terrible having to pass that everywhere.</p>",
        "id": 223587417,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611273058
    },
    {
        "content": "<p>gotta run for now. But yeah, lot's to consider</p>",
        "id": 223587602,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611273234
    },
    {
        "content": "<p>So, I've nearly been able to get this working. By passing through by the \"in scope\" nested bound vars, as well as the the \"shift\" that you would get from super trait hrtbs</p>",
        "id": 223683452,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611341850
    },
    {
        "content": "<p>The only kicker right now is the outlives bounds. This isn't <em>quite</em> right yet, but not sure why.</p>",
        "id": 223683544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611341888
    },
    {
        "content": "<p>Back to <code>T: for&lt;'g&gt; H&lt;'g, 'g, As: for&lt;'h&gt; H&lt;'h, 'g&gt; +'g&gt;</code> again</p>",
        "id": 223683685,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611341987
    },
    {
        "content": "<p>In <code>H&lt;'h, 'g&gt;</code>, <code>'h</code> should be shifted by 2 (from the \"outer\" vars, since the bound vars end up as <code>['f, 'g, 'h]</code>), while <code>'g</code> should only be shifted by 1 (the \"shift\")</p>",
        "id": 223684360,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611342284
    },
    {
        "content": "<p>The outlives <code>'g</code> also gets shifted by 1</p>",
        "id": 223684398,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611342314
    },
    {
        "content": "<p>Now let's examine this monstrosity: <code>T: for&lt;'i&gt; H&lt;'i, 'i, As: for&lt;'j&gt; H&lt;'j, 'i, As: for&lt;'k&gt; I&lt;'i, 'k, 'j&gt; + 'j&gt; + 'i&gt;</code></p>",
        "id": 223684528,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611342365
    },
    {
        "content": "<p>This is difficult</p>",
        "id": 223684703,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611342472
    },
    {
        "content": "<p>Now, it's probably easiest to break this up into parts</p>",
        "id": 223684871,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611342567
    },
    {
        "content": "<p>You might expect the first round of \"simplification\" to end up with something that looks like: <code>T: for&lt;'i&gt; H&lt;'i, 'i&gt; + for&lt;'f, 'i, 'j&gt; &lt;T as I&lt;'i, 'f, 'j&gt;&gt;::As: H&lt;'j, 'i, As: for&lt;'k&gt; I&lt;'i, 'k, 'j&gt; + 'j&gt; + 'i</code></p>",
        "id": 223684917,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611342597
    },
    {
        "content": "<p>But is that correct?</p>",
        "id": 223685010,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611342644
    },
    {
        "content": "<p>The only bit that's particularly difficult is that <code>'i</code> at the end</p>",
        "id": 223685115,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611342712
    },
    {
        "content": "<p>But, that <em>is</em> correct</p>",
        "id": 223685196,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611342742
    },
    {
        "content": "<p>The tricky bit is the next level of nesting</p>",
        "id": 223685643,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611342976
    },
    {
        "content": "<p>Fully desugared, that ends up being something like:<br>\n<code>T: for&lt;'i&gt; H&lt;'i, 'i&gt;, for&lt;'f, 'i, 'j&gt; &lt;T as I&lt;'i, 'f, 'j&gt;&gt;::As: H&lt;'j, 'i&gt; + 'i, for&lt;'f, 'f, 'i, 'j&gt; &lt;&lt;T as I&lt;'i, 'f, 'j&gt;&gt;::As as I&lt;'i, 'j, 'k&gt;&gt;::As: 'j, for&lt;'f, 'f, 'i, 'j, 'k&gt; &lt;&lt;T as I&lt;'i, 'f, 'j&gt;&gt;::As as I&lt;'i, 'j, 'k&gt;&gt;::As: I&lt;'i, 'k, 'j&gt;</code></p>",
        "id": 223694949,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611347215
    },
    {
        "content": "<p>Okay yeah, the approach I've been taking won't work at all</p>",
        "id": 223712604,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611356078
    },
    {
        "content": "<p>It's also just really ugly</p>",
        "id": 223712732,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611356177
    },
    {
        "content": "<p>I need to just come up with a way to be more lazy with bounds creation, so that I can shift the created bounds <em>before</em> they get added to the <code>Bounds</code></p>",
        "id": 223712811,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611356232
    },
    {
        "content": "<p>I'm not sure there's a way to do that without splitting into multiple allocations though :/</p>",
        "id": 223712913,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611356298
    },
    {
        "content": "<p>But that might be okay if I change the <code>Vec</code>s in <code>Bounds</code> to <code>SmallVec</code>s</p>",
        "id": 223712977,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611356349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/223694949\">said</a>:</p>\n<blockquote>\n<p>Fully desugared, that ends up being something like:<br>\n<code>T: for&lt;'i&gt; H&lt;'i, 'i&gt;, for&lt;'f, 'i, 'j&gt; &lt;T as I&lt;'i, 'f, 'j&gt;&gt;::As: H&lt;'j, 'i&gt; + 'i, for&lt;'f, 'f, 'i, 'j&gt; &lt;&lt;T as I&lt;'i, 'f, 'j&gt;&gt;::As as I&lt;'i, 'j, 'k&gt;&gt;::As: 'j, for&lt;'f, 'f, 'i, 'j, 'k&gt; &lt;&lt;T as I&lt;'i, 'f, 'j&gt;&gt;::As as I&lt;'i, 'j, 'k&gt;&gt;::As: I&lt;'i, 'k, 'j&gt;</code></p>\n</blockquote>\n<p>Of course, I got this wrong. I think it's actually something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>T:\n    for&lt;&#39;i&gt; H&lt;&#39;i, &#39;i&gt;,\n    for&lt;&#39;f, &#39;i&gt; &lt;T as I&lt;&#39;i, &#39;f, &#39;i&gt;&gt;::As: &#39;i,\n    for&lt;&#39;f, &#39;i, &#39;j&gt; &lt;T as I&lt;&#39;i, &#39;f, &#39;i&gt;&gt;::As: H&lt;&#39;j, &#39;i&gt;,\n    for&lt;&#39;f, &#39;f, &#39;i, &#39;j&gt; &lt;&lt;T as I&lt;&#39;i, &#39;f, &#39;i&gt;&gt;::As as I&lt;&#39;j, &#39;f, &#39;i&gt;&gt;::As: &#39;j,\n    for&lt;&#39;f, &#39;f, &#39;i, &#39;j, &#39;k&gt; &lt;&lt;T as I&lt;&#39;i, &#39;f, &#39;i&gt;&gt;::As as I&lt;&#39;j, &#39;f, &#39;i&gt;&gt;::As: I&lt;&#39;i, &#39;k, &#39;j&gt;\n</code></pre></div>",
        "id": 223773556,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611433554
    },
    {
        "content": "<p>So, been thinking about this more</p>",
        "id": 224282485,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611807139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-01-26/near/224110141\">said</a>:</p>\n<blockquote>\n<p>I guess my <em>intuition</em> here is that the problem is that we're making resolve lifetimes do work it shouldn't do</p>\n</blockquote>\n<p>specifically in regards to this</p>",
        "id": 224282491,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611807163
    },
    {
        "content": "<p>So, in the PR, I originally figured it's the <em>right</em> idea to track indices of late bound vars in <code>rustc_resolve::late::lifetimes</code>, since that's where things like binder depth and such get collected</p>",
        "id": 224282570,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611807286
    },
    {
        "content": "<p>And this is probably mostly correct; <em>this</em> is where we know about all the <code>for&lt;...&gt;</code> in scope syntactically and such</p>",
        "id": 224282606,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611807350
    },
    {
        "content": "<p><em>But</em>, as we can see here, this isn't really completely good</p>",
        "id": 224282677,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611807424
    },
    {
        "content": "<p>So, first, maybe I should take a quick review to look where we actually are looking at the late bound vars being collected in lifetimes</p>",
        "id": 224282743,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611807489
    },
    {
        "content": "<p>Specifically, what I'm thinking/considering:</p>",
        "id": 224282758,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611807534
    },
    {
        "content": "<p>1) When do we <em>actually</em> care about the binder depth, and when are these just collapsed into a single binder level (as are done for poly trait refs)</p>",
        "id": 224282774,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611807582
    },
    {
        "content": "<p>2) Could we instead just track a set of lifetimes and build the whole bound vars and poly trait ref in when converting the HIR? This essentially requires that we don't independently use/need just the bound vars from the whole poly trait ref.</p>",
        "id": 224282848,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611807702
    },
    {
        "content": "<p>It's perhaps a little difficult right now, because I'm conflating the late bound vars of a <em>function</em> with those in a trait ref</p>",
        "id": 224282906,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611807756
    },
    {
        "content": "<p>So, looks like we're querying <code>late_bound_vars</code> in 5 places</p>",
        "id": 224283053,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611807946
    },
    {
        "content": "<p>One is asking the late bound vars of a closure. Which...currently can't exist, but you could imagine they could in the future. I put this under the \"like a fn\" category</p>",
        "id": 224283116,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611808007
    },
    {
        "content": "<p>Another is in <code>ty_of_fn</code>, obviously under function category</p>",
        "id": 224283123,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611808024
    },
    {
        "content": "<p>Then there are in <code>instantiate_lang_item_trait_ref</code>, <code>instantiate_poly_trait_ref_inner</code>, which are obviously in the trait ref category</p>",
        "id": 224283139,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611808054
    },
    {
        "content": "<p>And then finally in <code>gather_explicit_predicates_of</code>, where we need it for the lifetimes on a bound like <code>for&lt;'a&gt; T&lt;'a&gt;: Trait</code></p>",
        "id": 224283191,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611808086
    },
    {
        "content": "<p>But that falls under the trait ref category</p>",
        "id": 224283233,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611808146
    },
    {
        "content": "<p>Next, let's look at all the places we convert an ast region to a region</p>",
        "id": 224283255,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611808198
    },
    {
        "content": "<p>And how many of those could actually contain late bound vars</p>",
        "id": 224283338,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611808319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224283191\">said</a>:</p>\n<blockquote>\n<p>And then finally in <code>gather_explicit_predicates_of</code>, where we need it for the lifetimes on a bound like <code>for&lt;'a&gt; T&lt;'a&gt;: Trait</code></p>\n</blockquote>\n<p>uh, actually, need to amend this: this is just for the whole bound</p>",
        "id": 224283474,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611808450
    },
    {
        "content": "<p>But...I guess these are regions occurring in where clauses, so these are early-bound, not late</p>",
        "id": 224283501,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611808518
    },
    {
        "content": "<p>Err, scratch that, that's not right at all</p>",
        "id": 224283509,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611808538
    },
    {
        "content": "<p>I was thinking about the fn generics</p>",
        "id": 224283517,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611808547
    },
    {
        "content": "<p>Well, it sure makes my life easier seeing things wrapped in a <code>Binder::dummy</code>. But more difficult when that's obscured by a <code>to_predicate</code></p>",
        "id": 224283698,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611808785
    },
    {
        "content": "<p>Okay, on first glance, it definitely looks like the interesting bit is all in astconv/mod</p>",
        "id": 224283861,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611808980
    },
    {
        "content": "<p>Okay, next question: I'm very obviously messing up the conversion with respect to binder depth, but everything is fine and dandy (for the most part, but that's because of the index, not depth) - so, why is this</p>",
        "id": 224283946,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611809079
    },
    {
        "content": "<p>It's like...the predicates where get...the fact that the binder depth isn't INNERMOST isn't a problem</p>",
        "id": 224283999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611809152
    },
    {
        "content": "<p>It's a bit weird</p>",
        "id": 224284075,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611809254
    },
    {
        "content": "<p>Just for fun, let's just quickly make <em>every</em> late bound region use <code>ty::INNERMOST</code> and if that breaks anything</p>",
        "id": 224284154,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611809338
    },
    {
        "content": "<p>Actually, a thought just occurred to me that is scary: it's possible that these predicates aren't checked because the functions are instantiated</p>",
        "id": 224284307,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611809532
    },
    {
        "content": "<p>Any that...means...that I would actually have to write an impl that satisfies <code>T: for&lt;'l, 'i&gt; H&lt;'l, 'i, As: for&lt;'l, 'i, 'j&gt; H&lt;'j, 'i, As: for&lt;'l, 'i, 'j, 'k&gt; H&lt;'l, 'k, As = X&lt;'j, 'k&gt;&gt; + 'j&gt; + 'i&gt;</code> ugh</p>",
        "id": 224284336,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611809595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224284154\">said</a>:</p>\n<blockquote>\n<p>Just for fun, let's just quickly make <em>every</em> late bound region use <code>ty::INNERMOST</code> and if that breaks anything</p>\n</blockquote>\n<p>Okay it does, that's good</p>",
        "id": 224284349,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611809632
    },
    {
        "content": "<p>Okay, so next thought. Consider this:<br>\n<code>fn changer&lt;'a&gt;(mut things: Box&lt;dyn Iterator&lt;Item=&amp;'a mut u8&gt;&gt;)</code></p>",
        "id": 224284846,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611810201
    },
    {
        "content": "<p><code>'a</code> is late bound</p>",
        "id": 224284852,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611810212
    },
    {
        "content": "<p>but if we split how we handle late bound vars for functions and trait refs, we would have to think of how to handle this</p>",
        "id": 224284932,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611810284
    },
    {
        "content": "<p>and this is also a relatively simple example where we <em>do</em> need to keep track of depth in a way</p>",
        "id": 224285057,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611810456
    },
    {
        "content": "<p>Interesting, this doesn't compile:</p>\n<div class=\"codehilite\"><pre><span></span><code>trait A&lt;&#39;a, &#39;b, &#39;c&gt; {}\nfn foo&lt;&#39;a&gt;(_: Box&lt;dyn for&lt;&#39;b&gt; Iterator&lt;Item: for&lt;&#39;c&gt; A&lt;&#39;a, &#39;b, &#39;c&gt;&gt;&gt;) {}\n</code></pre></div>",
        "id": 224285618,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611811239
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>fn foo&lt;&#39;a&gt;(_: Box&lt;dyn for&lt;&#39;b&gt; Iterator&lt;Item: for&lt;&#39;c&gt; A&lt;&#39;a, &#39;b, &#39;c&gt;&gt;&gt;) {}\n  |        -                                                   ^^ undeclared lifetime\n  |        |\n  |        help: consider introducing lifetime `&#39;b` here: `&#39;b,`\n</code></pre></div>",
        "id": 224285626,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611811255
    },
    {
        "content": "<p>Seems like the inner bounds <em>aren't</em> under the <code>for&lt;'b&gt;</code> binder</p>",
        "id": 224285791,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611811455
    },
    {
        "content": "<p>This <em>might</em> be a bug. I would expect this to work?</p>",
        "id": 224286194,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611812035
    },
    {
        "content": "<p>So:</p>\n<div class=\"codehilite\"><pre><span></span><code>trait A&lt;&#39;a, &#39;b&gt; {\n    type As;\n}\nstruct B&lt;&#39;a, &#39;b&gt; {\n    _a: std::marker::PhantomData&lt;&amp;&#39;a ()&gt;,\n    _b: std::marker::PhantomData&lt;&amp;&#39;b ()&gt;,\n}\nfn foo&lt;&#39;a&gt;(_: Box&lt;dyn for&lt;&#39;b&gt; A&lt;&#39;a, &#39;b, As = B&lt;&#39;a, &#39;b&gt;&gt;&gt;) {}\nfn foo2&lt;&#39;a&gt;(_: Box&lt;dyn for&lt;&#39;b&gt; A&lt;&#39;a, &#39;b, As: A&lt;&#39;a, &#39;b&gt;&gt;&gt;) {}\n</code></pre></div>",
        "id": 224289163,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611815880
    },
    {
        "content": "<p><code>foo</code> is fine; <code>foo2</code> is not</p>",
        "id": 224289202,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611815898
    },
    {
        "content": "<p><del>So this is essentially <code>for&lt;'a&gt; X: Y&lt;'a&gt;</code>, does that work?</del></p>",
        "id": 224297726,
        "sender_full_name": "detrumi",
        "timestamp": 1611823491
    },
    {
        "content": "<p>Ah, so it's also visible with just <code>'b</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>trait A&lt;&#39;b&gt; {}\nfn foo(_: dyn for&lt;&#39;b&gt; Iterator&lt;Item: A&lt;&#39;b&gt;&gt;) {}\n</code></pre></div>",
        "id": 224298560,
        "sender_full_name": "detrumi",
        "timestamp": 1611824018
    },
    {
        "content": "<p>Isn't that kind of the same as this, where the error makes sense?</p>\n<div class=\"codehilite\"><pre><span></span><code>fn foo&lt;T&gt;(_: dyn for&lt;&#39;b&gt; Iterator&lt;Item = T&gt;) where T: A&lt;&#39;b&gt; {}\n</code></pre></div>",
        "id": 224299533,
        "sender_full_name": "detrumi",
        "timestamp": 1611824561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224299533\">said</a>:</p>\n<blockquote>\n<p>Isn't that kind of the same as this, where the error makes sense?</p>\n<p><div class=\"codehilite\"><pre><span></span><code>fn foo&lt;T&gt;(_: dyn for&lt;&#39;b&gt; Iterator&lt;Item = T&gt;) where T: A&lt;&#39;b&gt; {}\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Nope, this is different. Here <code>'b</code> is in the <code>where</code> clauses, which is outside the <code>dyn</code> whereas in the above two examples, <code>'a</code> is only in the <code>dyn</code>. (Also the <code>dyn</code> for your example needs to be under some kind of reference)</p>",
        "id": 224326619,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611841372
    },
    {
        "content": "<p>The error occurs even without the box (but you're right in that it's an nonsensical example otherwise)</p>",
        "id": 224327152,
        "sender_full_name": "detrumi",
        "timestamp": 1611841610
    },
    {
        "content": "<p>I imagine it's because the error occurs during resolve, and so it rustc doesn't get to typeck where the sized constraint would be checked</p>",
        "id": 224328828,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611842429
    },
    {
        "content": "<p>Of course this works: <code>fn foo2&lt;'a&gt;(_: Box&lt;dyn for&lt;'b&gt; A&lt;'a, 'b, As = &amp;dyn A&lt;'a, 'b, As = B&lt;'a, 'b&gt;&gt;&gt;&gt;) {}</code></p>",
        "id": 224383421,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611863572
    },
    {
        "content": "<p>So, uh, I think the predicates that are generated <em>do</em> in fact generate escaping bound vars (and that's probably incorrect). See <a href=\"https://github.com/rust-lang/rust/blob/0248c6f178ab3a4d2ec702b7d418ff8375ab0515/compiler/rustc_trait_selection/src/traits/wf.rs#L704\">here</a> here predicates are filtered for not having escaping bound vars during wf</p>",
        "id": 224567812,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611985596
    },
    {
        "content": "<p>This feels wrong to me</p>",
        "id": 224567824,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611985658
    },
    {
        "content": "<p>But I don't know if this is \"expected\" and handled elsewhere</p>",
        "id": 224567833,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611985671
    },
    {
        "content": "<p>If I remove that filter, we can't even compile core</p>",
        "id": 224567885,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611985736
    },
    {
        "content": "<p>Example:</p>",
        "id": 224567952,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611985835
    },
    {
        "content": "<p>During WF checking of <code>num::flt2dec::to_shortest_str</code></p>",
        "id": 224567953,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611985843
    },
    {
        "content": "<p>This obligation is generated: <code>Obligation(predicate=Binder(TraitPredicate(&lt;(&amp;num::flt2dec::decoder::Decoded, &amp;'a mut [mem::maybe_uninit::MaybeUninit&lt;u8&gt;]) as marker::Sized&gt;), []), depth=0),</code></p>",
        "id": 224567969,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611985894
    },
    {
        "content": "<p>And that fails</p>",
        "id": 224568017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611985944
    },
    {
        "content": "<p>(I just realized this is potentially a bad example since I might expect there to be binders there in this case...)</p>",
        "id": 224568039,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611986025
    },
    {
        "content": "<p>Okay, next example: WF checking of <code>&lt;slice::iter::RSplitNMut&lt;'a, T, P&gt; as iter::traits::iterator::Iterator&gt;::size_hint</code></p>",
        "id": 224568141,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611986183
    },
    {
        "content": "<p>This obligation is created <code>Obligation(predicate=Binder(TraitPredicate(&lt;(&amp;T,) as marker::Sized&gt;), []), depth=0)</code></p>",
        "id": 224568148,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611986217
    },
    {
        "content": "<p>Okay, I'm actually seeing a pattern here: the panics I've seen so far have a <code>Fn</code> trait where these predicates are originating</p>",
        "id": 224568258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611986409
    },
    {
        "content": "<p>Okay I mean, the db index <em>is</em> 1, so it's not the poly trait predicate that needs to bound vars (makes sense)</p>",
        "id": 224568676,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611987288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you want to chat here or zoom?</p>",
        "id": 224730603,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612188700
    },
    {
        "content": "<p>I'd rather chat here if that's ok, remote school makes zoom hard in the mornings</p>",
        "id": 224730638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612188717
    },
    {
        "content": "<p>That works</p>",
        "id": 224730691,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612188728
    },
    {
        "content": "<p>Do you want me to read the backscroll though :)</p>",
        "id": 224730693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612188728
    },
    {
        "content": "<p>No, I can summarize</p>",
        "id": 224730707,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612188737
    },
    {
        "content": "<p>Well, so, we talked about bit during the meeting last week</p>",
        "id": 224730755,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612188763
    },
    {
        "content": "<p>basically, taking this example:</p>",
        "id": 224730802,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612188790
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>trait I&lt;&#39;a, &#39;b, &#39;c&gt; {\n    type As;\n}\ntrait H&lt;&#39;d, &#39;e&gt;: for&lt;&#39;f&gt; I&lt;&#39;d, &#39;f, &#39;e&gt; + &#39;d {}\nfn foo2&lt;T&gt;() where T: for&lt;&#39;g&gt; H&lt;&#39;g, &#39;g, As: for&lt;&#39;h&gt; H&lt;&#39;h, &#39;g&gt; + &#39;g&gt; {}\n</code></pre></div>",
        "id": 224730811,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612188795
    },
    {
        "content": "<p>And imagining what predicates should be generated</p>",
        "id": 224730838,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612188810
    },
    {
        "content": "<p>oh yes, I remember this <del>torture test</del> example :)</p>",
        "id": 224730950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612188851
    },
    {
        "content": "<p>(I have so much worse ones too <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span>)</p>",
        "id": 224730988,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612188870
    },
    {
        "content": "<p>ok, this is paging back in</p>",
        "id": 224731046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612188897
    },
    {
        "content": "<p>side note, this is making me wonder if we were right to remove nested binders in predicates</p>",
        "id": 224731086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612188914
    },
    {
        "content": "<p>Well, up until the end of last week, I imagined that the binders from the outer <code>for&lt;...&gt;</code> would be concatenated onto the bound vars of inner traits</p>",
        "id": 224731087,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612188915
    },
    {
        "content": "<p>because I think a lot of this stuff becomes easier if we had them</p>",
        "id": 224731097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612188921
    },
    {
        "content": "<p>Potentially, yeah</p>",
        "id": 224731114,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612188928
    },
    {
        "content": "<p>Question is I guess <em>how</em> that would look</p>",
        "id": 224731132,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612188936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224731087\">said</a>:</p>\n<blockquote>\n<p>Well, up until the end of last week, I imagined that the binders from the outer <code>for&lt;...&gt;</code> would be concatenated onto the bound vars of inner traits</p>\n</blockquote>\n<p>So, for example, one predicate would be <code>for&lt;'g, 'h, 'f&gt; &lt;T as I&lt;'g, 'f, 'g&gt;&gt;::As: H&lt;'h, 'g&gt;</code></p>",
        "id": 224731318,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189021
    },
    {
        "content": "<p>what do you mean by how?</p>",
        "id": 224731321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224731321\">said</a>:</p>\n<blockquote>\n<p>what do you mean by how?</p>\n</blockquote>\n<p>Well, a current <code>Predicate</code> is essentially <code>Binder&lt;PredicateKind&gt;</code></p>",
        "id": 224731392,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189066
    },
    {
        "content": "<p>I guess, I'm not quite sure where you would do the \"nesting\"</p>",
        "id": 224731499,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189111
    },
    {
        "content": "<p>Ah, well, one of the <code>PredicateKind</code> would be a <code>ForAll</code> or whatever</p>",
        "id": 224731528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189127
    },
    {
        "content": "<p>but let's dig in a bit more</p>",
        "id": 224731533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189130
    },
    {
        "content": "<p>I'm not actually recommending that yet</p>",
        "id": 224731543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189135
    },
    {
        "content": "<p>Right yeah, there's a bit more here that I definitely want some input on, so let me continue</p>",
        "id": 224731571,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224731318\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224731087\">said</a>:</p>\n<blockquote>\n<p>Well, up until the end of last week, I imagined that the binders from the outer <code>for&lt;...&gt;</code> would be concatenated onto the bound vars of inner traits</p>\n</blockquote>\n<p>So, for example, one predicate would be <code>for&lt;'g, 'h, 'f&gt; &lt;T as I&lt;'g, 'f, 'g&gt;&gt;::As: H&lt;'h, 'g&gt;</code></p>\n</blockquote>\n<p>Now, we arrive here because of a mix of the nested binders and the supertrait HRTB</p>",
        "id": 224731635,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189190
    },
    {
        "content": "<p>And it's important to note all the shifting (indices at binder level 0) that could need to go on here</p>",
        "id": 224731739,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189223
    },
    {
        "content": "<p><em>And</em> I thought this was going to be the difficult part</p>",
        "id": 224731771,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189242
    },
    {
        "content": "<p>And was indeed running into issues</p>",
        "id": 224731787,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189251
    },
    {
        "content": "<p><em>But</em> I thought this was just about finding the right system/place to do this, but felt doable</p>",
        "id": 224731822,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189272
    },
    {
        "content": "<p>fyi I pulled the example <a href=\"https://gist.github.com/nikomatsakis/76a20519df1a06f56a9f885829dc75f8\">into a gist</a> so I can have it open while I read</p>",
        "id": 224731904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189311
    },
    {
        "content": "<p>(The eventual system that I <em>wanted</em> to implement was to just delay assigning bound var indices until ast conversion, but I wasn't able to finish that implementation before I fell into the rabbit hole)</p>",
        "id": 224732021,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224731904\">said</a>:</p>\n<blockquote>\n<p>fyi I pulled the example <a href=\"https://gist.github.com/nikomatsakis/76a20519df1a06f56a9f885829dc75f8\">into a gist</a> so I can have it open while I read</p>\n</blockquote>\n<p>I've been doing things like <a href=\"/user_uploads/4715/MKBMwnrdaazA0xP1g5HJjdn9/image.png\">image.png</a>  to help me keep track of the predicates that need to be generated</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/MKBMwnrdaazA0xP1g5HJjdn9/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/MKBMwnrdaazA0xP1g5HJjdn9/image.png\"></a></div>",
        "id": 224732134,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189402
    },
    {
        "content": "<p>It's so bad</p>",
        "id": 224732160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189410
    },
    {
        "content": "<p>oh dear</p>",
        "id": 224732203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224731822\">said</a>:</p>\n<blockquote>\n<p><em>But</em> I thought this was just about finding the right system/place to do this, but felt doable</p>\n</blockquote>\n<p>Anyways, while trying to implement the new scheme (after failing a couple times), I found something shocking</p>",
        "id": 224732271,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189457
    },
    {
        "content": "<p>ok</p>",
        "id": 224732301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189474
    },
    {
        "content": "<p>Well, at first, I was a bit curious, not so much shocked</p>",
        "id": 224732307,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189476
    },
    {
        "content": "<p>But, the predicates that are getting generated <em>do</em> have escaping bound vars</p>",
        "id": 224732344,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189498
    },
    {
        "content": "<p>(specially, I was wondering for something like <code>fn foo2&lt;'a&gt;(_: Box&lt;dyn for&lt;'b&gt; A&lt;'a, 'b, As = &amp;dyn A&lt;'a, 'b, As = B&lt;'a, 'b&gt;&gt;&gt;&gt;) {}</code>, what predicates get generated for WF and such)</p>",
        "id": 224732421,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189530
    },
    {
        "content": "<p>Honestly, you can hate me for these examples, they are awful and I know it</p>",
        "id": 224732469,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189556
    },
    {
        "content": "<p>I'm loving it</p>",
        "id": 224732524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224732344\">said</a>:</p>\n<blockquote>\n<p>But, the predicates that are getting generated <em>do</em> have escaping bound vars</p>\n</blockquote>\n<p>So, I was like \"huh, these have escaping bound vars, how are these predicates solved\"</p>",
        "id": 224732573,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189589
    },
    {
        "content": "<p>Well, then I found that we're skipping predicates in places that have escaping bound vars</p>",
        "id": 224732652,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189629
    },
    {
        "content": "<p>(link incoming)</p>",
        "id": 224732663,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189633
    },
    {
        "content": "<p>yes</p>",
        "id": 224732672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189640
    },
    {
        "content": "<p>I know about this</p>",
        "id": 224732685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189648
    },
    {
        "content": "<p>one of the things i'd like to change at some point via chalk</p>",
        "id": 224732698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189655
    },
    {
        "content": "<p>there's a justification for how it's supposed to work</p>",
        "id": 224732708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189662
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/e0d9f793990d20f8f640097e28556886ba5362f0/compiler/rustc_trait_selection/src/traits/wf.rs#L704\">here</a></p>",
        "id": 224732743,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224732708\">said</a>:</p>\n<blockquote>\n<p>there's a justification for how it's supposed to work</p>\n</blockquote>\n<p>Okay good; I would love to hear this</p>",
        "id": 224732815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189696
    },
    {
        "content": "<p>Basically though, removing e.g. that filter completely breaks everything</p>",
        "id": 224732861,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189717
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rfcs/1214-projections-lifetimes-and-wf.html#wf-checking-and-higher-ranked-types\">c.f. this RFC</a></p>",
        "id": 224732898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189735
    },
    {
        "content": "<p>I think?</p>",
        "id": 224732939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189757
    },
    {
        "content": "<p>But anyways, I was like \"okay cool, we just filter out predicates that have escaping bound vars. I'll just generate clauses without shifting things around\"</p>",
        "id": 224732948,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189762
    },
    {
        "content": "<p>So, I did that this weekend (well, into late last night)</p>",
        "id": 224732985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189775
    },
    {
        "content": "<p>And now a bunch of the associated type bounds tests fail</p>",
        "id": 224733009,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189788
    },
    {
        "content": "<p>Because of something like </p>\n<div class=\"codehilite\"><pre><span></span><code>cannot relate bound region: ReLateBound(DebruijnIndex(1), BoundRegion { var: 0, kind: BrNamed(DefId(0:12 ~ atb[317d]::where_bound_region_forall2::&#39;a), &#39;a) }) &lt;= RePlaceholder(Placeholder { universe: U1, name: BrNamed(DefId(0:16 ~ atb[317d]::desugared_bound_region_forall2::&#39;a#1), &#39;a) })\n</code></pre></div>",
        "id": 224733124,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189812
    },
    {
        "content": "<p>Minimal example: </p>\n<div class=\"codehilite\"><pre><span></span><code>fn where_bound_region_forall2&lt;B&gt;(beta: B) -&gt; usize\nwhere\n    B: Beta&lt;Gamma: for&lt;&#39;a&gt; Epsilon&lt;&#39;a, Zeta: Eta&gt;&gt;,\n{\n    desugared_bound_region_forall2(beta)\n}\n\npub fn desugared_bound_region_forall2&lt;B&gt;(beta: B) -&gt; usize\nwhere\n    B: Beta,\n    B::Gamma: for&lt;&#39;a&gt; Epsilon&lt;&#39;a&gt;,\n    for&lt;&#39;a&gt; &lt;B::Gamma as Epsilon&lt;&#39;a&gt;&gt;::Zeta: Eta,\n{\n    0\n}\n</code></pre></div>",
        "id": 224733179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189841
    },
    {
        "content": "<p>Basically, for <code>where_bound_region_forall2</code>, we're generating a trait ref <code>for&lt;&gt; &lt;&lt;B as Beta&gt;::Gamma as Epsilon&lt;'^1.0&gt;&gt;::Zeta: Eta</code></p>",
        "id": 224733327,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189912
    },
    {
        "content": "<p>(I will say that I feel like if we have to 'renumber' indices that is a \"yellow flag\")</p>",
        "id": 224733332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612189914
    },
    {
        "content": "<p>But because of the second, we expect <code>for&lt;'a&gt; &lt;&lt;B as Beta&gt;::Gamma as Epsilon&lt;'^0.0&gt;&gt;::Zeta: Eta</code></p>",
        "id": 224733427,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189948
    },
    {
        "content": "<p>And yeah, things fail</p>",
        "id": 224733440,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189953
    },
    {
        "content": "<p>This <em>might</em> just be an implementation problem, I have to look over again</p>",
        "id": 224733470,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612189968
    },
    {
        "content": "<p>A slice of the changes are here: <a href=\"https://github.com/rust-lang/rust/compare/12cf554...jackh726:binder-refactor-rebase\">https://github.com/rust-lang/rust/compare/12cf554...jackh726:binder-refactor-rebase#</a></p>",
        "id": 224733580,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190015
    },
    {
        "content": "<p>Or here to include all the binder refactor changes: <a href=\"https://github.com/rust-lang/rust/compare/master...jackh726:binder-refactor-rebase\">https://github.com/rust-lang/rust/compare/master...jackh726:binder-refactor-rebase#</a></p>",
        "id": 224733672,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190043
    },
    {
        "content": "<p>But basically, that's a lot of background/explanation to essentially ask: What the heck should we do here?</p>",
        "id": 224733719,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224733427\">said</a>:</p>\n<blockquote>\n<p>But because the second, we expect <code>for&lt;'a&gt; &lt;&lt;B as Beta&gt;::Gamma as Epsilon&lt;'^0.0&gt;&gt;::Zeta: Eta</code></p>\n</blockquote>\n<p>\"the second\"?</p>",
        "id": 224733733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224733733\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224733427\">said</a>:</p>\n<blockquote>\n<p>But because the second, we expect <code>for&lt;'a&gt; &lt;&lt;B as Beta&gt;::Gamma as Epsilon&lt;'^0.0&gt;&gt;::Zeta: Eta</code></p>\n</blockquote>\n<p>\"the second\"?</p>\n</blockquote>\n<p>oops, meant to say for the second function</p>",
        "id": 224733798,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224733327\">said</a>:</p>\n<blockquote>\n<p>Basically, for <code>where_bound_region_forall2</code>, we're generating a trait ref <code>for&lt;&gt; &lt;&lt;B as Beta&gt;::Gamma as Epsilon&lt;'^1.0&gt;&gt;::Zeta: Eta</code></p>\n</blockquote>\n<p>is the <code>^1.0</code> intentionally escaping here?</p>",
        "id": 224733896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190149
    },
    {
        "content": "<p>i.e., it is not referencing the <code>for</code>, right?</p>",
        "id": 224733910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224733332\">said</a>:</p>\n<blockquote>\n<p>(I will say that I feel like if we have to 'renumber' indices that is a \"yellow flag\")</p>\n</blockquote>\n<p>Right, which is why I think/thought the approach of assigning indices <em>late</em> would be good</p>",
        "id": 224733968,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190167
    },
    {
        "content": "<p>But it really just is completely different from how it's done now</p>",
        "id": 224733999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190187
    },
    {
        "content": "<p>Part of that thought is really thinking about <em>when</em> and <em>where</em> we need to know \"we're <em>actually</em> nested in <code>for</code>s\" instead of \"we're generating a predicate with these lifetimes in scope\"</p>",
        "id": 224734113,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190250
    },
    {
        "content": "<p>hmm</p>",
        "id": 224734317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190343
    },
    {
        "content": "<p>I'm feeling like this cannot be simply answered</p>",
        "id": 224734328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190350
    },
    {
        "content": "<p>I'm thinking maybe we need to schedule a longer deep dive to pour over the PR</p>",
        "id": 224734350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190362
    },
    {
        "content": "<p>but it might also be useful</p>",
        "id": 224734367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190372
    },
    {
        "content": "<p>to step back from the grungy details of what you're doing <em>now</em> to how we kind of <em>expect</em> it to work</p>",
        "id": 224734386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190383
    },
    {
        "content": "<p>Also fair</p>",
        "id": 224734502,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190422
    },
    {
        "content": "<p>I will note: this is all super straightfoward if you don't have to think about associated type bounds :)</p>",
        "id": 224734552,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190450
    },
    {
        "content": "<p>do you mean the <code>Foo&lt;A: Bar&gt;</code> things?</p>",
        "id": 224734590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190467
    },
    {
        "content": "<p>yeah</p>",
        "id": 224734607,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190474
    },
    {
        "content": "<p>But no, I have to go and generate pesky examples like <code>T: for&lt;'l, 'i&gt; H&lt;'l, 'i, As: for&lt;'l, 'i, 'j&gt; H&lt;'j, 'i, As: for&lt;'l, 'i, 'j, 'k&gt; H&lt;'l, 'k, As = X&lt;'j, 'k&gt;&gt; + 'j&gt; + 'i&gt;</code></p>",
        "id": 224734627,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190487
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    B: Beta&lt;Gamma: for&lt;&#39;a&gt; Epsilon&lt;&#39;a, Zeta: Eta&gt;&gt;,\n</code></pre></div>",
        "id": 224734667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190511
    },
    {
        "content": "<p>so for this...</p>",
        "id": 224734735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190524
    },
    {
        "content": "<p>(I've also <em>added</em> to the test suite around these in the PR since I've thought about this and realized that the current tests in this area are lacking)</p>",
        "id": 224734773,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190540
    },
    {
        "content": "<p>ugh, the nested bounds :)</p>",
        "id": 224734818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224734818\">said</a>:</p>\n<blockquote>\n<p>ugh, the nested bounds :)</p>\n</blockquote>\n<p>That's been my last 2 or so weeks</p>",
        "id": 224734847,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190578
    },
    {
        "content": "<ul>\n<li><code>for&lt;'a&gt; &lt;&lt;B as Beta&gt;::Gamma as Epsilon&lt;'a&gt;&gt;::Zeta: Eta</code></li>\n</ul>",
        "id": 224734931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190622
    },
    {
        "content": "<p>that is what I expect, for sure</p>",
        "id": 224735122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190709
    },
    {
        "content": "<p>Okay, that's...probably what I expect too</p>",
        "id": 224735161,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190729
    },
    {
        "content": "<p>probably I expect multiple predciates</p>",
        "id": 224735315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190791
    },
    {
        "content": "<p>have to step afk for a bit</p>",
        "id": 224735332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612190800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224735315\">said</a>:</p>\n<blockquote>\n<p>probably I expect multiple predciates</p>\n</blockquote>\n<p>Yeah, <code>for&lt;&gt; B: Beta</code>, <code>for&lt;'a&gt; &lt;B as Beta::Gamma: Epsilon&lt;'a&gt;</code>, and <code>for&lt;'a&gt; &lt;&lt;B as Beta&gt;::Gamma as Epsilon&lt;'a&gt;&gt;::Zeta: Eta</code></p>",
        "id": 224735496,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190867
    },
    {
        "content": "<p>Okay, then, how does interact, e.g. with trait objects?</p>",
        "id": 224735616,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190908
    },
    {
        "content": "<p>My example (<code>fn foo2&lt;'a&gt;(_: Box&lt;dyn for&lt;'b&gt; A&lt;'a, 'b, As = &amp;dyn A&lt;'a, 'b, As = B&lt;'a, 'b&gt;&gt;&gt;&gt;) {}</code>) has this as an input type, but you can generate a similar example where that is in a where clause</p>",
        "id": 224735700,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612190953
    },
    {
        "content": "<p>And the question is: would the bound vars in predicate for the inner <code>As = ...</code> have a db index of 0 (so, the bound vars \"trickle\" down), or 1 (so, we are referencing the <code>dyn</code> binders)</p>",
        "id": 224735962,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612191056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224735616\">said</a>:</p>\n<blockquote>\n<p>Okay, then, how does interact, e.g. with trait objects?</p>\n</blockquote>",
        "id": 224736669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191363
    },
    {
        "content": "<p>so...wf and trait objects has been a tricky question for a long time</p>",
        "id": 224736714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191385
    },
    {
        "content": "<p>I'm aware of a bit of it haha</p>",
        "id": 224736757,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612191406
    },
    {
        "content": "<p>that said</p>",
        "id": 224736784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191415
    },
    {
        "content": "<p>I can also just imagine a system that <em>all</em> late bound vars get concatenated together for predicates</p>",
        "id": 224737194,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612191570
    },
    {
        "content": "<p>And that should mean that predicates would no longer have escaping bound vars</p>",
        "id": 224737279,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612191600
    },
    {
        "content": "<p>so..predicates should not have escaping bound vars</p>",
        "id": 224737358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191617
    },
    {
        "content": "<p>but it depends on what you mean by escaping</p>",
        "id": 224737370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191622
    },
    {
        "content": "<p>Well, when I removed that filter</p>",
        "id": 224737445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612191653
    },
    {
        "content": "<p>The only predicates I saw (but there could be others) that had escaping bound vars</p>",
        "id": 224737513,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612191676
    },
    {
        "content": "<p>Were ones where you have a <code>T: FnOnce(...)</code> bound</p>",
        "id": 224737554,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612191692
    },
    {
        "content": "<p>ok so</p>",
        "id": 224737555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191692
    },
    {
        "content": "<p>the challenge with trait objects</p>",
        "id": 224737564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191697
    },
    {
        "content": "<p>(or <code>Fn</code>/<code>FnMut</code>)</p>",
        "id": 224737583,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612191704
    },
    {
        "content": "<p>and WF in general</p>",
        "id": 224737584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191704
    },
    {
        "content": "<p>around higher-ranked things, anyway</p>",
        "id": 224737621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191716
    },
    {
        "content": "<p>is that there are implied relationships between the regions -- e.g., <code>for&lt;'a, 'b&gt; fn(&amp;'a &amp;'b u32)</code>, for that reference type to be valid, <code>'b: 'a</code> must hold</p>",
        "id": 224737750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191756
    },
    {
        "content": "<p>but there is no \"where clause\" in the Rust notation to indicate that</p>",
        "id": 224737782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191764
    },
    {
        "content": "<p>right</p>",
        "id": 224737851,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612191786
    },
    {
        "content": "<p>so if you did what seems like the <em>right thing</em>, you would generate a predicate like <code>for&lt;'a, 'b&gt; { 'b: 'a }</code> which would fail</p>",
        "id": 224737854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191787
    },
    {
        "content": "<p>what we do instead is to skip those, but then, when those <code>for</code> clauses are instantiated with concrete regions, we impose the WF checks <em>then</em></p>",
        "id": 224737913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191805
    },
    {
        "content": "<p>I'd prefer to change this but never mind</p>",
        "id": 224737932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191813
    },
    {
        "content": "<p>Oh, oof, I see</p>",
        "id": 224737957,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612191821
    },
    {
        "content": "<p>Why is this so difficult lol</p>",
        "id": 224738146,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612191877
    },
    {
        "content": "<p>so how does this apply to your example...</p>",
        "id": 224738183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224735700\">said</a>:</p>\n<blockquote>\n<p>My example (<code>fn foo2&lt;'a&gt;(_: Box&lt;dyn for&lt;'b&gt; A&lt;'a, 'b, As = &amp;dyn A&lt;'a, 'b, As = B&lt;'a, 'b&gt;&gt;&gt;&gt;) {}</code>) has this as an input type, but you can generate a similar example where that is in a where clause</p>\n</blockquote>",
        "id": 224738203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191901
    },
    {
        "content": "<p>so yeah basically we would not generate much in the way of WF conditions</p>",
        "id": 224738292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191942
    },
    {
        "content": "<p><em>untily</em> you invoked a method on the <code>dyn</code></p>",
        "id": 224738319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191956
    },
    {
        "content": "<p>or accessed a member</p>",
        "id": 224738323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191959
    },
    {
        "content": "<p>which would cause us to instantiate <code>'b</code> with a concrete region</p>",
        "id": 224738384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191968
    },
    {
        "content": "<p>which would mean you have a non-polymorphic <code>A&lt;'A, 'B, As = &amp;dyn A&lt;'A, 'B...&gt;&gt;</code></p>",
        "id": 224738440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612191997
    },
    {
        "content": "<p>that's what the WF code is trying to do, anyway</p>",
        "id": 224738471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192009
    },
    {
        "content": "<p>I have to go now but maybe it's a good idea for us to schedule some more time to dig into this -- I guess we could do it on Tuesday</p>",
        "id": 224738526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192030
    },
    {
        "content": "<p>I'd sort of like to sketch what nested binders might look like</p>",
        "id": 224738542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192036
    },
    {
        "content": "<p>one thought I had is that maybe we want to have two copies of <code>Predicate</code></p>",
        "id": 224738565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192043
    },
    {
        "content": "<p>i.e., we might have one version that has nested binders</p>",
        "id": 224738576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192049
    },
    {
        "content": "<p>which we then \"compress\"</p>",
        "id": 224738584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192054
    },
    {
        "content": "<p>it seems like most phases of the compiler found it convenient to not have to think about nested binders</p>",
        "id": 224738632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192072
    },
    {
        "content": "<p>but I think that in the AST -&gt; TY phase, that is not true</p>",
        "id": 224738677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224738526\">said</a>:</p>\n<blockquote>\n<p>I have to go now but maybe it's a good idea for us to schedule some more time to dig into this -- I guess we could do it on Tuesday</p>\n</blockquote>\n<p>Tuesday works</p>",
        "id": 224738702,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224738632\">said</a>:</p>\n<blockquote>\n<p>it seems like most phases of the compiler found it convenient to not have to think about nested binders</p>\n</blockquote>\n<p>I think you're correct here</p>",
        "id": 224738744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192106
    },
    {
        "content": "<p>I think a lot of this \"depth/index math\" would  get much simpler if we could isolate it</p>",
        "id": 224738746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192106
    },
    {
        "content": "<p>in short, this feels like a classic case of trying to do \"too much lowering\" in one step</p>",
        "id": 224738807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192134
    },
    {
        "content": "<p>I think that we can get away with not worrying about \"nesting\" at all</p>",
        "id": 224738827,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192144
    },
    {
        "content": "<p>Just thinking about vars in scope</p>",
        "id": 224738853,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192153
    },
    {
        "content": "<p>But...I'm not sure how that fits into what you wrote above</p>",
        "id": 224738881,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192171
    },
    {
        "content": "<p>I might be wrong</p>",
        "id": 224738913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192187
    },
    {
        "content": "<p>I guess I should make a point to read your PR and be familiar with it before Tuesday</p>",
        "id": 224738936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192200
    },
    {
        "content": "<p>which I can do :)</p>",
        "id": 224738939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192201
    },
    {
        "content": "<p>Well...most of the PR is actually pretty straightforward</p>",
        "id": 224739019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192221
    },
    {
        "content": "<p>It's this one edge case bit that's thrown everything out of whack</p>",
        "id": 224739057,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192240
    },
    {
        "content": "<p>ok</p>",
        "id": 224739280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192332
    },
    {
        "content": "<p>I have to go do some other prep</p>",
        "id": 224739297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192340
    },
    {
        "content": "<p>But, I'll see if I can implement my scheme and see how it goes (famous last words)</p>",
        "id": 224739335,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192357
    },
    {
        "content": "<p>Okay, talk tomorrow!</p>",
        "id": 224739352,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192364
    },
    {
        "content": "<p>seems good</p>",
        "id": 224739356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192365
    },
    {
        "content": "<p>hopefully this helped a <em>little</em></p>",
        "id": 224739364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612192370
    },
    {
        "content": "<p>If nothing else, it helps me get things more straight in my mind</p>",
        "id": 224739417,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> are interested in helping out with this?</p>",
        "id": 225214517,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612468951
    },
    {
        "content": "<p>It's honestly making my head hurt lol</p>",
        "id": 225214539,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612468964
    },
    {
        "content": "<p>I'm interested in helping in whatever is around in this wg :)</p>",
        "id": 225214580,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612468986
    },
    {
        "content": "<p>mainly if someone more knowledgeable is around just in case :)</p>",
        "id": 225214632,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612469016
    },
    {
        "content": "<p>So, if you want to scroll through and read this thread starting from <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224730707\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor/near/224730707</a></p>",
        "id": 225214667,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612469031
    },
    {
        "content": "<p>That'll give you much of the background on the current problem to be solved</p>",
        "id": 225214725,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612469047
    },
    {
        "content": "<p>gonna try to finish <a href=\"https://github.com/rust-lang/rust/issues/80732\">#80732</a> first and then yeah <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 225214751,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612469064
    },
    {
        "content": "<p>Yeah, no problem :)</p>",
        "id": 225214839,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612469112
    },
    {
        "content": "<p>Honestly, I'm gonna take a couple days and not work on this (at least myself; I'm more than happy to discuss/mentor). After that, even if I did figure this out, there's plenty of related work for followup</p>",
        "id": 225215004,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612469179
    },
    {
        "content": "<p>Well, I don't know what example I used that failed, but I can't find a failing example when mixing hrtbs and atbs</p>",
        "id": 227540106,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614135125
    },
    {
        "content": "<p>So that's great <em>and</em> terrible</p>",
        "id": 227540145,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614135169
    },
    {
        "content": "<p>ah right, because I'm not confirming kinds</p>",
        "id": 227540503,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614135494
    },
    {
        "content": "<p>okay great, got it to repro</p>",
        "id": 227541314,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614136200
    }
]