[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so, I was looking at your <a href=\"https://github.com/rust-lang/chalk/pull/282\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/282\">zip_binders PR</a></p>",
        "id": 180629295,
        "sender_full_name": "tmandry",
        "timestamp": 1573654437
    },
    {
        "content": "<p>and the issue it fixes, which links to the <a href=\"https://github.com/rust-lang/chalk/blob/3ea7a60b73e202f2799efa8d711b633ed55b276a/src/test/unify.rs#L122-L145\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/3ea7a60b73e202f2799efa8d711b633ed55b276a/src/test/unify.rs#L122-L145\">equality_binder test</a></p>",
        "id": 180629378,
        "sender_full_name": "tmandry",
        "timestamp": 1573654456
    },
    {
        "content": "<p>yep</p>",
        "id": 180629392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654464
    },
    {
        "content": "<p>I have a question about that test</p>",
        "id": 180629398,
        "sender_full_name": "tmandry",
        "timestamp": 1573654467
    },
    {
        "content": "<p>(I'm reminded there was one comment that was niggling at me in that PR that I meant go back and adjust, but carry on)</p>",
        "id": 180629424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654479
    },
    {
        "content": "<p>yes, I think that comment was confusing me as well :)</p>",
        "id": 180629449,
        "sender_full_name": "tmandry",
        "timestamp": 1573654496
    },
    {
        "content": "<p>but also</p>",
        "id": 180629452,
        "sender_full_name": "tmandry",
        "timestamp": 1573654498
    },
    {
        "content": "<p>actually I believe it was referencing a different test</p>",
        "id": 180629469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654507
    },
    {
        "content": "<p>the issue, that is</p>",
        "id": 180629473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654509
    },
    {
        "content": "<p>I think that <code>equality_binder</code> test was behaving correctly before?</p>",
        "id": 180629489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654519
    },
    {
        "content": "<p>though I think I can also anticipate what your question is about it</p>",
        "id": 180629523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654528
    },
    {
        "content": "<p>I see that it generates a constraint for <code>?0</code> (which is <code>'a</code> in the <code>exists&lt;'a&gt;</code>) to equal <code>'!2_0</code> (which I think corresponds to <code>'c</code> in <code>for&lt;'c&gt;</code>)</p>",
        "id": 180629543,
        "sender_full_name": "tmandry",
        "timestamp": 1573654543
    },
    {
        "content": "<p>can such a constraint ever be satisfied?</p>",
        "id": 180629606,
        "sender_full_name": "tmandry",
        "timestamp": 1573654579
    },
    {
        "content": "<p>Yes and no</p>",
        "id": 180629615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654589
    },
    {
        "content": "<p>In this example, no</p>",
        "id": 180629621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654591
    },
    {
        "content": "<p>However</p>",
        "id": 180629649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654608
    },
    {
        "content": "<p>you could imagine an example like this</p>",
        "id": 180629662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654620
    },
    {
        "content": "<p>(..but in the <code>equality_binder2</code> test it can?)</p>",
        "id": 180629691,
        "sender_full_name": "tmandry",
        "timestamp": 1573654632
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>forall&lt;&#39;a&gt; {\n    forall&lt;T&gt; {\n        forall&lt;&#39;b&gt; {\n            if (&#39;a: &#39;b, &#39;b: &#39;a) {\n                T = &amp;&#39;b u32\n            }\n        }\n    }\n}\n</pre></div>",
        "id": 180629730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654669
    },
    {
        "content": "<p>Sorry, like that</p>",
        "id": 180629794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654688
    },
    {
        "content": "<p>In this case, 'b cannot be named by T</p>",
        "id": 180629826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654708
    },
    {
        "content": "<p>but 'a <em>can</em></p>",
        "id": 180629833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654712
    },
    {
        "content": "<p>and 'b is equivalent to 'a</p>",
        "id": 180629840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654717
    },
    {
        "content": "<p>chalk can't really reason about that</p>",
        "id": 180629845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654721
    },
    {
        "content": "<p>this is actually a topic I would like to use as an upcoming design meeting</p>",
        "id": 180629860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654728
    },
    {
        "content": "<p>right, okay</p>",
        "id": 180629870,
        "sender_full_name": "tmandry",
        "timestamp": 1573654739
    },
    {
        "content": "<p>as I've not fully tried to write out all my thoughts about it</p>",
        "id": 180629897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654746
    },
    {
        "content": "<p>but I do not think it is chalk's job to solve these sorts of things, in short</p>",
        "id": 180629933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654761
    },
    {
        "content": "<p>or .. well, it's a mix</p>",
        "id": 180629937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654767
    },
    {
        "content": "<p>I want chalk to do some of this work, and export some of it to polonius :)</p>",
        "id": 180629956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654775
    },
    {
        "content": "<p>anyway, the setup as is is not I think quite perfect, but basically what it tries to do right <em>now</em> is to always generate a constraint, and not assume much of anything</p>",
        "id": 180629988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654800
    },
    {
        "content": "<p>yeah, I'm a little confused by that.. clearly in the logic we have stuff that requires \"reasoning about lifetimes,\" e.g. your example :)</p>",
        "id": 180630041,
        "sender_full_name": "tmandry",
        "timestamp": 1573654806
    },
    {
        "content": "<p>well</p>",
        "id": 180630073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654818
    },
    {
        "content": "<p>I would draw the line there</p>",
        "id": 180630083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654821
    },
    {
        "content": "<p>the trait solver does not, for the most part, reason about lifetimes</p>",
        "id": 180630109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654835
    },
    {
        "content": "<p>nor does the type-checker</p>",
        "id": 180630122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654843
    },
    {
        "content": "<p>but I think it <em>should</em> be able to reason a <em>bit</em> about them, specifically in connection with universes</p>",
        "id": 180630140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654857
    },
    {
        "content": "<blockquote>\n<p>the trait solver does not, for the most part, reason about lifetimes</p>\n</blockquote>\n<p>this statment is maybe too strong</p>",
        "id": 180630174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654888
    },
    {
        "content": "<p>what I mean is, it doesn't really know which lifetimes outlive which other ones</p>",
        "id": 180630183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654895
    },
    {
        "content": "<p>that is more of an <em>output</em> from trait solving</p>",
        "id": 180630195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654903
    },
    {
        "content": "<p>which lifetimes <em>must</em> outlive which other ones</p>",
        "id": 180630199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654906
    },
    {
        "content": "<p>that is fed into polonius to see if it is satisfiable</p>",
        "id": 180630206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654914
    },
    {
        "content": "<p>okay, right</p>",
        "id": 180630266,
        "sender_full_name": "tmandry",
        "timestamp": 1573654934
    },
    {
        "content": "<p>(but Polonius shouldn't have the job of figuring out the hgiher-ranked relationships, that's something we can figure out)</p>",
        "id": 180630271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654938
    },
    {
        "content": "<p>this is related to some pending rustc PRs too</p>",
        "id": 180630291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654959
    },
    {
        "content": "<p>I guess one thing I'm missing is, what does chalk <em>do</em> with the <code>'a: 'b, 'b: 'a</code> condition above?</p>",
        "id": 180630296,
        "sender_full_name": "tmandry",
        "timestamp": 1573654965
    },
    {
        "content": "<p>right now, nothing</p>",
        "id": 180630308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654976
    },
    {
        "content": "<p>in fact, we can't even express that right now I don't think</p>",
        "id": 180630319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654983
    },
    {
        "content": "<p>but I think eventually it would use that</p>",
        "id": 180630343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573654992
    },
    {
        "content": "<p>specifically when it sees a <code>'a: 'b</code> that is must prove, it would use logic like this:</p>",
        "id": 180630360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655007
    },
    {
        "content": "<ul>\n<li>if both regions are in root universe, generate the consrtaint as an output (more on this in a sec) for polonius to solve</li>\n</ul>",
        "id": 180630377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655019
    },
    {
        "content": "<ul>\n<li>but if one of them  (say 'b, as in this case) is a placeholder, search the environment for things like <code>'x: 'b</code></li>\n</ul>",
        "id": 180630481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655046
    },
    {
        "content": "<p>in which case, we can try to prove <code>'a: 'x</code></p>",
        "id": 180630499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655058
    },
    {
        "content": "<p>the goal would be eventually to find root regions we can convert to outputs</p>",
        "id": 180630634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655079
    },
    {
        "content": "<p>I've mocked this up in lambda prolog</p>",
        "id": 180630648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655086
    },
    {
        "content": "<p>I've been meaning to mock it up in chalk...</p>",
        "id": 180630661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655092
    },
    {
        "content": "<p>there would also be a base rule that <code>forall&lt;'x&gt; { 'static: 'x }</code></p>",
        "id": 180630687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655109
    },
    {
        "content": "<p>anway if you apply it to this example, the output would be some constraints like <code>'a: 'a</code>, which is clearly true</p>",
        "id": 180630709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655124
    },
    {
        "content": "<p>(And we could just filter them out)</p>",
        "id": 180630718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655130
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 180630739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655142
    },
    {
        "content": "<p>hmm I think so</p>",
        "id": 180630753,
        "sender_full_name": "tmandry",
        "timestamp": 1573655154
    },
    {
        "content": "<p>you are motivating me to try and write this up</p>",
        "id": 180630845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655188
    },
    {
        "content": "<p>so it seems like, very naively, you could end up with complex constraints which introduced their own binders</p>",
        "id": 180630854,
        "sender_full_name": "tmandry",
        "timestamp": 1573655191
    },
    {
        "content": "<p>yes can have complex constraints, but they will not have their own binders</p>",
        "id": 180630878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655203
    },
    {
        "content": "<p>our current constraints do</p>",
        "id": 180630884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655205
    },
    {
        "content": "<p>but this is a shift from that approach</p>",
        "id": 180630891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655211
    },
    {
        "content": "<p>and are basically a \"subset of chalk goals involving only lifetimes\"</p>",
        "id": 180630895,
        "sender_full_name": "tmandry",
        "timestamp": 1573655214
    },
    {
        "content": "<p>the idea is that chalk can handle the binders, in short, but it <em>can't</em> figure out the root constraints</p>",
        "id": 180630915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655225
    },
    {
        "content": "<p>okay, I see</p>",
        "id": 180630921,
        "sender_full_name": "tmandry",
        "timestamp": 1573655230
    },
    {
        "content": "<p>one downside is</p>",
        "id": 180630929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655238
    },
    {
        "content": "<p>that we wll get cosnrtaints like <code>'a: 'b || 'a: 'c</code></p>",
        "id": 180630940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655246
    },
    {
        "content": "<p>that's nonobvious to me, but interesting</p>",
        "id": 180630942,
        "sender_full_name": "tmandry",
        "timestamp": 1573655247
    },
    {
        "content": "<p>i.e., one of these must be true, but not both</p>",
        "id": 180630950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655253
    },
    {
        "content": "<p>but that is already true</p>",
        "id": 180630952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655255
    },
    {
        "content": "<p>we have to deal with it somehow, i'm not sure the best way to handle it</p>",
        "id": 180630960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655264
    },
    {
        "content": "<p>right, I remember us talking about that</p>",
        "id": 180630969,
        "sender_full_name": "tmandry",
        "timestamp": 1573655269
    },
    {
        "content": "<p>today's rustc sometimes just gives ambiguous results</p>",
        "id": 180630970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655270
    },
    {
        "content": "<p>I would like to get to the point where we have that problem</p>",
        "id": 180631022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655285
    },
    {
        "content": "<p>and then worry about it :)</p>",
        "id": 180631024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655287
    },
    {
        "content": "<p>for now I think we can be conservative, rustc presently is</p>",
        "id": 180631036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655296
    },
    {
        "content": "<p>at least I think so :)</p>",
        "id": 180631042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655300
    },
    {
        "content": "<p>:)</p>",
        "id": 180631053,
        "sender_full_name": "tmandry",
        "timestamp": 1573655304
    },
    {
        "content": "<p>in short I want to isolate that problem to the \"interface\" betwen chalk and polonius</p>",
        "id": 180631067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655319
    },
    {
        "content": "<p>chalk can generate the precise constraint</p>",
        "id": 180631073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655323
    },
    {
        "content": "<p>maybe we simplify it, or make it more conservative, and then hand it off to polonius</p>",
        "id": 180631087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655329
    },
    {
        "content": "<p>or maybe we even run polonius many times (one for each <code>||</code>)</p>",
        "id": 180631101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655337
    },
    {
        "content": "<p>until we find a sol'n</p>",
        "id": 180631102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655340
    },
    {
        "content": "<p>that's the worst case</p>",
        "id": 180631112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655343
    }
]