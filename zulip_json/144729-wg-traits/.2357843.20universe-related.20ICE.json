[
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ...</p>",
        "id": 157108040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548771804
    },
    {
        "content": "<p>probably I should indeed make my own local build, but can you convey what the type is which is failing the assertion?</p>",
        "id": 157108059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548771839
    },
    {
        "content": "<p>I'll attempt to do so</p>",
        "id": 157108112,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548771855
    },
    {
        "content": "<p><code>std::boxed::Box&lt;[closure@../../issue-57843-ice-with-cloneablefn.rs:12:18: 12:24]&gt;</code></p>",
        "id": 157108129,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548771878
    },
    {
        "content": "<p>i.e. the closure in the <code>fn main</code></p>",
        "id": 157108142,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548771897
    },
    {
        "content": "<p>which is somewhat unsurprising given that the ICE goes away when one adds a type-annotation to the closure formal parameter</p>",
        "id": 157108172,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548771928
    },
    {
        "content": "<p>maybe with <code>-Zverbose</code>?</p>",
        "id": 157108175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548771933
    },
    {
        "content": "<p>that was with <code>-Z verbose</code></p>",
        "id": 157108182,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548771941
    },
    {
        "content": "<p>hmm</p>",
        "id": 157108186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548771948
    },
    {
        "content": "<p>is the problem that it has a placeholder in it?</p>",
        "id": 157108191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548771952
    },
    {
        "content": "<p>the type in question has <code>needs_infer: false, has_ty_placholders: false, has_re_placholders: true</code></p>",
        "id": 157108193,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548771958
    },
    {
        "content": "<p>yes</p>",
        "id": 157108196,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548771962
    },
    {
        "content": "<p>i.e. the region placeholder</p>",
        "id": 157108243,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548771966
    },
    {
        "content": "<p>oh let me just gist my log</p>",
        "id": 157108258,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548771987
    },
    {
        "content": "<p>yes ok</p>",
        "id": 157108274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548772009
    },
    {
        "content": "<p><a href=\"https://gist.github.com/070ea7fe4b4a95c8129c06694cbeb457\" target=\"_blank\" title=\"https://gist.github.com/070ea7fe4b4a95c8129c06694cbeb457\">https://gist.github.com/070ea7fe4b4a95c8129c06694cbeb457</a></p>",
        "id": 157108275,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548772009
    },
    {
        "content": "<p>I can <em>sort of</em> see what's happening</p>",
        "id": 157108282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548772014
    },
    {
        "content": "<p>(this is after I added a couple of <code>debug!</code> statements)</p>",
        "id": 157108310,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548772036
    },
    {
        "content": "<p>and with <code>RUST_LOG=rustc::traits,rustc::infer,rustc::ty::sty,rustc::infer::higher_ranked,rustc_typeck::check</code></p>",
        "id": 157108387,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548772090
    },
    {
        "content": "<p>(ok, doing a local build)</p>",
        "id": 157108436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548772157
    },
    {
        "content": "<p>but also skimming some of the closure code</p>",
        "id": 157108457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548772191
    },
    {
        "content": "<p>so as part of the instrumentation I added <code>debug!</code> for the (few) places where <code>RePlaceholder</code> are created</p>",
        "id": 157108542,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548772228
    },
    {
        "content": "<p>just to leave a few random notes</p>",
        "id": 157108553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548772243
    },
    {
        "content": "<p>there are only two lines that correspond to <code>RePlaceholder(Placeholder { universe: U6, name: BrNamed(crate0:DefIndex(1:14), 'a) })</code></p>",
        "id": 157108558,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548772247
    },
    {
        "content": "<ul>\n<li>we're going to <a href=\"https://github.com/rust-lang/rust/blob/106b3e9fa4d53efc4e8eab47d1043789c88f99a5/src/librustc_typeck/check/closure.rs#L54\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/106b3e9fa4d53efc4e8eab47d1043789c88f99a5/src/librustc_typeck/check/closure.rs#L54\">deduce an expected signature</a></li>\n<li>we'll invoke <a href=\"https://github.com/rust-lang/rust/blob/106b3e9fa4d53efc4e8eab47d1043789c88f99a5/src/librustc_typeck/check/closure.rs#L80\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/106b3e9fa4d53efc4e8eab47d1043789c88f99a5/src/librustc_typeck/check/closure.rs#L80\"><code>sig_of_closure</code></a></li>\n<li>leading to <a href=\"https://github.com/rust-lang/rust/blob/106b3e9fa4d53efc4e8eab47d1043789c88f99a5/src/librustc_typeck/check/closure.rs#L374-L380\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/106b3e9fa4d53efc4e8eab47d1043789c88f99a5/src/librustc_typeck/check/closure.rs#L374-L380\"><code>sig_of_closure_with_expectation</code></a></li>\n</ul>",
        "id": 157108628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548772315
    },
    {
        "content": "<p><a href=\"https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L3715\" target=\"_blank\" title=\"https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L3715\">https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L3715</a></p>",
        "id": 157108679,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548772325
    },
    {
        "content": "<p><a href=\"https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L3779\" target=\"_blank\" title=\"https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L3779\">https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L3779</a></p>",
        "id": 157108688,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548772333
    },
    {
        "content": "<p>...which creates <a href=\"https://github.com/rust-lang/rust/blob/106b3e9fa4d53efc4e8eab47d1043789c88f99a5/src/librustc_typeck/check/closure.rs#L640-L641\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/106b3e9fa4d53efc4e8eab47d1043789c88f99a5/src/librustc_typeck/check/closure.rs#L640-L641\">the liberated signature</a>...</p>",
        "id": 157108730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548772368
    },
    {
        "content": "<p>hmm, I don't see anything obviously wrong with <em>this</em> path</p>",
        "id": 157108766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548772400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> the type which winds up being invalid, what is it the type of?</p>",
        "id": 157108776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548772412
    },
    {
        "content": "<p>oh, my build is done</p>",
        "id": 157108779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548772413
    },
    {
        "content": "<p>er, no it's not</p>",
        "id": 157108787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548772422
    },
    {
        "content": "<p>the Boxed closure?</p>",
        "id": 157108808,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548772439
    },
    {
        "content": "<p>I guess I can browser your gist</p>",
        "id": 157108846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548772443
    },
    {
        "content": "<p>here: <a href=\"https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L5539\" target=\"_blank\" title=\"https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L5539\">https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L5539</a></p>",
        "id": 157108884,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548772470
    },
    {
        "content": "<p>but I think I must misunderstand your Q, since \"boxed closure\" is what I pasted up above</p>",
        "id": 157108925,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548772502
    },
    {
        "content": "<p>hmm</p>",
        "id": 157109110,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548772638
    },
    {
        "content": "<p>my debug log doesn't show a call to sig_of_closure_with_expectation</p>",
        "id": 157109119,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548772647
    },
    {
        "content": "<p>but even <code>sig_of_closure_no_expectation</code> will also go down into <code>closure_sigs</code> which is what is calling <code>liberate_late_bound_regions</code> ..</p>",
        "id": 157109398,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548772855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I'm poking at your log, sorry, still trying to understand just where the placeholder is/comes from. I really dislike how types print out, even with <code>-Zverbose</code> :(</p>",
        "id": 157109421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548772879
    },
    {
        "content": "<p>no need to be sorry; hearing you being unsure about where they arise makes me feel less dumb about my own inability to determine it</p>",
        "id": 157109445,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548772911
    },
    {
        "content": "<p>I <em>believe</em> they are coming from <code>rustc::traits::select::match_impl</code></p>",
        "id": 157109580,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548773000
    },
    {
        "content": "<p>(but maybe you want to identify the culprit further from the hot end of the call stack)</p>",
        "id": 157109675,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548773061
    },
    {
        "content": "<p>maybe you can supply me with higher level understanding of the design here</p>",
        "id": 157109889,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548773269
    },
    {
        "content": "<p>I infer that that placeholders (of any kind, region or type) are not meant to show up in the tables that we write into in <code>writeback.rs</code>, right?</p>",
        "id": 157109958,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548773302
    },
    {
        "content": "<p>so the code that does <code>replace_bound_vars_with_placeholders</code> ... is that only supposed to be creating types that are just temporary objects that we use for e.g. comparisons with other types, and then discard?</p>",
        "id": 157110011,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548773355
    },
    {
        "content": "<p>right</p>",
        "id": 157110158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548773485
    },
    {
        "content": "<p>what should be happening is that we create placeholders</p>",
        "id": 157110163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548773491
    },
    {
        "content": "<p>but if they wind up related to some inference variable</p>",
        "id": 157110170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548773498
    },
    {
        "content": "<p>that would appear in the writeback table</p>",
        "id": 157110175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548773502
    },
    {
        "content": "<p>then the varibale is in an earlier universe that cannot contain the placeholder</p>",
        "id": 157110185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548773510
    },
    {
        "content": "<p>and hence gets changed during inference</p>",
        "id": 157110192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548773514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> i think maybe I found the problem</p>",
        "id": 157113344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548776319
    },
    {
        "content": "<p>I'm all ears</p>",
        "id": 157113363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548776347
    },
    {
        "content": "<p>let me double check one thing</p>",
        "id": 157113369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548776356
    },
    {
        "content": "<p>ok I haven't quite proven it yet <em>but</em></p>",
        "id": 157113690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548776641
    },
    {
        "content": "<p>I'm pretty sure the problem is this 'opportunistic region resolve' thing</p>",
        "id": 157113742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548776650
    },
    {
        "content": "<p>right now, if we have a <code>make_eqregion</code> call, we unify region variables</p>",
        "id": 157113754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548776665
    },
    {
        "content": "<p>but if they are in different universes</p>",
        "id": 157113761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548776671
    },
    {
        "content": "<p>I think this can cause the placeholder to leak out</p>",
        "id": 157113769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548776675
    },
    {
        "content": "<p>we're not using a universe-aware unification, in other words</p>",
        "id": 157113783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548776693
    },
    {
        "content": "<p>hmm</p>",
        "id": 157113921,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548776783
    },
    {
        "content": "<p>that sounds more subtle than what I was hoping for</p>",
        "id": 157113926,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548776795
    },
    {
        "content": "<p>but an understandable oversight, I guess</p>",
        "id": 157113940,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548776811
    },
    {
        "content": "<p>I'm still trrying to \"prove it\"</p>",
        "id": 157115274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548777959
    },
    {
        "content": "<p>not sure the best fix</p>",
        "id": 157115316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548777966
    },
    {
        "content": "<p>I <em>might</em> be wrong</p>",
        "id": 157115367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548778036
    },
    {
        "content": "<p>although <em>if</em> I am, it sort of suggests another possible bug lurking :)</p>",
        "id": 157115446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548778086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ok I thnk i'm wrong</p>",
        "id": 157115492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548778146
    },
    {
        "content": "<p>but I think know what the bug is <em>now</em></p>",
        "id": 157115496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548778149
    },
    {
        "content": "<p>well, it seems like I am wrong again. I <em>thought</em> the problem (which seems like maybe <em>another</em> bug lurking) had to do with type generalization using the wrong universes.</p>",
        "id": 157120705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782283
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> maybe it'd be interesting tomorrow morning to try and walk through this a bit together, though my schedule tomorrow likely doesn't mesh with yours (I think I am available only starting at 11:00 UTC-05:00)</p>",
        "id": 157120798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782361
    },
    {
        "content": "<p>yeah that's around when I have to leave to pick up Logan</p>",
        "id": 157175768,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548843673
    },
    {
        "content": "<p>though actually: You know, I could just leave earlier and work from home before then</p>",
        "id": 157175774,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548843696
    },
    {
        "content": "<p>that would allow us to work together for maybe 25 minutes or so, starting at 11:00 UTC-05:00</p>",
        "id": 157175783,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548843718
    },
    {
        "content": "<p>ok let's do that</p>",
        "id": 157183391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548851424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ping</p>",
        "id": 157197873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548864131
    },
    {
        "content": "<p>argh</p>",
        "id": 157197976,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548864211
    },
    {
        "content": "<p>I didn't actually leave in time</p>",
        "id": 157197985,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548864222
    },
    {
        "content": "<p>because I got nerd-sniped doing <a href=\"https://github.com/rust-lang/rust/issues/57735\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57735\">#57735</a></p>",
        "id": 157198027,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548864243
    },
    {
        "content": "<p>so I just cannot do a pair up right now; I have to leave too soon. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 157198068,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548864280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> no worries, maybe I'll dig a bit and leave some more notes?</p>",
        "id": 157198141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548864357
    },
    {
        "content": "<p>sure. sorry for failing to live up to the proposal</p>",
        "id": 157198206,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548864387
    },
    {
        "content": "<p>We could try to sync up a bit tomorrow morning before compiler meeting (though I know you often do pre-triage) or Friday, too</p>",
        "id": 157198207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548864387
    },
    {
        "content": "<p>well, it was a bit tight</p>",
        "id": 157198216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548864391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> so I wasn't able to follow up on this</p>",
        "id": 157281521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548950189
    },
    {
        "content": "<p>but I still want to =)</p>",
        "id": 157281523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548950194
    },
    {
        "content": "<p>Do you have time tomorrow?</p>",
        "id": 157281533,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548950202
    },
    {
        "content": "<p>Do you think you'd like to try pairing tomorrow morning?</p>",
        "id": 157281535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548950204
    },
    {
        "content": "<p>Yeah, Friday is relatively free for me right now</p>",
        "id": 157281541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548950214
    },
    {
        "content": "<p>yeah sure</p>",
        "id": 157281542,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548950215
    },
    {
        "content": "<p>the only thing I want to do is go over all the homework for Berlin. :)</p>",
        "id": 157281561,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548950228
    },
    {
        "content": "<p>but we should carve out time for this</p>",
        "id": 157281568,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548950238
    },
    {
        "content": "<p>Your schedule is more constrained than mine. Do you have a time in mind?</p>",
        "id": 157281669,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548950317
    },
    {
        "content": "<p>If not then you can just ping me.</p>",
        "id": 157281681,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548950329
    },
    {
        "content": "<p>oh wait, let me check something</p>",
        "id": 157281718,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548950359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I was imagining 9am UTC-5</p>",
        "id": 157283077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548951453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is that, like, now?</p>",
        "id": 157354810,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549030064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> would've been, but I got held up</p>",
        "id": 157355715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549031012
    },
    {
        "content": "<p>Also, I had in mind doing a video chat, but for .. reasons .. I'm holed up in a cafe now. But I would be happy to chat back and forth a bit on Zulip</p>",
        "id": 157355742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549031042
    },
    {
        "content": "<p>regardless I plan to spend some time investigating</p>",
        "id": 157355778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549031047
    },
    {
        "content": "<p>So, some notes:</p>\n<ul>\n<li>the region variable that is being resolved to a placeholder is <code>'_#3r</code></li>\n</ul>",
        "id": 157356482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549031667
    },
    {
        "content": "<ul>\n<li>I <strong>believe</strong> it comes from the type variable <code>'_#9t</code></li>\n</ul>",
        "id": 157356504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549031693
    },
    {
        "content": "<p>but I'm trying to remember why I thought that</p>",
        "id": 157356533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549031712
    },
    {
        "content": "<p>the output of closure types is super unhelpful here</p>",
        "id": 157356553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549031739
    },
    {
        "content": "<p>Maybe we should revise their output under -Z verbose</p>",
        "id": 157356672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549031840
    },
    {
        "content": "<p>anyway sure lets chat here for maybe 20minutes; I am going to attempt to take Logan to his first trip to a barber after that.</p>",
        "id": 157356777,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549031924
    },
    {
        "content": "<blockquote>\n<p>Maybe we should revise their output under -Z verbose</p>\n</blockquote>\n<p>I'm doing that now to double check a few things</p>",
        "id": 157356790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549031941
    },
    {
        "content": "<p>but what I <strong>believe</strong> is that <code>_#9t</code> is the type variable we use to represent the closure signature</p>",
        "id": 157356804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549031953
    },
    {
        "content": "<p>in any case, <code>'_#9t</code> gets created when we are doing some trait solving</p>",
        "id": 157356817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549031969
    },
    {
        "content": "<p>at first I was confused because</p>",
        "id": 157356838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549031990
    },
    {
        "content": "<p>I presumed that the placeholder from U6 was \"leaking\" into a variable where it didn't belong</p>",
        "id": 157356849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549031999
    },
    {
        "content": "<p>the basic idea being that any type which writeback is trying to resolve</p>",
        "id": 157356904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032006
    },
    {
        "content": "<p>should be in universe 0</p>",
        "id": 157357009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032110
    },
    {
        "content": "<p>and hence not able to contain placeholders</p>",
        "id": 157357011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032114
    },
    {
        "content": "<p>but for some reason <code>'_#9t</code> <em>is</em> defined in universe 6 I believe</p>",
        "id": 157357064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032125
    },
    {
        "content": "<p>the hypothesized \"leaking\" was occurring due to this line: <a href=\"https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L3735\" target=\"_blank\" title=\"https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L3735\">https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L3735</a> ?</p>",
        "id": 157357371,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549032375
    },
    {
        "content": "<p>right</p>",
        "id": 157357397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032399
    },
    {
        "content": "<p>so</p>",
        "id": 157357398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032400
    },
    {
        "content": "<p>I found what I think are two bugs so far :)</p>",
        "id": 157357404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032403
    },
    {
        "content": "<p>but neither of them apply here</p>",
        "id": 157357413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032410
    },
    {
        "content": "<p>because in this case <code>'_#9t</code> <em>is</em> in U6, so it's not really a leak</p>",
        "id": 157357432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032426
    },
    {
        "content": "<p>as my thesis advisor used to say</p>",
        "id": 157357434,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549032426
    },
    {
        "content": "<p>\"that's great news!\"</p>",
        "id": 157357437,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549032429
    },
    {
        "content": "<p>(or maybe it was more like \"congratulations! You found a bug!\")</p>",
        "id": 157357466,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549032452
    },
    {
        "content": "<p>so i'm trying now to dig a bit more into the context around this <code>'_#9t</code></p>",
        "id": 157357467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032455
    },
    {
        "content": "<p>I have the fixes for the bugs in my branch, so afer this maybe I'll try to create test cases</p>",
        "id": 157357483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032477
    },
    {
        "content": "<p>its (<code>'_#9t</code>) for the type parameter <code>T</code>, right? <a href=\"https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L3718\" target=\"_blank\" title=\"https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L3718\">https://gist.github.com/pnkfelix/070ea7fe4b4a95c8129c06694cbeb457#file-rlog-L3718</a></p>",
        "id": 157357485,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549032480
    },
    {
        "content": "<p>(in the context of the instantiation of that trait within <code>fn main</code>, I assume)</p>",
        "id": 157357586,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549032541
    },
    {
        "content": "<p>yeah, presumably. So I see this:</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2019-02-01T14:48:44Z: rustc::infer::at: eq(\n&lt;[closure@/home/nmatsakis/tmp/57843.rs:15:18: 15:24 closure_kind_ty=_#4t closure_sig_ty=extern &quot;rust-call&quot; fn((_#3t,))] as ClonableFn&lt;&amp;RePlaceholder(Placeholder { universe: U6, name: BrNamed(crate0:DefIndex(1:14), &#39;a) }) bool&gt;&gt;\n==\n&lt;_#10t as ClonableFn&lt;_#9t&gt;&gt;)\n</pre></div>",
        "id": 157357731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032645
    },
    {
        "content": "<p>which I think is coming from trait solving</p>",
        "id": 157357880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032744
    },
    {
        "content": "<p>the debug output is wacky here but basically it's unifying the impl trait ref (<code>_#10t: CloneableFn&lt;_#9t&gt;</code>) with the thing the closure offers</p>",
        "id": 157357901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032781
    },
    {
        "content": "<p>and you can see that the closure has a placeholder</p>",
        "id": 157357910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549032788
    },
    {
        "content": "<p>I have a higher level question</p>",
        "id": 157358264,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549033075
    },
    {
        "content": "<p>which is: What .. do you expect here?</p>",
        "id": 157358268,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549033081
    },
    {
        "content": "<p>for no type at all to be fed into writeback ?</p>",
        "id": 157358318,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549033091
    },
    {
        "content": "<p>(for the higher-ranked closure, that is)</p>",
        "id": 157358325,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549033099
    },
    {
        "content": "<p>or for a type with a different structure to be fed in?</p>",
        "id": 157358330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1549033107
    },
    {
        "content": "<blockquote>\n<p>which is: What .. do you expect here?</p>\n</blockquote>\n<p>I expect -- I <em>think</em> -- a region inference error, but I guess I need to go back and study the example program</p>",
        "id": 157358388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033182
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>DEBUG 2019-02-01T14:56:51Z: rustc::traits::select: assemble_candidates_from_impls(obligation=Obligation(predicate=Binder(TraitPredicate(&lt;[closure@/home/nmatsakis/tmp/57843.rs:15:18: 15:24 closure_kind_ty=_#4t closure_sig_ty=extern &quot;rust-call&quot; fn((_#3t,))] as ClonableFn&lt;&amp;ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(1:14), &#39;a)) bool&gt;&gt;)),cause=ObligationCause { span: /home/nmatsakis/tmp/57843.rs:15:9: 15:25, body_id: NodeId(115), code: ObjectCastObligation((dyn for&lt;&#39;a&gt; ClonableFn&lt;&amp;ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(1:14), &#39;a)) bool&gt; + &#39;_#1r)) },param_env=ParamEnv { caller_bounds: [], reveal: UserFacing, def_id: None },depth=2))\n</pre></div>",
        "id": 157358446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033209
    },
    {
        "content": "<p>that is the context of what is happening</p>",
        "id": 157358468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033217
    },
    {
        "content": "<p>that I finally found</p>",
        "id": 157358470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033222
    },
    {
        "content": "<p>I realized I wasn't dumping the <code>rustc::traits</code> debug log</p>",
        "id": 157358485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033230
    },
    {
        "content": "<p>let me try to translate that</p>",
        "id": 157358496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033240
    },
    {
        "content": "<p>we are asked to solve:</p>\n<div class=\"codehilite\"><pre><span></span>for&lt;&#39;a&gt; {\n   Closure&lt;fn(_#3t)&gt;: ClonableFn(&amp;&#39;a bool)\n}\n</pre></div>",
        "id": 157358539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033280
    },
    {
        "content": "<p>where the <code>fn(_#3t)</code> is the \"pseudo-type parameter\" closures use to encode their expected signature</p>",
        "id": 157358686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033390
    },
    {
        "content": "<p>but now I want to circle back to the example program again</p>",
        "id": 157358703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033405
    },
    {
        "content": "<p>we have this</p>\n<div class=\"codehilite\"><pre><span></span> Foo(Box::new(|_| ()));\n</pre></div>\n\n\n<p>where <code>Foo</code> is <code>struct Foo(Box&lt;dyn for&lt;'a&gt; ClonableFn&lt;&amp;'a bool&gt;&gt;)</code></p>",
        "id": 157358720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033428
    },
    {
        "content": "<p>and indeed when type-checking the closure we <em>do</em> have the \"expected\" type of</p>\n<div class=\"codehilite\"><pre><span></span>ExpectRvalueLikeUnsized((dyn for&lt;&#39;a&gt; ClonableFn&lt;&amp;ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(1:14), &#39;a)) bool&gt; + &#39;_#0r)))\n</pre></div>",
        "id": 157358815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033486
    },
    {
        "content": "<p>and yet we wind up with no expected signature:</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2019-02-01T14:56:51Z: rustc_typeck::check::closure: check_closure(opt_kind=None, expected_sig=None)\n</pre></div>",
        "id": 157358858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033528
    },
    {
        "content": "<p>I'm not sure why that is, but it fits my expectation that we should be seeing an error here</p>",
        "id": 157358879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033548
    },
    {
        "content": "<p>in particular, we've effectively created a type variable <code>_#3t</code> in the root universe and said the closure type has signature <code>fn(_#3t)</code> -- note the binder is not on the <code>fn</code></p>",
        "id": 157358932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033569
    },
    {
        "content": "<p>but then we are tying to say (effectively)</p>\n<div class=\"codehilite\"><pre><span></span>exists&lt;T3&gt; { // the variable `_#3t`\n    forall&lt;&#39;a&gt; {\n        T3 = &amp;&#39;a bool // because of the required fn signature\n    }\n}\n</pre></div>\n\n\n<p>and of course that should not work</p>",
        "id": 157358988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549033609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ok i'm digging a bit more. I suspect one of the bugs I found <em>may</em> be the culprit, but my fix was incompleted. In particular, I'm looking at the \"generalize\" code. I see these logs (from my branch, which has a few extra logs):</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2019-02-01T14:56:51Z: rustc::infer::combine: generalize(ty=&amp;&#39;_#3r bool, for_vid=_#3t, dir=EqTo\nDEBUG 2019-02-01T14:56:51Z: rustc::infer::combine: generalize: ambient_variance = o\nDEBUG 2019-02-01T14:56:51Z: rustc::infer::combine: generalize: for_universe = U0\nDEBUG 2019-02-01T14:56:51Z: rustc::infer::combine: generalize: success { &amp;&#39;_#3r bool, false }\nDEBUG 2019-02-01T14:56:51Z: rustc::infer::combine: instantiate(a_ty=&amp;&#39;_#3r bool, dir=EqTo, b_vid=_#3t, generalized b_ty=&amp;&#39;_#3r bool)\n</pre></div>\n\n\n<p>what this is saying is that we have to unify <code>_#3t</code> (which is in the universe <code>U0</code>) with <code>&amp;'_#3r bool</code> -- but <code>'_#3r</code> was created in the universe U6:</p>\n<div class=\"codehilite\"><pre><span></span>  12327:DEBUG 2019-02-01T14:56:51Z: rustc::infer::region_constraints: created new region variable &#39;_#3r in U6 with origin MiscVariable(/home/nmatsakis/tmp/57843.rs:15:9: 15:25)\n</pre></div>\n\n\n<p>the plan was to \"instantiate\"  <code>'_#3t</code> to <code>&amp;'X bool</code> where <code>'X</code> is a fresh variable in U0 (i.e., the universe of <code>'_#3t</code>) and then relate <code>&amp;'X bool</code> and <code>&amp;'3 bool</code>, which should eventually result in a region error. but something's not working there.</p>",
        "id": 157359648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549034070
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 157359683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549034100
    },
    {
        "content": "<p>I think the good news is that it is one of the two bugs I found; the bad news is that my fix was wrong (but I can fix it, so that's not really bad). But let's see.</p>",
        "id": 157360031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549034367
    },
    {
        "content": "<p>Huzzah:</p>\n<div class=\"codehilite\"><pre><span></span>&gt; rustc +rust-2-stage1 ~/tmp/57843.rs\nerror[E0308]: mismatched types\n  --&gt; /home/nmatsakis/tmp/57843.rs:15:9\n   |\n15 |     Foo(Box::new(|_| ()));\n   |         ^^^^^^^^^^^^^^^^ one type is more general than the other\n   |\n   = note: expected type `std::ops::FnOnce&lt;(&amp;&#39;a bool,)&gt;`\n              found type `std::ops::FnOnce&lt;(&amp;bool,)&gt;`\n</pre></div>",
        "id": 157360772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549034856
    },
    {
        "content": "<p>now I just need to rebase over <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>'s PR so I can get decent diagnostics :)</p>",
        "id": 157360788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549034871
    },
    {
        "content": "<p>(unfortunately I think this latter diagnostic might be <a href=\"https://github.com/rust-lang/rust/issues/57875\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57875\">#57875</a> with PolyTraitRefs ?)</p>",
        "id": 157361007,
        "sender_full_name": "lqd",
        "timestamp": 1549035010
    },
    {
        "content": "<p>heh, probably true</p>",
        "id": 157361026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549035029
    },
    {
        "content": "<p>Incidentally, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, this points to something of an efficiency shortcoming in the way I integrated universe support. We adopted this simplification where the inference table always has a single \"current universe\" counter that is incremented each time we enter a placeholder -- <strong>but never decremented again</strong>. This avoided the need to carry universes around in our obligations and other things, but it means that we sometimes wind up with inference variables that logically <em>could</em> be in the root universe being assigned to some higher universe (which is an extension of the root universe, so it all works out). </p>\n<p>I think that as the chalk transition continues, we could do better here.</p>\n<p>All of this is making me think that we really need to do some \"let's talk about the design of universes in detail\" sort of thing. (Next rustc lecture series, maybe?)</p>",
        "id": 157361587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549035503
    }
]