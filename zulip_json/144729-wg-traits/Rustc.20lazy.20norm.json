[
    {
        "content": "<p>So, after <a href=\"https://github.com/rust-lang/rust/issues/73905\">#73905</a> I was so frustrated about all of the <code>normalize</code> calls that I was forced to write that I did this: <a href=\"https://github.com/rust-lang/rust/commit/15731f0405c47f7de824290568622b7bcc1627a5\">https://github.com/rust-lang/rust/commit/15731f0405c47f7de824290568622b7bcc1627a5</a></p>\n<ul>\n<li>Some tests are failing, a lot of them due to breaking suggestions</li>\n<li>Most of the normalize calls that should be removable now haven't been removed (<code>normalize_param_env_or_error</code> is gone though).</li>\n<li>There's still a lot of ways in which it's subtly broken</li>\n</ul>",
        "id": 203046931,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1594073526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> I've been pondering such an experimenting. Are you planning to keep pushing on this branch at all?</p>",
        "id": 203086541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594117420
    },
    {
        "content": "<p>I'll keep going until I'm out of obvious (to me) things to fix.</p>",
        "id": 203087103,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1594118024
    },
    {
        "content": "<p>current state: wondering what to do about these gems: <a href=\"https://github.com/rust-lang/rust/blob/15731f0405c47f7de824290568622b7bcc1627a5/src/librustc_infer/infer/mod.rs#L906-L930\">https://github.com/rust-lang/rust/blob/15731f0405c47f7de824290568622b7bcc1627a5/src/librustc_infer/infer/mod.rs#L906-L930</a></p>",
        "id": 203200510,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1594154696
    },
    {
        "content": "<p>fun</p>",
        "id": 204256668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595018585
    },
    {
        "content": "<p>I guess the real question is where they are used from, <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 204256684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595018593
    },
    {
        "content": "<p>Fortunately, mostly error reporting code.</p>",
        "id": 204258972,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1595019904
    },
    {
        "content": "<p>And there's a write-up: <a href=\"https://gist.github.com/matthewjasper/358245b033a1b7bd158acfe0c08d0d09\">https://gist.github.com/matthewjasper/358245b033a1b7bd158acfe0c08d0d09</a></p>",
        "id": 204264720,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1595023267
    },
    {
        "content": "<p>It looks like not having lazy normalization in rustc is causing problems with <code>-Zchalk</code>, even for simple programs like <code>fn f() { 1i32 + 2i32; }</code>.</p>",
        "id": 212978022,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602444205
    },
    {
        "content": "<p>I'm wondering what approach we want to take here. Experiment behind a feature flag? Pass relating types to Chalk?</p>",
        "id": 212978144,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602444375
    },
    {
        "content": "<p>Oh interesting</p>",
        "id": 212981622,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602450293
    },
    {
        "content": "<p>Is this with your branch?</p>",
        "id": 212981627,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602450303
    },
    {
        "content": "<p>I might be able to take a look at it</p>",
        "id": 212981631,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602450309
    },
    {
        "content": "<p><code>fn f() { 1i32 + 2i32; }</code> doesn't compile on master. I could try rebasing the lazy-norm branch and seeing how things go.</p>",
        "id": 212981745,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602450508
    },
    {
        "content": "<p>Oh...wow. that's suprising</p>",
        "id": 212981756,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602450534
    },
    {
        "content": "<p>actually, I'm not so sure that this is a lazy normalization issue.</p>",
        "id": 212982770,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602452188
    },
    {
        "content": "<p>I don't think it is</p>",
        "id": 212986165,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602458021
    },
    {
        "content": "<p>Its probably the chalk bug related the wf function args</p>",
        "id": 212986203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602458043
    },
    {
        "content": "<p>No, it's missing functionality in the rustc <code>RustIrDatabase</code> implementation.</p>",
        "id": 213008602,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602489984
    },
    {
        "content": "<p>Chalk also has a bug here:<br>\ngiven</p>\n<div class=\"codehilite\"><pre><span></span><code>        program {\n            #[non_enumerable]\n            trait Add&lt;Rhs&gt; { type Output; }\n\n            impl&lt;&#39;a&gt; Add&lt;&amp;&#39;a u32&gt; for u32 { type Output = &lt;u32 as Add&lt;u32&gt;&gt;::Output; }\n            impl Add&lt;u32&gt; for u32 { type Output = u32; }\n        }\n</code></pre></div>\n\n\n<p>the slg solver gives the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>goal { exists &lt; int T, U, V &gt; { &lt; T as Add &lt; U &gt;&gt; :: Output = V } }\nAmbiguous; definite substitution for&lt;?U0,?U0&gt; { [?0 := ^0.0, ?1 := ^0.1, ?2 := (Add::Output)&lt;^0.0, ^0.1&gt;] }\n</code></pre></div>\n\n\n<p>swapping the order of the impls results in the correct output <code>Ambiguous; no inference guidance</code></p>",
        "id": 213082031,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602534025
    },
    {
        "content": "<p>I wonder if this is <a href=\"https://github.com/rust-lang-nursery/chalk/issues/234\">chalk#234</a></p>",
        "id": 213082758,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602534575
    },
    {
        "content": "<p>I don't think so, this is an issue where things are not reported as being ambiguous enough, not the other way around. Looking through the logs the handling of multiple answers seems to be broken.</p>",
        "id": 213083658,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602534822
    },
    {
        "content": "<p>Ugh not good</p>",
        "id": 213083827,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602534929
    },
    {
        "content": "<p>This doesn't look right: <a href=\"https://github.com/rust-lang/chalk/blob/0cdc6c78f0d637f57f7816946fb9f6a99e3f72e5/chalk-engine/src/logic.rs#L117\">https://github.com/rust-lang/chalk/blob/0cdc6c78f0d637f57f7816946fb9f6a99e3f72e5/chalk-engine/src/logic.rs#L117</a></p>",
        "id": 213083932,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602534976
    },
    {
        "content": "<p>What about it?</p>",
        "id": 213084058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602535062
    },
    {
        "content": "<p>If the <code>self.tables[table].answer(answer)</code> is <code>Some </code>then it only checks one answer, otherwise it checks all of them.</p>",
        "id": 213084343,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602535229
    },
    {
        "content": "<p>Well yes</p>",
        "id": 213084402,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602535281
    },
    {
        "content": "<p>So, it either checks the actual answer, or the strands that could make answers</p>",
        "id": 213084435,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602535307
    },
    {
        "content": "<p><code>self.tables[table].answer(answer)</code> is the answer with the given index, not the unambiguous answer.</p>",
        "id": 213084821,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602535594
    },
    {
        "content": "<p>Hmm</p>",
        "id": 213084900,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602535663
    },
    {
        "content": "<p>I think the problem is <code>may_invalidate</code> though</p>",
        "id": 213085034,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602535758
    },
    {
        "content": "<p>hmm</p>",
        "id": 213085036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602535758
    },
    {
        "content": "<p>actually</p>",
        "id": 213085146,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602535825
    },
    {
        "content": "<p>I guess it's weird that we pass an AnswerIndex to that</p>",
        "id": 213085153,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602535835
    },
    {
        "content": "<p>This definitely fixes the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -122,7 +122,9 @@ impl&lt;I: Interner&gt; Forest&lt;I&gt; {</span>\n     ) -&gt; bool {\n         if let Some(answer) = self.tables[table].answer(answer) {\n             info!(\"answer cached = {:?}\", answer);\n<span class=\"gd\">-            return test(&amp;answer.subst.value.subst);</span>\n<span class=\"gi\">+            if test(&amp;answer.subst.value.subst) {</span>\n<span class=\"gi\">+                return true;</span>\n<span class=\"gi\">+            }</span>\n         }\n\n         self.tables[table]\n</code></pre></div>",
        "id": 213085159,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602535843
    },
    {
        "content": "<p>Yeah, that makes sense</p>",
        "id": 213085176,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602535859
    },
    {
        "content": "<p>Took me a second</p>",
        "id": 213085188,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602535868
    },
    {
        "content": "<p>I have to read a bit more context I guess, that code is pretty out of cache to me, but I agree with <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> that returning is suspicious there</p>",
        "id": 213085190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602535869
    },
    {
        "content": "<p>It is weird, because it's effectively <code>last</code></p>",
        "id": 213085192,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602535873
    },
    {
        "content": "<p>but it <em>is</em> a bit odd that it takes an <code>answer_index</code> in the first place</p>",
        "id": 213085233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602535918
    },
    {
        "content": "<p>I actually would probably expect that to only check strands...</p>",
        "id": 213085271,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602535925
    },
    {
        "content": "<p>Well, the answer index is passed by <code>AnswerStream</code></p>",
        "id": 213085403,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602536023
    },
    {
        "content": "<p>I think that the point is that it's trying to handle the case when it's called after <code>peek_answer</code> or <code>next_answer</code></p>",
        "id": 213085500,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602536067
    },
    {
        "content": "<p>Yeah, after <code>peek_answer</code></p>",
        "id": 213085690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602536193
    },
    {
        "content": "<p>it seems wrong to me</p>",
        "id": 213085913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602536348
    },
    {
        "content": "<p>I feel like <code>any_future_answer</code> ought to look not only at the <code>self.answer</code> from <code>AnswerStream</code> but <em>other</em> cached answers too</p>",
        "id": 213085928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602536362
    },
    {
        "content": "<p>This has the feel of an O(n^2) behavior though</p>",
        "id": 213085953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602536384
    },
    {
        "content": "<p>so I'm a bit wary</p>",
        "id": 213085958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602536386
    },
    {
        "content": "<p>but if <code>AnswerStream</code> is replaying some cached set of answers, then I think it's totally relevant</p>",
        "id": 213086022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602536415
    },
    {
        "content": "<p>i.e., imagine you have answers 1, 2, 3, and some incomplete strands</p>",
        "id": 213086039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602536427
    },
    {
        "content": "<p>and you have <code>AnswerIndex</code> with <code>self.answer</code> pointing at answer 1</p>",
        "id": 213086054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602536438
    },
    {
        "content": "<p>it seems like you have to test answers 2 and 3, since those are what <code>next</code> would be returning -- the strands only become relevant after answer 3</p>",
        "id": 213086091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602536459
    },
    {
        "content": "<p>That...is also true</p>",
        "id": 213086207,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602536523
    },
    {
        "content": "<p>I guess that hasn't come up because we only use that on a new root</p>",
        "id": 213086237,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602536552
    },
    {
        "content": "<p>I think that <code>AnswerStream</code> is supposed to ensure that <code>self.answer</code> is always either the last known answer or one past the last known answer.</p>",
        "id": 213086238,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602536552
    },
    {
        "content": "<p>For solving for root answers, yes</p>",
        "id": 213086294,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602536607
    },
    {
        "content": "<p>wait uh</p>",
        "id": 213086302,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602536616
    },
    {
        "content": "<p>Well, we can answer \"replay\" the cached answers for a table through an answer stream</p>",
        "id": 213086445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602536708
    },
    {
        "content": "<p>hmm...</p>",
        "id": 213086489,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602536739
    },
    {
        "content": "<p>If you mean the assert <a href=\"https://github.com/rust-lang/chalk/blob/0cdc6c78f0d637f57f7816946fb9f6a99e3f72e5/chalk-engine/src/logic.rs#L462\">here</a></p>",
        "id": 213086491,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602536741
    },
    {
        "content": "<p>then that essentially asserting we can't <em>skip</em> answers</p>",
        "id": 213086506,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602536752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Rustc.20lazy.20norm/near/213086238\">said</a>:</p>\n<blockquote>\n<p>I think that <code>AnswerStream</code> is supposed to ensure that <code>self.answer</code> is always either the last known answer or one past the last known answer.</p>\n</blockquote>\n<p>I was wondering if that was the case</p>",
        "id": 213086520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602536760
    },
    {
        "content": "<p>I see. So the code should actually looks something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">table</span><span class=\"p\">].</span><span class=\"n\">answer</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">info</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"answer cached = {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">answer</span><span class=\"p\">.</span><span class=\"n\">subst</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">subst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">answer</span><span class=\"p\">.</span><span class=\"n\">increment</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213086588,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602536787
    },
    {
        "content": "<p>and then check the strands, yes</p>",
        "id": 213086652,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602536839
    },
    {
        "content": "<p>that is more obviosuly correct to me</p>",
        "id": 213086959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602537058
    },
    {
        "content": "<p>maybe it's equivalent because of some invariant</p>",
        "id": 213086980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602537076
    },
    {
        "content": "<p>but if not, the old code looks wrong to me</p>",
        "id": 213086985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602537081
    },
    {
        "content": "<p>the old code is definitely wrong</p>",
        "id": 213087001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602537103
    },
    {
        "content": "<p>I've had my suspicion that there's been something weird with this code for a while</p>",
        "id": 213087026,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602537121
    },
    {
        "content": "<p>There was an issue reported a bit ago that I brought it up, but it got \"fixed\" by the ambiguous handling change, so I kind of forgot about this</p>",
        "id": 213087102,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602537170
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/626\">https://github.com/rust-lang/chalk/pull/626</a></p>",
        "id": 213088736,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602538510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Rustc.20lazy.20norm/near/204264720\">said</a>:</p>\n<blockquote>\n<p>And there's a write-up: <a href=\"https://gist.github.com/matthewjasper/358245b033a1b7bd158acfe0c08d0d09\">https://gist.github.com/matthewjasper/358245b033a1b7bd158acfe0c08d0d09</a></p>\n</blockquote>\n<p>These are the notes I made when I last looked at last norm. I'll try to have another look before the next meeting.</p>",
        "id": 229768178,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615420125
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 230009325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615546335
    }
]