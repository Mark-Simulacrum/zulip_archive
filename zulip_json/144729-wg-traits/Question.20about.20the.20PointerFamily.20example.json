[
    {
        "content": "<p>Looking at the GATs blog post, the second example with PointerFamily, etc. Am I correct that the only point of the 'Family' abstraction here is so we can use the Pointer associated type? I.e., if we had HKTs at the trait level we could just have something like <code>P&lt;T&gt;: Pointer&lt;T&gt;</code> and we wouldn't need the PointerFamily trait? Or is there some advantage in having the PointerFamily trait rather than just a Pointer trait?</p>",
        "id": 249319701,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628826736
    },
    {
        "content": "<p>Currently, neither generic types nor generic traits can be used separately, without generic parameters being \"filled\" in.  So in today's Rust,  <code>Vec</code> doesn't make sense without the <code>&lt;T&gt;</code> part.</p>",
        "id": 249338574,
        "sender_full_name": "Charles Lew",
        "timestamp": 1628846164
    },
    {
        "content": "<p>By supplying the ability of HKT in a more direct approach,  <code>trait Pointer&lt;T&gt;{}</code>'s  <code>Pointer</code> will be able to be type-checked and used separately. This will challenge Rust's existing syntax usages, and diagnostics directly.</p>",
        "id": 249338794,
        "sender_full_name": "Charles Lew",
        "timestamp": 1628846313
    },
    {
        "content": "<p>Also, it will be inconsistent to disallow user to use <code>Vec</code> in its own right.</p>",
        "id": 249338835,
        "sender_full_name": "Charles Lew",
        "timestamp": 1628846364
    },
    {
        "content": "<p>And the current <code>Vec::new()</code> syntax will become very confusing...</p>",
        "id": 249338870,
        "sender_full_name": "Charles Lew",
        "timestamp": 1628846382
    },
    {
        "content": "<p>By adopting the generic associated item approach, i think it's quite a nice balance between usability and type system power. This allow the expressiveness be provided when absolutely necessary, while prevented almost all unintended usages. </p>\n<p>This also doesn't prevent the more direct approach be adopted later if necessary, but personally i don't really feel it's worth it at this point.</p>",
        "id": 249339179,
        "sender_full_name": "Charles Lew",
        "timestamp": 1628846607
    },
    {
        "content": "<p>My question is more if there would be more in The family trait in ‘real life’, or if it would exist purely as a ‘wrapper’ for the HKT, rather than the relative merits of first class HKTs vs GATs</p>",
        "id": 249343816,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1628850247
    },
    {
        "content": "<p>I think if your theoretical HKT implementation allows both <code>impl Pointer for Box&lt;_, alloc::Global&gt;</code> and <code>impl Pointer for MyBox&lt;alloc::Global, _&gt;</code> (reversed generics order) then it would be equivalent to such a family trait</p>",
        "id": 249345006,
        "sender_full_name": "jplatte",
        "timestamp": 1628851227
    },
    {
        "content": "<p>There's a comparison between family traits and HKT in an old blog post by Niko: <a href=\"https://smallcultfollowing.com/babysteps/blog/2016/11/04/associated-type-constructors-part-3-what-higher-kinded-types-might-look-like/\">https://smallcultfollowing.com/babysteps/blog/2016/11/04/associated-type-constructors-part-3-what-higher-kinded-types-might-look-like/</a></p>",
        "id": 249345153,
        "sender_full_name": "jplatte",
        "timestamp": 1628851362
    },
    {
        "content": "<p>Oh, and one more: <a href=\"https://smallcultfollowing.com/babysteps/blog/2016/11/09/associated-type-constructors-part-4-unifying-atc-and-hkt/\">https://smallcultfollowing.com/babysteps/blog/2016/11/09/associated-type-constructors-part-4-unifying-atc-and-hkt/</a></p>",
        "id": 249345169,
        "sender_full_name": "jplatte",
        "timestamp": 1628851399
    },
    {
        "content": "<p>I'm currently attempting to define something that might simplify pseudo-HKT via GATs in <a class=\"stream-topic\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits/topic/Self-update.20syntax.20and.20HKT.20via.20GATs\">#wg-traits &gt; Self-update syntax and HKT via GATs</a> if anyone is  interested in taking a look. It might simplify what you're doing with PointerFamily here.</p>",
        "id": 249419944,
        "sender_full_name": "Zoey",
        "timestamp": 1628892365
    }
]