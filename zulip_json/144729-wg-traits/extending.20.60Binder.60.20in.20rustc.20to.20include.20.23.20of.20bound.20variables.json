[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so I started working on this a little bit</p>",
        "id": 199411266,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591039159
    },
    {
        "content": "<p>I basically just started by adding a <code>u32</code> to <code>Binder</code> alongside <code>T</code></p>",
        "id": 199411287,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591039177
    },
    {
        "content": "<p>Was wondering if it's worth just doing a perf run with this alone since it changes the size of types</p>",
        "id": 199411380,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591039208
    },
    {
        "content": "<p>Also, right now I'm just assuming that we can only have lifetimes</p>",
        "id": 199411544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591039289
    },
    {
        "content": "<p>The next step would be to actually count the number of bound variables in <code>Binder::bind</code></p>",
        "id": 199411659,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591039328
    },
    {
        "content": "<p>So when I actually started counting the bound vars, I get two test failures</p>",
        "id": 199532264,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591121962
    },
    {
        "content": "<p><code>ui/consts/const-eval/issue-70804-fn-subtyping.rs</code></p>",
        "id": 199532270,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591121966
    },
    {
        "content": "<p>and <code>ui/issues/issue-23611-enum-swap-in-drop.rs</code></p>",
        "id": 199532287,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591121975
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: src/librustc_mir/interpret/place.rs:839: type mismatch when copying!\nsrc: (for&lt;&#39;r&gt; fn(&amp;&#39;r ()), std::string::String),\ndest: (fn(&amp;()), std::string::String)\n</code></pre></div>",
        "id": 199532320,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591121992
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: src/librustc_mir/interpret/place.rs:839: type mismatch when copying!\nsrc: for&lt;&#39;r, &#39;s&gt; fn(u32, &amp;&#39;r str, &amp;&#39;s std::cell::RefCell&lt;std::vec::Vec&lt;u32&gt;&gt;),\ndest: for&lt;&#39;r&gt; fn(u32, &amp;&#39;r str, &amp;std::cell::RefCell&lt;std::vec::Vec&lt;u32&gt;&gt;)\n</code></pre></div>",
        "id": 199532436,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591122024
    },
    {
        "content": "<p>So, I'm pretty sure this is a bug</p>",
        "id": 199532959,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591122238
    },
    {
        "content": "<p>That's erroring at <code>copy_no_op_validate</code></p>",
        "id": 199533053,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591122271
    },
    {
        "content": "<p>The doc comment says</p>\n<div class=\"codehilite\"><pre><span></span><code>    /// Copies the data from an operand to a place. This does not support transmuting!\n    /// Use `copy_op_transmute` if the layouts could disagree.\n</code></pre></div>",
        "id": 199533076,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591122282
    },
    {
        "content": "<p>And this is definitely a transmute</p>",
        "id": 199533105,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591122298
    },
    {
        "content": "<p>Right?</p>",
        "id": 199533130,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591122306
    },
    {
        "content": "<p>Like, they aren't the same type</p>",
        "id": 199533157,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591122318
    },
    {
        "content": "<p>Though, <em>can</em> be safely transmutated?</p>",
        "id": 199533199,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591122337
    },
    {
        "content": "<p>wait no, it's not a transmute because the layout is the same</p>",
        "id": 199534228,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591122794
    },
    {
        "content": "<p>seems like it's probably a bug</p>",
        "id": 199543777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591127443
    },
    {
        "content": "<p>but where the bug is...</p>",
        "id": 199543787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591127446
    },
    {
        "content": "<p>it's eh</p>",
        "id": 199543801,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591127452
    },
    {
        "content": "<p>not really a bug</p>",
        "id": 199543806,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591127456
    },
    {
        "content": "<p>but an implementation detail</p>",
        "id": 199543815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591127460
    },
    {
        "content": "<p>an <code>eval_context</code></p>",
        "id": 199543834,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591127472
    },
    {
        "content": "<p><code>mir_assign_valid_types</code> \"normalizes\" the src and dest types</p>",
        "id": 199543860,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591127487
    },
    {
        "content": "<p>for regions, it erases them</p>",
        "id": 199543878,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591127498
    },
    {
        "content": "<p>but the <code>Binder</code> doesn't keep track of this</p>",
        "id": 199543898,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591127509
    },
    {
        "content": "<p>(if I change the <code>TypeFoldable</code> impl for <code>Binder</code> to always recalculate the bound vars, it works fine</p>",
        "id": 199543999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591127552
    },
    {
        "content": "<p>This really isn't ideal though</p>",
        "id": 199544006,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591127559
    },
    {
        "content": "<p>I'm a bit confused but ok :)</p>",
        "id": 199544089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591127612
    },
    {
        "content": "<p>I'd have to read I guess into the code a bit more</p>",
        "id": 199544099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591127617
    },
    {
        "content": "<p>I'm thinking I might make a WIP PR</p>",
        "id": 199544129,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591127636
    },
    {
        "content": "<p>just so I can see just how bad of a perf drop this is so far</p>",
        "id": 199544182,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591127647
    },
    {
        "content": "<p>I'm still -- tbqh -- debating whether counting is good</p>",
        "id": 199544191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591127655
    },
    {
        "content": "<p>I guess we could try to <em>also</em> modify chalk to not count</p>",
        "id": 199544202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591127666
    },
    {
        "content": "<p>And see what gets harder</p>",
        "id": 199544212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591127673
    },
    {
        "content": "<p>It would also mean not having a \"array\" of kinds and things</p>",
        "id": 199544240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591127685
    },
    {
        "content": "<p>you'd have to walk the bound contents and infer it</p>",
        "id": 199544264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591127692
    },
    {
        "content": "<p>and there are things that can't be expressed, which is ungreat</p>",
        "id": 199544276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591127699
    },
    {
        "content": "<p>e.g., <code>for&lt;'a&gt; u32</code></p>",
        "id": 199544296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591127705
    },
    {
        "content": "<p>I feel like this comes up in Rust sometimes - I guess there may even be a backwards compatibility concern there</p>",
        "id": 199544341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591127730
    },
    {
        "content": "<p>e.g., <code>for&lt;'a&gt; fn(&amp;'static u32)</code> and <code>fn(&amp;'static u32)</code> are both represented same way in compiler presumably</p>",
        "id": 199544363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591127751
    },
    {
        "content": "<p>Well</p>",
        "id": 199544589,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591127837
    },
    {
        "content": "<p>probably</p>",
        "id": 199544600,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591127845
    }
]