[
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, what I wanted to say about debug:</p>",
        "id": 188239835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709602
    },
    {
        "content": "<p>I'm not actually that keen on using <code>Debug</code> impls, but they are dang convenient</p>",
        "id": 188239846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709616
    },
    {
        "content": "<p>In Lark, we were experimenting with a <code>DebugWith</code> trait</p>",
        "id": 188239865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709630
    },
    {
        "content": "<p>that took context</p>",
        "id": 188239866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709632
    },
    {
        "content": "<p>though the design relied on specialization</p>",
        "id": 188239872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709636
    },
    {
        "content": "<p>In rustc, we use debug impls, but I think the current setup has a lot of flaws, despite us having tweaked and changed it many times</p>",
        "id": 188239908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709668
    },
    {
        "content": "<p>Some of the problems are sort of \"orthogonal\" but relevant -- e.g., the debug output tries to recreate \"user-readable\" types, but that's really complex, and it can lead to ICEs and other problems, and sometimes depends on the phase of the compiler; and what's worse, it sometimes hides info you might want when debugging</p>",
        "id": 188239993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/debug.20output/near/188239865\" title=\"#narrow/stream/144729-wg-traits/topic/debug.20output/near/188239865\">said</a>:</p>\n<blockquote>\n<p>In Lark, we were experimenting with a <code>DebugWith</code> trait</p>\n</blockquote>\n<p>the idea was that you would do <code>debug!(\"{:?}\", foo.debug_with(cx))</code></p>",
        "id": 188240024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709754
    },
    {
        "content": "<p>where <code>debug_with</code> returned a <code>DebugWith</code> struct that wrapped a reference to <code>foo</code>, and <code>DebugWith</code> implemented <code>Debug</code></p>",
        "id": 188240057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709777
    },
    {
        "content": "<p>the <em>nice</em> thing was that (with specialization) you could supply different sorts of contexts to get different amounts of debug</p>",
        "id": 188240087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709799
    },
    {
        "content": "<p>anyway, we won't go that route I don't think, but I do think it'd be feasible to create a simpler variation (e.g., one that always takes a <code>TypeInterner</code>)</p>",
        "id": 188240151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709822
    },
    {
        "content": "<p>maybe we <em>should</em> do that</p>",
        "id": 188240153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709826
    },
    {
        "content": "<p>Yeah, I mean, how different is that to just only implemented <code>Debug</code> on <code>TyData</code> and not <code>Ty</code>?</p>",
        "id": 188240241,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581709906
    },
    {
        "content": "<p>you want the trait because</p>",
        "id": 188240337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709941
    },
    {
        "content": "<p>you want to e.g. implement <code>debug_with</code> on <code>Vec&lt;T&gt;</code> where <code>T: DebugWith</code></p>",
        "id": 188240357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709949
    },
    {
        "content": "<p><code>dbg!(ty.with(cx))</code> vs <code>dbg!(ty.data(cx))</code></p>",
        "id": 188240359,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581709951
    },
    {
        "content": "<p>ohh</p>",
        "id": 188240369,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581709959
    },
    {
        "content": "<p>and other such types</p>",
        "id": 188240371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709961
    },
    {
        "content": "<p>also</p>",
        "id": 188240377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709968
    },
    {
        "content": "<p>right</p>",
        "id": 188240381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581709970
    },
    {
        "content": "<p>you cannot implement <code>Debug</code> on anything</p>",
        "id": 188240385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709974
    },
    {
        "content": "<p>because when <code>TyData</code> has to recursively debug types that <em>it</em> contains</p>",
        "id": 188240403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709986
    },
    {
        "content": "<p>it needs the context</p>",
        "id": 188240405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709989
    },
    {
        "content": "<p>so you need a custom derive</p>",
        "id": 188240411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709992
    },
    {
        "content": "<p>the only Debug impl is at the outermost level, on the <code>DebugWith</code> struct</p>",
        "id": 188240431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710006
    },
    {
        "content": "<p>though I agree <code>ty.with(cx)</code> is prob better than <code>ty.debug_with(cx)</code> :)</p>",
        "id": 188240468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710034
    },
    {
        "content": "<p>that's a need concept</p>",
        "id": 188240484,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581710040
    },
    {
        "content": "<p>every byte counts when you're dumping debug output</p>",
        "id": 188240516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710042
    },
    {
        "content": "<blockquote>\n<p>that's a need concept</p>\n</blockquote>\n<p>\"neat\"?</p>",
        "id": 188240541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710063
    },
    {
        "content": "<p>oops, yes. neat</p>",
        "id": 188240558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581710073
    },
    {
        "content": "<p>This idea is quite similar to <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir_ty/src/display.rs#L21\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir_ty/src/display.rs#L21\"><code>HirDisplay</code> in rust-analyzer</a>, which takes a <code>HirFormatter</code> that contains a reference to the DB</p>",
        "id": 188241020,
        "sender_full_name": "detrumi",
        "timestamp": 1581710403
    },
    {
        "content": "<p>I have wondered if we could extract this pattern to a generic crate</p>",
        "id": 188241125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710469
    },
    {
        "content": "<p>but it's hard to do w/o speciaization</p>",
        "id": 188241137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710477
    },
    {
        "content": "<p>you wind up with a trait like <code>DebugWith&lt;Cx&gt;</code> kind of</p>",
        "id": 188241149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710484
    },
    {
        "content": "<p>and when I tried that in lark it was very painful :)</p>",
        "id": 188241155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710489
    },
    {
        "content": "<p>We'll find a generic way at some point <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 188241216,
        "sender_full_name": "detrumi",
        "timestamp": 1581710527
    },
    {
        "content": "<p>I remember just getting in these annoying corners where some types (like <code>Vec</code>) work with <em>any</em> context, but other types (like types) require specific contexts, and getting everything to fit together was annoying</p>",
        "id": 188241224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710535
    },
    {
        "content": "<p>but when I moved to a setup where <em>everything</em>  had to work with the same kinds of context, it was much nicer</p>",
        "id": 188241241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710547
    },
    {
        "content": "<p>and everything mostly \"just worked\"</p>",
        "id": 188241252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710552
    },
    {
        "content": "<p>as you might expect</p>",
        "id": 188241280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710569
    }
]