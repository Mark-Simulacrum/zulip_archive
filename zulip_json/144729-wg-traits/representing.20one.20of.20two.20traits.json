[
    {
        "content": "<p>Is there a way to represent one of two traits in a trait bound? I have a <code>JoinSemilattice</code> trait and a <code>MeetSemilattice</code> trait, and I want to have an associated type that is one of the two. So I tried adding a <code>Semilattice</code> trait that is a supertrait of both, but that doesn't work the way I want it to.</p>\n<p>Here's my trait definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Semilattice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">op</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">JoinSemilattice</span>: <span class=\"nc\">Semilattice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">op</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MeetSemilattice</span>: <span class=\"nc\">Semilattice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">op</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">meet</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">meet</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But then when I try to implement <code>MeetSemilattice</code>, I get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0277]: the trait bound `analyses::init_vars::InitVars: framework::domain::Semilattice` is not satisfied\n  --&gt; src/analyses/init_vars.rs:20:6\n   |\n20 | impl MeetSemilattice for InitVars {}\n   |      ^^^^^^^^^^^^^^^ the trait `framework::domain::Semilattice` is not implemented for `analyses::init_vars::InitVars`\n   |\n  ::: src/framework/domain.rs:21:28\n   |\n21 | pub trait MeetSemilattice: Semilattice {\n   |                            ----------- required by this bound in `framework::domain::MeetSemilattice`\n</code></pre></div>\n<p>Is there any way to represent this in the trait system? Thanks so much!</p>",
        "id": 215790113,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604621151
    },
    {
        "content": "<p>It looks there's been an RFC issue open for this since 2015: <a href=\"https://github.com/rust-lang/rfcs/issues/1024\">rfc#1024</a></p>",
        "id": 215790698,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604621563
    },
    {
        "content": "<p>It looks like rustc uses the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/dataflow/lattice/struct.Dual.html\"><code>Dual</code></a> struct for this, but that seems like a suboptimal solution</p>",
        "id": 215791026,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604621837
    }
]