[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> ok, carry on :)</p>",
        "id": 135423216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539026913
    },
    {
        "content": "<p>if I try to call <code>self.infcx.tcx.program_clauses_for_env(*environment);</code> I get a compile error: \"argument requires that <code>'tcx</code> must outlive <code>'gcx</code>\"</p>",
        "id": 135423223,
        "sender_full_name": "scalexm",
        "timestamp": 1539026927
    },
    {
        "content": "<p>I don't understand why</p>",
        "id": 135423227,
        "sender_full_name": "scalexm",
        "timestamp": 1539026938
    },
    {
        "content": "<p>can I see the diff maybe?</p>",
        "id": 135423235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539026946
    },
    {
        "content": "<p>I'm guessing though it's because <code>program_clause_for_env</code> is a query, and hence the environment must be a <code>ty::ParamEnv&lt;'gcx&gt;</code>?</p>",
        "id": 135423251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539026979
    },
    {
        "content": "<p>in effect</p>",
        "id": 135423254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539026983
    },
    {
        "content": "<p>(is it a query?)</p>",
        "id": 135423262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539026994
    },
    {
        "content": "<p>in any case the signature is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">program_clauses_for_env</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">param_env</span>: <span class=\"nc\">ty</span>::<span class=\"n\">ParamEnv</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Clauses</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135423315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027007
    },
    {
        "content": "<p>in particular <code>TyCtxt&lt;'a, 'tcx, 'tcx&gt;</code> seems like it would cause this problem</p>",
        "id": 135423322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027022
    },
    {
        "content": "<p>(to start, we might even just forego having it be a query)</p>",
        "id": 135423331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027051
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...scalexm:program-clauses\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...scalexm:program-clauses\">https://github.com/rust-lang/rust/compare/master...scalexm:program-clauses</a></p>",
        "id": 135423333,
        "sender_full_name": "scalexm",
        "timestamp": 1539027052
    },
    {
        "content": "<p>yeah, ok, so that is the problem</p>",
        "id": 135423366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027100
    },
    {
        "content": "<p>usually what we do is to canonicalize the query key</p>",
        "id": 135423371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027106
    },
    {
        "content": "<p>why the argument should be <code>ty::ParamEnv&lt;'gcx&gt;</code>?</p>",
        "id": 135423374,
        "sender_full_name": "scalexm",
        "timestamp": 1539027112
    },
    {
        "content": "<p>well, it's a bit confusing because of our convention</p>",
        "id": 135423376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027121
    },
    {
        "content": "<p>that is, in the signature above, there is no <code>'gcx</code></p>",
        "id": 135423424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027130
    },
    {
        "content": "<p>so in that case <code>'tcx</code> refers to the global arena</p>",
        "id": 135423426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027138
    },
    {
        "content": "<p>ok</p>",
        "id": 135423427,
        "sender_full_name": "scalexm",
        "timestamp": 1539027143
    },
    {
        "content": "<p>in particular you see <code>TyCtxt&lt;'_, 'tcx, 'tcx&gt;</code></p>",
        "id": 135423430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027153
    },
    {
        "content": "<p>the second argument is the 'global lifetime'</p>",
        "id": 135423432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027160
    },
    {
        "content": "<p>by setting both the same, we force <code>'tcx</code> to be the global lifetime</p>",
        "id": 135423437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027169
    },
    {
        "content": "<p>if it were <code>TyCtxt&lt;'_, '_, 'tcx&gt;</code> that would not be the case</p>",
        "id": 135423444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027178
    },
    {
        "content": "<p>but queries only operate on global data</p>",
        "id": 135423446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027182
    },
    {
        "content": "<p>ah yeah ok</p>",
        "id": 135423460,
        "sender_full_name": "scalexm",
        "timestamp": 1539027197
    },
    {
        "content": "<p>since the caches don't want to be tied to some particular inference step</p>",
        "id": 135423462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027199
    },
    {
        "content": "<p>right</p>",
        "id": 135423464,
        "sender_full_name": "scalexm",
        "timestamp": 1539027202
    },
    {
        "content": "<p>indeed a <code>TyCtxt&lt;'_, 'gcx, 'gcx&gt;</code> naming convention would be less confusing I guess :)</p>",
        "id": 135423470,
        "sender_full_name": "scalexm",
        "timestamp": 1539027217
    },
    {
        "content": "<p>anyway we could just make it not a query for now, or we can canonicalize the key â€” we could even just \"lift\" the key for now</p>",
        "id": 135423471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027220
    },
    {
        "content": "<blockquote>\n<p>indeed a <code>TyCtxt&lt;'_, 'gcx, 'gcx&gt;</code> naming convention would be less confusing I guess :)</p>\n</blockquote>\n<p>yes</p>",
        "id": 135423474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027224
    },
    {
        "content": "<p>in practice, the param env <strong>at present</strong> is always going to be global</p>",
        "id": 135423518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027248
    },
    {
        "content": "<p>that won't always be true</p>",
        "id": 135423523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027258
    },
    {
        "content": "<p>once we want to support implication goals</p>",
        "id": 135423528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027261
    },
    {
        "content": "<p>ok so just lift should work for now</p>",
        "id": 135423531,
        "sender_full_name": "scalexm",
        "timestamp": 1539027263
    },
    {
        "content": "<p>but yeah for now we could do <code>self.tcx.lift_to_global(param_env).unwrap()</code></p>",
        "id": 135423543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027275
    },
    {
        "content": "<p>and once we get to implication goals, we'll notice :)</p>",
        "id": 135423549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027282
    },
    {
        "content": "<p>ok, so second problem comes with the contents of <code>ParamEnv</code></p>",
        "id": 135423556,
        "sender_full_name": "scalexm",
        "timestamp": 1539027294
    },
    {
        "content": "<p>if we'd like to have implied bounds from types, it should somehow include the input types</p>",
        "id": 135423579,
        "sender_full_name": "scalexm",
        "timestamp": 1539027310
    },
    {
        "content": "<p>(canonicalizing would possibly be better, of course, since it would equate various regions)</p>",
        "id": 135423582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027315
    },
    {
        "content": "<p>right so it needs something like <code>WellFormed(T)</code>?</p>",
        "id": 135423594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027341
    },
    {
        "content": "<p>yes, so currently <code>ParamEnv</code> carries the \"rustc-style\" predicates</p>",
        "id": 135423600,
        "sender_full_name": "scalexm",
        "timestamp": 1539027358
    },
    {
        "content": "<p>(oh, that reminds me that we were going to talk about <a href=\"https://github.com/rust-lang-nursery/chalk/pull/176\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/pull/176\">chalk#176</a>)</p>",
        "id": 135423643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027365
    },
    {
        "content": "<p>e.g. <code>ty::TraitPredicate</code> etc</p>",
        "id": 135423646,
        "sender_full_name": "scalexm",
        "timestamp": 1539027368
    },
    {
        "content": "<p>right right</p>",
        "id": 135423668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027401
    },
    {
        "content": "<p>I mean we have a WellFormed predicate but</p>",
        "id": 135423677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027412
    },
    {
        "content": "<p>it may or may not make sense to try and \"split\" into a new-style predicate, I guess?</p>",
        "id": 135423686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027427
    },
    {
        "content": "<p>is that what you are thinking?</p>",
        "id": 135423690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027436
    },
    {
        "content": "<p>yes</p>",
        "id": 135423699,
        "sender_full_name": "scalexm",
        "timestamp": 1539027449
    },
    {
        "content": "<p>basically make <code>DomainGoal</code> and <code>Goal</code></p>",
        "id": 135423711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027470
    },
    {
        "content": "<p>in rustc</p>",
        "id": 135423714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027472
    },
    {
        "content": "<p>instead of re-using <code>ty::Predicate</code> as <code>DomainGoal</code> (is that what we do now?)</p>",
        "id": 135423766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027488
    },
    {
        "content": "<p>we already have <code>Goal</code> obviously</p>",
        "id": 135423770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027491
    },
    {
        "content": "<p>well the only thing I need right now is for <code>program_clauses_for_env</code> to compute the correct set of rules coming from the environment</p>",
        "id": 135423793,
        "sender_full_name": "scalexm",
        "timestamp": 1539027526
    },
    {
        "content": "<p>so currently <code>program_clauses_for_env</code> just uses def ids it finds in the rustc-style predicates</p>",
        "id": 135423798,
        "sender_full_name": "scalexm",
        "timestamp": 1539027539
    },
    {
        "content": "<p>hmm</p>",
        "id": 135423830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027579
    },
    {
        "content": "<p>maybe we should modify the input to that</p>",
        "id": 135423833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027583
    },
    {
        "content": "<p>well anyway neither here nor there</p>",
        "id": 135423893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027610
    },
    {
        "content": "<p>(e.g., to be a <code>BTreeSet&lt;DefId&gt;</code> or something)</p>",
        "id": 135423898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027617
    },
    {
        "content": "<p>seems like an ungreat idea</p>",
        "id": 135423908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027624
    },
    {
        "content": "<blockquote>\n<p>well the only thing I need right now is for <code>program_clauses_for_env</code> to compute the correct set of rules coming from the environment</p>\n</blockquote>\n<p>are you saying the WF question can wait?</p>",
        "id": 135423917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027638
    },
    {
        "content": "<p>not exactly, I was just thinking that indeed we could add <code>ty::WellFormed(T)</code> to the <code>ParamEnv</code> and then <code>program_clauses_for_env</code> would find the correct def ids from that =)</p>",
        "id": 135423957,
        "sender_full_name": "scalexm",
        "timestamp": 1539027694
    },
    {
        "content": "<p>but definitely not the cleanest way :p</p>",
        "id": 135423960,
        "sender_full_name": "scalexm",
        "timestamp": 1539027702
    },
    {
        "content": "<p>maybe I was confused</p>",
        "id": 135424026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027764
    },
    {
        "content": "<p>what def-ids does it need to find</p>",
        "id": 135424029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027772
    },
    {
        "content": "<p>ah, I guess you mean it would find the def-ids of the types</p>",
        "id": 135424035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027785
    },
    {
        "content": "<p>yes sorry</p>",
        "id": 135424041,
        "sender_full_name": "scalexm",
        "timestamp": 1539027791
    },
    {
        "content": "<p>and we would use some query or other to get the WF reverse rules there?</p>",
        "id": 135424044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027798
    },
    {
        "content": "<p>yes we basically just call <code>program_clauses_for(def_id)</code></p>",
        "id": 135424051,
        "sender_full_name": "scalexm",
        "timestamp": 1539027812
    },
    {
        "content": "<p>I see</p>",
        "id": 135424058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027819
    },
    {
        "content": "<p>so if <code>def_id</code> refers to a type, we get the wanted implied bounds</p>",
        "id": 135424060,
        "sender_full_name": "scalexm",
        "timestamp": 1539027821
    },
    {
        "content": "<p>well that <em>does</em> make sense</p>",
        "id": 135424063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027826
    },
    {
        "content": "<p>I'm a bit nervous about adding new things into the param env</p>",
        "id": 135424105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027845
    },
    {
        "content": "<p>I guess we could gate it in on <code>-Zchalk</code> or something</p>",
        "id": 135424114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027853
    },
    {
        "content": "<p>I'm not really sure what would go wrong, tbh</p>",
        "id": 135424118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027857
    },
    {
        "content": "<p>yeah probably</p>",
        "id": 135424121,
        "sender_full_name": "scalexm",
        "timestamp": 1539027863
    },
    {
        "content": "<p>that won't work across crates</p>",
        "id": 135424129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539027874
    },
    {
        "content": "<p>maybe we could, for now, use a new <code>ParamEnv</code> type</p>",
        "id": 135424281,
        "sender_full_name": "scalexm",
        "timestamp": 1539028082
    },
    {
        "content": "<p>we could</p>",
        "id": 135424325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028098
    },
    {
        "content": "<p>it would sort of go along with moving away from <code>Predicate</code></p>",
        "id": 135424334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028113
    },
    {
        "content": "<p>basically build up a \"parallel\" system</p>",
        "id": 135424338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028122
    },
    {
        "content": "<p>yes</p>",
        "id": 135424342,
        "sender_full_name": "scalexm",
        "timestamp": 1539028132
    },
    {
        "content": "<p><code>Predicate</code> isn't a great fit, seeing as it has binders at each step etc</p>",
        "id": 135424346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028140
    },
    {
        "content": "<p>we'd have to encode this stuff in metadata, or else just recompute them on the fly from other metadata things</p>",
        "id": 135424366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028160
    },
    {
        "content": "<p>yes and I don't think that we can easily replace it with the binders at the root instead of at the leafs</p>",
        "id": 135424372,
        "sender_full_name": "scalexm",
        "timestamp": 1539028166
    },
    {
        "content": "<p>but encoding in metadata isn't <em>that</em> hard</p>",
        "id": 135424390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028198
    },
    {
        "content": "<p>also actually the <code>program_clauses</code> callback is quite simple after all</p>",
        "id": 135424508,
        "sender_full_name": "scalexm",
        "timestamp": 1539028308
    },
    {
        "content": "<p>even the naive version I wrote seems good already, the worst thing it does is running over all impls for a given trait</p>",
        "id": 135424552,
        "sender_full_name": "scalexm",
        "timestamp": 1539028329
    },
    {
        "content": "<p>seems good</p>",
        "id": 135424563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539028359
    },
    {
        "content": "<p>ok then I think I'll be tackling the new ParamEnv thing to start with</p>",
        "id": 135425058,
        "sender_full_name": "scalexm",
        "timestamp": 1539028982
    },
    {
        "content": "<p>while we're at it, I see that there is a <code>add_clauses</code> callback which should add clauses to the environment</p>",
        "id": 135425322,
        "sender_full_name": "scalexm",
        "timestamp": 1539029296
    },
    {
        "content": "<p>so I guess this new ParamEnv should have some form of mutability</p>",
        "id": 135425330,
        "sender_full_name": "scalexm",
        "timestamp": 1539029308
    },
    {
        "content": "<p>(in contrast with the existing one)</p>",
        "id": 135425332,
        "sender_full_name": "scalexm",
        "timestamp": 1539029314
    },
    {
        "content": "<p>well</p>",
        "id": 135425371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539029399
    },
    {
        "content": "<p>that is used for the <code>A =&gt; B</code> goals</p>",
        "id": 135425425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539029418
    },
    {
        "content": "<p>we could make it \"in place\" mutable potentially</p>",
        "id": 135425438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539029441
    },
    {
        "content": "<p>we could also just \"re-intern\" the new set</p>",
        "id": 135425450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539029454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm wondering whether we might need a more fine-grained way of retrieving the clauses for something</p>",
        "id": 135468670,
        "sender_full_name": "scalexm",
        "timestamp": 1539091168
    },
    {
        "content": "<p>currently the only thing we have is <code>program_clauses_for(def_id)</code></p>",
        "id": 135468678,
        "sender_full_name": "scalexm",
        "timestamp": 1539091181
    },
    {
        "content": "<p>but for example, in <code>program_clauses_for_env</code>, the only clauses we care about are those of the form <code>... :- FromEnv(...)</code></p>",
        "id": 135468691,
        "sender_full_name": "scalexm",
        "timestamp": 1539091201
    },
    {
        "content": "<p>conversely if I want to prove for example <code>WellFormed(Self: Trait)</code>, I don't care about all the clauses of the form <code>... :- FromEnv(...)</code></p>",
        "id": 135468769,
        "sender_full_name": "scalexm",
        "timestamp": 1539091245
    },
    {
        "content": "<p>basically I'm currently changing chalk integration to using a new type <code>Environment&lt;'tcx&gt;</code> instead of <code>ParamEnv&lt;'tcx&gt;</code>, which just consists in a list of <code>Clause&lt;'tcx&gt;</code></p>",
        "id": 135468961,
        "sender_full_name": "scalexm",
        "timestamp": 1539091435
    },
    {
        "content": "<p>and I'm reluctant to continue with the approach \"just find every <code>def_id</code> appearing in the list of clauses and call <code>program_clauses_for(def_id)</code>\" in <code>program_clauses_for_env</code></p>",
        "id": 135469042,
        "sender_full_name": "scalexm",
        "timestamp": 1539091491
    },
    {
        "content": "<p>basically I fear that we would add too much useless clauses and that the computed set would be really big</p>",
        "id": 135469158,
        "sender_full_name": "scalexm",
        "timestamp": 1539091571
    },
    {
        "content": "<p>I think I expected to refine it at some point, yes</p>",
        "id": 135470492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539092789
    },
    {
        "content": "<p>I was expecting to even take into account \"simplified\" types and the like</p>",
        "id": 135470511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539092809
    },
    {
        "content": "<p>though of course we could move some of that logic into chalk-engine instead</p>",
        "id": 135470518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539092821
    },
    {
        "content": "<p>maybe it makes sense to do some of that sooner rather than later</p>",
        "id": 135470532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539092834
    },
    {
        "content": "<p>I think we should at least separate different forms of clauses for now</p>",
        "id": 135470656,
        "sender_full_name": "scalexm",
        "timestamp": 1539092913
    },
    {
        "content": "<p>I propose that we somehow \"tag\" them</p>",
        "id": 135470672,
        "sender_full_name": "scalexm",
        "timestamp": 1539092922
    },
    {
        "content": "<p>basically there would be three categories, \"implied bounds\", \"well formed\" and \"other\"</p>",
        "id": 135470691,
        "sender_full_name": "scalexm",
        "timestamp": 1539092946
    },
    {
        "content": "<p>we keep the <code>program_clauses_for(...)</code> but we can filter on the tag before passing them to chalk-engine</p>",
        "id": 135470725,
        "sender_full_name": "scalexm",
        "timestamp": 1539092995
    },
    {
        "content": "<p>I see</p>",
        "id": 135470859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539093069
    },
    {
        "content": "<p>that seems good</p>",
        "id": 135470861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539093072
    }
]