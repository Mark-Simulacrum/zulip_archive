[
    {
        "content": "<p>I've been looking through documentation and familiarizing myself with the current situation regarding chalk, but I have a couple more meta questions I figured I'd ask here. Is the plan still to (eventually) integrate chalk into rustc? What is the status of that, given that a number of the justifications for chalk (GATs and such) seem to be making it into rustc on their own? I found <a href=\"https://github.com/rust-lang/rust/issues/48049\">#48049</a> but that seems inactive. I ask because I am interested in contributing to chalk, but of course want to make sure that my contributions would represent a productive step forward for Rust as a whole</p>",
        "id": 259868911,
        "sender_full_name": "Jake",
        "timestamp": 1635776282
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"310518\">@Jake</span>, I'll write a more informative comment late as far as status and such, but yes Chalk is still active, though there hasn't been a lot of work done lately. There are definitely some useful things to do, I'll list them later</p>",
        "id": 259870608,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635777083
    },
    {
        "content": "<p>It's also used in rust-analyzer so improvements to chalk can be important for everyone using it.</p>",
        "id": 259870782,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1635777157
    },
    {
        "content": "<p>for rust-analyzer, <a href=\"https://github.com/rust-lang/chalk/issues/727\">rust-lang/chalk#727</a> is probably the biggest issue right now</p>",
        "id": 259871130,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1635777319
    },
    {
        "content": "<p>The issue I would like to see worked on that is the most \"isolated\" is <a href=\"https://github.com/rust-lang/chalk/issues/688\">chalk#688</a></p>",
        "id": 259871132,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635777319
    },
    {
        "content": "<p>oh, and that one, yeah</p>",
        "id": 259871158,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1635777334
    },
    {
        "content": "<p>I haven't looked at <a href=\"https://github.com/rust-lang/chalk/issues/727\">chalk#727</a> really</p>",
        "id": 259871368,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635777425
    },
    {
        "content": "<p>727 probably has some simpler reproductions, see this comment: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/6418#issuecomment-781056988\">https://github.com/rust-analyzer/rust-analyzer/issues/6418#issuecomment-781056988</a></p>",
        "id": 259872296,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1635777871
    },
    {
        "content": "<p>Yeah, the first step to <a href=\"https://github.com/rust-lang/chalk/issues/688\">chalk#688</a> is to refactor the chalk-integration code to be able to reproduce the problem</p>",
        "id": 259874390,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635778841
    },
    {
        "content": "<p>I plan to start looking at <a href=\"https://github.com/rust-lang/chalk/issues/688\">chalk#688</a> ; right now I'm just trying to familiarize myself with the codebase, and I have a question: I see the term \"free\" variable floating around for two different uses: First, for an unbound inference variable, and second, for a bound type with a depth greater than the number of in-scope binders. The first usage makes sense to me, but I am having a little trouble with the second; how do we get into a situation where we find such a type, and how should it be interpreted? (I understand that this question is a bit open ended, so would be more than happy with just a pointer in the right direction or a link to an example or something)</p>",
        "id": 260086999,
        "sender_full_name": "Jake",
        "timestamp": 1635911097
    },
    {
        "content": "<p>I'll try to reply to this today</p>",
        "id": 260264352,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636030153
    },
    {
        "content": "<p>That would be great, but also please don't worry about this too much. I'm aware that beginner questions are awkward to answer sometimes, and I'll probably be able to make progress on the issue regardless</p>",
        "id": 260307484,
        "sender_full_name": "Jake",
        "timestamp": 1636047515
    },
    {
        "content": "<p>So, I've seen \"free\" used in two places: 1) In rustc when type checking function bodies, the lifetime parameters are \"free\" 2) In more \"logical\" contexts, where a bound type has a greater debruijn index than in-scope binders</p>",
        "id": 260308186,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636047847
    },
    {
        "content": "<p>For unbound inference vars, I'm not sure I've heard it used as \"free\", just unbound, I guess</p>",
        "id": 260308225,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636047868
    },
    {
        "content": "<p>For the latter, we generally <em>don't</em> want that to happen. But it can happen if we i.e. fold through binders, but then pass around a type with bound vars</p>",
        "id": 260308373,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636047932
    },
    {
        "content": "<p>Some of my work from the end of last year is to help us <em>not</em> get into these situations (by tracking what bound vars we actually have)</p>",
        "id": 260308460,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636047976
    },
    {
        "content": "<p>Ok, I see, that makes sense to me. So in the example in <a href=\"https://github.com/rust-lang/chalk/issues/688\">chalk#688</a> :</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Implemented</span><span class=\"p\">({</span><span class=\"n\">closure</span>:<span class=\"nc\">ClosureId</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)}</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"o\">?</span><span class=\"mi\">0</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">?</span><span class=\"mi\">0</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"o\">?</span><span class=\"mi\">0</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"mi\">1</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"mf\">1.1</span><span class=\"p\">)]</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">?</span><span class=\"mi\">1</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"o\">?</span><span class=\"mi\">0</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"mf\">1.2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"mi\">1</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"mf\">1.1</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">?</span><span class=\"mi\">2</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Ordering</span><span class=\"o\">&lt;</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>: <span class=\"nb\">FnMut</span><span class=\"o\">&lt;</span><span class=\"mi\">2</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">?</span><span class=\"mi\">0</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"o\">?</span><span class=\"mi\">0</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"mf\">0.3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"mi\">1</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"mf\">0.4</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">?</span><span class=\"mi\">1</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"o\">?</span><span class=\"mi\">0</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"mf\">0.3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"mi\">1</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"mf\">0.4</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">]</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>there seem to be a number of free (in the second sense) bound types. I assume this means that the goal, as written, can't actually appear as a goal in the solver. Should I instead interpret it as having a <code>ForAll&lt;whatever necessary&gt;</code> binder around the outside? I fear I may be misunderstanding some of the convention/notation here.</p>",
        "id": 260315248,
        "sender_full_name": "Jake",
        "timestamp": 1636051010
    },
    {
        "content": "<p>Yeah, this is true. That's essentially coming from rust-analyzer. I can't quite remember what the exact goal that rust-analyzer gives us.</p>",
        "id": 260315777,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636051257
    },
    {
        "content": "<p>But essentially the issue comes during the \"we don't know what fn sig our closure has\" phase</p>",
        "id": 260315858,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636051299
    },
    {
        "content": "<p>This thread has some context: <a href=\"#narrow/stream/144729-wg-traits/topic/closure.20goal.20keeps.20expanding.20lifetimes.20chalk.23688\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/closure.20goal.20keeps.20expanding.20lifetimes.20chalk.23688</a></p>",
        "id": 260315995,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636051365
    },
    {
        "content": "<p>Also see <a href=\"https://github.com/jackh726/chalk/tree/688\">https://github.com/jackh726/chalk/tree/688</a></p>",
        "id": 260316108,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636051423
    },
    {
        "content": "<p>there shouldn't be any free variables in goals, I think that debug output is just just not including the <code>Canonical</code> wrapping everything. So those free variables would probably be referring to canonicalized inference variables, i.e. they're existentially quantified</p>",
        "id": 260321264,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1636053762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> thanks, those links were super helpful and I understand what's going on much better now. I see what you were trying to do with your update to <code>chalk-integration</code>, and may just continue work on (or at least inspired by) your branch. That being said, my first thought for testing this was to simply allow manual implementations of <code>Fn*</code> traits on types that had an appropriate annotation. Is adding a flag to <code>chalk-solve</code> that allows manual impls of these traits (with some capability to disable this) just too big a can of worms to open?</p>",
        "id": 260598935,
        "sender_full_name": "Jake",
        "timestamp": 1636323792
    },
    {
        "content": "<p>Ah, like a way to override the builtin impls?</p>",
        "id": 260598994,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636323854
    },
    {
        "content": "<p>Thats not how I was thinking about it, but that probably makes even more sense</p>",
        "id": 260599024,
        "sender_full_name": "Jake",
        "timestamp": 1636323920
    },
    {
        "content": "<p>I would maybe do this through the <a href=\"https://github.com/rust-lang/chalk/blob/9240a006f49542667faa2e972e14e5314a16f3be/chalk-solve/src/lib.rs#L47\"><code>custom_clauses</code></a> function, and ensure we don't use builtin clauses if there are other clauses that would conflict</p>",
        "id": 260599132,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636324063
    },
    {
        "content": "<p>I see, that makes sense. Unless you think this is unnecessarily much work, I might try this then</p>",
        "id": 260600021,
        "sender_full_name": "Jake",
        "timestamp": 1636325270
    },
    {
        "content": "<p>I'm not 100% sure the best approach tbh</p>",
        "id": 260600068,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636325301
    },
    {
        "content": "<p>And it's been a while and it's a bit of cache for me</p>",
        "id": 260600071,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636325310
    },
    {
        "content": "<p>I might just go for it, at worst it'll be a good learning experience</p>",
        "id": 260600160,
        "sender_full_name": "Jake",
        "timestamp": 1636325412
    },
    {
        "content": "<p>yeah for sure</p>",
        "id": 260600361,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636325747
    },
    {
        "content": "<p>Let me know if you have questions</p>",
        "id": 260600368,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636325755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> we'd probably want to gate the ability to do overrides somehow, yes? It seems that otherwise we'd lose any option to test that manual implementations are usually disallowed, which seems unfortunate. What's the right way to do that? A second flag like <code>disable_coherence</code>?</p>",
        "id": 260607954,
        "sender_full_name": "Jake",
        "timestamp": 1636336547
    },
    {
        "content": "<p>Nah, no need to gate I don't think</p>",
        "id": 260608079,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636336702
    },
    {
        "content": "<p>Alright. Can be added in later anyway, if we care to</p>",
        "id": 260608097,
        "sender_full_name": "Jake",
        "timestamp": 1636336741
    },
    {
        "content": "<p>I feel like at some point we'll just transition into just a better test syntax</p>",
        "id": 260608268,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636336917
    },
    {
        "content": "<p>Is it intentional that <a href=\"https://rust-lang.github.io/chalk/chalk_ir/struct.TraitRef.html#method.with_as\"><code>with_as</code></a> returns an opaque type and not an explicit <code>SeparatorTraitRef</code>? The <code>Debug</code> impl for <code>SeparatorTraitRef</code> doesn't seem terribly useful on its own</p>",
        "id": 260713908,
        "sender_full_name": "Jake",
        "timestamp": 1636403122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Chalk.20Status/near/259870608\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"310518\">Jake</span>, I'll write a more informative comment late as far as status and such, but yes Chalk is still active, though there hasn't been a lot of work done lately. There are definitely some useful things to do, I'll list them later</p>\n</blockquote>\n<p>Following up on this - are we still planning to integrate chalk into rustc at some point?</p>",
        "id": 262940508,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1638122608
    },
    {
        "content": "<p>Yes!</p>",
        "id": 262940523,
        "sender_full_name": "Jack Huey",
        "timestamp": 1638122642
    },
    {
        "content": "<p>I think the big blocker here is figuring out how to extract out TyKind and such into a shared library</p>",
        "id": 262940575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1638122678
    },
    {
        "content": "<p>I had problems with variance, specifically with <code>'tcx</code> changing from covariant to invariant in a lot of places</p>",
        "id": 262940601,
        "sender_full_name": "Jack Huey",
        "timestamp": 1638122737
    },
    {
        "content": "<p>Because after extracting into an <code>I: Interner</code>, <code>'tcx</code> ends up behind a projection</p>",
        "id": 262940652,
        "sender_full_name": "Jack Huey",
        "timestamp": 1638122782
    }
]