[
    {
        "content": "<p>Looking at this issue, it seems to be caused by the fact that a type error leads to an incomplete constraint graph.<br>\nBy the use of placeholders, we can already tell that there is a region error, since we expanded one of the region vars to <code>'static</code><br>\nHowever, during error reporting, we cannot trace that error back to a concrete region (in this case, a scope) due to the graph being incomplete (it doesn't contain the scope at all).</p>",
        "id": 158547947,
        "sender_full_name": "tmandry",
        "timestamp": 1550165933
    },
    {
        "content": "<p>So maybe the correct behavior is to replace <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/infer/lexical_region_resolve/mod.rs#L632\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/infer/lexical_region_resolve/mod.rs#L632\">this <code>span_bug!</code></a> with <code>delay_span_bug</code></p>",
        "id": 158548075,
        "sender_full_name": "tmandry",
        "timestamp": 1550166029
    },
    {
        "content": "<p>..since this is caused by an already-reported error</p>",
        "id": 158548098,
        "sender_full_name": "tmandry",
        "timestamp": 1550166052
    },
    {
        "content": "<p>Does this seem right? cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 158548109,
        "sender_full_name": "tmandry",
        "timestamp": 1550166061
    },
    {
        "content": "<p>Hmm</p>",
        "id": 158548456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166287
    },
    {
        "content": "<p>I was just looking at that</p>",
        "id": 158548460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166290
    },
    {
        "content": "<p>so was I</p>",
        "id": 158548469,
        "sender_full_name": "lqd",
        "timestamp": 1550166299
    },
    {
        "content": "<p>I dont' think that's quite the right assesment</p>",
        "id": 158548474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166301
    },
    {
        "content": "<p>but I could be remembering wrong</p>",
        "id": 158548494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166308
    },
    {
        "content": "<p>I think what is happening is that, when the error is found, we go traversing the graph looking for the \"causes\" of the error, but that search isn't taking into account the effects of crossing universes</p>",
        "id": 158548543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166343
    },
    {
        "content": "<p>the lower bounds and upper bounds seemed to be the same right ?</p>",
        "id": 158548636,
        "sender_full_name": "lqd",
        "timestamp": 1550166413
    },
    {
        "content": "<p>the way the algorithm works -- iirc -- is that, given some node X that has an error, it finds all the regions that X must outlive (i.e., all regions R where X: R) and all regions that outlive X. If you think of there being a graph where <code>A: B</code> means <code>A &lt;- B</code>, we are basically finding all things that can reach Xand all things reachable from X</p>",
        "id": 158548641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166419
    },
    {
        "content": "<p>we assume that there will be two regions R1, R2 where <code>R2: X: R1</code> but <code>R2: R1</code> is false</p>",
        "id": 158548668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166442
    },
    {
        "content": "<p>but I'm not sure that's true when universes come into play</p>",
        "id": 158548679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166452
    },
    {
        "content": "<p>we had similar ICEs in the NLL code IIRC</p>",
        "id": 158548688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166458
    },
    {
        "content": "<p>among other things, an edge <code>X: R1</code> can result in <code>X</code> becoming <code>'static</code> if <code>R1</code> is a placeholder, even though there is no direct edge between<code>X</code> and <code>'static</code></p>",
        "id": 158548763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166490
    },
    {
        "content": "<p>I think that's the root cause of the ICE</p>",
        "id": 158548792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166519
    },
    {
        "content": "<p>not sure <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> if that is what you meant =)</p>",
        "id": 158548807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166531
    },
    {
        "content": "<p>it might be way ahead of me :)</p>",
        "id": 158548938,
        "sender_full_name": "lqd",
        "timestamp": 1550166626
    },
    {
        "content": "<p>that is:</p>",
        "id": 158548949,
        "sender_full_name": "lqd",
        "timestamp": 1550166637
    },
    {
        "content": "<p>I think what I was seeing was only one region in both the upper and lower bounds</p>",
        "id": 158549019,
        "sender_full_name": "lqd",
        "timestamp": 1550166688
    },
    {
        "content": "<p>Yes, it is happening that our <code>X</code> is becoming <code>'static</code></p>",
        "id": 158549049,
        "sender_full_name": "tmandry",
        "timestamp": 1550166721
    },
    {
        "content": "<p>Just that when you get rid of the other error in the code (by replacing <code>f(&amp;[f()]);</code> with <code>f(&amp;[()]);</code>, for instance)</p>",
        "id": 158549124,
        "sender_full_name": "tmandry",
        "timestamp": 1550166769
    },
    {
        "content": "<p>..the error reporting mechanism is able to trace the conflict down to the scope of our <code>&amp;</code></p>",
        "id": 158549265,
        "sender_full_name": "tmandry",
        "timestamp": 1550166861
    },
    {
        "content": "<p>and as a result it reports an error that seems \"correct\"</p>",
        "id": 158549291,
        "sender_full_name": "tmandry",
        "timestamp": 1550166884
    },
    {
        "content": "<p>my point is that it is unable to do this in the original example, because the scope is nowhere in the constraint graph</p>",
        "id": 158549332,
        "sender_full_name": "tmandry",
        "timestamp": 1550166919
    },
    {
        "content": "<p>ah yes interesting point indeed</p>",
        "id": 158549341,
        "sender_full_name": "lqd",
        "timestamp": 1550166926
    },
    {
        "content": "<p>hmm</p>",
        "id": 158549350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166942
    },
    {
        "content": "<p>but maybe your point <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is that it should be able to find and report an error regardless</p>",
        "id": 158549353,
        "sender_full_name": "tmandry",
        "timestamp": 1550166944
    },
    {
        "content": "<p>that is my point, basically</p>",
        "id": 158549361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166954
    },
    {
        "content": "<p>it's possible I am mistaken</p>",
        "id": 158549403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166963
    },
    {
        "content": "<p>that would mean the problem should be earlier than this function, correct ?</p>",
        "id": 158549416,
        "sender_full_name": "lqd",
        "timestamp": 1550166977
    },
    {
        "content": "<p>but I still sorta suspect I am not ;)</p>",
        "id": 158549417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166977
    },
    {
        "content": "<p>I have to run in a bit but let me share one thought:</p>",
        "id": 158549431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550166987
    },
    {
        "content": "<p>the ICE is</p>\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: src/librustc/infer/lexical_region_resolve/mod.rs:632: collect_error_for_expanding_node() could not find error for var &#39;_#4r in universe U6, lower_bounds=[\n    RegionAndOrigin(RePlaceholder(Placeholder { universe: U6, name: BrNamed(crate0:DefIndex(1:10), &#39;a) }),Subtype(TypeTrace(ObligationCause { span: /home/nmatsakis/tmp/issue-58451.rs:8:5: 8:6, body_id: HirId { owner: DefIndex(0:4), loca\\\nl_id: 11 }, code: ItemObligation(DefId(0/0:3 ~ issue_58451[317d]::f[0])) }))),\n    RegionAndOrigin(RePlaceholder(Placeholder { universe: U6, name: BrNamed(crate0:DefIndex(1:10), &#39;a) }),Subtype(TypeTrace(ObligationCause { span: /home/nmatsakis/tmp/issue-58451.rs:8:5: 8:6, body_id: HirId { owner: DefIndex(0:4), loca\\\nl_id: 11 }, code: ItemObligation(DefId(0/0:3 ~ issue_58451[317d]::f[0])) })))\n], upper_bounds=[\n    RegionAndOrigin(RePlaceholder(Placeholder { universe: U6, name: BrNamed(crate0:DefIndex(1:10), &#39;a) }),Subtype(TypeTrace(ObligationCause { span: /home/nmatsakis/tmp/issue-58451.rs:8:5: 8:6, body_id: HirId { owner: DefIndex(0:4), loca\\\nl_id: 11 }, code: ItemObligation(DefId(0/0:3 ~ issue_58451[317d]::f[0])) }))),\n    RegionAndOrigin(RePlaceholder(Placeholder { universe: U6, name: BrNamed(crate0:DefIndex(1:10), &#39;a) }),Subtype(TypeTrace(ObligationCause { span: /home/nmatsakis/tmp/issue-58451.rs:8:5: 8:6, body_id: HirId { owner: DefIndex(0:4), loca\\\nl_id: 11 }, code: ItemObligation(DefId(0/0:3 ~ issue_58451[317d]::f[0])) })))\n]\n</pre></div>",
        "id": 158549454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550167017
    },
    {
        "content": "<p>in particular the error is listeing our the \"lower\" and \"upper\" bounds:</p>\n<ul>\n<li>lower<br>\n    - some placeholder in U6</li>\n<li>upper<br>\n    - same placeholder</li>\n</ul>",
        "id": 158549490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550167043
    },
    {
        "content": "<p>those regions are not in conflict</p>",
        "id": 158549496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550167052
    },
    {
        "content": "<p>but the conflict arises -- I think -- because the variable '_#4 can't name that placeholder (or some variable it's related to)</p>",
        "id": 158549511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550167068
    },
    {
        "content": "<p>basically I think that algorithm of walking the graph to find \"leaf nodes\" and comparing them is flawed</p>",
        "id": 158549525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550167081
    },
    {
        "content": "<p>in this context</p>",
        "id": 158549565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550167085
    },
    {
        "content": "<p>but it should be possible to extend it without <em>too</em> much difficult I suspect</p>",
        "id": 158549581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550167102
    },
    {
        "content": "<p>quick Q: is <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/infer/lexical_region_resolve/mod.rs#L574-L630\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/infer/lexical_region_resolve/mod.rs#L574-L630\">this</a> the graph walking algorithm you're mentioning (I assume it is), or something else upstream ?</p>",
        "id": 158549654,
        "sender_full_name": "lqd",
        "timestamp": 1550167171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> that's the one</p>",
        "id": 158549812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550167281
    },
    {
        "content": "<p>great, thank you</p>",
        "id": 158549882,
        "sender_full_name": "lqd",
        "timestamp": 1550167324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>  does this match your understanding ? we have '_#4r (== 'static), and the placeholder. The former should be a subregion of the latter, which we can't verify so this should be an error. We don't emit it immediately in <code>collect_errors</code>, and leave it for later, to do so in <code>collect_var_errors</code>. There, we'll later try to find the error for '_#4r, but it is in U6, which is the same universe as the placeholder: since it’s universe it can name itself, and the lower and upper bounds are the same (the placeholder), there's no conflict — and we're in the ICE territory. So I wondered (and could be very wrong, I know very little about this compared to you) whether in this case maybe the effective_lower_bound should still be 'static (as if the placeholder’s universe couldn't be named by the var’s universe). I tried 1) your earlier suggestion to <code>delay_span_bug</code> here – and confusingly it didn't end up emitting the region conflict (so there was ultimately only the \"missing parameter\" error here), and 2) also tried this 'static effective lower bound, which similarly didn't end up emitting an error either, even though (and this was different from just using <code>delay_span_bug</code>) there's a <code>SubSupConflict</code>, for '_#4r and the placeholder in U6, \"region inference error\" downstream. I only saw this latter one in the logs and not emitted by rustc, confusingly.</p>",
        "id": 158555809,
        "sender_full_name": "lqd",
        "timestamp": 1550171816
    },
    {
        "content": "<p>(gotta head out to dinner rn, will check back later :)</p>",
        "id": 158555841,
        "sender_full_name": "lqd",
        "timestamp": 1550171848
    },
    {
        "content": "<blockquote>\n<p>we have '_#4r (== 'static), and the placeholder. The former should be a subregion of the latter, which we can't verify so this should be an error, which we don't emit immediately in <code>collect_errors</code>, and leave for later to do so in <code>collect_var_errors</code>. </p>\n</blockquote>\n<p>yep!</p>\n<blockquote>\n<p>There, we'll later try to find the error for '_#4r, but it is in U6</p>\n</blockquote>\n<p>I don't believe <code>'_#4r</code> is in U6. If it were, it would not have been expanded to <code>'static</code> in <a href=\"https://github.com/rust-lang/rust/blob/f47ec2ad5b6887b3d400aee49e2294bd27733d18/src/librustc/infer/lexical_region_resolve/mod.rs#L257-L271\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f47ec2ad5b6887b3d400aee49e2294bd27733d18/src/librustc/infer/lexical_region_resolve/mod.rs#L257-L271\">this code</a> during the expand stage</p>",
        "id": 158558158,
        "sender_full_name": "tmandry",
        "timestamp": 1550173390
    },
    {
        "content": "<p>(I believe it that's the reason you see <code>='static</code>)</p>",
        "id": 158558189,
        "sender_full_name": "tmandry",
        "timestamp": 1550173431
    },
    {
        "content": "<p>I added a log in the if (on my phone rn so will get a link shortly) and saw: DEBUG 2019-02-14T19:07:53Z: rustc::infer::lexical_region_resolve: collect_error_for_expanding_node - node_universe=U6 can name universe=U6</p>",
        "id": 158558474,
        "sender_full_name": "lqd",
        "timestamp": 1550173638
    },
    {
        "content": "<p>à la:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">node_universe</span><span class=\"p\">.</span><span class=\"n\">cannot_name</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">universe</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;collect_error_for_expanding_node - node_universe={:?} cannot name universe={:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">node_universe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">universe</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">re_static</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;collect_error_for_expanding_node - node_universe={:?} can name universe={:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">node_universe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">universe</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lower_bound</span><span class=\"p\">.</span><span class=\"n\">region</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 158558656,
        "sender_full_name": "lqd",
        "timestamp": 1550173771
    },
    {
        "content": "<blockquote>\n<p>maybe the effective_lower_bound should still be 'static (as if the placeholder’s universe couldn't be named by the var’s universe).</p>\n</blockquote>\n<p>This.. seems right to me, but I don't fully understand the code myself</p>",
        "id": 158558733,
        "sender_full_name": "tmandry",
        "timestamp": 1550173810
    },
    {
        "content": "<p>I saw the = ‘static in some contraction logs</p>",
        "id": 158558766,
        "sender_full_name": "lqd",
        "timestamp": 1550173846
    },
    {
        "content": "<p>You can use triple-backticks to denote code blocks, same as github :)</p>",
        "id": 158558853,
        "sender_full_name": "tmandry",
        "timestamp": 1550173900
    },
    {
        "content": "<p>(i know but can’t find back ticks on my phone keyboard sorry :p)</p>",
        "id": 158558935,
        "sender_full_name": "lqd",
        "timestamp": 1550173926
    },
    {
        "content": "<p>ah, no problem :)</p>",
        "id": 158558993,
        "sender_full_name": "tmandry",
        "timestamp": 1550173972
    },
    {
        "content": "<p>(I’ll edit it as soon as I get to a proper keyboard soon)</p>",
        "id": 158558995,
        "sender_full_name": "lqd",
        "timestamp": 1550173974
    },
    {
        "content": "<p>are you sure the log you're seeing is for <code>'_#4r</code>?</p>",
        "id": 158559039,
        "sender_full_name": "tmandry",
        "timestamp": 1550174003
    },
    {
        "content": "<p>I’ll double check</p>",
        "id": 158559150,
        "sender_full_name": "lqd",
        "timestamp": 1550174061
    },
    {
        "content": "<blockquote>\n<p>I tried 1) your earlier suggestion to delay_span_bug here – and confusingly it didn't end up emitting the region conflict (so there was ultimately only the \"missing parameter\" error here)</p>\n</blockquote>\n<p>This I expect.. basically we get here because we fail to emit a diagnostic for the error. The assumption of <code>delay_span_bug</code> being that we can _only_ get here if there was some other error in the compilation causing this</p>",
        "id": 158559205,
        "sender_full_name": "tmandry",
        "timestamp": 1550174100
    },
    {
        "content": "<p>(But it sounds like this isn't the right way to go)</p>",
        "id": 158559267,
        "sender_full_name": "tmandry",
        "timestamp": 1550174153
    },
    {
        "content": "<blockquote>\n<p>also tried this 'static effective lower bound, which similarly didn't end up emitting an error either, even though (and this was different from just using <code>delay_span_bug</code>) there's a <code>SubSupConflict</code>, for '_#4r and the placeholder in U6, \"region inference error\" downstream. I only saw this latter one in the logs and not emitted by rustc, confusingly.</p>\n</blockquote>\n<p>This I find surprising, personally</p>",
        "id": 158559392,
        "sender_full_name": "tmandry",
        "timestamp": 1550174228
    },
    {
        "content": "<p>haha yeah so did I</p>",
        "id": 158559451,
        "sender_full_name": "lqd",
        "timestamp": 1550174275
    },
    {
        "content": "<p>the only node_universe I see <a href=\"https://github.com/rust-lang/rust/blob/f47ec2ad5b6887b3d400aee49e2294bd27733d18/src/librustc/infer/lexical_region_resolve/mod.rs#L596\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f47ec2ad5b6887b3d400aee49e2294bd27733d18/src/librustc/infer/lexical_region_resolve/mod.rs#L596\">here</a> in my logs is U6 :/ (but I haven't logged the node_idx so I'm not even sure it's '_#4r anymore) I don't know if these have shared information, and if so, wondered if there could be a mismatch between some information <code>self.var_infos</code> and <code>var_data</code> which is set <a href=\"https://github.com/rust-lang/rust/blob/f47ec2ad5b6887b3d400aee49e2294bd27733d18/src/librustc/infer/lexical_region_resolve/mod.rs#L415-L434\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f47ec2ad5b6887b3d400aee49e2294bd27733d18/src/librustc/infer/lexical_region_resolve/mod.rs#L415-L434\">here</a> to mark the var in error to collect later.</p>",
        "id": 158560260,
        "sender_full_name": "lqd",
        "timestamp": 1550174860
    },
    {
        "content": "<p>So, I get the following log:<br>\n<code>Expanding value of '_#4r from RePlaceholder(Placeholder { universe: U6, name: BrNamed(crate0:DefIndex(1:10), 'a) }) to ReStatic</code><br>\nthe question is, what is causing that :)</p>",
        "id": 158560398,
        "sender_full_name": "tmandry",
        "timestamp": 1550174959
    },
    {
        "content": "<p>is there a chain like '4: '2: '1: '0 ?</p>",
        "id": 158560749,
        "sender_full_name": "lqd",
        "timestamp": 1550175217
    },
    {
        "content": "<p>wait I think I see</p>",
        "id": 158561457,
        "sender_full_name": "tmandry",
        "timestamp": 1550175800
    },
    {
        "content": "<p>I thought you were logging in <code>expand_node</code>, but the log code you pasted looks like it's in <code>collect_error_for_expanding_node</code></p>",
        "id": 158561478,
        "sender_full_name": "tmandry",
        "timestamp": 1550175830
    },
    {
        "content": "<p>I bet if you log on the conditional in <code>expand_node</code> (I linked to above), you will see <code>'_#4r</code> cannot name our placeholder at first</p>",
        "id": 158561594,
        "sender_full_name": "tmandry",
        "timestamp": 1550175897
    },
    {
        "content": "<p>yeah maybe indeed — I was thinking all these mutations would have made 'static  show up in the lower/upper bounds in <code>collect_error_for_expanding_node</code>, but apparently not. I'll have to check this more closely tomorrow.... (I'm in Europe, so \"tomorrow\" is a bit sooner than one might think :)</p>",
        "id": 158561965,
        "sender_full_name": "lqd",
        "timestamp": 1550176204
    },
    {
        "content": "<p>how I understand this: <a href=\"https://gist.github.com/lqd/c75f840c6606f5e45fc10b0d5b07c478\" target=\"_blank\" title=\"https://gist.github.com/lqd/c75f840c6606f5e45fc10b0d5b07c478\">lexical_resolve_region log</a> there are RegSubVar/VarSubReg constraints between <code>'_#4r</code> and the placeholder, there are VarSubVar constraints between <code>'_#4r</code> and <code>'_#2r</code>. <code>'_#4r</code> is indeed in U6, as is the placeholder, so the universe can be named.  However, <code>'_#2r</code> is in U4 and can't name U6. This expands <code>'_#2r</code> to 'static, in turn updating <code>'_#4r</code> to 'static. We cannot verify that <code>'_#4r</code> &lt;= the placeholder, and is the error we'll want to emit later. In <code>collect_error_for_expanding_node</code> we look for the two regions R1, R2 where <code>R2: X: R1</code> but <code>R2: R1</code> is false. In our case, R1 == R2 == the placeholder, X is 'static, the placeholder being in the same universe as the var in error <code>'_#4r</code>, and there is no such lower and upper bound creating the SubSupConflict (so this is where we ICE). Does that kind of make sense <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  ?</p>",
        "id": 158617618,
        "sender_full_name": "lqd",
        "timestamp": 1550240945
    },
    {
        "content": "<p>however since these specific regions are not in conflict, which error we <em>should emit</em> is more of a mystery to me</p>",
        "id": 158622699,
        "sender_full_name": "lqd",
        "timestamp": 1550244914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> ps sorry I will try to read that shortly :)</p>",
        "id": 158643871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  salut Felix :) IIRC you're familiar with AST borrowck pre-Universes ? would you happen to know what kind of error <a href=\"https://github.com/rust-lang/rust/issues/58451\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58451\">#58451</a> is supposed to produce (instead of ICE-ing). I've summarized my understanding in this thread (just the message before this one) and there's more information from earlier with Tyler and Niko. In this particular situation, the lower and upper bounds do not conflict but there still needs to be an error of some kind (and IIRC blindly pushing a SubSupConflict error for the non-conflicting regions does not produce a UI error, so I'd assume it's filtered somewhere down the line and is a direction I could investigate for sure). If you happen to have ideas I could try or look up it'd be awesome</p>",
        "id": 158861111,
        "sender_full_name": "lqd",
        "timestamp": 1550567984
    },
    {
        "content": "<p>I'll try to look</p>",
        "id": 158863579,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550569408
    },
    {
        "content": "<p>thanks a bunch</p>",
        "id": 158863745,
        "sender_full_name": "lqd",
        "timestamp": 1550569472
    },
    {
        "content": "<p>I take it you are not interesting the actual diagnostic that used to be produced</p>",
        "id": 158863776,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550569488
    },
    {
        "content": "<p>since you can readily observe that via the stable channel</p>",
        "id": 158863803,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550569499
    },
    {
        "content": "<p>I can observe the older output but not easily infer how to reproduce it post-Universes (or in general, with my current knowledge of rustc)</p>",
        "id": 158864145,
        "sender_full_name": "lqd",
        "timestamp": 1550569637
    },
    {
        "content": "<p>I can surely investigate more in that direction by rebuilding an older rustc, if that's what you're proposing ?</p>",
        "id": 158864507,
        "sender_full_name": "lqd",
        "timestamp": 1550569788
    },
    {
        "content": "<p>that would indeed show more details on the error we used to produce if we wanted/needed to duplicate it</p>",
        "id": 158864772,
        "sender_full_name": "lqd",
        "timestamp": 1550569878
    },
    {
        "content": "<p>I suppose having a locally-built older rustc is certainly a straight-forward step, assuming you have spare hardware (cycles+memory) around to dedicate to that task.</p>",
        "id": 158865077,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550569999
    },
    {
        "content": "<p>I can try yeah, it's gonna take a while ofc, so I was hoping to avoid it as long as I could. I guess it can't be helped if we want to reproduce the same exact error, which I didn't know was what we needed (or if that's \"possible\")</p>",
        "id": 158865539,
        "sender_full_name": "lqd",
        "timestamp": 1550570204
    },
    {
        "content": "<p>alright I'll see what I can do with this, thanks <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 158866109,
        "sender_full_name": "lqd",
        "timestamp": 1550570425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I <strong>finally</strong> your update. Yes, that sounds like exactly what I expected, and I think perhaps reveals the flaw in the existing algorithm. Well, one caveat. You wrote this:</p>\n<blockquote>\n<p>we look for the two regions R1, R2 where <code>R2: X: R1</code> but <code>R2: R1</code> is false. In our case, R1 == R2 == the placeholder, X is 'static</p>\n</blockquote>\n<p>but I think <code>X</code> here is always going to be some <strong>inference variable whose current value is <code>'static</code></strong>, does that sound right?</p>",
        "id": 158873453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550575231
    },
    {
        "content": "<p>yeah</p>",
        "id": 158873476,
        "sender_full_name": "lqd",
        "timestamp": 1550575271
    },
    {
        "content": "<p>I think how I might extend the algorithm would be to say that if a \"predecessor\" of <code>X</code> (i.e., some lower bound) is a placeholder in a universe that <code>X</code> cannot name, then when we are testing for a predecessor that is greater than a successor (i.e., an upper bound), we test instead for <code>'static</code></p>",
        "id": 158873499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550575307
    },
    {
        "content": "<p>at least in this specific configuration of placeholder bounds I mean</p>",
        "id": 158873503,
        "sender_full_name": "lqd",
        "timestamp": 1550575317
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 158873505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550575319
    },
    {
        "content": "<p>I've not looked at the code itself just now to assess how easy/hard that would be</p>",
        "id": 158873558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550575347
    },
    {
        "content": "<p>would another VarSubVar constraint like we have here between '_#4r and '_#2r be considered a precedessor ?</p>",
        "id": 158873580,
        "sender_full_name": "lqd",
        "timestamp": 1550575385
    },
    {
        "content": "<p>since this is the one turning X ('_#4r) into 'static while still being able to name the bounds' universe</p>",
        "id": 158873609,
        "sender_full_name": "lqd",
        "timestamp": 1550575424
    },
    {
        "content": "<blockquote>\n<p>would another VarSubVar constraint like we have here between '_#4r and '_#2r be considered a precedessor ?</p>\n</blockquote>\n<p>ok I see</p>",
        "id": 158873830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550575579
    },
    {
        "content": "<p>it would not I thnk</p>",
        "id": 158873834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550575583
    },
    {
        "content": "<p>though we could change that</p>",
        "id": 158873844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550575589
    },
    {
        "content": "<p>and indeed this may be the thing to do</p>",
        "id": 158873851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550575596
    },
    {
        "content": "<p>that is, I think right now we walk the graph until we encounter constraints that are NOT from variables</p>",
        "id": 158873860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550575611
    },
    {
        "content": "<p>but we might have to think more carefully about var-var edges</p>",
        "id": 158873864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550575618
    },
    {
        "content": "<p>I'll look at the graph walking more carefully as I seem to remember some traversal due to VarSubVar constraints but can't remember more; and this is where it might be more interesting indeed to look at them to see if they should be terminal</p>",
        "id": 158873958,
        "sender_full_name": "lqd",
        "timestamp": 1550575724
    },
    {
        "content": "<p>sweet, thanks Niko</p>",
        "id": 158874110,
        "sender_full_name": "lqd",
        "timestamp": 1550575905
    },
    {
        "content": "<p>so <a href=\"https://github.com/rust-lang/rust/issues/58592\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58592\">#58592</a> will fix this ICE, but I did have a WIP fix <a href=\"https://github.com/lqd/rust/commit/4bb206023931b8c29eb93f9a33a7565ca39bad9f\" target=\"_blank\" title=\"https://github.com/lqd/rust/commit/4bb206023931b8c29eb93f9a33a7565ca39bad9f\">here</a>. I'm not happy with it yet as it's very ad-hoc and specific to this issue. I'll work to generalize it so we can use it if/when the leak check revival is removed again, but at least tests currently pass with this fix. The error now generated for the code in the issue is ignored later anyway (the infcx is \"tainted\").</p>",
        "id": 159070945,
        "sender_full_name": "lqd",
        "timestamp": 1550758966
    },
    {
        "content": "<p>it does have this artful diagram tho</p>\n<div class=\"codehilite\"><pre><span></span>       +--------+\n       v        |\n       &#39;1 +---&gt; &#39;2 +---&gt; &#39;!1\n                ^         |\n                +---------+\n</pre></div>\n\n\n<p>so at least there's that :)</p>",
        "id": 159071081,
        "sender_full_name": "lqd",
        "timestamp": 1550759048
    }
]