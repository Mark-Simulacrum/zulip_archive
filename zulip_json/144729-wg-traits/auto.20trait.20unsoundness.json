[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span></p>",
        "id": 237828524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396442
    },
    {
        "content": "<p>maybe I should give this a better topic title :)</p>",
        "id": 237828548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396451
    },
    {
        "content": "<p>auto trait unsoundness?</p>",
        "id": 237828594,
        "sender_full_name": "lcnr",
        "timestamp": 1620396463
    },
    {
        "content": "<p>is what i assume we're going to talk about?</p>",
        "id": 237828634,
        "sender_full_name": "lcnr",
        "timestamp": 1620396483
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/84857\">#84857</a></p>",
        "id": 237828685,
        "sender_full_name": "lcnr",
        "timestamp": 1620396489
    },
    {
        "content": "<p>I <em>think</em> so</p>",
        "id": 237828791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396527
    },
    {
        "content": "<p>true confessions: I was hoping you'd open the topic because I wasn't quite sure</p>",
        "id": 237828826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396543
    },
    {
        "content": "<p>we do have a bunch of things which deserve some time ^^</p>",
        "id": 237828897,
        "sender_full_name": "lcnr",
        "timestamp": 1620396568
    },
    {
        "content": "<p>but i think that the auto trait stuff is probably to most relevant rn</p>",
        "id": 237828921,
        "sender_full_name": "lcnr",
        "timestamp": 1620396587
    },
    {
        "content": "<p>did you already look at <a href=\"https://github.com/rust-lang/rust/issues/84857\">#84857</a>?</p>",
        "id": 237829062,
        "sender_full_name": "lcnr",
        "timestamp": 1620396637
    },
    {
        "content": "<p>ok so let me read this issue more closely</p>",
        "id": 237829075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396642
    },
    {
        "content": "<p>ok so</p>",
        "id": 237829318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396735
    },
    {
        "content": "<p>the relevant src: <a href=\"https://github.com/rust-lang/rust/blob/e5f83d24aee866a14753a7cedbb4e301dfe5bef5/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs#L300-L302\">https://github.com/rust-lang/rust/blob/e5f83d24aee866a14753a7cedbb4e301dfe5bef5/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs#L300-L302</a></p>",
        "id": 237829327,
        "sender_full_name": "lcnr",
        "timestamp": 1620396737
    },
    {
        "content": "<p>the question of whether this is unsound comes down to how we expect Send to apply</p>",
        "id": 237829344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396746
    },
    {
        "content": "<p>\"whether\", not \"why\"?</p>",
        "id": 237829414,
        "sender_full_name": "lcnr",
        "timestamp": 1620396777
    },
    {
        "content": "<p>this is a safe (using <code>UnwindSafe</code> instead of <code>Send</code>) segfault</p>",
        "id": 237829457,
        "sender_full_name": "lcnr",
        "timestamp": 1620396796
    },
    {
        "content": "<p>well</p>",
        "id": 237829650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396860
    },
    {
        "content": "<p>ok :) <em>why</em></p>",
        "id": 237829699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396888
    },
    {
        "content": "<p>basically what <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> said here:</p>\n<blockquote>\n<p>I think there was some discussion previously in wg-traits that an implicit impl should never be considered if there is an explicit impl. And I think that makes sense and would fix this. It isn't fully backwards compatible though, but I'm unsure how often that would get run into in practice.</p>\n</blockquote>",
        "id": 237829750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396908
    },
    {
        "content": "<p>there has been a long-standing debate about whether one should think of auto traits as <em>always</em> adding an implicit impl or not</p>",
        "id": 237829787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396925
    },
    {
        "content": "<p>my preference was to think of them as adding an implicit impl only if no explicit impl exists, for some definition of exists</p>",
        "id": 237829821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396940
    },
    {
        "content": "<p>Oh hey, that's me</p>",
        "id": 237829837,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620396945
    },
    {
        "content": "<p>however, you showed me some examples of how stable behavior would change iirc</p>",
        "id": 237829847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396952
    },
    {
        "content": "<p>I wonder if we have notes</p>",
        "id": 237829853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396956
    },
    {
        "content": "<p>yeah, i think that's what we want</p>",
        "id": 237829868,
        "sender_full_name": "lcnr",
        "timestamp": 1620396958
    },
    {
        "content": "<p>this issue raises the stakes :)</p>",
        "id": 237829875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620396961
    },
    {
        "content": "<p>the semantics that I \"intended\" was something like this:</p>\n<ul>\n<li>you can only implement auto traits where the Self type is a \"local struct\"</li>\n</ul>",
        "id": 237829998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397003
    },
    {
        "content": "<p>(let's ignore the other cases for a second)</p>",
        "id": 237830009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397010
    },
    {
        "content": "<p>if there is an impl with any polarity for a given struct, it does not have any automatic impls</p>",
        "id": 237830049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397033
    },
    {
        "content": "<p>so kind of \"if you see explicit impls, you see everything that exists for that struct'</p>",
        "id": 237830076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397047
    },
    {
        "content": "<p>this is what chalk implements</p>",
        "id": 237830094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397059
    },
    {
        "content": "<p>it is not what rustc implements</p>",
        "id": 237830105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397064
    },
    {
        "content": "<p>(apparently) :)</p>",
        "id": 237830118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397067
    },
    {
        "content": "<p>so, to quickly give some background: I think we can either 1) always consider the implicit impl with a lower priority or 2) consistently discard the implicit impl if an explicit one exists</p>",
        "id": 237830294,
        "sender_full_name": "lcnr",
        "timestamp": 1620397151
    },
    {
        "content": "<p>let's walk through this in a bit more detail</p>",
        "id": 237830325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397167
    },
    {
        "content": "<p>2) is both what I strongly prefer and what you've intended before</p>",
        "id": 237830334,
        "sender_full_name": "lcnr",
        "timestamp": 1620397171
    },
    {
        "content": "<p>do you remember the converastion I keep referring to where you told me how that would change stable behavior?</p>",
        "id": 237830358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397186
    },
    {
        "content": "<p>it might've been someone else :)</p>",
        "id": 237830370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397190
    },
    {
        "content": "<p>I'd like to collect all the notes in one place and propose a path forward</p>",
        "id": 237830386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/auto.20trait.20unsoundness/near/237830358\">said</a>:</p>\n<blockquote>\n<p>do you remember the converastion I keep referring to where you told me how that would change stable behavior?</p>\n</blockquote>\n<p>both do <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 237830395,
        "sender_full_name": "lcnr",
        "timestamp": 1620397201
    },
    {
        "content": "<p>hackmd: <a href=\"https://hackmd.io/8mcP_izdSoKb1rIlkWTdKQ\">https://hackmd.io/8mcP_izdSoKb1rIlkWTdKQ</a></p>",
        "id": 237830412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397202
    },
    {
        "content": "<p>yeah, I mean, we <em>have</em> to change stable behavior somehow, since I-unsound :)</p>",
        "id": 237830482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397222
    },
    {
        "content": "<p>let me quickly copy the example where 1) breaks stuff</p>",
        "id": 237830489,
        "sender_full_name": "lcnr",
        "timestamp": 1620397225
    },
    {
        "content": "<p>I don't really understand what \"lower priority\" means</p>",
        "id": 237831335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397555
    },
    {
        "content": "<p>esp. for an auto trait</p>",
        "id": 237831350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397561
    },
    {
        "content": "<p>to discard the auto candidate during winnowing</p>",
        "id": 237831408,
        "sender_full_name": "lcnr",
        "timestamp": 1620397571
    },
    {
        "content": "<p>i think i have a branch for this</p>",
        "id": 237831437,
        "sender_full_name": "lcnr",
        "timestamp": 1620397581
    },
    {
        "content": "<p>pretty much: drop <code>AutoImplCandidate</code>s here: <a href=\"https://github.com/rust-lang/rust/blob/e5f83d24aee866a14753a7cedbb4e301dfe5bef5/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1340-L1341\">https://github.com/rust-lang/rust/blob/e5f83d24aee866a14753a7cedbb4e301dfe5bef5/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1340-L1341</a></p>",
        "id": 237831494,
        "sender_full_name": "lcnr",
        "timestamp": 1620397608
    },
    {
        "content": "<p>so operational :)</p>",
        "id": 237831504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397612
    },
    {
        "content": "<p>ok</p>",
        "id": 237831511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397614
    },
    {
        "content": "<p>I guess I know what you mean in terms of the code; I'm not sure yet how to understand that from a \"logic\" perspective</p>",
        "id": 237831558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397633
    },
    {
        "content": "<p>let me define the alternatives</p>",
        "id": 237831577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397644
    },
    {
        "content": "<p>here's the problem with \"implicit impl is always generated\"</p>",
        "id": 237831647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397679
    },
    {
        "content": "<p>if you have:</p>",
        "id": 237831706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397689
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237831737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397700
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237831769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397717
    },
    {
        "content": "<p>then there is implicitly:</p>",
        "id": 237831783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397724
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>: <span class=\"nb\">Send</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237831808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397735
    },
    {
        "content": "<p>now we have overlapping Send and !Send impls, which means we need to define that as a thing that can happen</p>",
        "id": 237831836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397752
    },
    {
        "content": "<p>I have been thinking of them as exclusive</p>",
        "id": 237831844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397756
    },
    {
        "content": "<p>oh, true <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 237831857,
        "sender_full_name": "lcnr",
        "timestamp": 1620397762
    },
    {
        "content": "<p>with negative impls that would also be unsound <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 237831874,
        "sender_full_name": "lcnr",
        "timestamp": 1620397771
    },
    {
        "content": "<p>so you wind up with a more complex logic</p>",
        "id": 237831877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397773
    },
    {
        "content": "<p>there is a name for it:</p>",
        "id": 237831890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397781
    },
    {
        "content": "<p>defeasible logics</p>",
        "id": 237831893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397782
    },
    {
        "content": "<p>because the implicit impl can be \"defeated\" by the negative one</p>",
        "id": 237831921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397796
    },
    {
        "content": "<p>they <em>are</em> handy, as they let you define general rules, and then carve out exceptions</p>",
        "id": 237831980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397805
    },
    {
        "content": "<p>but I kind of feel like Rust's logic is complex enough without adding defeasability into the mix</p>",
        "id": 237832049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397828
    },
    {
        "content": "<p>(i do prefer the second approach, but if that were to cause too many regressions) we could also completely disable auto traits if negative impls are present but keep them if there are positive ones <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 237832131,
        "sender_full_name": "lcnr",
        "timestamp": 1620397860
    },
    {
        "content": "<p>which would be sound</p>",
        "id": 237832140,
        "sender_full_name": "lcnr",
        "timestamp": 1620397863
    },
    {
        "content": "<p>afaict</p>",
        "id": 237832144,
        "sender_full_name": "lcnr",
        "timestamp": 1620397866
    },
    {
        "content": "<p>but incredibly ugly</p>",
        "id": 237832160,
        "sender_full_name": "lcnr",
        "timestamp": 1620397873
    },
    {
        "content": "<p>yes</p>",
        "id": 237832172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397878
    },
    {
        "content": "<p>I am listing the alternatives I see, and that was going to be one of the \"hybrids\"</p>",
        "id": 237832184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397885
    },
    {
        "content": "<p>but it feels like -- what is the point of a positive impl?</p>",
        "id": 237832202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397891
    },
    {
        "content": "<p>well, I guess it might cover some territory that the implicit one doesn't cover</p>",
        "id": 237832221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397899
    },
    {
        "content": "<p>so</p>",
        "id": 237832449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397984
    },
    {
        "content": "<p>let me read the examples you've written</p>",
        "id": 237832472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397989
    },
    {
        "content": "<p>as I don't understand them</p>",
        "id": 237832486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620397991
    },
    {
        "content": "<p>the structure I want for the doc is:</p>",
        "id": 237832524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620398006
    },
    {
        "content": "<p>a list of options, each linking to more detailed write-ups of considerations</p>",
        "id": 237832551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620398018
    },
    {
        "content": "<p>ok, I wrote up my exmaples, going to dig into yours and see how they apply</p>",
        "id": 237833662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620398433
    },
    {
        "content": "<blockquote>\n<p>HiddenRefToT</p>\n</blockquote>",
        "id": 237833688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620398442
    },
    {
        "content": "<p>the question here is whether <code>fn(T): Send</code> if <code>T: Send</code>, I guess.</p>",
        "id": 237833716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620398455
    },
    {
        "content": "<p>I'm tempted to say that this phantom data is wrong</p>",
        "id": 237833735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620398462
    },
    {
        "content": "<p>We can just mention <code>MutexGuard</code></p>",
        "id": 237833761,
        "sender_full_name": "lcnr",
        "timestamp": 1620398473
    },
    {
        "content": "<p>yeah, I'm looking at ttps://github.com/rust-lang/rust/issues/41622</p>",
        "id": 237833788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620398485
    },
    {
        "content": "<p>as that's an actually good example <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 237833789,
        "sender_full_name": "lcnr",
        "timestamp": 1620398485
    },
    {
        "content": "<p>i'm looking at this example</p>",
        "id": 237835165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399040
    },
    {
        "content": "<p>I don't understandddd.......</p>",
        "id": 237835282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399093
    },
    {
        "content": "<p>ok, maybe I do</p>",
        "id": 237835317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399108
    },
    {
        "content": "<p>the \"#### Backcompat concern: Implicit impls are currently usable\" section?</p>",
        "id": 237835321,
        "sender_full_name": "lcnr",
        "timestamp": 1620399110
    },
    {
        "content": "<p><em>ah</em></p>",
        "id": 237835337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399117
    },
    {
        "content": "<p>Mutexguard cheats</p>",
        "id": 237835385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399124
    },
    {
        "content": "<p>it has an <code>&amp;'a Mutex</code> but it uses it in ways outside the API</p>",
        "id": 237835405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399136
    },
    {
        "content": "<p>No, I was trying to understand why the implicit impl was broken</p>",
        "id": 237835469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399160
    },
    {
        "content": "<p>this is a very good example, yes.</p>",
        "id": 237835484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399169
    },
    {
        "content": "<p>it's almost an argument for refining the implicit impl but anyway</p>",
        "id": 237835512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399181
    },
    {
        "content": "<p>but yes that's a good example of the kind of reasoning I think is harder</p>",
        "id": 237835835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399309
    },
    {
        "content": "<p>and why I think PositiveSurprise is actually a kind of benefit</p>",
        "id": 237835864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399317
    },
    {
        "content": "<blockquote>\n<p>NB: The underlying problem here is that the <code>MutexGuard</code> has an <code>&amp;Mutex</code>; the auto trait considers this <code>Sync</code> because the <em>external API</em> is indeed <code>Sync</code>. But <code>MutexGuard</code> has access to internal methods and fields that make it not <code>Sync</code>. One might argue this is also a shortcoming of the implicit impl, and that it should inline the fields of <code>Mutex</code> into the impl.</p>\n</blockquote>",
        "id": 237836147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/auto.20trait.20unsoundness/near/237835864\">said</a>:</p>\n<blockquote>\n<p>and why I think PositiveSurprise is actually a kind of benefit</p>\n</blockquote>\n<p>more to the point, I think we're just not setup to have such an expressive system at the moment :)</p>",
        "id": 237836203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399431
    },
    {
        "content": "<p>not happy with the \"#### Backcompat concern: Implicit impls are currently usable\" section, rn</p>",
        "id": 237836336,
        "sender_full_name": "lcnr",
        "timestamp": 1620399482
    },
    {
        "content": "<p>I'm having a hard time following it <em>but</em></p>",
        "id": 237836387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399494
    },
    {
        "content": "<p>it suggests that if we dug into marker traits</p>",
        "id": 237836405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399498
    },
    {
        "content": "<p>going to move this as a link to <code>PositiveSurprise</code></p>",
        "id": 237836415,
        "sender_full_name": "lcnr",
        "timestamp": 1620399502
    },
    {
        "content": "<p>we could plausibly land this change <em>and</em> a better alternative at once?</p>",
        "id": 237836430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399508
    },
    {
        "content": "<p>I'd like to understand a bit how this arises out of the current impl</p>",
        "id": 237836462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399526
    },
    {
        "content": "<p>oh, I think maybe i know</p>",
        "id": 237836473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399530
    },
    {
        "content": "<p>we reject the explicit candidate, is that it?</p>",
        "id": 237836507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620399544
    },
    {
        "content": "<p>yeah, because of <code>unsafe impl&lt;E, ...&gt; Send for Eq&lt;E, E, ...&gt;</code></p>",
        "id": 237836549,
        "sender_full_name": "lcnr",
        "timestamp": 1620399563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/auto.20trait.20unsoundness/near/237836507\">said</a>:</p>\n<blockquote>\n<p>we reject the explicit candidate, is that it?</p>\n</blockquote>\n<p>rejects if the first two arguments are not equal</p>",
        "id": 237836555,
        "sender_full_name": "lcnr",
        "timestamp": 1620399569
    },
    {
        "content": "<p>it's really magical how well this worked <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 237836593,
        "sender_full_name": "lcnr",
        "timestamp": 1620399581
    },
    {
        "content": "<p>think i can go and implement the second option this weekend, so that we can get some actual data here</p>",
        "id": 237837352,
        "sender_full_name": "lcnr",
        "timestamp": 1620399841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/auto.20trait.20unsoundness/near/237836430\">said</a>:</p>\n<blockquote>\n<p>we could plausibly land this change <em>and</em> a better alternative at once?</p>\n</blockquote>\n<p>yeah <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> though marker traits are also unsound currently :p</p>",
        "id": 237837493,
        "sender_full_name": "lcnr",
        "timestamp": 1620399892
    },
    {
        "content": "<p>(wrt incorrect auto impls) uh, there's also <a href=\"https://github.com/rust-lang/rust/issues/54768#issuecomment-426448372\">https://github.com/rust-lang/rust/issues/54768#issuecomment-426448372</a> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  fun</p>",
        "id": 237839066,
        "sender_full_name": "lcnr",
        "timestamp": 1620400488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we want to remove all auto impls for <code>Foo&lt;A, B&gt;: Trait&lt;C, D&gt;</code> if there's a </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237846343,
        "sender_full_name": "lcnr",
        "timestamp": 1620403041
    },
    {
        "content": "<p>do we <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 237846354,
        "sender_full_name": "lcnr",
        "timestamp": 1620403046
    },
    {
        "content": "<p>auto traits don't have trait parameters right now</p>",
        "id": 237846401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620403072
    },
    {
        "content": "<p>they can't?</p>",
        "id": 237846444,
        "sender_full_name": "lcnr",
        "timestamp": 1620403084
    },
    {
        "content": "<p>oh '^^</p>",
        "id": 237846475,
        "sender_full_name": "lcnr",
        "timestamp": 1620403089
    },
    {
        "content": "<p>maybe they can, but we shouldn't allow it :)</p>",
        "id": 237846482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620403093
    },
    {
        "content": "<p>not worth it</p>",
        "id": 237846495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620403096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/auto.20trait.20unsoundness/near/237837493\">said</a>:</p>\n<blockquote>\n<p>yeah <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> though marker traits are also unsound currently :p</p>\n</blockquote>\n<p>yeah, I've been putting off reading into that thread, have to do that</p>",
        "id": 237846553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620403116
    },
    {
        "content": "<p>^^</p>",
        "id": 237846565,
        "sender_full_name": "lcnr",
        "timestamp": 1620403124
    },
    {
        "content": "<p>ok, so i started implementing the second approach in <a href=\"https://github.com/rust-lang/rust/issues/85048\">#85048</a></p>",
        "id": 237871632,
        "sender_full_name": "lcnr",
        "timestamp": 1620413205
    },
    {
        "content": "<p>one issue are opaque types</p>",
        "id": 237871653,
        "sender_full_name": "lcnr",
        "timestamp": 1620413213
    },
    {
        "content": "<p>before we discarded auto trait impls is <code>ProjectionCandidate</code>s were present</p>",
        "id": 237871885,
        "sender_full_name": "lcnr",
        "timestamp": 1620413310
    },
    {
        "content": "<p>i now changed this to never discard auto impl candidates if no explicit candidate applies</p>",
        "id": 237871933,
        "sender_full_name": "lcnr",
        "timestamp": 1620413339
    },
    {
        "content": "<p><del>this means that while trying to confirm the auto trait candidate, we get the <code>constituent_types_for_ty</code> which causes cycles for <code>ty::Opaque</code> (probably while wf checking opaque types... not yet completely sure)</del></p>",
        "id": 237872203,
        "sender_full_name": "lcnr",
        "timestamp": 1620413468
    },
    {
        "content": "<p>i guess an example is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(min_type_alias_impl_trait)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">AssocType</span>: <span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ret</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">AssocType</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">AssocType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ret</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">AssocType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">AssocType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ret</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">AssocType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyLifetimeTrait</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">AssocType</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ret</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">AssocType</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyLifetimeTrait</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">AssocType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ret</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">AssocType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237872572,
        "sender_full_name": "lcnr",
        "timestamp": 1620413614
    },
    {
        "content": "<p>this results in</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0283</span><span class=\"p\">]</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">annotations</span><span class=\"w\"> </span><span class=\"n\">needed</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">9</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">type</span> <span class=\"nc\">AssocType</span>: <span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">MyTrait</span>::<span class=\"n\">AssocType</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">type</span> <span class=\"nc\">AssocType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">infer</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">for</span><span class=\"w\"> </span><span class=\"n\">opaque</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">satisfy</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span>: <span class=\"nb\">Send</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0283</span><span class=\"p\">]</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">annotations</span><span class=\"w\"> </span><span class=\"n\">needed</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">16</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">type</span> <span class=\"nc\">AssocType</span>: <span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">MyTrait</span>::<span class=\"n\">AssocType</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">type</span> <span class=\"nc\">AssocType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">infer</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">for</span><span class=\"w\"> </span><span class=\"n\">opaque</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">satisfy</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span>: <span class=\"nb\">Send</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0283</span><span class=\"p\">]</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">annotations</span><span class=\"w\"> </span><span class=\"n\">needed</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">28</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">23</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">type</span> <span class=\"nc\">AssocType</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">MyLifetimeTrait</span>::<span class=\"n\">AssocType</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">28</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">type</span> <span class=\"nc\">AssocType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">infer</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">for</span><span class=\"w\"> </span><span class=\"n\">opaque</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">satisfy</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span>: <span class=\"nb\">Send</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237872846,
        "sender_full_name": "lcnr",
        "timestamp": 1620413737
    },
    {
        "content": "<p>ah, that one seems fine <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 237872936,
        "sender_full_name": "lcnr",
        "timestamp": 1620413767
    },
    {
        "content": "<p>ah yeah, that test was just me doing an oupsie</p>",
        "id": 237874188,
        "sender_full_name": "lcnr",
        "timestamp": 1620414257
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_impl_trait)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(min_type_alias_impl_trait, type_alias_impl_trait, impl_trait_in_bindings)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// This is not structural-match</span>\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">value</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALUE</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237875551,
        "sender_full_name": "lcnr",
        "timestamp": 1620414820
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0391]: cycle detected when computing type of `Foo::{opaque#0}`\n  --&gt; src/lib.rs:5:12\n   |\n5  | type Foo = impl Send;\n   |            ^^^^^^^^^\n   |\nnote: ...which requires type-checking `VALUE`...\n  --&gt; src/lib.rs:13:1\n   |\n13 | const VALUE: Foo = value();\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = note: ...which requires evaluating trait selection obligation `impl std::marker::Send: std::marker::Send`...\n   = note: ...which again requires computing type of `Foo::{opaque#0}`, completing the cycle\nnote: cycle used when checking item types in top-level module\n  --&gt; src/lib.rs:1:1\n   |\n1  | / #![feature(const_impl_trait)]\n2  | | #![feature(min_type_alias_impl_trait, type_alias_impl_trait, impl_trait_in_bindings)]\n3  | | #![allow(incomplete_features)]\n4  | |\n...  |\n12 | | }\n13 | | const VALUE: Foo = value();\n   | |___________________________^\n</code></pre></div>",
        "id": 237875642,
        "sender_full_name": "lcnr",
        "timestamp": 1620414847
    },
    {
        "content": "<p>do we want to special case auto impl candidate confirmation for opaque types so that they don't try to get the concrete type if the auto trait we're searching for is one of its <code>item_bounds</code>?</p>",
        "id": 237876027,
        "sender_full_name": "lcnr",
        "timestamp": 1620415002
    },
    {
        "content": "<p>or...</p>",
        "id": 237876866,
        "sender_full_name": "lcnr",
        "timestamp": 1620415360
    },
    {
        "content": "<p>do we want this earlier and not add an auto impl candidate for <code>ty::Opaque</code> if it contains a fitting trait predicate in its <code>item_bounds</code>?</p>",
        "id": 237877110,
        "sender_full_name": "lcnr",
        "timestamp": 1620415463
    },
    {
        "content": "<p>hmm <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have any immediate thoughts about the last 5 messages?</p>",
        "id": 237877156,
        "sender_full_name": "lcnr",
        "timestamp": 1620415493
    },
    {
        "content": "<p>if not i can just experiment a bit</p>",
        "id": 237877213,
        "sender_full_name": "lcnr",
        "timestamp": 1620415518
    },
    {
        "content": "<p>also, do you know whether we previously (before 1.0) only used <code>fast_reject</code> (edit: for impl candidates) during candidate assembly instead of checking the whole trait refs</p>",
        "id": 237878287,
        "sender_full_name": "lcnr",
        "timestamp": 1620415994
    },
    {
        "content": "<p>because if we did, auto traits would have been implemented correctly</p>",
        "id": 237878331,
        "sender_full_name": "lcnr",
        "timestamp": 1620416010
    }
]