[
    {
        "content": "<p>I'm going to be a tad late</p>",
        "id": 217061891,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605646769
    },
    {
        "content": "<p>Okay <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span>, meeting time</p>",
        "id": 217062316,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605646981
    },
    {
        "content": "<p>Who's around?</p>",
        "id": 217062349,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605646993
    },
    {
        "content": "<p>I'm around</p>",
        "id": 217062534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647094
    },
    {
        "content": "<p>Sorry I'm a few minutes late</p>",
        "id": 217062543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647100
    },
    {
        "content": "<p>No worries. We probably don't have a ton to talk about.</p>",
        "id": 217062596,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647133
    },
    {
        "content": "<p>Yeah, maybe not.</p>",
        "id": 217062633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647156
    },
    {
        "content": "<p>I did do a bit of experimentation towards removing <code>Param</code> from rustc</p>",
        "id": 217062648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647162
    },
    {
        "content": "<p>But, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you said yesterday you wanted to talk about something related to type library? Or am I misremembering</p>",
        "id": 217062658,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-11-17/near/217062648\">said</a>:</p>\n<blockquote>\n<p>I did do a bit of experimentation towards removing <code>Param</code> from rustc</p>\n</blockquote>\n<p>Oh, I want to hear about this!</p>",
        "id": 217062695,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647178
    },
    {
        "content": "<p>I don't remember what I said yesterday :)</p>",
        "id": 217062728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647197
    },
    {
        "content": "<p>I wouldn't mind reviewing the plan we had made and checking if there are open issues or next steps we can advertise</p>",
        "id": 217062756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647214
    },
    {
        "content": "<p>re: removing Param, I started experimenting by introducing a <code>EarlyBound&lt;T&gt;</code> wrapper similar to <code>Binder</code></p>",
        "id": 217062787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647229
    },
    {
        "content": "<p>i.e., when you fetch <code>tcx.type_of(def_id)</code> you get back <code>EarlyBound&lt;Ty&lt;'tcx&gt;&gt;</code> and not just <code>Ty&lt;'tcx&gt;</code></p>",
        "id": 217062815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647245
    },
    {
        "content": "<p>the idea is partly just for me to get a feeling of where/how things are used :)</p>",
        "id": 217062831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647255
    },
    {
        "content": "<p>but basically you can only invoke <code>subst</code> on <code>EarlyBound&lt;T&gt;</code></p>",
        "id": 217062842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647263
    },
    {
        "content": "<p>I don't envision this as the ultimate end-state</p>",
        "id": 217062854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647273
    },
    {
        "content": "<p>but it does force me to say explicitly those cases where we are using (1) the types as placeholders or (2) the places where we are substituting</p>",
        "id": 217062923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647296
    },
    {
        "content": "<p>interesting</p>",
        "id": 217062945,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647308
    },
    {
        "content": "<p>how far did that get you?</p>",
        "id": 217062955,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647314
    },
    {
        "content": "<p>and look for places where it seems like we're doing neither of those things ..</p>",
        "id": 217062963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647318
    },
    {
        "content": "<p>well I got rustc_middle building but not the rest yet :P</p>",
        "id": 217062974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647327
    },
    {
        "content": "<p>rustc_typeck and friends will be more interesting</p>",
        "id": 217063003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647345
    },
    {
        "content": "<p>hey, that's a start</p>",
        "id": 217063007,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647348
    },
    {
        "content": "<p>so far it felt like code <em>mostly</em> fit the model</p>",
        "id": 217063020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647357
    },
    {
        "content": "<p>one interesting third case is that there is some code that wants to treat the values as <em>bound</em> -- basically the implementation of those queries that return <code>EarlyBound</code></p>",
        "id": 217063059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647378
    },
    {
        "content": "<p>nice</p>",
        "id": 217063060,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647378
    },
    {
        "content": "<p>I did get to thinking about another approach but I think I decided it's too far-fetched</p>",
        "id": 217063102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647396
    },
    {
        "content": "<p>the idea being basically to pair each type with its own substitution that is applied \"lazilly\"</p>",
        "id": 217063179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647413
    },
    {
        "content": "<p>hmm</p>",
        "id": 217063251,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647446
    },
    {
        "content": "<p>so that whenever you have a type that may contain <em>placeholders</em> you're actually passing around a <code>(Ty, Subst)</code> pair</p>",
        "id": 217063260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647449
    },
    {
        "content": "<p>and you never actually <em>fold</em> the <code>Ty</code></p>",
        "id": 217063271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647453
    },
    {
        "content": "<p>what would be the subst?</p>",
        "id": 217063301,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647465
    },
    {
        "content": "<p>let me illustrate by example</p>",
        "id": 217063313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647472
    },
    {
        "content": "<p><code>fn foo&lt;T&gt;() -&gt; Box&lt;T&gt;</code></p>",
        "id": 217063326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647479
    },
    {
        "content": "<p>the return type of this might be <code>Box&lt;^0&gt;</code></p>",
        "id": 217063333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647486
    },
    {
        "content": "<p>if I call it like <code>foo::&lt;u32&gt;</code>, I would pass around <code>(Box&lt;^0&gt;, [0=u32])</code></p>",
        "id": 217063363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647504
    },
    {
        "content": "<p>anyway, you should just ignore me, because I don't really know if this would even work, and it would probalby be a lot of work to find out</p>",
        "id": 217063448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647538
    },
    {
        "content": "<p>fair enough</p>",
        "id": 217063482,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647559
    },
    {
        "content": "<p>I've seen some papers that take approaches <em>sort of</em> like this for performance reasons, where they kind of introduce <code>T = Substitution(T')</code> as a kind of type</p>",
        "id": 217063484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647561
    },
    {
        "content": "<p>basically so that they don't have to eagerly apply substitutions</p>",
        "id": 217063495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647567
    },
    {
        "content": "<p>unless it matters</p>",
        "id": 217063501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647570
    },
    {
        "content": "<p>anyway I expect to keep pushing a bit on the <code>EarlyBound</code> code I was writing to see if I find other interesting cases</p>",
        "id": 217063534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647588
    },
    {
        "content": "<p>I can already see that you get to a bit of the annoyance you get to with <code>Binder</code></p>",
        "id": 217063564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647602
    },
    {
        "content": "<p>awesome! Keep me/us updated!</p>",
        "id": 217063581,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647613
    },
    {
        "content": "<p>e.g., you want to do some \"mapping\" within the binder and it's not as ergonomic or convenient as you might like</p>",
        "id": 217063582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647614
    },
    {
        "content": "<p>I guess I can adopt a similar <code>rebind</code> convention</p>",
        "id": 217063614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647630
    },
    {
        "content": "<p>I mean, I think eventually early and late bound might just be merged right</p>",
        "id": 217063706,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647661
    },
    {
        "content": "<p>yes</p>",
        "id": 217063800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647702
    },
    {
        "content": "<p>that's my point</p>",
        "id": 217063804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647704
    },
    {
        "content": "<p>sorry, I didn't make that clear</p>",
        "id": 217063821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647711
    },
    {
        "content": "<p>I meant that I should align the conventions closely :)</p>",
        "id": 217063831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647717
    },
    {
        "content": "<p>agreed :)</p>",
        "id": 217063840,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647723
    },
    {
        "content": "<p>(that said it is plausible that this <code>EarlyBound</code> work <em>could</em> land, depending how it turns out, as an intermediate step)</p>",
        "id": 217063884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647747
    },
    {
        "content": "<p>any other updates I guess?</p>",
        "id": 217063927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647763
    },
    {
        "content": "<p>on my end, I'm running into <code>the parameter type may not live long enough</code> errors when compiling</p>",
        "id": 217063957,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647771
    },
    {
        "content": "<p>trying to track that down</p>",
        "id": 217063969,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647776
    },
    {
        "content": "<p>I obviously made a mistake somewhere</p>",
        "id": 217064022,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647809
    },
    {
        "content": "<p>I don't remember, did we have a hackmd about current sprint/type library?</p>",
        "id": 217064055,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647829
    },
    {
        "content": "<p>I think yes but I don't have a link</p>",
        "id": 217064062,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647835
    },
    {
        "content": "<p><a href=\"https://hackmd.io/vSz1MfmBSDSx5NkowiIUfQ\">https://hackmd.io/vSz1MfmBSDSx5NkowiIUfQ</a> is probably it</p>",
        "id": 217064109,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647866
    },
    {
        "content": "<p>that looks right</p>",
        "id": 217064131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647880
    },
    {
        "content": "<p>so, a few of these are done now</p>",
        "id": 217064274,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> was attempting to do some refactoring to rustc?</p>",
        "id": 217064325,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647951
    },
    {
        "content": "<p>which refactoring?</p>",
        "id": 217064342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647960
    },
    {
        "content": "<p>in terms of moving things out of rustc_middle</p>",
        "id": 217064346,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647962
    },
    {
        "content": "<p>I've done some work on updating chalk to 0.39 in rustc. <a href=\"https://github.com/rust-lang/chalk/issues/234\">https://github.com/rust-lang/chalk/issues/234</a> is the last large issue on the Chalk side I think (switching to the recursive solver leads to some other issues).</p>",
        "id": 217064349,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605647963
    },
    {
        "content": "<p>Not made a lot of progress, but yes I was trying to do things</p>",
        "id": 217064375,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605647980
    },
    {
        "content": "<p>Ah yes, good old <a href=\"https://github.com/rust-lang/chalk/issues/234\">chalk#234</a></p>",
        "id": 217064382,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605647987
    },
    {
        "content": "<p>Is it using the SLG solver in rustc?</p>",
        "id": 217064469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648010
    },
    {
        "content": "<p>yes</p>",
        "id": 217064484,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648016
    },
    {
        "content": "<p>Ah</p>",
        "id": 217064497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648021
    },
    {
        "content": "<p>Someone should probably look at why the recursive solver is having problems</p>",
        "id": 217064511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648026
    },
    {
        "content": "<p>What issues does the recursive solver run into?</p>",
        "id": 217064522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648031
    },
    {
        "content": "<p>last time I checked, it was something related to binders</p>",
        "id": 217064590,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648057
    },
    {
        "content": "<p>don't remember exactly</p>",
        "id": 217064637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648076
    },
    {
        "content": "<p>I'm also looking at getting NLL to emit better HRTB errors. Errors directly from subtyping now almost match the current errors. The errors from queries are harder, but I think that this approach can work.</p>",
        "id": 217064720,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605648113
    },
    {
        "content": "<p>ok</p>",
        "id": 217064722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648114
    },
    {
        "content": "<p>but I haven't checked recently if that was fixed by the function arg WF change</p>",
        "id": 217064723,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648114
    },
    {
        "content": "<p>There's still some issues with how clauses generated for WF goals are handled.</p>",
        "id": 217064864,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605648164
    },
    {
        "content": "<p>My plan <em>was</em> to update chalk in rustc after I get to a good stopping point with the binder refactor, but seems like <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> is on that</p>",
        "id": 217064888,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-11-17/near/217064864\">said</a>:</p>\n<blockquote>\n<p>There's still some issues with how clauses generated for WF goals are handled.</p>\n</blockquote>\n<p>I wonder if we're missing a generalize somewhere</p>",
        "id": 217064945,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648201
    },
    {
        "content": "<p>To be specific. The issue is what clause should we generate for <code>Canonical(WF(&amp;'^0 ()))</code>.</p>",
        "id": 217065001,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605648222
    },
    {
        "content": "<p>We might see issues pop up after <a href=\"https://github.com/rust-lang/chalk/issues/624\">chalk#624</a> gets merged</p>",
        "id": 217065019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648232
    },
    {
        "content": "<p>oh right</p>",
        "id": 217065037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648241
    },
    {
        "content": "<p>I ran into this at one point</p>",
        "id": 217065107,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648259
    },
    {
        "content": "<p>Either we can reuse the binders from the canonical, or we could try to generate <code>for&lt;'a, T&gt; WF(&amp;'a T) :- T: 'a</code></p>",
        "id": 217065117,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605648266
    },
    {
        "content": "<p>the dyn trait code does the latter, right</p>",
        "id": 217065157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648294
    },
    {
        "content": "<p>oh, maybe this is different actually</p>",
        "id": 217065161,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648297
    },
    {
        "content": "<p>I feel like <code>for&lt;'a, T&gt;...</code> is what we <em>ought</em> to be doing</p>",
        "id": 217065184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648310
    },
    {
        "content": "<p>Yes, although I'm not sure how it should work with const generics.</p>",
        "id": 217065267,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605648363
    },
    {
        "content": "<p>Say more?</p>",
        "id": 217065319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648384
    },
    {
        "content": "<p>okay, yeah in <code>match_ty</code>, anytime we push clauses/facts directly, that's a problem</p>",
        "id": 217065374,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648428
    },
    {
        "content": "<p>Should we produce <code>for&lt;T, const N: T&gt; ...</code> and trust that the goal has the right type for the const generics. Or should we produce <code>for &lt;const N: ActualType&gt; ...</code></p>",
        "id": 217065441,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605648470
    },
    {
        "content": "<p>I guess I need a better example to think this through</p>",
        "id": 217065563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648522
    },
    {
        "content": "<p>yeah, I'm a bit confused</p>",
        "id": 217065577,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648530
    },
    {
        "content": "<p>I feel like the intuition is that the set of WF rules are something we can write down in a fixed place</p>",
        "id": 217065617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648559
    },
    {
        "content": "<p>or they are generated from struct/enum declarations</p>",
        "id": 217065633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648569
    },
    {
        "content": "<p>ideally we wouldn't really <em>take</em> information from the user-given types</p>",
        "id": 217065674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648590
    },
    {
        "content": "<p>Also, just to put code to my words: <a href=\"https://github.com/rust-lang/chalk/blob/e97bcf4578e8bc986c75b525d8c82f81aabbcadf/chalk-solve/src/clauses.rs#L853\">this</a> isn't good.</p>",
        "id": 217065679,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648591
    },
    {
        "content": "<p>apart from the minimum we need</p>",
        "id": 217065687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648594
    },
    {
        "content": "<p>yep</p>",
        "id": 217065748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648609
    },
    {
        "content": "<p>harmless in some of those cases but the pattern is wrong</p>",
        "id": 217065758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648615
    },
    {
        "content": "<p>(also, for things like <code>Ref</code>, we probably should be including <code>T: 'a</code>)</p>",
        "id": 217065764,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-11-17/near/217065617\">said</a>:</p>\n<blockquote>\n<p>I feel like the intuition is that the set of WF rules are something we can write down in a fixed place</p>\n</blockquote>\n<p>I guess I'll see how well this works.</p>",
        "id": 217065851,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605648672
    },
    {
        "content": "<p>ideally we'd be producing \"canned\" rules for built-in types</p>",
        "id": 217065868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648687
    },
    {
        "content": "<p>Yeah, exactly</p>",
        "id": 217065887,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648693
    },
    {
        "content": "<p>this should actually be a really simple fix</p>",
        "id": 217065896,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648699
    },
    {
        "content": "<p>and I'm not sure if any of those rules have to reference constants, except perhaps <code>[T; N]</code></p>",
        "id": 217065903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648702
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/614\">chalk#614</a> biting us</p>",
        "id": 217065917,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648710
    },
    {
        "content": "<p>which I guess would be something like <code>for&lt;T, const N: usize&gt; WF([T; N]) :- WF(T)</code> ?</p>",
        "id": 217065943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648723
    },
    {
        "content": "<p>Closures/generators in functions with const generics.</p>",
        "id": 217065979,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605648730
    },
    {
        "content": "<p>but there are some ann... like maybe this one :)</p>",
        "id": 217066002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648740
    },
    {
        "content": "<p><code>for&lt;T, const N: usize&gt; WF([T; N]) :- WF(T), T: Sized</code></p>",
        "id": 217066011,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605648745
    },
    {
        "content": "<p>closure generics are definitely a bit weird</p>",
        "id": 217066115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648794
    },
    {
        "content": "<p>question: are there well formedness requirements for const params?</p>",
        "id": 217066174,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648828
    },
    {
        "content": "<p>like, should that be <code>for&lt;T, const N: usize&gt; WF([T; N]) :- WF(T), T: Sized, WF(N)</code></p>",
        "id": 217066280,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648875
    },
    {
        "content": "<p>There's <code>ConstEvaluatable</code> in rustc.</p>",
        "id": 217066289,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605648881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-11-17/near/217066115\">said</a>:</p>\n<blockquote>\n<p>closure generics are definitely a bit weird</p>\n</blockquote>\n<p>but I think the WF constraints <em>there</em> mostly come from the enclosing fn? maybe I'm overlooking some things</p>",
        "id": 217066332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648912
    },
    {
        "content": "<p>What is <code>ConstEvaluatable</code>?</p>",
        "id": 217066474,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605648988
    },
    {
        "content": "<p>Basically it means that the expression can be evaluated without UB, IIRC, but it's a bit out of scope for me</p>",
        "id": 217066598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649063
    },
    {
        "content": "<p>so I guess the question is -- stepping back from this precise point -- do we feel like we're making progress on all the type-library related issues just now?</p>",
        "id": 217066664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649085
    },
    {
        "content": "<p>other next steps?</p>",
        "id": 217066673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649090
    },
    {
        "content": "<p>Yeah, type library is making good progress</p>",
        "id": 217066710,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649111
    },
    {
        "content": "<p>As far as things things that maybe can still be picked up</p>",
        "id": 217066741,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649137
    },
    {
        "content": "<p><code>dyn Trait</code> representation?</p>",
        "id": 217066759,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649148
    },
    {
        "content": "<p>that one jumped out at me</p>",
        "id": 217066770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649159
    },
    {
        "content": "<p>the plan there was to consider refactoring rustc, it seems</p>",
        "id": 217066778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649163
    },
    {
        "content": "<p>Yeah</p>",
        "id": 217066786,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649169
    },
    {
        "content": "<p>and it seems fairly self-contained enough</p>",
        "id": 217066794,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649177
    },
    {
        "content": "<p>though might be a bit difficult for a complete beginner</p>",
        "id": 217066863,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649206
    },
    {
        "content": "<p>yeah, it'll be... interesting :)</p>",
        "id": 217066880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649222
    },
    {
        "content": "<p>the other things that's a bit self-contained is removing <code>ReFree</code> in rustc</p>",
        "id": 217066926,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649267
    },
    {
        "content": "<p>but something tells me that's much harder</p>",
        "id": 217066933,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649273
    },
    {
        "content": "<p>I think so</p>",
        "id": 217066961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649291
    },
    {
        "content": "<p>(side note, I think the param work I am doing maybe found a bug)</p>",
        "id": 217067064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649338
    },
    {
        "content": "<p>anything else I'm missing?</p>",
        "id": 217067074,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649343
    },
    {
        "content": "<p>Oh, what bug?</p>",
        "id": 217067078,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649347
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">mk_const_var</span><span class=\"p\">(</span><span class=\"n\">const_var_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">type_of</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">)).</span><span class=\"n\">into</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217067088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649353
    },
    {
        "content": "<p>I'm pretty sure that this code is wrong if <code>type_of</code> has generic types</p>",
        "id": 217067106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649363
    },
    {
        "content": "<p>I guess <code>fn foo&lt;T, const C: Bar&lt;T&gt;&gt;</code> something like that</p>",
        "id": 217067133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649378
    },
    {
        "content": "<p>perhaps that's presently disallowed</p>",
        "id": 217067176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649410
    },
    {
        "content": "<p>the only other thing I see in that list was finding out whether rust-analyzer performance was still an issue after the <code>TypeName</code> change</p>",
        "id": 217067318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649487
    },
    {
        "content": "<p>under <code>min_const_generics</code> that would be disallowed I think</p>",
        "id": 217067354,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649512
    },
    {
        "content": "<p>under <code>min_const_generics</code> yes</p>",
        "id": 217067366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649520
    },
    {
        "content": "<p>so, I did ask about that, and I don't think anyone saw a perf increase</p>",
        "id": 217067387,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649536
    },
    {
        "content": "<p>anyway i'll fix for now by adding <code>assert_no_generics</code> (one of my helpers I have...)</p>",
        "id": 217067396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649540
    },
    {
        "content": "<p>but this is the kind of mismatch we overlook by not being explicit about where substitution is needed</p>",
        "id": 217067428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649559
    },
    {
        "content": "<p>but I'll followup again at some point</p>",
        "id": 217067486,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649571
    },
    {
        "content": "<p>too bad</p>",
        "id": 217067498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649576
    },
    {
        "content": "<p>yeah, was a bit shocked</p>",
        "id": 217067516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649587
    },
    {
        "content": "<p>expected at least <em>some</em> noticeable perf change</p>",
        "id": 217067521,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649595
    },
    {
        "content": "<p>anyways, there's a couple open Chalk PRs that need only a few changes, so I might try to nag people to update them</p>",
        "id": 217067710,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649696
    },
    {
        "content": "<p>and/or update them myself</p>",
        "id": 217067744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649712
    },
    {
        "content": "<p>anything needing reviews?</p>",
        "id": 217067760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649726
    },
    {
        "content": "<p>nope</p>",
        "id": 217067771,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649733
    },
    {
        "content": "<p>well actually</p>",
        "id": 217067794,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649744
    },
    {
        "content": "<p>sem-syn equality?</p>",
        "id": 217067805,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649748
    },
    {
        "content": "<p>not sure how much of the review on prior PR carries over</p>",
        "id": 217067831,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649763
    },
    {
        "content": "<p>ah, has there been motion there</p>",
        "id": 217067834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649764
    },
    {
        "content": "<p>well, not in a bit</p>",
        "id": 217067841,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649771
    },
    {
        "content": "<p>but I'm curious if this is a good place to break up the work?</p>",
        "id": 217067858,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649784
    },
    {
        "content": "<blockquote>\n<p>Add TypeFlags for TyKind in chalk-ir <a href=\"https://github.com/rust-lang/chalk/issues/639\">chalk#639</a></p>\n</blockquote>",
        "id": 217067861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649785
    },
    {
        "content": "<p>what's the status of that?</p>",
        "id": 217067865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649788
    },
    {
        "content": "<p>there were some review comments</p>",
        "id": 217067892,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649802
    },
    {
        "content": "<p>looks like it needs some updating</p>",
        "id": 217067929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649806
    },
    {
        "content": "<p>that need to be addressed, but overall looked good</p>",
        "id": 217067946,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649815
    },
    {
        "content": "<p>but yeah, <a href=\"https://github.com/rust-lang/chalk/issues/624\">chalk#624</a> <a href=\"https://github.com/rust-lang/chalk/issues/633\">chalk#633</a> and <a href=\"https://github.com/rust-lang/chalk/issues/639\">chalk#639</a> only need small enough changes I can do the updates</p>",
        "id": 217068050,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649890
    },
    {
        "content": "<p>I can take a look at <a href=\"https://github.com/rust-lang/chalk/issues/589\">chalk#589</a> I guess.. maybe :) still running quite short of time</p>",
        "id": 217068165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649936
    },
    {
        "content": "<p>I'll ping someone (maybe <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>) after I do them just to get a final signoff</p>",
        "id": 217068182,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649945
    },
    {
        "content": "<p>seems like it's maybe close</p>",
        "id": 217068194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649954
    },
    {
        "content": "<p>yeah, ping me</p>",
        "id": 217068200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649956
    },
    {
        "content": "<p>ok, should we end meeting?</p>",
        "id": 217068207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605649961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span> status of sem-syn pr</p>",
        "id": 217068208,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649962
    },
    {
        "content": "<p>yeah, I think we've gotten through everything</p>",
        "id": 217068242,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> are you going to make the <code>match_ty</code> changes?</p>",
        "id": 217068264,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605649989
    },
    {
        "content": "<p>Yes, but it may be a few days before I get to it.</p>",
        "id": 217068425,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605650069
    },
    {
        "content": "<p>No rush :)</p>",
        "id": 217068507,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605650111
    }
]