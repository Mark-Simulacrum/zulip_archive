[
    {
        "content": "<p>I've also been working on rebasing an old branch</p>",
        "id": 195474967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021532
    },
    {
        "content": "<p>that would be a basis for chalk handling subtyping properly</p>",
        "id": 195474981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021540
    },
    {
        "content": "<p>I had hoped to write up some mentoring instructions here</p>",
        "id": 195474992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021547
    },
    {
        "content": "<p>but I prob won't get to it today</p>",
        "id": 195475005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021551
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> am I correct you'd be interested in pursuing work in this direction?</p>",
        "id": 195475062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021570
    },
    {
        "content": "<p>roughly speaking the idea is to extend unification so that it can handle \"subtyping\", like Rust does; there's some example code in rustc to build from. This is required to get type equality for types like <code>fn(&amp;x)</code> correct, since the current code doesn't handle variance correctly.</p>",
        "id": 195475135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021619
    },
    {
        "content": "<p>e.g., somewhat surprisingly <code>for&lt;'a&gt; fn(&amp;'a u32, &amp;'a u32)</code> and <code>for&lt;'a, 'b&gt; fn(&amp;'a u32, &amp;'b u32)</code> ought to be considered equal, though rustc doesn't quite get this right today (that's work in progress too)</p>",
        "id": 195475184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588021650
    },
    {
        "content": "<p>Sure thing, I would love to work on this</p>",
        "id": 195475277,
        "sender_full_name": "Areredify",
        "timestamp": 1588021692
    },
    {
        "content": "<p>I don't even know what to make of that example</p>",
        "id": 195476156,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588022199
    },
    {
        "content": "<p>Those are...equal?</p>",
        "id": 195476164,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588022204
    },
    {
        "content": "<p>As I understand it: because there is no output lifetime and the domains of both functions are equal (any pair of references), they are equal</p>",
        "id": 195476770,
        "sender_full_name": "Areredify",
        "timestamp": 1588022514
    },
    {
        "content": "<p>Yeah, I mean, conceptually I sort of understand it that neither lifetime is bounded by anything so they are the same</p>",
        "id": 195477172,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588022711
    },
    {
        "content": "<p>Think of it like this:</p>",
        "id": 195481982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588025763
    },
    {
        "content": "<p>The two functions can call one another</p>",
        "id": 195482003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588025783
    },
    {
        "content": "<p>Because in one case, the function takes two references with same lifetime, so it can obviously call the other with both lifetimes equal to the same thing</p>",
        "id": 195482028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588025817
    },
    {
        "content": "<p>In the other case, the \"single lifetime\" can be the intersection of the two lifetimes, and that works by subtyping</p>",
        "id": 195482052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588025836
    },
    {
        "content": "<p>Gotta go</p>",
        "id": 195482061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588025845
    },
    {
        "content": "<p>The key thing is that the lifetimes only appear in fn parameters</p>",
        "id": 195482086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588025860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> ok, I wrote up some stuff <a href=\"https://github.com/rust-lang/chalk/issues/418\" title=\"https://github.com/rust-lang/chalk/issues/418\">here</a> -- I have a branch I was rebasing that does the very first step, I'm going to try and open a PR with that</p>",
        "id": 195636440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588112913
    },
    {
        "content": "<p>ambient variance is a funny concept</p>",
        "id": 195637629,
        "sender_full_name": "Areredify",
        "timestamp": 1588113675
    },
    {
        "content": "<p>it's sort of a \"misnomer\"</p>",
        "id": 195689590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588156830
    },
    {
        "content": "<p>it's really tracking the relation between the two types</p>",
        "id": 195689598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588156837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so I'm going through some of the rustc integration, and one thing that we haven't implemented yet is <code>PredicateKind::Subtype</code></p>",
        "id": 199241032,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590818791
    },
    {
        "content": "<p>And I realize - I actually have little clue to how this works in rustc (and even somewhat <em>what</em> it is)</p>",
        "id": 199241055,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590818833
    },
    {
        "content": "<p>So, I was wonder if maybe we could  talk about it on Tuesday?</p>",
        "id": 199241058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590818851
    },
    {
        "content": "<p>I mostly bring it up now, since I imagine you'll probably end up doing a bunch of the explaining. And might want time to prepare</p>",
        "id": 199241065,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590818881
    },
    {
        "content": "<p>But, we can also segue into what the chalk side of this would look like</p>",
        "id": 199241109,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590818923
    },
    {
        "content": "<p>ah yes I opened a rough issue on thishttps://github.com/rust-lang/chalk/issues/418</p>",
        "id": 199373134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591020366
    },
    {
        "content": "<p>but I don't think I added a lot of details</p>",
        "id": 199373143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591020373
    },
    {
        "content": "<p>Oh, I forgot that issue existed</p>",
        "id": 199376316,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591022095
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/chalk/issues/418\">chalk#418</a> -- now with functional link</p>",
        "id": 199404882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591035881
    },
    {
        "content": "<p>So, I looked a bit more at this today</p>",
        "id": 201927472,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593053506
    },
    {
        "content": "<p>And kind of run into a snag</p>",
        "id": 201927478,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593053518
    },
    {
        "content": "<p>We're imagining some callback on <code>RustIrDatabase</code> for transforming the variance of substs</p>",
        "id": 201927531,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593053573
    },
    {
        "content": "<p>And that would be called from <code>Zipper</code> probably</p>",
        "id": 201927537,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593053587
    },
    {
        "content": "<p>the problem is that we don't have a <code>&amp;dyn RustIrDatabase</code> in them</p>",
        "id": 201927551,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593053627
    },
    {
        "content": "<p>for example, <code>apply_answer_subst</code> is called from <code>chalk-engine</code> with an interner, but that calls <code>AnswerSubstitutor::substitute</code> which calls down to <code>Unifier</code>, etc etc</p>",
        "id": 201927743,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593053931
    },
    {
        "content": "<p>actually, that statement isn't 100% correct</p>",
        "id": 201927761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593053995
    },
    {
        "content": "<p>but the gist is the same</p>",
        "id": 201927762,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593053999
    },
    {
        "content": "<p>So, I'm sort of lost</p>",
        "id": 201927816,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593054025
    },
    {
        "content": "<p>maybe this might be solved if chalk-engine depends on chalk-solve</p>",
        "id": 201927829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593054042
    },
    {
        "content": "<p>but it's a bit icky</p>",
        "id": 201927841,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593054066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 202029715,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593121831
    },
    {
        "content": "<p>any feedback here?</p>",
        "id": 202029726,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593121836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> is this what motivated your PR inverting the crate structure?</p>",
        "id": 202144214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206576
    },
    {
        "content": "<p>Well, sort of</p>",
        "id": 202144240,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593206606
    },
    {
        "content": "<p>I'm not entirely sure what to do here</p>",
        "id": 202144279,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593206634
    },
    {
        "content": "<p>And inverting the crate structure has already been on the todo</p>",
        "id": 202144339,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593206649
    },
    {
        "content": "<p>(or at least experimenting with it)</p>",
        "id": 202144359,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593206659
    },
    {
        "content": "<p>well it does seem undeniable that we need a <code>dyn RustIrDatabase</code> to do this</p>",
        "id": 202144393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206680
    },
    {
        "content": "<p>or at least some kind of <code>dyn</code> something  or other:)</p>",
        "id": 202144422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206695
    },
    {
        "content": "<p>I mean we could make a trait that chalk-ir owns</p>",
        "id": 202144498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206748
    },
    {
        "content": "<p>which <code>RustIrDatabase</code> extends</p>",
        "id": 202144509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206753
    },
    {
        "content": "<p>Might have to</p>",
        "id": 202144570,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593206775
    },
    {
        "content": "<p>that seems fine</p>",
        "id": 202144582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206783
    },
    {
        "content": "<p>cool</p>",
        "id": 202144622,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593206804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 202370200,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593466060
    },
    {
        "content": "<p>Going through your review comments</p>",
        "id": 202370208,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593466065
    },
    {
        "content": "<p>might drop a few thoughts here or on the PR</p>",
        "id": 202370228,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593466076
    },
    {
        "content": "<p>I'm a little bit confused</p>",
        "id": 202370488,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593466235
    },
    {
        "content": "<p>mostly because I tried to follow how rustc does things</p>",
        "id": 202370514,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593466256
    },
    {
        "content": "<p>And the only use of <code>xform</code> I could find was in <code>combine.rs</code></p>",
        "id": 202370544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593466276
    },
    {
        "content": "<p>I guess I also made it a bit confusing because I sort of co-opted <code>Unifier</code> for both <code>equate</code> and <code>sub</code></p>",
        "id": 202371178,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593466637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'm around now, I can try to respond</p>",
        "id": 202470498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593538876
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 202470613,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593538923
    },
    {
        "content": "<p>I'm still pretty confused</p>",
        "id": 202470626,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593538927
    },
    {
        "content": "<p>but working through it, I think</p>",
        "id": 202470644,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593538935
    },
    {
        "content": "<p>so, first off, there's always the chance that <em>I'm</em> confused</p>",
        "id": 202472820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540007
    },
    {
        "content": "<p>but there is one thing I want to point out</p>",
        "id": 202472850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540021
    },
    {
        "content": "<p>in rustc, we have the <code>relate_with_variance</code> method, right?</p>",
        "id": 202472856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540027
    },
    {
        "content": "<p><em>but</em> calling <code>relate_with_variance(v)</code> doesn't indicate that the \"ambient variance\" for the item being related is <code>v</code></p>",
        "id": 202472901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540056
    },
    {
        "content": "<p>rather, <code>v</code> is <em>combined</em> with the existing ambient variance to yield the new ambient variance</p>",
        "id": 202472915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540064
    },
    {
        "content": "<p>however, this takes place in the impls of relate</p>",
        "id": 202472931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540071
    },
    {
        "content": "<p>basically the relate trait in rustc only encodes the variance of each type relative to itself</p>",
        "id": 202472972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540092
    },
    {
        "content": "<p>that is, if you have <code>Foo&lt;T&gt;</code>, then <code>Foo</code> may be covariant with respect to <code>T</code></p>",
        "id": 202473076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540128
    },
    {
        "content": "<p>and we'll invoke <code>relate_with_variance(Covariance)</code></p>",
        "id": 202473082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540133
    },
    {
        "content": "<p>but if the <code>Foo&lt;T&gt;</code> itself is occuring in some invariant context, that's kind of irrelevant</p>",
        "id": 202473101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540141
    },
    {
        "content": "<p>so e.g. if you have <code>Cell&lt;Foo&lt;T&gt;&gt;</code>, that combined type is invariant with respect to <code>T</code></p>",
        "id": 202473127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540153
    },
    {
        "content": "<p>(because <code>Cell&lt;U&gt;</code> is invariant with respect to <code>U</code>)</p>",
        "id": 202473159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540171
    },
    {
        "content": "<p>I think I was hoping to pull some of that \"ambient variance tracking\" logic into the trait this time</p>",
        "id": 202473190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540192
    },
    {
        "content": "<p>because in rustc there are many impls all doing the same general thing</p>",
        "id": 202473213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540203
    },
    {
        "content": "<p>I think I figured it out :)</p>",
        "id": 202473503,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593540360
    },
    {
        "content": "<p>let me push and you can take a look</p>",
        "id": 202473597,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593540405
    },
    {
        "content": "<p>I do need some help with what tests I need to add</p>",
        "id": 202473768,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593540486
    },
    {
        "content": "<p>It's still not 100% done yet, but getting closer</p>",
        "id": 202474018,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593540611
    },
    {
        "content": "<p>in particular, I need to handle each of the variances in the <code>relate_*</code> functions on <code>Unifier</code></p>",
        "id": 202474200,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593540702
    },
    {
        "content": "<p>OK</p>",
        "id": 202475192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593541176
    },
    {
        "content": "<p>ints and floats are also unified right? No subtyping?</p>",
        "id": 202475305,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593541220
    },
    {
        "content": "<p>And, what do we need to do for aliases</p>",
        "id": 202475429,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593541308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> yes, that's right. as for aliases, the basic strategy is to </p>\n<ul>\n<li>introduce a variable <code>?X</code> and a goal <code>AliasEq(Alias = ?X)</code></li>\n<li>and then relate the type <code>T</code> and <code>?X</code></li>\n</ul>\n<p>Of course, if it's just equality, you don't need the <code>?X</code>. And this also raises the question of what to do with <code>Subtype(T, ?X)</code> where <code>?X</code> is not yet bound to anything (rustc uses a particular approach called generalization).</p>",
        "id": 202482156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593544688
    },
    {
        "content": "<p>Hmm</p>",
        "id": 202482305,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593544765
    },
    {
        "content": "<p>(we'll have to use generalization too but I would not worry about that for now, we can leave a FIXME and just use the unify path)</p>",
        "id": 202482414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593544805
    },
    {
        "content": "<p>What exactly does generalization <em>do</em>?</p>",
        "id": 202482426,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593544811
    },
    {
        "content": "<p>I saw the impl, but didn't look at it much</p>",
        "id": 202482459,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593544825
    },
    {
        "content": "<p><a href=\"http://smallcultfollowing.com/babysteps/blog/2014/07/09/an-experimental-new-type-inference-scheme-for-rust/\">http://smallcultfollowing.com/babysteps/blog/2014/07/09/an-experimental-new-type-inference-scheme-for-rust/</a></p>",
        "id": 202482527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593544872
    },
    {
        "content": "<p>not sure if there's a more recent write-up</p>",
        "id": 202482533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593544878
    },
    {
        "content": "<p>but the basic idea hasn't changed</p>",
        "id": 202482542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593544881
    },
    {
        "content": "<p>oh of course there's a writeup</p>",
        "id": 202482588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593544916
    },
    {
        "content": "<blockquote>\n<p>One form of subtyping that exists in Rust is not amenable to this inference. It has to do with universal quantification and function types.</p>\n</blockquote>\n<p>Is this implemented \"correctly\" in rustc right now?</p>",
        "id": 202483662,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593545499
    },
    {
        "content": "<p>Basically, I'm asking that if I ported the generalize code from rustc, is going to work correctly</p>",
        "id": 202483771,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593545539
    },
    {
        "content": "<p>It is implemented as described in the blog post</p>",
        "id": 202485274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593546251
    },
    {
        "content": "<p>That's just a limitation and chalk will inherit it</p>",
        "id": 202485303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593546265
    },
    {
        "content": "<p>In practice this basically...never comes up?</p>",
        "id": 202485326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593546280
    },
    {
        "content": "<p>Maybe someday we'll solve it, not sure</p>",
        "id": 202485356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593546297
    },
    {
        "content": "<p>There are some papers I've been meaning to examine that are focused on inference around higher-ranked things that may have some good ideas</p>",
        "id": 202485391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593546322
    },
    {
        "content": "<p>oh okay</p>",
        "id": 202485498,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593546380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you think you could help come up with some tests to add for this?</p>",
        "id": 202496151,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593551828
    },
    {
        "content": "<p>This is also ready for another round of reviews</p>",
        "id": 202708705,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593705851
    },
    {
        "content": "<p>currently rebasing</p>",
        "id": 202708716,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593705854
    },
    {
        "content": "<p>rebased</p>",
        "id": 202712982,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593707975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would you maybe want to port the <code>Generalizer</code> to Chalk?</p>",
        "id": 202725401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593713688
    },
    {
        "content": "<p>I imagine we'll have to, yes.</p>",
        "id": 202744216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593723748
    },
    {
        "content": "<p>Well, that was a question specially for <em>you</em> hehe</p>",
        "id": 202745818,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593724697
    },
    {
        "content": "<p>oh heh</p>",
        "id": 202748295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593726503
    },
    {
        "content": "<p>I misread it</p>",
        "id": 202748297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593726504
    },
    {
        "content": "<p>I could do that</p>",
        "id": 202748305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593726514
    }
]