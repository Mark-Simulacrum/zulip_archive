[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span></p>",
        "id": 244163692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624894782
    },
    {
        "content": "<p>The fact that we can't easily ignore <code>Sized</code> predicates really limits our options</p>",
        "id": 244176894,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1624900655
    },
    {
        "content": "<p>I'm starting to wonder if we can avoid <code>EvaluatedToOkModuloRegions</code> when we start out with a global predicate</p>",
        "id": 244316930,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1624987475
    },
    {
        "content": "<p>If we encounter higher-ranked bounds deeper into evaluation, they'll need to take on a restricted form, since we didn't start out with any input regions (other that <code>'static</code>)</p>",
        "id": 244317029,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1624987528
    },
    {
        "content": "<p>E.g. we can have <code>for&lt;'a&gt; SomeType&lt;'a, 'static&gt;: SomeTrait&lt;'a, 'static&gt;</code></p>",
        "id": 244317480,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1624987698
    },
    {
        "content": "<p>But the nested predicate can't reference any other regions, since we didn't have any others to start with</p>",
        "id": 244317529,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1624987721
    },
    {
        "content": "<p>So, I wonder if we can do some kind of simplified evaluation that lets us get either EvalatuedToOk or EvaluatedToErr,</p>",
        "id": 244321694,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1624989574
    },
    {
        "content": "<p>which would let us drop global predicates from the predicate sub-obligation</p>",
        "id": 244321747,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1624989595
    },
    {
        "content": "<p>I'm reluctant to do that, I think</p>",
        "id": 244340395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624997491
    },
    {
        "content": "<p>Let me think why =)</p>",
        "id": 244340447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624997515
    },
    {
        "content": "<p>I think what worries me is that the current logic for \"higher-ranked regions\" is not as smart as I would like</p>",
        "id": 244340522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624997535
    },
    {
        "content": "<p>we worked hard to get rid of the leak check etc in most cases</p>",
        "id": 244340542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624997546
    },
    {
        "content": "<p>and i'm worried that if we return <code>EvaluatedToErr</code> some parts of the code will start to accept impls or otherwise do things that will be accepting code we might not want to ultimately accept (this is already a problem; I'm worried about making it worse)</p>",
        "id": 244340604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624997578
    },
    {
        "content": "<p>I see</p>",
        "id": 244367613,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625015655
    },
    {
        "content": "<p>In that case, I think we're pretty much stuck returning the full set of sub-obligations from the projection cache</p>",
        "id": 244367624,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625015688
    },
    {
        "content": "<p>since we cannot avoid <code>EvaluatedToOkModuloRegions</code>, and we cannot detect it in advance</p>",
        "id": 244367637,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625015705
    },
    {
        "content": "<p>Here's an alternative idea - all of the sub-obligations we create (in the <code>deeply-nested</code> benchmark) will end up getting registered with the <code>FulfillmentContext</code></p>",
        "id": 244367956,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625016011
    },
    {
        "content": "<p>so, we end up calling <code>SelectionContext.select</code> on the same predicate many different times</p>",
        "id": 244367973,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625016044
    },
    {
        "content": "<p>We have a selection candidate cache - would it make sense to try to introduce a 'selection result' cache?</p>",
        "id": 244368058,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625016131
    },
    {
        "content": "<p>we would need to adjust the <code>ObligationCause</code> to combined the cached cause with the cause of the new obligation</p>",
        "id": 244368157,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625016285
    },
    {
        "content": "<p>I've tried a different approach in PR <a href=\"https://github.com/rust-lang/rust/pull/86871\">https://github.com/rust-lang/rust/pull/86871</a> . Whenever we have any sub-obligations, we add a dummy sub-obligation that forces the result to <code>EvaluatedToOkModuloRegions</code></p>",
        "id": 244966911,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625512760
    },
    {
        "content": "<p>Yet another approach is  <a href=\"https://github.com/rust-lang/rust/pull/86896\">https://github.com/rust-lang/rust/pull/86896</a> - we normally use the pruned obligations, but switch to using the original full list of obligations during trait obligation. It's a more complex change, but the performance is better, and it still fixes the fingerprint issue</p>",
        "id": 244989027,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625537785
    },
    {
        "content": "<p>ok, let me compare</p>",
        "id": 245050811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625583560
    },
    {
        "content": "<p>To summarize, the three approaches I've come up with are:</p>\n<ol>\n<li>Always return the original full list of sub-obligations from the projection cache. This is clearly sound, but leads to large regressions on some benchmarks. It fixes the fingerprint ICE by ensuring that evaluation will consistently produce EvaluatedToOk(ModuloRegions) regardless of the state of the projection cache.</li>\n<li>Add a dummy sub-obligation if we have any sub-obligation to begin with, forcing the evaluation result to EvaluatedToOkModuloRegions. This is also sound, since it's always correct to replace EvaluatedToOk with EvaluatedToOkModuloRegions. It fixes the fingerprint ICE by always producing EvaluatedToOkModuloRegions, so it doesn't matter what particular result is produced by our pruned sub-obligation in the projection cache.</li>\n<li>Use the full-set of sub-obligation during trait evaluation, and the pruned set otherwise. This should be sound, but I'm not 100% certain. It fixes the ICE by ensuring that the evaluation query doesn't depend on the state of the projection cache.</li>\n</ol>",
        "id": 245066992,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625590285
    },
    {
        "content": "<p>I think there's going to be at least a moderate performance hit no matter what we do</p>",
        "id": 245067233,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1625590400
    }
]