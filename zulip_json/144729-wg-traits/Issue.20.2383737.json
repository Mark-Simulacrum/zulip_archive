[
    {
        "content": "<p>So, let me start by describing the issue</p>",
        "id": 233169310,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628024
    },
    {
        "content": "<p>Which, as it turns out, is <em>two</em> issues</p>",
        "id": 233169346,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628047
    },
    {
        "content": "<p>Let's start with</p>\n<div class=\"codehilite\"><pre><span></span><code>use core::future::Future;\n\nasync fn handle&lt;F&gt;(slf: &amp;F)\nwhere\n    F: Fn(&amp;()) -&gt; &amp;mut (dyn Future&lt;Output = ()&gt; + Unpin),\n{\n    (slf)(&amp;()).await;\n}\n</code></pre></div>",
        "id": 233169374,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628060
    },
    {
        "content": "<p>Because of <code>(slf)(&amp;())</code>, we want to store <code>&amp;mut (dyn Future&lt;Output = ()&gt; + Unpin)</code> in the <code>GeneratorWitness</code></p>",
        "id": 233169502,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628130
    },
    {
        "content": "<p>Now, first bug I uncovered (that <a href=\"https://github.com/rust-lang/rust/issues/83870\">#83870</a> addresses), is that accidently was having the bound vars from <code>Fn</code> concatenate onto <code>Future</code></p>",
        "id": 233169701,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628217
    },
    {
        "content": "<p>Since, I didn't add a way to \"stop\" concatenation across types</p>",
        "id": 233169764,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628258
    },
    {
        "content": "<p>(We can go into specifics of this bit shortly; I want to finish going through the other issue)</p>",
        "id": 233169801,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628286
    },
    {
        "content": "<p>So, what we end up with in terms of what we think the bound vars are is:</p>\n<div class=\"codehilite\"><pre><span></span><code>F: for&lt;&#39;a&gt; Fn(&amp;()) -&gt; &amp;mut (dyn for&lt;&#39;a&gt; Future&lt;Output = ()&gt; + Unpin)\n</code></pre></div>",
        "id": 233169928,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628342
    },
    {
        "content": "<p>This alone really isn't the end of the world: if <code>'a</code> was used in the associated type bound, then we could maybe run into issues, but it's not here</p>",
        "id": 233170009,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/233169701\">said</a>:</p>\n<blockquote>\n<p>Now, first bug I uncovered (that <a href=\"https://github.com/rust-lang/rust/issues/83870\">#83870</a> addresses), is that accidently was having the bound vars from <code>Fn</code> concatenate onto <code>Future</code></p>\n</blockquote>\n<p>\"who\" was</p>",
        "id": 233170022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617628402
    },
    {
        "content": "<p>But it is an issue</p>",
        "id": 233170025,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628404
    },
    {
        "content": "<p><em>I</em></p>",
        "id": 233170047,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/233169928\">said</a>:</p>\n<blockquote>\n<p>So, what we end up with in terms of what we think the bound vars are is:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>F: for&lt;&#39;a&gt; Fn(&amp;()) -&gt; &amp;mut (dyn for&lt;&#39;a&gt; Future&lt;Output = ()&gt; + Unpin)\n</code></pre></div><br>\n</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code>F: for&lt;&#39;a&gt; Fn(&amp;&#39;a ()) -&gt; &amp;&#39;a mut (dyn for&lt;&#39;a&gt; Future&lt;Output = ()&gt; + Unpin)\n</code></pre></div>\n<p>right?</p>",
        "id": 233170070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617628435
    },
    {
        "content": "<p>mmm, yes</p>",
        "id": 233170142,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628465
    },
    {
        "content": "<p>I kind of messed up and used the <code>&amp;mut</code> repro instead of the <code>Box</code> repro; it makes no difference in terms of the problem or solution, just makes it a <em>bit</em> harder to reason about because of the extra lifetime</p>",
        "id": 233170199,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/233169801\">said</a>:</p>\n<blockquote>\n<p>(We can go into specifics of this bit shortly; I want to finish going through the other issue)</p>\n</blockquote>\n<p>so what is the other issue?</p>",
        "id": 233170250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617628545
    },
    {
        "content": "<p>Yes so</p>",
        "id": 233170257,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628549
    },
    {
        "content": "<p>Turns out, this next issue is a bit of a doozy</p>",
        "id": 233170302,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628564
    },
    {
        "content": "<p>and revolves around region anonymization and erasure</p>",
        "id": 233170334,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628577
    },
    {
        "content": "<p>Basically, in the <code>GeneratorWitness</code>, we erase regions</p>",
        "id": 233170374,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628605
    },
    {
        "content": "<p>And as part of this, we can <code>anonymize_late_bound_regions</code></p>",
        "id": 233170422,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628633
    },
    {
        "content": "<p>(recursively)</p>",
        "id": 233170446,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628651
    },
    {
        "content": "<p>Which currently remakes the bound vars based on the (now anon) bound regions found</p>",
        "id": 233170490,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628673
    },
    {
        "content": "<p>/me gets link</p>",
        "id": 233170495,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628676
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/ty/fold.rs#L734\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/ty/fold.rs#L734</a></p>",
        "id": 233170558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628697
    },
    {
        "content": "<p>I'm familiar yes</p>",
        "id": 233170576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617628719
    },
    {
        "content": "<p>So, given </p>\n<div class=\"codehilite\"><pre><span></span><code>for&lt;&#39;a&gt; Fn(&amp;()) -&gt; &amp;&#39;a mut (dyn for&lt;&#39;a&gt; Future&lt;Output = ()&gt; + Unpin)\n</code></pre></div>\n<p>, that gets turned into </p>\n<div class=\"codehilite\"><pre><span></span><code>for&lt;&#39;a&gt; Fn(&amp;()) -&gt; &amp;&#39;a mut (dyn Future&lt;Output = ()&gt; + Unpin)\n</code></pre></div>",
        "id": 233170623,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628757
    },
    {
        "content": "<p>Because <code>'a</code> is unused in the <code>Future</code> trait ref</p>",
        "id": 233170665,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628797
    },
    {
        "content": "<p>question</p>",
        "id": 233170745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617628829
    },
    {
        "content": "<p>However, when we look at the \"local declarations\" for the generator, we still see the type <em>with</em> that <code>Binder</code></p>",
        "id": 233170769,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628841
    },
    {
        "content": "<p>Pausing</p>",
        "id": 233170778,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628846
    },
    {
        "content": "<p>we are anonymizing the <em>types</em> of the local variables, right?</p>",
        "id": 233170781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617628849
    },
    {
        "content": "<p>but that's a where clause?</p>",
        "id": 233170789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617628857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/233170769\">said</a>:</p>\n<blockquote>\n<p>However, when we look at the \"local declarations\" for the generator, we still see the type <em>with</em> that <code>Binder</code></p>\n</blockquote>\n<p>this is in the assertion?</p>",
        "id": 233170835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617628871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/233170781\">said</a>:</p>\n<blockquote>\n<p>we are anonymizing the <em>types</em> of the local variables, right?</p>\n</blockquote>\n<p>Yes. Sorry, slightly typo. We anonymize <code>F</code> which has a type of <code>for&lt;'a&gt; Fn(&amp;()) -&gt; &amp;'a mut (dyn for&lt;'a&gt; Future&lt;Output = ()&gt; + Unpin)</code></p>",
        "id": 233170975,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/233170835\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/233170769\">said</a>:</p>\n<blockquote>\n<p>However, when we look at the \"local declarations\" for the generator, we still see the type <em>with</em> that <code>Binder</code></p>\n</blockquote>\n<p>this is in the assertion?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 233170998,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/233170975\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/233170781\">said</a>:</p>\n<blockquote>\n<p>we are anonymizing the <em>types</em> of the local variables, right?</p>\n</blockquote>\n<p>Yes. Sorry, slightly typo. We anonymize <code>F</code> which has a type of <code>for&lt;'a&gt; Fn(&amp;()) -&gt; &amp;'a mut (dyn for&lt;'a&gt; Future&lt;Output = ()&gt; + Unpin)</code></p>\n</blockquote>\n<p>this is still not a type :)</p>",
        "id": 233171004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617628979
    },
    {
        "content": "<p>I'm confused</p>",
        "id": 233171007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617628981
    },
    {
        "content": "<p>One second</p>",
        "id": 233171047,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629016
    },
    {
        "content": "<p>So, the <code>decl_ty</code> that we see and assert on <em>is</em> <code>for&lt;'a&gt; Fn(&amp;()) -&gt; &amp;'a mut (dyn for&lt;'a&gt; Future&lt;Output = ()&gt; + Unpin)</code></p>",
        "id": 233171207,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629099
    },
    {
        "content": "<p>Which is a type? It's an <code>Adt</code>?</p>",
        "id": 233171251,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629120
    },
    {
        "content": "<p><code>Fn</code> is a trait</p>",
        "id": 233171373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629178
    },
    {
        "content": "<p>maybe you mean <code>fn</code> ?</p>",
        "id": 233171380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629186
    },
    {
        "content": "<p>or <code>dyn Fn</code> ?</p>",
        "id": 233171398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629197
    },
    {
        "content": "<p><span aria-label=\"speechless\" class=\"emoji emoji-1f636\" role=\"img\" title=\"speechless\">:speechless:</span></p>",
        "id": 233171400,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629203
    },
    {
        "content": "<p>You're right</p>",
        "id": 233171416,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629212
    },
    {
        "content": "<p>(neither of which is an adt, of course...)</p>",
        "id": 233171425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629217
    },
    {
        "content": "<p><code>&amp;'a mut (dyn for&lt;'a&gt; Future&lt;Output = ()&gt; + Unpin)</code></p>",
        "id": 233171426,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629219
    },
    {
        "content": "<p>ok, that makes more sense</p>",
        "id": 233171443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629228
    },
    {
        "content": "<p>Or, better <code>Box&lt;dyn for&lt;'a&gt; Future&lt;Output = ()&gt; + Unpin&gt;</code></p>",
        "id": 233171454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629237
    },
    {
        "content": "<p>Sorry, didn't get a lot of sleep :)</p>",
        "id": 233171476,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629254
    },
    {
        "content": "<p>ok so the bug has to do w/ having the non-anomyized version</p>",
        "id": 233171493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629271
    },
    {
        "content": "<p>in the generator</p>",
        "id": 233171502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629276
    },
    {
        "content": "<p>or some mismatch of this kind?</p>",
        "id": 233171512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629282
    },
    {
        "content": "<p>where is that assertion again?</p>",
        "id": 233171552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629285
    },
    {
        "content": "<p>mismatch</p>",
        "id": 233171557,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629289
    },
    {
        "content": "<p>The <code>GeneratorWitness</code> is \"fully anonymized\"</p>",
        "id": 233171586,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629306
    },
    {
        "content": "<p>and <em>doesn't</em> have the binders</p>",
        "id": 233171614,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629323
    },
    {
        "content": "<p>(well, has empty binders)</p>",
        "id": 233171621,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629330
    },
    {
        "content": "<p>But the declaration <em>does</em></p>",
        "id": 233171629,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629337
    },
    {
        "content": "<p>And I haven't <em>quite</em> completely the route to where we see <code>decl_ty</code></p>",
        "id": 233171670,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/233171629\">said</a>:</p>\n<blockquote>\n<p>But the declaration <em>does</em></p>\n</blockquote>\n<p>where is the \"declaration\"</p>",
        "id": 233171691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629384
    },
    {
        "content": "<p>and where is the ICE occurring?</p>",
        "id": 233171706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629398
    },
    {
        "content": "<p>But I think it's because we do <code>erase_late_bound_regions</code> first <em>then</em> <code>erase_regions</code></p>",
        "id": 233171708,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629399
    },
    {
        "content": "<p>side note: can we break this out into its own topic? with the issue(s) in the title?</p>",
        "id": 233171776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629415
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/58e71896506edb701f276158bd2f47e8788a1133/compiler/rustc_mir/src/transform/generator.rs#L750\">https://github.com/rust-lang/rust/blob/58e71896506edb701f276158bd2f47e8788a1133/compiler/rustc_mir/src/transform/generator.rs#L750</a></p>",
        "id": 233171820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629438
    },
    {
        "content": "<p>Yes, let me do that</p>",
        "id": 233171834,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629447
    },
    {
        "content": "<p>Okay, so I didn't include my ramblings earlier in the thread</p>",
        "id": 233171911,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629506
    },
    {
        "content": "<p>But that's fine</p>",
        "id": 233171916,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629509
    },
    {
        "content": "<p>we have a repro etc now, right?</p>",
        "id": 233172054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629580
    },
    {
        "content": "<p>I'm wondering what the value of <code>allowed</code> and <code>decl_ty</code> is <a href=\"https://github.com/rust-lang/rust/blob/58e71896506edb701f276158bd2f47e8788a1133/compiler/rustc_mir/src/transform/generator.rs#L750\">here</a>?</p>",
        "id": 233172112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629606
    },
    {
        "content": "<p>I feel like you've pasted it in various places...</p>",
        "id": 233172119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233171708\">said</a>:</p>\n<blockquote>\n<p>But I think it's because we do <code>erase_late_bound_regions</code> first <em>then</em> <code>erase_regions</code></p>\n</blockquote>\n<p>To expand on this: <code>erase_late_bound_regions</code> doesn't regenerate the binders, only changes <code>ReLateBound</code> to <code>ReErased</code>. So then when we go and <code>erase_regions</code>, the binders don't get regenerated becauase we don't recurse into that type. <em>speculation</em></p>",
        "id": 233172149,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233172054\">said</a>:</p>\n<blockquote>\n<p>we have a repro etc now, right?</p>\n</blockquote>\n<p>yes</p>",
        "id": 233172160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233172112\">said</a>:</p>\n<blockquote>\n<p>I'm wondering what the value of <code>allowed</code> and <code>decl_ty</code> is <a href=\"https://github.com/rust-lang/rust/blob/58e71896506edb701f276158bd2f47e8788a1133/compiler/rustc_mir/src/transform/generator.rs#L750\">here</a>?</p>\n</blockquote>\n<p>one second</p>",
        "id": 233172241,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629659
    },
    {
        "content": "<p>Okay, I don't have a full <code>allowed</code> list anymore for this repro</p>",
        "id": 233172399,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629730
    },
    {
        "content": "<p>wait yes I do</p>",
        "id": 233172493,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629769
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>types in generator {\n    GeneratorInteriorTypeCause { ty: std::future::ResumeTy, span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:10:1: 12:2 (#0), scope_span: Some(/home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:10:1: 12:2 (#9)), yield_span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7), expr: None },\n    GeneratorInteriorTypeCause { ty: &amp;&#39;_#0r F, span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:7:20: 7:23 (#0), scope_span: Some(/home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:10:1: 12:2 (#9)), yield_span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7), expr: None },\n    GeneratorInteriorTypeCause { ty: &amp;&#39;_#1r F, span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:10 (#0), scope_span: Some(/home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:22 (#0)), yield_span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7), expr: Some(HirId { owner: DefId(0:6 ~ issue_83737[8787]::handle), local_id: 11 }) },\n    GeneratorInteriorTypeCause { ty: &amp;&#39;_#0r F, span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:10 (#0), scope_span: Some(/home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:22 (#0)), yield_span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7), expr: Some(HirId { owner: DefId(0:6 ~ issue_83737[8787]::handle), local_id: 11 }) },\n    GeneratorInteriorTypeCause { ty: (), span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:12: 11:14 (#0), scope_span: Some(/home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:22 (#0)), yield_span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7), expr: Some(HirId { owner: DefId(0:6 ~ issue_83737[8787]::handle), local_id: 12 }) },\n    GeneratorInteriorTypeCause { ty: &amp;&#39;_#2r (), span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:11: 11:14 (#0), scope_span: Some(/home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:22 (#0)), yield_span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7), expr: Some(HirId { owner: DefId(0:6 ~ issue_83737[8787]::handle), local_id: 13 }) },\n    GeneratorInteriorTypeCause { ty: &amp;&#39;_#3r (), span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:11: 11:14 (#0), scope_span: Some(/home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:22 (#0)), yield_span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7), expr: Some(HirId { owner: DefId(0:6 ~ issue_83737[8787]::handle), local_id: 13 }) },\n    GeneratorInteriorTypeCause { ty: std::boxed::Box&lt;(dyn for&lt;&#39;r&gt; std::future::Future&lt;for&lt;&#39;s&gt; Output = ()&gt; + std::marker::Unpin + ReStatic)&gt;, span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:15 (#0), scope_span: Some(/home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:22 (#0)), yield_span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7), expr: Some(HirId { owner: DefId(0:6 ~ issue_83737[8787]::handle), local_id: 14 }) },\n    GeneratorInteriorTypeCause { ty: std::boxed::Box&lt;(dyn for&lt;&#39;r&gt; std::future::Future&lt;for&lt;&#39;s&gt; Output = ()&gt; + std::marker::Unpin + &#39;_#6r)&gt;, span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7), scope_span: Some(/home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7)), yield_span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7), expr: None },\n    GeneratorInteriorTypeCause { ty: (), span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7), scope_span: Some(/home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7)), yield_span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7), expr: Some(HirId { owner: DefId(0:6 ~ issue_83737[8787]::handle), local_id: 40 }) },\n    GeneratorInteriorTypeCause { ty: std::future::ResumeTy, span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7), scope_span: Some(/home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7)), yield_span: /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:11:5: 11:21 (#7), expr: Some(HirId { owner: DefId(0:6 ~ issue_83737[8787]::handle), local_id: 41 }) }\n}, span = /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:10:1: 12:2 (#9)\n</code></pre></div>",
        "id": 233172511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629777
    },
    {
        "content": "<p>err no</p>",
        "id": 233172541,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629793
    },
    {
        "content": "<p>that's earlier</p>",
        "id": 233172552,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629798
    },
    {
        "content": "<p>But it's <em>roughly</em> </p>\n<div class=\"codehilite\"><pre><span></span><code>types in generator after region replacement\nfor&lt;&#39;r, &#39;s, &#39;t0&gt; {\n    std::future::ResumeTy,\n    &amp;ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(&#39;r) }) F,\n    (),\n    &amp;ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrNamed(&#39;s) }) (),\n    std::boxed::Box&lt;(dyn std::future::Future&lt;Output = ()&gt; + std::marker::Unpin + ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrNamed(&#39;t0) }))&gt;\n}, span = /home/hueyj/temp/rust/rust/src/test/ui/const-generics/issues/issue-83737.rs:10:1: 12:2 (#9)\n</code></pre></div>",
        "id": 233172577,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629816
    },
    {
        "content": "<p>Except with <code>ReErased</code></p>",
        "id": 233172585,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629823
    },
    {
        "content": "<p>The important bits are:</p>\n<div class=\"codehilite\"><pre><span></span><code>decl_ty.kind() = Adt(\n    std::boxed::Box,\n    [\n        (dyn std::future::Future&lt;Output = ()&gt; + std::marker::Unpin + ReErased),\n        std::alloc::Global,\n    ],\n)\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code>a.kind() = Adt(\n    std::boxed::Box,\n    [\n        (dyn std::future::Future&lt;Output = ()&gt; + std::marker::Unpin + ReErased),\n        std::alloc::Global,\n    ],\n)\n</code></pre></div>",
        "id": 233172765,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629938
    },
    {
        "content": "<p>Where <code>a</code> is the relevant witness list item</p>",
        "id": 233172777,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617629948
    },
    {
        "content": "<p>Okay, so let me know when you're ready to go through the solution for issue 1</p>",
        "id": 233172854,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617630001
    },
    {
        "content": "<p>Btw I have a hard time limit at 10:00</p>",
        "id": 233173823,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617630507
    },
    {
        "content": "<p>But can chat again later today a bit if needed</p>",
        "id": 233173853,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617630520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> sorry-- I got distracted dealing with something here</p>",
        "id": 233178822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617633007
    },
    {
        "content": "<p>No problem. My meeting ended early if you have time to chat now?</p>",
        "id": 233179958,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617633540
    },
    {
        "content": "<p>I have 20 minutes</p>",
        "id": 233179970,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617633546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233172493\">said</a>:</p>\n<blockquote>\n<p>wait yes I do</p>\n</blockquote>\n<p>yes, I really do:</p>\n<div class=\"codehilite\"><pre><span></span><code>{\nResumeTy,\n&amp;ReErased F,\n(),\n&amp;ReErased (),\nBox&lt;(dyn Future&lt;Output = ()&gt; + Unpin + ReErased)&gt;\n}\n</code></pre></div>",
        "id": 233189578,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617637236
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 233488367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617802622
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> can't be around though</p>",
        "id": 233488381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617802628
    },
    {
        "content": "<p>let me dig a bit</p>",
        "id": 233488384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617802629
    },
    {
        "content": "<p>Around-ish now <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 233495431,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617805078
    },
    {
        "content": "<p>not sure if you're still around</p>",
        "id": 233495485,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617805085
    },
    {
        "content": "<p>I'm here</p>",
        "id": 233648290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887081
    },
    {
        "content": "<p>I made a build of this yesterday</p>",
        "id": 233648306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887088
    },
    {
        "content": "<p>but that' as far as I got</p>",
        "id": 233648313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887090
    },
    {
        "content": "<p>Ah, was about to ask</p>",
        "id": 233648332,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887097
    },
    {
        "content": "<p>So, we discussed on Monday a bit about what the problem is, right?</p>",
        "id": 233648717,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887231
    },
    {
        "content": "<p>yes</p>",
        "id": 233648742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887240
    },
    {
        "content": "<p>But didn't end up going into details</p>",
        "id": 233648778,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887254
    },
    {
        "content": "<p>of the solution</p>",
        "id": 233648781,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887257
    },
    {
        "content": "<p>well, we actually didn't get to the whole issue</p>",
        "id": 233648877,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887286
    },
    {
        "content": "<p>(well, the second issue)</p>",
        "id": 233648900,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887294
    },
    {
        "content": "<p>yeah that was what I wanted to know</p>",
        "id": 233648934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887304
    },
    {
        "content": "<p>But that's more simple</p>",
        "id": 233648957,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887308
    },
    {
        "content": "<p>Imagine <code>T: Fn() -&gt; Box&lt;dyn Future&lt;Output = ()&gt;&gt;</code></p>",
        "id": 233649019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887333
    },
    {
        "content": "<p>And we want to figure out the bound vars on <code>Future</code></p>",
        "id": 233649053,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887353
    },
    {
        "content": "<p>before we go there</p>",
        "id": 233649085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887374
    },
    {
        "content": "<p>what's the test case so I can run it on my own?</p>",
        "id": 233649092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887378
    },
    {
        "content": "<p><code>src/test/ui/lifetimes/issue-83737-binders-across-types.rs</code></p>",
        "id": 233649212,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887414
    },
    {
        "content": "<p>thanks</p>",
        "id": 233649257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233649053\">said</a>:</p>\n<blockquote>\n<p>And we want to figure out the bound vars on <code>Future</code></p>\n</blockquote>\n<p>Currently, it's only determined by looking through the <code>Binder</code> scopes above and the <code>from_poly_trait_ref</code> flag</p>",
        "id": 233649361,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887476
    },
    {
        "content": "<p>I don't have that test</p>",
        "id": 233649393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887489
    },
    {
        "content": "<p>It's not on master</p>",
        "id": 233649406,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887498
    },
    {
        "content": "<p>maybe I don't have your branch</p>",
        "id": 233649408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887501
    },
    {
        "content": "<p>yeah, I thoght I had your branch, but I think I don't</p>",
        "id": 233649416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887506
    },
    {
        "content": "<p>I'll pull it from your branch</p>",
        "id": 233649422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887510
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/1a14315975224951bc993455783678154afade09/src/test/ui/lifetimes/issue-83737-binders-across-types.rs\">https://github.com/rust-lang/rust/blob/1a14315975224951bc993455783678154afade09/src/test/ui/lifetimes/issue-83737-binders-across-types.rs</a></p>",
        "id": 233649436,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887517
    },
    {
        "content": "<p>so when I run this on master</p>",
        "id": 233649706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887631
    },
    {
        "content": "<p>I don't get any error or anything</p>",
        "id": 233649713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887635
    },
    {
        "content": "<p>am I supposed to?</p>",
        "id": 233649717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887637
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>athena. rustc +rust-3-stage1 --edition 2018 issue-83737-binders-across-types.rs\nwarning: function is never used: `handle`\n --&gt; issue-83737-binders-across-types.rs:7:10\n  |\n7 | async fn handle&lt;F&gt;(slf: &amp;F)\n  |          ^^^^^^\n  |\n  = note: `#[warn(dead_code)]` on by default\n\nwarning: 1 warning emitted\n</code></pre></div>",
        "id": 233649765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233649361\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233649053\">said</a>:</p>\n<blockquote>\n<p>And we want to figure out the bound vars on <code>Future</code></p>\n</blockquote>\n<p>Currently, it's only determined by looking through the <code>Binder</code> scopes above and the <code>from_poly_trait_ref</code> flag</p>\n</blockquote>\n<p>The though was if you had <code>fn foo&lt;T&gt;() where T: Foo&lt;Bar: Baz&gt; {}</code> the <code>foo</code> Binder scope has as <code>from_poly_trait_ref</code> flag as <code>false</code> and <code>T: Foo</code> has it set to <code>true</code>. When we try to get bound vars for <code>Bar: Baz</code>, we care about <code>T: Foo</code> bound vars but not <code>foo</code> bound vars</p>",
        "id": 233649766,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887647
    },
    {
        "content": "<p>are you building it as a lib?</p>",
        "id": 233649815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887671
    },
    {
        "content": "<p>oh, right</p>",
        "id": 233649835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887680
    },
    {
        "content": "<p>got it, thanks!</p>",
        "id": 233649854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887689
    },
    {
        "content": "<p>Anyways, you won't see this output on master because the pretty printing doesn't display the bound vars, only the vars <em>in</em> the type</p>",
        "id": 233650044,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887762
    },
    {
        "content": "<p>(which is the change I made to the pretty printing code under <code>-Z verbose</code>)</p>",
        "id": 233650115,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887779
    },
    {
        "content": "<p>ok</p>",
        "id": 233650123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887782
    },
    {
        "content": "<p>That was fun to find</p>",
        "id": 233650139,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887792
    },
    {
        "content": "<p><code>from_poly_trait_ref</code> flag...where is this</p>",
        "id": 233650216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887829
    },
    {
        "content": "<p>in the <code>resolve_lifetimes</code> code?</p>",
        "id": 233650226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887833
    },
    {
        "content": "<p>In <code>Scope::Binder</code></p>",
        "id": 233650248,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887844
    },
    {
        "content": "<p>let me get a link</p>",
        "id": 233650260,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887848
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/69e1d22ddbc67b25141a735a22a8895a678b32ca/compiler/rustc_resolve/src/late/lifetimes.rs#L250\">https://github.com/rust-lang/rust/blob/69e1d22ddbc67b25141a735a22a8895a678b32ca/compiler/rustc_resolve/src/late/lifetimes.rs#L250</a></p>",
        "id": 233650377,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617887888
    },
    {
        "content": "<p>k</p>",
        "id": 233650411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887903
    },
    {
        "content": "<p>(one sec, brb)</p>",
        "id": 233650419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617887906
    },
    {
        "content": "<p>But the <code>F: Fn(&amp;()) -&gt; Box&lt;dyn Future&lt;Output = ()&gt; + Unpin&gt;</code> bound that in the test essentially gets \"lowered\" to <code>for&lt;'a&gt; F: Fn(&amp;'a ()) -&gt; Box&lt;dyn for&lt;'a&gt; Future&lt;for&lt;'a&gt; Output = ()&gt; + Unpin&gt;</code>, which isn't correct</p>",
        "id": 233650593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617888002
    },
    {
        "content": "<p>back</p>",
        "id": 233651638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617888411
    },
    {
        "content": "<p>yeah that is wrong</p>",
        "id": 233651694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617888433
    },
    {
        "content": "<p>is that what your PR fixes?</p>",
        "id": 233651711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617888440
    },
    {
        "content": "<p>yes</p>",
        "id": 233651750,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617888466
    },
    {
        "content": "<p>so what's the rest of the bug</p>",
        "id": 233651821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617888491
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 233651865,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617888508
    },
    {
        "content": "<p>So the other issue is that types with unused binders cause problems when then end up as a generator witness</p>",
        "id": 233651910,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617888535
    },
    {
        "content": "<p>but it's orthogonal</p>",
        "id": 233651932,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617888544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233648877\">said</a>:</p>\n<blockquote>\n<p>well, we actually didn't get to the whole issue</p>\n</blockquote>\n<p>this</p>",
        "id": 233652154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617888636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233651910\">said</a>:</p>\n<blockquote>\n<p>So the other issue is that types with unused binders cause problems when then end up as a generator witness</p>\n</blockquote>\n<p>is this what you meant?</p>",
        "id": 233652178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617888650
    },
    {
        "content": "<p>yeah</p>",
        "id": 233652291,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617888709
    },
    {
        "content": "<p>I think we got through that</p>",
        "id": 233652319,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617888721
    },
    {
        "content": "<p>we talked about it</p>",
        "id": 233652456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617888774
    },
    {
        "content": "<p>but not the solution I don't think</p>",
        "id": 233652462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617888778
    },
    {
        "content": "<p>there's no solution to that yet</p>",
        "id": 233652501,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617888789
    },
    {
        "content": "<p>This PR only handles the second issue</p>",
        "id": 233652529,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617888796
    },
    {
        "content": "<p>i.e. invalid binder concatenation</p>",
        "id": 233652548,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617888810
    },
    {
        "content": "<p>ok</p>",
        "id": 233652591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617888827
    },
    {
        "content": "<p>let me look at the PR in more depth</p>",
        "id": 233652597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617888830
    },
    {
        "content": "<p>I also added some debug calls to the branch</p>",
        "id": 233652604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617888834
    },
    {
        "content": "<p>to help me follow along</p>",
        "id": 233652622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617888840
    },
    {
        "content": "<p>though I probably really want to start with your branch</p>",
        "id": 233652674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617888850
    },
    {
        "content": "<p>probably</p>",
        "id": 233652736,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617888876
    },
    {
        "content": "<p>I probably could have added more comments, as always</p>",
        "id": 233652796,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617888891
    },
    {
        "content": "<p>:/</p>",
        "id": 233652800,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617888892
    },
    {
        "content": "<p>you and every other PR author ever</p>",
        "id": 233653240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889072
    },
    {
        "content": "<p>that's what reviews are for :)</p>",
        "id": 233653267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889082
    },
    {
        "content": "<p>ok so I see you are adding a scope around trait refs</p>",
        "id": 233653346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889102
    },
    {
        "content": "<p>I'm a bit grumpy this requires so many diffs but I'll hold my tongue :)</p>",
        "id": 233653451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889160
    },
    {
        "content": "<p>as it's pre-existing and more than orthogonal</p>",
        "id": 233653461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889170
    },
    {
        "content": "<p>So, the idea is that this new scope is around the \"syntactic trait ref\"</p>",
        "id": 233653534,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889204
    },
    {
        "content": "<p>I think it would be nice to just remove <code>from_poly_trait_ref</code>, but I'm not 100% sure how at the moment</p>",
        "id": 233653657,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889263
    },
    {
        "content": "<p>I still don't 100% understand this comment</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                    </span><span class=\"c1\">// We've exited nested poly trait refs; mark that we are no longer in nested trait refs.</span>\n<span class=\"w\">                    </span><span class=\"c1\">// We don't increase the late depth because this isn't a `Binder` scope</span>\n</code></pre></div>",
        "id": 233653673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889271
    },
    {
        "content": "<p>Right so</p>",
        "id": 233653714,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889289
    },
    {
        "content": "<p>Let's think about <code>F: Fn(&amp;()) -&gt; Box&lt;dyn Future&lt;Output = ()&gt; + Unpin&gt;</code></p>",
        "id": 233653760,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889313
    },
    {
        "content": "<p>I'll try to \"annotate\" it with Scopes</p>",
        "id": 233653820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889325
    },
    {
        "content": "<p><code>{TraitRefBoundary} F: {Binder} Fn(&amp;()) -&gt; Box&lt;dyn {TraitRefBoundary} {Binder} Future&lt;Output = ()&gt; + {Binder} Unpin&gt;</code></p>",
        "id": 233654000,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889412
    },
    {
        "content": "<p>I'm not sure if that helps or makes things worse</p>",
        "id": 233654017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889423
    },
    {
        "content": "<p>But</p>",
        "id": 233654022,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889426
    },
    {
        "content": "<p>For that comment specifically</p>",
        "id": 233654035,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889431
    },
    {
        "content": "<p>I'd prefer a slightly different notation that makes the \"extent\" clearer, but it helps</p>",
        "id": 233654058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889442
    },
    {
        "content": "<p>I get it</p>",
        "id": 233654067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889443
    },
    {
        "content": "<p>however</p>",
        "id": 233654111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889448
    },
    {
        "content": "<p>Say we're looking at <code>Future</code></p>",
        "id": 233654112,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889448
    },
    {
        "content": "<p>is this just about named regions?</p>",
        "id": 233654135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889455
    },
    {
        "content": "<p>\"this\"?</p>",
        "id": 233654160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889465
    },
    {
        "content": "<p>this functon</p>",
        "id": 233654184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889478
    },
    {
        "content": "<p>I guess the lifetime name can be <code>Implicit</code></p>",
        "id": 233654237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889505
    },
    {
        "content": "<p>Which function</p>",
        "id": 233654238,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889505
    },
    {
        "content": "<p>What I really don't like about the current state is that we essentially have to identity the \"late depth\" in multiple places</p>",
        "id": 233654373,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889562
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">resolve_lifetime_ref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lifetime_ref</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">hir</span>::<span class=\"n\">Lifetime</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 233654423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889568
    },
    {
        "content": "<p>seems like \"yes it is\"</p>",
        "id": 233654450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889583
    },
    {
        "content": "<p>maybe that comment appears in multiple places</p>",
        "id": 233654464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889591
    },
    {
        "content": "<p>It does, yes</p>",
        "id": 233654483,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889602
    },
    {
        "content": "<p>Because, like I said, we basically have to duplicate this logic</p>",
        "id": 233654519,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889616
    },
    {
        "content": "<p>oh wait</p>",
        "id": 233654534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889625
    },
    {
        "content": "<p>ha</p>",
        "id": 233654539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889626
    },
    {
        "content": "<p>I was misunderstanding your diff</p>",
        "id": 233654546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889630
    },
    {
        "content": "<p>but also, yes</p>",
        "id": 233654571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889641
    },
    {
        "content": "<p>ok</p>",
        "id": 233654587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233654519\">said</a>:</p>\n<blockquote>\n<p>Because, like I said, we basically have to duplicate this logic</p>\n</blockquote>\n<p>yes. and it's fiddly logic.</p>",
        "id": 233654709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889688
    },
    {
        "content": "<p>your PR doesn't seem to have a diff to <code>resolve_lifetime_ref</code>, actually, is that a bug?</p>",
        "id": 233654781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889716
    },
    {
        "content": "<p>let me look</p>",
        "id": 233654835,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889740
    },
    {
        "content": "<p>Let's a diff there?</p>",
        "id": 233655019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889803
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/83870/files#diff-87880ceb989914cb25dc43961cb1cee5e7b07d8b04bcd9c967e7995cd85315d9R2344\">https://github.com/rust-lang/rust/pull/83870/files#diff-87880ceb989914cb25dc43961cb1cee5e7b07d8b04bcd9c967e7995cd85315d9R2344</a></p>",
        "id": 233655089,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889819
    },
    {
        "content": "<p>sorry, you are correct</p>",
        "id": 233655123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889829
    },
    {
        "content": "<p>my bad</p>",
        "id": 233655127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889831
    },
    {
        "content": "<p>I was starting to worry</p>",
        "id": 233655160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617889840
    },
    {
        "content": "<p>I didn't scroll up far enough</p>",
        "id": 233655169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889842
    },
    {
        "content": "<p>ok, I think i'm starting to understand what's going on</p>",
        "id": 233655194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617889854
    },
    {
        "content": "<p>gonna go get a snack and ponder it</p>",
        "id": 233655831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617890099
    },
    {
        "content": "<p>I'd like to add a comment but I'm probably ready to r+ the pr</p>",
        "id": 233655872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617890113
    },
    {
        "content": "<p>i want to write the comment to convince myself i grok it</p>",
        "id": 233655897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617890119
    },
    {
        "content": "<p>then i will dig a bit into the other bug</p>",
        "id": 233655910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617890123
    },
    {
        "content": "<p>Works for me :)</p>",
        "id": 233655938,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617890133
    },
    {
        "content": "<p>Maybe tomorrow we can discuss the \"proper\" solution for the other part of the bug (generator witness/erased types)</p>",
        "id": 233655995,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617890156
    },
    {
        "content": "<p>unrelated: I have to figure out how to get rust-analyzer to do its build in another directory</p>",
        "id": 233656121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617890191
    },
    {
        "content": "<p>i think that's very easy</p>",
        "id": 233656135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617890195
    },
    {
        "content": "<p>oh</p>",
        "id": 233656219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617890229
    },
    {
        "content": "<p>I think i did it already</p>",
        "id": 233656225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617890231
    },
    {
        "content": "<p>then i am getting some <em>other</em> weird incremental build fail</p>",
        "id": 233656264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617890248
    },
    {
        "content": "<p>I get those from time to time</p>",
        "id": 233656637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617890369
    },
    {
        "content": "<p>Sometimes just have to <code>./x.py clean</code></p>",
        "id": 233656668,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617890385
    },
    {
        "content": "<p>so...</p>",
        "id": 233659222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617891258
    },
    {
        "content": "<p>the test passes now, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, but you see this as just a workaround?</p>",
        "id": 233659250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617891268
    },
    {
        "content": "<p>It's not a workaround per se. It fixes a bug that is orthogonal to the generator witness/erasing types bug. But this bug wouldn't be a problem <em>in most cases</em> without the other bug.</p>",
        "id": 233659436,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617891338
    },
    {
        "content": "<p>But yes, there's still a very real issue that needs to be fixed.</p>",
        "id": 233659588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617891379
    },
    {
        "content": "<p>But it's less severe with this fix.</p>",
        "id": 233659651,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617891402
    },
    {
        "content": "<p>yeah, ok</p>",
        "id": 233659951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617891513
    },
    {
        "content": "<p>workaround was the wrong term</p>",
        "id": 233659963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617891517
    },
    {
        "content": "<p>but the point is, fixing this bug fixes the original <em>issue</em> but not the underlying problem</p>",
        "id": 233660004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617891534
    },
    {
        "content": "<p>do you have a test that triggers this underlying problem?</p>",
        "id": 233660017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617891540
    },
    {
        "content": "<p>It's in the OP</p>",
        "id": 233660055,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617891555
    },
    {
        "content": "<p>also, something i find interesting in the code; we can always compute the <em>index</em> the named ifetime will have, it seems, even if we don't always know its <em>depth</em></p>",
        "id": 233660107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617891580
    },
    {
        "content": "<p>This is true</p>",
        "id": 233660152,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617891599
    },
    {
        "content": "<p>i guess that makes sense</p>",
        "id": 233660153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617891599
    },
    {
        "content": "<p>obviously we can't know its depth</p>",
        "id": 233660219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617891611
    },
    {
        "content": "<p>If I understand what you're saying, we <em>do</em></p>",
        "id": 233660223,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617891612
    },
    {
        "content": "<p>mostly it means: we never have binders that will get concatenated into other, parent binders, but we don't know those parents yet --</p>",
        "id": 233660300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617891642
    },
    {
        "content": "<p>and also that we never binders that are sometimes concatenated (for some references) but not others</p>",
        "id": 233660335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617891653
    },
    {
        "content": "<p>I'm not sure I follow</p>",
        "id": 233660436,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617891684
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/83737#issue-847762226\">this op</a>?</p>",
        "id": 233660457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617891694
    },
    {
        "content": "<p>No, in the PR description</p>",
        "id": 233660514,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617891719
    },
    {
        "content": "<p>It's the same test that gets fixed but adds a <code>for&lt;'a&gt;</code> around <code>Future</code></p>",
        "id": 233660602,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617891736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> </p>\n<p>so <a href=\"https://github.com/rust-lang/rust/blob/1a14315975224951bc993455783678154afade09/compiler/rustc_resolve/src/late/lifetimes.rs#L2369-L23720\">this code</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                        </span><span class=\"c1\">// We've already seen a binder that is a poly trait ref and this one is too,</span>\n<span class=\"w\">                        </span><span class=\"c1\">// that means that they are nested and we are concatenating the bound vars;</span>\n<span class=\"w\">                        </span><span class=\"c1\">// don't increase the late depth.</span>\n<span class=\"w\">                        </span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 233662269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892281
    },
    {
        "content": "<p>the primary example here is associated trait bounds, right?</p>",
        "id": 233662329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892311
    },
    {
        "content": "<p>The <em>only</em> example</p>",
        "id": 233662349,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617892321
    },
    {
        "content": "<p>what's the syntax / HIR for that?</p>",
        "id": 233662828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892467
    },
    {
        "content": "<p>this feels like a very general mechanism for a very specific problem</p>",
        "id": 233662873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892478
    },
    {
        "content": "<p>and I'm wondering if there's another, more targeted fix</p>",
        "id": 233662888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892484
    },
    {
        "content": "<p>at minimum I want to adjust the comment to identify the code that is triggering this path</p>",
        "id": 233662941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892504
    },
    {
        "content": "<p>i'm going to push a few commits in a sec</p>",
        "id": 233663001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892529
    },
    {
        "content": "<p>For associated type bounds?</p>",
        "id": 233663051,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617892553
    },
    {
        "content": "<p><code>for&lt;'a&gt; T: Iterator&lt;Item: for&lt;'b&gt; Foo&lt;'a, 'b&gt;&gt;</code></p>",
        "id": 233663134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892567
    },
    {
        "content": "<p>example, right?</p>",
        "id": 233663149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892570
    },
    {
        "content": "<p>yeah</p>",
        "id": 233663199,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617892582
    },
    {
        "content": "<p><code>Item: Foo</code> is stored in <code>GenericArg.bindings</code></p>",
        "id": 233663364,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617892665
    },
    {
        "content": "<p>And \"visited\" through <a href=\"https://github.com/rust-lang/rust/blob/69e1d22ddbc67b25141a735a22a8895a678b32ca/compiler/rustc_resolve/src/late/lifetimes.rs#L2608\">https://github.com/rust-lang/rust/blob/69e1d22ddbc67b25141a735a22a8895a678b32ca/compiler/rustc_resolve/src/late/lifetimes.rs#L2608</a></p>",
        "id": 233663397,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617892680
    },
    {
        "content": "<p>As an example, I was wondering if we could make the <code>for&lt;'b&gt;</code> binder \"tagged differently\" somehow</p>",
        "id": 233663506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892705
    },
    {
        "content": "<p>so that we just <em>never</em> increment <code>late_depth</code> on that sort of binder</p>",
        "id": 233663527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892712
    },
    {
        "content": "<p>and then we don't have to track <code>in_poly_trait_ref</code></p>",
        "id": 233663548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892721
    },
    {
        "content": "<p>I guess that might not .. quite work</p>",
        "id": 233663601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892742
    },
    {
        "content": "<p>Yeah, I thought about just storing the <code>late_depth</code> <em>in</em> <code>Scope::Binder</code></p>",
        "id": 233663662,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617892766
    },
    {
        "content": "<p>you could do it, counting downwards, no?</p>",
        "id": 233663720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892782
    },
    {
        "content": "<p>not the 'depth' in the sense of debruijn index</p>",
        "id": 233663768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892795
    },
    {
        "content": "<p>but the 'inverse' debruijn index</p>",
        "id": 233663791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892801
    },
    {
        "content": "<p>I mean, you would count upwards</p>",
        "id": 233663882,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617892813
    },
    {
        "content": "<p>I guess up and down is confusing</p>",
        "id": 233663915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892826
    },
    {
        "content": "<p>And then to get the <code>DebruijnIndex</code>, you find the nearest scope and then the scope the lifetime is defined and subtract</p>",
        "id": 233663959,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617892843
    },
    {
        "content": "<p>what I mean is if you had <code>for&lt;'a&gt; { for&lt;'b&gt; { .. } }</code> you would store 0 and 1 for <code>for&lt;'a&gt;</code> and <code>for&lt;'b&gt;</code> respectively</p>",
        "id": 233663976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892854
    },
    {
        "content": "<p>yeah, exactly</p>",
        "id": 233663998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892866
    },
    {
        "content": "<p>would that not work for some reason?</p>",
        "id": 233664005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892870
    },
    {
        "content": "<p>I can't think of why it wouldn't work</p>",
        "id": 233664094,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617892896
    },
    {
        "content": "<p>put another way:</p>",
        "id": 233664161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892918
    },
    {
        "content": "<p>so, first, I like that fix better, feels cleaner</p>",
        "id": 233664257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892943
    },
    {
        "content": "<p>and it fits with pre-computing the indices</p>",
        "id": 233664272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617892949
    },
    {
        "content": "<p>well, you still I think still have to keep track of the \"syntactic trait ref\"</p>",
        "id": 233664332,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617892972
    },
    {
        "content": "<p>for when you construct a <code>Scope::Binder</code> in the first place</p>",
        "id": 233664383,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617892999
    },
    {
        "content": "<p>but also I think that if we</p>",
        "id": 233664386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893002
    },
    {
        "content": "<p>change <code>from_poly_trait_ref</code> a bit</p>",
        "id": 233664422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893013
    },
    {
        "content": "<p><code>                Scope::Binder { ref lifetimes, from_poly_trait_ref, s, .. } =&gt; {</code></p>",
        "id": 233664448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893021
    },
    {
        "content": "<p>so it is only true on the <code>for&lt;'b&gt;</code></p>",
        "id": 233664460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893027
    },
    {
        "content": "<p>I <em>think</em> we could just skip updating the <code>late_depth</code> there altogether</p>",
        "id": 233664475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893036
    },
    {
        "content": "<p>actually</p>",
        "id": 233664572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893060
    },
    {
        "content": "<p>this code is weid</p>",
        "id": 233664608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893074
    },
    {
        "content": "<p>are you sure it's right?</p>",
        "id": 233664614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893076
    },
    {
        "content": "<p>in particular, consider my example above</p>",
        "id": 233664641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893084
    },
    {
        "content": "<p><code>for&lt;'a&gt; T: Iterator&lt;Item: for&lt;'b&gt; Foo&lt;'a, 'b&gt;&gt;</code></p>",
        "id": 233664683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893098
    },
    {
        "content": "<p>when we resolve <code>'a</code> here</p>",
        "id": 233664722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893110
    },
    {
        "content": "<p>we expect a <code>DebruijnIndex</code> of <code>0</code>, right?</p>",
        "id": 233664756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893120
    },
    {
        "content": "<p>yes</p>",
        "id": 233664770,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617893125
    },
    {
        "content": "<p>but I think we will get <code>1</code> here</p>",
        "id": 233664781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893130
    },
    {
        "content": "<p><code>in_poly_trait_ref</code> will be false, <code>from_poly_trait_ref</code> will be true, so we transition and increase <code>late_depth</code> by 1</p>",
        "id": 233664876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893162
    },
    {
        "content": "<p>that is, the binder structure for the above is (I think)</p>\n<div class=\"codehilite\"><pre><span></span><code>* TraitRefBoundary\n    * Binder(&#39;a, from_poly_trait_ref; true)\n        * Binder(&#39;b, from_poly_trait_ref; true)\n</code></pre></div>",
        "id": 233665004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893202
    },
    {
        "content": "<p>yeah, I see your point, but I'm trying to think if that is or isn't wrong</p>",
        "id": 233665040,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617893220
    },
    {
        "content": "<p>I think <code>from_poly_trait_ref</code> should be renamed to <code>concatenated</code> and it should act like I suggested above</p>",
        "id": 233665125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893241
    },
    {
        "content": "<p>i can maybe try to get a test and poke at it</p>",
        "id": 233665179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893260
    },
    {
        "content": "<p>going to have to stop soon and do something else i suspect</p>",
        "id": 233665191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233664332\">said</a>:</p>\n<blockquote>\n<p>well, you still I think still have to keep track of the \"syntactic trait ref\"</p>\n</blockquote>\n<p>that may be so, but that's not the part that bothers me; it's the fiddly loop with the boolean flags etc</p>",
        "id": 233665261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893285
    },
    {
        "content": "<p>I will try to play with this today</p>",
        "id": 233665281,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617893292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233665261\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233664332\">said</a>:</p>\n<blockquote>\n<p>well, you still I think still have to keep track of the \"syntactic trait ref\"</p>\n</blockquote>\n<p>that may be so, but that's not the part that bothers me; it's the fiddly loop with the boolean flags etc</p>\n</blockquote>\n<p>agreed, I don't like it either</p>",
        "id": 233665328,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617893308
    },
    {
        "content": "<p>though i am not convinced that we need the trait ref boundary still</p>",
        "id": 233665355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893318
    },
    {
        "content": "<p>I think it comes down to knowing whether a binder is a \"concatenated\" binder or not</p>",
        "id": 233665378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893327
    },
    {
        "content": "<p>ok. sorry <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> it's taken me a few days to give this attention, and thanks <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> for pushing it this far. I can talk more at our usual time tomorrow, and/or I may be around a bit today too</p>",
        "id": 233665473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893372
    },
    {
        "content": "<p>I am not <em>opposed</em> to r+'ing the PR as it stands if it's time sensitive</p>",
        "id": 233665509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893388
    },
    {
        "content": "<p>I'll be around all day</p>",
        "id": 233665516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617893392
    },
    {
        "content": "<p>I think we should try to get this in by tomorrow</p>",
        "id": 233665597,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617893408
    },
    {
        "content": "<p>I get what it does and I think it's \"more correct\", I just think it can be cleaned up</p>",
        "id": 233665598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893408
    },
    {
        "content": "<p>maybe we should land it and then do a refactoring pr?</p>",
        "id": 233665629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893419
    },
    {
        "content": "<p>I can do that</p>",
        "id": 233665650,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617893425
    },
    {
        "content": "<p>let me push this comment real quick</p>",
        "id": 233665741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233665598\">said</a>:</p>\n<blockquote>\n<p>I get what it does and I think it's \"more correct\", I just think it can be cleaned up</p>\n</blockquote>\n<p>ah well I am contending the code is actually wrong as is, too</p>",
        "id": 233665840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893487
    },
    {
        "content": "<p>I also was just thinking that i hadn't thought about a few other cases</p>",
        "id": 233665865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893498
    },
    {
        "content": "<p>notably</p>",
        "id": 233665869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893499
    },
    {
        "content": "<p><code>T: for&lt;'a&gt; Iterator&lt;Item: for&lt;'b&gt; Iterator&lt;Item: for&lt;'c&gt; Trait&lt;'a, 'b, 'c&gt;&gt;&gt;</code></p>",
        "id": 233665922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893522
    },
    {
        "content": "<p>but i think my logic stands</p>",
        "id": 233665968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893525
    },
    {
        "content": "<p>all those inner binders are \"concatenated\"</p>",
        "id": 233665998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893531
    },
    {
        "content": "<p>We have tests like that now and they're passing</p>",
        "id": 233666080,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617893556
    },
    {
        "content": "<p>i'll look, I think it's wrong</p>",
        "id": 233666103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893567
    },
    {
        "content": "<p>So I think there's just something I'm not realizing</p>",
        "id": 233666111,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617893571
    },
    {
        "content": "<p>do you remember the test names off hand?</p>",
        "id": 233666156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893588
    },
    {
        "content": "<p>but I'll look more at it for sure</p>",
        "id": 233666163,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617893588
    },
    {
        "content": "<p><code>lifetimes</code> dir?</p>",
        "id": 233666180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893592
    },
    {
        "content": "<p>well</p>",
        "id": 233666216,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617893603
    },
    {
        "content": "<p><code>associated_type_bounds</code></p>",
        "id": 233666242,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617893609
    },
    {
        "content": "<p><code>hrtb</code> has some tests like that</p>",
        "id": 233666495,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617893698
    },
    {
        "content": "<p>I pushed a commit to your branch, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, tell me if you agree with the text :)</p>",
        "id": 233666805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617893792
    },
    {
        "content": "<p>i agree</p>",
        "id": 233666959,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617893851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> so here is a really simple test:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(associated_type_bounds)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">c</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 233667636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617894030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233666959\">said</a>:</p>\n<blockquote>\n<p>i agree</p>\n</blockquote>\n<p>ok, then r=me with that commit for now</p>",
        "id": 233667689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617894038
    },
    {
        "content": "<p>but I still think the code is wrong :)</p>",
        "id": 233667756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617894048
    },
    {
        "content": "<p>I am trying to figure out how to extract the resulting setup from that test</p>",
        "id": 233667802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617894055
    },
    {
        "content": "<p>e.g., I'd like to see the debruijn index etc that were chosen for each lifetime name</p>",
        "id": 233667933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617894078
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_resolve::late::lifetimes resolve_lifetime_ref(lifetime_ref=lifetime(HirId { owner: DefId(0:7 ~ niko[317d]::foo), local_id: 9 }: &#39;a))\nDEBUG rustc_resolve::late::lifetimes insert_lifetime: lifetime &#39;a (hir_id=HirId { owner: DefId(0:7 ~ niko[317d]::foo), local_id: 9 }) resolved to LateBound(DebruijnIndex(2), DefId(0:9 ~ niko[317d]::foo::&#39;a), ExplicitOrElided) span=&quot;niko.rs:7:67: 7:69&quot;\nDEBUG rustc_resolve::late::lifetimes insert_lifetime: track_lifetime_uses=true\nDEBUG rustc_resolve::late::lifetimes insert_lifetime: first use of DefId(0:9 ~ niko[317d]::foo::&#39;a)\nDEBUG rustc_resolve::late::lifetimes visit_lifetime(lifetime_ref=lifetime(HirId { owner: DefId(0:7 ~ niko[317d]::foo), local_id: 10 }: &#39;b))\nDEBUG rustc_resolve::late::lifetimes resolve_lifetime_ref(lifetime_ref=lifetime(HirId { owner: DefId(0:7 ~ niko[317d]::foo), local_id: 10 }: &#39;b))\nDEBUG rustc_resolve::late::lifetimes insert_lifetime: lifetime &#39;b (hir_id=HirId { owner: DefId(0:7 ~ niko[317d]::foo), local_id: 10 }) resolved to LateBound(DebruijnIndex(1), DefId(0:10 ~ niko[317d]::foo::&#39;b), ExplicitOrElided) span=&quot;niko.rs:7:71: 7:73&quot;\nDEBUG rustc_resolve::late::lifetimes insert_lifetime: track_lifetime_uses=true\nDEBUG rustc_resolve::late::lifetimes insert_lifetime: first use of DefId(0:10 ~ niko[317d]::foo::&#39;b)\nDEBUG rustc_resolve::late::lifetimes visit_lifetime(lifetime_ref=lifetime(HirId { owner: DefId(0:7 ~ niko[317d]::foo), local_id: 11 }: &#39;c))\nDEBUG rustc_resolve::late::lifetimes resolve_lifetime_ref(lifetime_ref=lifetime(HirId { owner: DefId(0:7 ~ niko[317d]::foo), local_id: 11 }: &#39;c))\nDEBUG rustc_resolve::late::lifetimes insert_lifetime: lifetime &#39;c (hir_id=HirId { owner: DefId(0:7 ~ niko[317d]::foo), local_id: 11 }) resolved to LateBound(DebruijnIndex(0), DefId(0:11 ~ niko[317d]::foo::&#39;c), ExplicitOrElided) span=&quot;niko.rs:7:75: 7:77&quot;\nDEBUG rustc_resolve::late::lifetimes insert_lifetime: track_lifetime_uses=true\nDEBUG rustc_resolve::late::lifetimes insert_lifetime: first use of DefId(0:11 ~ niko[317d]::foo::&#39;c)\n</code></pre></div>",
        "id": 233668345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617894144
    },
    {
        "content": "<p>it sure <em>looks</em> wrong</p>",
        "id": 233668374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617894150
    },
    {
        "content": "<p><code>insert_lifetime: lifetime 'a (...) resolved to LateBound(DebruijnIndex(2),</code></p>",
        "id": 233668656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617894195
    },
    {
        "content": "<p>ugh okay</p>",
        "id": 233669136,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617894281
    },
    {
        "content": "<p>how did that slip by</p>",
        "id": 233669176,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617894292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> did you want to make more changes before landing this, or land as-is and make a follow up change?</p>",
        "id": 233745077,
        "sender_full_name": "tmandry",
        "timestamp": 1617923845
    },
    {
        "content": "<p>Okay, let's land this as is, since it fixes some critical bugs; but I have some followup cleanups that I can make a separate PR for and discuss with Niko tomorrow morning</p>",
        "id": 233745238,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617923994
    },
    {
        "content": "<p>So, I tried to implement what we talked about Niko, but realized it's not quite as straightforward as I was hoping</p>",
        "id": 233816589,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617973397
    },
    {
        "content": "<p>Particularly, resolving elided lifetimes is somewhat annoying</p>",
        "id": 233816652,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617973424
    },
    {
        "content": "<p>Because we have to ask \"how many binder scopes do we go through before we get to an elision scope\"</p>",
        "id": 233816843,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617973502
    },
    {
        "content": "<p>So, I guess I could do what I did for resolving lifetime refs but just find the binder scope above the elision scope</p>",
        "id": 233817029,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617973581
    },
    {
        "content": "<p>But then <a href=\"https://github.com/rust-lang/rust/blob/bc66b92f7f1114a78b98504a927ca9c0aa12c71a/compiler/rustc_resolve/src/late/lifetimes.rs#L3105\">this</a> bit of code becomes more complicated because we can't just break out of the loop</p>",
        "id": 233817417,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617973740
    },
    {
        "content": "<p>hmm</p>",
        "id": 233818603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974187
    },
    {
        "content": "<p>Okay, I might have found a way around that</p>",
        "id": 233818772,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974255
    },
    {
        "content": "<p>Basically have something like</p>\n<div class=\"codehilite\"><pre><span></span><code>        let mut late_depth = 0;\n        let mut first_binder_depth = None;\n</code></pre></div>",
        "id": 233818812,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974279
    },
    {
        "content": "<p>And in the binder scope match arm:</p>",
        "id": 233818868,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974289
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>                    first_binder_depth = first_binder_depth.or(Some(binder_depth));\n                    late_depth = first_binder_depth.unwrap() - binder_depth;\n</code></pre></div>",
        "id": 233818896,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974300
    },
    {
        "content": "<p>I think that'll work</p>",
        "id": 233818902,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974304
    },
    {
        "content": "<p>I'm reading the code to see what you are talking about</p>",
        "id": 233819009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974349
    },
    {
        "content": "<p>but I'm also making <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span></p>",
        "id": 233819022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974353
    },
    {
        "content": "<p>No worries</p>",
        "id": 233819045,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974362
    },
    {
        "content": "<p>so wait</p>",
        "id": 233819129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974397
    },
    {
        "content": "<p>oh</p>",
        "id": 233819188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974407
    },
    {
        "content": "<p>we are talking about knowing the \"inverse depth\" at each point</p>",
        "id": 233819212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974414
    },
    {
        "content": "<p>yeah</p>",
        "id": 233819224,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974419
    },
    {
        "content": "<p>is that right?</p>",
        "id": 233819227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974420
    },
    {
        "content": "<p>So, I've already written the code that stores the \"inverse depth\" in the binder scope</p>",
        "id": 233819296,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974447
    },
    {
        "content": "<p>It's now about just <em>using</em> it</p>",
        "id": 233819322,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974458
    },
    {
        "content": "<p>and the problem is ..</p>",
        "id": 233819335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974461
    },
    {
        "content": "<p>what are the scopes when we are processing an Elision?</p>",
        "id": 233819353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974469
    },
    {
        "content": "<p>somewhat</p>",
        "id": 233819422,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974493
    },
    {
        "content": "<p>it seems like we have <code>Binder  { Elision { ...</code></p>",
        "id": 233819446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233819353\">said</a>:</p>\n<blockquote>\n<p>what are the scopes when we are processing an Elision?</p>\n</blockquote>\n<p>sorry, I wasn't posting that as the <em>problem</em></p>",
        "id": 233819466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974515
    },
    {
        "content": "<p>it was just a question</p>",
        "id": 233819474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974520
    },
    {
        "content": "<p>Yes</p>",
        "id": 233819533,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974529
    },
    {
        "content": "<p>mostly I wanted to know if it was <code>Elision { Binder { ... </code> or vice versa :)</p>",
        "id": 233819541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974532
    },
    {
        "content": "<p>based on reading the code</p>",
        "id": 233819554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233819446\">said</a>:</p>\n<blockquote>\n<p>it seems like we have <code>Binder  { Elision { ...</code></p>\n</blockquote>\n<p>this</p>",
        "id": 233819590,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974554
    },
    {
        "content": "<p>it seems like Binder { Elision {</p>",
        "id": 233819604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974557
    },
    {
        "content": "<p>ok, good</p>",
        "id": 233819609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974559
    },
    {
        "content": "<p>and so the problem is -- we need to know the \"inverse depth\" the elision is at ?</p>",
        "id": 233819632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974568
    },
    {
        "content": "<p>why not just store \"inverse depth\" in the elision itself?</p>",
        "id": 233819649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974576
    },
    {
        "content": "<p>I thought about that :)</p>",
        "id": 233819661,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974583
    },
    {
        "content": "<p>or you could of course search backwards for the next binder</p>",
        "id": 233819662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974583
    },
    {
        "content": "<p>it's kind of equivalent</p>",
        "id": 233819709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974606
    },
    {
        "content": "<p>just a quesiton of when you do it</p>",
        "id": 233819722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233819662\">said</a>:</p>\n<blockquote>\n<p>or you could of course search backwards for the next binder</p>\n</blockquote>\n<p>What I was saying for this, is then we no longer can just <code>break</code> for the elision error</p>",
        "id": 233819738,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233819649\">said</a>:</p>\n<blockquote>\n<p>why not just store \"inverse depth\" in the elision itself?</p>\n</blockquote>\n<p>this was the other option I considered</p>",
        "id": 233819786,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974635
    },
    {
        "content": "<p>I think of everything, the code I posted seems <em>most</em> clean</p>",
        "id": 233819865,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974655
    },
    {
        "content": "<p>err but tests fail...</p>",
        "id": 233819908,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974673
    },
    {
        "content": "<p>That's apparently not right</p>",
        "id": 233819916,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974678
    },
    {
        "content": "<p>Oh, I'm probably off by one</p>",
        "id": 233820152,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974768
    },
    {
        "content": "<p>And I can't always add one...</p>",
        "id": 233820228,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974809
    },
    {
        "content": "<p>I dont' understand the code you wrote</p>",
        "id": 233820299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974843
    },
    {
        "content": "<p>I must be missing something</p>",
        "id": 233820307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974846
    },
    {
        "content": "<p>(or can I? I don't think we can have elision between concatenating binders)</p>",
        "id": 233820335,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974859
    },
    {
        "content": "<p>So</p>",
        "id": 233820352,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974869
    },
    {
        "content": "<p>actually wait</p>",
        "id": 233820367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974875
    },
    {
        "content": "<p>ok maybe I do</p>",
        "id": 233820435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617974886
    },
    {
        "content": "<p>Basically, the code finds the first <code>Binder</code> we see (<code>first_binder_depth</code>)</p>",
        "id": 233820447,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974892
    },
    {
        "content": "<p>But also the last binder we see</p>",
        "id": 233820479,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974905
    },
    {
        "content": "<p>We only store the actual depth for the last binder we see though</p>",
        "id": 233820604,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974957
    },
    {
        "content": "<p>Since we don't actually need the \"inverse depth\" again</p>",
        "id": 233820635,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617974974
    },
    {
        "content": "<p>Overall, I'm really feeling like this code is overcomplicated</p>",
        "id": 233820767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975020
    },
    {
        "content": "<p>I think I prefer my other variant</p>",
        "id": 233820810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975036
    },
    {
        "content": "<p>where you count the binders as you walk up</p>",
        "id": 233820828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975040
    },
    {
        "content": "<p>but we mark some of them as \"concatenating\"</p>",
        "id": 233820841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975046
    },
    {
        "content": "<p>and you ignore those</p>",
        "id": 233820847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975048
    },
    {
        "content": "<p>is there something wrong with that? I think it covers all the things</p>",
        "id": 233820861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975056
    },
    {
        "content": "<p>alternatively, we include in a <code>Binder</code> an itneger that is either 0 or 1 :)</p>",
        "id": 233820913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975079
    },
    {
        "content": "<p>I mean, that's essentially what the <code>from_poly_trait_ref</code> code does</p>",
        "id": 233820917,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975082
    },
    {
        "content": "<p>i.e. the current code</p>",
        "id": 233820955,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975105
    },
    {
        "content": "<p>no it's not</p>",
        "id": 233821130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975176
    },
    {
        "content": "<p>well</p>",
        "id": 233821178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975193
    },
    {
        "content": "<p>I guess it depends on what you mean by \"essentially\"</p>",
        "id": 233821205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975199
    },
    {
        "content": "<p>my version doesn't involve any booleans or flags</p>",
        "id": 233821225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975213
    },
    {
        "content": "<p>plus it works correctly (doesn't it?)</p>",
        "id": 233821241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975223
    },
    {
        "content": "<p>I forget what the bug was actually...</p>",
        "id": 233821253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975229
    },
    {
        "content": "<p>I guess you mean do the <code>in_poly_trait_ref</code> stuff when we create the <code>Binder</code></p>",
        "id": 233821344,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975253
    },
    {
        "content": "<p>I think we even know when we make the binders very simply</p>",
        "id": 233821397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975279
    },
    {
        "content": "<p>if they are concatenating or not</p>",
        "id": 233821413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975285
    },
    {
        "content": "<p>we <em>must</em>, to assign the indices</p>",
        "id": 233821440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975289
    },
    {
        "content": "<p>where is that logic?</p>",
        "id": 233821489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975312
    },
    {
        "content": "<p>Sorry, I have to reread that</p>",
        "id": 233821520,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975327
    },
    {
        "content": "<p>Can you restate</p>",
        "id": 233821540,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975340
    },
    {
        "content": "<p>maybe let me step back a sec here</p>",
        "id": 233821640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975370
    },
    {
        "content": "<p>So, I think what your asking</p>",
        "id": 233821659,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975378
    },
    {
        "content": "<p>also my coffee is ready so i'm going to relocate to my office :)</p>",
        "id": 233821689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975388
    },
    {
        "content": "<p>brb!</p>",
        "id": 233821700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975391
    },
    {
        "content": "<p>Is when we make a <code>Binder</code> scope, if we know we're going to concatenate</p>",
        "id": 233821720,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975398
    },
    {
        "content": "<p>The answer is not currently, but we could</p>",
        "id": 233821756,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975413
    },
    {
        "content": "<p>Currently, we only know if we <em>could</em> concatenate, based solely on if we're a poly trait ref or not</p>",
        "id": 233821839,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975448
    },
    {
        "content": "<p>btw, I think we should discuss the generator witness and lifetime erasing issue</p>",
        "id": 233822017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975507
    },
    {
        "content": "<p>Since this is just cleanup and I can fiddle on my own time (and not waste precious Niko time)</p>",
        "id": 233822094,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233821839\">said</a>:</p>\n<blockquote>\n<p>Currently, we only know if we <em>could</em> concatenate, based solely on if we're a poly trait ref or not</p>\n</blockquote>\n<p>I will say that <em>locally</em> I have basically done this, by essentially storing the <code>binder_depth</code> (aka the inverse binder depth); except it's not a bool or a <code>1/0</code></p>",
        "id": 233822423,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975686
    },
    {
        "content": "<p>Because within multiple concatenating binders, we can ask at any level to resolve a lifetime. So we can't do something special for just one of them.</p>",
        "id": 233822610,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975747
    },
    {
        "content": "<p>ok back</p>",
        "id": 233822674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975771
    },
    {
        "content": "<p>I guess, unless we stored the binder depth that we want in the <code>TraitRefBoundary</code> and also \"find\" that when we see <code>from_poly_trait_ref = true</code></p>",
        "id": 233822721,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975791
    },
    {
        "content": "<p>I don't envision having any <code>from_poly_trait_ref</code> flag</p>",
        "id": 233822914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975865
    },
    {
        "content": "<p>but I should double check a few things about the code first</p>",
        "id": 233822947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975877
    },
    {
        "content": "<p>can we walk through an example?</p>",
        "id": 233822962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975885
    },
    {
        "content": "<p>something like</p>",
        "id": 233822975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975891
    },
    {
        "content": "<p><code>for&lt;'a&gt; t: Iterator&lt;Item: for&lt;'b&gt; Trait&lt;'a, 'b&gt;&gt;</code></p>",
        "id": 233823009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617975908
    },
    {
        "content": "<p>Do you want me to walk through it?</p>",
        "id": 233823209,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975965
    },
    {
        "content": "<p>Or are you going to go through your thoughts</p>",
        "id": 233823242,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975974
    },
    {
        "content": "<p>(you might be typing)</p>",
        "id": 233823259,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617975978
    },
    {
        "content": "<p>I can do the typing</p>",
        "id": 233823328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976004
    },
    {
        "content": "<p>that seems to work well for us</p>",
        "id": 233823336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976008
    },
    {
        "content": "<p>I'm trying to decide where to start</p>",
        "id": 233823348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976014
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 233823372,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976027
    },
    {
        "content": "<p>ok so</p>",
        "id": 233823375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976027
    },
    {
        "content": "<p>let's start with where we create the <code>Binder</code> for <code>for&lt;'a&gt;</code></p>",
        "id": 233823405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976039
    },
    {
        "content": "<p>(Also, I have a pretty narrow cutoff at 10ish)</p>",
        "id": 233823417,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976044
    },
    {
        "content": "<p>I do too</p>",
        "id": 233823446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976049
    },
    {
        "content": "<p>I'll goq uick</p>",
        "id": 233823451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976051
    },
    {
        "content": "<p>I guess the starting point is visiting the item</p>",
        "id": 233823621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976114
    },
    {
        "content": "<p>maybe <a href=\"https://github.com/rust-lang/rust/blob/c1dc0b7bbc239290388d2365c6d0b282e299bdbc/compiler/rustc_resolve/src/late/lifetimes.rs#L1269-L1270\">this code</a>?</p>",
        "id": 233823743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976168
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/c1dc0b7bbc239290388d2365c6d0b282e299bdbc/compiler/rustc_resolve/src/late/lifetimes.rs#L1291-L1292\">we walk through the predicates</a></p>",
        "id": 233823802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976195
    },
    {
        "content": "<p>That's correct</p>",
        "id": 233823807,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976196
    },
    {
        "content": "<p>invoke <a href=\"https://github.com/rust-lang/rust/blob/c1dc0b7bbc239290388d2365c6d0b282e299bdbc/compiler/rustc_resolve/src/late/lifetimes.rs#L1332-L1333\"><code>visit_param_bound</code></a></p>",
        "id": 233823960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976243
    },
    {
        "content": "<p>or I guess eventually get to <code>visit_poly_trait_ref</code> ?</p>",
        "id": 233824021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976271
    },
    {
        "content": "<p>Yes</p>",
        "id": 233824050,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976286
    },
    {
        "content": "<p>so there's the \"trait ref hack\" code</p>",
        "id": 233824093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976307
    },
    {
        "content": "<p>which I'm going to ignore for now</p>",
        "id": 233824102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976310
    },
    {
        "content": "<p>:) Yes..that</p>",
        "id": 233824121,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976320
    },
    {
        "content": "<p>but I think that <code>trait_ref_hack</code> is <code>Some</code> if you have <code>for&lt;'a&gt; T: ...</code></p>",
        "id": 233824167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976326
    },
    {
        "content": "<p>yes</p>",
        "id": 233824179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976331
    },
    {
        "content": "<p>and <code>None</code> if yo have <code>T: for&lt;'a&gt; ...</code></p>",
        "id": 233824183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976334
    },
    {
        "content": "<p>ok, so let's run with the latter</p>",
        "id": 233824216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976340
    },
    {
        "content": "<p>then we walk up the scopes</p>",
        "id": 233824245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976351
    },
    {
        "content": "<p>(I have to say that being able to break from a loop with a value is very cool)</p>",
        "id": 233824289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976366
    },
    {
        "content": "<p>(I love it)</p>",
        "id": 233824339,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976385
    },
    {
        "content": "<p>so</p>",
        "id": 233824438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976428
    },
    {
        "content": "<p>I think we should be able to get rid of <code>trait_ref_hack</code></p>",
        "id": 233824458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976435
    },
    {
        "content": "<p>and make it all one smooth system</p>",
        "id": 233824503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976444
    },
    {
        "content": "<p>I agree</p>",
        "id": 233824564,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976459
    },
    {
        "content": "<p>I think that's possible :)</p>",
        "id": 233824574,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976464
    },
    {
        "content": "<p>here is what I imagine</p>",
        "id": 233824576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976466
    },
    {
        "content": "<p>we walk back up the binders</p>",
        "id": 233824595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976470
    },
    {
        "content": "<p>(let me ponder a second)</p>",
        "id": 233824661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976497
    },
    {
        "content": "<p>so we have a few scenarios</p>",
        "id": 233824679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976502
    },
    {
        "content": "<p>there's the where clause scenario I was sketching</p>",
        "id": 233824697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976509
    },
    {
        "content": "<p>also</p>",
        "id": 233824702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976510
    },
    {
        "content": "<p><code>for&lt;'a&gt; fn(dyn for&lt;'b&gt; Foo)</code></p>",
        "id": 233824731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976519
    },
    {
        "content": "<p>(assuming that we're okay with, in<code>for&lt;'a&gt; T: for&lt;'b&gt; Foo</code>, the binders on <code>T</code> <em>actually</em> being <code>['a, 'b]</code>)</p>",
        "id": 233824744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976524
    },
    {
        "content": "<p>well, we can still error in that case potentially, but I would actually be fine with that</p>",
        "id": 233824783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233824744\">said</a>:</p>\n<blockquote>\n<p>(assuming that we're okay with, in<code>for&lt;'a&gt; T: for&lt;'b&gt; Foo</code>, the binders on <code>T</code> <em>actually</em> being <code>['a, 'b]</code>)</p>\n</blockquote>\n<p>scratch that</p>",
        "id": 233824793,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976547
    },
    {
        "content": "<p>well, what I thought you meant was more like</p>",
        "id": 233824868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976566
    },
    {
        "content": "<p>assuming we're ok on accepting that</p>",
        "id": 233824878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976569
    },
    {
        "content": "<p>but we could just reject it in ast validation or something</p>",
        "id": 233824900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976577
    },
    {
        "content": "<p>if we don't want to accept it</p>",
        "id": 233824911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976581
    },
    {
        "content": "<p>Well, I think that would be okay, but we don't actually need to do that</p>",
        "id": 233824946,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976597
    },
    {
        "content": "<p>i.e. that's not how the concatenation system works</p>",
        "id": 233824972,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976611
    },
    {
        "content": "<p>But continue</p>",
        "id": 233824985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976614
    },
    {
        "content": "<p>ok so the basic idea I am thinking is that we walk back in this loop--</p>",
        "id": 233825028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976627
    },
    {
        "content": "<p>if we find a <code>Binder</code>, we concatenate ourselves onto it</p>",
        "id": 233825049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976633
    },
    {
        "content": "<p>otherwise, we start a new one</p>",
        "id": 233825054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976636
    },
    {
        "content": "<p>that doesn't <em>actually</em> work</p>",
        "id": 233825063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976639
    },
    {
        "content": "<p>we either need the <code>from_poly_trait_ref</code> flag, which I don't love</p>",
        "id": 233825091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976654
    },
    {
        "content": "<p>or something like <code>TraitRefBoundary</code></p>",
        "id": 233825124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233824731\">said</a>:</p>\n<blockquote>\n<p><code>for&lt;'a&gt; fn(dyn for&lt;'b&gt; Foo)</code></p>\n</blockquote>\n<p>for cases like these, where we don't want to concatenate</p>",
        "id": 233825198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976692
    },
    {
        "content": "<p>I don't hate <code>TraitRefBoundary</code></p>",
        "id": 233825243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976712
    },
    {
        "content": "<p>That said</p>",
        "id": 233825263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976727
    },
    {
        "content": "<p>having a \"binder kind\"</p>",
        "id": 233825267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976729
    },
    {
        "content": "<p>might be nicer</p>",
        "id": 233825270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976731
    },
    {
        "content": "<p>I imagine a few kinds of binders</p>",
        "id": 233825295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976741
    },
    {
        "content": "<p>I thought about that too :)</p>",
        "id": 233825310,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976747
    },
    {
        "content": "<ul>\n<li>root trait-ref</li>\n<li>concatenating</li>\n<li>other</li>\n</ul>",
        "id": 233825336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976757
    },
    {
        "content": "<p>Somewhat in the general sense of \"how could I clean up this code more generally\"</p>",
        "id": 233825359,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976767
    },
    {
        "content": "<p>if we are visiting a poly-trait-ref, and the innermost binder is a trait-ref, we push a concentating binder</p>",
        "id": 233825380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976779
    },
    {
        "content": "<p>else we push a trait-ref binder</p>",
        "id": 233825412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976797
    },
    {
        "content": "<p>There is a <em>slight</em> problem with that:</p>",
        "id": 233825430,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976803
    },
    {
        "content": "<p>everywhere else we push an \"other\" binder</p>",
        "id": 233825436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233825430\">said</a>:</p>\n<blockquote>\n<p>There is a <em>slight</em> problem with that:</p>\n</blockquote>\n<p>what is it</p>",
        "id": 233825491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976811
    },
    {
        "content": "<p>We don't know if we are the \"root\" trait ref when we actually make the binder scope</p>",
        "id": 233825517,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976824
    },
    {
        "content": "<p>Because that code is general</p>",
        "id": 233825552,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976832
    },
    {
        "content": "<p>we do because we just searched</p>",
        "id": 233825576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976834
    },
    {
        "content": "<p>but I have to go now, let's continue later</p>",
        "id": 233825602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976842
    },
    {
        "content": "<p>you do too :)</p>",
        "id": 233825604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617976845
    },
    {
        "content": "<p>Yes :)</p>",
        "id": 233825633,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976853
    },
    {
        "content": "<p>Thanks for chatting</p>",
        "id": 233825644,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976856
    },
    {
        "content": "<p>Loving these meetings</p>",
        "id": 233825665,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976861
    },
    {
        "content": "<p>I'll fiddle today or this weekend and we can pick up monday</p>",
        "id": 233825723,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617976884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233825665\">said</a>:</p>\n<blockquote>\n<p>Loving these meetings</p>\n</blockquote>\n<p>me too!</p>",
        "id": 233835970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617980433
    },
    {
        "content": "<p>best part of my day :)</p>",
        "id": 233835996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617980438
    },
    {
        "content": "<p>I think someone might have to explain all this lifetime lowering complexity to me when rust-analyzer starts getting interested in lifetimes <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 233839786,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617981178
    },
    {
        "content": "<p>I read the threads in this room daily, understand almost nothing of it, but it fascinates me :D</p>",
        "id": 233856817,
        "sender_full_name": "marmeladema",
        "timestamp": 1617987516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Issue.20.2383737/near/233856817\">said</a>:</p>\n<blockquote>\n<p>I read the threads in this room daily, understand almost nothing of it, but it fascinates me :D</p>\n</blockquote>\n<p>Half the time I don't even understand what I say</p>",
        "id": 233857005,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617987603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <a href=\"https://github.com/jackh726/rust/tree/binder-refactor-fix\">https://github.com/jackh726/rust/tree/binder-refactor-fix</a></p>",
        "id": 234157635,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618234229
    },
    {
        "content": "<p>The important commit is <a href=\"https://github.com/jackh726/rust/commit/5fce82c711a804cdadf8aac6638a15f8eadadd15\">https://github.com/jackh726/rust/commit/5fce82c711a804cdadf8aac6638a15f8eadadd15</a></p>",
        "id": 234157696,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618234254
    },
    {
        "content": "<p>Basically only what we discussed on Friday</p>",
        "id": 234157767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618234287
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">concanetate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">passed_boundary</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">from_poly_trait_ref</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">binder_depth</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">binder_depth</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">binder_depth</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234157793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618234295
    },
    {
        "content": "<p>that...makes sense but is quite misleading somehow :)</p>",
        "id": 234157815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618234303
    },
    {
        "content": "<p>at least if you're accustomed to perl <span aria-label=\"camel\" class=\"emoji emoji-1f42b\" role=\"img\" title=\"camel\">:camel:</span></p>",
        "id": 234157837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618234310
    },
    {
        "content": "<p>also s/concanetate/concatenate/:)</p>",
        "id": 234157922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618234327
    },
    {
        "content": "<p>Whoops</p>",
        "id": 234157943,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618234336
    },
    {
        "content": "<p>But yeah, I maybe could have written it cleaner</p>",
        "id": 234157985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618234350
    },
    {
        "content": "<p>no, it's fine, I was just amused</p>",
        "id": 234158012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618234362
    },
    {
        "content": "<p>it's no more confusing than <code>return if ... {</code></p>",
        "id": 234158033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618234370
    },
    {
        "content": "<p>I think though, by making sure I add a <code>TraitRefBoundary</code> scope always before a trait ref somewhere, I can remove <code>from_poly_trait_ref</code></p>",
        "id": 234158140,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618234400
    },
    {
        "content": "<p>(Which is what I was working on in <a href=\"https://github.com/jackh726/rust/commit/ab4488609c497bb569b23e1f630f406435a0a0a3\">https://github.com/jackh726/rust/commit/ab4488609c497bb569b23e1f630f406435a0a0a3</a>)</p>",
        "id": 234158164,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618234410
    },
    {
        "content": "<p>The tricky bit is getting the most minimal set of <code>TraitRefBoundary</code>s</p>",
        "id": 234158353,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618234465
    },
    {
        "content": "<p>In that commit as-is, we actually have two around some generics (I forget which)</p>",
        "id": 234158401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618234486
    },
    {
        "content": "<p>Technically, it doesn't make a difference, but it's less clean</p>",
        "id": 234158444,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618234505
    },
    {
        "content": "<p>The only one I have to think a little bit more about is <code>visit_poly_trait_ref</code></p>",
        "id": 234158667,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618234571
    },
    {
        "content": "<p>But I think that's easy</p>",
        "id": 234158865,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618234644
    },
    {
        "content": "<p>Oops Niko disappeared</p>",
        "id": 234159566,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618234879
    },
    {
        "content": "<p>I'm not truly gone</p>",
        "id": 234159645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618234911
    },
    {
        "content": "<p>let me read the diff a bit more closely</p>",
        "id": 234159652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618234916
    },
    {
        "content": "<p>I'm not sure whether I find <code>TraitRefBoudary</code> or \"concatenating binders\" cleaner</p>",
        "id": 234159799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618234961
    },
    {
        "content": "<p>it's kind of 6 in one, half dozen in the  other, as they say</p>",
        "id": 234159821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618234970
    },
    {
        "content": "<p>\"concatenating binders\" meaning <code>from_poly_trait_ref</code>?</p>",
        "id": 234159903,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618234996
    },
    {
        "content": "<p>not necessarily</p>",
        "id": 234159945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235010
    },
    {
        "content": "<p>I guess that could be renamed <code>ConcatenationBoundary</code></p>",
        "id": 234159981,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235020
    },
    {
        "content": "<p>I think it is true only for nested \"from poly trait refs\"</p>",
        "id": 234159991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235023
    },
    {
        "content": "<p>which means that you kind of have to track the trait ref boundary anyway</p>",
        "id": 234160023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235034
    },
    {
        "content": "<p>I haven't tried to just drop this into the <code>trait_ref_hack</code> bit</p>",
        "id": 234160296,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235104
    },
    {
        "content": "<p>But I think it might be super simple</p>",
        "id": 234160350,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235118
    },
    {
        "content": "<p>At this point, we should maybe just finish on this; I think really digging into the chalk closure issue is going to take some time</p>",
        "id": 234160606,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235196
    },
    {
        "content": "<p>I'm reading over that logic</p>",
        "id": 234160618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235198
    },
    {
        "content": "<p>so that first commit <em>feels</em> to me a bit more complex</p>",
        "id": 234160634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235205
    },
    {
        "content": "<p>So, the biggest benefit of the first commit in isolation is the logic for calculating binder depth is in one place</p>",
        "id": 234160923,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235289
    },
    {
        "content": "<p>(Nearly)</p>",
        "id": 234160951,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235296
    },
    {
        "content": "<p>I was going to say it feels a bit more complex than it has to be</p>",
        "id": 234161043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235337
    },
    {
        "content": "<p>How so</p>",
        "id": 234161075,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235351
    },
    {
        "content": "<p>so here is a possible design</p>",
        "id": 234161292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235412
    },
    {
        "content": "<p>tell me what you think</p>",
        "id": 234161304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235416
    },
    {
        "content": "<p>so if we had \"binder kind\"</p>",
        "id": 234161723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235545
    },
    {
        "content": "<p>I think it could have the following values:</p>",
        "id": 234161753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235554
    },
    {
        "content": "<ul>\n<li>Fn</li>\n<li>PolyTraitRef</li>\n<li>Concatenating</li>\n</ul>",
        "id": 234161816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235575
    },
    {
        "content": "<p>to compute the depth at some point, you walk back; you increment the late-bound depth for each binder you pass <em>unless</em> it its kind is <code>Concatenating</code></p>",
        "id": 234161880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235598
    },
    {
        "content": "<p>to decide the binder kind, if this is a poly-trait-ref, you look back at the kind of the innermost binder (if any)...</p>",
        "id": 234161973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235633
    },
    {
        "content": "<ul>\n<li>if it is <code>Some(PolyTraitRef)</code> or <code>Some(Concatenating)</code>, then your kind is <code>Concatenating</code></li>\n<li>else your kind is <code>PolyTraitRef</code></li>\n</ul>",
        "id": 234162088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235661
    },
    {
        "content": "<p>for all other places we push binders, we use the kind <code>Fn</code> (or maybe call that <code>Other</code>, whatever)</p>",
        "id": 234162120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235672
    },
    {
        "content": "<p>I think this works in all cases?</p>",
        "id": 234162140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235679
    },
    {
        "content": "<p>I'm not convinced that pre-computing the binder depth is that useful</p>",
        "id": 234162173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235689
    },
    {
        "content": "<p>since we still have to walk backwards, it seems?</p>",
        "id": 234162208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235701
    },
    {
        "content": "<p>That seems like that would work</p>",
        "id": 234162279,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235718
    },
    {
        "content": "<p>But that's essentially what <code>from_poly_trait_ref</code> does</p>",
        "id": 234162394,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235758
    },
    {
        "content": "<p>No, it's different</p>",
        "id": 234162459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235765
    },
    {
        "content": "<p>Except</p>",
        "id": 234162467,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235767
    },
    {
        "content": "<p>In one particular</p>",
        "id": 234162474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235769
    },
    {
        "content": "<p>Not quite</p>",
        "id": 234162483,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235771
    },
    {
        "content": "<p>In particular it distinguishes <em>nested</em> poly-trait-ref binders from the outermost one</p>",
        "id": 234162517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235785
    },
    {
        "content": "<p>Yeah</p>",
        "id": 234162533,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235790
    },
    {
        "content": "<p>it is easy to figure out if something is nested when you push the binder</p>",
        "id": 234162544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235795
    },
    {
        "content": "<p>it's annoying to figure it out at other times</p>",
        "id": 234162558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235800
    },
    {
        "content": "<p>because it can make you walk further back than you otherwise would have to</p>",
        "id": 234162597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235809
    },
    {
        "content": "<p>and in particular, you need to know if something is nested to know what to do at that point where you are walking back in terms of incrementing the late-depth</p>",
        "id": 234162633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235826
    },
    {
        "content": "<p>I feel like this is what you were trying to say Friday and I think I misunderstood</p>",
        "id": 234162653,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235831
    },
    {
        "content": "<p>it is what I was trying to say Friday</p>",
        "id": 234162851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235906
    },
    {
        "content": "<p>I'm not sure how well I expressed it</p>",
        "id": 234162866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235911
    },
    {
        "content": "<p>or even understood it at the time</p>",
        "id": 234162875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235915
    },
    {
        "content": "<p>Okay let me work on this then</p>",
        "id": 234162941,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235939
    },
    {
        "content": "<p>I have a meeting, so hard cutoff today :)</p>",
        "id": 234163006,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235959
    },
    {
        "content": "<p>Thanks for chatting :)</p>",
        "id": 234163070,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618235986
    },
    {
        "content": "<p>ok! I have some stuff to do too</p>",
        "id": 234163095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618235996
    },
    {
        "content": "<p>talking this out has been good, it seems clearer to me now</p>",
        "id": 234163175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618236007
    },
    {
        "content": "<p>Yeah, these meetings have been super helpful</p>",
        "id": 234163278,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618236031
    },
    {
        "content": "<p>I could potentially use some help on this. I have no clue where the <code>Box&lt;dyn for&lt;'a&gt; Future&lt;Output = ()&gt;&gt;</code> <code>LocalDecl</code> is ending up in the generator body</p>",
        "id": 234887603,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618592156
    },
    {
        "content": "<p>I added a <code>dbg</code> statement seemingly in every place that something gets added to <code>local_decls</code>, but I must be missing one because I don't see it :/</p>",
        "id": 234887739,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618592217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any thoughts or help here would be greatly appreciated. Honestly just stuck.</p>",
        "id": 234892367,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618594266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> sorry, I'll look now!</p>",
        "id": 235179437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618838654
    },
    {
        "content": "<p>are you around by any chance?</p>",
        "id": 235179456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618838660
    },
    {
        "content": "<p>how do I reproduce the problem again?</p>",
        "id": 235179974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618838889
    },
    {
        "content": "<p>Um the issue 83737 test</p>",
        "id": 235181528,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618839573
    },
    {
        "content": "<p>Add a <code>for&lt;'a&gt;</code> around <code>Future</code></p>",
        "id": 235181572,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618839596
    },
    {
        "content": "<p>Sorry I have today off and slept in :)</p>",
        "id": 235181800,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618839676
    },
    {
        "content": "<p>why can't I find this test</p>",
        "id": 235185221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618840992
    },
    {
        "content": "<p>is it not on master?</p>",
        "id": 235185259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618841002
    },
    {
        "content": "<p>oh</p>",
        "id": 235185422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618841050
    },
    {
        "content": "<p>problem solved</p>",
        "id": 235185466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618841068
    },
    {
        "content": "<p>Were you able to make any progress on this?</p>",
        "id": 235213862,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618851423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>  I wasn't but I hope to poke at it later</p>",
        "id": 235216313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618852418
    }
]