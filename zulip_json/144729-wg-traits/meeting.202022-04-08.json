[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span>, deep dive time</p>",
        "id": 278300269,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649422891
    },
    {
        "content": "<p>Seems like maybe Niko won't join this morning</p>",
        "id": 278300358,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649422930
    },
    {
        "content": "<p>Anyways, today we'll go over <a href=\"https://github.com/rust-lang/nomicon/pull/340\">https://github.com/rust-lang/nomicon/pull/340</a></p>",
        "id": 278300456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649422982
    },
    {
        "content": "<p>But first, any announcements or other other exciting facts</p>",
        "id": 278300496,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649423005
    },
    {
        "content": "<p>Okay</p>",
        "id": 278300661,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649423068
    },
    {
        "content": "<p>Nothing from me either</p>",
        "id": 278300678,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649423074
    },
    {
        "content": "<p>I assume I'll connect with Niko at some point about actually submitting the types team RFC</p>",
        "id": 278300718,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649423094
    },
    {
        "content": "<p>so be on the lookout for that (if we do end up opening that this week as we planned)</p>",
        "id": 278300767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649423119
    },
    {
        "content": "<p>Okay, shall we take 20 minutes or so to read?</p>",
        "id": 278300780,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649423133
    },
    {
        "content": "<p><span aria-label=\"book\" class=\"emoji emoji-1f4d6\" role=\"img\" title=\"book\">:book:</span> when you've started, <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> when you're done?</p>",
        "id": 278300808,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649423149
    },
    {
        "content": "<p>wave</p>",
        "id": 278300864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649423164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278300358\">said</a>:</p>\n<blockquote>\n<p>Seems like maybe Niko won't join this morning</p>\n</blockquote>\n<p>I'm here, just slow!</p>",
        "id": 278300868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649423168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278300496\">said</a>:</p>\n<blockquote>\n<p>But first, any announcements or other other exciting facts</p>\n</blockquote>\n<p>I feel like I have announcements but not sure what they are :)</p>",
        "id": 278300909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649423196
    },
    {
        "content": "<p>\"I'm back from the conference\" :)</p>",
        "id": 278300913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649423197
    },
    {
        "content": "<p>Exciting!</p>",
        "id": 278300928,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649423205
    },
    {
        "content": "<p>I had a lot of good conversations there and also made some progress around mir-formality (plus met various folks interested in it)</p>",
        "id": 278300956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649423221
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> and I did a \"walk through\" to add a simple extension, which was great, and it gave me some good feeling for how to do one for a broader group</p>",
        "id": 278301040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649423261
    },
    {
        "content": "<p>(we added <code>const Foo: BAR = ...</code> declarations)</p>",
        "id": 278301058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649423270
    },
    {
        "content": "<p>Oh nice!</p>",
        "id": 278301123,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649423287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278300956\">said</a>:</p>\n<blockquote>\n<p>I had a lot of good conversations there and also made some progress around mir-formality (plus met various folks interested in it)</p>\n</blockquote>\n<p>specifically I <em>think</em> this new approach to subtyping/region-inference is getting close to working</p>",
        "id": 278301129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649423290
    },
    {
        "content": "<p>which I would like to do a deep dive on at some point, but I wanted to prove it out first</p>",
        "id": 278301156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649423303
    },
    {
        "content": "<p>(I also noticed that <span class=\"user-mention\" data-user-id=\"396593\">@Conrad Ludgate</span> (PR author) is here too, so that's great! Welcome :))</p>",
        "id": 278301158,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649423305
    },
    {
        "content": "<p>ah, excellent</p>",
        "id": 278301173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649423315
    },
    {
        "content": "<p>Hello :)</p>",
        "id": 278301181,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649423320
    },
    {
        "content": "<p>/me starts to read</p>",
        "id": 278301188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649423326
    },
    {
        "content": "<p>(done)</p>",
        "id": 278302677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424026
    },
    {
        "content": "<p>Just a couple left reading. But I will say, this has improved a bunch since I first read over it. And it looks really nice overall</p>",
        "id": 278302705,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649424041
    },
    {
        "content": "<p>Is everyone familiar with the reasoning behind the proposal?</p>",
        "id": 278302901,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649424139
    },
    {
        "content": "<p>Do you mean, reason for subtyping/variance? Or why the chapter is getting rewritten?</p>",
        "id": 278302944,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649424166
    },
    {
        "content": "<p>Latter, the re-write</p>",
        "id": 278302970,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649424184
    },
    {
        "content": "<p>I'm not, I think</p>",
        "id": 278303033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424221
    },
    {
        "content": "<p>true confessions, I've never really read the Rustonomicon :)</p>",
        "id": 278303041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424229
    },
    {
        "content": "<p>I do think it would be good for us to establish <em>our</em> goals with this meeting (e.g., reviewing technical accuracy, general suggestions on readability, etc)</p>",
        "id": 278303119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424249
    },
    {
        "content": "<p>Well, I read the issue you linked, and I agree on the points about abstracting the problem too far for the explanation to be useful</p>",
        "id": 278303172,
        "sender_full_name": "oli",
        "timestamp": 1649424278
    },
    {
        "content": "<p>As in \"cats &amp; dogs\" don't help when I'm trying to understand actual lifetimes</p>",
        "id": 278303228,
        "sender_full_name": "oli",
        "timestamp": 1649424306
    },
    {
        "content": "<p>Yeah, that's the main concept. Removing the inheritance based explanations and getting straight to the point on lifetimes</p>",
        "id": 278303273,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649424344
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 278303298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424355
    },
    {
        "content": "<p>I did wonder, to that end</p>",
        "id": 278303318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424362
    },
    {
        "content": "<p>if it would be useful to start even simpler---</p>",
        "id": 278303380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278303119\">said</a>:</p>\n<blockquote>\n<p>I do think it would be good for us to establish <em>our</em> goals with this meeting (e.g., reviewing technical accuracy, general suggestions on readability, etc)</p>\n</blockquote>\n<p>I think we should try to answer: 1) Is everything in the current state clear and correct 2) Is there anything important that is missed 3) Should that be added 4) If so, in this PR or in followup</p>",
        "id": 278303382,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649424382
    },
    {
        "content": "<p>I've had a trained understanding of variance due to borrowck, but the old chapter never managed to explain it to me, your new chapter does. Tho tbf I read the old chapter years ago, so it's not easily comparable</p>",
        "id": 278303400,
        "sender_full_name": "oli",
        "timestamp": 1649424388
    },
    {
        "content": "<p>I think it will be hard to speculate all the different ways this chapter <em>could</em> be written</p>",
        "id": 278303495,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649424436
    },
    {
        "content": "<p>And of course we can</p>",
        "id": 278303505,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649424442
    },
    {
        "content": "<p>(are still folks still reading?)</p>",
        "id": 278303510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424444
    },
    {
        "content": "<p>But just remember that is a rabbit hole</p>",
        "id": 278303526,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649424450
    },
    {
        "content": "<p>1) yes, maybe 2) idk 3) yes 4) follow up</p>",
        "id": 278303544,
        "sender_full_name": "oli",
        "timestamp": 1649424467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278303510\">said</a>:</p>\n<blockquote>\n<p>(are still folks still reading?)</p>\n</blockquote>\n<p>It looks like everyone's done</p>",
        "id": 278303564,
        "sender_full_name": "eholk",
        "timestamp": 1649424478
    },
    {
        "content": "<p>should we start with ...</p>\n<h1>Is everything in the current state clear and correct</h1>\n<p>then?</p>",
        "id": 278303676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424522
    },
    {
        "content": "<p>Yes, good start</p>",
        "id": 278303702,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649424532
    },
    {
        "content": "<p>the mention about type constructors seemed kinda confusing to me</p>",
        "id": 278303724,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649424542
    },
    {
        "content": "<p>its not really \"standard\" rust terminology</p>",
        "id": 278303742,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649424553
    },
    {
        "content": "<p>So, I really liked the way of showing variance for various types</p>",
        "id": 278303761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424559
    },
    {
        "content": "<p>1) would remove mentions of super traits and type constructors and some small language nits i should write down <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 278303762,
        "sender_full_name": "lcnr",
        "timestamp": 1649424563
    },
    {
        "content": "<p>(the big table)</p>",
        "id": 278303763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424563
    },
    {
        "content": "<p>but yes, the point that lcnr raised seems important to me</p>",
        "id": 278303801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424579
    },
    {
        "content": "<p>I agree super traits seemed a bit out of place</p>",
        "id": 278303824,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649424588
    },
    {
        "content": "<p>among other things, the subtrait relationship in Rust is actually <em>not</em> a subtyping relationship</p>",
        "id": 278303831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424590
    },
    {
        "content": "<p>i.e., <code>&amp;dyn Eq &lt;: &amp;dyn PartialEq</code> does not hold and never will</p>",
        "id": 278303898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424606
    },
    {
        "content": "<p>and the reason for this is maybe relevant to the chapter?</p>",
        "id": 278303936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424620
    },
    {
        "content": "<p>the basic invariant for subtyping is: the same bits of memory that have type T can be reinterpreted as having type U and nothing goes wrong</p>",
        "id": 278303979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424643
    },
    {
        "content": "<p>maybe \"nothing goes wrong\" is too vague: \"and all the operations that T, U both support behave in the same way\"</p>",
        "id": 278304075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424689
    },
    {
        "content": "<p>I think replacing the subtrait example with a simple \"the source of all subtyping in Rust is lifetimes\"</p>",
        "id": 278304101,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649424702
    },
    {
        "content": "<p>this is currently true, it will stop being true</p>",
        "id": 278304129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424718
    },
    {
        "content": "<p>I think we focus on what is currently true here :)</p>",
        "id": 278304218,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649424751
    },
    {
        "content": "<p>( quantification over types / where-clauses )</p>",
        "id": 278304235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424759
    },
    {
        "content": "<p>ok</p>",
        "id": 278304237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424759
    },
    {
        "content": "<p>One of the statements of the Rustonomicon is that it's expected to be out of date in future, so I think we should tackle what's currently true</p>",
        "id": 278304244,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649424765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278303724\">said</a>:</p>\n<blockquote>\n<p>the mention about type constructors seemed kinda confusing to me</p>\n</blockquote>\n<p>I agree, I took it from the existing doc. I tried to rewrite it but I couldn't figure out a good way to phrase the concept</p>",
        "id": 278304294,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649424798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278303898\">said</a>:</p>\n<blockquote>\n<p>i.e., <code>&amp;dyn Eq &lt;: &amp;dyn PartialEq</code> does not hold and never will</p>\n</blockquote>\n<p>I just wanted to finish this up: a <code>&amp;dyn Eq</code> has a vtable for <code>Eq</code>, but a <code>&amp;dyn PartialEq</code> has a <code>PartialEq</code> vtable, and those are not necessarily compatible (in e.g. java they are, because they stick to linear inheritance)</p>",
        "id": 278304296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424800
    },
    {
        "content": "<p>this is the distinction between <em>subtyping</em> and <em>coercions</em></p>",
        "id": 278304326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424823
    },
    {
        "content": "<p>which I imagine may be something rustonomican readers are a bit confused about</p>",
        "id": 278304335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424831
    },
    {
        "content": "<p>because they feel very similar to users</p>",
        "id": 278304339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424834
    },
    {
        "content": "<p>(i.e., coercions take one value and convert it to another one that is conceptually a \"subtype\" but where the actual bits may need to be changed)</p>",
        "id": 278304415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278304326\">said</a>:</p>\n<blockquote>\n<p>this is the distinction between <em>subtyping</em> and <em>coercions</em></p>\n</blockquote>\n<p>Ah, I was wondering about that. I was like \"the compiler could take a vtable for <code>Eq</code> and generate one for <code>PartialEq</code> and if that happened transparently it would look like subtyping.</p>",
        "id": 278304440,
        "sender_full_name": "eholk",
        "timestamp": 1649424878
    },
    {
        "content": "<p>So, is worth adding a small blurb about coercions (specifically that it's different and not to be confused)</p>",
        "id": 278304450,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649424883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421986\">@eholk</span> the reason we draw a distinction is that subtyping applies to types that may be behind pointers etc, and so we can't necessarily go in and (e.g.) swap the vtable</p>",
        "id": 278304509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424911
    },
    {
        "content": "<p>Ah, that makes sense. Thanks!</p>",
        "id": 278304544,
        "sender_full_name": "eholk",
        "timestamp": 1649424930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"396593\">@Conrad Ludgate</span> (does what I wrote make sense to you?)</p>",
        "id": 278304560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424938
    },
    {
        "content": "<p>Okay, so other than the subtrait and type constructor bits, anything else not clear?</p>",
        "id": 278304587,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649424957
    },
    {
        "content": "<p>(or correct)</p>",
        "id": 278304593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649424962
    },
    {
        "content": "<p>I'm curious about using the term <em>subtype</em> applies to lifetimes</p>",
        "id": 278304642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424970
    },
    {
        "content": "<p>it doesn't bother me, to be hoenst, though it's a bit of \"abuse of notation\"</p>",
        "id": 278304652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649424978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278304560\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"396593\">Conrad Ludgate</span> (does what I wrote make sense to you?)</p>\n</blockquote>\n<p>Yes I think so</p>",
        "id": 278304705,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649425005
    },
    {
        "content": "<blockquote>\n<p>Let's define that Sub is a subtype of Super (we'll be using the notation Sub: Super throughout this chapter).</p>\n</blockquote>\n<p>Yeah, I missed this</p>",
        "id": 278304711,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649425010
    },
    {
        "content": "<p>I wrote somewhere that, the way I think about it, is that there are two things:</p>\n<ul>\n<li>subtype/sublifetime (written <code>&lt;:</code>) </li>\n<li>outlives (written <code>:</code>)</li>\n</ul>",
        "id": 278304714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425011
    },
    {
        "content": "<p>it so happens that <code>'a &lt;: 'b</code> iff <code>'a: 'b</code></p>",
        "id": 278304737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425029
    },
    {
        "content": "<p>there were also comments on the PR</p>",
        "id": 278304760,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649425040
    },
    {
        "content": "<p>well, you can think of it different ways</p>",
        "id": 278304761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425041
    },
    {
        "content": "<p>I usually say the opposite, actually</p>",
        "id": 278304765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425045
    },
    {
        "content": "<p>I do think we shouldn't mix the two</p>",
        "id": 278304771,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649425048
    },
    {
        "content": "<p>Yes, A lot of other people had issues with the syntax I used too. I am planning on switching to the <code>&lt;:</code> form for subtypes</p>",
        "id": 278304781,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649425055
    },
    {
        "content": "<p>since, as you said, it's kind of the opposite</p>",
        "id": 278304782,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649425056
    },
    {
        "content": "<p><code>'a &lt;: 'b iff 'b: 'a</code> (and so <code>&amp;</code> is contravariant)</p>",
        "id": 278304791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425061
    },
    {
        "content": "<p>this is something that changes in polonius</p>",
        "id": 278304816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425078
    },
    {
        "content": "<p>because we interpret <code>'a</code> as a \"set of places that are aliased\" and not a \"region of code\"</p>",
        "id": 278304869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425089
    },
    {
        "content": "<p>Can <em>lifetimes</em> by subtyped? Or only types?</p>",
        "id": 278304885,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649425095
    },
    {
        "content": "<p>I think it's kind of useful to say that they can</p>",
        "id": 278304921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425111
    },
    {
        "content": "<p>precisely for the reason that <span class=\"user-mention\" data-user-id=\"396593\">@Conrad Ludgate</span> mentioned in the PR</p>",
        "id": 278304935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425118
    },
    {
        "content": "<p>I agree tbh</p>",
        "id": 278304945,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649425123
    },
    {
        "content": "<p>but I know we've been pedantic before</p>",
        "id": 278304950,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649425130
    },
    {
        "content": "<p>it lets you talk about <code>&amp;</code> as a \"type constructor\" that takes two arguments, a lifetime + a type</p>",
        "id": 278304962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425137
    },
    {
        "content": "<p>it might be nice to stop saying subtype</p>",
        "id": 278304977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425146
    },
    {
        "content": "<p>and start saying subset</p>",
        "id": 278304982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425149
    },
    {
        "content": "<p><em>A</em> is a subtype of <em>B</em> if the set <code>values(A)</code> is a subset of <code>values(B)</code>, where <code>values(T)</code> is \"the (infinite) set of values of a given given type T\"</p>",
        "id": 278305037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425182
    },
    {
        "content": "<p>(heh, I was just reading a thesis about this very concept...)</p>",
        "id": 278305057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425192
    },
    {
        "content": "<p>in that way, it applies equally to types/lifetimes</p>",
        "id": 278305114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425204
    },
    {
        "content": "<p>I think for this PR, we stick with subtype</p>",
        "id": 278305126,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649425210
    },
    {
        "content": "<p>although as I said, then you want lifetimes (if they are regions of code) to be contravariant</p>",
        "id": 278305140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425218
    },
    {
        "content": "<p>(because static is a \"superset\" of all other code regions)</p>",
        "id": 278305174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278305037\">said</a>:</p>\n<blockquote>\n<p><em>A</em> is a subtype of <em>B</em> if the set <code>values(A)</code> is a subset of <code>values(B)</code>, where <code>values(T)</code> is \"the (infinite) set of values of a given given type T\"</p>\n</blockquote>\n<p>This is always the version of things that felt the most natural to me fwiw</p>",
        "id": 278305183,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1649425242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278305126\">said</a>:</p>\n<blockquote>\n<p>I think for this PR, we stick with subtype</p>\n</blockquote>\n<p>because we want to land this, or because it would be better for rustonomican to subtype?</p>",
        "id": 278305284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425293
    },
    {
        "content": "<p>both?</p>",
        "id": 278305310,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649425306
    },
    {
        "content": "<p>that's what I'm asking, I guess :)</p>",
        "id": 278305334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425316
    },
    {
        "content": "<p>I think I agree with the first part, not sure about the second part</p>",
        "id": 278305348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425322
    },
    {
        "content": "<p>if and when we \"formalize\" this a bit more, it might make sense to update it</p>",
        "id": 278305411,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649425340
    },
    {
        "content": "<p>I prefer not to use subtype for lifetimes since they're not types, and would like to have a generic term for ordering over things which includes both subtyping and the outlives relation</p>",
        "id": 278305436,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649425359
    },
    {
        "content": "<p>outlives is categorically different</p>",
        "id": 278305452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425368
    },
    {
        "content": "<p>in particular, I think there is a useful definition of <code>T1 outlives T2</code> that is distinct from <code>T1 &lt;: T2</code></p>",
        "id": 278305488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425386
    },
    {
        "content": "<p>(and it's crucial to the new subtyping algorithm I was talking about, in fact)</p>",
        "id": 278305502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425397
    },
    {
        "content": "<p>one advantage I see to using <em>subtype</em> for lifetimes---</p>",
        "id": 278305534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425410
    },
    {
        "content": "<p>I meant outlives over lifetimes, not types, but probably that's even more reason to be precise</p>",
        "id": 278305544,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649425417
    },
    {
        "content": "<p>we can \"hide\" the contravariance this way, by saying <code>'a &lt;: 'b</code> if <code>'a: 'b</code>, even though <code>'a</code> (e.g., <code>'static</code>) is bigger and hence not a \"sub\"</p>",
        "id": 278305679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425478
    },
    {
        "content": "<p>which is what the PR does now</p>",
        "id": 278305686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425482
    },
    {
        "content": "<p>in saying that lifetimes are covariant</p>",
        "id": 278305700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425488
    },
    {
        "content": "<p>this is forwards compatible with the polonius interpretation, which I think is strictly better</p>",
        "id": 278305722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425499
    },
    {
        "content": "<p>anyway, nick, would you just say \"sublifetime\" ? what term woudl you use for \"subtype\" that applies to types/lifetimes equally?</p>",
        "id": 278305821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425533
    },
    {
        "content": "<p>I think just 'an ordering'?</p>",
        "id": 278305866,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649425560
    },
    {
        "content": "<p>But I don't know of a good word for 'is less than' that works for both :-|</p>",
        "id": 278306043,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649425616
    },
    {
        "content": "<p>besides \"less than\" of course :)</p>",
        "id": 278306082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425630
    },
    {
        "content": "<p>I do worry about deviating from \"subtyping\" terminology</p>",
        "id": 278306091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425636
    },
    {
        "content": "<p>I think people have heard it, even if they don't have a firm idea what it means</p>",
        "id": 278306105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425644
    },
    {
        "content": "<p>I guess I would say this:</p>\n<p>I think the current chapter reads pretty well, I'd be inclined to land it and maybe open an issue to explore possible alternatives if someone feels motivated.</p>",
        "id": 278306250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425689
    },
    {
        "content": "<p>I'm fine with that</p>",
        "id": 278306278,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649425700
    },
    {
        "content": "<p>(under the condition of removing the subtrait bit)</p>",
        "id": 278306305,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649425710
    },
    {
        "content": "<p>yes</p>",
        "id": 278306314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425714
    },
    {
        "content": "<p>it might also be \"good enough\" to just put a footnote  like</p>",
        "id": 278306319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425716
    },
    {
        "content": "<p>\"in an abuse of notation, we say a lifetime a is a subtype of b, though it woudl be more precise to say \"sublifetime\"'</p>",
        "id": 278306362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425734
    },
    {
        "content": "<p>Yeah, I'm not sure how essential it is to be super formal here, but I worry a bit about making people more confused about the distinction between types and lifetimes</p>",
        "id": 278306407,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649425749
    },
    {
        "content": "<p>(except that, as I noted, 'a being a subtype of 'b actually means that 'b is a <em>sublifetime</em> of 'a, if you say that <code>&amp;'a T</code> is covariant with respect to <code>'a</code>)</p>",
        "id": 278306447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278306250\">said</a>:</p>\n<blockquote>\n<p>I guess I would say this:</p>\n<p>I think the current chapter reads pretty well, I'd be inclined to land it and maybe open an issue to explore possible alternatives if someone feels motivated.</p>\n</blockquote>\n<p>+1</p>",
        "id": 278306457,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649425765
    },
    {
        "content": "<p>(want to still do a review with nits, so i would prefer to wait until sat/monday)</p>",
        "id": 278306512,
        "sender_full_name": "lcnr",
        "timestamp": 1649425786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278305821\">said</a>:</p>\n<blockquote>\n<p>would you just say \"sublifetime\" ? what term woudl you use for \"subtype\" that applies to types/lifetimes equally?</p>\n</blockquote>\n<p>Would it work to say subtyping is a relation that applies to types, but defining subtyping relies on a sublifetime relation?</p>",
        "id": 278306517,
        "sender_full_name": "eholk",
        "timestamp": 1649425789
    },
    {
        "content": "<p>alternatively i can just open a follup pr</p>",
        "id": 278306531,
        "sender_full_name": "lcnr",
        "timestamp": 1649425798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421986\">eholk</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278306517\">said</a>:</p>\n<blockquote>\n<p>Would it work to say subtyping is a relation that applies to types, but defining subtyping relies on a sublifetime relation?</p>\n</blockquote>\n<p>Maybe? I'd say if <span class=\"user-mention\" data-user-id=\"396593\">@Conrad Ludgate</span> wants to try it, it's fine with me, but it's ok to kick these explorations to follow-up work. I can't tell if it's just more words that will be confusing or if it will help sharpen people's understanding. (I'm not the target audience, clearly.)</p>",
        "id": 278306736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425870
    },
    {
        "content": "<p>(On that point, <span class=\"user-mention\" data-user-id=\"396593\">@Conrad Ludgate</span>, do you see what I'm saying about contravariance and the \"flip\" that is occuring here?)</p>",
        "id": 278306778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425890
    },
    {
        "content": "<p>I do think we could just say something like \"we say that a lifetime parameter is covariant if <code>'a: 'b</code> means that <code>T&lt;'a&gt;</code> is a subtype of <code>T&lt;'b&gt;</code>\"</p>",
        "id": 278306837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649425914
    },
    {
        "content": "<p>That makes sense. I think the chapter as it is is pretty good so I'd say land it and if we come up with better terminology in the future we can do another PR</p>",
        "id": 278306934,
        "sender_full_name": "eholk",
        "timestamp": 1649425937
    },
    {
        "content": "<p>I do worry that it's already too complex as is</p>",
        "id": 278306974,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649425955
    },
    {
        "content": "<p>Given its a chapter on variance, I don't think we need to shy away from being explicit about the relations and the relations between relations</p>",
        "id": 278307029,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649425976
    },
    {
        "content": "<p>I think the crisper people's understanding of outlives and sub-lifetimes, the better they'll understand the variance concepts</p>",
        "id": 278307169,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1649426041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278306736\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"421986\">eholk</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278306517\">said</a>:</p>\n<blockquote>\n<p>Would it work to say subtyping is a relation that applies to types, but defining subtyping relies on a sublifetime relation?</p>\n</blockquote>\n<p>Maybe? I'd say if <span class=\"user-mention silent\" data-user-id=\"396593\">Conrad Ludgate</span> wants to try it, it's fine with me, but it's ok to kick these explorations to follow-up work. I can't tell if it's just more words that will be confusing or if it will help sharpen people's understanding. (I'm not the target audience, clearly.)</p>\n</blockquote>\n<p>I can play around with that idea, but I think it can be deferred as a follow up</p>",
        "id": 278307263,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649426065
    },
    {
        "content": "<p>it seems like we reached a general consensus on this point-- i.e., it might be worth trying to be more precise, but we should follow up on it</p>",
        "id": 278307352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426103
    },
    {
        "content": "<p>sounds good to me</p>",
        "id": 278307421,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649426139
    },
    {
        "content": "<p>anything else?</p>",
        "id": 278307431,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649426146
    },
    {
        "content": "<p>that was my main takeaway</p>",
        "id": 278307449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426156
    },
    {
        "content": "<p>the only other thought I had was that maybe we could start by showing subtyping with a simpler example</p>",
        "id": 278307545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426189
    },
    {
        "content": "<p>but as I think about it, I'm not sure how much simpler it can get</p>",
        "id": 278307572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426202
    },
    {
        "content": "<p>I guess something like this</p>",
        "id": 278307596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426210
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">maybe_warn</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"sc\">'/'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"s\">\"invalid input\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278307675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426244
    },
    {
        "content": "<p>why is that legal? because <code>&amp;'static str &lt;: &amp;'a str</code></p>",
        "id": 278307716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426262
    },
    {
        "content": "<p>hmm</p>",
        "id": 278307931,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649426343
    },
    {
        "content": "<p>not a bad example]</p>",
        "id": 278307954,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649426352
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"awd\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is maybe more straight to the point</p>",
        "id": 278307958,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649426352
    },
    {
        "content": "<p>yes; I wanted something that was kind of \"semi-plausible\"</p>",
        "id": 278307995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426371
    },
    {
        "content": "<p>but in any case trying to focus in on \"one reference being upcast\"</p>",
        "id": 278308024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426387
    },
    {
        "content": "<p>huh, if you have <code>fn foo&lt;'a&gt;() -&gt; &amp;'a str { ... }</code>, is there any way for <code>'a</code> to be something <em>other</em> than <code>'static</code>?</p>",
        "id": 278308176,
        "sender_full_name": "eholk",
        "timestamp": 1649426429
    },
    {
        "content": "<p><code>'a</code> can be anything</p>",
        "id": 278308198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426441
    },
    {
        "content": "<p>this can be important</p>",
        "id": 278308218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426451
    },
    {
        "content": "<p>e.g.</p>",
        "id": 278308220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426452
    },
    {
        "content": "<p>i was a bit surprised it could even compile- i was under the impression we forbade those kind of functions were the <code>'a</code> isnt conceptually in the \"Impl header\" of the <code>Fn*</code> traits</p>",
        "id": 278308247,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649426464
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Cell</span>:<span class=\"nc\">new</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278308256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426467
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278308247\">said</a>:</p>\n<blockquote>\n<p>i was a bit surprised it could even compile- i was under the impression we forbade those kind of functions were the <code>'a</code> isnt conceptually in the \"Impl header\" of the <code>Fn*</code> traits</p>\n</blockquote>\n<p>it's not forbidden, but <code>'a</code> is early bound (part of the struct)</p>",
        "id": 278308322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426500
    },
    {
        "content": "<p>ah</p>",
        "id": 278308333,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649426506
    },
    {
        "content": "<p>that explains it then :)</p>",
        "id": 278308351,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649426515
    },
    {
        "content": "<p>I think for this PR, it might make sense to stick mostly to what is in the PR already, without adding more</p>",
        "id": 278308413,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649426526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278308256\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Cell</span>:<span class=\"nc\">new</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>key point here: invariance means that the caller may not want <code>'a</code> to be <code>'static</code></p>",
        "id": 278308416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426527
    },
    {
        "content": "<p>And any followup can be done to simplify?</p>",
        "id": 278308428,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649426535
    },
    {
        "content": "<p>definitely agree with that, I think at this point we are maybe brainstorming possible follow-up points :)</p>",
        "id": 278308550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426591
    },
    {
        "content": "<p>very nice work, <span class=\"user-mention\" data-user-id=\"396593\">@Conrad Ludgate</span></p>",
        "id": 278308589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426608
    },
    {
        "content": "<p>So, what were the outcomes of what we wanted to change before merging this in?</p>",
        "id": 278308598,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649426612
    },
    {
        "content": "<ol>\n<li>Remove the supertraits explanation</li>\n</ol>",
        "id": 278308618,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649426623
    },
    {
        "content": "<ol start=\"2\">\n<li>Update the subtyping syntax to be <code>&lt;:</code></li>\n</ol>",
        "id": 278308640,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649426634
    },
    {
        "content": "<p>remove subtrait example, and probably type constructors</p>",
        "id": 278308645,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649426637
    },
    {
        "content": "<p>and probably update syntax to be <code>&lt;:</code></p>",
        "id": 278308705,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649426648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278308416\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278308256\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Cell</span>:<span class=\"nc\">new</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>key point here: invariance means that the caller may not want <code>'a</code> to be <code>'static</code></p>\n</blockquote>\n<p>Right, so <code>'a</code> can be anything, but if you have <code>-&gt; &amp;'a str</code>, the only lifetime you can use in the body that's valid for all lifetimes is <code>'static</code>.</p>",
        "id": 278308731,
        "sender_full_name": "eholk",
        "timestamp": 1649426659
    },
    {
        "content": "<p>You can use box leak on a type that lives only for 'a</p>",
        "id": 278308789,
        "sender_full_name": "oli",
        "timestamp": 1649426686
    },
    {
        "content": "<p>Then you can't possibly have a static lifetime</p>",
        "id": 278308819,
        "sender_full_name": "oli",
        "timestamp": 1649426700
    },
    {
        "content": "<p>Box leaking returns a static lifetime</p>",
        "id": 278308861,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649426715
    },
    {
        "content": "<p>With <code>Option</code>, you can return <code>None</code>, which doesn't contain a reference, so that's okay</p>",
        "id": 278308868,
        "sender_full_name": "eholk",
        "timestamp": 1649426717
    },
    {
        "content": "<p>Box::leak is <code>fn leak&lt;'a&gt;(BOx&lt;T&gt;) -&gt; &amp;'a mut T where T: 'a</code></p>",
        "id": 278308910,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649426741
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.leak\">https://doc.rust-lang.org/std/boxed/struct.Box.html#method.leak</a></p>",
        "id": 278308915,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649426743
    },
    {
        "content": "<p>Oh, that's news to me, although isn't it still technically true since that box's <code>'a</code> can just be <code>'static</code> too?</p>",
        "id": 278309054,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649426795
    },
    {
        "content": "<p>(the <code>T: 'a</code> being from implied bounds on <code>&amp;'a mut T</code>)</p>",
        "id": 278309057,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649426797
    },
    {
        "content": "<p>So for <code>Box::leak</code>, it seems like you leak the box, which essentially makes it <code>'static</code>, and then you can return any lifetime you want from <code>Box::leak</code> since <code>'static: 'a</code></p>",
        "id": 278309278,
        "sender_full_name": "eholk",
        "timestamp": 1649426888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"396593\">@Conrad Ludgate</span> your list sounds right, I'm trying to remember if there was a 3rd \"must change\" thing</p>",
        "id": 278309296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649426897
    },
    {
        "content": "<p>If you box something with lifetimes, you can never get 'static out of the leak</p>",
        "id": 278309355,
        "sender_full_name": "oli",
        "timestamp": 1649426928
    },
    {
        "content": "<p><code>Box::leak(Box::new(&amp;local_variable))</code></p>",
        "id": 278309394,
        "sender_full_name": "oli",
        "timestamp": 1649426946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-04-08/near/278309355\">said</a>:</p>\n<blockquote>\n<p>If you box something with lifetimes, you can never get 'static out of the leak</p>\n</blockquote>\n<p>Ah, good point</p>",
        "id": 278309406,
        "sender_full_name": "eholk",
        "timestamp": 1649426953
    },
    {
        "content": "<p>oh, discuss coercion? I think that's follow-up</p>",
        "id": 278309587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649427029
    },
    {
        "content": "<p>there _is_ a coercion section in nomicon but its not super fleshed out</p>",
        "id": 278309603,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649427043
    },
    {
        "content": "<p>Right, because there <code>T</code> is <code>&amp;'b LocalVariable</code>, and <code>&amp;'static &amp;'b LocalVariable</code> doesn't make since for the outer reference to have a longer lifetime than the inner one</p>",
        "id": 278309640,
        "sender_full_name": "eholk",
        "timestamp": 1649427067
    },
    {
        "content": "<p>so follow-up items:</p>\n<ul>\n<li>consider simplifying the opening example</li>\n<li>coercion</li>\n<li>consider beinging more precise about subtyping vs outlives etc</li>\n</ul>",
        "id": 278309733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649427105
    },
    {
        "content": "<p>sounds good</p>",
        "id": 278310303,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649427352
    },
    {
        "content": "<p>I think we can probably end the meeting then?</p>",
        "id": 278310349,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649427362
    },
    {
        "content": "<p>Thank you everyone for taking the time to deep dive this PR :) I'll get started on the necessary changes this weekend and then I'll open up a separate issue to address some of the new topics</p>",
        "id": 278310395,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1649427377
    },
    {
        "content": "<p>Thanks all for coming. Especially <span class=\"user-mention\" data-user-id=\"396593\">@Conrad Ludgate</span>! (And thanks for writing this!)</p>",
        "id": 278310409,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649427382
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> and <span class=\"user-mention\" data-user-id=\"396593\">@Conrad Ludgate</span>!</p>",
        "id": 278310515,
        "sender_full_name": "eholk",
        "timestamp": 1649427425
    },
    {
        "content": "<p>(and everyone else)</p>",
        "id": 278310524,
        "sender_full_name": "eholk",
        "timestamp": 1649427431
    },
    {
        "content": "<p>also meta, I'm <em>really</em> liking these deep dives</p>",
        "id": 278310540,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649427441
    },
    {
        "content": "<p>I like that we're switching up we talk about (and how we talk about it)</p>",
        "id": 278310574,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649427461
    },
    {
        "content": "<p>Reminder: Next week is Lazy TAIT walkthrough, led by <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 278311088,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649427677
    },
    {
        "content": "<p>exciting</p>",
        "id": 278311692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649427907
    },
    {
        "content": "<p>thanks everyone</p>",
        "id": 278311702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1649427910
    },
    {
        "content": "<p>I just realized Friday is good Friday, which is a holiday here. I won't be able to drive a meeting. Can we swap with the one two weeks later?</p>",
        "id": 278443038,
        "sender_full_name": "oli",
        "timestamp": 1649556990
    },
    {
        "content": "<p>That's probably fine</p>",
        "id": 278443101,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649557083
    },
    {
        "content": "<p>That would be chalkify planning</p>",
        "id": 278443107,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649557094
    }
]