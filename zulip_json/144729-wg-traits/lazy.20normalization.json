[
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, how's the chalk integration going? I'm eager for lazy normalisation parts to get integrated, so work can begin in fixing type aliases :-)</p>",
        "id": 150744046,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543799745
    },
    {
        "content": "<p>So I spent <em>some</em> time today -- not as much as I would like =) -- digging into lazy normalization as promised. I still feel like I don't have a \"crisp\" answer to what \"the core problem\" is when it comes to const generics etc. But it quickly became clear that a useful thing would be to just try to document and layout <strong>how the existing normalization code works</strong>. So I've started working on that, taking some notes in <a href=\"https://paper.dropbox.com/doc/Lazy-normalization--AYVUCdPTs820qxCpfV0QQFJFAg-Ryv4YfpIcGAl6R3ZtWrWs\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Lazy-normalization--AYVUCdPTs820qxCpfV0QQFJFAg-Ryv4YfpIcGAl6R3ZtWrWs\">this dropbox paper over here</a> (those aren't that complete yet).</p>\n<p>I was thinking I will put some more effort into that this week and then maybe try to schedule a public presentation to talk it over. Ideally, I'll have time to sketch out how associated types are handled, and then some time to sketch out to show what happens with constants and where we (potentially?) run into trouble and what we might do to fix it.</p>",
        "id": 159453334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551211380
    },
    {
        "content": "<p>OK, I've been digging more into this.</p>",
        "id": 160321833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552076237
    },
    {
        "content": "<p>I'm going to drop a few live notes here.</p>",
        "id": 160321837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552076242
    },
    {
        "content": "<p>OK, so, I'm a bit confused still. I'm trying to trace out the cycle. I've confirmed that this is the test case</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()],</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160322627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552076837
    },
    {
        "content": "<p>however, rustc as currently implemented doesn't cause a cycle because we don't have the 100% correct setup</p>",
        "id": 160322777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552076971
    },
    {
        "content": "<p>in particular, the parent generics of the <code>size_of::&lt;T&gt;</code> \"anonymous constant\" (<code>AnonConst</code>) are currently not linked</p>",
        "id": 160322788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552076982
    },
    {
        "content": "<p>but they <em>should be</em> the <code>foo</code> function itself</p>",
        "id": 160322796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552076988
    },
    {
        "content": "<p>that said, when I try to trace through what will happen, I don't <em>yet</em> see the cycle</p>",
        "id": 160323058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552077194
    },
    {
        "content": "<p>/me tempted to give it a try</p>",
        "id": 160323081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552077217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I have a question for you -- how hard do you think it would be to rejuvenate your old branch that uses the correct parents of constants for generics (and which was hitting cycle errors)?</p>",
        "id": 163502406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555445250
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/59409\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59409\">#59409</a></p>",
        "id": 163537109,
        "sender_full_name": "eddyb",
        "timestamp": 1555485190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes, it's literally adding <code>| Node::AnonConst(_)</code> to the first arm of the first <code>match</code> in <code>generics_of</code>, that's what \"correct parents\" amounts to</p>",
        "id": 163537175,
        "sender_full_name": "eddyb",
        "timestamp": 1555485249
    },
    {
        "content": "<p>anyway, it can't even build libcore. I have a weirder version that idk how to update, and which is probably unsound, that left <code>ParamEnv</code>s kind of \"less eagerly normalized\"</p>",
        "id": 163537183,
        "sender_full_name": "eddyb",
        "timestamp": 1555485287
    },
    {
        "content": "<p>but that <em>still</em> breaks, because <code>rustc_typeck::check</code> <em>really</em> wants a normalized <code>ParamEnv</code>, just in some tests instead of libcore</p>",
        "id": 163537207,
        "sender_full_name": "eddyb",
        "timestamp": 1555485323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ok -- is that really all I have to do to observe the problem? in that case, I'll take some time on friday to investigate, I feel like I have a hunch of how to do things but I wanted to see the errors in action. If it's easy for you to do, having a branch I can start from would be great (preferably not the version doing the hacky, unsound thing)</p>",
        "id": 163545374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555493615
    },
    {
        "content": "<p>yes!</p>",
        "id": 163545379,
        "sender_full_name": "eddyb",
        "timestamp": 1555493626
    },
    {
        "content": "<p>the entire compiler supports all of the usecases, except for the cycles caused by lazy normalization</p>",
        "id": 163545429,
        "sender_full_name": "eddyb",
        "timestamp": 1555493645
    },
    {
        "content": "<p>and that missing bit is basically commented out as a hack :P</p>",
        "id": 163545450,
        "sender_full_name": "eddyb",
        "timestamp": 1555493683
    },
    {
        "content": "<p>(except we haven't actually added it as a comment yet)</p>",
        "id": 163545460,
        "sender_full_name": "eddyb",
        "timestamp": 1555493691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ok so I applied this patch</p>\n<div class=\"codehilite\"><pre><span></span>modified   src/librustc_typeck/collect.rs\n<span class=\"gu\">@@ -888,6 +888,7 @@ fn generics_of&lt;&#39;a, &#39;tcx&gt;(tcx: TyCtxt&lt;&#39;a, &#39;tcx, &#39;tcx&gt;, def_id: DefId) -&gt; &amp;&#39;tcx ty</span>\n\n     let node = tcx.hir().get_by_hir_id(hir_id);\n     let parent_def_id = match node {\n<span class=\"gi\">+        Node::AnonConst(_) |</span>\n         Node::ImplItem(_) | Node::TraitItem(_) | Node::Variant(_) |\n         Node::Ctor(..) | Node::Field(_) =&gt; {\n             let parent_id = tcx.hir().get_parent_item(hir_id);\n</pre></div>\n\n\n<p>but I'm getting unwrap errors now from [this code in project.rs]:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">lift_to_global</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">substs</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>presumably because the <code>substs</code> now includes some details from the surrounding context, and there are inference variables in there.</p>",
        "id": 163750198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555695263
    },
    {
        "content": "<p>I'm not sure if you had an intended patch there or if I am, indeed, looking at (a facet of) the problem =)</p>",
        "id": 163750213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555695280
    },
    {
        "content": "<p>ugh</p>",
        "id": 163852930,
        "sender_full_name": "eddyb",
        "timestamp": 1555855314
    },
    {
        "content": "<p>that stuff is supposed to be resilient to inference variables</p>",
        "id": 163852974,
        "sender_full_name": "eddyb",
        "timestamp": 1555855328
    },
    {
        "content": "<p>I wonder if <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s PR where he fixed some of this stuff went through</p>",
        "id": 163852976,
        "sender_full_name": "eddyb",
        "timestamp": 1555855344
    },
    {
        "content": "<p>basically it's supposed to attempt to evaluate... well</p>",
        "id": 163852981,
        "sender_full_name": "eddyb",
        "timestamp": 1555855378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think actually, the problem is the <code>const_eval</code> query is not canonicalizing, and we needed your help to figure out how to do that :P</p>",
        "id": 163852992,
        "sender_full_name": "eddyb",
        "timestamp": 1555855410
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/59369#discussion_r269151886\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59369#discussion_r269151886\">https://github.com/rust-lang/rust/pull/59369#discussion_r269151886</a></p>",
        "id": 163853042,
        "sender_full_name": "eddyb",
        "timestamp": 1555855466
    },
    {
        "content": "<p>there you go :D</p>",
        "id": 163853043,
        "sender_full_name": "eddyb",
        "timestamp": 1555855468
    },
    {
        "content": "<p>but that's the PR that tries to fix some stuff</p>",
        "id": 163853047,
        "sender_full_name": "eddyb",
        "timestamp": 1555855489
    },
    {
        "content": "<p>Hey is there a tracking issue for lazy normalization?</p>",
        "id": 164707676,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556803682
    },
    {
        "content": "<p>I'd like to downgrade priority on issue <a href=\"https://github.com/rust-lang/rust/issues/54940\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54940\">#54940</a>, which is blocked by Lazy Normalization, but I don't want to do the downgrade without at least making a link to a tracking issue</p>",
        "id": 164707724,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556803712
    },
    {
        "content": "<p>I settled on creating \"lazy normalization\" <a href=\"https://github.com/rust-lang/rust/issues/60471\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60471\">#60471</a></p>",
        "id": 164708100,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556804006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> to my knowledge no such issue existed - many, though not all, of the maybe related bugs likely have been at least semi-duplicate closed/cross-linked when I noticed; unfortunately at least to me lazy norm is somewhat nebulous, i.e., I don't actually know what it will / won't affect, so I was hesitant to label or otherwise strongly associate things</p>",
        "id": 164757714,
        "sender_full_name": "simulacrum",
        "timestamp": 1556843736
    },
    {
        "content": "<blockquote>\n<p>I think actually, the problem is the <code>const_eval</code> query is not canonicalizing, and we needed your help to figure out how to do that :P</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> so I was finally looking at this again, and basically I came to the same conclusion. This should be canonicalization</p>",
        "id": 165020041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177560
    },
    {
        "content": "<p>Reading <a href=\"https://github.com/rust-lang/rust/pull/59369#discussion_r269151886\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59369#discussion_r269151886\">these comments</a>, I guess I need to read that PR a bit</p>",
        "id": 165020125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177604
    },
    {
        "content": "<p>I could probably help you setup a canon path though</p>",
        "id": 165020140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177609
    }
]