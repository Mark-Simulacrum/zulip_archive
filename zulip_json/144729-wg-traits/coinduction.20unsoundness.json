[
    {
        "content": "<p>Well, in my quest to un-overengineer my fix, I managed to remove the recursion in <code>pursue_strand</code> (so no more <code>pursue_strand_recursively</code>)</p>",
        "id": 179476076,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572468880
    },
    {
        "content": "<p>whoops?</p>",
        "id": 179476079,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572468883
    },
    {
        "content": "<p>huh</p>",
        "id": 179479370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572470812
    },
    {
        "content": "<p>I don't really understand that :)</p>",
        "id": 179479377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572470817
    },
    {
        "content": "<p>(also, that \"whoops?\" was definitely sarcasm. Removing the recursion is great, I think)</p>",
        "id": 179484995,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572475334
    },
    {
        "content": "<p>I'm cleaning up some last bits of things and then I'll make a PR :)</p>",
        "id": 179485010,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572475350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/chalk/pull/272\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/272\">https://github.com/rust-lang/chalk/pull/272</a></p>",
        "id": 179486705,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572477001
    },
    {
        "content": "<blockquote>\n<p>(also, that \"whoops?\" was definitely sarcasm. Removing the recursion is great, I think)</p>\n</blockquote>\n<p>interesting. I'll take a look later!</p>",
        "id": 179559260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572545281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Was wondering if you have had time to peek at the PR? I'm actually curious if it will solve the infinite stack growth problem in rust-analyzer since it removes the recursion. If nothing else, it might help make it easier to debug?</p>",
        "id": 179638900,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572624393
    },
    {
        "content": "<p>I'm actually skimming it now</p>",
        "id": 179638923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572624409
    },
    {
        "content": "<p>Awesome</p>",
        "id": 179638957,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572624443
    },
    {
        "content": "<p>basically, you made us loop in <code>pursue_strand</code>, instead of having it recursively invoke itself?</p>",
        "id": 179639180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572624602
    },
    {
        "content": "<p>I don't think this will help with that particular problem</p>",
        "id": 179639251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572624626
    },
    {
        "content": "<p>Yep, basically</p>",
        "id": 179639510,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572624786
    },
    {
        "content": "<p>it may actually make it harder to debug :) --</p>",
        "id": 179639690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572624883
    },
    {
        "content": "<p>the problem there is that we are generating too many subgoals</p>",
        "id": 179639706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572624892
    },
    {
        "content": "<p>(maybe I'll try to look at that a bit more later on...)</p>",
        "id": 179639718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572624901
    },
    {
        "content": "<p>the stack growth part is just a side-effect from that</p>",
        "id": 179639749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572624918
    },
    {
        "content": "<p>Ah</p>",
        "id": 179639779,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572624943
    },
    {
        "content": "<p>I briefly skimmed over that conversation, but didn't look closely</p>",
        "id": 179639795,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572624954
    },
    {
        "content": "<p>Importantly, I don't think we lose any debug information with my changes though. Since I call the <code>pursue_strand</code> info_heading for each loop (whereas before it was each recursion)</p>",
        "id": 179639910,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572625029
    },
    {
        "content": "<blockquote>\n<p>basically, you made us loop in <code>pursue_strand</code>, instead of having it recursively invoke itself?</p>\n</blockquote>\n<p>good idea though :)</p>",
        "id": 179640050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572625105
    },
    {
        "content": "<p>Yeah, like I said, it sort of just fell out of the refactoring that I did to make what I was doing simpler</p>",
        "id": 179640099,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572625147
    },
    {
        "content": "<p>On a related note, I've been wanting to rework the logic that collects cyclic strands into a local vector</p>",
        "id": 179640133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572625172
    },
    {
        "content": "<p>so that they are collected instead in the table and we can return back a \"QuantumExceeded\"</p>",
        "id": 179640150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572625185
    },
    {
        "content": "<p>this basically gives the caller more of a chance to interrupt and say \"you know what, I don't care that much\"</p>",
        "id": 179640213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572625203
    },
    {
        "content": "<p>(i.e., it lets them implement \"fuel\")</p>",
        "id": 179640221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572625211
    },
    {
        "content": "<p>Yeah, I did a little bit of tinkering with that at the start, but it ended up being mostly unnecessary for this change</p>",
        "id": 179640337,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572625306
    },
    {
        "content": "<p>but definitely worth rethinking</p>",
        "id": 179640361,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572625322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Okay, I've updated the PR for your comments</p>",
        "id": 179894495,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572917638
    },
    {
        "content": "<p>I also went through and verified that no subgoals can be added when <code>allow_coinductive</code> is true</p>",
        "id": 179894550,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572917675
    },
    {
        "content": "<p>See my github comment, but basically they are really only added in <code>push_initial_strands_instantiated</code>, which I would sort of expect</p>",
        "id": 179894638,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572917767
    },
    {
        "content": "<p>Also, I've done some more cleanup/refactoring in my branch that removes <code>CanonicalStrand</code>s. Some of it touches this code, but I'll either just make a separate PR for those or just lump it in with the remove <code>CanonicalStrand</code> PR</p>",
        "id": 179894728,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572917903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> For your second suspicion, is that only in the context of coinduction or a more general problem?</p>",
        "id": 180068456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573068702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I apologize for radio silence, I'm not sure what's been going on last few weeks but I've been very short of time. I'm skimming your branch now. I am starting to wonder if it'd be a good idea to factor out some of the cleanup work and land it separately, just to help concentrate the diff</p>",
        "id": 180218617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573209661
    },
    {
        "content": "<p>The code which propagates the <code>CanonicalStrand</code> out of <code>ensure_answer</code> feels... I'm not sure. Similar-ish to what I initially had in mind, but somehow more complicated.</p>\n<p>Actually maybe it's a good idea for me to try to be more precise about what I had in mind, so I can compare it to what you have done. I've been doing this in my head but I've not written it down in detail.</p>",
        "id": 180218694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573209724
    },
    {
        "content": "<p>In short, what I had in mind was:</p>",
        "id": 180218725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573209806
    },
    {
        "content": "<p>When a cycle occurs, we would take the goal and add it to a list in the <code>Strand</code>, let's call it <code>delayed_coinductive_subgoals</code> -- this is basically what you did to start.</p>",
        "id": 180218732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573209827
    },
    {
        "content": "<p>But then, when the other subgoals have (successfully) completed, I was <em>imagining</em> we would produce an answer, but that answer would include the delayed subgoals as well (effectively like the old delayed literals)</p>",
        "id": 180218791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573209865
    },
    {
        "content": "<p>But when you incorporate the answer from another table, if it was delayed on yourself, you would remove that goal</p>",
        "id": 180218808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573209900
    },
    {
        "content": "<p>There would ultimately have to be a loop much like the one you've added</p>",
        "id": 180218819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573209911
    },
    {
        "content": "<p>i.e., <code>ensure_root_answer</code>, if it gets back an answer with a delayed goal, would have to do a search</p>",
        "id": 180218824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573209930
    },
    {
        "content": "<p>so maybe this code is kind of equivalent</p>",
        "id": 180218826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573209938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> No problem.</p>",
        "id": 180238359,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573226048
    },
    {
        "content": "<p>So, with your approach</p>",
        "id": 180238381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573226063
    },
    {
        "content": "<p>the difference is mostly in where we \"store\" the \"delayed subgoal\"</p>",
        "id": 180238428,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573226102
    },
    {
        "content": "<p>I think</p>",
        "id": 180238440,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573226113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> this morning while making breakfast I think I saw how to describe my proposal</p>",
        "id": 180238643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226247
    },
    {
        "content": "<p>but didn't haev time to write it down yet</p>",
        "id": 180238654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226250
    },
    {
        "content": "<p>I will try to do that after compiler meeting</p>",
        "id": 180238662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226259
    },
    {
        "content": "<p>But I was thinking, are youa ble to attend trait design meeting on Monday?</p>",
        "id": 180238669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226264
    },
    {
        "content": "<p>No problem</p>",
        "id": 180238670,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573226265
    },
    {
        "content": "<p>Maybe we should make this the topic?</p>",
        "id": 180238675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226270
    },
    {
        "content": "<p>(Which wouldn't preclude you messing about with it, just seems like a good thing to discuss more broadly)</p>",
        "id": 180238698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226281
    },
    {
        "content": "<p>I'd like to use those meetings to focus on work people are <em>doing</em> as much as possible, to help spread understanding</p>",
        "id": 180238752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226290
    },
    {
        "content": "<p>Sure, I'll be around</p>",
        "id": 180238757,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573226294
    },
    {
        "content": "<p>I'll also split out the refactoring-type stuff into a separate PR. That doesn't change anything</p>",
        "id": 180238794,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573226319
    },
    {
        "content": "<p>that would be great</p>",
        "id": 180238818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226334
    },
    {
        "content": "<p>As you can see, I also have the changes to remove <code>CanonicalStrand</code> ready</p>",
        "id": 180238866,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573226358
    },
    {
        "content": "<p>(and have been working on the \"fuel friendly\" issue)</p>",
        "id": 180238886,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573226370
    },
    {
        "content": "<p>the short version of what I had in mind is:</p>\n<ul>\n<li>\n<p>extend <code>Answer</code> with \"deferred subclauses\" -- when you get a coinductive cycle, you push it in there<br>\n    * unless the cycle is to yourself -- then you can just discard it</p>\n</li>\n<li>\n<p>when incorporating an answer, we inline the deferred subclauses into our own list</p>\n</li>\n<li>by the time we reach root, all should be cleared<br>\n    * but if you then query a subtable, and the answer has deferred subclauses, we need to \"resume\" that work, but it should be quick, and we can overwrite the answer in place</li>\n</ul>\n<p>ok, have to go back to other meeting ;)</p>",
        "id": 180238986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226410
    },
    {
        "content": "<p>maybe that makes sense to you</p>",
        "id": 180238992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226414
    },
    {
        "content": "<p>Yes, that was mostly the sense I was getting, so that makes sense</p>",
        "id": 180239058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573226450
    },
    {
        "content": "<p>I'll try it</p>",
        "id": 180239063,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573226453
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span>* but if you then query a subtable, and the answer has deferred subclauses, we need to &quot;resume&quot; that work, but it should be quick, and we can overwrite the answer in place\n</pre></div>\n\n\n</blockquote>\n<p>a few more notes on this:</p>\n<p>I was thinking we could extend <code>pursue_strand</code> so that it takes the index where the index where the answer should be stored. Normally this would be one past the end (i.e., make a new answer). but if we are in <code>ensure_root_answer</code> and we get back answer with deferred subclauses, then we would create a new strand just solving those clauses and tell it to re-execute and overwrite the answer in place. </p>\n<p>It is possible that this strand will fail -- in that case, we need to have a way to indicate that an answer was invalidated, and now represents just a failed path.</p>\n<p>If you were to later invoke <code>ensure_answer</code> on a failed path, you get back some result that says \"failed, but try the next answer\".</p>",
        "id": 180242519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228477
    },
    {
        "content": "<p>Err. You lost me.</p>",
        "id": 180245054,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573229892
    },
    {
        "content": "<p>I'll have to think about that</p>",
        "id": 180245063,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573229898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/chalk/pull/279\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/279\">https://github.com/rust-lang/chalk/pull/279</a></p>",
        "id": 180245959,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573230524
    },
    {
        "content": "<p>A PR with only recursion refactor changes</p>",
        "id": 180245972,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573230532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I started a <a href=\"https://hackmd.io/OJRi5OM6Twunw8ZmuLxfRA\" target=\"_blank\" title=\"https://hackmd.io/OJRi5OM6Twunw8ZmuLxfRA\">hackmd document</a> summarizing what's going on, as a draft for meeting</p>",
        "id": 180246197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573230655
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> For your second suspicion, is that only in the context of coinduction or a more general problem?</p>\n</blockquote>\n<p>I also added an example illustrating the case I was suspicious about</p>",
        "id": 180246241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573230676
    },
    {
        "content": "<p>it is only a problem for coinduction, not a more general problem, the rest of the code should handle it just fine</p>",
        "id": 180246256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573230689
    },
    {
        "content": "<p>Ok I'll take a look</p>",
        "id": 180246591,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573230891
    },
    {
        "content": "<blockquote>\n<p>Err. You lost me.</p>\n</blockquote>\n<p>that last part is kind of an optimization, not that imp't</p>",
        "id": 180247247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573231245
    },
    {
        "content": "<p>let more notes in the hackmd, gotta run</p>",
        "id": 180248545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573231967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Looking at the unification example you gave, I don't think my branch would handle that</p>",
        "id": 180248551,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573231971
    },
    {
        "content": "<p>Actually, I wrote a test for it. And (assuming my test is correct), it passes</p>",
        "id": 180249739,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573232614
    },
    {
        "content": "<p>Ok, changing my test a bit reveals that while branch doesn't necessarily give a <em>wrong</em> answer, it does <code>Flounder</code> when it could give <code>NoSolutions</code></p>",
        "id": 180255270,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573236241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Should I just got ahead and add back Stacker, but just wrap the <code>pursue_next_strand</code> call in <code>ensure_answer_recursively</code>?</p>",
        "id": 180275018,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573249177
    },
    {
        "content": "<p>seems good -- or wrap calls to <code>ensure_answer_recursively</code></p>",
        "id": 180275091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249212
    },
    {
        "content": "<p>but yeah basically when we enter into ensure-answer</p>",
        "id": 180275096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249217
    },
    {
        "content": "<p>well, we only  want to wrap one spot</p>",
        "id": 180275124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249235
    },
    {
        "content": "<p>I think your first suggestion was correct</p>",
        "id": 180275140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249245
    },
    {
        "content": "<p>Ok I'll do that</p>",
        "id": 180275277,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573249338
    },
    {
        "content": "<p>Also, the <code>remove CanonicalStrand</code> PR <em>should</em> be fairly straightforward too, I think</p>",
        "id": 180275457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573249468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> PR is updated</p>",
        "id": 180275556,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573249542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ok, I've convinced myself that my coinduction scheme seems good -- but I've got to dig a bit more into the PR now with that revised understanding still</p>",
        "id": 180312411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573304801
    },
    {
        "content": "<p>Sure! The PR definitely doesn't handle the cases you brought up correctly</p>",
        "id": 180313189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573306077
    },
    {
        "content": "<p>I added tests for them</p>",
        "id": 180313235,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573306097
    },
    {
        "content": "<p>I've maybe like 70% implemented your coinductive approach</p>",
        "id": 180446945,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573496560
    },
    {
        "content": "<p>The only test not passing (including the new tests covering some of the new cases + removing the fixme on the existing test) is <code>test::wf_lowering::cyclic_wf_requirements</code></p>",
        "id": 180447415,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573496946
    },
    {
        "content": "<p>But I need to add your variant 2 and 3 as tests</p>",
        "id": 180447464,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573496981
    },
    {
        "content": "<p>I think those will fail</p>",
        "id": 180447472,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573496987
    },
    {
        "content": "<p>Oops I was adding delayed_subgoals when incoporating an answer into <code>delayed_subgoals</code> instead of <code>subgoals</code></p>",
        "id": 180456985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573503938
    },
    {
        "content": "<p>Which exposes a different problem :)</p>",
        "id": 180456989,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573503950
    },
    {
        "content": "<p>yeah that's not right :)</p>",
        "id": 180458716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573505388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok, I'm maybe a bit stuck and have a question</p>",
        "id": 180461489,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573507637
    },
    {
        "content": "<p>Still stuck on the same cyclic_wf_requirements test</p>",
        "id": 180461510,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573507666
    },
    {
        "content": "<p>what's up</p>",
        "id": 180461569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573507688
    },
    {
        "content": "<p>One of the tables is returning an answer with a delayed subgoal of <code>InEnvironment { environment: Env([FromEnv(Unit)]), goal: WellFormed(&lt;?0 as Foo&gt;::Value: Foo) }</code></p>",
        "id": 180461702,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573507722
    },
    {
        "content": "<p>Now, I feel like I need to do some sort of canonicalization somewhere that I'm not doing</p>",
        "id": 180461746,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573507769
    },
    {
        "content": "<p>And that is getting pushed as a subgoal for the next strand up</p>",
        "id": 180461866,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573507855
    },
    {
        "content": "<p>but then truncating that goal panics</p>",
        "id": 180461883,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573507870
    },
    {
        "content": "<p>this may be because <code>?0</code> is an inference variable that got unified with <code>Unit</code></p>",
        "id": 180461907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573507903
    },
    {
        "content": "<p>depending on where you are printing the value</p>",
        "id": 180461911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573507907
    },
    {
        "content": "<p>it may not reflect all the unifications that happened</p>",
        "id": 180461915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573507912
    },
    {
        "content": "<p>I guess if you have a branch (or a \"Draft\" PR) that might be helpful</p>",
        "id": 180461964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573507926
    },
    {
        "content": "<p>oh wait no. it's <code>normalize_deep</code> that's panicing</p>",
        "id": 180461979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573507953
    },
    {
        "content": "<p>Sure I'll just push my changes to the same PR?</p>",
        "id": 180462003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573507990
    },
    {
        "content": "<p>which PR?</p>",
        "id": 180462110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573508086
    },
    {
        "content": "<p>seems ok</p>",
        "id": 180462111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573508086
    },
    {
        "content": "<p>The coinduction PR</p>",
        "id": 180462136,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573508105
    },
    {
        "content": "<p>since I don't think we're going with the implementation I had</p>",
        "id": 180462145,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573508114
    },
    {
        "content": "<p>though I'll keep it as a branch</p>",
        "id": 180462153,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573508120
    },
    {
        "content": "<p>Ok <a href=\"https://github.com/rust-lang/chalk/pull/272\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/272\">https://github.com/rust-lang/chalk/pull/272</a> has the changes</p>",
        "id": 180462252,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573508199
    },
    {
        "content": "<p>Oh shoot I got it to work</p>",
        "id": 180463557,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573509354
    },
    {
        "content": "<p>I don't know if it's necessarily the right thing (probably isn't)</p>",
        "id": 180463606,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573509371
    },
    {
        "content": "<p>and a couple tests fail so</p>",
        "id": 180463625,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573509397
    },
    {
        "content": "<p>but I ended up canonicalizing the goal before storing it in the delayed_subgoals</p>",
        "id": 180463656,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573509429
    },
    {
        "content": "<p>Oh</p>",
        "id": 180465114,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573510698
    },
    {
        "content": "<p>So</p>",
        "id": 180465116,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573510700
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[chalk-engine/src/logic.rs:1046] &amp;delayed_subgoal = UCanonical {\n    canonical: Canonical {\n        value: InEnvironment {\n            environment: Env([FromEnv(Unit)]),\n            goal: WellFormed(&lt;Unit as Foo&gt;::Value: Foo),\n        },\n        binders: [],\n    },\n    universes: 1,\n}\n[chalk-engine/src/logic.rs:1047] &amp;table_goal = UCanonical {\n    canonical: Canonical {\n        value: InEnvironment {\n            environment: Env([FromEnv(Unit)]),\n            goal: WellFormed(Unit: Foo),\n        },\n        binders: [],\n    },\n    universes: 1,\n}\n</pre></div>",
        "id": 180465136,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573510717
    },
    {
        "content": "<p>Those are the same</p>",
        "id": 180465155,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573510743
    },
    {
        "content": "<p>So my \"trivial self-cycle\" check is not taking into account normalization</p>",
        "id": 180465192,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573510788
    },
    {
        "content": "<p>Ok <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I left some comments on the PR with some questions/comments</p>",
        "id": 180467434,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573513120
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> will try to look soon!</p>",
        "id": 180469326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573515552
    },
    {
        "content": "<p>Ok a few thoughts:</p>",
        "id": 180482014,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573534527
    },
    {
        "content": "<p>1) Are auto traits supposed to be non-enumerable or not? If so, how does this play into everything?</p>",
        "id": 180482068,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573534589
    },
    {
        "content": "<p>(From what I can tell, removing the check for auto traits in <code>program_clauses</code> and the panic in <code>program_clauses_that_could_match</code> causes a few tests to return <code>[]</code> instead of <code>Flounder</code> irt. auto traits, but otherwise is fine.)</p>",
        "id": 180482148,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573534743
    },
    {
        "content": "<p>(When making these changes <code>coinductive_conflicting2</code> test passes)</p>",
        "id": 180482182,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573534802
    },
    {
        "content": "<p>2) My <code>coinductive_conflicting3</code> test still fails with the above changes, but because it finds a unique solution with <code>T=B</code>. The <code>T=A</code> subst isn't getting added to the <code>T: C1</code> table</p>",
        "id": 180482299,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573534918
    },
    {
        "content": "<blockquote>\n<p>1) Are auto traits supposed to be non-enumerable or not? If so, how does this play into everything?</p>\n</blockquote>\n<p>Are, yeah, a good question. I think that yes, auto traits are non-enumerable, more so than any other trait really. Probably we want to say that all traits are non-enumerable</p>",
        "id": 180522870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573569881
    },
    {
        "content": "<blockquote>\n<p>Probably we want to say that all traits are non-enumerable</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that's a bold statement</p>",
        "id": 180556043,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589466
    },
    {
        "content": "<p>How does that effect things?</p>",
        "id": 180556073,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589483
    },
    {
        "content": "<p>that's what rustc does, at least</p>",
        "id": 180556101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573589505
    },
    {
        "content": "<p>it doesn't really matter to the engine at all?</p>",
        "id": 180556123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573589516
    },
    {
        "content": "<p>Well, it does sort of</p>",
        "id": 180556185,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589538
    },
    {
        "content": "<p>Why do you think so?</p>",
        "id": 180556199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573589545
    },
    {
        "content": "<p>Because it affects some tests?</p>",
        "id": 180556213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573589552
    },
    {
        "content": "<p>Or is there some other reason</p>",
        "id": 180556218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573589557
    },
    {
        "content": "<p>Actually, I guess the part that cares here isn't actually in chalk-engine</p>",
        "id": 180556243,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589571
    },
    {
        "content": "<p>But</p>",
        "id": 180556293,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589601
    },
    {
        "content": "<p>chalk-solve is Floundering a table in <code>program_clauses</code>for non-enumerable types</p>",
        "id": 180556383,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589649
    },
    {
        "content": "<p>seems ok</p>",
        "id": 180556399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573589667
    },
    {
        "content": "<p>so even though we can prove that something isn't possible, it flounders</p>",
        "id": 180556406,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589669
    },
    {
        "content": "<p>(also for auto traits)</p>",
        "id": 180556419,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589685
    },
    {
        "content": "<p>how can we prove it's not possible?</p>",
        "id": 180556421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573589687
    },
    {
        "content": "<p>So, this was one of your examples</p>",
        "id": 180556437,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589702
    },
    {
        "content": "<p>one sec</p>",
        "id": 180556442,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589704
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>C1(X) :- C2(Y), X = 22.\nC2(X) :- C3(X), X = 44.\nC3(X) :- C1(X), C2(X).\n</pre></div>",
        "id": 180556475,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589730
    },
    {
        "content": "<p>I see</p>",
        "id": 180556487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573589744
    },
    {
        "content": "<p>Yeah, we may not be able to exercise that code path</p>",
        "id": 180556500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573589753
    },
    {
        "content": "<p>Without some \"opt-in\" to enumerating rules</p>",
        "id": 180556547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573589763
    },
    {
        "content": "<p>The test is here: <a href=\"https://github.com/rust-lang/chalk/pull/272/files#diff-721709466568566f24fc2e8634c40dcbR140\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/272/files#diff-721709466568566f24fc2e8634c40dcbR140\">https://github.com/rust-lang/chalk/pull/272/files#diff-721709466568566f24fc2e8634c40dcbR140</a></p>",
        "id": 180556563,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589772
    },
    {
        "content": "<p>Really we don't want auto-traits for these tests</p>",
        "id": 180556566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573589773
    },
    {
        "content": "<p>We just want a way to write \"coinductive\" traits</p>",
        "id": 180556575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573589781
    },
    {
        "content": "<p>maybe we should enable that</p>",
        "id": 180556582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573589784
    },
    {
        "content": "<p>auto-traits come with other baggage (i.e., implemented for all structs, etc)</p>",
        "id": 180556598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573589798
    },
    {
        "content": "<p>Hmm</p>",
        "id": 180556610,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589807
    },
    {
        "content": "<p>is there a separate way to mark a trait as coinductive only</p>",
        "id": 180556623,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589817
    },
    {
        "content": "<p>Right now, a goal is coinductive if 1) We ask if an auto trait is implemented or 2) It's a well-formed goal</p>",
        "id": 180556800,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573589936
    },
    {
        "content": "<blockquote>\n<p>is there a separate way to mark a trait as coinductive only</p>\n</blockquote>\n<p>no, but we could add one</p>",
        "id": 180558408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573590837
    },
    {
        "content": "<p>it would require a bit of threading</p>",
        "id": 180558452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573590843
    },
    {
        "content": "<p>we'd add a <code>#[coinductive]</code> attribute or something</p>",
        "id": 180558461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573590848
    },
    {
        "content": "<p>I've sometimes wondered if we can make <em>all</em> traits coinductive, but anyway</p>",
        "id": 180558476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573590857
    },
    {
        "content": "<p>Yeah, I was curious about that</p>",
        "id": 180558514,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573590885
    },
    {
        "content": "<p>So, is it worth adding that? If so, in this PR or in a separate one? Otherwise, can't really test these two cases</p>",
        "id": 180558585,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573590936
    },
    {
        "content": "<p>(at least, can't test that they go to no solution instead of floundering)</p>",
        "id": 180558605,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573590956
    },
    {
        "content": "<p>It was easy enough to add and better tests the minimal \"only coinductive\" behavior we want to test so I added it</p>",
        "id": 180562681,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573593319
    },
    {
        "content": "<p>And all the tests (for coinductiveness), so far, pass</p>",
        "id": 180562697,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573593337
    },
    {
        "content": "<p>The <code>coinductive_semantics</code> test is actually and <code>auto_semantics</code> test</p>",
        "id": 180562718,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573593356
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 180562814,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573593394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have maybe a naive question</p>",
        "id": 180563403,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573593734
    },
    {
        "content": "<p><code>C1(A, B) :- C1(B, A).</code></p>",
        "id": 180563404,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573593736
    },
    {
        "content": "<p>I'm not exactly sure what haven't two variables here means</p>",
        "id": 180563445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573593763
    },
    {
        "content": "<p>So <code>C1(A) :- C2(A)</code> means <code>A: C1 if A: C2</code></p>",
        "id": 180563485,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573593792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> you could model it as <code>(A, B): C1</code>, for example, or as <code>A: C1&lt;B&gt;</code></p>",
        "id": 180566617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573595819
    },
    {
        "content": "<p>Oh, that's good to know</p>",
        "id": 180569136,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573597694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just wondering if you've gotten a chance to take a look at the coinductive PR?</p>",
        "id": 180643546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573662086
    },
    {
        "content": "<p>not today, will try to do that tomorrow <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 180692682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573696285
    },
    {
        "content": "<p>No problem</p>",
        "id": 180692685,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573696303
    },
    {
        "content": "<p>I realized that I'm sort of in a dilemma with it</p>",
        "id": 180692731,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573696323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> does this have to do you with your latest comment about floundering, or something else?</p>",
        "id": 180718012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573727644
    },
    {
        "content": "<p>(To start, I think we should rebase the \"coinductive\" attribute and land that, btw)</p>",
        "id": 180718171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573727785
    },
    {
        "content": "<p>OK, reading branch now. I'm going to try making a few edits and push to the branch, hope you don't mind. I just don't think i'll have much time today and this seems like fastest way to give feedback.</p>",
        "id": 180718358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573727938
    },
    {
        "content": "<p>OK, that may have been ambitious on my part. The main bit of feedback is that indeed the delayed subgoals have to be canonicalized together with the answer substitution. This implies that I think we have to add another associated type besides <code>CanonicalConstrainedSubst</code> -- I was trying to add one entitled <code>CanonicalAnswerSubst</code>, which would include the delayed subgoals. I am pondering where the delayed subgoals should be introduced to the ex-clause -- probably as part of <code>apply_answer_subst</code>, though I think that this code cannot really be expected to detect trivial-self-cycles... well, I guess why not? it already knows the goal.</p>",
        "id": 180719434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573728790
    },
    {
        "content": "<p>As a crazy nit-pick, I was tempted to suggest that <code>CompleteAnswer</code> should just be <code>Answer</code>, and that <code>Answer</code> should be <code>PartialAnswer</code> or something, but I'm not really sure if I like that. =)</p>",
        "id": 180719539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573728850
    },
    {
        "content": "<p>Ah yeah and the <code>ExClause</code> should not be storing <em>canonical</em> goals, just uncanonical ones</p>",
        "id": 180719625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573728948
    },
    {
        "content": "<p>well, I pushed a commit that starts going down that road, but it's not complete</p>",
        "id": 180720592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573729709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks for the feedback! I'll try to take the changes that you made and run with it</p>",
        "id": 180737893,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573743432
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/285\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/285\">https://github.com/rust-lang/chalk/pull/285</a></p>",
        "id": 180755996,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573754298
    },
    {
        "content": "<p>PR with just coinductive attribute + new tests</p>",
        "id": 180756007,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573754315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 180870137,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573850827
    },
    {
        "content": "<p>Question</p>",
        "id": 180870145,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573850832
    },
    {
        "content": "<p>So, when we get non-trivial self-cycle subgoals in the answer for the root goal, those are <code>C::GoalInEnvironment</code></p>",
        "id": 180870176,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573850873
    },
    {
        "content": "<p>If we want to reevaluate those, they need to be <code>C::UCanonicalGoalInEnvironment</code></p>",
        "id": 180870252,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573850918
    },
    {
        "content": "<p>what's the correct way to convert that</p>",
        "id": 180870260,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573850925
    },
    {
        "content": "<p>I'm not sure I understand the question yet</p>",
        "id": 180906400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573899287
    },
    {
        "content": "<p>Something seems wrong <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> -- do you mean from <code>evaluate_root_goal</code> (or wherever we do the \"answer refinement\" stage)?</p>",
        "id": 180906413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573899328
    },
    {
        "content": "<p>I think the idea would be to make a strand within that same table, and I think it should only need goals</p>",
        "id": 180906474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573899422
    },
    {
        "content": "<p>Have you pushed to the PR?</p>",
        "id": 180906479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573899428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yes I mean in <code>ensure_root_answer</code> (which I just renamed to <code>root_answer</code> and return the <code>CompleteAnswer</code>.</p>",
        "id": 180926233,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573934675
    },
    {
        "content": "<p>Anyways, I ended up figuring it out</p>",
        "id": 180926238,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573934703
    },
    {
        "content": "<p>and all the tests pass</p>",
        "id": 180926242,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573934706
    },
    {
        "content": "<p>But, the way I approach is may not be (probably not) 100%</p>",
        "id": 180926250,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573934737
    },
    {
        "content": "<p>Basically, in short, the \"answer\" for the root table may have non-trivial self-cycles as delayed subgoals</p>",
        "id": 180926297,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573934784
    },
    {
        "content": "<p>But there are <code>C::GoalInEnvironment</code></p>",
        "id": 180926300,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573934793
    },
    {
        "content": "<p>If we want to try to evaluate these, we need a <code>C::UCanonicalGoalInEnvironment</code></p>",
        "id": 180926307,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573934818
    },
    {
        "content": "<p>I ended up just making a new function in <code>Context</code> which takes the <code>UCanonicalGoalInEnvironment</code> from the root goal and applies it's binders to the <code>GoalInEnvironment</code> for the delayed_subgoal</p>",
        "id": 180926371,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573934899
    },
    {
        "content": "<p>Which I don't think is necessarily the correct way to do it. But it does work, at least for the current tests</p>",
        "id": 180926381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573934944
    },
    {
        "content": "<p>So,</p>",
        "id": 180926385,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573934954
    },
    {
        "content": "<p>I'll clean up my changes locally and push to the PR for comments/review</p>",
        "id": 180926391,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573934973
    },
    {
        "content": "<p>There's also other \"assumptions\" I've made currently that I don't think will always hold (but do for current tests), once I push these changes I'm gonna work on making some tests that break these</p>",
        "id": 180926652,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573935370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I took a peek at the commits so far, will do a more in-depth look later</p>",
        "id": 181043089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Any (general) comments?</p>",
        "id": 181043179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1574102411
    },
    {
        "content": "<p>Not yet, it seemed \"pretty close\" -- the logic around what is a \"trivial cycle\" probably needs a bit of tweaking -- but yeah</p>",
        "id": 181043215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102437
    },
    {
        "content": "<p>Ok</p>",
        "id": 181043231,
        "sender_full_name": "Jack Huey",
        "timestamp": 1574102455
    },
    {
        "content": "<p>The big thing right now I personally am <em>unsure</em> about are whether the way I'm handling the binders for delayed subgoals</p>",
        "id": 181043442,
        "sender_full_name": "Jack Huey",
        "timestamp": 1574102581
    },
    {
        "content": "<p>And I guess, in what cases might we have a substitution from a delayed subgoal and how do we incorporate that</p>",
        "id": 181043606,
        "sender_full_name": "Jack Huey",
        "timestamp": 1574102680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'll have to update the branch to fix the new merge conflict from yesterday, but do you think you'll have time this week to review the coinduction branch?</p>",
        "id": 183092900,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576006030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> yes</p>",
        "id": 183107252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576015110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I've been looking it over. One thing that might be worth talking about -- perhaps as a standalone PR and a \"pre-step\" -- is having a mechanism to \"invalidate\" previous answers as having been superceded by newer ones. You remember how we were talking about what to do for <a href=\"https://github.com/rust-lang/chalk/issues/302\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/302\">https://github.com/rust-lang/chalk/issues/302</a>.</p>",
        "id": 183361160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576245739
    },
    {
        "content": "<p>So, unless I'm mistaken, for this it wouldn't actually do anything except maybe be a performance optimization?</p>",
        "id": 183379512,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576257129
    },
    {
        "content": "<p>in some sense that's always true</p>",
        "id": 183380651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576258011
    },
    {
        "content": "<p>anyway, let me poke at this branch a bit</p>",
        "id": 183380807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576258184
    },
    {
        "content": "<p>Also, I think the answer invalidation in that issue is different than what would be used for conduction</p>",
        "id": 183380817,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576258196
    },
    {
        "content": "<p>Maybe</p>",
        "id": 183380875,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576258217
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 183380955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576258289
    },
    {
        "content": "<p>basically just a way to say \"there's a better answer later\"</p>",
        "id": 183380959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576258302
    },
    {
        "content": "<p>or rather \"this 'answer' turned out to be an error\"</p>",
        "id": 183380994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576258323
    },
    {
        "content": "<p>but I don't think it's really a necessary pre-step, thinking more about it</p>",
        "id": 183381017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576258331
    },
    {
        "content": "<p>Tbh thinking about an \"answer turning out to be an error\" sounds scary</p>",
        "id": 183381070,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576258386
    },
    {
        "content": "<p>heh</p>",
        "id": 183381195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576258469
    },
    {
        "content": "<p>I'm also not sure if the technical overhead is really worth whatever performance difference</p>",
        "id": 183381205,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576258476
    },
    {
        "content": "<p>it's not so scary as it sounds</p>",
        "id": 183381212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576258486
    },
    {
        "content": "<p>like, if an answer includes delayed subgoals, then it's clear that an \"answer\" can lead to an error</p>",
        "id": 183381232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576258506
    },
    {
        "content": "<p>(i.e., processing those subgoals can fail)</p>",
        "id": 183381238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576258512
    },
    {
        "content": "<p>anyway, we can revisit after, I agree it's not a necessary step</p>",
        "id": 183381248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576258529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> do you happen to have that hackmd handy where we worked through the algorithm? I think I may see an opportunity for simplification here actually..</p>",
        "id": 183382474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576259486
    },
    {
        "content": "<p>I guess it was probably <a href=\"https://hackmd.io/OJRi5OM6Twunw8ZmuLxfRA\" target=\"_blank\" title=\"https://hackmd.io/OJRi5OM6Twunw8ZmuLxfRA\">this one</a></p>",
        "id": 183382498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576259506
    },
    {
        "content": "<p>Yep that's it</p>",
        "id": 183382737,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576259673
    },
    {
        "content": "<p>And indeed it points out to me why the simplification doesn't work</p>",
        "id": 183382900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576259801
    },
    {
        "content": "<p>Though I think there's still a simpler way to express things than the way I explained it in the doc</p>",
        "id": 183382908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576259811
    },
    {
        "content": "<p>In what way?</p>",
        "id": 183382968,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576259873
    },
    {
        "content": "<p>Did i do something wrong</p>",
        "id": 183383020,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576259885
    },
    {
        "content": "<p>let me try to \"prove out\" this real quick</p>",
        "id": 183383096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576259989
    },
    {
        "content": "<p>before I respond</p>",
        "id": 183383106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576260001
    },
    {
        "content": "<p>Sure</p>",
        "id": 183383243,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576260072
    },
    {
        "content": "<p>Ok <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I pushed some commits to your branch</p>",
        "id": 183384826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261284
    },
    {
        "content": "<p>the key idea is this:</p>",
        "id": 183384835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261291
    },
    {
        "content": "<p>when -- in the root table --</p>",
        "id": 183384839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261295
    },
    {
        "content": "<p>we publish an answer <code>A :- B |</code> with delayed subgoals <code>B</code></p>",
        "id": 183384851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261308
    },
    {
        "content": "<p>we immediately create a new strand in that table <code>A :- B</code></p>",
        "id": 183384856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261316
    },
    {
        "content": "<p>(the logic for doing that is perhaps mildly inefficient right now in its treatment of canonicalization)</p>",
        "id": 183384922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261340
    },
    {
        "content": "<p>we can still consider the original answer valid; I marked it as <em>ambiguous</em> for now but I think that's not quite right, as my comment explains</p>",
        "id": 183384986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261391
    },
    {
        "content": "<p>I haven't of course tried to test this :)</p>",
        "id": 183384995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261402
    },
    {
        "content": "<p>That's an interesting approach</p>",
        "id": 183385312,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576261611
    },
    {
        "content": "<p>And that could mean that replacing a previous answer is needed?</p>",
        "id": 183385343,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576261635
    },
    {
        "content": "<p>well so</p>",
        "id": 183385392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261676
    },
    {
        "content": "<p>actually I think we should just consider the previous answer -- when it propagates <em>out</em> from the table -- as an error</p>",
        "id": 183385441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261690
    },
    {
        "content": "<p>because this follow-up strand will publish another one that is better</p>",
        "id": 183385450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261701
    },
    {
        "content": "<p>but that was not really what I originally had in mind, at least not exactly</p>",
        "id": 183385489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261727
    },
    {
        "content": "<p>I feel like the aggregator won't handle this correctly?</p>",
        "id": 183385496,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576261731
    },
    {
        "content": "<p>ah, yeah, I think that's corect, I had planned to remove that logic</p>",
        "id": 183385513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261747
    },
    {
        "content": "<p>I mean I think it's wrong for it to panic anyway</p>",
        "id": 183385527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261759
    },
    {
        "content": "<p>well I know that's wrong</p>",
        "id": 183385540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261769
    },
    {
        "content": "<p>but then the question is what to do instead :)</p>",
        "id": 183385550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261772
    },
    {
        "content": "<p>Well that too. But also</p>",
        "id": 183385552,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576261774
    },
    {
        "content": "<p>er, sorry, you meant the <em>answer</em> aggregator</p>",
        "id": 183385571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261786
    },
    {
        "content": "<p>If the first answer is ambiguous</p>",
        "id": 183385579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576261792
    },
    {
        "content": "<p>yeah this is why ambiguous is not correct</p>",
        "id": 183385595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261802
    },
    {
        "content": "<p>although</p>",
        "id": 183385644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261806
    },
    {
        "content": "<p>Then we can no longer get a unique answer</p>",
        "id": 183385650,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576261809
    },
    {
        "content": "<p>that's not true</p>",
        "id": 183385659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261815
    },
    {
        "content": "<p>I'm not sure what the aggregator will do <em>but</em></p>",
        "id": 183385679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261823
    },
    {
        "content": "<p>if you have two answers with the same substitution</p>",
        "id": 183385693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261834
    },
    {
        "content": "<p>and one is ambiguous and the other not</p>",
        "id": 183385700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261837
    },
    {
        "content": "<p>you can ignore the ambiguous one</p>",
        "id": 183385704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261839
    },
    {
        "content": "<p>I was running into this with the associated types branch</p>",
        "id": 183385713,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576261848
    },
    {
        "content": "<p>but likely the aggregator is not smart enough</p>",
        "id": 183385714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261849
    },
    {
        "content": "<p>The aggregator assumes the answers can't unify</p>",
        "id": 183385726,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576261862
    },
    {
        "content": "<p>and in any case the other consideration is when the refinement strand just outright fails</p>",
        "id": 183385736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261867
    },
    {
        "content": "<p>in which case the first answer isn't <em>ambiguous</em>, it's just false</p>",
        "id": 183385746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261874
    },
    {
        "content": "<p>So it makes the most generic form it can</p>",
        "id": 183385749,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576261877
    },
    {
        "content": "<p>well it assumes that if they are different, yes</p>",
        "id": 183385758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261889
    },
    {
        "content": "<p>anyway it's pretty dumb</p>",
        "id": 183385765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261900
    },
    {
        "content": "<p>but I think really it shouldn't even be seeing the first answer</p>",
        "id": 183385774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261909
    },
    {
        "content": "<p>I don't think there's any info to be gained from it</p>",
        "id": 183385777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261913
    },
    {
        "content": "<p>(at least in this case)</p>",
        "id": 183385781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261920
    },
    {
        "content": "<p>Right, which is why I did the refinement before returning a root answer</p>",
        "id": 183385837,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576261940
    },
    {
        "content": "<p>yeah but</p>",
        "id": 183385846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261945
    },
    {
        "content": "<p>it's easier to</p>",
        "id": 183385860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261958
    },
    {
        "content": "<p>just return a marker value</p>",
        "id": 183385863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261962
    },
    {
        "content": "<p>that's like \"ignore me, find the next answer\"</p>",
        "id": 183385869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576261965
    },
    {
        "content": "<p>Actually, this is where I think maybe the non-recursive changes can help us</p>",
        "id": 183385916,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576262012
    },
    {
        "content": "<p>(conceptually the aggregator could even just ignore answers that have delayed subgoals, but I think it's somehow cleaner to hide that detail from outside the table)</p>",
        "id": 183385927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262019
    },
    {
        "content": "<p>I haven't thought a ton about it yet</p>",
        "id": 183385934,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576262023
    },
    {
        "content": "<p>hmm I don't see what they have to do with it :)</p>",
        "id": 183385954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262039
    },
    {
        "content": "<p>But I think it should be clean enough to refine before returning</p>",
        "id": 183385961,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576262042
    },
    {
        "content": "<p>you cannot refine before returning</p>",
        "id": 183386004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262048
    },
    {
        "content": "<p>well</p>",
        "id": 183386021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262056
    },
    {
        "content": "<p>what I mean is</p>",
        "id": 183386023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262058
    },
    {
        "content": "<p>unless you want to have two distinct sets of answer indices</p>",
        "id": 183386037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262065
    },
    {
        "content": "<p>the first answer is real, and has to be in the table</p>",
        "id": 183386056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262076
    },
    {
        "content": "<p>unless maybe you are thinking to overwrite it in place</p>",
        "id": 183386075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262091
    },
    {
        "content": "<p>but I don't think it's actually that clean</p>",
        "id": 183386101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262109
    },
    {
        "content": "<p>Hmm</p>",
        "id": 183386102,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576262110
    },
    {
        "content": "<p>e.g., consider this</p>",
        "id": 183386107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262113
    },
    {
        "content": "<p>the table maybe have other strands that haven't completed yet</p>",
        "id": 183386116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262118
    },
    {
        "content": "<p>and so if we publish an answer X</p>",
        "id": 183386129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262131
    },
    {
        "content": "<p>and then create a strand to refine X</p>",
        "id": 183386132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262134
    },
    {
        "content": "<p>trying to do that could lead to (e.g.) running out of quantum or fuel</p>",
        "id": 183386169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262159
    },
    {
        "content": "<p>it's just a lot of state to juggle</p>",
        "id": 183386211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262163
    },
    {
        "content": "<p>but in this approach, there really is no state</p>",
        "id": 183386218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262167
    },
    {
        "content": "<p>we just say \"you're looking for answer N? look for N+1\"</p>",
        "id": 183386229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262177
    },
    {
        "content": "<p>which we already have to do</p>",
        "id": 183386232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262179
    },
    {
        "content": "<p>one thing I haven't quite decided yet: could it be that the refinement strand winds up with a different substitution -- or even multiple answers? I guess I have to think about that. Seems...plausible.</p>",
        "id": 183386315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262245
    },
    {
        "content": "<p>I'll look over your changes</p>",
        "id": 183386360,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576262272
    },
    {
        "content": "<p>But to answer that question</p>",
        "id": 183386369,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576262278
    },
    {
        "content": "<p>For all current tests...no. I was ignoring that and everything \"worked\"</p>",
        "id": 183386433,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576262302
    },
    {
        "content": "<p>I realize I already overlooked one bit of complexity in the \"delayed trivial self cycle\" walkthrough I did, in that indeed if we publish a new answer (a \"refinement answer\"), then our refinement strand will try to build on that too -- though it will lead to a duplicate answer, which I guess is ok</p>",
        "id": 183386446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262312
    },
    {
        "content": "<p>But I don't know the answer for \"all\" cases</p>",
        "id": 183386459,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576262319
    },
    {
        "content": "<p>Maybe I'll try to make a test</p>",
        "id": 183386653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262417
    },
    {
        "content": "<p>in any case, the logic to create a refinement strand is \"roughly\" what we want</p>",
        "id": 183386670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262443
    },
    {
        "content": "<p>(I think:)</p>",
        "id": 183386672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576262446
    },
    {
        "content": "<p>I'll take a look at trying to fix the tests</p>",
        "id": 183386902,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576262597
    },
    {
        "content": "<p>Ok <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, I took your changes and worked off of them. So, I don't think making an answer having delayed subgoals be \"ambiguous\" is the right idea (because the solver doesn't know if it should \"consider that\"). Instead, I made a new fail \"InvalidAnswer\". The other issue is now matching the delayed subgoal to the table goal (so it doesn't get added to the ex clause). So, I was checking this in <code>apply_answer_subst</code>, but with the changes you made, the bound variables (I think I got the right name?) in the delayed subgoals get unique inference variables compared to the table goal, so can't check equality. As it is, really they need to be checked after the answer subst is canonicalized (which is now in <code>pursue_answer</code>). For now, to make sure it works, I instead just filter the delayed subgoals  in <code>create_refinement_strand</code>, but this is a bit late, because the delayed subgoals are already in the <code>ExClause</code>.</p>",
        "id": 183518553,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576470019
    },
    {
        "content": "<p>Oops that's a big blob of text</p>",
        "id": 183518557,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576470030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> \"invalid answer\" sounds like exactly what I had in mind -- not sure about the rest yet, have to look maybe at the commit, did you push?</p>",
        "id": 183559031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576509984
    },
    {
        "content": "<p>Yes it's pushed</p>",
        "id": 183559160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576510070
    },
    {
        "content": "<p>OK, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, I have to run to something else, but I'll try to look at this later on -- did you have specific questions?</p>",
        "id": 183584913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576526528
    },
    {
        "content": "<p>Nothing specific</p>",
        "id": 183584926,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576526541
    },
    {
        "content": "<p>I need to spend some time and refactor the bit that I talked about (and has a FIXME), but it <em>works</em> now</p>",
        "id": 183584973,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576526576
    },
    {
        "content": "<p>and tests pass</p>",
        "id": 183584977,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576526580
    }
]