[
    {
        "content": "<p>So, I started on the refactoring to remove <code>PredicateKind::Atom</code> and just <code>PredicateKind</code> in general, in favor of just <code>Binder&lt;PredicateAtom&lt;'tcx&gt;&gt;</code></p>",
        "id": 220764547,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608704929
    },
    {
        "content": "<p>See branch <a href=\"https://github.com/jackh726/rust/compare/predicate-kind\">here</a></p>",
        "id": 220764551,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608704945
    },
    {
        "content": "<p>Problem is, I'm at a point that I'm stuck</p>",
        "id": 220764553,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608704959
    },
    {
        "content": "<p>I was able to successfully just remove <code>PredicateKind::Atom</code> and leave only <code>PredicateKind::ForAll</code></p>",
        "id": 220764605,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608705005
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/c7f1cf6c1c37c89b60f985571d638c1afc2ba996\">this commit</a></p>",
        "id": 220764612,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608705017
    },
    {
        "content": "<p>But then, I tried to remove <code>PredicateKind</code> completely and just use <code>Binder&lt;PredicateAtom&lt;'tcx&gt;&gt;</code> <a href=\"https://github.com/rust-lang/rust/commit/d2d3dd8f873a1505110245edfa7b523cd9192538\">here</a> and everything blows up</p>",
        "id": 220764627,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608705058
    },
    {
        "content": "<p>Can't even compile core</p>",
        "id": 220764628,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608705062
    },
    {
        "content": "<p>for reference I get the following error, though I don't think this in particular matters:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0369]: cannot subtract `{integer}` from `{integer}`\n   --&gt; library/core/src/array/mod.rs:393:33\n</code></pre></div>",
        "id": 220764648,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608705105
    },
    {
        "content": "<p>Honestly, not really sure what went wrong. The diff is pretty minimal. Was mostly hoping that a couple people could take a look and see if they spot anything obvious that I missed</p>",
        "id": 220764718,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608705216
    },
    {
        "content": "<p>Oh, well it's the Encodable change...of course it is<br>\nEdit: nevermind</p>",
        "id": 220765391,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608706364
    },
    {
        "content": "<p>type flags maybe?</p>",
        "id": 220770877,
        "sender_full_name": "lcnr",
        "timestamp": 1608713508
    },
    {
        "content": "<p>though I can't see why that would be incorrect</p>",
        "id": 220771044,
        "sender_full_name": "lcnr",
        "timestamp": 1608713654
    },
    {
        "content": "<p>hmm, can't see anything wrong myself in your last commit <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 220771434,
        "sender_full_name": "lcnr",
        "timestamp": 1608714099
    },
    {
        "content": "<p>shouldn't really change the behavior anywhere</p>",
        "id": 220771447,
        "sender_full_name": "lcnr",
        "timestamp": 1608714112
    },
    {
        "content": "<p>Bleh that's what I was afraid of</p>",
        "id": 220799730,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608738376
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...jackh726:predicate-kind#diff-2f72dd1963ca7043f3c7cec775db8101be5b20975ab64a563dababa7c4abd06eR120\">https://github.com/rust-lang/rust/compare/master...jackh726:predicate-kind#diff-2f72dd1963ca7043f3c7cec775db8101be5b20975ab64a563dababa7c4abd06eR120</a></p>",
        "id": 220805661,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608742351
    },
    {
        "content": "<p>That's it, isn't it.</p>",
        "id": 220805670,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608742356
    },
    {
        "content": "<p>A <code>==</code> that should be  <code>!=</code></p>",
        "id": 220805681,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608742364
    },
    {
        "content": "<p>ugh probably not because it's a clippy lint<br>\nEdit: nope, not it</p>",
        "id": 220805697,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608742380
    },
    {
        "content": "<p>So yeah, I tried to take this much more piecemeal and figure out exactly what's the problem. And honestly, I have no clue. I got it down to where the <em>only</em> change is changing from <code>PredicateKind::ForAll</code> to <code>Binder&lt;PredicateAtom&gt;</code> and that fails. Like, a \"minimal\" repro is just changing the <code>kind</code> in <code>PredicateInner</code> to <code>Binder&lt;PredicateAtom&gt;</code>. So idk.</p>\n<p>If anyone has so time and/or curiosity and wants to try to help me figure this out, I would really appreciate it. This seems like a simple refactoring and there's something subtle happening.</p>",
        "id": 221102485,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609202177
    },
    {
        "content": "<p>Trying to look into this a bit more</p>",
        "id": 221427255,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609637488
    },
    {
        "content": "<p>Since the problem is occurring during build of core, I figured I would try to create a min repro with <code>#![no_core]</code> that I can just build with rustc (and then dig into logs and compare)</p>",
        "id": 221427309,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609637567
    },
    {
        "content": "<p>So, I came up with</p>\n<div class=\"codehilite\"><pre><span></span><code>#![no_main]\n#![feature(lang_items)]\n#![feature(no_core)]\n#![feature(rustc_attrs)]\n#![feature(fundamental)]\n#![feature(specialization)]\n\n#[lang = &quot;sized&quot;]\n#[fundamental]\n#[rustc_specialization_trait]\ntrait Sized {}\n\ntrait Default: Sized {\n    fn default() -&gt; Self;\n}\n\nmacro_rules! array_impl_default {\n    {$n:expr, $t:ident $($ts:ident)*} =&gt; {\n        impl&lt;T&gt; Default for [T; $n] where T: Default {\n            fn default() -&gt; [T; $n] {\n                [$t::default(), $($ts::default()),*]\n            }\n        }\n        array_impl_default!{($n - 1), $($ts)*}\n    };\n    {$n:expr,} =&gt; {\n        impl&lt;T&gt; Default for [T; $n] {\n            fn default() -&gt; [T; $n] { [] }\n        }\n    };\n}\n\n//array_impl_default! {32, T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T T}\narray_impl_default! {1, T}\n</code></pre></div>",
        "id": 221427314,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609637579
    },
    {
        "content": "<p>But, on nightly, I get the same \"cannot subtract <code>{integer}</code> from <code>{integer}</code>\" error that I see on my branch</p>",
        "id": 221427335,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609637620
    },
    {
        "content": "<p>Obviously, it compiles in the broader context of core on nightly</p>",
        "id": 221427395,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609637672
    },
    {
        "content": "<p>but it's a bit interesting that trying to isolate it gives the same error</p>",
        "id": 221427400,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609637687
    },
    {
        "content": "<p>So, idk if it's just me, but this seems like it should compile: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4c3838ef629cb6b522c6c1f99d4786b9\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4c3838ef629cb6b522c6c1f99d4786b9</a></p>",
        "id": 221427912,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609638586
    },
    {
        "content": "<p>don't you need the to add the sub impls for integers for this to work?</p>",
        "id": 221444684,
        "sender_full_name": "lcnr",
        "timestamp": 1609669820
    },
    {
        "content": "<p>even if they are intrinsic we still have to manually add them as noops for the trait system to consider them</p>",
        "id": 221444689,
        "sender_full_name": "lcnr",
        "timestamp": 1609669843
    },
    {
        "content": "<p>Oh, probably</p>",
        "id": 221460772,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609693924
    },
    {
        "content": "<p>Okay <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2ff3ed805ac5023e63a9584ab1bb5cdf\">this</a> checks successfully</p>",
        "id": 221485396,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609729839
    },
    {
        "content": "<p>Alright so that definitely is a minimized (maybe there's more I can do, but it's a good start) repo</p>",
        "id": 221487518,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609733030
    },
    {
        "content": "<p>there's actually many errors</p>",
        "id": 221487565,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609733057
    },
    {
        "content": "<p>e.g.: \"cannot subtract <code>usize</code> from <code>usize</code>\"</p>",
        "id": 221487568,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609733064
    },
    {
        "content": "<p>Edit: changing <code>0</code> to <code>(1 - 1)</code> gives the \"expected\" error</p>",
        "id": 221490450,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609737727
    },
    {
        "content": "<p>Seems like potentially a problem in canonicalization</p>",
        "id": 221490476,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609737808
    },
    {
        "content": "<p>Before:</p>\n<div class=\"codehilite\"><pre><span></span><code>├─0ms DEBUG rustc_middle::ty::fold HasTypeFlagsVisitor: predicate=ForAll(Binder(TraitPredicate(&lt;{integer} as Sub&lt;_&gt;&gt;))) predicate.flags=HAS_TY_INFER | STILL_FURTHER_SPECIALIZABLE self.flags=HAS_TY_INFER | HAS_RE_INFER | HAS_CT_INFER | NEEDS_INFER | HAS_TY_PLACEHOLDER | HAS_CT_PLACEHOLDER | HAS_FREE_REGIONS\n├─0ms DEBUG rustc_infer::infer::canonical::canonicalizer canonical: type var found with vid _#1t\n├─0ms DEBUG rustc_middle::ty::fold HasTypeFlagsVisitor: predicate=ForAll(Binder(TraitPredicate(&lt;^1_0 as Sub&lt;^1_1&gt;&gt;))) predicate.flags=(empty) self.flags=HAS_TY_INFER | HAS_RE_INFER | HAS_CT_INFER | NEEDS_INFER\n├─0ms DEBUG rustc_query_system::query::plumbing ty::query::get_query&lt;evaluate_obligation&gt;(key=Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(Int) }, CanonicalVarInfo { kind: Ty(General(U0)) }], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing }, value: ForAll(Binder(TraitPredicate(&lt;^1_0 as Sub&lt;^1_1&gt;&gt;))) } }, span=target/min3.rs:1:1: 1:1 (#0))\n</code></pre></div>\n<p>After:</p>\n<div class=\"codehilite\"><pre><span></span><code>├─0ms DEBUG rustc_middle::ty::fold HasTypeFlagsVisitor: predicate=Binder(TraitPredicate(&lt;{integer} as Sub&lt;_&gt;&gt;)) predicate.flags=HAS_TY_INFER | STILL_FURTHER_SPECIALIZABLE self.flags=HAS_TY_INFER | HAS_RE_INFER | HAS_CT_INFER | NEEDS_INFER | HAS_TY_PLACEHOLDER | HAS_CT_PLACEHOLDER | HAS_FREE_REGIONS\n├─0ms DEBUG rustc_infer::infer::canonical::canonicalizer canonical: type var found with vid _#1t\n├─0ms DEBUG rustc_middle::ty::fold HasTypeFlagsVisitor: predicate=Binder(TraitPredicate(&lt;^0 as Sub&lt;^1&gt;&gt;)) predicate.flags=(empty) self.flags=HAS_TY_INFER | HAS_RE_INFER | HAS_CT_INFER | NEEDS_INFER\n├─0ms DEBUG rustc_query_system::query::plumbing ty::query::get_query&lt;evaluate_obligation&gt;(key=Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(Int) }, CanonicalVarInfo { kind: Ty(General(U0)) }], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing }, value: Binder(TraitPredicate(&lt;^0 as Sub&lt;^1&gt;&gt;)) } }, span=target/min3.rs:1:1: 1:1 (#0))\n</code></pre></div>",
        "id": 221490485,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609737833
    },
    {
        "content": "<p>I wonder if somehow the <code>Binder</code> is getting skipped during folding</p>",
        "id": 221490893,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609738477
    },
    {
        "content": "<p>Maybe something related to the <code>Borrow</code> impls around <code>Predicate</code> types</p>",
        "id": 221490901,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609738495
    },
    {
        "content": "<p>Okay...so think I found the problem</p>",
        "id": 221491381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609739282
    },
    {
        "content": "<p>(still speculation since I haven't tested)</p>",
        "id": 221491427,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609739297
    },
    {
        "content": "<p>But I think it comes down to the <code>TypeFoldable</code> impl for <code>Predicate</code></p>",
        "id": 221491432,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609739313
    },
    {
        "content": "<p>in that it impls <code>super_fold_with</code> but not <code>fold_with</code></p>",
        "id": 221491439,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609739335
    },
    {
        "content": "<p>Or, I guess, that the <code>super_fold_with</code> impl calls <code>inner.kind.super_fold_with</code> instead of <code>inner.kind.fold_with</code></p>",
        "id": 221491453,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609739375
    },
    {
        "content": "<p>On <code>Binder</code>, the former does <em>not</em> call <code>fold_binder</code>, the latter does</p>",
        "id": 221491512,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609739415
    },
    {
        "content": "<p>So, the binder index never gets incremented :/</p>",
        "id": 221491522,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609739445
    },
    {
        "content": "<p>Well, that does seems to be the issue</p>",
        "id": 221491925,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609740122
    },
    {
        "content": "<p>/me mumbles under his breath that he just jinxed it</p>",
        "id": 221491962,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609740142
    },
    {
        "content": "<p>That did it</p>",
        "id": 221492266,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609740619
    },
    {
        "content": "<p>Okay then</p>",
        "id": 221492268,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609740624
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/80679\">#80679</a></p>",
        "id": 221494445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1609743782
    }
]