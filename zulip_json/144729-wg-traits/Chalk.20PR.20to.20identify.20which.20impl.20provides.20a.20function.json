[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/726\">https://github.com/rust-lang/chalk/pull/726</a></p>\n<p>Here is a thread to discuss the above PR.</p>",
        "id": 251979132,
        "sender_full_name": "Jade",
        "timestamp": 1630738539
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 251979451,
        "sender_full_name": "Jade",
        "timestamp": 1630738880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325709\">@Jade</span> awesome!</p>",
        "id": 252471606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631111967
    },
    {
        "content": "<p>wow this is really cool!</p>",
        "id": 252539856,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1631138258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325709\">@Jade</span> </p>\n<blockquote>\n<p>Not quite: I want one domain goal for identifying the appropriate definition in impls, for all item types including constants and associated types, as proposed on the original r-a thread. Normalize would be kept as is and NormalizeFn would be changed.</p>\n</blockquote>\n<p>This seems reasonable, but should we merge the PR in the meantime?</p>",
        "id": 253468246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631732102
    },
    {
        "content": "<p>I'm not sure. I'll look at how hard it is to make it work today.</p>",
        "id": 253468670,
        "sender_full_name": "Jade",
        "timestamp": 1631732248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325709\">@Jade</span> any thoughts here?</p>",
        "id": 255048912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632749835
    },
    {
        "content": "<p>feel free to schedule something at <a href=\"https://calendly.com/nikomatsakis\">https://calendly.com/nikomatsakis</a></p>",
        "id": 255048935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632749845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I am unfortunately currently completely swamped with the triple of school, personal stuff, and burnout, and haven't looked at it since writing the extra tests. I believe there's a bug to find that was revealed by those added tests but I have not been in the right headspace to do so for a long time.</p>",
        "id": 255073995,
        "sender_full_name": "Jade",
        "timestamp": 1632758661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> <br>\nI'm wondering about what Niko wrote on the PR:</p>\n<blockquote>\n<p>I've been talking with @tmandry about the idea of exposing an associated type for every associated function. I think that is very likely to happen. That suggests that I was wrong to encourage you to split associated functions and associated types, and it would be better to combine the two.</p>\n</blockquote>\n<p>This seems to disregard associated consts, which we also need to be able to find the impl for. So it seem to me we still need something like this PR, even if we also have associated types for functions? Or do you see some other solution for consts?</p>",
        "id": 275970448,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1647787354
    },
    {
        "content": "<p>no context on this PR, but it doesn’t seem that unreasonable to have a similar thing for consts where using the name in type context (particularly bounds) gives you the type of the const. it would be useful if we allowed consts in traits to have <code>impl Trait</code> types</p>",
        "id": 276005112,
        "sender_full_name": "tmandry",
        "timestamp": 1647836534
    },
    {
        "content": "<p>though there’s some uncertainty on whether the function case should give you the <em>function type</em> (which is more general) or go straight to the return type of the function (which is pretty much always what you want)</p>",
        "id": 276005207,
        "sender_full_name": "tmandry",
        "timestamp": 1647836706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> ^</p>",
        "id": 276005271,
        "sender_full_name": "tmandry",
        "timestamp": 1647836792
    },
    {
        "content": "<p>this is for finding the actual implementation, so we don't need the type of the const, but rather the actual const item in the impl. same for functions, but there the idea was that the function type is enough since every function has its own type. but that's not going to work for consts</p>",
        "id": 276041430,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1647865175
    },
    {
        "content": "<p>I'm somewhat changing my opinion <em>again</em></p>",
        "id": 276100192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647889801
    },
    {
        "content": "<p>in part because I think we may not have those \"Associated types per method\"</p>",
        "id": 276100289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647889839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"426609\">@Michael Goulet (compiler-errors)</span> are you still looking into this?</p>",
        "id": 276100336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647889866
    },
    {
        "content": "<p>haven't gotten started on it yet</p>",
        "id": 276100834,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1647890104
    },
    {
        "content": "<p>was waiting on <a href=\"https://github.com/rust-lang/chalk/issues/745\">chalk#745</a> which split out the different associated kinds, was wondering if i should build on that or not</p>",
        "id": 276100892,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1647890140
    }
]