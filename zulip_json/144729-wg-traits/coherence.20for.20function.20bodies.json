[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>: <span class=\"user-mention\" data-user-id=\"199355\">@vlad</span> and I were discussing the problem of \"impls inside functions leak outside\". Do you think it makes sense to submit some RFC on the topic, just to start things moving? I think the delta which we want to apply (modulo backwards compat) is:</p>\n<ul>\n<li>tweak visibility rules for inherent methods such that they can't be pub, and can't be visible outside of block </li>\n<li>forbid <code>#[macro_export]</code> for local macros</li>\n<li>(the trickiest bit, and wg-traits turf, idea of <span class=\"user-mention\" data-user-id=\"200750\">@Vlad</span> ) treat bodies of functions as downstream crates from POV of coherence, such that impls inside bodies are allowed, but only if they can't inflerence type inference outside. </li>\n</ul>\n<p>It seems like we don't have capacity to work on this right now, but perhaps it makes sense to submit an RFC just to keep the problem documented?</p>",
        "id": 175790942,
        "sender_full_name": "matklad",
        "timestamp": 1568620710
    },
    {
        "content": "<p>It would be enough though to deprecate / lint against this with a message saying \"don't do this, or it won't work with IDEs\", right?</p>",
        "id": 175793845,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1568623465
    },
    {
        "content": "<p>Right, and <code>#[allow(leaking_impls)]</code> on the function would cause IDE to look inside</p>",
        "id": 175793886,
        "sender_full_name": "matklad",
        "timestamp": 1568623557
    },
    {
        "content": "<p>Like, the act of silencing the lint makes it non-problematic, which is a fun property :)</p>",
        "id": 175793941,
        "sender_full_name": "matklad",
        "timestamp": 1568623596
    },
    {
        "content": "<p>unless you silence it in the whole crate ;)</p>",
        "id": 175794211,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1568623813
    },
    {
        "content": "<p>I have been thinking about this a bit as well. I don't think I'd submit an <em>RFC</em> -- but it'd be nice to have some place to track it as a \"future idea\".</p>",
        "id": 176227706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569011260
    },
    {
        "content": "<p>What that place would be?</p>",
        "id": 176228004,
        "sender_full_name": "matklad",
        "timestamp": 1569011471
    },
    {
        "content": "<p>There is no good place right now I don't think</p>",
        "id": 176228259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569011713
    },
    {
        "content": "<p>But I dont' like using open RFCs for it, I know tha t:)</p>",
        "id": 176228270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569011722
    },
    {
        "content": "<p>I guess in theory issues on rust-lang/rfcs is the official place</p>",
        "id": 176228287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569011741
    },
    {
        "content": "<p>(I have wanted however to create something i the <a href=\"https://github.com/rust-lang/lang-team/\" target=\"_blank\" title=\"https://github.com/rust-lang/lang-team/\">lang-team</a> repository)</p>",
        "id": 176228303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569011762
    },
    {
        "content": "<p>but I didn't yet :)</p>",
        "id": 176228339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569011764
    },
    {
        "content": "<p>FWIW, I feel like my and <span class=\"user-mention silent\" data-user-id=\"200750\">Vlad</span> 's heads provide enough redundancy here, so no additional storage is required. Logistically, it maybe makes sense to thing about this once chalk is fully in production?</p>",
        "id": 176228418,
        "sender_full_name": "matklad",
        "timestamp": 1569011859
    }
]