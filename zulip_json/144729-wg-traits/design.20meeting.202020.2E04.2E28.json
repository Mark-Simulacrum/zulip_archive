[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 195618205,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104003
    },
    {
        "content": "<p>Meeting time</p>",
        "id": 195618236,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104012
    },
    {
        "content": "<p>We don't really have a lot on the agenda today</p>",
        "id": 195618315,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104042
    },
    {
        "content": "<p>(Everything that is there, I've literally added in the past couple hours)</p>",
        "id": 195618355,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104056
    },
    {
        "content": "<p>But, let's start with announcements</p>",
        "id": 195618377,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104064
    },
    {
        "content": "<p>And sprint progress</p>",
        "id": 195618391,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104067
    },
    {
        "content": "<p>link pls</p>",
        "id": 195618431,
        "sender_full_name": "Areredify",
        "timestamp": 1588104083
    },
    {
        "content": "<p><a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\" title=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\">https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both</a></p>",
        "id": 195618444,
        "sender_full_name": "detrumi",
        "timestamp": 1588104090
    },
    {
        "content": "<p>So, 2 weeks left in the sprint</p>",
        "id": 195618528,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104122
    },
    {
        "content": "<p>There were 5 PRs merged in the last week</p>",
        "id": 195618572,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104134
    },
    {
        "content": "<p>Some work on the book :)</p>",
        "id": 195618597,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104141
    },
    {
        "content": "<p>So, I reviewed the const generics PR and we are working out a list of test cases, preparing to land</p>",
        "id": 195618605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104145
    },
    {
        "content": "<p>Some pretty diagrams from <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 195618622,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104153
    },
    {
        "content": "<p>At this rate, I'm wondering if it's worth just adding const generics in the rustc PR</p>",
        "id": 195618659,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104178
    },
    {
        "content": "<p>interesting. quite possible.</p>",
        "id": 195618721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104210
    },
    {
        "content": "<p>I don't think it'll make a ton of difference either way</p>",
        "id": 195618757,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104224
    },
    {
        "content": "<p>Should we discuss const types while we are at it (do we need them for mvp?)</p>",
        "id": 195618765,
        "sender_full_name": "Areredify",
        "timestamp": 1588104227
    },
    {
        "content": "<p>ah interesting</p>",
        "id": 195618792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104236
    },
    {
        "content": "<p>Consts weren't part of the mvp</p>",
        "id": 195618799,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104240
    },
    {
        "content": "<p>If there's something to discuss here, let's add it to the agenda for today</p>",
        "id": 195618961,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104286
    },
    {
        "content": "<p>I think we should leave consts out</p>",
        "id": 195618964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104287
    },
    {
        "content": "<p>but yes, let's discuss <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 195618991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104294
    },
    {
        "content": "<p>I'm looking over the other items</p>",
        "id": 195619005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104297
    },
    {
        "content": "<p>but let's get through annoucements first</p>",
        "id": 195619015,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104303
    },
    {
        "content": "<p>Would make it harder to change const handling later, if needed</p>",
        "id": 195619026,
        "sender_full_name": "detrumi",
        "timestamp": 1588104307
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>* explore converting semantic-to-syntactic equality\n</code></pre></div>\n\n\n</blockquote>",
        "id": 195619077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> opened a PR here, right?</p>",
        "id": 195619086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104330
    },
    {
        "content": "<p>Yes, I did do that</p>",
        "id": 195619116,
        "sender_full_name": "Areredify",
        "timestamp": 1588104340
    },
    {
        "content": "<p>maybe next on my review list :)</p>",
        "id": 195619117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104340
    },
    {
        "content": "<p>yes there's a WIP pr</p>",
        "id": 195619127,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104344
    },
    {
        "content": "<p>also <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> opened a PR around impl trait generics</p>",
        "id": 195619245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104382
    },
    {
        "content": "<p>which things landed, do we have updates and shout-outs for those?</p>",
        "id": 195619262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104389
    },
    {
        "content": "<p>It's only for aliases types as of now, and it fails on 1 test</p>",
        "id": 195619313,
        "sender_full_name": "Areredify",
        "timestamp": 1588104409
    },
    {
        "content": "<p>also, there is work on built-in traits, I'm not sure which bullet point that falls under...</p>",
        "id": 195619335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195619245\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195619245\">said</a>:</p>\n<blockquote>\n<p>also <span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> opened a PR around impl trait generics</p>\n</blockquote>\n<p>Yeah, though at this point I'm not sure that was the right thing to start with</p>",
        "id": 195619348,
        "sender_full_name": "detrumi",
        "timestamp": 1588104426
    },
    {
        "content": "<p>is work on <code>Unsize</code> stalled on that refactoring in rustc you were talking about?</p>",
        "id": 195619409,
        "sender_full_name": "Areredify",
        "timestamp": 1588104463
    },
    {
        "content": "<p>hmm</p>",
        "id": 195619432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104475
    },
    {
        "content": "<p>Is <code>Unsize</code> work stalled?</p>",
        "id": 195619442,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104480
    },
    {
        "content": "<p>no, but it'd be good for me to take down as two work items to write out those two things and point you at them</p>",
        "id": 195619490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104486
    },
    {
        "content": "<p>in particular</p>",
        "id": 195619551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104514
    },
    {
        "content": "<p>I was somewhat absent for the past week (or two), but now im going strong again <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span></p>",
        "id": 195619564,
        "sender_full_name": "Areredify",
        "timestamp": 1588104519
    },
    {
        "content": "<p>I can create a chalk issue and point at the relevant code in rustc that implemented the <code>Unsize</code> check,</p>",
        "id": 195619585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104525
    },
    {
        "content": "<p>I can do that after this meeting readily enough</p>",
        "id": 195619612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104534
    },
    {
        "content": "<p>I will also open a rustc issue about the refactoring</p>",
        "id": 195619631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104543
    },
    {
        "content": "<p>I think that fits .. well  .. it doesn't really fit :) but sort of fits within the \"align rustc/chalk\" heading</p>",
        "id": 195619673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104558
    },
    {
        "content": "<p>Totally fits</p>",
        "id": 195619690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195619631\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195619631\">said</a>:</p>\n<blockquote>\n<p>I will also open a rustc issue about the refactoring</p>\n</blockquote>\n<p>maybe I already did, I forget sometimes how many issues I've opened over the years :P</p>",
        "id": 195619695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104569
    },
    {
        "content": "<p>sometimes I stumble on an issue and I'm like \"oh, yeah, this is perfect\"</p>",
        "id": 195619741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104586
    },
    {
        "content": "<p>Okay, any other announcements?</p>",
        "id": 195619837,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104608
    },
    {
        "content": "<p>so where does the work on <code>Sized</code> trait and <code>Copy</code> trait etc go?</p>",
        "id": 195619887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104621
    },
    {
        "content": "<p>we landed the \"basic builtin types\" too, this week, I think, right?</p>",
        "id": 195619901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104629
    },
    {
        "content": "<p>I'd be curious to sync up on built-in traits and types and what the next steps are</p>",
        "id": 195619918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104636
    },
    {
        "content": "<p>yes</p>",
        "id": 195619935,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104641
    },
    {
        "content": "<p>I guess that was directed towards rustc integration MVP</p>",
        "id": 195619962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104652
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/368\" title=\"https://github.com/rust-lang/chalk/issues/368\">https://github.com/rust-lang/chalk/issues/368</a> this issue should be updated</p>",
        "id": 195619979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104661
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/363\" title=\"https://github.com/rust-lang/chalk/issues/363\">https://github.com/rust-lang/chalk/issues/363</a></p>",
        "id": 195620008,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104680
    },
    {
        "content": "<p>that issue is for builtin traits</p>",
        "id": 195620024,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104687
    },
    {
        "content": "<p>so which of these boxes should be checked</p>",
        "id": 195620078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104715
    },
    {
        "content": "<p>seems like, after <a href=\"https://github.com/rust-lang/chalk/pull/413\" title=\"https://github.com/rust-lang/chalk/pull/413\">https://github.com/rust-lang/chalk/pull/413</a>, we have sized/copy/clone?</p>",
        "id": 195620155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104740
    },
    {
        "content": "<p><code>Sized</code> and <code>Copy</code> are up to date with types that are implemented in chalk (after merging <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> 's pr, that is), <code>Drop</code> is finished I think.</p>",
        "id": 195620164,
        "sender_full_name": "Areredify",
        "timestamp": 1588104746
    },
    {
        "content": "<p>ok, not clone?</p>",
        "id": 195620191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104760
    },
    {
        "content": "<p>Oh, and <code>Clone</code> too</p>",
        "id": 195620218,
        "sender_full_name": "Areredify",
        "timestamp": 1588104775
    },
    {
        "content": "<p>scalars and tuples are added</p>",
        "id": 195620230,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104781
    },
    {
        "content": "<p>Right now, everything that is Copy is Clone</p>",
        "id": 195620240,
        "sender_full_name": "marmeladema",
        "timestamp": 1588104785
    },
    {
        "content": "<p>(sorry to jump in)</p>",
        "id": 195620267,
        "sender_full_name": "marmeladema",
        "timestamp": 1588104799
    },
    {
        "content": "<p>I think the only thing missing from <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span>'s PR is that we should add a test for that</p>",
        "id": 195620369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104839
    },
    {
        "content": "<p>So I wouldn't tick them off as \"complete\" until we finish adding all the types in chalk</p>",
        "id": 195620438,
        "sender_full_name": "Areredify",
        "timestamp": 1588104852
    },
    {
        "content": "<p>which I was about to leave as a comment</p>",
        "id": 195620442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104854
    },
    {
        "content": "<p>Yep, that's close</p>",
        "id": 195620446,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104856
    },
    {
        "content": "<p>Ok i'll add tests for that</p>",
        "id": 195620505,
        "sender_full_name": "marmeladema",
        "timestamp": 1588104880
    },
    {
        "content": "<p>(but I'm not sure why you say that everything which is copy is clone, <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span>, not sure that will \"fall out\", I wouldn't think so, unless we have some suitable code)</p>",
        "id": 195620511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104883
    },
    {
        "content": "<p>the problem I guess with the two issues is that</p>",
        "id": 195620635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104931
    },
    {
        "content": "<p>really support is a kind of \"matrix\"</p>",
        "id": 195620643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104934
    },
    {
        "content": "<p>maybe we should try to write that out..</p>",
        "id": 195620664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104941
    },
    {
        "content": "<p>That would be helpful I think</p>",
        "id": 195620696,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588104953
    },
    {
        "content": "<p>I might have used the wrong terminology because all of this is totally new area for me but: <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/clauses/builtin_traits/clone.rs#L16\" title=\"https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/clauses/builtin_traits/clone.rs#L16\">https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/clauses/builtin_traits/clone.rs#L16</a> it pushes the same clause for the Clone trait as for the Copy trait</p>",
        "id": 195620780,
        "sender_full_name": "marmeladema",
        "timestamp": 1588104976
    },
    {
        "content": "<p>i.e., there is like</p>\n<table>\n<thead>\n<tr>\n<th>trait</th>\n<th>scalar types</th>\n<th>closure types</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Basic support</td>\n<td><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td><span aria-label=\"grey question\" class=\"emoji emoji-2754\" role=\"img\" title=\"grey question\">:grey_question:</span></td>\n</tr>\n<tr>\n<td>Copy</td>\n<td><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></td>\n<td><span aria-label=\"grey question\" class=\"emoji emoji-2754\" role=\"img\" title=\"grey question\">:grey_question:</span></td>\n</tr>\n</tbody>\n</table>",
        "id": 195620808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104996
    },
    {
        "content": "<p>or whatever</p>",
        "id": 195620816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588104998
    },
    {
        "content": "<p>ok, that's exactly the line I was looking for, thanks <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span></p>",
        "id": 195620846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105017
    },
    {
        "content": "<p>(I think part of that is <em>where</em> these impls are. Whether they are builtin, in libcore, or not)</p>",
        "id": 195620912,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105056
    },
    {
        "content": "<p>yep</p>",
        "id": 195620964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105081
    },
    {
        "content": "<p>Anyways, maybe we should defer this to after the meeting?</p>",
        "id": 195621001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105083
    },
    {
        "content": "<p>that would be a super useful chart really</p>",
        "id": 195621004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105084
    },
    {
        "content": "<p>18 minutes in</p>",
        "id": 195621016,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105088
    },
    {
        "content": "<p>yes, let's make an issue</p>",
        "id": 195621021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105091
    },
    {
        "content": "<p>to work it out</p>",
        "id": 195621024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105093
    },
    {
        "content": "<p>it could go in the chalk book</p>",
        "id": 195621033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105097
    },
    {
        "content": "<p>Agreed</p>",
        "id": 195621046,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105101
    },
    {
        "content": "<p>I'm doing that</p>",
        "id": 195621067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105112
    },
    {
        "content": "<p>feel free to take us to another topic</p>",
        "id": 195621076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105115
    },
    {
        "content": "<p>Anyways, moving on</p>",
        "id": 195621081,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105117
    },
    {
        "content": "<p>We already discussed this a bit, but release</p>",
        "id": 195621103,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105126
    },
    {
        "content": "<p>I think we should do a release now</p>",
        "id": 195621151,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105143
    },
    {
        "content": "<p>Are releases relevant for the rustc integration PR, or do we just want to start asap?</p>",
        "id": 195621202,
        "sender_full_name": "detrumi",
        "timestamp": 1588105169
    },
    {
        "content": "<p>Well, I have to PR adding <code>Copy</code> derive to chalk interned wrapper types, but after that, we have everything we need</p>",
        "id": 195621209,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105174
    },
    {
        "content": "<p>yes, it is</p>",
        "id": 195621221,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105177
    },
    {
        "content": "<p>We have to have a release on <a href=\"http://crates.io\" title=\"http://crates.io\">crates.io</a> for rustc PR</p>",
        "id": 195621246,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105187
    },
    {
        "content": "<p>that reminds me</p>",
        "id": 195621396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105236
    },
    {
        "content": "<p>So, unless anyone has any objections, we should do that in the next day or two?</p>",
        "id": 195621401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105240
    },
    {
        "content": "<p>the tracing Pr looked great but I was not sure if we want to add tracing as a pre-req for rustc</p>",
        "id": 195621419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105248
    },
    {
        "content": "<p>(and I think we should perhaps try to align chalk/rustc logging, even? though not necessarily)</p>",
        "id": 195621437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105259
    },
    {
        "content": "<p>I have no objection to issuing a release, in any case</p>",
        "id": 195621457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105274
    },
    {
        "content": "<p>mmm, not sure</p>",
        "id": 195621459,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105274
    },
    {
        "content": "<p>tracing can just output normal logging that rustc accepts</p>",
        "id": 195621486,
        "sender_full_name": "detrumi",
        "timestamp": 1588105291
    },
    {
        "content": "<p>I think that's something easily done in a followup PR</p>",
        "id": 195621495,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105295
    },
    {
        "content": "<p>I also happen to thikn it'd be great if we used tracing <em>in</em> rustc, though <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span>'s comments the other day gave me a bit of pause that maybe it doesn't do all I had hoped it would do</p>",
        "id": 195621507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105300
    },
    {
        "content": "<p>Which comments?</p>",
        "id": 195621544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105320
    },
    {
        "content": "<p>I'm assuming that tracing will need some more work to get it fully working for rustc, and it's not actually that important for the first integration</p>",
        "id": 195621664,
        "sender_full_name": "detrumi",
        "timestamp": 1588105361
    },
    {
        "content": "<p>Right</p>",
        "id": 195621722,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105394
    },
    {
        "content": "<p>(might also require more buy-in from other rustc devs)</p>",
        "id": 195621760,
        "sender_full_name": "detrumi",
        "timestamp": 1588105420
    },
    {
        "content": "<p>Okay, for release I'll talk with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> after the meeting (sync or async) and get that done</p>",
        "id": 195621762,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105421
    },
    {
        "content": "<p>Niko is MIA</p>",
        "id": 195621844,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105456
    },
    {
        "content": "<p>Sorry, I'm back :)</p>",
        "id": 195621882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195621544\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195621544\">said</a>:</p>\n<blockquote>\n<p>Which comments?</p>\n</blockquote>\n<p>I meant that maybe it doesn't support nested hierarchical stuff as well as I hoped</p>",
        "id": 195621909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105494
    },
    {
        "content": "<p>Oh, I actually don't know</p>",
        "id": 195621934,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195621664\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195621664\">said</a>:</p>\n<blockquote>\n<p>I'm assuming that tracing will need some more work to get it fully working for rustc, and it's not actually that important for the first integration</p>\n</blockquote>\n<p>yeah that would be a big job</p>",
        "id": 195621936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105508
    },
    {
        "content": "<p>my main point is that I don't think we want to add a bunch of deps to rustc willy nilly</p>",
        "id": 195621957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105517
    },
    {
        "content": "<p>anyway maybe it doesn't matter, and tracing is only one random one</p>",
        "id": 195621986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105538
    },
    {
        "content": "<p>we should take a moment to look though at the deps as part of the release</p>",
        "id": 195622011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105554
    },
    {
        "content": "<p>we can do that async</p>",
        "id": 195622013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105558
    },
    {
        "content": "<p>I looked shortly</p>",
        "id": 195622063,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105569
    },
    {
        "content": "<p>opened <em>document the \"built-in trait impls\" and where they live</em> <a href=\"https://github.com/rust-lang-nursery/chalk/issues/416\" title=\"https://github.com/rust-lang-nursery/chalk/issues/416\">chalk#416</a> , btw</p>",
        "id": 195622073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105575
    },
    {
        "content": "<p>Not that much that isn't already there</p>",
        "id": 195622085,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105578
    },
    {
        "content": "<p><code>petgraph</code> was the only \"new\" one</p>",
        "id": 195622114,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105592
    },
    {
        "content": "<p>okay, let's move on</p>",
        "id": 195622135,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105604
    },
    {
        "content": "<p>hmm, we use petgraph? :)</p>",
        "id": 195622137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105605
    },
    {
        "content": "<p>in chalk-solve for coherence</p>",
        "id": 195622147,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105614
    },
    {
        "content": "<p>oh</p>",
        "id": 195622158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105619
    },
    {
        "content": "<p>how random</p>",
        "id": 195622159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105621
    },
    {
        "content": "<p>ok</p>",
        "id": 195622161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105622
    },
    {
        "content": "<p>So, I merged a PR to add link checking for mdbook</p>",
        "id": 195622231,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105653
    },
    {
        "content": "<p>/me goes to get link</p>",
        "id": 195622259,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105665
    },
    {
        "content": "<p>oh, Niko merged</p>",
        "id": 195622329,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105686
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/408\" title=\"https://github.com/rust-lang/chalk/pull/408\">https://github.com/rust-lang/chalk/pull/408</a></p>",
        "id": 195622330,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105686
    },
    {
        "content": "<p>Right, so the question was whether to block the build on that</p>",
        "id": 195622331,
        "sender_full_name": "detrumi",
        "timestamp": 1588105686
    },
    {
        "content": "<p>Yeah, so I noticed the latest build is broken</p>",
        "id": 195622358,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105702
    },
    {
        "content": "<p>answer is yes then?</p>",
        "id": 195622371,
        "sender_full_name": "detrumi",
        "timestamp": 1588105713
    },
    {
        "content": "<p>Maybe the url was down</p>",
        "id": 195622375,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105715
    },
    {
        "content": "<p>but it's up now</p>",
        "id": 195622388,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105721
    },
    {
        "content": "<p>but that stops the book from building/deploying, as well as docs</p>",
        "id": 195622419,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105739
    },
    {
        "content": "<p>hmm</p>",
        "id": 195622431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105744
    },
    {
        "content": "<p>maybe I merged prematurely?</p>",
        "id": 195622448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105750
    },
    {
        "content": "<p>Maybe</p>",
        "id": 195622455,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105756
    },
    {
        "content": "<p>didn't realize it'd be a bit flakey</p>",
        "id": 195622467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105759
    },
    {
        "content": "<p>we could have it give a \"warning\" only or something, probably</p>",
        "id": 195622478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105765
    },
    {
        "content": "<p>This was something I sort of thought about</p>",
        "id": 195622480,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105765
    },
    {
        "content": "<p>but a bit differently</p>",
        "id": 195622493,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105772
    },
    {
        "content": "<p>I think we should probably make it fail the build, but after deploying docs and book</p>",
        "id": 195622542,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105796
    },
    {
        "content": "<p>or like release, if we do that,</p>",
        "id": 195622621,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105812
    },
    {
        "content": "<p>Wait, so is <code>Install mdbook-linkcheck</code> failing? How is that more flaky than <code>Install mdbook</code>?</p>",
        "id": 195622640,
        "sender_full_name": "detrumi",
        "timestamp": 1588105823
    },
    {
        "content": "<p>No</p>",
        "id": 195622703,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105845
    },
    {
        "content": "<p>\"Run Chalk book\"</p>",
        "id": 195622716,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105851
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: Unable to retrieve &quot;https://dl.acm.org/citation.cfm?id=868380&quot;: https://dl.acm.org/citation.cfm?id=868380: timed out\n\n    ┌── bibliography.md:20:1 ───\n    │\n 20 │ [&quot;A proof procedure for the logic of Hereditary Harrop formulas&quot;](https://dl.acm.org/citation.cfm?id=868380),\n    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ https://dl.acm.org/citation.cfm?id=868380: timed out\n    │\n</code></pre></div>",
        "id": 195622724,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105855
    },
    {
        "content": "<p>Oh lol</p>",
        "id": 195622748,
        "sender_full_name": "detrumi",
        "timestamp": 1588105866
    },
    {
        "content": "<p>Basically, I brought this up so we should decide one of:</p>",
        "id": 195622785,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105885
    },
    {
        "content": "<p>1) This doesn't matter<br>\n2) We should fully revert PR for now<br>\n3) We should make this check-only</p>",
        "id": 195622837,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105910
    },
    {
        "content": "<p>I'd be inclined to go with check-only, if that's easy to do</p>",
        "id": 195622928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105945
    },
    {
        "content": "<p>I'm not 100% sure what check-only means tbh</p>",
        "id": 195622938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105951
    },
    {
        "content": "<p>do you mean \"only do it on PR builds\" and not \"master branch builds\"?</p>",
        "id": 195622957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105961
    },
    {
        "content": "<p>which btw makes some sense to me :)</p>",
        "id": 195622972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105968
    },
    {
        "content": "<p>or do you just mean that, if it fails, we only issue a 'warning' of some kind?</p>",
        "id": 195623002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588105984
    },
    {
        "content": "<p>that's a better idea than what I had</p>",
        "id": 195623017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588105993
    },
    {
        "content": "<p>really either of these seem ok. I think that once things land on the master branch, we shouldn't bother to check URLs</p>",
        "id": 195623036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106000
    },
    {
        "content": "<p>If it shows a green checkmark even if the link check fails, then I'm not sure we'll notice it very often</p>",
        "id": 195623039,
        "sender_full_name": "detrumi",
        "timestamp": 1588106001
    },
    {
        "content": "<p>but we can check PRs..</p>",
        "id": 195623059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195623039\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195623039\">said</a>:</p>\n<blockquote>\n<p>If it shows a green checkmark even if the link check fails, then I'm not sure we'll notice it very often</p>\n</blockquote>\n<p>agreed, it has to be quite visible</p>",
        "id": 195623099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106033
    },
    {
        "content": "<p>right, so I <em>was</em> thinking the build \"fails\" so it's an X, but everything gets built and uploaded</p>",
        "id": 195623101,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106034
    },
    {
        "content": "<p>seems like we can just ignore this on master</p>",
        "id": 195623155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106045
    },
    {
        "content": "<p>it's either transient</p>",
        "id": 195623163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106048
    },
    {
        "content": "<p>in which case we don't care</p>",
        "id": 195623176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106053
    },
    {
        "content": "<p>or it's not, in which case we'll see it on PRs</p>",
        "id": 195623184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106059
    },
    {
        "content": "<p>Okay, I'll open a PR for that then</p>",
        "id": 195623245,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106093
    },
    {
        "content": "<p>Moving on?</p>",
        "id": 195623255,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106097
    },
    {
        "content": "<blockquote>\n<p><code>from_fallible</code> on <code>Interner</code> list-like types</p>\n</blockquote>",
        "id": 195623267,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106107
    },
    {
        "content": "<p>Was briefly discussing this with Niko right before the meeting</p>",
        "id": 195623294,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106123
    },
    {
        "content": "<p>But essentially, <code>Substitution</code> does this backwards from the other interned wrapper types</p>",
        "id": 195623437,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106172
    },
    {
        "content": "<p>Where it calls <code>from_fallible</code> from <code>from</code>. And it's up to the <code>Interner</code> to collect the error</p>",
        "id": 195623511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106215
    },
    {
        "content": "<p>Whereas the other types collect into an intermediate <code>Vec</code> in <code>from_fallible</code> then call <code>from</code></p>",
        "id": 195623549,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106238
    },
    {
        "content": "<p>So, for the rustc integration PR, to do interning, what should we do?</p>",
        "id": 195623584,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106258
    },
    {
        "content": "<p>it seems like</p>",
        "id": 195623673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106295
    },
    {
        "content": "<p>longer term, it makes sense to me that the 'primitive' operation accommodates <code>Result</code></p>",
        "id": 195623687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106304
    },
    {
        "content": "<p>but in the short term, I don't care :P</p>",
        "id": 195623701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106312
    },
    {
        "content": "<p>and I don't necessarily think I would want to refactor rustc right now :)</p>",
        "id": 195623717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106321
    },
    {
        "content": "<p>that said, the chalk integration PR could just do the \"collect to vector\" thing in its impl</p>",
        "id": 195623735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106334
    },
    {
        "content": "<p>but I agree they should be uniform</p>",
        "id": 195623747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195623735\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195623735\">said</a>:</p>\n<blockquote>\n<p>that said, the chalk integration PR could just do the \"collect to vector\" thing in its impl</p>\n</blockquote>\n<p>I think this is what I would favor</p>",
        "id": 195623756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106347
    },
    {
        "content": "<p>Ok, then for now I'm going to change <code>Substitution</code> to do what the other types do</p>",
        "id": 195623778,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106370
    },
    {
        "content": "<p>Or...I could just switch them all around</p>",
        "id": 195623806,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106390
    },
    {
        "content": "<p>Yeah, I'll switch them all to be like Substitution</p>",
        "id": 195623875,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106415
    },
    {
        "content": "<p>right, I was saying that <em>ideally</em> I think we'd switch everything so that the trait offers the fallible alternative</p>",
        "id": 195623887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106419
    },
    {
        "content": "<p>( and then bridge it in rustc in the 'hacky' way )</p>",
        "id": 195623901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106428
    },
    {
        "content": "<p>Works for me</p>",
        "id": 195623919,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106438
    },
    {
        "content": "<p>Ok, last thing on the agenda</p>",
        "id": 195623953,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106461
    },
    {
        "content": "<p>Implied bounds</p>",
        "id": 195623963,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106465
    },
    {
        "content": "<p>Sort of fallover from last week</p>",
        "id": 195623973,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106474
    },
    {
        "content": "<p>Did we have something we still needed to talk about?</p>",
        "id": 195623981,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106484
    },
    {
        "content": "<p>(And want to)</p>",
        "id": 195623984,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106489
    },
    {
        "content": "<p>I was wondering whether they were relevant for opaque types</p>",
        "id": 195623997,
        "sender_full_name": "detrumi",
        "timestamp": 1588106501
    },
    {
        "content": "<p>hmm, we never did the follow-up around the \"external iteration\"</p>",
        "id": 195624004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106508
    },
    {
        "content": "<p>but I don't think now's necessarily the best time for <em>that</em></p>",
        "id": 195624017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195623997\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195623997\">said</a>:</p>\n<blockquote>\n<p>I was wondering whether they were relevant for opaque types</p>\n</blockquote>\n<p>this is a good question tho</p>",
        "id": 195624035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106522
    },
    {
        "content": "<p>Can you give a brief overview?</p>",
        "id": 195624118,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106566
    },
    {
        "content": "<p>I think the way to model opaque types is going to be that</p>\n<div class=\"codehilite\"><pre><span></span><code>type Foo: Debug\n</code></pre></div>\n\n\n<p>is <code>FromEnv(!Foo: Debug)</code> (which is probably not what we did)</p>",
        "id": 195624119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106566
    },
    {
        "content": "<p>Haven't followed</p>",
        "id": 195624122,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106569
    },
    {
        "content": "<p>Right, we do <code>Implemented(!Foo: Debug)</code> currently</p>",
        "id": 195624170,
        "sender_full_name": "detrumi",
        "timestamp": 1588106612
    },
    {
        "content": "<p>(this is related to the <code>dyn</code> PR that <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> opened)</p>",
        "id": 195624178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106616
    },
    {
        "content": "<p>Yeah, I think that was wrong</p>",
        "id": 195624182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106620
    },
    {
        "content": "<p>because</p>",
        "id": 195624184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106622
    },
    {
        "content": "<p>well, two reasons</p>",
        "id": 195624193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106628
    },
    {
        "content": "<p>the practical one: if you have <code>type Foo: Copy</code>, we wouldn't be able to infer that <code>!Foo: Clone</code></p>",
        "id": 195624237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106643
    },
    {
        "content": "<p>because we only do that \"transitive\" reasoning when we can prove <code>FromEnv</code></p>",
        "id": 195624273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106656
    },
    {
        "content": "<p>conceptually, this is a <code>FromEnv</code> as well -- i.e., <em>somebody else</em> has proven that <code>!Foo: Copy</code>, it's not our job</p>",
        "id": 195624285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106669
    },
    {
        "content": "<p>that \"somebody else\" would be the 'well formedness checks'</p>",
        "id": 195624309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106686
    },
    {
        "content": "<p>Right, this is very similar to how associated types work, those also have rules with <code>FromEnv</code></p>",
        "id": 195624368,
        "sender_full_name": "detrumi",
        "timestamp": 1588106723
    },
    {
        "content": "<p>yep, exactly</p>",
        "id": 195624416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106747
    },
    {
        "content": "<p>/me is lost</p>",
        "id": 195624501,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106773
    },
    {
        "content": "<p>(I'm just pondering now if there are weird cycles that can arise) :)</p>",
        "id": 195624526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195624501\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195624501\">said</a>:</p>\n<blockquote>\n<p>/me is lost</p>\n</blockquote>\n<p>just in general, or some specific part :)</p>",
        "id": 195624542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106796
    },
    {
        "content": "<p>in general</p>",
        "id": 195624575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106817
    },
    {
        "content": "<p>not sure what the problems/questions here are</p>",
        "id": 195624597,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106827
    },
    {
        "content": "<p>But that's okay</p>",
        "id": 195624602,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588106832
    },
    {
        "content": "<p>In short, the rules <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/clauses/program_clauses.rs#L127\" title=\"https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/clauses/program_clauses.rs#L127\">here</a> use <code>Implemented</code> instead of <code>FromEnv</code></p>",
        "id": 195624612,
        "sender_full_name": "detrumi",
        "timestamp": 1588106842
    },
    {
        "content": "<p>ok well there are kind of \"two\" questions that might be raised</p>",
        "id": 195624632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106850
    },
    {
        "content": "<p>the first, which is what we were discussing, is that we should remember to think always whether to use <code>Implemented</code> or <code>FromEnv</code></p>",
        "id": 195624661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106873
    },
    {
        "content": "<p>I think this comes back to the question of names, I think those names are suboptimal :)</p>",
        "id": 195624679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106880
    },
    {
        "content": "<p>in particular <code>Implemented</code> should really correspond 1-to-1 with an <em>impl</em></p>",
        "id": 195624726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106888
    },
    {
        "content": "<p>and there is no \"impl\" here</p>",
        "id": 195624733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106894
    },
    {
        "content": "<p><code>HasImpl</code></p>",
        "id": 195624742,
        "sender_full_name": "detrumi",
        "timestamp": 1588106900
    },
    {
        "content": "<p>right</p>",
        "id": 195624752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106904
    },
    {
        "content": "<p>and one bit of <em>fallout</em> from using the wrong one is that you don't get transitive reasoning</p>",
        "id": 195624775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106917
    },
    {
        "content": "<p>because of the design we talked about last time</p>",
        "id": 195624787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588106923
    },
    {
        "content": "<p>That makes me wonder why we still use <code>Implemented</code> in other places, or if that will run into the same problems</p>",
        "id": 195624925,
        "sender_full_name": "detrumi",
        "timestamp": 1588106993
    },
    {
        "content": "<p>(i.e., if you know <code>Implemented(X: Copy)</code>, that doesn't let you prove that <code>Implemented(X: Clone)</code>)</p>",
        "id": 195624969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107003
    },
    {
        "content": "<p>(and the reasons for this are clear enough if you think of it as <code>HasImpl</code>)</p>",
        "id": 195624995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195624925\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E28/near/195624925\">said</a>:</p>\n<blockquote>\n<p>That makes me wonder why we still use <code>Implemented</code> in other places, or if that will run into the same problems</p>\n</blockquote>\n<p>yes I think we should audit a bit, I suspect I was wrong, I wans't thinking quite as much about this</p>",
        "id": 195625031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107030
    },
    {
        "content": "<p>So, <code>HasImpl</code> also is somewhat...weird. Since Chalk generates rules <code>Implemented(T: Foo) :- FromEnv(T: Foo)</code></p>",
        "id": 195625061,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588107051
    },
    {
        "content": "<p>Ah, yeah, that's true</p>",
        "id": 195625251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107127
    },
    {
        "content": "<p>well wait</p>",
        "id": 195625259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107131
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 195625265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107132
    },
    {
        "content": "<p>\"we can conclude there is an impl for Foo if somebody else has proven it for us\"</p>",
        "id": 195625286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107143
    },
    {
        "content": "<p>an alternative name for <code>FromEnv</code> is <code>FullyImplemented</code></p>",
        "id": 195625306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107155
    },
    {
        "content": "<p>er, wait</p>",
        "id": 195625327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107170
    },
    {
        "content": "<p>that was an alternative name for <code>WellFormed(T: Trait)</code></p>",
        "id": 195625339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107177
    },
    {
        "content": "<p>that <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> and I kicked around at some point</p>",
        "id": 195625353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107187
    },
    {
        "content": "<p>i.e, <code>T: Trait</code> is true but also all the where-clauses on <code>Trait</code></p>",
        "id": 195625366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107197
    },
    {
        "content": "<p>Names are hard</p>",
        "id": 195625421,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588107231
    },
    {
        "content": "<p>Okay, 6 minutes left</p>",
        "id": 195625569,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588107294
    },
    {
        "content": "<p>Anything else we need to dicuss</p>",
        "id": 195625584,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588107303
    },
    {
        "content": "<p>ⁿᵒᵗ ᵗᵒᵒ ˡᵃᵗᵉ ᵗᵒ ʳᵉⁿᵃᵐᵉ ᵉᵛᵉʳʸᵗʰᶦⁿᵍ</p>",
        "id": 195625594,
        "sender_full_name": "Areredify",
        "timestamp": 1588107309
    },
    {
        "content": "<p>or anything anybody wants to bring up?</p>",
        "id": 195625599,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588107311
    },
    {
        "content": "<p>If not, we can end a little early</p>",
        "id": 195625658,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588107344
    },
    {
        "content": "<p>Do consts need types?</p>",
        "id": 195625661,
        "sender_full_name": "Areredify",
        "timestamp": 1588107345
    },
    {
        "content": "<p>Or did we postpone this one</p>",
        "id": 195625679,
        "sender_full_name": "Areredify",
        "timestamp": 1588107352
    },
    {
        "content": "<p>We can briefly discuss</p>",
        "id": 195625691,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588107361
    },
    {
        "content": "<p>well, it's connected to the rustc integration pr</p>",
        "id": 195625731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107363
    },
    {
        "content": "<p>what exactly is the question here?</p>",
        "id": 195625762,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588107382
    },
    {
        "content": "<p>Is there any need for consts to be typed?</p>",
        "id": 195625807,
        "sender_full_name": "Areredify",
        "timestamp": 1588107412
    },
    {
        "content": "<p>so, in rustc</p>",
        "id": 195625856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107437
    },
    {
        "content": "<p>a \"constant\" includes both its value <em>and</em> a type</p>",
        "id": 195625872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107445
    },
    {
        "content": "<p>If everything passed to chalk is considered well-fomed, there is no strong need for that</p>",
        "id": 195625875,
        "sender_full_name": "Areredify",
        "timestamp": 1588107446
    },
    {
        "content": "<p>Oh, I see</p>",
        "id": 195625902,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588107465
    },
    {
        "content": "<p>as you can see here, in <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Const.html\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Const.html\"><code>Const</code></a></p>",
        "id": 195625927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107479
    },
    {
        "content": "<p>Well, we want Chalk to do well-formed checks eventually too</p>",
        "id": 195625930,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588107480
    },
    {
        "content": "<p>I think we are probably going to want to do this</p>",
        "id": 195625982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107488
    },
    {
        "content": "<p>yes, I just clicked the link in the PR comment</p>",
        "id": 195625990,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588107492
    },
    {
        "content": "<p>in particular, constants can be \"bag of bits\"</p>",
        "id": 195625998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107495
    },
    {
        "content": "<p>I think this is correct to add</p>",
        "id": 195626016,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588107506
    },
    {
        "content": "<p>if you loko at <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/interpret/enum.ConstValue.html\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/interpret/enum.ConstValue.html\"><code>ConstValue</code></a> in rustc</p>",
        "id": 195626039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107515
    },
    {
        "content": "<p>you see that beyond simple integers like 1 or 2</p>",
        "id": 195626052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107520
    },
    {
        "content": "<p>we can support \"allocations\"</p>",
        "id": 195626060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107523
    },
    {
        "content": "<p>which are really just bits</p>",
        "id": 195626069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107527
    },
    {
        "content": "<p>they have to be \"interpreted\" relative to some type</p>",
        "id": 195626081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107533
    },
    {
        "content": "<p>i.e., <code>(2, 2)</code> and <code>struct Foo(i32, i32)</code> are the same at the <code>Allocation</code> level</p>",
        "id": 195626113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107550
    },
    {
        "content": "<p>but quite distinct with respect to their type</p>",
        "id": 195626125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107556
    },
    {
        "content": "<p>/me is remembering this right now ;)</p>",
        "id": 195626133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107562
    },
    {
        "content": "<p>so yeah I think that for a constant value to be complete, it will need to carry its type along with it</p>",
        "id": 195626168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107584
    },
    {
        "content": "<p>we may not <em>use</em> that type for much in <em>chalk</em></p>",
        "id": 195626177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107590
    },
    {
        "content": "<p>but the aim is for chalk's definition of a constant and rustc's defintiion to be <em>the same thing</em> eventually</p>",
        "id": 195626228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107603
    },
    {
        "content": "<p>which...they eventually will be</p>",
        "id": 195626271,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588107629
    },
    {
        "content": "<p>it actually should be cheap to use because we can use <code>==</code> to compare types of two consts, right?</p>",
        "id": 195626306,
        "sender_full_name": "Areredify",
        "timestamp": 1588107652
    },
    {
        "content": "<p>Because they shouldn't have any binders or bound variables or anything</p>",
        "id": 195626335,
        "sender_full_name": "Areredify",
        "timestamp": 1588107667
    },
    {
        "content": "<p>that doesn't seem true</p>",
        "id": 195626522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107738
    },
    {
        "content": "<p>e.g., <code>fn(&amp;u8)</code> is a valid constant type</p>",
        "id": 195626531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107749
    },
    {
        "content": "<p>it is <span aria-label=\"scared\" class=\"emoji emoji-1f628\" role=\"img\" title=\"scared\">:scared:</span> ?</p>",
        "id": 195626584,
        "sender_full_name": "Areredify",
        "timestamp": 1588107772
    },
    {
        "content": "<p>I think so..</p>",
        "id": 195626599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107781
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 195626646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107806
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9736b4dae272c63e40670d0316c1abca\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9736b4dae272c63e40670d0316c1abca\">builds</a></p>",
        "id": 195626676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107820
    },
    {
        "content": "<p>No, I mean consts that are used in types</p>",
        "id": 195626694,
        "sender_full_name": "Areredify",
        "timestamp": 1588107826
    },
    {
        "content": "<p>They have structural match and what not</p>",
        "id": 195626779,
        "sender_full_name": "Areredify",
        "timestamp": 1588107846
    },
    {
        "content": "<p>Wait</p>",
        "id": 195626853,
        "sender_full_name": "Areredify",
        "timestamp": 1588107886
    },
    {
        "content": "<p>Uhh</p>",
        "id": 195626867,
        "sender_full_name": "Areredify",
        "timestamp": 1588107890
    },
    {
        "content": "<p>eventually <code>Foo&lt;{X}&gt;</code> will presumably be allowed</p>",
        "id": 195626975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588107949
    },
    {
        "content": "<p>That is surprising to me, I really haven't thought about parametrizing types by functions</p>",
        "id": 195627061,
        "sender_full_name": "Areredify",
        "timestamp": 1588107986
    },
    {
        "content": "<p>you learn something new every day :P</p>",
        "id": 195627106,
        "sender_full_name": "Areredify",
        "timestamp": 1588108014
    },
    {
        "content": "<p>Hmm, that means we need to do a full tree-match of const types every time we do something with them?</p>",
        "id": 195627372,
        "sender_full_name": "Areredify",
        "timestamp": 1588108155
    },
    {
        "content": "<p>we have to equate the types as we would always do, presumably</p>",
        "id": 195627617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588108293
    }
]