[
    {
        "content": "<p>I've been investigating this issue a bit</p>",
        "id": 185152107,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578514452
    },
    {
        "content": "<p>I <em>think</em> I've found the problem</p>",
        "id": 185152112,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578514459
    },
    {
        "content": "<p>but wanted to ask you a question <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 185152121,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578514468
    },
    {
        "content": "<p>So, I'm using the <code>higher_ranked_inline_bound_on_gat</code> test with <code>max_size</code> of 3 to reproduce this</p>",
        "id": 185152163,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578514512
    },
    {
        "content": "<p>And essentially what I think is wrong is:</p>",
        "id": 185152183,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578514530
    },
    {
        "content": "<p>This goal <code>LocalImplAllowed(for&lt;1&gt; fn&lt;Ref&lt;'^0, !1_1&gt;&gt;: Fn&lt;Ref&lt;'!1_0, !1_1&gt;&gt;)</code> gets truncated to <code>LocalImplAllowed(for&lt;1&gt; fn&lt;?0&gt;: Fn&lt;Ref&lt;'!1_0, !1_1&gt;&gt;)</code></p>",
        "id": 185152258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578514569
    },
    {
        "content": "<p>Then that second goal gets canonicalized into <code>LocalImplAllowed(for&lt;1&gt; fn&lt;^1&gt;: Fn&lt;Ref&lt;'!1_0, !1_1&gt;&gt;)</code></p>",
        "id": 185152279,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578514591
    },
    {
        "content": "<p>When I think it should get canonicalized into <code>LocalImplAllowed(for&lt;1&gt; fn&lt;^0&gt;: Fn&lt;Ref&lt;'!1_0, !1_1&gt;&gt;)</code></p>",
        "id": 185152301,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578514611
    },
    {
        "content": "<p>Or maybe <code>LocalImplAllowed(for&lt;1&gt; fn&lt;'^0&gt;: Fn&lt;Ref&lt;'!1_0, !1_1&gt;&gt;)</code></p>",
        "id": 185152319,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578514624
    },
    {
        "content": "<p>But anyways, when the answer for that goal is generated, and it is attempted to apply in <code>apply_answer_subst</code> and trys to unify <code>Ref&lt;'^0, !1_1&gt;</code> and <code>^1</code>, it can't shift down by one because of the <code>'^0</code> in the first</p>",
        "id": 185152496,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578514755
    },
    {
        "content": "<blockquote>\n<p>When I think it should get canonicalized into <code>LocalImplAllowed(for&lt;1&gt; fn&lt;^0&gt;: Fn&lt;Ref&lt;'!1_0, !1_1&gt;&gt;)</code></p>\n</blockquote>\n<p>This is basically my question. Am I right here?</p>",
        "id": 185152539,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578514794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Do you have a minute to quickly talk about this?</p>",
        "id": 185225671,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578585704
    },
    {
        "content": "<p>Gonna be traveling today, so might be able to try to fix this</p>",
        "id": 185225711,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578585722
    },
    {
        "content": "<p>Actually, I don't think that inference variable should be changed to a bound var at all here</p>",
        "id": 185226741,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578586311
    },
    {
        "content": "<p>Actually, I don't think that inference variable should be changed to a bound var at all here</p>",
        "id": 185226801,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578586332
    },
    {
        "content": "<p>Shoot okay, that's what it is</p>",
        "id": 185226815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578586341
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, I have a minute right now</p>",
        "id": 185504236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578929804
    },
    {
        "content": "<blockquote>\n<p>This goal <code>LocalImplAllowed(for&lt;1&gt; fn&lt;Ref&lt;'^0, !1_1&gt;&gt;: Fn&lt;Ref&lt;'!1_0, !1_1&gt;&gt;)</code> gets truncated to <code>LocalImplAllowed(for&lt;1&gt; fn&lt;?0&gt;: Fn&lt;Ref&lt;'!1_0, !1_1&gt;&gt;)</code></p>\n</blockquote>\n<p>I think..this truncation is kind of wrong</p>",
        "id": 185504329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578929873
    },
    {
        "content": "<p>I've been wondering about truncation, actually</p>",
        "id": 185504334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578929878
    },
    {
        "content": "<p>In particular, I've been wondering if we should replace it with something like:</p>",
        "id": 185504408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578929910
    },
    {
        "content": "<p>if a goal would be truncated, just replace it with CannotProve</p>",
        "id": 185504415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578929915
    },
    {
        "content": "<p>(removed)</p>",
        "id": 185509294,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578932925
    },
    {
        "content": "<p>Yeah, I've had some thoughts about truncation</p>",
        "id": 185509373,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578932978
    },
    {
        "content": "<p>bit scattered right now, but I think just replacing it with CannotProve might work, but I think there might be a better solution</p>",
        "id": 185509460,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578933007
    },
    {
        "content": "<p>re. that truncation in particular, the more I thought about it, the more \"wrong\" it felt</p>",
        "id": 185509591,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578933112
    },
    {
        "content": "<p>but I can't put my finger on why</p>",
        "id": 185509601,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578933118
    },
    {
        "content": "<blockquote>\n<p>if a goal would be truncated, just replace it with CannotProve</p>\n</blockquote>\n<p>actually what I really wanted was to flounder it, I think</p>",
        "id": 185510055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578933401
    },
    {
        "content": "<p>basically, it's a kind of error case</p>",
        "id": 185510063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578933412
    },
    {
        "content": "<p>truncation was inspired by other solvers</p>",
        "id": 185510077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578933424
    },
    {
        "content": "<p>it has a solid foundation, of sorts, in the sense that (in theory) the solvers ought to be able to enumerate the full set of solutions</p>",
        "id": 185510095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578933441
    },
    {
        "content": "<p>but I think for a variety of practical reasons that doesn't make sense in our setting</p>",
        "id": 185510111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578933452
    },
    {
        "content": "<p>It seems like other than perf, all of rust-analyzer's issues have been from truncation</p>",
        "id": 185510277,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578933535
    },
    {
        "content": "<p>I basically think we should consider truncation an error case</p>",
        "id": 185510323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578933571
    },
    {
        "content": "<p>i.e., it's not supposed to happen</p>",
        "id": 185510334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578933576
    },
    {
        "content": "<p>this was always the idea</p>",
        "id": 185510349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578933588
    },
    {
        "content": "<p>in my branches to fix the other issue (<a href=\"https://github.com/jackh726/chalk/tree/ambiguous_as_cannotprove\" target=\"_blank\" title=\"https://github.com/jackh726/chalk/tree/ambiguous_as_cannotprove\">https://github.com/jackh726/chalk/tree/ambiguous_as_cannotprove</a>), I used CannotProve as a delayed_subgoal in the case of truncation</p>",
        "id": 185510392,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578933603
    },
    {
        "content": "<p>rustc has a similar policy around large types, but it just aborts compilation</p>",
        "id": 185510405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578933604
    },
    {
        "content": "<p>I suspect we should just do the same</p>",
        "id": 185510409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578933607
    },
    {
        "content": "<p>could be worth trying</p>",
        "id": 185510422,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578933618
    },
    {
        "content": "<p>but it will require us to probably fix some other problems for r-a</p>",
        "id": 185510681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578933778
    },
    {
        "content": "<p>Biggest is perf I think</p>",
        "id": 185510696,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578933789
    },
    {
        "content": "<p>(you already saw my <code>solve_limited</code> PR)</p>",
        "id": 185510713,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578933802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> floundering instead of truncating: <a href=\"https://github.com/rust-lang/chalk/pull/322\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/322\">https://github.com/rust-lang/chalk/pull/322</a></p>",
        "id": 185566944,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578980357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 185641714,
        "sender_full_name": "Jack Huey",
        "timestamp": 1579036900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> you might be interested in testing out this branch with rust-analyzer, since it should fix a lot of bugs? <code>impl Trait</code> has returned yet, though</p>",
        "id": 185649593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1579041912
    },
    {
        "content": "<p>And off topic, but I'm also curious of your thoughts on: <a href=\"https://github.com/rust-lang/chalk/pull/321\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/321\">https://github.com/rust-lang/chalk/pull/321</a></p>",
        "id": 185649734,
        "sender_full_name": "Jack Huey",
        "timestamp": 1579041997
    },
    {
        "content": "<p>I've tried to point Rust-analyzer to it, but hit some compiler errors. Looks like an API might have changed in the recent chalk. I haven't looked into this further though. cc <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> :D</p>",
        "id": 185649743,
        "sender_full_name": "matklad",
        "timestamp": 1579042004
    },
    {
        "content": "<p>e.g. would being able to stop Chalk solving via a <code>should_panic</code> Fn be sufficient for now?</p>",
        "id": 185649775,
        "sender_full_name": "Jack Huey",
        "timestamp": 1579042035
    },
    {
        "content": "<p>What's <code>should_panic</code>? I only see <code>should_continue</code></p>",
        "id": 185650933,
        "sender_full_name": "matklad",
        "timestamp": 1579042840
    },
    {
        "content": "<p>But I think I like <code>should_continue</code> -- seems the minimal thing that can possible work for our use-case</p>",
        "id": 185650954,
        "sender_full_name": "matklad",
        "timestamp": 1579042870
    },
    {
        "content": "<p>Oops, typo. <code>should_continue</code></p>",
        "id": 185651244,
        "sender_full_name": "Jack Huey",
        "timestamp": 1579043112
    },
    {
        "content": "<p>Basically, is being able to stop solving based solely on time a good start for now?</p>",
        "id": 185651266,
        "sender_full_name": "Jack Huey",
        "timestamp": 1579043148
    },
    {
        "content": "<p>Hm, that makes me think....</p>\n<p>If chalk supports <code>should_continue</code> in that PR, does that mean that <a href=\"https://github.com/rust-lang/chalk/issues/260\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/260\">https://github.com/rust-lang/chalk/issues/260</a> is also fixed?</p>",
        "id": 185651325,
        "sender_full_name": "matklad",
        "timestamp": 1579043189
    },
    {
        "content": "<p>I imagine that these are actually more-or-less equivalent</p>",
        "id": 185651338,
        "sender_full_name": "matklad",
        "timestamp": 1579043207
    },
    {
        "content": "<p>No, it's still not UnwindSafe</p>",
        "id": 185651511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1579043346
    },
    {
        "content": "<p>I have some thoughts on how to make it so, but it's a bit low priority right now</p>",
        "id": 185651574,
        "sender_full_name": "Jack Huey",
        "timestamp": 1579043397
    }
]