[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> -- I'm inclined to merge <a href=\"https://github.com/rust-lang/chalk/pull/336\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/336\">https://github.com/rust-lang/chalk/pull/336</a>, any reason for me to hold off?</p>",
        "id": 189509005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167096
    },
    {
        "content": "<p>as far as moving <code>ChalkIr</code> to <code>chalk-integration</code>, the only thing with that is tests in <code>chalk-ir</code> (or maybe <code>chalk-solve</code>, I don't remember)</p>",
        "id": 189509236,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583167233
    },
    {
        "content": "<p>ah,</p>",
        "id": 189509288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167264
    },
    {
        "content": "<p>those tests could probably move too</p>",
        "id": 189509293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167270
    },
    {
        "content": "<p>but this PR is a good step anyway</p>",
        "id": 189509299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167275
    },
    {
        "content": "<p>and maybe just fine</p>",
        "id": 189509303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167276
    },
    {
        "content": "<p>I think the tests are good in <code>chalk-solve</code>, since they are testing things like <code>unify</code> IIRC</p>",
        "id": 189509381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583167328
    },
    {
        "content": "<p>it might be worth reexporting this from <code>chalk-integration</code> <code>lib.rs</code></p>",
        "id": 189509440,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583167356
    },
    {
        "content": "<p>maybe a compromise would be</p>",
        "id": 189509451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167364
    },
    {
        "content": "<p>making a crate that contains the <code>ChalkIr</code> type</p>",
        "id": 189509475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167377
    },
    {
        "content": "<p>I mean a feature is also ok :)</p>",
        "id": 189509484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167383
    },
    {
        "content": "<p>I'm not sure why I lean towards separate crates</p>",
        "id": 189509490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167389
    },
    {
        "content": "<p>I guess it feels simpler to me somehow than features</p>",
        "id": 189509515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167406
    },
    {
        "content": "<p>I think in this case a feature is simpler</p>",
        "id": 189509617,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583167457
    },
    {
        "content": "<p>since it's <em>only</em> the default</p>",
        "id": 189509644,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583167474
    },
    {
        "content": "<p>(if was more than just a struct, maybe a separate crate)</p>",
        "id": 189509668,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583167488
    },
    {
        "content": "<p>I also found that I really wanted to make <code>StructId</code> and the like an associated type on <code>Interner</code>. But then <code>AssociatedTyValueId</code> (in <code>chalk-rust-ir</code> ) is different</p>",
        "id": 189509725,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583167523
    },
    {
        "content": "<p>From what I've found with the rustc integration, wrapping all the <code>DefId</code>s gets a bit annoying</p>",
        "id": 189509788,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583167558
    },
    {
        "content": "<p>but I guess it's okay</p>",
        "id": 189509831,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583167564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/removing.20dependency.20on.20intern/near/189509788\" title=\"#narrow/stream/144729-wg-traits/topic/removing.20dependency.20on.20intern/near/189509788\">said</a>:</p>\n<blockquote>\n<p>From what I've found with the rustc integration, wrapping all the <code>DefId</code>s gets a bit annoying</p>\n</blockquote>\n<p>wrapping?</p>",
        "id": 189510221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167807
    },
    {
        "content": "<p>oh, right</p>",
        "id": 189510254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167826
    },
    {
        "content": "<p>I was considering the idea of moving all those types (<code>FooId</code>) into associated types of <code>TypeFamily</code></p>",
        "id": 189510285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167845
    },
    {
        "content": "<p>so that under the hood, they could all map to the same <code>DefId</code> type</p>",
        "id": 189510289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167850
    },
    {
        "content": "<p>but all the generic code can still keep them separated</p>",
        "id": 189510296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167854
    },
    {
        "content": "<p>(and <code>ChalkIr</code> could even use distinct types, if we wanted)</p>",
        "id": 189510320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167867
    },
    {
        "content": "<p>would that make things simpler?</p>",
        "id": 189510329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/removing.20dependency.20on.20intern/near/189509725\" title=\"#narrow/stream/144729-wg-traits/topic/removing.20dependency.20on.20intern/near/189509725\">said</a>:</p>\n<blockquote>\n<p>I also found that I really wanted to make <code>StructId</code> and the like an associated type on <code>Interner</code>. But then <code>AssociatedTyValueId</code> (in <code>chalk-rust-ir</code> ) is different</p>\n</blockquote>",
        "id": 189510484,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583167953
    },
    {
        "content": "<p><code>TypeFamily</code> =&gt; <code>Interner</code></p>",
        "id": 189510497,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583167966
    },
    {
        "content": "<p>Short answer: yes, it would be simpler for everything but <code>AssociatedTyValueId</code>, and therefore inconsistent</p>",
        "id": 189511146,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583168387
    }
]