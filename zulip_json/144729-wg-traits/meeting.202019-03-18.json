[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> -- meeting soon?</p>",
        "id": 161080580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932045
    },
    {
        "content": "<p>Our goal for this meeting was to setup some sprint-like goals</p>",
        "id": 161080598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932056
    },
    {
        "content": "<p>Maybe a good start to try and enumerate the <em>projects</em> for which we might setup goals. I feel like our current projects have been</p>\n<ul>\n<li>GATs</li>\n<li>Unblocking const generics (whether through lazy norm or something else)</li>\n<li>Chalk integration with RLS 2.0</li>\n<li>Chalk integration with rustc?</li>\n<li>Progress on associated type bounds, perhaps? (cc <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>)</li>\n</ul>",
        "id": 161080804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932181
    },
    {
        "content": "<p>Don't all speak up at once ;)</p>",
        "id": 161081125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932367
    },
    {
        "content": "<p>hahaha, wasn't clear that you wanted us to speak yet :P</p>",
        "id": 161081144,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552932380
    },
    {
        "content": "<p>Yeah, I know :P</p>",
        "id": 161081151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932386
    },
    {
        "content": "<p>I guess the first question is -- am I forgetting things :)</p>",
        "id": 161081171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932401
    },
    {
        "content": "<p>that list seems to cover all the topics, but personally i am perpetually a bit confused as to how GATs, chalks + rustc, and lazy norm relate</p>",
        "id": 161081182,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552932408
    },
    {
        "content": "<p>that is, i <em>think</em> it's possible that they are all the \"same\" project</p>",
        "id": 161081197,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552932421
    },
    {
        "content": "<p>well, that's part of what we're here today to discuss</p>",
        "id": 161081212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932426
    },
    {
        "content": "<blockquote>\n<p>that is, i <em>think</em> it's possible that they are all the \"same\" project</p>\n</blockquote>\n<p>correct</p>",
        "id": 161081223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932432
    },
    {
        "content": "<p>they could be</p>",
        "id": 161081234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932436
    },
    {
        "content": "<p>chalk/RLS integration is another thing, but not sure if that's under this wg at all</p>",
        "id": 161081238,
        "sender_full_name": "tmandry",
        "timestamp": 1552932438
    },
    {
        "content": "<p>I put it on the list, I definitely think it's under this WG</p>",
        "id": 161081259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932448
    },
    {
        "content": "<p>I mean it may be a joint effort :)</p>",
        "id": 161081263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932455
    },
    {
        "content": "<p>oh it's there, that's what I get for not drinking coffee</p>",
        "id": 161081342,
        "sender_full_name": "tmandry",
        "timestamp": 1552932484
    },
    {
        "content": "<p>There was a task in a document somewhere you asked me if I was interested in. Is that encompassed in that list?</p>",
        "id": 161081349,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1552932486
    },
    {
        "content": "<p>I guess I think this is maybe the core-most decision at this moment --  I see two options:</p>\n<p>1. To do some work on rustc's existing solver and pursuing integrating chalk in a RLS 2.0 context<br>\n2. To try integrating chalk into rustc and let the rest of the work fall from that</p>",
        "id": 161081386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932509
    },
    {
        "content": "<blockquote>\n<p>There was a task in a document somewhere you asked me if I was interested in. Is that encompassed in that list?</p>\n</blockquote>\n<p>Yes, that part of the RLS 2.0 thoughts</p>",
        "id": 161081395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932520
    },
    {
        "content": "<p>and I guess that reminds me that there are a few other goals that could be on the list, e.g. pursuing more design-based intitiatives</p>",
        "id": 161081412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932537
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 161081425,
        "sender_full_name": "centril",
        "timestamp": 1552932547
    },
    {
        "content": "<p>e.g., modeling specialization in chalk etc</p>",
        "id": 161081431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so it seems like the main reason <em>not</em> to just pack everything into \"chalk integration\" is that we see shorter paths to other desirable things, e.g. const generics and GATs</p>",
        "id": 161081466,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552932589
    },
    {
        "content": "<p>seems correct</p>",
        "id": 161081537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932609
    },
    {
        "content": "<p>maybe we should start by digging into that a bit?</p>",
        "id": 161081542,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552932612
    },
    {
        "content": "<p>Yes, I was going to suggest we talk a bit about GATs to start</p>",
        "id": 161081554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932625
    },
    {
        "content": "<p>I looked over the <a href=\"https://paper.dropbox.com/doc/GAT-use-case-analysis--AZg8WYylO2s8iLDD5VOCAxYEAg-xFJQMxHXTOUekCyweukU1\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/GAT-use-case-analysis--AZg8WYylO2s8iLDD5VOCAxYEAg-xFJQMxHXTOUekCyweukU1\">set of use cases</a> some</p>",
        "id": 161081573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Update re. associated type bounds: <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> has been working on it, particularly the tests I made; we discuss it regularly on Discord.</p>",
        "id": 161081614,
        "sender_full_name": "centril",
        "timestamp": 1552932665
    },
    {
        "content": "<p>I think that it would... probably be relatively easy to support the \"internal iterator\" use case</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Self</span>: <span class=\"na\">&#39;a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 161081637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932685
    },
    {
        "content": "<p>but it's probably talking that through in a bit more detail to convince ourselves</p>",
        "id": 161081652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932702
    },
    {
        "content": "<blockquote>\n<p>I think that it would... probably be relatively easy to support the \"internal iterator\" use case</p>\n</blockquote>\n<p>I've usually thought of this as more \"iterable\", but I guess it covers a number of patterns</p>",
        "id": 161081719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932728
    },
    {
        "content": "<p>(btw, when I wrote some of the GAT cases I assumed <code>Sized</code> would be easy to handle as a special case... ^^)</p>",
        "id": 161081746,
        "sender_full_name": "centril",
        "timestamp": 1552932753
    },
    {
        "content": "<p>yes, including a number of cases in the async world (where this pattern is needed any time you abstract over async fns that borrow)</p>",
        "id": 161081755,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552932765
    },
    {
        "content": "<p>To start, we would have to fix various things in the normalization code -- right now we sort of hard-code that an associated type looks like <code>&lt;P0 as Trait&lt;P1..Pn&gt;&gt;::Foo</code> -- i.e., that the set of parameters on <em>associated type definition</em> is the same as the set <em>from the trait</em></p>",
        "id": 161081799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932798
    },
    {
        "content": "<p>I think this should be relatively easy</p>",
        "id": 161081831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span> did some of that groundwork already</p>",
        "id": 161081850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932837
    },
    {
        "content": "<p>In particular, IIRC, we now have the def-id available of the associated type itself</p>",
        "id": 161081945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932868
    },
    {
        "content": "<p>I guess the next part would be that we have to handle the <em>bounds</em></p>",
        "id": 161082004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932911
    },
    {
        "content": "<p>which is actually .. hmm .. kind of interesting :)</p>",
        "id": 161082127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552932969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> by bounds, do you mean both on the associated type itself and its parameters?</p>",
        "id": 161082154,
        "sender_full_name": "centril",
        "timestamp": 1552932988
    },
    {
        "content": "<p>so in general if you have <code>type Foo&lt;'a&gt;: Bounds</code> that is equivalent to a where clause on the trait like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span>::<span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Bounds</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 161082189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933014
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> by bounds, do you mean both on the associated type itself and its parameters?</p>\n</blockquote>\n<p>well, sort of both -- we have that <code>where Self: 'a</code>, for example</p>",
        "id": 161082245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933046
    },
    {
        "content": "<p>it's actually a kind of subtle point</p>",
        "id": 161082264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933062
    },
    {
        "content": "<p>Right; that's a bound that must be proven on use rather than in the impl</p>",
        "id": 161082345,
        "sender_full_name": "centril",
        "timestamp": 1552933091
    },
    {
        "content": "<p>we should should come up with two distinct terms</p>",
        "id": 161082380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933116
    },
    {
        "content": "<p>Is the distinction we're talking about clear to everyone? I sort of doubt it :)</p>",
        "id": 161082394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> maybe crystallize the distinction by example?</p>",
        "id": 161082435,
        "sender_full_name": "centril",
        "timestamp": 1552933150
    },
    {
        "content": "<p>Consider these two <code>Debug</code> bounds:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Debug</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Debug</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 161082436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933150
    },
    {
        "content": "<p>If I have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Debug</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 161082470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933185
    },
    {
        "content": "<p>you can see that I included one of those bounds (the <code>T: Debug</code>) but not the other</p>",
        "id": 161082482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933195
    },
    {
        "content": "<p>this is because the impl gets to <em>assume</em> that <code>T: Debug</code> will hold (and whoever \"uses\" the associated type must in turn prove it), but the impl must <em>prove</em> that <code>Self::Bar&lt;T&gt;: Debug</code> (assuming that <code>T: Debug</code>)</p>",
        "id": 161082566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933229
    },
    {
        "content": "<p>let's call the <code>T: Debug</code> bound a \"condition\" and the other a \"requirement\", I guess</p>",
        "id": 161082595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933246
    },
    {
        "content": "<p>for now?</p>",
        "id": 161082603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933249
    },
    {
        "content": "<p>(unless someone has a better suggestion)</p>",
        "id": 161082634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933270
    },
    {
        "content": "<p>and <code>where</code> clauses are... both?</p>",
        "id": 161082635,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552933272
    },
    {
        "content": "<p>well, that's a question. I think they are conditions</p>",
        "id": 161082646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933282
    },
    {
        "content": "<p>Right. So if I had a type <code>Qxx&lt;T&gt;</code> that is always <code>Debug</code> regardless of <code>T</code>, I could omit the <code>T: Debug</code> entirely?</p>",
        "id": 161082654,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1552933295
    },
    {
        "content": "<p>because <code>type Bar&lt;T: Debug&gt;</code> and <code>type Bar&lt;T&gt; where T: Debug</code> should be equivalent</p>",
        "id": 161082661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933301
    },
    {
        "content": "<p>and <em>requirements</em> can always be moved to the trait anyhow</p>",
        "id": 161082675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933309
    },
    {
        "content": "<p>but to <em>some extent</em> we're bikeshedding here (though it's a good thing to discuss)</p>",
        "id": 161082737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933328
    },
    {
        "content": "<p>that is, in terms of how the compiler works, we can assume some separation</p>",
        "id": 161082760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933344
    },
    {
        "content": "<p>no I think it's actually very good to have two terms IMO</p>",
        "id": 161082773,
        "sender_full_name": "tmandry",
        "timestamp": 1552933351
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Alpha</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Beta</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>should be equivalent to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Bar</span>: <span class=\"nc\">Beta</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Alpha</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 161082789,
        "sender_full_name": "centril",
        "timestamp": 1552933363
    },
    {
        "content": "<blockquote>\n<p>but to <em>some extent</em> we're bikeshedding here (though it's a good thing to discuss)</p>\n</blockquote>\n<p>sorry, I didn't mean we were bikeshedding with the terms. I meant debating how the syntax maps to the terms is mildly bikeshedding. But we should probably still discuss it. =)</p>",
        "id": 161082804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933379
    },
    {
        "content": "<p>Right, and when we talk in the \"chalk lowering\", we usually talk about two sets of where clauses -- one on the trait (\"the requirements\") and one on the associated type (\"the conditions\")</p>",
        "id": 161082854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933411
    },
    {
        "content": "<p>So basically what <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> said</p>",
        "id": 161082867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933417
    },
    {
        "content": "<blockquote>\n<p>Right. So if I had a type <code>Qxx&lt;T&gt;</code> that is always <code>Debug</code> regardless of <code>T</code>, I could omit the <code>T: Debug</code> entirely?</p>\n</blockquote>\n<p>correct <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span></p>",
        "id": 161082892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I would call one \"use bounds/constraints\" and the other \"implementation bounds/constraints\"</p>",
        "id": 161082950,
        "sender_full_name": "centril",
        "timestamp": 1552933447
    },
    {
        "content": "<p>based on where it has to be proven</p>",
        "id": 161082963,
        "sender_full_name": "centril",
        "timestamp": 1552933458
    },
    {
        "content": "<p>@centril w/ the caveat that different associated types may only be available when different constraints are satisfied, yes?</p>",
        "id": 161082980,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552933471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>  right, as with methods</p>",
        "id": 161083014,
        "sender_full_name": "centril",
        "timestamp": 1552933496
    },
    {
        "content": "<p>(e.g. think <code>where Self: Sized</code>)</p>",
        "id": 161083033,
        "sender_full_name": "centril",
        "timestamp": 1552933509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> yeah, just clarifying because that's not actually the case today, although I think that's a bug</p>",
        "id": 161083037,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552933513
    },
    {
        "content": "<p>so-- it's not easy for the compiler's current infrastructure to be scaled to include \"use bounds or constraints\".</p>",
        "id": 161083047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933519
    },
    {
        "content": "<p>this is a place where chalk is much stronger</p>",
        "id": 161083060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933528
    },
    {
        "content": "<p>(adopting <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>'s terminology)</p>",
        "id": 161083079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> see <a href=\"https://github.com/rust-lang/rust/issues/57900\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57900\">https://github.com/rust-lang/rust/issues/57900</a></p>",
        "id": 161083082,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552933549
    },
    {
        "content": "<blockquote>\n<p>so-- it's not easy for the compiler's current infrastructure to be scaled to include \"use bounds or constraints\".</p>\n</blockquote>\n<p>to make this more concrete: what a \"use bound\" means to us that we have to be able to adjust the \"surrounding environment\" as we prove various subgoals. e.g., if we have <code>for&lt;T: Debug&gt; { Vec&lt;T&gt;: Debug }</code>, we would need to (a) introduce a type parameter <code>T</code> and (b) add the assumption that <code>T: Debug</code>. Neither of these things is the compiler very good at, but the latter is particularly hard :)</p>",
        "id": 161083202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933614
    },
    {
        "content": "<p>which reminds me, <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>, another thing which we <em>were</em> investigating but sort of dropped was the matter of universe integration and lifetimes</p>",
        "id": 161083235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933635
    },
    {
        "content": "<p>and us deciding how we felt about that :)</p>",
        "id": 161083242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933640
    },
    {
        "content": "<p>(for those familiar with Haskell, this is the distinction between:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">class</span> <span class=\"kt\">Beta</span> <span class=\"n\">self</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Foo</span> <span class=\"n\">self</span> <span class=\"kr\">where</span>\n    <span class=\"n\">delta</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span>\n    <span class=\"n\">gamma</span> <span class=\"ow\">::</span> <span class=\"kt\">Alpha</span> <span class=\"n\">self</span> <span class=\"ow\">=&gt;</span> <span class=\"n\">self</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Bool</span>\n</pre></div>\n\n\n<p>)</p>",
        "id": 161083282,
        "sender_full_name": "centril",
        "timestamp": 1552933671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so to bring this back to use-cases: i think that GATs document shows that we can get a lot of mileage out of just \"impl bounds\"</p>",
        "id": 161083437,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552933752
    },
    {
        "content": "<p>To come back to the iterable example, I was thinking that it didn't require us to solve so-called \"use bounds\", but I guess that's not really true. That is, the example was</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Iterable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Iter</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Self</span>: <span class=\"na\">&#39;a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>that where clause is a \"use bound\".</p>",
        "id": 161083469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933781
    },
    {
        "content": "<blockquote>\n<p>so to bring this back to use-cases: i think that GATs document shows that we can get a lot of mileage out of just \"impl bounds\"</p>\n</blockquote>\n<p>well, that's what I was debating, but I'm not entirely sure.</p>",
        "id": 161083555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933809
    },
    {
        "content": "<p>Let me see if I'm confusing myself :)</p>",
        "id": 161083562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933817
    },
    {
        "content": "<p>to be clear i was thinking of the async cases, not iterable</p>",
        "id": 161083579,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552933830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can we \"hack\" simpler use-bounds &amp; get away with it?</p>",
        "id": 161083588,
        "sender_full_name": "centril",
        "timestamp": 1552933836
    },
    {
        "content": "<p>though <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> points out in comments that what i initially wrote for those is probably naive in a few ways</p>",
        "id": 161083598,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552933849
    },
    {
        "content": "<p>the problem with this <code>where Self: 'a</code> thing, where that comes from, is that you probably want something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Iterable</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Iter</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span>::<span class=\"n\">Iter</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// requires that T: &#39;a to be WF.. but how do we know that?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 161083607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933862
    },
    {
        "content": "<blockquote>\n<p>to be clear i was thinking of the async cases, not iterable</p>\n</blockquote>\n<p>yeah, I sort of shifted it, but i'm not sure if it matters?</p>",
        "id": 161083626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933872
    },
    {
        "content": "<p>The key part being the comment \"requires that T: 'a to be WF.. but how do we know that?\" -- the idea would be that we know it because we get to assume that <code>Self: 'a</code> -- i.e., <code>Vec&lt;T&gt;: 'a</code>, which in turn implies <code>T: 'a</code> (we do this sort of deduction today)</p>",
        "id": 161083670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933914
    },
    {
        "content": "<blockquote>\n<p>can we \"hack\" simpler use-bounds &amp; get away with it?</p>\n</blockquote>\n<p>maybe, lifetime bounds of this kind are handled kind of \"differently\"</p>",
        "id": 161083744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933947
    },
    {
        "content": "<p>let's assume we <strong>could</strong> handle the <code>where self: 'a</code> case</p>",
        "id": 161083816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552933998
    },
    {
        "content": "<p>I think we can generally handle proving the \"impl bounds\" -- we already prove <code>for&lt;'a&gt;</code> sort of things today</p>",
        "id": 161083854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> to clarify, i was thinking of cases like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">AsyncFoo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Fut</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Fut</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 161083866,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934042
    },
    {
        "content": "<p>and similarly, we should be able to handle the other side where we rely on them as clauses</p>",
        "id": 161083910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934045
    },
    {
        "content": "<p>yeah, so my belief is that the <strong>major challenge</strong> to supporting (a limited version of) GATs in the compiler today is dealing with the <code>where Self: 'a</code> business. This limited version would probably by something like \"one lifetime parameter without any other use bounds but Self: 'a\".</p>",
        "id": 161083972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934108
    },
    {
        "content": "<p>maybe we should look a bit at the other things -- notably chalk integration questions -- and come back to what this means for GATs then?</p>",
        "id": 161084012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> so in this case do we infer <code>where Self: 'a</code> from <code>foo</code>'s definition?</p>",
        "id": 161084082,
        "sender_full_name": "centril",
        "timestamp": 1552934169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so i'm kinda slow today, can you spell out whether this WF issue arises with cases like <code>AsyncFoo</code>?</p>",
        "id": 161084096,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934185
    },
    {
        "content": "<p>ps I'm not wild about \"impl bounds\" as the terminology, since (in desugared form) they are where-clauses that appear on the <em>trait</em> (but are <em>proven</em> at the impl)</p>",
        "id": 161084100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934189
    },
    {
        "content": "<p>I imagine it would <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> -- let's look at a possible impl</p>",
        "id": 161084132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  yea I had to stop to think on that one for a bit... happy about changing it to \"trait bounds\" or something else ;)</p>",
        "id": 161084151,
        "sender_full_name": "centril",
        "timestamp": 1552934229
    },
    {
        "content": "<p>\"use bounds\" was from the POV of where things are proven tho, so it is internally consistent at least ^^</p>",
        "id": 161084176,
        "sender_full_name": "centril",
        "timestamp": 1552934259
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">AsyncFoo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Fut</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cm\">/* ... the key question is if this type involves a `&amp;&#39;a T` ... */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 161084182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> yes, it would, because the type implementing AsyncFoo might not be 'static</p>",
        "id": 161084195,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552934276
    },
    {
        "content": "<p>So <code>type Fut&lt;'a&gt;</code> needs to only be valid so long as <code>'a</code> doesn't outlive the <code>Self</code> type</p>",
        "id": 161084273,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552934305
    },
    {
        "content": "<p>put another way, the <code>'a</code> lifetime represents (logically) \"the lifetime of a reference to <code>Self</code>\" in practice, and we will likely want to rely on that</p>",
        "id": 161084318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934340
    },
    {
        "content": "<p>would it be possible to restrict use to only <code>'static</code> <code>Self</code> types? i guess i'm looking for whether there's a minimal case that allows us to abstract over async functions that take in borrowed data</p>",
        "id": 161084349,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> so <code>&amp;'a self</code> ==&gt; <code>self: &amp;'a Self</code> ==&gt; <code>Self: 'a</code> because of <code>&amp;'a X</code> =&gt; <code>X: 'a</code></p>",
        "id": 161084363,
        "sender_full_name": "centril",
        "timestamp": 1552934383
    },
    {
        "content": "<p>well that's certainly a first step, good point</p>",
        "id": 161084366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934385
    },
    {
        "content": "<p>(though if we think we can \"hack in\" the <code>Self: 'a</code> support maybe it's not relevant)</p>",
        "id": 161084369,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934388
    },
    {
        "content": "<p>i.e., we could do all the rest of the work, and it would just error out for cases that are not <code>'static</code></p>",
        "id": 161084421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934403
    },
    {
        "content": "<p>i.e., if it didn't get to take a <code>where Self: 'a</code> into account</p>",
        "id": 161084443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934413
    },
    {
        "content": "<p>yeah... maybe too hacky to be worth it, idk</p>",
        "id": 161084449,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934416
    },
    {
        "content": "<p>well, it might make a decent \"sprint goal\"</p>",
        "id": 161084478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934430
    },
    {
        "content": "<p>otoh I think most use cases really want that</p>",
        "id": 161084488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934436
    },
    {
        "content": "<p>that is, sort of the whole <em>point</em> of this is to employ the <code>'a</code> :)</p>",
        "id": 161084516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934456
    },
    {
        "content": "<p>(well, I guess it's not that you can't employ it at all)</p>",
        "id": 161084536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934469
    },
    {
        "content": "<p>the real question is not whether your proposal is too hacky <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> -- it's whether <em>fixing</em> this will be too hacky</p>",
        "id": 161084561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934492
    },
    {
        "content": "<p>i.e., I think if we just did a \"subset\" of the impl steps, we would find it working ok for <code>'static</code> types but not for others</p>",
        "id": 161084577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934514
    },
    {
        "content": "<p>heh yeah -- i was going to raise the question of whether it's feasible to stabilize anything here prior to chalk integration</p>",
        "id": 161084580,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934516
    },
    {
        "content": "<p>(or whether we'd be too worried that the behavior might change)</p>",
        "id": 161084637,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934533
    },
    {
        "content": "<p>I guess it's a bit early to say</p>",
        "id": 161084639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934533
    },
    {
        "content": "<p>I feel like we could test the behavior, it'd be more a question of impl quality probably</p>",
        "id": 161084652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934547
    },
    {
        "content": "<p>it's sort of another dimension in all this: when we talk about \"shorter path\" to unblock other things, do we mean on <em>nightly</em> or <em>stable</em>?</p>",
        "id": 161084660,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934557
    },
    {
        "content": "<p>yeah</p>",
        "id": 161084670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934566
    },
    {
        "content": "<p>I am sensing we are not going to get to \"sprint goals\" this week :)</p>",
        "id": 161084748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934632
    },
    {
        "content": "<p>but I think that' sok</p>",
        "id": 161084750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934634
    },
    {
        "content": "<p>I had hoped to sort of have this conversation earlier but it's good we're having it now</p>",
        "id": 161084757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> for your cases in Fuchsia, is it fair to say that this won't get you very far without  supporting all the kinds of bounds?</p>",
        "id": 161084806,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934647
    },
    {
        "content": "<blockquote>\n<p>I am sensing we are not going to get to \"sprint goals\" this week :)</p>\n</blockquote>\n<p>we could always book an additional meeting</p>",
        "id": 161084815,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934663
    },
    {
        "content": "<p>I think we should be careful tho with <code>'static</code> because  if you only impose <code>'static</code>on uses then ostensibly impls get to assume that you haven't imposed anything more so they can say <code>type Foo&lt;'a&gt; = Type;</code> where <code>Type</code> only works for <code>'static</code>.</p>",
        "id": 161084817,
        "sender_full_name": "centril",
        "timestamp": 1552934664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw... update for meeting notes: re. <code>for&lt;'a: 'b&gt;</code> and such, I haven't done any work yet; busy with let_chains.</p>",
        "id": 161084883,
        "sender_full_name": "centril",
        "timestamp": 1552934726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> i think for GATs i'm increasingly of the mind that this \"shorter path\" vision won't be enough to really make an impact</p>",
        "id": 161084981,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934777
    },
    {
        "content": "<p>let me see if I can summarize what we've said so far:</p>\n<ul>\n<li>Handling the <code>type Item&lt;'a&gt;: Bound where Self: 'a</code> case in rustc today requires:<ul>\n<li>handling the <code>&lt;Self as Trait&gt;::Item&lt;'a&gt;</code> substitution (relatively easy)</li>\n<li>proving <code>for&lt;'a&gt; &lt;Self as Trait&gt;::Item&lt;'a&gt; :Bound</code> (basically same as things we prove today)</li>\n<li>being able to consider <code>where Self: 'a</code> as \"in scope\" some of the time (harder, we can perhaps do it in some hacky sort of way though)</li>\n</ul>\n</li>\n<li>One question is how much we care about <strong>stabilizing</strong></li>\n</ul>",
        "id": 161084993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> We could certainly get by with the <code>'static</code> restriction-- it'd just mean some extra Rc/Arc boilerplate</p>",
        "id": 161085000,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552934793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> do  you feel like it's worth sprinting toward that on nightly, vs putting the effort into chalk integration?</p>",
        "id": 161085065,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934846
    },
    {
        "content": "<blockquote>\n<p>I think for GATs i'm increasingly of the mind that this \"shorter path\" vision won't be enough to really make an impact</p>\n</blockquote>\n<p>Interesting. I was kind of coming to the opposite conclusion. I guess it depends a lot about the <code>where Self: 'a</code> case-- whether we can handle that or not</p>",
        "id": 161085068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934851
    },
    {
        "content": "<p>But also I think we can't answer this question without talking about chalk integration</p>",
        "id": 161085079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934864
    },
    {
        "content": "<p>and what that means / what difficulties we foresee</p>",
        "id": 161085085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934869
    },
    {
        "content": "<p>well we could if we felt like our needs were significantly greater than the <code>type Iter&lt;'a&gt;</code> case outlined above</p>",
        "id": 161085144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> Hm, I think I'd be more interested in seeing how it affects the rest of the ecosystem rather than Fuchsia specifically, in part because we've already gotten used to modeling things so differently as a result of not being able to write <code>async fn</code> in traits today</p>",
        "id": 161085153,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552934903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> i think where it's coming from for me is that we're just \"moving the cliff\" rather than eliminating it. that is, you'd be able to do more, but then might be even more stuck when you hit the next cliff</p>",
        "id": 161085199,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934935
    },
    {
        "content": "<p>hi.</p>",
        "id": 161085207,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552934942
    },
    {
        "content": "<p>For example, how disruptive it would be to people using the various bits of tower-service-related stuff, tide, hyper, etc.</p>",
        "id": 161085215,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552934944
    },
    {
        "content": "<p>I had assumed the meeting was the same time, sorry!</p>",
        "id": 161085226,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552934950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> fair enough. i'm also thinking that for the rest of the ecosystem, stable matters more</p>",
        "id": 161085230,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934953
    },
    {
        "content": "<p>I feel like to really see the impact on the ecosystem though .. hmm .. yeah, I guess what <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> said</p>",
        "id": 161085234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552934954
    },
    {
        "content": "<p>6:00 was better ironically</p>",
        "id": 161085239,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552934957
    },
    {
        "content": "<p>oh well, here now</p>",
        "id": 161085245,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552934961
    },
    {
        "content": "<p>and e.g. for the Tower folks, it's clear they want to wait until there are no cliffs</p>",
        "id": 161085246,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934962
    },
    {
        "content": "<blockquote>\n<p>But also I think we can't answer this question without talking about chalk integration</p>\n</blockquote>\n<p>yes agreed</p>",
        "id": 161085284,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552934993
    },
    {
        "content": "<p>What I would be unhappy with is stabilizing and then using the <code>'static</code> limitation in the standard library such that it becomes technical debt we cannot get away from later</p>",
        "id": 161085354,
        "sender_full_name": "centril",
        "timestamp": 1552935012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> yeah, in principle I would definitely rather wait longer to get the \"correct\" thing than continually but more quickly edge towards something that looks usable except in cases X, Y, and Z</p>",
        "id": 161085366,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552935022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> on that note, can you clarify: are there now <em>two</em> routes for integration? one with rustc today, and one via RLS 2.0 and eventual integration of <em>that</em>?</p>",
        "id": 161085379,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552935031
    },
    {
        "content": "<p>but certainly there's a practical component of whether or not it's enough for most people</p>",
        "id": 161085385,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552935039
    },
    {
        "content": "<p>I feel like the <code>AsyncFoo</code> example -- I guess I still feel a bit confused</p>",
        "id": 161085420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935068
    },
    {
        "content": "<p>but let's move a bit on and circle back perhaps</p>",
        "id": 161085425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935074
    },
    {
        "content": "<p>we still on GAT? might need to devote time to other points :-)</p>",
        "id": 161085440,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552935091
    },
    {
        "content": "<p>heh</p>",
        "id": 161085441,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552935092
    },
    {
        "content": "<p>time check -- does anyone have a hard stop in 10 min? should we go ahead and schedule some additional time?</p>",
        "id": 161085444,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552935094
    },
    {
        "content": "<p>I'm game to keep going</p>",
        "id": 161085452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> wrt. other subjects... <code>type Foo = impl Bar;</code>, can you review <a href=\"https://github.com/rust-lang/rfcs/issues/2515#issuecomment-467238637\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/issues/2515#issuecomment-467238637\">https://github.com/rust-lang/rfcs/issues/2515#issuecomment-467238637</a> ?</p>",
        "id": 161085537,
        "sender_full_name": "centril",
        "timestamp": 1552935143
    },
    {
        "content": "<p>OK, let's leave GATs for a second. I guess it makes sense to focus a bit on chalk. Not sure, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, if you are around btw?</p>",
        "id": 161085560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935168
    },
    {
        "content": "<p>We could touch briefly on lazy norm -- I think in some sense it is maybe a similar story, though maybe different</p>",
        "id": 161085582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935186
    },
    {
        "content": "<p>about lazy norm... I felt I hit it many times when writing ATB tests for <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span></p>",
        "id": 161085631,
        "sender_full_name": "centril",
        "timestamp": 1552935222
    },
    {
        "content": "<p>in particular I am not entirely persuaded that generic constants are truly blocked on this, but I feel like it'll take some amount of effort to really investigate it. Basically have to do some of the impl work around that and see what problems we hit.</p>",
        "id": 161085633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we already have generic constants through associated constants?</p>",
        "id": 161085693,
        "sender_full_name": "centril",
        "timestamp": 1552935246
    },
    {
        "content": "<p>That is to say, I think that there is (maybe) a way to get const generics working with eager norm</p>",
        "id": 161085698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935253
    },
    {
        "content": "<p>No, not really</p>",
        "id": 161085703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935258
    },
    {
        "content": "<p>I mean there are various ad-hoc limitations</p>",
        "id": 161085718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935269
    },
    {
        "content": "<p>It's been tricky to get to the bottom of that</p>",
        "id": 161085723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935276
    },
    {
        "content": "<p>That said, I think lazy norm is needed for other reasons beyond that: or certainly there are a whole family of bugs that e.g. <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> was referring to.</p>",
        "id": 161085750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935302
    },
    {
        "content": "<p>It'd probalby be good to get precise about that</p>",
        "id": 161085761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935309
    },
    {
        "content": "<p>(including some issues where NLL is not able to capture the user's annotations as precisely as we might like)</p>",
        "id": 161085777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935325
    },
    {
        "content": "<p>So in some sense I feel like there is a <em>similar</em> trade-off to GATs here, but different. There is probably progress possible on rustc today, but I'm not 100% sure on how \"low hanging\" the fruit is</p>",
        "id": 161085857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935364
    },
    {
        "content": "<p>Like <code>Foo: for&lt;'a&gt; Bar&lt;'a, Assoc: Copy&gt;</code> hits lazy norm issues I think due to desugaring to <code>for&lt;'a&gt; &lt;Foo as Bar&lt;'a&gt;&gt;::Assoc: Copy</code></p>",
        "id": 161085864,
        "sender_full_name": "centril",
        "timestamp": 1552935371
    },
    {
        "content": "<p>yeah, probably. that's more about 'normalizing under binders', but it's related</p>",
        "id": 161085871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did we decide whether lazy norm was needed for fixing type alias bounds yet?</p>",
        "id": 161085883,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552935401
    },
    {
        "content": "<p>it's certainly my preferred route to rationalize type aliases</p>",
        "id": 161085935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935443
    },
    {
        "content": "<p>ok, so let's dig a bit into chalk</p>",
        "id": 161085948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935464
    },
    {
        "content": "<p>I’m around</p>",
        "id": 161085954,
        "sender_full_name": "scalexm",
        "timestamp": 1552935472
    },
    {
        "content": "<p>to answer your question <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>, here is what I've been pondering</p>",
        "id": 161085959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935476
    },
    {
        "content": "<p>on the one hand, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> (and others) did a lot of great work integration chalk into rustc, and we've got something kind of working for some cases (Which reminds me, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, it's on my todo list to give feedback on your \"fixups\" PR :P)</p>",
        "id": 161086024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935506
    },
    {
        "content": "<p>there are some nontrivial things left to fix, some of them however are more on the chalk side than rustc side (e.g., we have to work through the best way to handle region constraints)</p>",
        "id": 161086055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935536
    },
    {
        "content": "<p>yeah, region constraints seems like the big outstanding task</p>",
        "id": 161086104,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552935570
    },
    {
        "content": "<p>(from an outside perspective)</p>",
        "id": 161086184,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552935606
    },
    {
        "content": "<p>but we've also not started the real work of trying to get things \"prod ready\"</p>",
        "id": 161086203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935614
    },
    {
        "content": "<p>Well maybe it’s not « that » big, we just need to figure out how to correctly aggregate identical solutions with different region constraints</p>",
        "id": 161086204,
        "sender_full_name": "scalexm",
        "timestamp": 1552935615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  So maybe if \"we\" (read: Felix, other people...) can take some of the r?s off you then you can work more on chalk yourself?</p>",
        "id": 161086210,
        "sender_full_name": "centril",
        "timestamp": 1552935623
    },
    {
        "content": "<p>I'm trying desperately to free up some more coding time :)</p>",
        "id": 161086263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> aight; I'll try to help with freeing you up ^^</p>",
        "id": 161086281,
        "sender_full_name": "centril",
        "timestamp": 1552935660
    },
    {
        "content": "<p>what I've been pondering about for RLS 2.0 is that -- we have a need to have chalk integration there too, and we have fewer \"backwards compat constraints\" -- so in particular we might be able to do much deeper integration</p>",
        "id": 161086325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935691
    },
    {
        "content": "<p>and in general we don't have to worry as much about regressing things on the rustc side etc</p>",
        "id": 161086334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935703
    },
    {
        "content": "<p>we did some investigation (<a href=\"https://paper.dropbox.com/doc/Chalk-RLS-integration--AZiKUjydAGBIqA~RoOZdQjyTAg-QCJelXDeaq7GV6jVQln4j\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Chalk-RLS-integration--AZiKUjydAGBIqA~RoOZdQjyTAg-QCJelXDeaq7GV6jVQln4j\">see this paper</a>) and came up with some pretty concrete work items</p>",
        "id": 161086403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935735
    },
    {
        "content": "<p>(quick clarification: for RLS 2.0 i believe the \"integration\" story involves using Chalk as a library; is the same true of the current rustc integration work?)</p>",
        "id": 161086411,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552935742
    },
    {
        "content": "<p>I'm personally a little concerned too much time is being devoted to RLS 2.0 when there are more pressing concerns, especially for wg-traits, no?</p>",
        "id": 161086413,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552935743
    },
    {
        "content": "<blockquote>\n<p>(quick clarification: for RLS 2.0 i believe the \"integration\" story involves using Chalk as a library; is the same true of the current rustc integration work?)</p>\n</blockquote>\n<p>both involve using chalk as a library, but it depends on how much of chalk</p>",
        "id": 161086436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935762
    },
    {
        "content": "<p>currently, rustc uses <code>chalk-engine</code>, which is really a pretty minimal part</p>",
        "id": 161086441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935771
    },
    {
        "content": "<p>the plan for RLS 2.0 was to leverage far more -- e.g., sharing the \"lowering code\" that goes from impl+trait to rules, etc</p>",
        "id": 161086462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935786
    },
    {
        "content": "<p>and (eventually) the representation of types etc</p>",
        "id": 161086471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935795
    },
    {
        "content": "<p>ok -- so i guess a different question is, if the ultimate goal is to use shared crates, it seems like the rustc and RLS 2.0 efforts could intercept each other nicely by both being centered around that structure?</p>",
        "id": 161086561,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552935871
    },
    {
        "content": "<p>they don't seem directly at odds</p>",
        "id": 161086588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935908
    },
    {
        "content": "<p>I'm not sure if that's what you meant</p>",
        "id": 161086598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935923
    },
    {
        "content": "<p>( in other words, I think we could pursue both to some extent )</p>",
        "id": 161086609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935945
    },
    {
        "content": "<p>I do think that rustc should be the priority where/if there's need to prioritize</p>",
        "id": 161086622,
        "sender_full_name": "centril",
        "timestamp": 1552935958
    },
    {
        "content": "<blockquote>\n<p>I'm personally a little concerned too much time is being devoted to RLS 2.0 when there are more pressing concerns, especially for wg-traits, no?</p>\n</blockquote>\n<p>well, this is not entirely clear to me, but I think it's a good question =) I see it being pretty important to help get RLS 2.0 up and going, and pretty important to validate out the chalk approach and find what problems we are going to find. But certainly if we are blocking on chalk for GATs + norm that changes things.</p>",
        "id": 161086667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552935966
    },
    {
        "content": "<p>(i.e. rustc + chalk, not rustc alone)</p>",
        "id": 161086680,
        "sender_full_name": "centril",
        "timestamp": 1552935982
    },
    {
        "content": "<p>well, so more concretely, i'm imagining that rustc uses some parts of chalk in order to get expressivity benefits; meanwhile, RLS 2.0 pushes further out ahead, iterating on deeper modularization questions; and then over time, rustc is shifted to use more of these shared libraries as well</p>",
        "id": 161086691,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552936004
    },
    {
        "content": "<p>yes, I was contemplating this plan</p>",
        "id": 161086710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936020
    },
    {
        "content": "<p>but with the  hope that we can ship some chalk-based features in rustc <em>before</em> full RLS 2.0 \"integration\"</p>",
        "id": 161086741,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552936037
    },
    {
        "content": "<p>I mean maybe the way to think about it is just one project -- \"chalk integration\"</p>",
        "id": 161086769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>  I agree strongly with the \"before\" bit ;) -- It would be a bummer to have the rustc side wait until middle of 2020 or so</p>",
        "id": 161086825,
        "sender_full_name": "centril",
        "timestamp": 1552936089
    },
    {
        "content": "<p>it's basically ready now. :-) just adding the feature gate and cleaning up things.</p>",
        "id": 161086879,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552936164
    },
    {
        "content": "<p>Niko, should I r? you when it is?</p>",
        "id": 161086924,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552936196
    },
    {
        "content": "<p>So I'm re-reading <a href=\"#narrow/stream/144729-t-compiler.2Fwg-traits/topic/.2358305.20.22small.20fixes.20to.20chalk.22.20PR/near/160383401\" title=\"#narrow/stream/144729-t-compiler.2Fwg-traits/topic/.2358305.20.22small.20fixes.20to.20chalk.22.20PR/near/160383401\">the comments <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> made here</a></p>",
        "id": 161086927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936197
    },
    {
        "content": "<p>which map pretty closely to my memory in terms of chalk next steps</p>",
        "id": 161086983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936207
    },
    {
        "content": "<blockquote>\n<p>Niko, should I r? you when it is?</p>\n</blockquote>\n<p>sorry what we are talking about here? your PR?</p>",
        "id": 161087013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936237
    },
    {
        "content": "<p>if we were going to pursue chalk integration full steam, I guess that I would want to focus our energy on</p>\n<ul>\n<li>landing <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>'s PR -- does't sem too hard</li>\n<li>the region unification story -- I'm interested in this, something of a design/discussion question</li>\n<li>altering the \"clause selection order\" and builtin impl story -- I think there are some relatively clear-ish steps we can take here, personally</li>\n</ul>",
        "id": 161087187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936341
    },
    {
        "content": "<p>Maybe the thing to do is this</p>",
        "id": 161087215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936368
    },
    {
        "content": "<p>we have these sprints for a reason</p>",
        "id": 161087219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936372
    },
    {
        "content": "<p>we can try for 6 weeks</p>",
        "id": 161087223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936375
    },
    {
        "content": "<p>and re-evaluate :)</p>",
        "id": 161087229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936378
    },
    {
        "content": "<p>but we should try to set some clear goals</p>",
        "id": 161087239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936383
    },
    {
        "content": "<p>so, chalk is still limited in terms of what it can express today.. full rustc integration <em>could</em> pave the way for the remaining aspects of Rust that it doesn't model</p>",
        "id": 161087248,
        "sender_full_name": "tmandry",
        "timestamp": 1552936388
    },
    {
        "content": "<p>(and I would like to keep the RLS 2.0 ball going a bit)</p>",
        "id": 161087268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936403
    },
    {
        "content": "<p>but I think a lot of that was working on refactoring and improving chalk</p>",
        "id": 161087285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> &gt; if we were going to pursue chalk integration full steam, [...]</p>\n<p>Yes, yes please <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 161087291,
        "sender_full_name": "centril",
        "timestamp": 1552936421
    },
    {
        "content": "<blockquote>\n<p>so, chalk is still limited in terms of what it can express today.. full rustc integration <em>could</em> pave the way for the remaining aspects of Rust that it doesn't model</p>\n</blockquote>\n<p>and yes, this is a thing too, extending to cover various bits of rust we don't cover. I think the list is roughly</p>\n<ul>\n<li>trait objects (<span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> has a PR and proposal here)</li>\n<li>implied bounds and trait objects</li>\n<li>specialization</li>\n</ul>\n<p>uuuuuuuh anything else? :)</p>",
        "id": 161087375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936467
    },
    {
        "content": "<p>may be crazy but since we're talking about sharing a representation and lower code.. was there ever any talk of converting HIR to chalk-ir?</p>",
        "id": 161087409,
        "sender_full_name": "tmandry",
        "timestamp": 1552936509
    },
    {
        "content": "<p>yes</p>",
        "id": 161087416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936519
    },
    {
        "content": "<p>I looked into it some</p>",
        "id": 161087418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936522
    },
    {
        "content": "<p>it's maybe plausible <em>but</em> we already wrote a lot of that code</p>",
        "id": 161087431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936540
    },
    {
        "content": "<p>I think I'd rather pursue that on the RLS 2.0 side and come back</p>",
        "id": 161087438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936546
    },
    {
        "content": "<p>so I was thinkg</p>",
        "id": 161087445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936554
    },
    {
        "content": "<p>one of my big fears around chalk integration</p>",
        "id": 161087451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936558
    },
    {
        "content": "<p>has to do with the way the solver works --</p>",
        "id": 161087504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936566
    },
    {
        "content": "<p>I worry that it will take us some time to get the \"evaluation strategy\" tweaked right, so that it does't wind up taking a lot of time to explore useless avenues</p>",
        "id": 161087535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936583
    },
    {
        "content": "<p>it's <em>supposed</em> to be good at that but this is unproven</p>",
        "id": 161087555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936595
    },
    {
        "content": "<p>I'm trying to think if there is something we can do to help \"tilt\" our evaluation in that direction</p>",
        "id": 161087580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936620
    },
    {
        "content": "<p>I guess that it means that (e.g.) features like specialization are probably less important, but things like clause selection order and improving hacks around <code>?T: Sized</code> are important</p>",
        "id": 161087632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936660
    },
    {
        "content": "<p>maybe I should explain what I'm worried about?</p>",
        "id": 161087635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936665
    },
    {
        "content": "<p>the tl;dr is that it is possible, given impls like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>to produce a lot of answers for <code>Trait</code> -- e.g., basically <code>Vec&lt;T&gt;</code> for any sized <code>T</code> will do</p>",
        "id": 161087723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936720
    },
    {
        "content": "<p>(i personally think that getting full-blown GATs working is more important than specialization; also, this re-raises the point that Chalk integration could help with another big priority, namely compiler perf)</p>",
        "id": 161087727,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552936724
    },
    {
        "content": "<p>the way that the solver works, it <em>could</em> (in some cases) wind up enumerating those for a while</p>",
        "id": 161087731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936737
    },
    {
        "content": "<blockquote>\n<p>(i personally think that getting full-blown GATs working is more important than specialization; also, this re-raises the point that Chalk integration could help with another big priority, namely compiler perf)</p>\n</blockquote>\n<p>yes, potentially</p>",
        "id": 161087750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936749
    },
    {
        "content": "<p>ok, so, we'll focus largley on chalk and less on \"short term\" fixes, at least for this sprint</p>",
        "id": 161087756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936762
    },
    {
        "content": "<p>I think an important question to ask is: who is going to have what amount of time :)</p>",
        "id": 161087765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936776
    },
    {
        "content": "<p>I am planning to <em>try</em> to reserve Mondays for trait coding, at least, and maybe another day. I guess we'll see. But I'm also on PTO for at least one week :P</p>",
        "id": 161087786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936799
    },
    {
        "content": "<p>i will have time but will need mentoring</p>",
        "id": 161087846,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552936812
    },
    {
        "content": "<p>I don’t feel like I have enough time to actively work on the chalk integration in rustc, but I can advise</p>",
        "id": 161087847,
        "sender_full_name": "scalexm",
        "timestamp": 1552936813
    },
    {
        "content": "<p>I think I would expect that most folks would need mentoring</p>",
        "id": 161087862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  in the quantified constraints paper they talk about a technique they call \"focusing\", idk if that would help but it's worth a read; Here's the ICFP talk: <a href=\"https://www.youtube.com/watch?v=TDRvd0A6j6k\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=TDRvd0A6j6k\">https://www.youtube.com/watch?v=TDRvd0A6j6k</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"TDRvd0A6j6k\" href=\"https://www.youtube.com/watch?v=TDRvd0A6j6k\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=TDRvd0A6j6k\"><img src=\"https://i.ytimg.com/vi/TDRvd0A6j6k/default.jpg\"></a></div>",
        "id": 161087870,
        "sender_full_name": "centril",
        "timestamp": 1552936842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> ok thanks</p>",
        "id": 161087881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936854
    },
    {
        "content": "<p>I may have some time also</p>",
        "id": 161087882,
        "sender_full_name": "tmandry",
        "timestamp": 1552936855
    },
    {
        "content": "<p>(I didn't know the talk was online)</p>",
        "id": 161087887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936858
    },
    {
        "content": "<p>(most ICFP talks are online ^^, and they are pretty great)</p>",
        "id": 161087919,
        "sender_full_name": "centril",
        "timestamp": 1552936886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when is your PTO?</p>",
        "id": 161087990,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552936930
    },
    {
        "content": "<p>first week of april</p>",
        "id": 161088000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936943
    },
    {
        "content": "<p>gonna tour Uruguay after Rust LATAM</p>",
        "id": 161088010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936953
    },
    {
        "content": "<p>and yeah, there's that too :)</p>",
        "id": 161088015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  (there's a talk about lambda prolog (\"makam\") that may interest you, <a href=\"https://www.youtube.com/watch?v=tg1a3Dd6Se0\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=tg1a3Dd6Se0\">https://www.youtube.com/watch?v=tg1a3Dd6Se0</a>)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"tg1a3Dd6Se0\" href=\"https://www.youtube.com/watch?v=tg1a3Dd6Se0\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=tg1a3Dd6Se0\"><img src=\"https://i.ytimg.com/vi/tg1a3Dd6Se0/default.jpg\"></a></div>",
        "id": 161088022,
        "sender_full_name": "centril",
        "timestamp": 1552936965
    },
    {
        "content": "<p>I remember the paper</p>",
        "id": 161088029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936976
    },
    {
        "content": "<p>so i'm going to put a few things into the <a href=\"https://paper.dropbox.com/doc/WG-Traits-Planning-Meeting--AZhwUxcUHq2KDbqDVoFRQARDAg-oDfr6ct8xx63HSAOOmIZX\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/WG-Traits-Planning-Meeting--AZhwUxcUHq2KDbqDVoFRQARDAg-oDfr6ct8xx63HSAOOmIZX\">dropbox paper document</a> regarding sprint goals</p>",
        "id": 161088053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552936996
    },
    {
        "content": "<p>OK, seems like it'd be good to try to build up some momentum over the next 1.5 weeks</p>",
        "id": 161088066,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552937006
    },
    {
        "content": "<p>(enough that it can continue without you)</p>",
        "id": 161088071,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552937014
    },
    {
        "content": "<p>i won't be at Rust LATAM</p>",
        "id": 161088076,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552937019
    },
    {
        "content": "<p>Yes I think a good idea <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> would be for us to frontload some amoutn of work</p>",
        "id": 161088159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937072
    },
    {
        "content": "<p>i.e., me + you perhaps</p>",
        "id": 161088162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937076
    },
    {
        "content": "<p>I have a project in mind ;)</p>",
        "id": 161088163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937079
    },
    {
        "content": "<p>sounds great!</p>",
        "id": 161088172,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552937085
    },
    {
        "content": "<p>so i'm typing a bit into the paper and perhaps folks should drop in there, but something <em>here</em> I want to throw out for future dicussion:</p>\n<ul>\n<li>I wanted to setup a weekly Zoom slot for \"design meetings\"</li>\n</ul>",
        "id": 161088216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937137
    },
    {
        "content": "<p>I was thinking we could keep a queue of topics</p>",
        "id": 161088224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937143
    },
    {
        "content": "<p>but basically there is some amount of design discussion we should be doing</p>",
        "id": 161088230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937152
    },
    {
        "content": "<p>and people could nominate things for that week -- a place to talk over in detail the question they are thinking about</p>",
        "id": 161088282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is that just for chalk or in general?</p>",
        "id": 161088305,
        "sender_full_name": "centril",
        "timestamp": 1552937202
    },
    {
        "content": "<p>(been thinking about how to make sure we have some time for that)</p>",
        "id": 161088306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937202
    },
    {
        "content": "<p>I would say .. anything? but priority for sprint topics? maybe just sprint topics?</p>",
        "id": 161088317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937222
    },
    {
        "content": "<p>sgtm</p>",
        "id": 161088361,
        "sender_full_name": "centril",
        "timestamp": 1552937275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span> so in the RLS doc I put down \"remove concept of “local and external” and reformulate in terms of crate-ids — make coherence relative to a specific crate? \" and proposed it for you</p>",
        "id": 161088498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937358
    },
    {
        "content": "<p>this is a good example of work that is worthwhile I think, even though it won't directly affect rustc</p>",
        "id": 161088513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937371
    },
    {
        "content": "<p>are you still interested in that?</p>",
        "id": 161088522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937380
    },
    {
        "content": "<p>how much time <em>do</em> you have?</p>",
        "id": 161088527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937388
    },
    {
        "content": "<blockquote>\n<p>even though it won't directly affect rustc</p>\n</blockquote>\n<p>yet...</p>",
        "id": 161088535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937396
    },
    {
        "content": "<blockquote>\n<p>how much time <em>do</em> you have?</p>\n</blockquote>\n<p>by this I mean .. I don't want to pressure you to some extent :) it doesn't seem <em>that</em> hard to me though, we could probably schedule an hour to talk it over</p>",
        "id": 161088614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> </p>\n<blockquote>\n<p>i personally think that getting full-blown GATs working is more important than specialization</p>\n</blockquote>\n<p>fwiw (maybe nothing, just figured I should say something) I disagree</p>",
        "id": 161088659,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552937520
    },
    {
        "content": "<p>because I think it's much more common for people in all parts of Rust to be blocked by an issue that's wrapped up in details of coherence and specialization than it is for them to need GATs</p>",
        "id": 161088743,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552937575
    },
    {
        "content": "<p>hah, fair enough! though i think in the end it doesn't matter that much, since either is dependent on chalk integration, and GATs happens immediately</p>",
        "id": 161088749,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552937584
    },
    {
        "content": "<p>(I think specialization has a lot more open questions and the path to stabilization is much less clear)</p>",
        "id": 161088757,
        "sender_full_name": "centril",
        "timestamp": 1552937585
    },
    {
        "content": "<p>mhm-- it also has a much clearer path towards an MVP though (I think)</p>",
        "id": 161088782,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552937613
    },
    {
        "content": "<p>(I don't ^^)</p>",
        "id": 161088793,
        "sender_full_name": "centril",
        "timestamp": 1552937626
    },
    {
        "content": "<p>like, we're almost at a point where we could stabilize the existing implementation if you only allow specialization that uses concrete types</p>",
        "id": 161088802,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552937637
    },
    {
        "content": "<p>which is 90% of my needs</p>",
        "id": 161088852,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552937647
    },
    {
        "content": "<p>We haven't even discussed <code>specialize(T: Foo)</code> due to <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> -- I don't see how we can stabilize the existing implementation.</p>",
        "id": 161088895,
        "sender_full_name": "centril",
        "timestamp": 1552937694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> so we discussed over in <a class=\"stream\" data-stream-id=\"191167\" href=\"/#narrow/stream/191167-t-compiler.2Fwg-rls-2.2E0.2Fchalk\">#t-compiler/wg-rls-2.0/chalk</a> this work item in some detail:</p>\n<blockquote>\n<p>refactor lowering code to salsa queries that “demand” information</p>\n</blockquote>\n<p>I didn't start doing anything there -- I'm presuming you didn't either. It doesn't really help rustc per se, but I am wondering if we feel it's worth trying to do? It seems like a lot of it was kind of \"porting over\" some of the \"on demand\" code from rustc?</p>\n<p>I guess what I'm trying to figure out is just how <em>focused</em> to be.</p>",
        "id": 161088919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937708
    },
    {
        "content": "<p>Probably more focused is better.</p>",
        "id": 161088956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937739
    },
    {
        "content": "<blockquote>\n<p>Probably more focused is better.</p>\n</blockquote>\n<p>seems right for our first sprint</p>",
        "id": 161088981,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552937759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I mean, it obviously wouldn't be the existing implementation exactly, but conceptually the bits that need to be changed are a much smaller implementation concern than GATs</p>",
        "id": 161089106,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552937847
    },
    {
        "content": "<p>(I suggest we move the specialization talk to a distinct topic)</p>",
        "id": 161089116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552937859
    },
    {
        "content": "<p>sg</p>",
        "id": 161089120,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552937863
    },
    {
        "content": "<p>re: sprint, can we devote some time to putting up a clear issue list with some info on at getting started with each issue?</p>",
        "id": 161089195,
        "sender_full_name": "tmandry",
        "timestamp": 1552937917
    },
    {
        "content": "<p>or was your plan more to assign things to particular people from the start</p>",
        "id": 161089207,
        "sender_full_name": "tmandry",
        "timestamp": 1552937928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I barely started the queryfication work in chalk</p>",
        "id": 161089242,
        "sender_full_name": "scalexm",
        "timestamp": 1552937964
    },
    {
        "content": "<p>But that’s right basically it was like porting over the code in rustc</p>",
        "id": 161089256,
        "sender_full_name": "scalexm",
        "timestamp": 1552937977
    },
    {
        "content": "<blockquote>\n<p>re: sprint, can we devote some time to putting up a clear issue list with some info on at getting started with each issue?</p>\n</blockquote>\n<p>that's what I'm trying to do now, <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> -- that is, break things down into  a bit more concrete steps. We don't necessarily have to have people assigned, but it's .. maybe a good idea.</p>",
        "id": 161089328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938019
    },
    {
        "content": "<p>I don’t know if it’s worth doing it, I felt like it was, but it will definitely not be helping rustc in the short term</p>",
        "id": 161089331,
        "sender_full_name": "scalexm",
        "timestamp": 1552938019
    },
    {
        "content": "<p>I still feel unsettled. I feel a certain urgency to see RLS 2.0 making progress. I also feel like \"chalk the codebase\" needs cleanup, and that there maybe an opportunity to parallelize a bit there -- but I do <em>also</em> think none of us have a ton of time, so the focus right now should probably be on getting <strong>more people familiar with the code</strong> than anything.</p>",
        "id": 161089394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938092
    },
    {
        "content": "<p>On the other hand, it didn’t seem like a « huge » work either, just a big refactoring</p>",
        "id": 161089396,
        "sender_full_name": "scalexm",
        "timestamp": 1552938098
    },
    {
        "content": "<p>Which actually might be an argument in favor, i.e., but looking on it more as a mentoring task</p>",
        "id": 161089399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938103
    },
    {
        "content": "<p>(I have to run, but I'd be interested in picking issues off at some point)</p>",
        "id": 161089414,
        "sender_full_name": "tmandry",
        "timestamp": 1552938116
    },
    {
        "content": "<p>Basically it seems like a problem that right now only <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> and I kind of have the two codebases in our heads</p>",
        "id": 161089467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938137
    },
    {
        "content": "<blockquote>\n<p>how much time <em>do</em> you have?</p>\n</blockquote>\n<p>I have a good amount of time. I will need some guidance though so I know what is needed and what I need to do. Is there any issue + some mentoring instructions somewhere?</p>",
        "id": 161089479,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1552938154
    },
    {
        "content": "<blockquote>\n<p>On the other hand, it didn’t seem like a « huge » work either, just a big refactoring</p>\n</blockquote>\n<p>why don't we say this</p>",
        "id": 161089488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938167
    },
    {
        "content": "<p>maybe this goes against the way sprints should work but I was thinking maybe it's useful to have a kind of \"shortlist\" of other ideas, depending on how things go</p>",
        "id": 161089521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938194
    },
    {
        "content": "<blockquote>\n<p>I have a good amount of time. I will need some guidance though so I know what is needed and what I need to do. Is there any issue + some mentoring instructions somewhere?</p>\n</blockquote>\n<p>no but I think one could be prepared</p>",
        "id": 161089542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938218
    },
    {
        "content": "<blockquote>\n<p>no but I think one could be prepared</p>\n</blockquote>\n<p>That would be helpful. :)</p>",
        "id": 161089712,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1552938354
    },
    {
        "content": "<p>I think what might be faster, <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span>, is if we did a recorded call to talk it over</p>",
        "id": 161089800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938396
    },
    {
        "content": "<p>although maybe not</p>",
        "id": 161089803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938399
    },
    {
        "content": "<p>That could work too</p>",
        "id": 161089840,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1552938430
    },
    {
        "content": "<p>Thursday at 2 pm EST?</p>",
        "id": 161089875,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1552938456
    },
    {
        "content": "<p>Maybe, let's discuss that in a bit.</p>",
        "id": 161089979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938518
    },
    {
        "content": "<p>kk</p>",
        "id": 161089990,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1552938530
    },
    {
        "content": "<p>(well, that time doesn't work)</p>",
        "id": 161089991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> -- so I put you down for this \"region ordering\" question</p>",
        "id": 161089999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938541
    },
    {
        "content": "<p>er, sorry</p>",
        "id": 161090010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938547
    },
    {
        "content": "<p>\"builtin bounds\" / goal reordering</p>",
        "id": 161090018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938556
    },
    {
        "content": "<p>that's a bit vague and I suspect you have no idea what I am talking about</p>",
        "id": 161090047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938585
    },
    {
        "content": "<p>heh, indeed, but i'm game anyway!</p>",
        "id": 161090081,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552938599
    },
    {
        "content": "<p>so i'm trying to think how to \"get started\" on it</p>",
        "id": 161090160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938634
    },
    {
        "content": "<p>in light of that ;)</p>",
        "id": 161090168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938649
    },
    {
        "content": "<p>actually, not sure how many people are still around (this is a marathon planning session...) but I'm just going to keep dumping ideas for a second</p>",
        "id": 161090231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938696
    },
    {
        "content": "<p>could always start with a recorded zoom meeting?</p>",
        "id": 161090235,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552938705
    },
    {
        "content": "<p>basically, what is the set of codebases that people need to become familiar with</p>",
        "id": 161090237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938707
    },
    {
        "content": "<p>yes, I am jumping one step back from that idea</p>",
        "id": 161090248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>  recorded zoom meeting <em>now</em>?</p>",
        "id": 161090305,
        "sender_full_name": "centril",
        "timestamp": 1552938733
    },
    {
        "content": "<p>no, i meant, when we want to get started on this work item</p>",
        "id": 161090316,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552938749
    },
    {
        "content": "<p>oh, yes, makes sense</p>",
        "id": 161090331,
        "sender_full_name": "centril",
        "timestamp": 1552938757
    },
    {
        "content": "<p>basically it's an easy way for <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> to give the  lay of the land without too much prep</p>",
        "id": 161090332,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552938760
    },
    {
        "content": "<p>I think it's something like this:</p>\n<ul>\n<li>chalk-engine, how it works internally</li>\n<li>the existing rustc-chalk integration, how it works and bridges to chalk-engine</li>\n<li><em>maybe</em> how chalk lowering works, but that's some of the stuff we want to refactor</li>\n</ul>",
        "id": 161090335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938762
    },
    {
        "content": "<p>maybe a \"sprint work item\" in and of itself should be recording a few sessions trying to over the related code</p>",
        "id": 161090385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938800
    },
    {
        "content": "<p>(with an eye towards some of our goals)</p>",
        "id": 161090398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938813
    },
    {
        "content": "<p>I'm trying to decide whether it is possible to cover chalk-engine + existing rustc-chalk integration in one hour</p>",
        "id": 161090419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938837
    },
    {
        "content": "<p>maybe</p>",
        "id": 161090420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938838
    },
    {
        "content": "<p>it seems potentially nice to do so</p>",
        "id": 161090427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938841
    },
    {
        "content": "<p>since we could e.g. follow a single example \"end to end\"</p>",
        "id": 161090467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938846
    },
    {
        "content": "<p>actually I think it probably makes sense to start with the rustc-chalk integration</p>",
        "id": 161090495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938883
    },
    {
        "content": "<p>well I don't know, one or the other</p>",
        "id": 161090513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938899
    },
    {
        "content": "<p>haha</p>",
        "id": 161090520,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552938904
    },
    {
        "content": "<p>regardless, maybe we should aim to do something tomorrow</p>",
        "id": 161090529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938910
    },
    {
        "content": "<p>for me personally, i imagine it'll be pretty easy to get back up to speed with Chalk</p>",
        "id": 161090538,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552938917
    },
    {
        "content": "<p>and I'll decide in the meantime ;)</p>",
        "id": 161090555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938926
    },
    {
        "content": "<p>probably somewhat less so rustc, since it's been a lot longer since i worked on that</p>",
        "id": 161090565,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552938931
    },
    {
        "content": "<blockquote>\n<p>regardless, maybe we should aim to do something tomorrow</p>\n</blockquote>\n<p>wfm</p>",
        "id": 161090579,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552938942
    },
    {
        "content": "<p>we had a nice session on this at the rust all hands actually</p>",
        "id": 161090652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938974
    },
    {
        "content": "<p>of course it's all gone from my head</p>",
        "id": 161090658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938978
    },
    {
        "content": "<p>but we didn't of course get down to the level of code</p>",
        "id": 161090680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552938995
    },
    {
        "content": "<p>more the 'high level concepts'</p>",
        "id": 161090686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939000
    },
    {
        "content": "<p>ps, have you all seen the \"timelines\" in dropbox paper? kind of nifty ;)</p>",
        "id": 161090704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939021
    },
    {
        "content": "<p>OK I don't <em>quite</em> see how to get more precise yet, I think part of the work as we go will be trying to \"unfold\" these items into more and more specific things</p>",
        "id": 161090856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939142
    },
    {
        "content": "<p>but I think all of the items on this page are doable in 6 weeks</p>",
        "id": 161090890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939162
    },
    {
        "content": "<p>makes sense (feels like roadmap but on a smaller scale)</p>",
        "id": 161090891,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552939163
    },
    {
        "content": "<p>modulo how many other things get in the way :)</p>",
        "id": 161090901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> \"user stories\" ;)</p>",
        "id": 161090923,
        "sender_full_name": "centril",
        "timestamp": 1552939197
    },
    {
        "content": "<p>I think I may move this dropbox paper into its own folder</p>",
        "id": 161090962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939202
    },
    {
        "content": "<p>(that is, with one paper per sprint)</p>",
        "id": 161090988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939208
    },
    {
        "content": "<p>sg</p>",
        "id": 161090997,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552939215
    },
    {
        "content": "<p>I'll drop out of the meeting and review some PRs to the reference</p>",
        "id": 161091013,
        "sender_full_name": "centril",
        "timestamp": 1552939230
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/2019.03.18-2019.04.29--AZlfxnrp65HrMpYGI9vtjVlYAg-5gix1dpUSHKirVcEww5iw\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/2019.03.18-2019.04.29--AZlfxnrp65HrMpYGI9vtjVlYAg-5gix1dpUSHKirVcEww5iw\">sprint paper doc</a></p>",
        "id": 161091097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939293
    },
    {
        "content": "<p>looks great <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 161091168,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552939327
    },
    {
        "content": "<p>ok, so, now to schedule a few things :)</p>",
        "id": 161091191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939362
    },
    {
        "content": "<p>For the call covering rustc-chalk -integration, I'd like to do that sooner rather than later. I propose either:</p>",
        "id": 161091415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939525
    },
    {
        "content": "<ul>\n<li>Noon tomorrow (Boston time, UTC-04:00 at the moment afaik)</li>\n</ul>",
        "id": 161091467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939563
    },
    {
        "content": "<ul>\n<li>15:00 tomorrow (Boston time)</li>\n</ul>",
        "id": 161091492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939569
    },
    {
        "content": "<p>the latter would be preferable for me</p>",
        "id": 161091546,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552939622
    },
    {
        "content": "<p>ok, that's prob better for (most) Europeans too</p>",
        "id": 161091563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939635
    },
    {
        "content": "<p>let's just do that</p>",
        "id": 161091565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939638
    },
    {
        "content": "<blockquote>\n<p>For the call covering rustc-chalk -integration, I'd like to do that sooner rather than later. I propose either:</p>\n</blockquote>\n<p>Does that cover chalk integration “future steps”? (That's the heading my task is under)</p>",
        "id": 161091582,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1552939652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span> nope</p>",
        "id": 161091683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939723
    },
    {
        "content": "<p>I was just going to ping you</p>",
        "id": 161091695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939728
    },
    {
        "content": "<p>so Thu is super busy for me</p>",
        "id": 161091720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939747
    },
    {
        "content": "<p>other days are better</p>",
        "id": 161091728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> have what you need from me at the moment?</p>",
        "id": 161091732,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1552939756
    },
    {
        "content": "<p>yep, I think so</p>",
        "id": 161091738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939763
    },
    {
        "content": "<p>Suggest a time?</p>",
        "id": 161091743,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1552939765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span> wed 14:00 Boston time?</p>",
        "id": 161091865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552939863
    },
    {
        "content": "<p>Yup that works. Talk to you then <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 161091988,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1552939966
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 161180402,
        "sender_full_name": "scalexm",
        "timestamp": 1553022153
    }
]