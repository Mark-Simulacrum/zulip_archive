[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> --</p>",
        "id": 195762762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588190581
    },
    {
        "content": "<p>let's move further discussion to this topic</p>",
        "id": 195762777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588190587
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> is the one who did most of the impl work on the recursive solver</p>",
        "id": 195762797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588190600
    },
    {
        "content": "<p>I've not put a lot of thought either into how to map the coinduction work we did on the SLG solver to the recursive one, but <em>should</em> map over <em>fairly</em> analogously --</p>",
        "id": 195762856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588190640
    },
    {
        "content": "<p>the details of the docs don't match, but e.g. the idea of a \"strand\", in the recursive solver, is basically just \"the program stack\"</p>",
        "id": 195763176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588190778
    },
    {
        "content": "<p>anyway, have to run for now</p>",
        "id": 195763208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588190801
    },
    {
        "content": "<p>Sorry this has taken a bit more time. I have had some other unrelated issues that needed dealing with. Will continue to dig in.<br>\nOn another note the this video: <a href=\"https://www.youtube.com/watch?v=Ny2928cGDoM&amp;t=3003s\" title=\"https://www.youtube.com/watch?v=Ny2928cGDoM&amp;t=3003s\">https://www.youtube.com/watch?v=Ny2928cGDoM&amp;t=3003s</a> plus the related ones  are quite useful for understanding the general concepts: <a href=\"https://www.youtube.com/watch?v=Ny2928cGDoM&amp;t=3003s\" title=\"https://www.youtube.com/watch?v=Ny2928cGDoM&amp;t=3003s\">https://www.youtube.com/watch?v=Ny2928cGDoM&amp;t=3003s</a>. Should we add them to the chalk book?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Ny2928cGDoM\" href=\"https://www.youtube.com/watch?v=Ny2928cGDoM&amp;t=3003s\" title=\"https://www.youtube.com/watch?v=Ny2928cGDoM&amp;t=3003s\"><img src=\"https://i.ytimg.com/vi/Ny2928cGDoM/default.jpg\"></a></div>",
        "id": 196894798,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1588944323
    },
    {
        "content": "<p>Also has another question. I read the docs on the recursive solver but I fail to understand what is the general plan here. Just have the two solvers working side by side and gradually evaluate which one is a better fit and transition to it completely?</p>",
        "id": 196894908,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1588944379
    },
    {
        "content": "<p>We are still evaluating, but I am expecting to consolidate on one solver eventually.</p>",
        "id": 196897004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588945525
    },
    {
        "content": "<p>I see, makes sense. What are the evaluation criteria. I guess what I am asking is, what are the things that are compared and shall eventually inform the consolidation solution ?</p>",
        "id": 196897883,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1588946053
    },
    {
        "content": "<p>We haven't enumerated specific criteria, but some of the considerations might be</p>\n<h1>Pro recursive solver</h1>\n<ul>\n<li>we see a path (not yet realized) for integrating into salsa and query systems</li>\n<li>it can handle assoc type ambiguity</li>\n<li>it has a clearer parallelization path</li>\n</ul>\n<h1>Pro SLG</h1>\n<ul>\n<li>it is more complete</li>\n</ul>",
        "id": 196898973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588946600
    },
    {
        "content": "<p>another criteria would be runtime performance, when we get around to testing that</p>",
        "id": 196898999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588946616
    },
    {
        "content": "<p>After a bit of hardship trying to understand how all of it. fits together, I have a branch that tries to tackle this issue. The tests that were not passing before pass now. Just need to do some sanity checking and will post a PR tomorrow.</p>",
        "id": 197605815,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1589484417
    },
    {
        "content": "<p>Tried to use the concept of <code>delayed goals</code> described in the initial notes that elaborate on the problem. Just need to check a few more things</p>",
        "id": 197605892,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1589484466
    },
    {
        "content": "<p>Alright. So here is the PR: <a href=\"https://github.com/rust-lang/chalk/pull/457\">https://github.com/rust-lang/chalk/pull/457</a></p>",
        "id": 197689262,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1589548937
    },
    {
        "content": "<p>That being said, i am keen to pick up some more stuff.  If there any future plans for the recursive solver or performance, etc that will be great</p>",
        "id": 197726980,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1589564608
    },
    {
        "content": "<p>Infact i find the codebase incredibly interesting :)</p>",
        "id": 197727015,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1589564630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> Since you've looked around the recursive solver (and presumably chalk-engine for some coinduction code) the first bullet point here might be good: <a href=\"https://github.com/rust-lang/chalk/issues/456\">https://github.com/rust-lang/chalk/issues/456</a></p>",
        "id": 197735660,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589568505
    },
    {
        "content": "<p>Got it</p>",
        "id": 197735781,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1589568573
    },
    {
        "content": "<p>the other to points are actually pretty easy</p>",
        "id": 197735805,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589568592
    },
    {
        "content": "<p>Might try to tackle them as well</p>",
        "id": 197735953,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1589568654
    },
    {
        "content": "<p>What about the overall direction of the recirsive solver</p>",
        "id": 197735985,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1589568667
    },
    {
        "content": "<p>Are there any other pieces of work that are about to be addressed ?</p>",
        "id": 197736017,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1589568685
    },
    {
        "content": "<p>I mean what is the general plan for it ?</p>",
        "id": 197736036,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1589568697
    },
    {
        "content": "<p>Hmm, not exactly sure.</p>",
        "id": 197736253,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589568794
    },
    {
        "content": "<p>I don't know if there's anything <em>right now</em> that we know needs to be done with the recursive solver specifically</p>",
        "id": 197736309,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589568817
    },
    {
        "content": "<p>long term though, we need to/will decide whether to stick with the recursive solver or to use SLG</p>",
        "id": 197736421,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589568858
    },
    {
        "content": "<p>But I think to make those decisions, we really need more data</p>",
        "id": 197736454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589568874
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> mentioned above, there are some considerations for both</p>",
        "id": 197736557,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589568922
    },
    {
        "content": "<p>(I'm reading the PR now)</p>",
        "id": 197973037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589824628
    },
    {
        "content": "<p>Did it look  correct ?</p>",
        "id": 197991843,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1589833961
    },
    {
        "content": "<p>I left comments. The TL;DR is \"yes but I think we might want to do it a bit differently\"</p>",
        "id": 197995646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589836077
    },
    {
        "content": "<p>but I need to spend a bit of time to sketch out what I mean</p>",
        "id": 197995699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589836088
    },
    {
        "content": "<p>because it's more at \"hunch\" territory right now than real proposal</p>",
        "id": 197995717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589836098
    },
    {
        "content": "<p>that said, I think what you did matches the existing structure of the recursive solver right now, it's just that I had in mind some changes to that structure that might affect the right fix here</p>",
        "id": 197995769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589836132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  That being said, should I address the feedback or wait for some further insights?</p>",
        "id": 198067670,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1589896050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> let me see if I can sketch out some of my ideas right now</p>",
        "id": 198129786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589923997
    },
    {
        "content": "<p>ok it seems clear that the first step here is probably documenting how the recursive solver works today</p>",
        "id": 198133143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589925968
    },
    {
        "content": "<p>started taking notes in <a href=\"https://hackmd.io/OocwyNPjQ6aTytdzsJz1EQ\">this hackmd</a> though mostly I was bringing some of the current design back into cache</p>",
        "id": 198141622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589932605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> This is a useful beginning. COuld not stay for the whole meeting yesterday but just looked through the hackMD doc. Is it possible that I get involved a bit more into the recursive solver stream of work? How is all that going to be organized. Are there going to be issues created for it, etc ?</p>",
        "id": 198190559,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1589977692
    },
    {
        "content": "<p>OK so</p>",
        "id": 199202632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> I've been putting some thought into this and I think that the recursive solver admits a rather simpler approach</p>",
        "id": 199202659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781485
    },
    {
        "content": "<p>although hmm if my thesis is correct than actually I... wonder why some of the tests are failing now...</p>",
        "id": 199202689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781518
    },
    {
        "content": "<p>And I have been struggling hard to doscover it myself...</p>",
        "id": 199202705,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1590781526
    },
    {
        "content": "<p>oh, ok , I think I know why</p>",
        "id": 199203027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781693
    },
    {
        "content": "<p>so..I guess I have to finish my write-up of how the recursive solver works</p>",
        "id": 199203119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781754
    },
    {
        "content": "<p>to kind of explain the proposal I have in mind :)</p>",
        "id": 199203137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781759
    },
    {
        "content": "<p>but I'll try a shorter version, and maybe it helps</p>",
        "id": 199203152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781765
    },
    {
        "content": "<p>the way that the recursive solver handles <strong>induction</strong> is basically by iterating</p>",
        "id": 199203174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781775
    },
    {
        "content": "<p>i.e., if you are solving a goal G1</p>",
        "id": 199203191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781784
    },
    {
        "content": "<p>and that requires G2 which requires G1 (say)</p>",
        "id": 199203204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781791
    },
    {
        "content": "<p>we start out G1 with an interim result of \"error\"</p>",
        "id": 199203366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781867
    },
    {
        "content": "<p>yes</p>",
        "id": 199203396,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1590781886
    },
    {
        "content": "<p>when G2 recursively reaches G1, we  will start by using that interim result, but flag (using the \"minimums\") that the G2 entry on the stack depends on G1</p>",
        "id": 199203424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781908
    },
    {
        "content": "<p>then when G1 would be complete with some new result R, if it is not error, we re-execute G1</p>",
        "id": 199203482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781923
    },
    {
        "content": "<p>and this time when the recursion occurs, we can use that new result R</p>",
        "id": 199203488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781930
    },
    {
        "content": "<p>this should fairly quickly reach a fixed point, because if new results get created, then R quickly becomes \"ambiguous\"</p>",
        "id": 199203525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781950
    },
    {
        "content": "<p>(actually I find I am a bit confused again by one of the tests and why the recursive sovler behaves as it does...)</p>",
        "id": 199203593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781997
    },
    {
        "content": "<p>but anyway the basic idea that I am thinking of is that we can likely use basically the same approach for coinduction</p>",
        "id": 199203619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782017
    },
    {
        "content": "<p>except that the \"interim result\" is not \"error\" but \"true for everything\"</p>",
        "id": 199203710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782048
    },
    {
        "content": "<p>and the idea then is that the iterations are kind of \"narrowing down\" the cases where it's true</p>",
        "id": 199203741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782070
    },
    {
        "content": "<p>instead of \"expanding them\", as you would for induction</p>",
        "id": 199203766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782084
    },
    {
        "content": "<p>this...actually kind of makes sense if you think about what induction/co-induction are supposed to mean, now that I think about it</p>",
        "id": 199203783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782095
    },
    {
        "content": "<p>so in cases like</p>\n<div class=\"codehilite\"><pre><span></span><code>C1 :- C2\nC2 :- C3\nC3 :- C1, C4\n</code></pre></div>\n\n\n<p>you would start out assuming C1 is true, but you would find it is false because C3 is false, and if you executed again, you'd reach a fixed point of false</p>",
        "id": 199203842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782133
    },
    {
        "content": "<p>I'm not sure if executing again is actually needed though in that case</p>",
        "id": 199203895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782157
    },
    {
        "content": "<p>because you can't get \"narrower\" than \"never\"</p>",
        "id": 199203933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782162
    },
    {
        "content": "<p>but in a case like</p>\n<div class=\"codehilite\"><pre><span></span><code>C1(X) :- C2(Y), X = 22\nC2(X) :- C3(X), X = 44\nC3(X) :- C1(X), C2(X)\n</code></pre></div>",
        "id": 199203974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782185
    },
    {
        "content": "<p>that's more interesting</p>",
        "id": 199203985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782189
    },
    {
        "content": "<p>initially you think C1 is true for all cases -- but at the end of the loop, because of <code>X = 22</code>, you find it's only true for <code>X = 22</code>, so you re-execute</p>",
        "id": 199204026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782211
    },
    {
        "content": "<p>this time you'll wind up with a unification error because you'll get that <code>C3</code> is only true for <code>X = 22</code>, and that will then fail in <code>C2</code></p>",
        "id": 199204050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782228
    },
    {
        "content": "<p>so in short I don't think we really need \"delayed goals\" or \"trivial cycles\" at all in this model</p>",
        "id": 199204079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782249
    },
    {
        "content": "<p>it's kind of simpler</p>",
        "id": 199204083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782252
    },
    {
        "content": "<p>at the cost of having to re-execute around cycles, but that's kind of the core design of the recursive solver so never mind that</p>",
        "id": 199204134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782270
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 199204150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782277
    },
    {
        "content": "<p>hmm will have to read over a few times to digest fully but one thing that pops out is the following. You are saying that we start out by assuming C1 to be true. How would we assume that if it s the first time we see C1. At that point we do not know there is a coinductive cycle ?</p>",
        "id": 199204321,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1590782333
    },
    {
        "content": "<p>well we know it's a coinductive goal</p>",
        "id": 199204363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782355
    },
    {
        "content": "<p>the idea is that the initial value for induction is \"never true\" but for co-induction it's \"always true\"</p>",
        "id": 199204413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782374
    },
    {
        "content": "<p>but I have to ponder one other thing</p>",
        "id": 199204457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782397
    },
    {
        "content": "<p>if you have</p>\n<div class=\"codehilite\"><pre><span></span><code>Coinductive :- Inductive\nInductive :- Coinductive\n</code></pre></div>\n\n\n<p>we don't want that to be accepted, I have to look back at the way some of the papers talk about it, I'm not sure if we can just always treat that as an error?</p>",
        "id": 199204645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782476
    },
    {
        "content": "<p>in other words, if the stack is purely coinductive, or purely inductive,</p>",
        "id": 199204663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782484
    },
    {
        "content": "<p>and you setup the initial conditions as  I said</p>",
        "id": 199204680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782494
    },
    {
        "content": "<p>(and you also do the merging in the opposite direction)</p>",
        "id": 199204692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782501
    },
    {
        "content": "<p>I think everything \"just works\"</p>",
        "id": 199204698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782504
    },
    {
        "content": "<p>but I'm not sure, with mixed stacks, maybe the answer is that this is always an error (unprovable). I believe that is correct, but I have to work through some examples.</p>",
        "id": 199204776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782529
    },
    {
        "content": "<p>the intuition for induction is: </p>\n<ul>\n<li>you need to build a proof tree with no cycles in it</li>\n<li>you start with error, so that's fine, because every proof tree you sucecssfully build will be acyclic, and say that produces answer A</li>\n<li>then in the next round, any proof tree you build based on A has no cycles, because it starts with A (which is acyclic) and adds whatever you added (which is finite)</li>\n</ul>",
        "id": 199204877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782605
    },
    {
        "content": "<p>if the process <em>terminates</em> (reaches fixed point), then you're all set</p>",
        "id": 199204910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782624
    },
    {
        "content": "<p>in a prolog setting, it might never terminate...for us we might reach ambiguity...</p>",
        "id": 199204931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782635
    },
    {
        "content": "<p>for coinduction it works a bit differently, but basically you can have cycles, as long as there are no internal errors in it, and the result will kind of work out the same way (I think)</p>",
        "id": 199205090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782693
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> what I might do right now</p>",
        "id": 199205191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782738
    },
    {
        "content": "<p>because I'm in the mood to write some code...</p>",
        "id": 199205201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782742
    },
    {
        "content": "<p>...is try to simplify and poke at the recursive solver</p>",
        "id": 199205210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782747
    },
    {
        "content": "<p>I find it a bit \"entangled\" in its current structure, and I wanted to try and separate out the caching</p>",
        "id": 199205220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782756
    },
    {
        "content": "<p>this is all very useful information</p>",
        "id": 199205226,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1590782759
    },
    {
        "content": "<p>I was a bit afraid of stepping on your toes in the branch</p>",
        "id": 199205233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782761
    },
    {
        "content": "<p>but now I sort of think the approach we should take would be totally different anyway</p>",
        "id": 199205279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782771
    },
    {
        "content": "<p>so I'm less afraid of that :)</p>",
        "id": 199205287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782776
    },
    {
        "content": "<p>yes most  likely that will be quite helpful (as opposed to stepping on my toes)</p>",
        "id": 199205379,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1590782829
    },
    {
        "content": "<p>I was wondering whether there are any conrete pieces of work I can take up on the recursive solver</p>",
        "id": 199205430,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1590782847
    },
    {
        "content": "<p>the integration with salsa and parallel querying sounds quite interesting</p>",
        "id": 199205482,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1590782872
    },
    {
        "content": "<p>what I might actually do is document it as much as refactor it</p>",
        "id": 199205488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782878
    },
    {
        "content": "<p>yeah, I'd love to be working on that with you, and that's partly why I want to spend a bit of time just poking at the code</p>",
        "id": 199205539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782890
    },
    {
        "content": "<p>not sure what are the next milestones for all this work</p>",
        "id": 199205544,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1590782891
    },
    {
        "content": "<p>because I can't quite \"formulate the steps\" in my head right now</p>",
        "id": 199205559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590782901
    },
    {
        "content": "<p>that sounds great</p>",
        "id": 199205565,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1590782904
    },
    {
        "content": "<p>to be painfully honest, I have spent a fair amount of time looking at the code and at times I get quite confused</p>",
        "id": 199205645,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1590782942
    },
    {
        "content": "<p>maybe the fact that I am trying to understand it by reading the SLG docs and attempting to draw a parallel does not quite help</p>",
        "id": 199205758,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1590782990
    },
    {
        "content": "<p>yeah it's quite different in many respects</p>",
        "id": 199205886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590783030
    },
    {
        "content": "<p>ok, I'm going to start by adding some doc comments and working on some docs then</p>",
        "id": 199206004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590783097
    },
    {
        "content": "<p>and maybe along the way I will see what (if any) refactorings I felt I wanted to do</p>",
        "id": 199206020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590783108
    },
    {
        "content": "<p>ok I started a branch here with documentation:</p>\n<p><a href=\"https://github.com/nikomatsakis/chalk-ndm/tree/recursive-solver-document\">https://github.com/nikomatsakis/chalk-ndm/tree/recursive-solver-document</a></p>",
        "id": 199218020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590789886
    },
    {
        "content": "<p>I maybe didn't get to the most interesting bits</p>",
        "id": 199218044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590789898
    },
    {
        "content": "<p>but I will :)</p>",
        "id": 199218071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590789921
    },
    {
        "content": "<p>and I think my coverage of inductive cycles more-or-less repeated some stuff that <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> wrote earlier and which I realize now is probably in the chalk book somewhere else</p>",
        "id": 199218082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590789929
    },
    {
        "content": "<p>but oh well</p>",
        "id": 199218086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590789931
    },
    {
        "content": "<p>I just realized -- but I have to stop -- that I can use mermaid to draw graphs and explain some of these intutitions</p>",
        "id": 199218116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590789949
    },
    {
        "content": "<p>ooh</p>",
        "id": 199218118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590789951
    },
    {
        "content": "<p>ok, more later</p>",
        "id": 199218126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590789954
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> I was thinking more about this and I feel like the model I semi-proposed here is the right one. I guess that per our earlier conversation I will try to leave some implementation notes today on an issue on the chalk repo?</p>",
        "id": 200674552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591970919
    },
    {
        "content": "<p>That sounds great. I will keep an eye out for it</p>",
        "id": 200684050,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1591975379
    },
    {
        "content": "<p>OK, I've been writing things down, I realized in the course of doing it that this should be I think relatively easy</p>",
        "id": 200703786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591985042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> <a href=\"https://github.com/rust-lang/chalk/issues/399#issuecomment-643420016\">comment</a></p>",
        "id": 200705993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591986039
    }
]