[
    {
        "content": "<p><code>fn equate_normalized_input_or_output</code> doesn't immediately <code>bug!</code> if <code>eq_types</code> fails but instead does this and then tries again:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// FIXME(jackh726): This is a hack. It's somewhat like</span>\n<span class=\"c1\">// `rustc_traits::normalize_after_erasing_regions`. Ideally, we'd</span>\n<span class=\"c1\">// like to normalize *before* inserting into `local_decls`, but</span>\n<span class=\"c1\">// doing so ends up causing some other trouble.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">normalize_and_add_constraints</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"equate_inputs_and_outputs: NoSolution\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> do you remember what exactly went wrong there, because that code sure seems a bit weird ^^</p>",
        "id": 278131101,
        "sender_full_name": "lcnr",
        "timestamp": 1649319611
    },
    {
        "content": "<p>It was added during the higher-ranked norm PRs.</p>",
        "id": 278156650,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649334830
    },
    {
        "content": "<p>If I remember correctly, the problem was essentially that we had a normalized type in the results or something. But the type we compare with wasn't. Or maybe the opposite.</p>",
        "id": 278156875,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649334929
    },
    {
        "content": "<p>If you can remove it and tests not fail, probably just remove it.</p>",
        "id": 278156990,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649334970
    },
    {
        "content": "<p>(I tried to look where to normalize \"upstream\" but couldn't find it, this was just to get it working)</p>",
        "id": 278157086,
        "sender_full_name": "Jack Huey",
        "timestamp": 1649335021
    }
]