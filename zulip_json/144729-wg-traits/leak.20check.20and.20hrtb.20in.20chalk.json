[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> How would you represent the example under \"Higher ranked trait obligations\" here <a href=\"https://rustc-dev-guide.rust-lang.org/traits/hrtb.html\" title=\"https://rustc-dev-guide.rust-lang.org/traits/hrtb.html\">https://rustc-dev-guide.rust-lang.org/traits/hrtb.html</a> in Chalk</p>",
        "id": 196639361,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588773966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> do you mean this example?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"nc\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196639994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588774282
    },
    {
        "content": "<p>I'm not sure what you mean by \"represent\" it</p>",
        "id": 196640239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588774422
    },
    {
        "content": "<p>certainly the goal <code>forall&lt;'a&gt; { Implemented(T: Foo&lt;&amp;'a usize&gt;) }</code> applies</p>",
        "id": 196640279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588774442
    },
    {
        "content": "<p>Oh</p>",
        "id": 196642441,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588775410
    },
    {
        "content": "<p>Sorry, was on a call</p>",
        "id": 196650916,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588778668
    },
    {
        "content": "<p>anyways</p>",
        "id": 196650935,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588778677
    },
    {
        "content": "<p>That example <em>wasn't</em> the one I was talking about</p>",
        "id": 196651273,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588778789
    },
    {
        "content": "<p><em>but</em></p>",
        "id": 196651281,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588778791
    },
    {
        "content": "<p>what is the difference between</p>\n<div class=\"codehilite\"><pre><span></span><code>fn want_hrtb&lt;T&gt;() where T : for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a isize&gt; { ... }\n</code></pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code>fn want_hrtb&lt;&#39;a, T&gt;() where T : Foo&lt;&amp;&#39;a isize&gt; { ... }\n</code></pre></div>",
        "id": 196651438,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588778864
    },
    {
        "content": "<p>And how would they be represented differently in Chalk</p>",
        "id": 196651462,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588778876
    },
    {
        "content": "<p>and this is the example I was talking about (minimized):</p>\n<div class=\"codehilite\"><pre><span></span><code>trait Foo&lt;X&gt; {}\ntrait Bar&lt;X&gt; {}\nimpl&lt;X,F&gt; Foo&lt;X&gt; for F where F : Bar&lt;X&gt; {}\n</code></pre></div>",
        "id": 196651794,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588779021
    },
    {
        "content": "<p>with the goal: <code>Baz: for&lt;'a&gt; Foo&lt;&amp;'a isize&gt;</code></p>",
        "id": 196651840,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588779041
    },
    {
        "content": "<p>Is that goal the same as <code>forall&lt;'a&gt; { Baz: Foo&lt;&amp;'a isize&gt; }</code></p>",
        "id": 196651911,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588779069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/leak.20check.20and.20hrtb.20in.20chalk/near/196651462\" title=\"#narrow/stream/144729-wg-traits/topic/leak.20check.20and.20hrtb.20in.20chalk/near/196651462\">said</a>:</p>\n<blockquote>\n<p>And how would they be represented differently in Chalk</p>\n</blockquote>\n<p>in the former case, <code>T</code> is a type that implements <code>Foo&lt;&amp;'a isize&gt;</code> for any <code>'a</code> (e.g., including <code>'a</code> that the callee might specify).</p>\n<p>In the latter case, <code>T</code> is a type that implements <code>Foo&lt;&amp;'a isize&gt;</code> for some specific <code>'a</code> (that the caller specifies).</p>",
        "id": 196652681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588779417
    },
    {
        "content": "<p>easier to see maybe with types, which chalk supports, even if Rust does't (yet)</p>",
        "id": 196652861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588779488
    },
    {
        "content": "<p>i.e., <code>where for&lt;U&gt; T: PartialEq&lt;U&gt;</code>, would mean that <code>T</code> is a type that can be equated with <strong>any</strong> <code>U</code></p>",
        "id": 196652893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588779506
    },
    {
        "content": "<p>vs <code>where T: PartialEq&lt;U&gt;</code></p>",
        "id": 196652903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588779511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/leak.20check.20and.20hrtb.20in.20chalk/near/196651911\" title=\"#narrow/stream/144729-wg-traits/topic/leak.20check.20and.20hrtb.20in.20chalk/near/196651911\">said</a>:</p>\n<blockquote>\n<p>Is that goal the same as <code>forall&lt;'a&gt; { Baz: Foo&lt;&amp;'a isize&gt; }</code></p>\n</blockquote>\n<p>yes</p>",
        "id": 196653263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588779666
    },
    {
        "content": "<p>Rust permits you to write the <code>for</code> in two (equivalent) places</p>",
        "id": 196653283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588779674
    },
    {
        "content": "<p><code>for&lt;'a&gt; T: ...</code> and <code>T: for&lt;'a&gt; ...</code></p>",
        "id": 196653303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588779681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/leak.20check.20and.20hrtb.20in.20chalk/near/196651462\" title=\"#narrow/stream/144729-wg-traits/topic/leak.20check.20and.20hrtb.20in.20chalk/near/196651462\">said</a>:</p>\n<blockquote>\n<p>And how would they be represented differently in Chalk</p>\n</blockquote>\n<p>so <code>want_hrtb&lt;T&gt;</code> would have one generic parameter (in the root universe), <code>T</code>, and it would have a where clause <code>forall&lt;'a&gt; { FromEnv(T: Foo&lt;&amp;'a isize&gt;) }</code> in the environment</p>",
        "id": 196653498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588779739
    },
    {
        "content": "<p>whereas the other would have <code>FromEnv(T: Foo&lt;&amp;'a isize&gt;)</code> in the environment, with no forall</p>",
        "id": 196653529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588779758
    },
    {
        "content": "<p>This has been helpful</p>",
        "id": 196653759,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588779858
    },
    {
        "content": "<p>To get my bearing</p>",
        "id": 196653767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588779862
    },
    {
        "content": "<p>Here is the full chalk example:</p>\n<div class=\"codehilite\"><pre><span></span><code>    test!{\n        program {\n            trait Foo&lt;X&gt; {}\n            trait Bar&lt;X&gt; {}\n\n            impl&lt;X,F&gt; Foo&lt;X&gt; for F where F : Bar&lt;X&gt; {}\n\n            struct Baz {}\n            struct Ref&lt;&#39;a&gt; {}\n            impl&lt;&#39;a&gt; Bar&lt;Ref&lt;&#39;a&gt;&gt; for Baz {}\n        }\n\n        goal {\n            forall&lt;&#39;a&gt; { Baz: Foo&lt;Ref&lt;&#39;a&gt;&gt; }\n        } yields {\n            &quot;Unique; substitution [], lifetime constraints []&quot;\n        }\n    }\n</code></pre></div>",
        "id": 196653807,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588779882
    }
]