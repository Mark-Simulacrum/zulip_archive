[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20test.20suite.20triage/near/212195550\">said</a>:</p>\n<blockquote>\n<p>493 and 494 are lowering from chalk Alias and Function</p>\n</blockquote>\n<p>Do aliases even need to be implemented on the chalk side? I think rust-analyzer has working type aliases without them being implemented in chalk</p>",
        "id": 212219395,
        "sender_full_name": "detrumi",
        "timestamp": 1601811600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> aliases are implemented though?</p>",
        "id": 212230042,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601828971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20test.20suite.20triage/near/212230042\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> aliases are implemented though?</p>\n</blockquote>\n<p>Projection and opaque types are, but shouldn't <code>AliasTy::TypeAlias</code> be a thing too?</p>",
        "id": 212231235,
        "sender_full_name": "detrumi",
        "timestamp": 1601830961
    },
    {
        "content": "<p>I thought that was the original idea of the alias enum, to have 3 variants</p>",
        "id": 212231256,
        "sender_full_name": "detrumi",
        "timestamp": 1601831015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20test.20suite.20triage/near/212231235\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20test.20suite.20triage/near/212230042\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> aliases are implemented though?</p>\n</blockquote>\n<p>Projection and opaque types are, but shouldn't <code>AliasTy::TypeAlias</code> be a thing too?</p>\n</blockquote>\n<p>I'm not sure if this is right, but I was under the impression that in rustc type aliases are sort of eagerly replaced with their underlying types. So by the time we're doing trait solving they've already been replaced.</p>",
        "id": 212232074,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1601832254
    },
    {
        "content": "<p>that's how it works currently, I think the idea was to change that</p>",
        "id": 212232915,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1601833331
    },
    {
        "content": "<p>Is that not <code>Opaque</code>?</p>",
        "id": 212234327,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601835078
    },
    {
        "content": "<p>Not really, <code>type A = B</code> doesn't really fit as an opaque type, like <code>opaque type A: ? = B</code></p>",
        "id": 212234418,
        "sender_full_name": "detrumi",
        "timestamp": 1601835226
    },
    {
        "content": "<p>Oh, I see</p>",
        "id": 212234475,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601835267
    },
    {
        "content": "<p>But I'm not sure if chalk actually needs to know about type aliases</p>",
        "id": 212234488,
        "sender_full_name": "detrumi",
        "timestamp": 1601835298
    },
    {
        "content": "<p>Yeah, I mean yeah straight type aliases also are important</p>",
        "id": 212234489,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601835298
    },
    {
        "content": "<p>If we want to ever be able to add like where clauses to them</p>",
        "id": 212234499,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601835312
    },
    {
        "content": "<p>There's no RFC for that, I think?</p>",
        "id": 212234563,
        "sender_full_name": "detrumi",
        "timestamp": 1601835371
    },
    {
        "content": "<p>Specifically something like <code>type Foo&lt;T&gt; = Bar&lt;T&gt; where T: Copy</code></p>",
        "id": 212234566,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601835375
    },
    {
        "content": "<p>No RFC, but it has been discussed recently in the lang meetings</p>",
        "id": 212234573,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601835393
    },
    {
        "content": "<p>I think it would be interesting for some things in rust-analyzer (e.g. using type aliases in inferred types when the user wrote them that way)</p>",
        "id": 212234579,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1601835398
    },
    {
        "content": "<p>Another thing to think about (which was brought up in the lang meeting), is that currently something like</p>\n<div class=\"codehilite\"><pre><span></span><code>struct Foo&lt;T: Copy&gt; {}\ntype Bar&lt;T&gt; = Foo&lt;T&gt;;\n</code></pre></div>\n\n\n<p>is allowed.<br>\nThough, you could imagine that </p>\n<div class=\"codehilite\"><pre><span></span><code>type Bar&lt;T: Copy&gt; = Foo&lt;T: Copy&gt;;\n</code></pre></div>\n\n\n<p>is the most \"correct\" way to write this.<br>\nHowever, if you consider the former as having some sort of \"implied bounds\", then I think it makes sense.</p>",
        "id": 212235995,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601837400
    },
    {
        "content": "<p>Right. And that probably gets fun when you combine it with impl trait in type aliases</p>",
        "id": 212236215,
        "sender_full_name": "detrumi",
        "timestamp": 1601837672
    },
    {
        "content": "<p>i.e. <code>type Foo = impl Bar</code>, where <code>Foo</code> gets the implied bounds from the hidden type</p>",
        "id": 212236243,
        "sender_full_name": "detrumi",
        "timestamp": 1601837735
    }
]