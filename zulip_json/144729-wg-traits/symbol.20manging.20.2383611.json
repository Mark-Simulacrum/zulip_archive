[
    {
        "content": "<p>PR: <a href=\"https://github.com/rust-lang/rust/issues/83767\">#83767</a></p>",
        "id": 235681958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619099893
    },
    {
        "content": "<p>Was about to make this lol</p>",
        "id": 235682012,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619099905
    },
    {
        "content": "<p>Issue here: <a href=\"https://github.com/rust-lang/rust/issues/83611\">#83611</a></p>",
        "id": 235682030,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619099917
    },
    {
        "content": "<p>I guess there are two questions</p>",
        "id": 235682384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100007
    },
    {
        "content": "<ul>\n<li>what is the correct encoding?</li>\n</ul>",
        "id": 235682411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100012
    },
    {
        "content": "<ul>\n<li>how to implement it?</li>\n</ul>",
        "id": 235682444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100016
    },
    {
        "content": "<p>I <em>think</em> everyone on the thread is currently arguing for preserving roughly this encoding?</p>\n<div class=\"codehilite\"><pre><span></span><code>for&lt;&gt; [\n  ExistentialProjection::Trait(Self: FnMut),\n  ExistentialProjection::Projection(&lt;Self as FnMut&gt;::Output = &amp;u8)\n]\n</code></pre></div>",
        "id": 235682569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100054
    },
    {
        "content": "<p>I don't quite understand the plan for more complex situations</p>",
        "id": 235682879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100141
    },
    {
        "content": "<p>I also have never looked <em>that</em> closely into the symbol mangling</p>",
        "id": 235682907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100150
    },
    {
        "content": "<p>does it support, e.g., nested binders?</p>",
        "id": 235682929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100156
    },
    {
        "content": "<p>I'm wondering about situations like this:</p>",
        "id": 235683043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100188
    },
    {
        "content": "<p>So, yes</p>",
        "id": 235683048,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100189
    },
    {
        "content": "<p>I think that's roughly the encoding being argued for</p>",
        "id": 235683095,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100202
    },
    {
        "content": "<p>(i.e. don't break anything)</p>",
        "id": 235683118,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100211
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235683139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100218
    },
    {
        "content": "<p>For nested binders, I think we encode the <em>desugared</em> form</p>",
        "id": 235683177,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100232
    },
    {
        "content": "<p>here, the <code>for&lt;'a, 'b&gt; ExistentialProjection::Projection(&lt;Self as Foo&gt;::Output = u32)</code> is a bit silly</p>",
        "id": 235683248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100245
    },
    {
        "content": "<p>I'm definitely not super happy about encoding that flattening etc in our ABI :)</p>",
        "id": 235683333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100271
    },
    {
        "content": "<p>For associated type bindings?</p>",
        "id": 235683426,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100310
    },
    {
        "content": "<p>giving this some thought, I think the most \"future proof' is to hew as closely as we can to the user syntax</p>",
        "id": 235683527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100354
    },
    {
        "content": "<p>but there's a bit of a challenge because maybe there are different, but equivalent, notations</p>",
        "id": 235683596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100368
    },
    {
        "content": "<p>Right</p>",
        "id": 235683637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100384
    },
    {
        "content": "<p>at minimum there's naming and ordering</p>",
        "id": 235683646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100386
    },
    {
        "content": "<p>canonicalization and so forth helps with that</p>",
        "id": 235683662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> well, for example, I'm imagining that we could re-introduce nested binders into predicates (like chalk)</p>",
        "id": 235683790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100434
    },
    {
        "content": "<p>then maybe we would lower things differently</p>",
        "id": 235683806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100441
    },
    {
        "content": "<p>The symbol mangling in <em>this</em> issue actually follows syntax more closely than the representation in code</p>",
        "id": 235683892,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100462
    },
    {
        "content": "<p>right</p>",
        "id": 235683922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100469
    },
    {
        "content": "<p>my first reaction was to think that the new version is better</p>",
        "id": 235683949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100479
    },
    {
        "content": "<p>but now I'm second guessing it</p>",
        "id": 235683955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100482
    },
    {
        "content": "<p>Whereas I don't think any thought has been given to ATBs</p>",
        "id": 235684015,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100490
    },
    {
        "content": "<p>because I want to preserve some freedom for us to be like \"mmm maybe we want to change the desugared predicates\"</p>",
        "id": 235684040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100496
    },
    {
        "content": "<p>The new version makes more sense if we ever allow something like <code>dyn Foo + &lt;Self as Bar&gt;::Baz = ()</code></p>",
        "id": 235684229,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100547
    },
    {
        "content": "<p>i.e. a projection predicate <em>without</em> a trait predicate</p>",
        "id": 235684277,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100565
    },
    {
        "content": "<p>but that's maybe a bit weird</p>",
        "id": 235684294,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100570
    },
    {
        "content": "<p>(and what would that even <em>mean</em>)</p>",
        "id": 235684347,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100592
    },
    {
        "content": "<p>I guess I think I don't want to think about this <em>too</em> much right now</p>",
        "id": 235684520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100641
    },
    {
        "content": "<p>Right</p>",
        "id": 235684534,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100648
    },
    {
        "content": "<p>and we should try to preserve the output so we don't have to</p>",
        "id": 235684544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100650
    },
    {
        "content": "<p>Yes</p>",
        "id": 235684563,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100655
    },
    {
        "content": "<p>I'm not sure why <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> wanted you to review? Maybe because there might be some disagreement to <em>how</em> to preserve the output?</p>",
        "id": 235684689,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100705
    },
    {
        "content": "<p>i'm not 100% convinced that the new assertions will work</p>",
        "id": 235684698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100708
    },
    {
        "content": "<p>I think they were right to tag me in</p>",
        "id": 235684717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100719
    },
    {
        "content": "<p>but I'm happy with the PR for now</p>",
        "id": 235684749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/symbol.20manging.20.2383611/near/235683139\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 235684839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100745
    },
    {
        "content": "<p>what happens here?</p>",
        "id": 235684853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100750
    },
    {
        "content": "<p>I guess we make the binders with unused variables right now?</p>",
        "id": 235684878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100758
    },
    {
        "content": "<p>Yes</p>",
        "id": 235684889,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100764
    },
    {
        "content": "<p>can't we wind up with extra variables?</p>",
        "id": 235684895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100768
    },
    {
        "content": "<p>Well, hold on</p>",
        "id": 235684943,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100786
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235684958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100793
    },
    {
        "content": "<p>or even</p>",
        "id": 235684992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100806
    },
    {
        "content": "<p>This doesn't use <code>bound_vars()</code></p>",
        "id": 235685023,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100818
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235685038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100825
    },
    {
        "content": "<p>It searches the types for bound vars</p>",
        "id": 235685056,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100832
    },
    {
        "content": "<p>It uses <code>tcx.collect_referenced_late_bound_regions</code></p>",
        "id": 235685160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100859
    },
    {
        "content": "<p>I see</p>",
        "id": 235685209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100883
    },
    {
        "content": "<p>still</p>",
        "id": 235685222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100888
    },
    {
        "content": "<p>I'm not sure that makes it better?</p>",
        "id": 235685242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100897
    },
    {
        "content": "<p>I'm not sure it makes it <em>better</em>, but it does mean that it won't break</p>",
        "id": 235685333,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100926
    },
    {
        "content": "<p>So</p>",
        "id": 235685372,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100939
    },
    {
        "content": "<p>that's what I don't understand</p>",
        "id": 235685376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100940
    },
    {
        "content": "<p>I guess it depends on what it is searching</p>",
        "id": 235685395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619100948
    },
    {
        "content": "<p>I'm trying to think of the best way to word this</p>",
        "id": 235685516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100979
    },
    {
        "content": "<p>Well actually, I think the assertion as-is will break with supertrait HRTBs</p>",
        "id": 235685560,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619100997
    },
    {
        "content": "<p>You're right there</p>",
        "id": 235685588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619101010
    },
    {
        "content": "<p>But the code otherwise should be fine</p>",
        "id": 235685602,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619101019
    },
    {
        "content": "<p>I'd like to see some tests for those situations</p>",
        "id": 235685649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619101036
    },
    {
        "content": "<p>Me too</p>",
        "id": 235685687,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619101048
    },
    {
        "content": "<p>Is there test coverage for the symbol mangling at all?</p>",
        "id": 235685720,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619101063
    },
    {
        "content": "<p>yes, right?</p>",
        "id": 235685725,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619101068
    },
    {
        "content": "<p><code>src/test/ui/symbol-names</code></p>",
        "id": 235685816,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619101092
    },
    {
        "content": "<p>I expect the assertion to break, but without the assertion I would expect that we are emitting <code>for&lt;'a, 'b&gt;</code> on both sets of predicates</p>",
        "id": 235685839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619101101
    },
    {
        "content": "<p>Well, we don't <em>emit</em> the bound vars for the <code>Projection</code> part of the predicate</p>",
        "id": 235685982,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619101158
    },
    {
        "content": "<p>Which is the crux of the issue</p>",
        "id": 235686047,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619101187
    },
    {
        "content": "<p>right</p>",
        "id": 235686307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619101272
    },
    {
        "content": "<p>So, uh. I think mangling of trait objects with auto traits is just wrong...</p>",
        "id": 238911366,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621098182
    },
    {
        "content": "<p>Well, at least, it's wrong for 2 of the 3 places we build up the existential predicates</p>",
        "id": 238911516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621098297
    },
    {
        "content": "<p>The mangling reference:</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;dyn-bounds&gt; = &lt;binder&gt; {&lt;dyn-trait&gt;} &quot;E&quot;\n&lt;dyn-trait&gt; = &lt;path&gt; {&lt;dyn-trait-assoc-binding&gt;}\n&lt;dyn-trait-assoc-binding&gt; = &quot;p&quot; &lt;undisambiguated-identifier&gt; &lt;type&gt;\n</code></pre></div>",
        "id": 238911553,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621098319
    },
    {
        "content": "<p>So, for something like </p>\n<div class=\"codehilite\"><pre><span></span><code>dyn for&lt;&#39;a&gt; Foo&lt;&#39;a, Bar = &amp;&#39;a ()&gt; + Send\n</code></pre></div>\n<p>we mangle essentially </p>\n<div class=\"codehilite\"><pre><span></span><code>[&#39;a] &lt;Foo&lt;&#39;a&gt;&gt; p &lt;Bar = &amp;&#39;a ()&gt; &lt;Send&gt; E\n</code></pre></div>",
        "id": 238911676,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621098417
    },
    {
        "content": "<p>Well, the assumption of the symbol mangler (even before my changes) is that it can essentially print these in order</p>",
        "id": 238911773,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621098490
    },
    {
        "content": "<p>So, before, everything was under a single binder, so that takes care of the <code>['a]</code></p>",
        "id": 238911829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621098519
    },
    {
        "content": "<p>But this still requires that it's principal trait, then projections for principal trait, then auto traits</p>",
        "id": 238911883,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621098570
    },
    {
        "content": "<p>When we build up the existential predicates in <code>confirmation</code>, we do that:</p>\n<div class=\"codehilite\"><pre><span></span><code>                let iter = data_a\n                    .principal()\n                    .map(|b| b.map_bound(ty::ExistentialPredicate::Trait))\n                    .into_iter()\n                    .chain(\n                        data_a\n                            .projection_bounds()\n                            .map(|b| b.map_bound(ty::ExistentialPredicate::Projection)),\n                    )\n                    .chain(\n                        data_b\n                            .auto_traits()\n                            .map(ty::ExistentialPredicate::AutoTrait)\n                            .map(ty::Binder::dummy),\n</code></pre></div>",
        "id": 238911943,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621098612
    },
    {
        "content": "<p>But in <code>object_safety</code> and <code>astconv</code>, it's principal trait, auto traits, predicates</p>",
        "id": 238912041,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621098657
    },
    {
        "content": "<p>Okay, <code>object_safety</code> at least doesn't have auto traits</p>",
        "id": 238912116,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621098731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/83767\">#83767</a> is ready</p>",
        "id": 238919674,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621106523
    }
]