[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> so I'm reading over <a href=\"https://github.com/rust-lang-nursery/chalk/issues/451\">chalk#451</a>...</p>",
        "id": 199193779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590777185
    },
    {
        "content": "<p>actually can you rebase so that CI works?</p>",
        "id": 199193936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590777260
    },
    {
        "content": "<p>yeah, give me 2 minutes</p>",
        "id": 199194015,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590777302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> rebased</p>",
        "id": 199194443,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590777537
    },
    {
        "content": "<p>left a comment, let me know if it makes any sense</p>",
        "id": 199196353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778389
    },
    {
        "content": "<p>So, the <code>resolvent</code> comment</p>",
        "id": 199196529,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590778482
    },
    {
        "content": "<p>Previously, I had code in the <code>resolvent_clause</code> function</p>",
        "id": 199196544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590778500
    },
    {
        "content": "<p>to make sure we always avoid adding <code>LifetimeOutlives</code> goals to new strands</p>",
        "id": 199196577,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590778519
    },
    {
        "content": "<p>but that turned out to not be needed</p>",
        "id": 199196587,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590778526
    },
    {
        "content": "<p>So, as far as <code>AddRegionConstraint</code> though</p>",
        "id": 199196703,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590778573
    },
    {
        "content": "<p>It really would only make sense to add if I added back <code>HhGoal</code></p>",
        "id": 199196753,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590778600
    },
    {
        "content": "<p>otherwise it would be visible to the rest of <code>chalk-ir</code></p>",
        "id": 199196792,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590778628
    },
    {
        "content": "<p>I would expect it to be visible</p>",
        "id": 199196982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778711
    },
    {
        "content": "<p>but it's true that it's an impl detail bubbling up a bit</p>",
        "id": 199197030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778725
    },
    {
        "content": "<p>so maybe better to violate the \"domain goals are abstract\" rule instead</p>",
        "id": 199197120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778768
    },
    {
        "content": "<p>or alternatively</p>",
        "id": 199197133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778777
    },
    {
        "content": "<p>to give the <code>push_program_clauses</code> logic a more complex setup</p>",
        "id": 199197145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778783
    },
    {
        "content": "<p>(that would keep the logic that chalk-solve interprets domain-goals, not the engines)</p>",
        "id": 199197180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778800
    },
    {
        "content": "<p>which I think is a useful line to draw</p>",
        "id": 199197240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778807
    },
    {
        "content": "<p>though at the cost of making the chalk-solve interface more complex</p>",
        "id": 199197413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778899
    },
    {
        "content": "<p>seems ok to leave it how it is for now</p>",
        "id": 199197421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778903
    },
    {
        "content": "<p>even though I have my hesitations ;)</p>",
        "id": 199197446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778911
    },
    {
        "content": "<p>It would be interesting to think about <em>keeping</em> <code>LifetimeOutlives</code> goals instead of having a separate constraints</p>",
        "id": 199197450,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590778914
    },
    {
        "content": "<p>well, either way it violates my rule</p>",
        "id": 199197525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778935
    },
    {
        "content": "<p>and having them delayed</p>",
        "id": 199197535,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590778939
    },
    {
        "content": "<p>but yes there <em>is</em> something there</p>",
        "id": 199197539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778941
    },
    {
        "content": "<p>in that I've also pondered that we may want to \"Delay\" other sorts of goals</p>",
        "id": 199197558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778950
    },
    {
        "content": "<p>most notably <code>T: Sized</code></p>",
        "id": 199197564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778953
    },
    {
        "content": "<p>for practical reasons</p>",
        "id": 199197607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778978
    },
    {
        "content": "<p>(but also maybe <code>T: Send</code> and some auto-trait related goals)</p>",
        "id": 199197624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590778988
    },
    {
        "content": "<p>so e.g. part of chalk-solve could be that it has a \"delay\" option</p>",
        "id": 199197660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779006
    },
    {
        "content": "<p>sort of similar to flounder but different</p>",
        "id": 199197670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779010
    },
    {
        "content": "<p>I think we should not block this PR on resolving this long-term question</p>",
        "id": 199197767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779052
    },
    {
        "content": "<p>Okay</p>",
        "id": 199197771,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590779056
    },
    {
        "content": "<p>seems like a good FIXME issue</p>",
        "id": 199197773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779056
    },
    {
        "content": "<p>Should I go ahead and add support in the recursive solver?</p>",
        "id": 199197792,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590779073
    },
    {
        "content": "<p>seems good</p>",
        "id": 199197814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779089
    },
    {
        "content": "<p>I wonder how hard it would be to extract a single \"simplify\" fn</p>",
        "id": 199197822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779095
    },
    {
        "content": "<p>I'd feel better about not duplicating that logic</p>",
        "id": 199197835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779105
    },
    {
        "content": "<p>might be possible</p>",
        "id": 199197896,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590779154
    },
    {
        "content": "<p>I don't really know where it would live though</p>",
        "id": 199197904,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590779161
    },
    {
        "content": "<p>chalk-ir?</p>",
        "id": 199197948,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590779164
    },
    {
        "content": "<p>why not chalk-engine?</p>",
        "id": 199197958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779171
    },
    {
        "content": "<p>We don't build chalk-engine if we only use the <code>recursive-solver</code> feature</p>",
        "id": 199198020,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590779199
    },
    {
        "content": "<p>(side note that I'd like to make the recursive and slg solvers live side-by-side, whereever that is)</p>",
        "id": 199198021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779200
    },
    {
        "content": "<p>oh</p>",
        "id": 199198038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779208
    },
    {
        "content": "<p>well..that's annoying :)</p>",
        "id": 199198067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779227
    },
    {
        "content": "<p>chalk-ir is plausible I suppose</p>",
        "id": 199198074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779236
    },
    {
        "content": "<p>idk, maybe don't worry about it for now</p>",
        "id": 199198100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779249
    },
    {
        "content": "<p>feels orthogonal</p>",
        "id": 199198102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779250
    },
    {
        "content": "<p>and it's not that much code to copy</p>",
        "id": 199198139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590779271
    },
    {
        "content": "<p>Okay, updated for the recursive solver</p>",
        "id": 199199587,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590779990
    },
    {
        "content": "<p>Thinking about it, I do wonder if the \"right\" way to approach this is to have chalk-solve do the simplification entirely</p>",
        "id": 199199774,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590780060
    },
    {
        "content": "<p>But imo I think we should land this how it is</p>",
        "id": 199199974,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590780148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/outlives.20goal.20chalk.23451/near/199199774\">said</a>:</p>\n<blockquote>\n<p>Thinking about it, I do wonder if the \"right\" way to approach this is to have chalk-solve do the simplification entirely</p>\n</blockquote>\n<p>that doesn't seem right to me</p>",
        "id": 199200854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590780600
    },
    {
        "content": "<p>though it might be a fine place for the code to live</p>",
        "id": 199200908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590780607
    },
    {
        "content": "<p>the reason I say that though is:</p>",
        "id": 199200920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590780614
    },
    {
        "content": "<p>apart from <code>DomainGoal</code>, the rest of <code>Goal</code> is all \"generic logic\"</p>",
        "id": 199200929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590780623
    },
    {
        "content": "<p>e.g., and, or, etc</p>",
        "id": 199200941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590780630
    },
    {
        "content": "<p>and that's what the engine is responsible for</p>",
        "id": 199200946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590780634
    },
    {
        "content": "<p>the <em>domain goal</em> (as the name suggests) are things specific to our domain (rust)</p>",
        "id": 199200961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590780645
    },
    {
        "content": "<p>and chalk-solve is responsible for defining what those mean</p>",
        "id": 199200973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590780650
    },
    {
        "content": "<p>I think this argues that, indeed, it is correct that chalk-solve should somehow signal how to \"delay\" lifetime constraints</p>",
        "id": 199200999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590780665
    },
    {
        "content": "<p>as we were discussing</p>",
        "id": 199201005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590780667
    },
    {
        "content": "<p>I think though that's a useful distinction otherwise?</p>",
        "id": 199201042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590780688
    },
    {
        "content": "<p>Hmm, true</p>",
        "id": 199201052,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590780693
    },
    {
        "content": "<p>I guess there's a few different options:</p>",
        "id": 199201571,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590780934
    },
    {
        "content": "<p>1) Always leave it as-is now. I.e. the solvers just look to see if there is a <code>WhereClause::LifetimeOutlives</code> and if so, adds the constraints.</p>",
        "id": 199201750,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590781029
    },
    {
        "content": "<p>2) We add a new <code>AddOutlivesConstraint</code> variant to <code>Goal</code>. Chalk-solve is responsible for adding a <code>forall&lt;'a, 'b&gt; LifetimeOutlives('a, 'b) :- AddOutlivesConstraint('a, 'b)</code>. And the solvers add constraints when they see <code>AddOutlivesConstraint</code></p>",
        "id": 199201971,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590781140
    },
    {
        "content": "<p>3) Add a new <code>constraints</code> field to <code>ProgramClauseImplication</code> and have <code>chalk-solve</code> add constraints</p>",
        "id": 199202047,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590781174
    },
    {
        "content": "<p>4) Delay the <code>LifetimeOutlives</code> constraints in some fashion</p>",
        "id": 199202209,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590781255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/outlives.20goal.20chalk.23451/near/199202047\">said</a>:</p>\n<blockquote>\n<p>3) Add a new <code>constraints</code> field to <code>ProgramClauseImplication</code> and have <code>chalk-solve</code> add constraints</p>\n</blockquote>\n<p>oh, that's.. interesting</p>",
        "id": 199202806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781569
    },
    {
        "content": "<p>3 and 4 are related</p>",
        "id": 199202820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781578
    },
    {
        "content": "<p>i.e., part of <code>ProgramClauseImplication</code> could be either a new \"constraints\" field or a new \"delayed-goals\" field</p>",
        "id": 199202849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781595
    },
    {
        "content": "<p>kind of two sides of the same coin</p>",
        "id": 199202853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781600
    },
    {
        "content": "<p>either way it's something that gets added and propagated back up</p>",
        "id": 199202862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781607
    },
    {
        "content": "<p>I kind of like that</p>",
        "id": 199202866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590781612
    },
    {
        "content": "<p>Well, I think 4 is compatible with all the others</p>",
        "id": 199202965,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590781678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so are you good with merging this as is now? (Then we can open an issue for a followup)</p>",
        "id": 199211755,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590786224
    },
    {
        "content": "<p>yes I thiink so, I'll take a inal look</p>",
        "id": 199211790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590786242
    },
    {
        "content": "<p>Awesome</p>",
        "id": 199211832,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590786256
    },
    {
        "content": "<p>merged</p>",
        "id": 199211875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590786283
    },
    {
        "content": "<p>Awesome</p>",
        "id": 199212089,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590786381
    },
    {
        "content": "<p>I've also updated rustc for all the chalk changes up to that PR</p>",
        "id": 199212110,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590786394
    },
    {
        "content": "<p>So next week I'll make a PR for that once new chalk version is out</p>",
        "id": 199212144,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590786418
    }
]