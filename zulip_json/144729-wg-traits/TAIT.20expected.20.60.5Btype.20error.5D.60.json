[
    {
        "content": "<p>Hi everyone! I was wondering what the expected behavior is for the following <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=86a2e58c143a916822a50ef052e142a5\">example</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(min_type_alias_impl_trait)]</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The compiler currently rejects this, saying <code>type annotations needed</code> for <code>bar</code> and <code>concrete type differs from previous defining opaque type use</code> for <code>bar</code>. If this is intended, it would be nice if the second error would not say <code>expected [type error], got Option&lt;()&gt;</code>. However, I think it would also make sense to accept the code since it also compiles if we replace <code>Foo</code> with <code>Option&lt;Foo&gt;</code> in the return types.</p>",
        "id": 244362389,
        "sender_full_name": "Dominik Stolz",
        "timestamp": 1625009929
    },
    {
        "content": "<p>i guess it's seeing the <code>None</code> in <code>bar()</code> and treating it as <code>Option&lt;T&gt;::None where T: Sized</code> or something? but it hasn't solved for a concrete type for <code>T</code> yetâ€¦</p>",
        "id": 244362780,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625010346
    },
    {
        "content": "<p>interestingly, if i swap the two function definitions, i get a somewhat related error</p>\n<div class=\"codehilite\"><pre><span></span><code>error: concrete type differs from previous defining opaque type use\n --&gt; src/lib.rs:4:1\n  |\n4 | fn bar() -&gt; Foo { None }\n  | ^^^^^^^^^^^^^^^ expected `Option&lt;()&gt;`, got `[type error]`\n</code></pre></div>\n<p>i would expect the \"defining use\" to feed into the type inference for the <code>None</code></p>",
        "id": 244362991,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625010527
    },
    {
        "content": "<p>Both bar and baz are defining uses.</p>",
        "id": 244383594,
        "sender_full_name": "bjorn3",
        "timestamp": 1625035930
    },
    {
        "content": "<p>Making type inference dependent on the order of evaluation would be problematic. Especially for incr comp.</p>",
        "id": 244383621,
        "sender_full_name": "bjorn3",
        "timestamp": 1625035963
    },
    {
        "content": "<blockquote>\n<p>i would expect the \"defining use\" to feed into the type inference for the <code>None</code></p>\n</blockquote>\n<p>That would require type inference on bar and baz to be done at the same type if you don't want to make it order dependent.</p>",
        "id": 244383679,
        "sender_full_name": "bjorn3",
        "timestamp": 1625036029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302700\">@Dominik Stolz</span> this is expected to be an error</p>",
        "id": 245096499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625604419
    },
    {
        "content": "<p>we currently require that <em>each defining use completely defines the type</em></p>",
        "id": 245096523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625604431
    },
    {
        "content": "<p>so <code>bar</code> would hve to be <code>None::&lt;()&gt;</code> or something like that</p>",
        "id": 245096548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625604446
    }
]