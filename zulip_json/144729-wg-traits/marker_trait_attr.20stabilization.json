[
    {
        "content": "<p>I want to push <code>feature(marker_trait_attr)</code> <a href=\"https://github.com/rust-lang/rust/issues/29864\">#29864</a> to stabilization. Going to use this topic to talk about the remaining blockers <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 237355952,
        "sender_full_name": "lcnr",
        "timestamp": 1620145454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> are you still interested in this?</p>",
        "id": 237356005,
        "sender_full_name": "lcnr",
        "timestamp": 1620145472
    },
    {
        "content": "<p>I unfortunately don't have the time to lead this, but I'll definitely keep up with the progress and see if I can provide help</p>",
        "id": 237356166,
        "sender_full_name": "rylev",
        "timestamp": 1620145533
    },
    {
        "content": "<h1>attribute name or explicit syntax or whatever</h1>",
        "id": 237356553,
        "sender_full_name": "lcnr",
        "timestamp": 1620145683
    },
    {
        "content": "<p>i don't think this needs an rfc</p>",
        "id": 237356617,
        "sender_full_name": "lcnr",
        "timestamp": 1620145696
    },
    {
        "content": "<p>and I also don't think it matters much tbh</p>",
        "id": 237356712,
        "sender_full_name": "lcnr",
        "timestamp": 1620145735
    },
    {
        "content": "<p>for searchability I personally slightly prefer <code>#[marker_trait]</code> instead of just <code>#[marker]</code> so I might just change it to that in the stabilization pr and get <code>t-lang</code> to figure it out</p>",
        "id": 237357056,
        "sender_full_name": "lcnr",
        "timestamp": 1620145855
    },
    {
        "content": "<p>(taking <a href=\"https://github.com/rust-lang/rust/issues/29864#issuecomment-676332502\">https://github.com/rust-lang/rust/issues/29864#issuecomment-676332502</a> as a reference for now)</p>",
        "id": 237357134,
        "sender_full_name": "lcnr",
        "timestamp": 1620145887
    },
    {
        "content": "<p>So, this might be a bit heavy-handed. But, looking forward to a future where we have Chalk as a trait solver, I feel like when we stabilize features going forward that fundamentally alter the semantics of trait solving (e.g. marker traits , <code>fundamental</code>, GATs, named impl trait, specialization), I feel like we should try to define the behavior a bit more formally, or at least how this would work in Chalk.</p>\n<p>Here, it's really not difficult, since it's just \"marker traits can have overlapping impls\" and marker traits are already implemented in Chalk. But I think it's a good precedent to set? At least, this is my opinion</p>",
        "id": 237360794,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620147302
    },
    {
        "content": "<p>For this specifically, on <code>marker</code> vs <code>marker_trait</code>: whichever way we choose, we should follow the same style for <code>fundamental</code> (though, <code>fundamental</code> might not be the best name)</p>",
        "id": 237360914,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620147354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237357056\">said</a>:</p>\n<blockquote>\n<p>for searchability I personally slightly prefer <code>#[marker_trait]</code> instead of just <code>#[marker]</code> so I might just change it to that in the stabilization pr and get <code>t-lang</code> to figure it out</p>\n</blockquote>\n<p>flip flop, we use <code>#[non_exhaustive]</code> without specifying what's non exhaustive as part of the attribute name, so I am once again in favor of just <code>marker</code></p>",
        "id": 237361928,
        "sender_full_name": "lcnr",
        "timestamp": 1620147735
    },
    {
        "content": "<p>I suppose <code>marker trait Foo {}</code> is out of the question?</p>",
        "id": 237362032,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620147775
    },
    {
        "content": "<blockquote>\n<p>I feel like we should try to define the behavior a bit more formally, or at least how this would work in Chalk.</p>\n</blockquote>\n<p>that definitely seems useful to me, though I am probably not that helpful for this</p>",
        "id": 237362051,
        "sender_full_name": "lcnr",
        "timestamp": 1620147783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237362032\">said</a>:</p>\n<blockquote>\n<p>I suppose <code>marker trait Foo {}</code> is out of the question?</p>\n</blockquote>\n<p>i've also seen <code>trait Foo;</code> for this, but i don't think adding a (contextual) keyword for this is worth it, considering how rarely this feature is needed</p>",
        "id": 237362388,
        "sender_full_name": "lcnr",
        "timestamp": 1620147884
    },
    {
        "content": "<h1>orphan rules</h1>",
        "id": 237364141,
        "sender_full_name": "lcnr",
        "timestamp": 1620148538
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/67919\">#67919</a></p>",
        "id": 237364164,
        "sender_full_name": "lcnr",
        "timestamp": 1620148549
    },
    {
        "content": "<p>the example in that issue is </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// crate a</span>\n<span class=\"cp\">#[marker]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"c1\">// crate b</span>\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// crate c</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237364297,
        "sender_full_name": "lcnr",
        "timestamp": 1620148587
    },
    {
        "content": "<p>this is unsound</p>",
        "id": 237364314,
        "sender_full_name": "lcnr",
        "timestamp": 1620148593
    },
    {
        "content": "<p>or like, it is if <code>impl &lt;T: MarkerTrait&gt; NonMarker for T {}</code> is allowed in to exist together with <code>impl NonMarker for MyType</code></p>",
        "id": 237364506,
        "sender_full_name": "lcnr",
        "timestamp": 1620148679
    },
    {
        "content": "<p>cc <a href=\"https://github.com/rust-lang/rust/issues/67919#issuecomment-575315025\">https://github.com/rust-lang/rust/issues/67919#issuecomment-575315025</a></p>",
        "id": 237364582,
        "sender_full_name": "lcnr",
        "timestamp": 1620148695
    },
    {
        "content": "<p>i highly doubt we want to consider these impls to overlap</p>",
        "id": 237364780,
        "sender_full_name": "lcnr",
        "timestamp": 1620148785
    },
    {
        "content": "<p>using specialization for this and saying something like \"<code>impl &lt;T: MarkerTrait&gt; NonMarker for T {}</code> can be specialized by arbitrary impls\" might work</p>",
        "id": 237365504,
        "sender_full_name": "lcnr",
        "timestamp": 1620149055
    },
    {
        "content": "<p>but seems like a huge mess, i.e. <code>NonMarker</code> can have associated types. This has all the lifetime unsoundness issues as it <em>has to</em> use the specializing impl if it applies</p>",
        "id": 237366560,
        "sender_full_name": "lcnr",
        "timestamp": 1620149500
    },
    {
        "content": "<p>i guess cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> but I don't think relaxing the orphan rules for marker traits is something we want</p>",
        "id": 237366678,
        "sender_full_name": "lcnr",
        "timestamp": 1620149540
    },
    {
        "content": "<h1>negative impls</h1>\n<p>If we don't relax orphan rules, we only have to prevent pos/neg overlaps, so this seems fairly straightforward to me</p>",
        "id": 237366906,
        "sender_full_name": "lcnr",
        "timestamp": 1620149640
    },
    {
        "content": "<hr>\n<p>with this I've gone through all relevant issues/concerns I was able to find</p>",
        "id": 237367425,
        "sender_full_name": "lcnr",
        "timestamp": 1620149841
    },
    {
        "content": "<p>was there a comment about allowing <code>impl&lt;T: Foo&gt; Marker for T::Assoc {}</code> ?</p>",
        "id": 237367478,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620149867
    },
    {
        "content": "<p>so I guess it's time to fix <a href=\"https://github.com/rust-lang/rust/issues/84917\">#84917</a></p>",
        "id": 237367557,
        "sender_full_name": "lcnr",
        "timestamp": 1620149886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237367478\">said</a>:</p>\n<blockquote>\n<p>was there a comment about allowing <code>impl&lt;T: Foo&gt; Marker for T::Assoc {}</code> ?</p>\n</blockquote>\n<p>uuuuh~~~~~~~~~~~</p>",
        "id": 237367580,
        "sender_full_name": "lcnr",
        "timestamp": 1620149898
    },
    {
        "content": "<p>idk, but that seems interesting</p>",
        "id": 237367602,
        "sender_full_name": "lcnr",
        "timestamp": 1620149909
    },
    {
        "content": "<p>I mean im guessing such an impl is off the table if you dont want to relax orphan rules</p>",
        "id": 237367606,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620149913
    },
    {
        "content": "<p>it's also not a breaking change to allow such an impl later <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 237367745,
        "sender_full_name": "lcnr",
        "timestamp": 1620149972
    },
    {
        "content": "<p>so I am just going to ignore this for now</p>",
        "id": 237367769,
        "sender_full_name": "lcnr",
        "timestamp": 1620149985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237367606\">said</a>:</p>\n<blockquote>\n<p>I mean im guessing such an impl is off the table if you dont want to relax orphan rules</p>\n</blockquote>\n<p>it seems really difficult, y</p>",
        "id": 237367959,
        "sender_full_name": "lcnr",
        "timestamp": 1620150049
    },
    {
        "content": "<p>without adding restrictions on the associated types of <code>Foo</code> in some way that doesn't seem possible to me</p>",
        "id": 237368127,
        "sender_full_name": "lcnr",
        "timestamp": 1620150089
    },
    {
        "content": "<p>we could however allow</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MarkerTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">complex_expr_using_N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237368288,
        "sender_full_name": "lcnr",
        "timestamp": 1620150145
    },
    {
        "content": "<p>that seems fine to me</p>",
        "id": 237368302,
        "sender_full_name": "lcnr",
        "timestamp": 1620150150
    },
    {
        "content": "<p>i also don't really know how trait selection would work for this</p>",
        "id": 237368363,
        "sender_full_name": "lcnr",
        "timestamp": 1620150175
    },
    {
        "content": "<p>because to know whether <code>[u8; 7]</code> implements <code>MarkerTrait</code></p>",
        "id": 237368412,
        "sender_full_name": "lcnr",
        "timestamp": 1620150195
    },
    {
        "content": "<p>we would have to either try all <code>N</code> or try and reverse <code>complex_expr_using_N</code>, both of which don't seem possible <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> so never mind</p>",
        "id": 237368535,
        "sender_full_name": "lcnr",
        "timestamp": 1620150229
    },
    {
        "content": "<p>plans foiled by usize::MAX being a very large number</p>",
        "id": 237368742,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620150262
    },
    {
        "content": "<p>plans foiled by <code>&amp;str</code> having infinitely many values</p>",
        "id": 237368895,
        "sender_full_name": "lcnr",
        "timestamp": 1620150290
    },
    {
        "content": "<p>uwu</p>",
        "id": 237368913,
        "sender_full_name": "lcnr",
        "timestamp": 1620150294
    },
    {
        "content": "<p>oh yeah that would do it too <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 237368998,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620150309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237367557\">said</a>:</p>\n<blockquote>\n<p>so I guess it's time to fix <a href=\"https://github.com/rust-lang/rust/issues/84917\">#84917</a></p>\n</blockquote>\n<p>soo</p>",
        "id": 237371224,
        "sender_full_name": "lcnr",
        "timestamp": 1620151199
    },
    {
        "content": "<p>i <em>assume</em> (too lazy to check) that this happens because when checking the wf of the <code>impl&lt;T&gt; F for T where T: Copy {}</code> impl</p>",
        "id": 237371343,
        "sender_full_name": "lcnr",
        "timestamp": 1620151231
    },
    {
        "content": "<p>we have to prove the <em>normally trivial</em> predicate <code>T: Copy implies T: F</code></p>",
        "id": 237371425,
        "sender_full_name": "lcnr",
        "timestamp": 1620151263
    },
    {
        "content": "<p>which is obviously does, because we're in exactly that impl</p>",
        "id": 237371477,
        "sender_full_name": "lcnr",
        "timestamp": 1620151284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237371343\">said</a>:</p>\n<blockquote>\n<p>i <em>assume</em> (to lazy to check) that this happens because when checking the wf of the <code>impl&lt;T&gt; F for T where T: Copy {}</code> impl</p>\n</blockquote>\n<p><a href=\"/user_uploads/4715/9K2VpHMZ4t_4OlRt0wAuaJ0s/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/9K2VpHMZ4t_4OlRt0wAuaJ0s/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/9K2VpHMZ4t_4OlRt0wAuaJ0s/image.png\"></a></div>",
        "id": 237371609,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620151334
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/a5f164faad4a2fed606b8160fd7ecd2d5cbba381/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1497\">https://github.com/rust-lang/rust/blob/a5f164faad4a2fed606b8160fd7ecd2d5cbba381/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1497</a></p>",
        "id": 237372143,
        "sender_full_name": "lcnr",
        "timestamp": 1620151555
    },
    {
        "content": "<p>I guess we don't want to drop victim if victim is <code>EvaluatedToOk</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 237372426,
        "sender_full_name": "lcnr",
        "timestamp": 1620151638
    },
    {
        "content": "<p>but that still leaves the case of two <code>EvaluatedToOkModuloRegions</code></p>",
        "id": 237372522,
        "sender_full_name": "lcnr",
        "timestamp": 1620151672
    },
    {
        "content": "<p>or for 2 <code>EvaluatedToOk</code></p>",
        "id": 237374345,
        "sender_full_name": "lcnr",
        "timestamp": 1620152409
    },
    {
        "content": "<p>i think ideally we would keep the multiple impls as candidates and then just try all of them during borrowck? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 237375327,
        "sender_full_name": "lcnr",
        "timestamp": 1620152775
    },
    {
        "content": "<p>i don't know how easy that is <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 237375385,
        "sender_full_name": "lcnr",
        "timestamp": 1620152801
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxtInner.html#structfield.region_obligations\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxtInner.html#structfield.region_obligations</a></p>",
        "id": 237377253,
        "sender_full_name": "lcnr",
        "timestamp": 1620153477
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxtInner.html#structfield.region_constraint_storage\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxtInner.html#structfield.region_constraint_storage</a></p>",
        "id": 237377391,
        "sender_full_name": "lcnr",
        "timestamp": 1620153527
    },
    {
        "content": "<p>ok, that definitely doesn't seem trivial to implement</p>",
        "id": 237377416,
        "sender_full_name": "lcnr",
        "timestamp": 1620153536
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 237377429,
        "sender_full_name": "lcnr",
        "timestamp": 1620153539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237372426\">said</a>:</p>\n<blockquote>\n<p>I guess we don't want to drop victim if victim is <code>EvaluatedToOk</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>implemented in <a href=\"https://github.com/rust-lang/rust/issues/84922\">#84922</a>, we now don't discard <code>EvaluatedToOk</code> in favor of <code>EvaluatedToOkModuloRegions</code></p>",
        "id": 237380040,
        "sender_full_name": "lcnr",
        "timestamp": 1620154653
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(marker_trait_attr)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[marker]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237380317,
        "sender_full_name": "lcnr",
        "timestamp": 1620154788
    },
    {
        "content": "<p>this example is still broken after <a href=\"https://github.com/rust-lang/rust/issues/84922\">#84922</a>, as both candidates have region obligations</p>",
        "id": 237380453,
        "sender_full_name": "lcnr",
        "timestamp": 1620154831
    },
    {
        "content": "<p>(the first one has an implicit <code>T: 'a</code> obligation)</p>",
        "id": 237380497,
        "sender_full_name": "lcnr",
        "timestamp": 1620154846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237360794\">said</a>:</p>\n<blockquote>\n<p>So, this might be a bit heavy-handed. But, looking forward to a future where we have Chalk as a trait solver, I feel like when we stabilize features going forward that fundamentally alter the semantics of trait solving (e.g. marker traits , <code>fundamental</code>, GATs, named impl trait, specialization), I feel like we should try to define the behavior a bit more formally, or at least how this would work in Chalk.</p>\n<p>Here, it's really not difficult, since it's just \"marker traits can have overlapping impls\" and marker traits are already implemented in Chalk. But I think it's a good precedent to set? At least, this is my opinion</p>\n</blockquote>\n<p>I approve of this</p>",
        "id": 237491697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620220142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237366678\">said</a>:</p>\n<blockquote>\n<p>i guess cc <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> but I don't think relaxing the orphan rules for marker traits is something we want</p>\n</blockquote>\n<p>agreed</p>",
        "id": 237491745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620220169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I'm of the opinion we can and should stabilize marker traits</p>",
        "id": 237491813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620220201
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 237491875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620220210
    },
    {
        "content": "<p>I also agree with <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> that we want to be modeling things in chalk -- I'd say <em>before</em> stabilization</p>",
        "id": 237492068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620220297
    },
    {
        "content": "<p>but certainly by then</p>",
        "id": 237492084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620220304
    },
    {
        "content": "<p>that said, I think that modeling this is fairly straightforward</p>",
        "id": 237492101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620220312
    },
    {
        "content": "<p>it sounds like we need a stabilization report</p>",
        "id": 237492152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620220324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237380317\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(marker_trait_attr)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[marker]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>i expect us to not fix this before stabilization <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> should be backwards compatible to fix after stabilization and unlikely enough.</p>",
        "id": 237495262,
        "sender_full_name": "lcnr",
        "timestamp": 1620221537
    },
    {
        "content": "<blockquote>\n<p>it sounds like we need a stabilization report</p>\n</blockquote>\n<p>yes</p>",
        "id": 237495305,
        "sender_full_name": "lcnr",
        "timestamp": 1620221560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> what is current behavior?</p>",
        "id": 237495638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221695
    },
    {
        "content": "<p>for that example?</p>",
        "id": 237495650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221699
    },
    {
        "content": "<p>a compile error when while checking wf for the first impl</p>",
        "id": 237495732,
        "sender_full_name": "lcnr",
        "timestamp": 1620221738
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0477]: the type `&amp;&#39;a T` does not fulfill the required lifetime\n --&gt; src/main.rs:5:13\n  |\n5 | impl&lt;&#39;a, T&gt; F for &amp;&#39;a T {}\n  |             ^\n  |\n  = note: type must satisfy the static lifetime\n</code></pre></div>",
        "id": 237495819,
        "sender_full_name": "lcnr",
        "timestamp": 1620221769
    },
    {
        "content": "<p>during winnowing, we see two impl candidates with <code>EvaluatedToOkModuloRegions</code> so we just take one of those at random</p>",
        "id": 237495892,
        "sender_full_name": "lcnr",
        "timestamp": 1620221809
    },
    {
        "content": "<p>oh hmm</p>",
        "id": 237495929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221823
    },
    {
        "content": "<p>I don't like that :)</p>",
        "id": 237495939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221827
    },
    {
        "content": "<p>it's not so much the behavior I dislike</p>",
        "id": 237495985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221844
    },
    {
        "content": "<p>I just want to review the winnowing behavior, sounds...risky</p>",
        "id": 237496013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221854
    },
    {
        "content": "<blockquote>\n<p>we just take one of those at random</p>\n</blockquote>\n<p>only for marker traits, where it's irrelevant which candidate actually applies. So for <code>EvaluatedToOk</code> this definitely seems fine to me.<br>\nFor <code>EvaluatedToOkModuloRegions</code> I don't think there's much we can do here without changing the way we store and deal with region obligations</p>",
        "id": 237496333,
        "sender_full_name": "lcnr",
        "timestamp": 1620221992
    },
    {
        "content": "<p>(we also only do so if there are no inference variables present, so this <del>can't</del>(edit: shouldn't) influence type inference)</p>",
        "id": 237496412,
        "sender_full_name": "lcnr",
        "timestamp": 1620222014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237496013\">said</a>:</p>\n<blockquote>\n<p>I just want to review the winnowing behavior, sounds...risky</p>\n</blockquote>\n<p>though of course, if you have the time it also doesn't hurt for you to look over that as well <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 237496579,
        "sender_full_name": "lcnr",
        "timestamp": 1620222087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237495305\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>it sounds like we need a stabilization report</p>\n</blockquote>\n<p>yes</p>\n</blockquote>\n<p>ah I forgot to write that: I intend to write this stabilization report myself in the next few days, but don't know what to do wrt modeling this in chalk, so that's something I need some help with</p>",
        "id": 237496837,
        "sender_full_name": "lcnr",
        "timestamp": 1620222202
    },
    {
        "content": "<p>/me wonders if we discuss marker traits in the chalk book</p>",
        "id": 237497175,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222350
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-solve/src/coherence/solve.rs#L20\">this</a> is the only \"use\" of marker traits in Chalk</p>",
        "id": 237497277,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222400
    },
    {
        "content": "<p>i.e. the only thing they change</p>",
        "id": 237497290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222408
    },
    {
        "content": "<p>i.e. impls of marker traits are allowed to overlap</p>",
        "id": 237497348,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222432
    },
    {
        "content": "<p>isn't this incorrect?</p>",
        "id": 237497368,
        "sender_full_name": "lcnr",
        "timestamp": 1620222436
    },
    {
        "content": "<p>marker traits are only allowed to overlap if they have the same polarity</p>",
        "id": 237497414,
        "sender_full_name": "lcnr",
        "timestamp": 1620222448
    },
    {
        "content": "<p>How?</p>",
        "id": 237497417,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222448
    },
    {
        "content": "<p><code>impl !Marker</code> and <code>impl Marker</code> must not overlap</p>",
        "id": 237497442,
        "sender_full_name": "lcnr",
        "timestamp": 1620222461
    },
    {
        "content": "<p>Ah...hmm..</p>",
        "id": 237497477,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222479
    },
    {
        "content": "<p>Yeah that might be a bug</p>",
        "id": 237497543,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222496
    },
    {
        "content": "<p><em>does chalk have something similar to <code>candidate_should_be_dropped_in_favor_of</code>?</em></p>",
        "id": 237497651,
        "sender_full_name": "lcnr",
        "timestamp": 1620222550
    },
    {
        "content": "<p>No</p>",
        "id": 237497679,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222565
    },
    {
        "content": "<p>Well...I guess the <code>ClausePriority</code> is <em>similiar</em></p>",
        "id": 237497713,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222584
    },
    {
        "content": "<p>but only used in the recursive solver for assoc type projections</p>",
        "id": 237497811,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237496333\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>we just take one of those at random</p>\n</blockquote>\n<p>only for marker traits, where it's irrelevant which candidate actually applies. So for <code>EvaluatedToOk</code> this definitely seems fine to me.<br>\nFor <code>EvaluatedToOkModuloRegions</code> I don't think there's much we can do here without changing the way we store and deal with region obligations</p>\n</blockquote>\n<p>well, it's not irrelevant, is it?</p>",
        "id": 237498851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620223022
    },
    {
        "content": "<p>that is, this is an example where it's not irrelevant :)</p>",
        "id": 237498870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620223030
    },
    {
        "content": "<p>it's irrelevant \"modulo regions\", to some extent</p>",
        "id": 237498898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620223039
    },
    {
        "content": "<p>I don't believe marker traits need any <em>modeling</em> in chalk per se</p>",
        "id": 237498950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620223064
    },
    {
        "content": "<p>they only affect coherence</p>",
        "id": 237498960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620223067
    },
    {
        "content": "<p>one of the design goals for chalk is to accommodate multiple routes to proving the same thing better</p>",
        "id": 237498988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620223080
    },
    {
        "content": "<p>that said, we do have to figure out how to merge region constraints and \"post-conditions\", which is relevant to the above problem</p>",
        "id": 237499069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620223099
    },
    {
        "content": "<p>tbh the answer I want to do is just to not have that problem any more, by integrating region checking and things into one giant logical clause</p>",
        "id": 237499109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620223127
    },
    {
        "content": "<p>and a more capable solver</p>",
        "id": 237499118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620223129
    },
    {
        "content": "<p>Are you already looking forward to a post-Chalk era <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 237499343,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620223206
    },
    {
        "content": "<p>basically :P</p>",
        "id": 237499385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620223217
    },
    {
        "content": "<p>but in the meantime I would just convert from <code>A | B</code> to <code>A &amp; B</code></p>",
        "id": 237499430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620223238
    },
    {
        "content": "<p>or something like that :)</p>",
        "id": 237499459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620223243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237499430\">said</a>:</p>\n<blockquote>\n<p>but in the meantime I would just convert from <code>A | B</code> to <code>A &amp; B</code></p>\n</blockquote>\n<p>can you elaborate on this?</p>",
        "id": 237504825,
        "sender_full_name": "lcnr",
        "timestamp": 1620225229
    },
    {
        "content": "<p>This thread motivated me to play around with <code>#![feature(marker_trait_attr)]</code> for a little bit and—well, you said you’re interested in “the remaining blockers”—I found some soundness issue in the current implementation <a href=\"https://github.com/rust-lang/rust/issues/84955\">#84955</a></p>",
        "id": 237522884,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1620231157
    },
    {
        "content": "<p>that's definitely an impressive find ^^</p>",
        "id": 237528676,
        "sender_full_name": "lcnr",
        "timestamp": 1620233496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> was there anything specific you tried to find this?</p>",
        "id": 237530599,
        "sender_full_name": "lcnr",
        "timestamp": 1620234211
    },
    {
        "content": "<p>Well, yeah, I tried to get a feeling of how smart the overlap detection is. The first time I got an overlap, my source file looked like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(marker_trait_attr)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">As1</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">As</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Blah</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[marker]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Marker1</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nc\">As1</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Blah</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">As</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[marker]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Mark</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[marker]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[marker]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Mark</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Mark</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Mark</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"c1\">// doesn’t work: impl Bar for (u8,) {}</span>\n<span class=\"c1\">// but this does:</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"kt\">u8</span><span class=\"p\">,),)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so yeah… much of it is a bunch of impls from trying to get a feeling for what the compiler likes and what it doesn’t. My initial assumption was that the compiler might have some weaknesses that can lead to overlapping impls because of the error cases with <code>T: 'static</code> you posted above, where it apparently quite eagerly applied its knowledge about an existing other blanket impl while checking the soundness of a trait impl. So thus I played around with maximally generic blanket impls. Also the example involves need for negative reasoning to know if the <code>impl Bar for ((u8,),) {}</code> impl overlaps with the other one. I tried out to get some unsoundness with negative reasoning (if there was any unsoundness) since it felt like a natural way in which the compiler getting confused about multiple blanket impls (in particular <em>missing/forgetting about</em> one of them) would be unsound.</p>\n<p>By the way, I already hit some weird seemingly order-sensitive or whitespace-sensitive behavior when first adding the four impls</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(the first one was at the end initially) so it seems like that issue is not too hard to come across either.</p>\n<p>The example in the issue is really just about using associated types and fn pointers to create some unsound transmutation and then minimizing the code example. (BTW, minimization is <em>surprisingly annoying</em> when compiler has incremental compilation issues that you haven’t figured out yet that it’s incr-comp related and <code>cargo clean</code> would’ve helped.)</p>",
        "id": 237533021,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1620235150
    },
    {
        "content": "<p>An earlier step involved some more deeply nested types <code>((((((((((u8,),),),),),),),),),)</code>. I was curious about how far the overlap checking would go. In particular when the overlapping marker trait impls offer so much “non-determinism”. I guess the motivation for that step initially was more about trying to find out what kind of recursion limits or similar I could hit until the compiler would give up on trying to get a definite answer on if there was an overlap, so I was maybe more curious about what kinds of error messages I might get than necessarily expecting to hit unsoundness.</p>",
        "id": 237533925,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1620235504
    },
    {
        "content": "<p>thanks &lt;3</p>",
        "id": 237536250,
        "sender_full_name": "lcnr",
        "timestamp": 1620236445
    },
    {
        "content": "<p>Here's a version of the MWE that focuses on the incr-comp issue:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(marker_trait_attr)]</span><span class=\"w\"></span>\n\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">assert_impl</span><span class=\"w\"> </span><span class=\"p\">{(</span><span class=\"cp\">$ty</span>:<span class=\"nc\">ty</span>: <span class=\"cp\">$($trait</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"cp\">$($trait</span><span class=\"p\">)</span><span class=\"o\">*&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span>::<span class=\"o\">&lt;</span><span class=\"cp\">$ty</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[marker]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// asked directly:</span>\n<span class=\"n\">assert_impl</span><span class=\"o\">!</span><span class=\"p\">(((</span><span class=\"kt\">u8</span><span class=\"p\">,),)</span>: <span class=\"nc\">A</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// fails</span>\n\n<span class=\"c1\">// but walk it through the steps and it works:</span>\n<span class=\"n\">assert_impl</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"kt\">u8</span>: <span class=\"nc\">A</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ok</span>\n<span class=\"n\">assert_impl</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"kt\">u8</span>: <span class=\"nc\">B</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ok</span>\n<span class=\"n\">assert_impl</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"kt\">u8</span>: <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ok</span>\n<span class=\"n\">assert_impl</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"kt\">u8</span><span class=\"p\">,)</span>: <span class=\"nc\">A</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ok</span>\n<span class=\"n\">assert_impl</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"kt\">u8</span><span class=\"p\">,)</span>: <span class=\"nc\">B</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ok</span>\n<span class=\"n\">assert_impl</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"kt\">u8</span><span class=\"p\">,)</span>: <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ok</span>\n<span class=\"n\">assert_impl</span><span class=\"o\">!</span><span class=\"p\">(((</span><span class=\"kt\">u8</span><span class=\"p\">,),)</span>: <span class=\"nc\">A</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ok.. wait</span>\n\n<span class=\"c1\">// This abbreviated path also works:</span>\n<span class=\"n\">assert_impl</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"kt\">u8</span><span class=\"p\">,)</span>: <span class=\"nc\">A</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ok</span>\n<span class=\"n\">assert_impl</span><span class=\"o\">!</span><span class=\"p\">(((</span><span class=\"kt\">u8</span><span class=\"p\">,),)</span>: <span class=\"nc\">A</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ok</span>\n</code></pre></div>\n<p>You have to comment out the first <code>assert_impl!(((u8,),): A);</code> to see the second one work</p>",
        "id": 237543558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620239293
    },
    {
        "content": "<p>I believe these impl tests are also why the coherence check fails to notice the overlap; it is doing the equivalent of <code>assert_no_impl!(((u8,),): A);</code> which spuriously succeeds. I haven't found a way to walk it through the steps like above, because trait coherence checking seems to happen before function body typechecking, which is used to implement <code>assert_impl!</code> here</p>",
        "id": 237545296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620239963
    },
    {
        "content": "<p>Damn, that’s an insanely useful macro idea. Should’ve thought of something like that myself for my experimentations <a href=\"https://github.com/rust-lang/rust/issues?q=author%3Asteffahn+label%3AA-traits\">the past few weaks</a> often involving traits. I wouldn’t know how often I coded up helper functions to do exactly that, especially for testing <code>𝑇𝑦𝑝𝑒: 'static</code> bounds.</p>",
        "id": 237546080,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1620240316
    },
    {
        "content": "<p>You might like this one as well for the coherence checking then:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">assert_no_impl</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$ty</span>:<span class=\"nc\">ty</span>: <span class=\"cp\">$($trait</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"cp\">$($trait</span><span class=\"p\">)</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$ty</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237546591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620240538
    },
    {
        "content": "<p>Actually, you might want to add some <code>assert_implication!([S,T][T: From&lt;S&gt;] S: Into&lt;T&gt;)</code> version (syntax to be debated).</p>",
        "id": 237547384,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1620240873
    },
    {
        "content": "<p>This is the quick and dirty version. I think the <code>static_assertions</code> crate has much more elaborate versions of these macros</p>",
        "id": 237547667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620241000
    },
    {
        "content": "<p>Alright, that’s a nice crate I’ve never heard of… however I can’t find anything that could test implications like that. I remember having a case where <code>T: A -&gt; T: B</code> did work but <code>T: A + C -&gt; T: B</code> didn’t (<code>-&gt;</code>arrow means implication) while playing around and finding <a href=\"https://github.com/rust-lang/rust/issues/84955\">#84955</a>. Of course tested with something like <code>fn f&lt;T: A&gt;() { g::&lt;T&gt;(); } fn g&lt;T: B&gt;() {}</code>.</p>",
        "id": 237548255,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1620241236
    },
    {
        "content": "<p>ha, I wonder whether it would be possible to just have a chalk style FOL formula transformed into a rust impl pattern</p>",
        "id": 237548499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620241321
    },
    {
        "content": "<p>In case you’re interested, the setting is actually the code I posted above with the <code>impl&lt;T: A&gt; A for T</code> removed. (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=57ba6b8cff5922cce42b5567f94ac8d7\">playground</a>, look at the bottom)</p>",
        "id": 237548906,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1620241454
    },
    {
        "content": "<p>If you compile that code you posted above but with </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// asked directly:</span>\n<span class=\"c1\">// assert_impl!(((u8,),): A); // fails</span>\n</code></pre></div>\n<p>commented out, and then remove the <code>//</code> and compile again, you can get an ICE</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;assertion failed: `(left == right)`\n  left: `Some(Fingerprint(7515642617870997472, 10669738953425457651))`,\n right: `Some(Fingerprint(8537439170242672706, 4648092694241280842))`: found unstable fingerprints for evaluate_obligation(ee7939cc1800bb5a-204ab6fc5a30d80b): Ok(EvaluatedToErr)&#39;, /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/compiler/rustc_query_system/src/query/plumbing.rs:593:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.53.0-nightly (42816d61e 2021-04-24) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type bin\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\n#0 [evaluate_obligation] evaluating trait selection obligation `((u8,),): A`\n#1 [typeck] type-checking `_::g`\nend of query stack\nerror: could not compile `small_pg`\n</code></pre></div>",
        "id": 237550889,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1620242225
    },
    {
        "content": "<p>there are a <em>bunch</em> of those incremental failures related to the trait cache, like <a href=\"https://github.com/rust-lang/rust/issues/84335\">#84335</a>. They may fall under the umbrella of <a href=\"https://github.com/rust-lang/rust/issues/83538\">#83538</a> but the query stack is different so it's unsure</p>",
        "id": 237553222,
        "sender_full_name": "lqd",
        "timestamp": 1620243340
    },
    {
        "content": "<p>your examples however are very small, compared to all the others, and it may be of interest to  <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span></p>",
        "id": 237553425,
        "sender_full_name": "lqd",
        "timestamp": 1620243441
    },
    {
        "content": "<p>so thanks a lot for those :)</p>",
        "id": 237553462,
        "sender_full_name": "lqd",
        "timestamp": 1620243471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> Here’s one without using unstable features:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">assert_impl</span><span class=\"w\"> </span><span class=\"p\">{(</span><span class=\"cp\">$ty</span>:<span class=\"nc\">ty</span>: <span class=\"cp\">$($trait</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"cp\">$($trait</span><span class=\"p\">)</span><span class=\"o\">*&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span>::<span class=\"o\">&lt;</span><span class=\"cp\">$ty</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Self_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Self_</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Self_</span>: <span class=\"nc\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">S10</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">S50</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">S10</span><span class=\"o\">&lt;</span><span class=\"n\">S10</span><span class=\"o\">&lt;</span><span class=\"n\">S10</span><span class=\"o\">&lt;</span><span class=\"n\">S10</span><span class=\"o\">&lt;</span><span class=\"n\">S10</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;&gt;&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">S126</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">S50</span><span class=\"o\">&lt;</span><span class=\"n\">S50</span><span class=\"o\">&lt;</span><span class=\"n\">S10</span><span class=\"o\">&lt;</span><span class=\"n\">S10</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">New</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">D</span>: <span class=\"nb\">Copy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">S126</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">New</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">New2</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">New2</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">u8</span>: <span class=\"nc\">New</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">New3</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">New3</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">u8</span>: <span class=\"nc\">New2</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// asked directly would fail:</span>\n<span class=\"c1\">// assert_impl!(u8: New3&lt;()&gt;);</span>\n\n<span class=\"c1\">// first ask</span>\n<span class=\"n\">assert_impl</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"kt\">u8</span>: <span class=\"nc\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">S126</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// then ask</span>\n<span class=\"n\">assert_impl</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"kt\">u8</span>: <span class=\"nc\">New3</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Again, if you compile the above and then uncomment the</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// asked directly would fail:</span>\n<span class=\"n\">assert_impl</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"kt\">u8</span>: <span class=\"nc\">New3</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>you’ll get the ICE with incremental compilation.</p>",
        "id": 237556611,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1620244980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> What error message is that giving you?</p>",
        "id": 237556748,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620245023
    },
    {
        "content": "<p>when you get the ICE</p>",
        "id": 237556756,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620245027
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;assertion failed: `(left == right)`\n  left: `Some(Fingerprint(16365582130792536210, 18134235757999171202))`,\n right: `Some(Fingerprint(8537439170242672706, 4648092694241280842))`: found unstable fingerprints for evaluate_obligation(8421af3104e8568e-1e4dde7bf5725838): Err(OverflowError)&#39;, /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/compiler/rustc_query_system/src/query/plumbing.rs:593:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.53.0-nightly (42816d61e 2021-04-24) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -C embed-bitcode=no -C debuginfo=2 -C incremental --crate-type lib\n\nnote: some of the compiler flags provided by cargo are hidden\n\nquery stack during panic:\n#0 [evaluate_obligation] evaluating trait selection obligation `u8: New3&lt;()&gt;`\n#1 [typeck] type-checking `_::g`\nend of query stack\n</code></pre></div>",
        "id": 237556861,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1620245060
    },
    {
        "content": "<p>Wow - this is a <em>different</em> incr comp issue with <code>evaluate_obligation</code></p>",
        "id": 237557404,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620245312
    },
    {
        "content": "<p>distinct from the one with <code>syn</code></p>",
        "id": 237557422,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620245317
    },
    {
        "content": "<p>Can you open an issue?</p>",
        "id": 237557453,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620245328
    },
    {
        "content": "<p>The <code>syn</code> issue occurs because the choice between <code>EvaluatedToOk</code> and <code>EvaluatedToOkModuloRegions</code> depends on global state</p>",
        "id": 237557530,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620245359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> check out one of the cases in <a href=\"https://github.com/rust-lang/rust/issues/84335\">#84335</a></p>",
        "id": 237557549,
        "sender_full_name": "lqd",
        "timestamp": 1620245367
    },
    {
        "content": "<p>that issue never involves <code>OverflowError</code></p>",
        "id": 237557565,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620245375
    },
    {
        "content": "<p>r-a triggers this one from typeck IIUC</p>",
        "id": 237557576,
        "sender_full_name": "lqd",
        "timestamp": 1620245381
    },
    {
        "content": "<p>(but could be wrong, I haven't looked at it as closely as you of course)</p>",
        "id": 237557617,
        "sender_full_name": "lqd",
        "timestamp": 1620245403
    },
    {
        "content": "<p>The <code>item_children</code> one will probably be fixed by <a href=\"https://github.com/rust-lang/rust/pull/83901/files\">https://github.com/rust-lang/rust/pull/83901/files</a></p>",
        "id": 237557666,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620245412
    },
    {
        "content": "<p>which should really get merged</p>",
        "id": 237557674,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620245415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/237557453\">said</a>:</p>\n<blockquote>\n<p>Can you open an issue?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/84963\">#84963</a></p>",
        "id": 237560317,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1620246651
    },
    {
        "content": "<p>Suggestion: once <code>const_trait_impl</code> is properly implemented/stabilized, should <code>#[marker]</code> also make all <code>impl</code>s of the trait <code>const</code>? After all, a trait with no methods can't have non-const methods.</p>",
        "id": 268226552,
        "sender_full_name": "Jules Bertholet",
        "timestamp": 1642393815
    },
    {
        "content": "<p>I think maybe have a lint suggesting it, but I think I'd expect that the impl should say <code>const</code> to be <code>const</code> despite it being for a <code>#[marker]</code> trait.</p>",
        "id": 268229614,
        "sender_full_name": "scottmcm",
        "timestamp": 1642397458
    },
    {
        "content": "<p>I don't think that goes far enough. The <code>#[marker]</code> attribute seems to imply \"this trait has no methods and never will have any, so opt out of any rules/restrictions/logic that's only for handling methods.\" Currently that just means opting out of some coherence rules. But it would make sense for it to also opt out of all const/non-const rules, because those are also \"only for handling methods.\"</p>",
        "id": 268230233,
        "sender_full_name": "Jules Bertholet",
        "timestamp": 1642398309
    },
    {
        "content": "<p>Making marker trait impls always <code>const</code> is also the only behavior that's consistent with how <code>Copy</code> works in <code>const fn</code>s currently.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Not `impl const Copy`</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">myfun</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// `Copy`ing a in a const context</span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268230775,
        "sender_full_name": "Jules Bertholet",
        "timestamp": 1642399047
    },
    {
        "content": "<p>We should just require an opt in for traits to have a cost version, and not allow this when marker is specified.</p>",
        "id": 268240186,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1642408163
    },
    {
        "content": "<p>The <code>T: Copy</code> bounds in a const fn are not <code>T: ~const Copy</code></p>",
        "id": 268240524,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1642408425
    },
    {
        "content": "<p>Yea, marker traits don't need to have const impls afaict.</p>",
        "id": 268247258,
        "sender_full_name": "oli",
        "timestamp": 1642412096
    },
    {
        "content": "<p>Out of curiosity, how do const trait impls interact with semver? In particular, I believe its currently not a breaking change to add a function to a trait with a default impl. Will that continue to be the case? If so, how does this affect const bounds if that function is non-const?</p>",
        "id": 268250468,
        "sender_full_name": "Jake",
        "timestamp": 1642414018
    },
    {
        "content": "<p>Basically we'll need a way to either opt traits into const usability, or we need to declare it a breaking change to add a non-const default method, which seems really bad</p>",
        "id": 268262711,
        "sender_full_name": "oli",
        "timestamp": 1642421743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/268262711\">said</a>:</p>\n<blockquote>\n<p>[…] or we need to declare it a breaking change to add a non-const default method, which seems really bad</p>\n</blockquote>\n<p>This might arguably be a breaking change for <code>rustc</code> / the Rust language itself. There are existing crates with version <code>1.2.3</code> and <code>1.2.4</code> differing by addition of a non-<code>const</code>–default-implemented method added to a trait. If this were to be declared a breaking change, then the existing version history of such a crate would suddenly, after the fact, be declared in violation of semver-guarantees.</p>",
        "id": 268264800,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1642423065
    },
    {
        "content": "<p>The only proper way I see to make “it a breaking change to add a non-const default method”, while avoiding breaking changes to the Rust language itself, would be over an edition. An edition could turn a “way to […] opt traits into const usability” into a “way to opt traits <strong>out of</strong> const usability”, in which case the default situation in new editions would indeed become that “it [is] a breaking change to add a non-const default method”.</p>\n<p>Of course such a change over an edition would be quite unnecessary and confusing. For consistency, you would probably have to warn all code in old editions to use <em>either</em> the opt-in <em>or</em> the opt-out <em>just</em> to avoid all the confusion from opt-in/out-free traits meaning different things. But emitting a warning on all existing traits is quite disruptive.</p>\n<p>(This is all ignoring any discussion of whether, without any stability considerations / with a clean sheet, the opt-in solution to <code>const</code> trait bounds wouldn’t be better anyways.)</p>",
        "id": 268266108,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1642423877
    },
    {
        "content": "<p>The other option is that “newly added defaulted methods don’t need to be <code>const</code>” for a “<code>const SomeTrait</code>” bound. But you can’t know which methods are “newly added”, and excluding all defaulted methods from <code>const</code>ness makes adding a default implementation for an existing method a breaking change.</p>\n<p>Hence, I think that an per-<code>Trait</code> opt-in approach to using <code>const Trait</code> bounds would need to allow the optin-in trait to declare which methods are and aren’t covered by the <code>const</code>. And maybe also we would want to have more fine-grained kinds of bounds i.e. <code>const([list, of, methods]) Trait</code>. Those wouldn’t need any opt-in to be supported, because there aren’t any breaking changes. The opt-in would then allow the trait author to effectively just introduce <code>const SomeTrait</code> as a synonym/abbreviation for <code>const([canonical, list, of, methods]) SomeTrait</code></p>",
        "id": 268266590,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1642424175
    },
    {
        "content": "<p>yea, syntactically my current preference would be to declare const traits via <code>const trait Foo</code>. The only annoying thing about such opt-in is that libraries need to opt-in and we can't just use arbitrary existing crates. Then again, moving from <code>trait Foo {}</code> to <code>const trait Foo {}</code> is not a breaking change, so it's fairly easy to roll out over the ecosystem</p>",
        "id": 268271707,
        "sender_full_name": "oli",
        "timestamp": 1642426933
    },
    {
        "content": "<p>As mentioned in my posts above, I <em>do</em> believe it is reasonable to allow a fine-grained way of saying <code>T: const[list, of, const, methods] Foo</code> which could work even with existing traits in crates that didn’t opt into anything. This kind of bound would be implemented by an <code>impl Bar for SomeType { const fn some_method() {}, fn another_method() {} }</code>; this particular implementation would fulfill <code>SomeType: const[some_method] Bar</code>, but not <code>SomeType: const[another_method] Bar</code>or <code>SomeType: const[some_method, another_method] Bar</code>.</p>\n<p>So it would allow both:</p>\n<ul>\n<li>Using <code>SomeType</code> with a generic function that has a <code>SomeType: const[another_method] Bar</code></li>\n<li>Using the concrete implementation for concrete type, <code>SomeType::some_method</code>, in a const context, e.g.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// trait doesn’t opt into anything</span>\n<span class=\"c1\">// (e.g. a trait in an old existing crate)</span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"hi\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Struct</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// const implementation of `foo`</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">user</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// const call of concrete implementation</span>\n<span class=\"w\">    </span><span class=\"n\">Struct</span>::<span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">///////////////////////////////////</span>\n<span class=\"c1\">// generic function and use-case:</span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">generic</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">~</span><span class=\"k\">const</span><span class=\"p\">[</span><span class=\"n\">foo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>::<span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">user2</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">generic</span>::<span class=\"o\">&lt;</span><span class=\"n\">Struct</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<hr>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// trait opts into `const Foo` support; it marks</span>\n<span class=\"c1\">// `foo` as `~const`, which means `foo` is const if `Foo` is const,</span>\n<span class=\"c1\">// i.e. it makes `T: const Foo` synonymous to `T: const[foo] Foo`</span>\n<span class=\"c1\">// and `~const Foo` synonymous to `~const[foo] Foo`</span>\n\n<span class=\"c1\">// (I use `~const` here because I imagine `const fn` means “always const”, i.e.</span>\n<span class=\"c1\">// `T: Foo` would mean `T::foo` is a const fn, so not just `T: const Foo` would require that)</span>\n<span class=\"c1\">// Failing to mark any methods (as `~const`) in a `const trait` would result in a warning or error, because it’s kind-of useless.</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">~</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"hi\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// writing `impl const Foo` results in an error if the (minimal) required set of methods isn’t `const`</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// could go further than necessary and even make this one const</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">user</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// const call of concrete implementation</span>\n<span class=\"w\">    </span><span class=\"n\">Struct</span>::<span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// const call of concrete implementation</span>\n<span class=\"w\">    </span><span class=\"n\">Struct</span>::<span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">///////////////////////////////////</span>\n<span class=\"c1\">// generic function and use-case:</span>\n\n<span class=\"c1\">// uses `~const Foo`, equivalent to `~const[foo] Foo`</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">generic</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">~</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>::<span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// wouldn’t work:</span>\n<span class=\"w\">    </span><span class=\"c1\">// T::bar();</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">user2</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">generic</span>::<span class=\"o\">&lt;</span><span class=\"n\">Struct</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268285248,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1642433453
    },
    {
        "content": "<p>sorry, looking back at the topic title, this discussion is probably a bit off-topic</p>",
        "id": 268285749,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1642433685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280891\">Frank Steffahn</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/268264800\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/268262711\">said</a>:</p>\n<blockquote>\n<p>[…] or we need to declare it a breaking change to add a non-const default method, which seems really bad</p>\n</blockquote>\n<p>This might arguably be a breaking change for <code>rustc</code> / the Rust language itself. There are existing crates with version <code>1.2.3</code> and <code>1.2.4</code> differing by addition of a non-<code>const</code>–default-implemented method added to a trait. If this were to be declared a breaking change, then the existing version history of such a crate would suddenly, after the fact, be declared in violation of semver-guarantees.</p>\n</blockquote>\n<p>I don't think this really can be considered a breaking change for rustc, given that expanding the set of traits that are dyn safe is also not considered a breaking change currently. That being said, I agree that potential constness should be opt-in for traits.</p>",
        "id": 268306790,
        "sender_full_name": "Jules Bertholet",
        "timestamp": 1642446968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421518\">@Jules Bertholet</span> Interesting point. For a better picture, can you give me a link to the past, current, or future language changes that “expand[…] the set of traits that are dyn safe” that you’re referring to?</p>",
        "id": 268312768,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1642451396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280891\">Frank Steffahn</span> <a href=\"#narrow/stream/144729-wg-traits/topic/marker_trait_attr.20stabilization/near/268312768\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"421518\">Jules Bertholet</span> Interesting point. For a better picture, can you give me a link to the past, current, or future language changes that “expand[…] the set of traits that are dyn safe” that you’re referring to?</p>\n</blockquote>\n<p>The  \"Push for GATs stabilization\" blog post on <a href=\"http://rust-lang.org\">rust-lang.org</a> (<a href=\"https://blog.rust-lang.org/2021/08/03/GATs-stabilization-push.html\">https://blog.rust-lang.org/2021/08/03/GATs-stabilization-push.html</a>) asserts at the end that adding object safety to GATs post-stabilization \"would be a backward-compatible change.\"</p>",
        "id": 268312971,
        "sender_full_name": "Jules Bertholet",
        "timestamp": 1642451575
    },
    {
        "content": "<p>Hmm, maybe this point on GAT’s might give additional motivation for a feature of an explicit way to opt-out-of object safety; and maybe also a (nice) explicit way to assert object safety.</p>\n<p>Then a (public, and otherwise-object-safe) trait with GATs could give a warning that “this trait might become object safe in the future; if you don’t want that, use <em>explicit opt-out-syntax</em> to make sure it stays not-object-safe, or add <code>#[allow(object_safe_except_for_gat)]</code> if this is intentional”</p>",
        "id": 268313252,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1642451878
    },
    {
        "content": "<p>I'd love to see some more first-class-feeling ways to communicate that a trait is intentionally supporting <code>dyn</code>.  It's really easy to accidentally un-object-safe something (like I did in <a href=\"https://github.com/rust-lang/rust/issues/87991\">#87991</a>) and I think it might be good for traits to not be dyn-capable by default eventually because I suspect many authors aren't thinking about it.</p>\n<p>Relevant open RFC: <a href=\"https://github.com/rust-lang/rfcs/pull/3022\">https://github.com/rust-lang/rfcs/pull/3022</a></p>",
        "id": 269299123,
        "sender_full_name": "scottmcm",
        "timestamp": 1643134439
    },
    {
        "content": "<p>I think this goes hand-in-hand with better trait object ergonomics</p>",
        "id": 269299829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643134700
    }
]