[
    {
        "content": "<p>I will say <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> that I don't see a reason that <code>Sized</code> can't be coinductive</p>",
        "id": 235842264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619185422
    },
    {
        "content": "<p>it's probably the easiest case of all</p>",
        "id": 235842279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619185428
    },
    {
        "content": "<p>given that we don't permit user impls at all</p>",
        "id": 235842291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619185434
    },
    {
        "content": "<p>interestingly, with my change the following does not error with <code>cargo check</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"n\">Assoc</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236305963,
        "sender_full_name": "lcnr",
        "timestamp": 1619515050
    },
    {
        "content": "<p>which we should prevent imo</p>",
        "id": 236306070,
        "sender_full_name": "lcnr",
        "timestamp": 1619515101
    },
    {
        "content": "<p>the following doesn't error at all on stable, even though <code>Foo&lt;()&gt;</code> is a self recursive type</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"n\">Assoc</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236306172,
        "sender_full_name": "lcnr",
        "timestamp": 1619515156
    },
    {
        "content": "<p>which i would also like to error on eagerly</p>",
        "id": 236306186,
        "sender_full_name": "lcnr",
        "timestamp": 1619515171
    },
    {
        "content": "<p>does it make sense to require types to not be self recursive for wf?</p>",
        "id": 236306498,
        "sender_full_name": "lcnr",
        "timestamp": 1619515324
    },
    {
        "content": "<p>people call me mc stack overflow <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> because i find stack overflows</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236311310,
        "sender_full_name": "lcnr",
        "timestamp": 1619517949
    },
    {
        "content": "<p>that cycle is actually kind of hard to fix <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 236313592,
        "sender_full_name": "lcnr",
        "timestamp": 1619519212
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> there has to be a way to cleanly represent this as a graph :/</p>",
        "id": 236314802,
        "sender_full_name": "lcnr",
        "timestamp": 1619519962
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/84611\">#84611</a></p>",
        "id": 236314929,
        "sender_full_name": "lcnr",
        "timestamp": 1619520043
    },
    {
        "content": "<p>okay...</p>",
        "id": 236315283,
        "sender_full_name": "lcnr",
        "timestamp": 1619520306
    },
    {
        "content": "<p>so ignoring generic parameters, we have a fairly simple directed graph</p>",
        "id": 236315313,
        "sender_full_name": "lcnr",
        "timestamp": 1619520325
    },
    {
        "content": "<p>(we don't look into projections or anything, so you can only directly embed a type or not at all)</p>",
        "id": 236315342,
        "sender_full_name": "lcnr",
        "timestamp": 1619520352
    },
    {
        "content": "<p>for a parameter to matter is has to be used directly somewhere</p>",
        "id": 236315534,
        "sender_full_name": "lcnr",
        "timestamp": 1619520459
    },
    {
        "content": "<p>if we now have <code>Bar&lt;Foo&lt;T&gt;&gt;</code></p>",
        "id": 236315546,
        "sender_full_name": "lcnr",
        "timestamp": 1619520480
    },
    {
        "content": "<p>both <code>Bar</code> and <code>Foo</code> have to directly use their parameter</p>",
        "id": 236315629,
        "sender_full_name": "lcnr",
        "timestamp": 1619520505
    },
    {
        "content": "<p>how to compute \"directly use their parameter\", that's again recursive <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 236315846,
        "sender_full_name": "lcnr",
        "timestamp": 1619520642
    },
    {
        "content": "<p>i don't get it :(</p>",
        "id": 236315898,
        "sender_full_name": "lcnr",
        "timestamp": 1619520693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/coinductive.20sized/near/236314802\">said</a>:</p>\n<blockquote>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> there has to be a way to cleanly represent this as a graph :/</p>\n</blockquote>\n<p>xx</p>",
        "id": 236315920,
        "sender_full_name": "lcnr",
        "timestamp": 1619520707
    },
    {
        "content": "<p>there might not be <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> considering that finding cycles in a graph is really fast and i would assume this to not be that easy</p>",
        "id": 236316661,
        "sender_full_name": "lcnr",
        "timestamp": 1619521114
    },
    {
        "content": "<p>so, the quickest fix would be to change <a href=\"https://github.com/rust-lang/rust/blob/e1886935b78e62a6c23a243e48f81815ae7fd141/compiler/rustc_middle/src/ty/util.rs#L1012\">https://github.com/rust-lang/rust/blob/e1886935b78e62a6c23a243e48f81815ae7fd141/compiler/rustc_middle/src/ty/util.rs#L1012</a> to check if <code>ty</code> is not the same as <code>seen</code> type but whether the substs of <code>seen_type</code> are directly mentioned in <code>ty</code></p>",
        "id": 236317273,
        "sender_full_name": "lcnr",
        "timestamp": 1619521451
    },
    {
        "content": "<p>but that doesn't seem too nice, so i would like there to be a cleaner approach here</p>",
        "id": 236317323,
        "sender_full_name": "lcnr",
        "timestamp": 1619521495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/coinductive.20sized/near/236317273\">said</a>:</p>\n<blockquote>\n<p>so, the quickest fix would be to change <a href=\"https://github.com/rust-lang/rust/blob/e1886935b78e62a6c23a243e48f81815ae7fd141/compiler/rustc_middle/src/ty/util.rs#L1012\">https://github.com/rust-lang/rust/blob/e1886935b78e62a6c23a243e48f81815ae7fd141/compiler/rustc_middle/src/ty/util.rs#L1012</a> to check if <code>ty</code> is not the same as <code>seen</code> type but whether the substs of <code>seen_type</code> are directly mentioned in <code>ty</code></p>\n</blockquote>\n<p>that might not actually work :////  because checking that the substs of <code>seen_type</code> are directly mentioned in <code>ty</code> is the same problem again <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 236320597,
        "sender_full_name": "lcnr",
        "timestamp": 1619523363
    },
    {
        "content": "<p>just going to ignore this for now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 236320912,
        "sender_full_name": "lcnr",
        "timestamp": 1619523535
    },
    {
        "content": "<p>slightly different scenario in <a href=\"https://github.com/rust-lang/rust/issues/74224\">#74224</a>, it finds ContainsRecursive , but it still tries to find SelfRecursive, so doesn't stop either.</p>",
        "id": 236321359,
        "sender_full_name": "tm",
        "timestamp": 1619523772
    },
    {
        "content": "<p>/me wonders if this is just the halting problem in disguise</p>",
        "id": 236449441,
        "sender_full_name": "tmandry",
        "timestamp": 1619584689
    },
    {
        "content": "<p>/me wondered the same thing, but really hopes checking whether types are recursive is not turing complete :p</p>",
        "id": 236476159,
        "sender_full_name": "lcnr",
        "timestamp": 1619602030
    },
    {
        "content": "<p>FWIW Chalk seems to accept the stack-overflowing example (or at least my attempt to make a test out of it) as wellformed without any problems. Based on how Chalk handles (co-)inductive cycles of goals, I also can't imagine that it would be as hard as the halting problem, though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 236492562,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1619610569
    },
    {
        "content": "<p>like, this is a well formed type but not a representable one</p>\n<p>does chalk already error for something like <code>struct Foo(Foo);</code>, i think that might be outside of chalk's responsibilities</p>",
        "id": 236492864,
        "sender_full_name": "lcnr",
        "timestamp": 1619610738
    },
    {
        "content": "<p>This family of examples is roughly why auto traits have to be coinductive</p>",
        "id": 236949147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619857076
    },
    {
        "content": "<p>Or at least I haven't found a way around it, although I would like to</p>",
        "id": 236949196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619857094
    },
    {
        "content": "<p>e.g. for <code>Vec&lt;T&gt;</code> you can readily imagine an algorithm that examines its structure and generates an impl like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Send</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236949231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619857186
    },
    {
        "content": "<p>but for a struct like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>it's hard to imagine anything other than</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Item</span>: <span class=\"nb\">Send</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and of course <code>T::Item</code> might well be <code>Foo&lt;T&gt;</code>.</p>",
        "id": 236949305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619857237
    },
    {
        "content": "<p>What was the bug, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>, that we thought <code>Sized</code> being coinductive might help with? I forget.</p>",
        "id": 236949347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619857273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you mean <a href=\"https://github.com/rust-lang/rust/issues/80626\">#80626</a>?</p>",
        "id": 236979946,
        "sender_full_name": "lcnr",
        "timestamp": 1619885403
    }
]