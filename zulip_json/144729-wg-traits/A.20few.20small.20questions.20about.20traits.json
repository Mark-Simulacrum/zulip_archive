[
    {
        "content": "<p>Heya! Ive got a few questions based on this code example: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=cda097b62e330900184a09db2b835ab9\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=cda097b62e330900184a09db2b835ab9</a></p>\n<p>My question is whether there is any way to sort of guide the compiler into understanding that <code>B1</code> implements <code>OrBit&lt;B0&gt;</code> simply because both types essentially boil down to either of two structs (<code>True</code> or <code>False</code>) and <code>OrBit</code> is implemented for all combinations of those structs. All of this without having to add a type restriction in the <code>impl SomeOperation...</code>?</p>",
        "id": 206470149,
        "sender_full_name": "Valerian G.",
        "timestamp": 1597071363
    },
    {
        "content": "<p>im not quite sure if something like this is possible, but id assume that rustc could infer that my code is valid without having to be more explicit.</p>",
        "id": 206470280,
        "sender_full_name": "Valerian G.",
        "timestamp": 1597071431
    },
    {
        "content": "<p>I don't think you can tell the compiler that the set of types that implement a trait is closed. But maybe there's a different way to achieve that since you can <a href=\"https://sdleffler.github.io/RustTypeSystemTuringComplete/\">definitely</a> do type-level computation.</p>",
        "id": 206470912,
        "sender_full_name": "Laurențiu",
        "timestamp": 1597071704
    },
    {
        "content": "<p>right so what im trying to do is plainly impossible. Alright thanks a lot!</p>",
        "id": 206471426,
        "sender_full_name": "Valerian G.",
        "timestamp": 1597071953
    },
    {
        "content": "<p>Well, see above</p>",
        "id": 206471527,
        "sender_full_name": "Laurențiu",
        "timestamp": 1597071996
    },
    {
        "content": "<p>right i see, i mean what im trying to do could work, but the problem is that in a bigger PoC as you get more complex operations type bounds become complex, and youd need many of them. Anyway, thanks a lot</p>",
        "id": 206474767,
        "sender_full_name": "Valerian G.",
        "timestamp": 1597073449
    },
    {
        "content": "<p>Maybe you can use <code>const fn</code> instead?</p>",
        "id": 206475078,
        "sender_full_name": "Laurențiu",
        "timestamp": 1597073604
    },
    {
        "content": "<p>haha i could, but the challenge is to implement 8bit numbers + arithmetic at the type system level</p>",
        "id": 206475222,
        "sender_full_name": "Valerian G.",
        "timestamp": 1597073673
    },
    {
        "content": "<p>Like the TypeNum crate?</p>",
        "id": 206475556,
        "sender_full_name": "Eh2406",
        "timestamp": 1597073860
    },
    {
        "content": "<p>i suppose, if im being honest im not quite sure what exactly the number interpretation in typenum looks like, but im sorta building off of something like this </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">U8</span><span class=\"o\">&lt;</span><span class=\"n\">B7</span>: <span class=\"nc\">Bit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B6</span>: <span class=\"nc\">Bit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B5</span>: <span class=\"nc\">Bit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B4</span>: <span class=\"nc\">Bit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B3</span>: <span class=\"nc\">Bit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B2</span>: <span class=\"nc\">Bit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B1</span>: <span class=\"nc\">Bit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B0</span>: <span class=\"nc\">Bit</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_bits</span>: <span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">B7</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">B6</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">B5</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">B4</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">B3</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">B2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">B1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">B0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Everything seemed like it was going well till i got to addition :(</p>",
        "id": 206475861,
        "sender_full_name": "Valerian G.",
        "timestamp": 1597074013
    },
    {
        "content": "<p>In chalk we don't have a notion of closed types, at least yet</p>",
        "id": 206511202,
        "sender_full_name": "Areredify",
        "timestamp": 1597092406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328945\">@Valerian G.</span> I think you should be able to get _something_ like this working with something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">OrBit</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span>: <span class=\"nc\">Bit</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// ...</span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span>: <span class=\"nc\">OrBit</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"cm\">/* ... other bit traits&lt;T&gt; ... */</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">OrBit</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"cm\">/* ... other bit traits&lt;T&gt; ... */</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">B1</span>: <span class=\"nc\">Bit</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"o\">&lt;</span><span class=\"n\">B0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B0</span>: <span class=\"nc\">Bit</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Bit</span><span class=\"o\">&lt;</span><span class=\"n\">B1</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">SomeOperation</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bits2</span><span class=\"o\">&lt;</span><span class=\"n\">B1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B0</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>?</p>\n<p>It's a bit more boilerplate heavy, but it should mean <code>Bit</code> really encodes the notion of \"I can do any bitwise operation with this type, and I can use the result to do any other bitwise operation again\"</p>\n<p>It still won't encode a fixed number of types, but it should practically allow writing code (at the cost of N^2 where clauses for N bits)?</p>",
        "id": 207049812,
        "sender_full_name": "David Ross",
        "timestamp": 1597543684
    },
    {
        "content": "<p>Right now, your <code>Bit</code> trait doesn't actually encode anything, so if you have <code>T: Bit</code> I can just impl <code>Bit</code> on anything and then throw it in, and your code has to deal with that. But if you had <code>Bit</code> be directed, and represent \"I can do bitwise operations with this type\", you should be able to do at least some math with it?</p>",
        "id": 207049831,
        "sender_full_name": "David Ross",
        "timestamp": 1597543790
    },
    {
        "content": "<p>Though I suspect even that will probably fall apart sooner or later if you have too many operations, since the <code>Bit</code> trait still doesn't represent being able to do anything with True and False in particular</p>",
        "id": 207049944,
        "sender_full_name": "David Ross",
        "timestamp": 1597543956
    },
    {
        "content": "<p>yeah thats exactly the problem, to put it in perspective, my code started failing when i had a complex operation rely on recursive shifting where you would shift a number represented by 8bits then or it with another number so on until a condition is met. The problem was that the type constraint that you had to add was essentially all the possible permutations of <code>Or</code> between bits 0 through 7</p>",
        "id": 207078735,
        "sender_full_name": "Valerian G.",
        "timestamp": 1597596434
    },
    {
        "content": "<p>and thats for a simple (yet somewhat complex) operation</p>",
        "id": 207078739,
        "sender_full_name": "Valerian G.",
        "timestamp": 1597596445
    },
    {
        "content": "<p>it gets a lot uglier when you try to do addition</p>",
        "id": 207078741,
        "sender_full_name": "Valerian G.",
        "timestamp": 1597596453
    },
    {
        "content": "<p>i suppose this problem will stay until we have sealed traits in rust and when the type system is able to take note of sealed traits</p>",
        "id": 207078798,
        "sender_full_name": "Valerian G.",
        "timestamp": 1597596501
    },
    {
        "content": "<p>although i think your solution might make it a lot less complicated, since i just need to make sure that each bit implements <code>Bit</code> for every other <code>Bit</code> in the number i suppose, im sorry if im not making any sense</p>",
        "id": 207078833,
        "sender_full_name": "Valerian G.",
        "timestamp": 1597596601
    },
    {
        "content": "<p>ill give it a try again, perhaps my little experiment will get a little further this time!</p>",
        "id": 207078911,
        "sender_full_name": "Valerian G.",
        "timestamp": 1597596695
    },
    {
        "content": "<p>Yeah just gave it a small try: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=04dec6909d54584da987257adb493b05\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=04dec6909d54584da987257adb493b05</a><br>\nWe still have to build the constraints for every single possibility, thus when operations get more complicated or nested it wont compile. :(</p>",
        "id": 207083262,
        "sender_full_name": "Valerian G.",
        "timestamp": 1597602889
    }
]