[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> <br>\nMeeting in ~3 hours. We'll be having a design meeting on placeholder canonicalization and canonical vs instantiated program clauses</p>",
        "id": 210900048,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600793954
    },
    {
        "content": "<p>(in case anyone forgot and wants to review anything before the meeting)</p>",
        "id": 210900096,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600793980
    },
    {
        "content": "<p>I didn't really have time to to do the prep I had hoped to do</p>",
        "id": 210918649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600802400
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 210923629,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600804823
    },
    {
        "content": "<p>Meeting time</p>",
        "id": 210923635,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600804826
    },
    {
        "content": "<p>I also did like no prep</p>",
        "id": 210923648,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600804833
    },
    {
        "content": "<p>Today's been busy</p>",
        "id": 210923679,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600804843
    },
    {
        "content": "<p>I really <em>wanted</em> to but I'm currently at like zero time for things that are not foundation-related and minimal upkeep</p>",
        "id": 210923727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600804858
    },
    {
        "content": "<p>But I think we can try to talk about it now anyway</p>",
        "id": 210923747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600804866
    },
    {
        "content": "<p>Definitely</p>",
        "id": 210923756,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600804871
    },
    {
        "content": "<p>But let's start with any announcments?</p>",
        "id": 210923772,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600804878
    },
    {
        "content": "<p>A few PRs got merged this week</p>",
        "id": 210923801,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600804888
    },
    {
        "content": "<ul>\n<li>I'd like to request folks ping me with PRs and things. Assume that I am not seeing <em>any</em> github pings.</li>\n</ul>",
        "id": 210923811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600804892
    },
    {
        "content": "<p>Oh boy then, I have some for you</p>",
        "id": 210923845,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600804914
    },
    {
        "content": "<p>I <em>am</em> trying to stay on top of my to-do list, so I can add specific items on there :)</p>",
        "id": 210923907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600804929
    },
    {
        "content": "<p>PRs merged this week: <code>CoerceUnsized</code> rules, auto traits for the simple builtin types</p>",
        "id": 210923952,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600804957
    },
    {
        "content": "<p>Github is weird and isn't sorting by updated correctly</p>",
        "id": 210923986,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600804979
    },
    {
        "content": "<p>oh well</p>",
        "id": 210923991,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600804980
    },
    {
        "content": "<p>Also a couple PRs ready for review</p>",
        "id": 210924004,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600804990
    },
    {
        "content": "<p>I have nothing, I've been wrestling <a href=\"https://github.com/rust-lang/rust/issues/50753\">https://github.com/rust-lang/rust/issues/50753</a> all week</p>",
        "id": 210924017,
        "sender_full_name": "Areredify",
        "timestamp": 1600804997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> implemented generators</p>",
        "id": 210924024,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600804999
    },
    {
        "content": "<p>Which <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> needs to review</p>",
        "id": 210924038,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805005
    },
    {
        "content": "<p>Yeah, weirdly enough it's sorted by creation date, which is not useful</p>",
        "id": 210924065,
        "sender_full_name": "detrumi",
        "timestamp": 1600805019
    },
    {
        "content": "<p>I PRed some cleanup of chalk-engine that I've had for a while (<a href=\"https://github.com/rust-lang/rust/issues/611\">#611</a>)</p>",
        "id": 210924088,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805030
    },
    {
        "content": "<p>Which anyone can view</p>",
        "id": 210924097,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805035
    },
    {
        "content": "<p>(I think you mean <a href=\"https://github.com/rust-lang-nursery/chalk/issues/611\">chalk#611</a>)</p>",
        "id": 210924192,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1600805074
    },
    {
        "content": "<p>Oh, I know why it's weird. I cleaned up some branches in my fork and that \"updated\" the PR</p>",
        "id": 210924208,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span> yes, whoops</p>",
        "id": 210924219,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805087
    },
    {
        "content": "<p>Don't have anything either, started with static lifetimes but didn't have time to finish it yet</p>",
        "id": 210924255,
        "sender_full_name": "detrumi",
        "timestamp": 1600805109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-09-22/near/210924024\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> implemented generators</p>\n</blockquote>\n<p>PR?</p>",
        "id": 210924300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805135
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/chalk/issues/593\">chalk#593</a></p>",
        "id": 210924322,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805151
    },
    {
        "content": "<p>I finally got around to finishing the WIP PR :)</p>",
        "id": 210924397,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600805180
    },
    {
        "content": "<p>I'll work on adding docs today or tomorrow</p>",
        "id": 210924409,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600805186
    },
    {
        "content": "<p>ok I added that to my to do list, along with <a href=\"https://github.com/rust-lang-nursery/chalk/issues/611\">chalk#611</a></p>",
        "id": 210924415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805189
    },
    {
        "content": "<p>I can shoot to review those on thu or friday</p>",
        "id": 210924435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805200
    },
    {
        "content": "<p>On the rustc side, I opened <a href=\"https://github.com/rust-lang/rust/issues/76814\">#76814</a> to test performance. And it was awful</p>",
        "id": 210924454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805212
    },
    {
        "content": "<p>I also did a little work locally cleaning up going to/from binders, but haven't pushed</p>",
        "id": 210924511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805247
    },
    {
        "content": "<p>it <em>might</em> help perf a bit</p>",
        "id": 210924519,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805254
    },
    {
        "content": "<p>LOL</p>",
        "id": 210924529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805258
    },
    {
        "content": "<p>I'm not super surprised, I have to say</p>",
        "id": 210924555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805275
    },
    {
        "content": "<p>I'll skim the PR, this may not be the smartest way to do things, also</p>",
        "id": 210924611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805285
    },
    {
        "content": "<p>Probably not</p>",
        "id": 210924618,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805291
    },
    {
        "content": "<p>ok, I see what it did</p>",
        "id": 210924664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805317
    },
    {
        "content": "<p>good data point :)</p>",
        "id": 210924695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805328
    },
    {
        "content": "<p>it is sort of the \"naive strategy\"</p>",
        "id": 210924707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805334
    },
    {
        "content": "<p>yeah, not very smart</p>",
        "id": 210924723,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805342
    },
    {
        "content": "<p>I have a small thing I want to discuss if we have some time left in this meeting (an abstraction I wanted in <a href=\"https://github.com/rust-lang-nursery/chalk/issues/607\">chalk#607</a>)</p>",
        "id": 210924785,
        "sender_full_name": "Areredify",
        "timestamp": 1600805378
    },
    {
        "content": "<p>wrong one</p>",
        "id": 210924806,
        "sender_full_name": "Areredify",
        "timestamp": 1600805390
    },
    {
        "content": "<p>I also tried to go the other way in Chalk (again), by having <code>Binders</code> <em>not</em> track the bound vars. That...also didn't work out great. Never got tests passing.</p>",
        "id": 210924819,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805397
    },
    {
        "content": "<p>In Chalk, we often have <code>for&lt;Self&gt; ...</code> where we never actually name <code>Self</code>in the bound type</p>",
        "id": 210924901,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805433
    },
    {
        "content": "<p>but I digress</p>",
        "id": 210924910,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805441
    },
    {
        "content": "<p>Back to meeting</p>",
        "id": 210924914,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805444
    },
    {
        "content": "<p>hmm yes</p>",
        "id": 210924917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805445
    },
    {
        "content": "<p>the fact that chalk is more expressive is interesting</p>",
        "id": 210924925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> yes, we can discuss if we have time</p>",
        "id": 210924953,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805467
    },
    {
        "content": "<p>We're 10 minutes in though, and considering we didn't prep, I imagine it's gonna take some time</p>",
        "id": 210924977,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805484
    },
    {
        "content": "<p>Okay, so placeholder canonicalization</p>",
        "id": 210924991,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805496
    },
    {
        "content": "<p>Anybody want to summarize?</p>",
        "id": 210924997,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805501
    },
    {
        "content": "<p>Well</p>",
        "id": 210925085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805540
    },
    {
        "content": "<p>without the \"person typing thing\" it's more awkward now</p>",
        "id": 210925092,
        "sender_full_name": "Areredify",
        "timestamp": 1600805547
    },
    {
        "content": "<p>I can do a bit of summary</p>",
        "id": 210925102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805552
    },
    {
        "content": "<p>I guess, to start, when chalk canonicalizes something that involve \"placeholders\"</p>",
        "id": 210925173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805596
    },
    {
        "content": "<p>it currently leaves them unchanged</p>",
        "id": 210925182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805600
    },
    {
        "content": "<p>(everybody knows what \"placeholder\" means?)</p>",
        "id": 210925192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805606
    },
    {
        "content": "<p>I guess I should introduce some notation</p>",
        "id": 210925216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805615
    },
    {
        "content": "<p>(also, basics on canonicalization <a href=\"https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html\">here</a>)</p>",
        "id": 210925226,
        "sender_full_name": "detrumi",
        "timestamp": 1600805629
    },
    {
        "content": "<p>so e.g. if you have <code>Implemented(!U1: Trait)</code> -- the <code>!U1</code> here is a 'placeholder', and let's say it's in universe 1</p>",
        "id": 210925294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805647
    },
    {
        "content": "<p>(that could correspond to some in-scope generic type or whatever)</p>",
        "id": 210925346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805670
    },
    {
        "content": "<p>so you might have <code>Implemented(!U1: PartialEq&lt;!U3&gt;)</code>, and this would be canonicalized to yield the same value</p>",
        "id": 210925394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805699
    },
    {
        "content": "<p>but chalk also has this idea of \"universe-canonicalization\" that would then go and try to renumber the universes to collapse it down</p>",
        "id": 210925418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805714
    },
    {
        "content": "<p>this is worth digging into a bit</p>",
        "id": 210925428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805719
    },
    {
        "content": "<p>in particular, that thing has a placeholder from universe 1 and 3 -- but the absolute universe numbers don't matter when you try to solve it,</p>",
        "id": 210925509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805756
    },
    {
        "content": "<p>all that matters is that one type is in a higher universe than the other</p>",
        "id": 210925559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805766
    },
    {
        "content": "<p>this could come e.g. from a query like</p>",
        "id": 210925568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805770
    },
    {
        "content": "<p>So, maybe it's worth mentioning what universes are? And how they are different from e.g. binders</p>",
        "id": 210925595,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600805782
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>forall&lt;T&gt; { forall&lt;U&gt; { forall&lt;V&gt; { T: PartialEq&lt;V&gt; } }\n</code></pre></div>",
        "id": 210925615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805798
    },
    {
        "content": "<p>ok, a <em>universe</em> is introduced when you traverse a \"forall\" binder like this</p>",
        "id": 210925644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805816
    },
    {
        "content": "<p>it basically extends the set of types with some new, fresh types (what we call <em>placeholders</em>) that don't stand for any specific type, but are rather meant to represent \"any type\"</p>",
        "id": 210925703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805846
    },
    {
        "content": "<p>this is kind of skolemization from logic, idk, people use that word to mean different things</p>",
        "id": 210925755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805864
    },
    {
        "content": "<p>anyway the universes are numbered such that a higher number means \"more types\"</p>",
        "id": 210925852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805897
    },
    {
        "content": "<p>so in this case, there are three foralls, and they might introduce U1, U2, and U3 -- U3 has the most types, since it includs T, U, <em>and</em> V</p>",
        "id": 210925880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805912
    },
    {
        "content": "<p>U2 only includes T and U</p>",
        "id": 210925889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805918
    },
    {
        "content": "<p>etc</p>",
        "id": 210925891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805919
    },
    {
        "content": "<p>U0 is outside all the foralls, and so it includes only  the structs that the user declared (at least that's the general idea)</p>",
        "id": 210925936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805945
    },
    {
        "content": "<p>each (existential) type variable is placed into a universe, indicating what kinds of types it can name</p>",
        "id": 210925965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805963
    },
    {
        "content": "<p>(make sense so far?)</p>",
        "id": 210925979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600805972
    },
    {
        "content": "<p>So U0 is the outermost one, and U1 the innermost one?</p>",
        "id": 210926059,
        "sender_full_name": "detrumi",
        "timestamp": 1600806003
    },
    {
        "content": "<p>No</p>",
        "id": 210926127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806034
    },
    {
        "content": "<p>Relatively innermost, I think in this case <del>U2 (0-indexed)</del> U3 is the innermost</p>",
        "id": 210926132,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1600806037
    },
    {
        "content": "<p>U0 is the outermost (i.e., outside of all <code>forall</code>)</p>",
        "id": 210926150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806051
    },
    {
        "content": "<p>but each <code>forall</code> introduces a universe</p>",
        "id": 210926160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806056
    },
    {
        "content": "<p>what <span class=\"user-mention\" data-user-id=\"218805\">@Mark Drobnak</span> said sounds right :)</p>",
        "id": 210926188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218805\">@Mark Drobnak</span> it was right before, <code>U3</code> is the innermost</p>",
        "id": 210926243,
        "sender_full_name": "Areredify",
        "timestamp": 1600806108
    },
    {
        "content": "<p>U0 is implicitly always there</p>",
        "id": 210926258,
        "sender_full_name": "Areredify",
        "timestamp": 1600806120
    },
    {
        "content": "<p>So the purpose of canonicalization, to step back 1 sec, is to reduce \"equivalent\"queries into, well, a canonical form</p>",
        "id": 210926322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806144
    },
    {
        "content": "<p>i.e., to recognize when you have two queries that will have the same result</p>",
        "id": 210926334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806153
    },
    {
        "content": "<p>so e.g. <code>u32: PartialEq&lt;?T&gt;</code> and <code>u32: PartialEq&lt;?U&gt;</code> are equivalent, because it doesn't matter whether the unbound type variable is called <code>?T</code> or <code>?U</code></p>",
        "id": 210926379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806183
    },
    {
        "content": "<p>the thing is that the same thing applies to placeholders</p>",
        "id": 210926391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806189
    },
    {
        "content": "<p>all that matters is their relative universes, essentially</p>",
        "id": 210926402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806197
    },
    {
        "content": "<p>what we do with canonicalization is to kind of rename things to canonical names and maintain a mapping so we can map things back</p>",
        "id": 210926436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806213
    },
    {
        "content": "<p>and you can do the same with universes (and indeed chalk does so today, though it used to have a bug, which I think <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> we fixed, right?)</p>",
        "id": 210926470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806235
    },
    {
        "content": "<p>we did, we used to sometimes ignore inference var universes</p>",
        "id": 210926548,
        "sender_full_name": "Areredify",
        "timestamp": 1600806262
    },
    {
        "content": "<p><em>however</em>, we can do this in a better way, I think is roughly the motivation</p>",
        "id": 210926550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806263
    },
    {
        "content": "<p>or at least what I think is a better way :)</p>",
        "id": 210926566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806275
    },
    {
        "content": "<p>I'm trying to remember if there is further motivation within rustc</p>",
        "id": 210926587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806289
    },
    {
        "content": "<p>...skimming the <a href=\"http://rust-lang.github.io/chalk/chalk_ir/struct.Canonical.html\">chalk <code>Canonical</code> type</a> type... I guess there is no field for \"max universe'..</p>",
        "id": 210926683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806352
    },
    {
        "content": "<p>anyway, I thought maybe it's good to go back to the original example</p>",
        "id": 210926694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806359
    },
    {
        "content": "<p>since we've gone over the background</p>",
        "id": 210926752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-09-22/near/210925294\">said</a>:</p>\n<blockquote>\n<p>so e.g. if you have <code>Implemented(!U1: Trait)</code> -- the <code>!U1</code> here is a 'placeholder', and let's say it's in universe 1</p>\n</blockquote>",
        "id": 210926768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806374
    },
    {
        "content": "<p>That would be in <code>UCanonical</code> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 210926773,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600806376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-09-22/near/210925394\">said</a>:</p>\n<blockquote>\n<p>so you might have <code>Implemented(!U1: PartialEq&lt;!U3&gt;)</code>, and this would be canonicalized to yield the same value</p>\n</blockquote>",
        "id": 210926786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806384
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-ir/src/lib.rs#L2146\">https://github.com/rust-lang/chalk/blob/master/chalk-ir/src/lib.rs#L2146</a></p>",
        "id": 210926808,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600806393
    },
    {
        "content": "<p>ah, thanks!</p>",
        "id": 210926813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806395
    },
    {
        "content": "<p><a href=\"http://rust-lang.github.io/chalk/chalk_ir/struct.UCanonical.html\"><code>UCanonical</code></a>, for those who prefer rustdoc :)</p>",
        "id": 210926826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806405
    },
    {
        "content": "<p>In Chalk, these are split</p>",
        "id": 210926839,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600806420
    },
    {
        "content": "<p>In rustc, they  don't seem to be?</p>",
        "id": 210926849,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600806426
    },
    {
        "content": "<p>so let's say the example was <code>Implemented(!U5: PartialEq&lt;!U7&gt;)</code></p>",
        "id": 210926869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806444
    },
    {
        "content": "<p>i'm trying to come up with a good rule to show you why this might matter</p>",
        "id": 210926891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806461
    },
    {
        "content": "<p>I guess I need to make a more complex example, I think it comes up more often in the environment clauses</p>",
        "id": 210926975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806498
    },
    {
        "content": "<p>but basically the way the universes matter is like \"can some inference variable be equated with both types\" -- maybe we wind up with a variable that is only in universe 5</p>",
        "id": 210927048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806546
    },
    {
        "content": "<p>ok there is one other detail that matters</p>",
        "id": 210927102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806579
    },
    {
        "content": "<p>placeholders are identified not only by <em>universe</em> but by index</p>",
        "id": 210927117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806585
    },
    {
        "content": "<p>maybe this helps to show :)</p>",
        "id": 210927143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806597
    },
    {
        "content": "<p>imagine we have to prove <code>forall&lt;T, U&gt; { T: PartialEq&lt;U&gt; }</code></p>",
        "id": 210927205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806606
    },
    {
        "content": "<p>this ought to be the same, presumably, as <code>forall&lt;U, T&gt; { T: PartialEq&lt;U&gt; }</code></p>",
        "id": 210927230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806615
    },
    {
        "content": "<p>the way we actually handle this in chalk is that we'd introduce one universe, with two placeholders in it</p>",
        "id": 210927307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806654
    },
    {
        "content": "<p>they'd be identified like <code>!U1.0</code> and <code>!U1.1</code></p>",
        "id": 210927322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806662
    },
    {
        "content": "<p>so those two goals would wind up looking different:</p>\n<ul>\n<li><code>!U1.0: PartialEq&lt;!U1.1&gt;</code></li>\n<li><code>!U1.1: PartialEq&lt;!U1.0&gt;</code></li>\n</ul>",
        "id": 210927374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806691
    },
    {
        "content": "<p>universe canonicalization by itself can't fix this</p>",
        "id": 210927394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806701
    },
    {
        "content": "<p>there is only one universe, and it's got the canonical number :)</p>",
        "id": 210927404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806707
    },
    {
        "content": "<p>what we would probably <em>like</em> is to renumber them in the order of appearance, the same way we do with existential variables</p>",
        "id": 210927424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806720
    },
    {
        "content": "<p>that is, we need to preserve the relative universe, and we need to preserve the fact that these were two distinct placeholders, but we don't need to preserve their original universes/names</p>",
        "id": 210927526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806755
    },
    {
        "content": "<p>Yes, but how do you define \"order of appearance\"? Just by walking the type?</p>",
        "id": 210927535,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600806761
    },
    {
        "content": "<p>Yes</p>",
        "id": 210927541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806766
    },
    {
        "content": "<p>that's what we do with canonicalization now</p>",
        "id": 210927548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806769
    },
    {
        "content": "<p>the order is arbitrary, it just needs to be consistent</p>",
        "id": 210927581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806785
    },
    {
        "content": "<p>today, we walk the type, and when we encounter inference variables, we add things into the \"canonical binder\"</p>",
        "id": 210927646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806817
    },
    {
        "content": "<p>the idea is basically to extend that also to placeholders</p>",
        "id": 210927656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806823
    },
    {
        "content": "<p>there is an added benefit there --</p>",
        "id": 210927673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806831
    },
    {
        "content": "<p>now the canonical form of that goal above would be <code>^0: PartialEq&lt;^1&gt;</code> where <code>^0</code> and <code>^1</code> are bound variables referring into the canonical binder (which would indicate that they are universally bound in index 1)</p>",
        "id": 210927778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806867
    },
    {
        "content": "<p>the nice benefit is that \"universe canonicalization\" can be done now by just looking at the binder</p>",
        "id": 210927803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806882
    },
    {
        "content": "<p>and doesn't need to walk the canonical term itself</p>",
        "id": 210927822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806889
    },
    {
        "content": "<p>because any placeholders in there are now bound variables</p>",
        "id": 210927841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806900
    },
    {
        "content": "<p>(term = PL jargon, it just means \"the type/goal/whatever that was canonicalized\")</p>",
        "id": 210927868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600806913
    },
    {
        "content": "<p>Okay, so, this sounds reasonable</p>",
        "id": 210928037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600806993
    },
    {
        "content": "<p>Would there be any reason we <em>don't</em> want to canonicalize placeholders?</p>",
        "id": 210928078,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600807014
    },
    {
        "content": "<p>I can't really think of one to be honest</p>",
        "id": 210928093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807021
    },
    {
        "content": "<p>I'm trying to remember why we did it for rustc</p>",
        "id": 210928101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807025
    },
    {
        "content": "<p>So is this case just not handled today? How are things working? :)</p>",
        "id": 210928102,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1600807025
    },
    {
        "content": "<p>Yeah, today they're just canonicalized to different terms</p>",
        "id": 210928125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807035
    },
    {
        "content": "<p>so we just get less caching</p>",
        "id": 210928129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807038
    },
    {
        "content": "<p>Ok, so this would avoid the duplicate work that is currently going on</p>",
        "id": 210928163,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1600807056
    },
    {
        "content": "<p>in rustc it <em>does</em> canonicalize placeholders, which is either because I realized the stuff above, or because something about the interning setup kind of forced me into it :)</p>",
        "id": 210928186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807067
    },
    {
        "content": "<p>yes, to be clear, I don't know that it's super cricitical. It would also make \"universe canonicalization\" more efficient</p>",
        "id": 210928257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807087
    },
    {
        "content": "<p>so now for the real question then</p>",
        "id": 210928270,
        "sender_full_name": "Areredify",
        "timestamp": 1600807096
    },
    {
        "content": "<p>one other thing--</p>",
        "id": 210928272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807096
    },
    {
        "content": "<p>you don't <em>always</em> want to canonicalize universes,</p>",
        "id": 210928284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807101
    },
    {
        "content": "<p>but that's really because there are two sort of \"directions\" for canonicalizing</p>",
        "id": 210928305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807115
    },
    {
        "content": "<p>when you are canonicalizing the <em>query</em> (the goal you are trying to solve)</p>",
        "id": 210928321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807122
    },
    {
        "content": "<p>versus the <em>answer</em> for that query (which wants to refer to universes etc from the query)</p>",
        "id": 210928333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807131
    },
    {
        "content": "<p>so e.g. if the query is like <code>(!U1, !U2, !U3, ?X): Foo</code> and the answer is <code>?X = (!U1, !U3)</code></p>",
        "id": 210928367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807164
    },
    {
        "content": "<p>you can't canonicalize that answer to <code>(!U1, !U2)</code>, that's just nonsense</p>",
        "id": 210928384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807173
    },
    {
        "content": "<p>sorry that's a very weird example, not a realistic trait at all</p>",
        "id": 210928404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807186
    },
    {
        "content": "<p>Hmm</p>",
        "id": 210928439,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600807202
    },
    {
        "content": "<p>The canonical answer wouldn't be able to flatten !U3 to !U2 because the query includes 1-3, right?</p>",
        "id": 210928479,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1600807214
    },
    {
        "content": "<p>(that's my naive thought)</p>",
        "id": 210928492,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1600807222
    },
    {
        "content": "<p>oh yeah, I was hung up on answer unification in my canonicalization branch</p>",
        "id": 210928533,
        "sender_full_name": "Areredify",
        "timestamp": 1600807254
    },
    {
        "content": "<p>among other things</p>",
        "id": 210928542,
        "sender_full_name": "Areredify",
        "timestamp": 1600807259
    },
    {
        "content": "<p>(also, time check, we're at 20 minutes left. We should probably talk about canonical vs instantiated program clauses)</p>",
        "id": 210928560,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600807269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218805\">@Mark Drobnak</span> right</p>",
        "id": 210928629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807320
    },
    {
        "content": "<p>basically the answer is referring back to parts from the query</p>",
        "id": 210928673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807326
    },
    {
        "content": "<p>so there is a bit difference between saying U1, U3 and U1, U2</p>",
        "id": 210928684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807335
    },
    {
        "content": "<p>like if the query was like <code>(A, B, C, ?D)</code>, and we are asking what is <code>?D</code>, is matters if the answer is <code>(A, C)</code> or <code>(A, B)</code></p>",
        "id": 210928710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807353
    },
    {
        "content": "<p>really canonicalization only barely makes sense on the answer anyway</p>",
        "id": 210928744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807370
    },
    {
        "content": "<p>we use it because it's the way we \"traverse\" answers from one inference context to another,</p>",
        "id": 210928773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807385
    },
    {
        "content": "<p>and because answers can sometimes introduce bound variables</p>",
        "id": 210928781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807393
    },
    {
        "content": "<p>e.g., imagine, <code>impl&lt;A, B&gt; SomeTrait&lt;(A, B)&gt; for u32</code> and you ask <code>u32: SomeTrait&lt;?X&gt;</code></p>",
        "id": 210928821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807426
    },
    {
        "content": "<p>the answer is going to be <code>?X = (?Y, ?Z)</code> for some fresh variables <code>?Y</code> and <code>?Z</code></p>",
        "id": 210928830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807436
    },
    {
        "content": "<p>Okay</p>",
        "id": 210929020,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600807546
    },
    {
        "content": "<p>so</p>",
        "id": 210929025,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600807547
    },
    {
        "content": "<p>Program clauses?</p>",
        "id": 210929036,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600807556
    },
    {
        "content": "<p>yeah, I dont' quite understand what that topic is about</p>",
        "id": 210929086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807573
    },
    {
        "content": "<p>oh right</p>",
        "id": 210929094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807579
    },
    {
        "content": "<p>I forgot :)</p>",
        "id": 210929105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807587
    },
    {
        "content": "<p>so as part of solving a goal we have to ask the database for \"all possibly relevant program clauses\"</p>",
        "id": 210929148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807621
    },
    {
        "content": "<p>and the question is whether we ask that question by supplying a <em>canonical form of the goal</em></p>",
        "id": 210929164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807631
    },
    {
        "content": "<p>or an <em>instantiated one</em></p>",
        "id": 210929171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807635
    },
    {
        "content": "<p>in particular, if we do the latter, then the bound variables in the canonical form will be replaced with existential or placeholder inference variables?</p>",
        "id": 210929196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807650
    },
    {
        "content": "<p>right now recursive solver supplies canonical form, and the SLG solver uses instantiated form</p>",
        "id": 210929230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807676
    },
    {
        "content": "<p>is that the case?</p>",
        "id": 210929259,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600807683
    },
    {
        "content": "<p>Or is it the other way around</p>",
        "id": 210929295,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600807688
    },
    {
        "content": "<p>that is the case unless something changed</p>",
        "id": 210929306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807697
    },
    {
        "content": "<p>I think that's right</p>",
        "id": 210929314,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1600807700
    },
    {
        "content": "<p>which would surprise me</p>",
        "id": 210929317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807701
    },
    {
        "content": "<p>yes</p>",
        "id": 210929354,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600807722
    },
    {
        "content": "<p>using the canoncial form revealed several cases that I would call bugs in the original code</p>",
        "id": 210929356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807723
    },
    {
        "content": "<p>the original code could cheat a little a bit</p>",
        "id": 210929366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807729
    },
    {
        "content": "<p>that is to say, when using the instantiated form, you can cheat</p>",
        "id": 210929384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-09-22/near/210929196\">said</a>:</p>\n<blockquote>\n<p>in particular, if we do the latter, then the bound variables in the canonical form will be replaced with existential or placeholder inference variables?</p>\n</blockquote>\n<p>what do you mean, placeholder bound vars would get instantiated to placeholder vars, inference bound vars to inference vars</p>",
        "id": 210929440,
        "sender_full_name": "Areredify",
        "timestamp": 1600807783
    },
    {
        "content": "<p>in particular, if you had a goal like <code>Implemented(?T: Clone)</code> (say), you could generate a program clause that referred directly to this instantiated variable <code>?T</code> -- e.g., <code>Implemented(?T: Clone) :- Implemented(?T: Copy)</code></p>",
        "id": 210929445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807785
    },
    {
        "content": "<p>I think we did this for supertraits, in particular</p>",
        "id": 210929451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"251766\">Areredify</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-09-22/near/210929440\">said</a>:</p>\n<blockquote>\n<p>what do you mean, placeholder bound vars would get instantiated to placeholder vars, inference bound vars to inference vars</p>\n</blockquote>\n<p>this is what I meant</p>",
        "id": 210929514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807807
    },
    {
        "content": "<p>oh ok</p>",
        "id": 210929548,
        "sender_full_name": "Areredify",
        "timestamp": 1600807829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-09-22/near/210929445\">said</a>:</p>\n<blockquote>\n<p>in particular, if you had a goal like <code>Implemented(?T: Clone)</code> (say), you could generate a program clause that referred directly to this instantiated variable <code>?T</code> -- e.g., <code>Implemented(?T: Clone) :- Implemented(?T: Copy)</code></p>\n</blockquote>\n<p>what we do now instead is to generate a program clause like</p>\n<div class=\"codehilite\"><pre><span></span><code>forall&lt;X&gt; {\n    Implemented(X: Clone) :- Implemented(X: Copy)\n}\n</code></pre></div>\n\n\n<p>(actually it's <code>FromEnv</code>, I realize, but that's orthogonal)</p>",
        "id": 210929587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807861
    },
    {
        "content": "<p>the point is, we generate program clauses that have no \"free variables\" (and don't name inference variables)</p>",
        "id": 210929617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807878
    },
    {
        "content": "<p>that's really what we want, I think</p>",
        "id": 210929624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807882
    },
    {
        "content": "<p>at least it fits my expectation, which is that these program clauses are things that conceivably could have been written into some program, independent of any particular goal that is being solved</p>",
        "id": 210929665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807907
    },
    {
        "content": "<p>(in some cases, we may generate an open-ended set of such rules, which <em>does</em> use information from the goal, but that's just because there could be infinitely many of them)</p>",
        "id": 210929735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807929
    },
    {
        "content": "<p>anyway I kind of think it's better to generate with the bound form I guess in part because it lets you figure out what rules might apply before you do the work of instantiating; I'm not sure what the downside is -- one of them is that, if we implement placeholder canonicalization, then the code has to do carry along the canonical information so it can tell if a bound variable is a universal or existential variable</p>",
        "id": 210929811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600807981
    },
    {
        "content": "<p>(definitely writing the code to work <em>both</em> ways is annoying)</p>",
        "id": 210929844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600808001
    },
    {
        "content": "<p>Are there other downsides?</p>",
        "id": 210929850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600808011
    },
    {
        "content": "<p>I think that's the big one?</p>",
        "id": 210929882,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600808032
    },
    {
        "content": "<p>that does admittedly sound kind of annoying :)</p>",
        "id": 210929941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600808052
    },
    {
        "content": "<p>Would it be slightly less efficient, since you need to 'instantiate' the program clause, instead of directly using it?</p>",
        "id": 210929947,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600808054
    },
    {
        "content": "<p>that's already true</p>",
        "id": 210929956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600808062
    },
    {
        "content": "<p>I don't know if that's actually a measurable difference</p>",
        "id": 210929959,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1600808064
    },
    {
        "content": "<p>but I guess the point is that in this <em>particular</em> example you wouldn't have had to, since there wouldn't be bound things</p>",
        "id": 210929991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600808079
    },
    {
        "content": "<p>yeah, I don't know, maybe. the code is also a bit more complex to generate the proper answer.</p>",
        "id": 210930001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600808087
    },
    {
        "content": "<p>one thing is that I would really like to be caching this work of generating program clauses</p>",
        "id": 210930025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600808102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-09-22/near/210929587\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-09-22/near/210929445\">said</a>:</p>\n<blockquote>\n<p>in particular, if you had a goal like <code>Implemented(?T: Clone)</code> (say), you could generate a program clause that referred directly to this instantiated variable <code>?T</code> -- e.g., <code>Implemented(?T: Clone) :- Implemented(?T: Copy)</code></p>\n</blockquote>\n<p>what we do now instead is to generate a program clause like</p>\n<div class=\"codehilite\"><pre><span></span><code>forall&lt;X&gt; {\n    Implemented(X: Clone) :- Implemented(X: Copy)\n}\n</code></pre></div>\n\n\n<p>(actually it's <code>FromEnv</code>, I realize, but that's orthogonal)</p>\n</blockquote>\n<p>don't we break that assumption with builtin traits impls?</p>",
        "id": 210930047,
        "sender_full_name": "Areredify",
        "timestamp": 1600808119
    },
    {
        "content": "<p>which also argues (maybe) in favor of canonical form? or maybe it makes no difference</p>",
        "id": 210930051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600808121
    },
    {
        "content": "<p>I think this is actually the problem I was running into when I attempted the placeholder canonicalization</p>",
        "id": 210930052,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600808121
    },
    {
        "content": "<p>not assumption, but the \"generate rules that can be pasted into the program\" thing</p>",
        "id": 210930176,
        "sender_full_name": "Areredify",
        "timestamp": 1600808170
    },
    {
        "content": "<p>Aside, did anyone (me?) actually <em>try</em> making SLG use canonical goal for program clauses?</p>",
        "id": 210930191,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600808182
    },
    {
        "content": "<p>(I've got to go, maybe we can continue this async/next week?)</p>",
        "id": 210930220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600808203
    },
    {
        "content": "<p>I can catch up if folks keep chatting though</p>",
        "id": 210930232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600808212
    },
    {
        "content": "<p>Well, let's talk async as needed</p>",
        "id": 210930304,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600808254
    },
    {
        "content": "<p>if we come up with anything, we discuss at the beginning of next week</p>",
        "id": 210930334,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600808269
    },
    {
        "content": "<p>otherwise, we can discussed <code>WellFormed</code> next week?</p>",
        "id": 210930352,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600808278
    }
]