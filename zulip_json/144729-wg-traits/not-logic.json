[
    {
        "content": "<p>I am not sure if this has been already discussed or not, but I have been thinking about this for a long time and with all the work on Chalk, I think this is possible now.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Z</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">B</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204632339,
        "sender_full_name": "pksunkara",
        "timestamp": 1595396884
    },
    {
        "content": "<p>And also other logics in the where condition</p>",
        "id": 204632353,
        "sender_full_name": "pksunkara",
        "timestamp": 1595396928
    },
    {
        "content": "<p>I believe this has been discussed before, this might be useful: <a href=\"https://github.com/rust-lang/rust/issues/42721\">https://github.com/rust-lang/rust/issues/42721</a></p>",
        "id": 204695636,
        "sender_full_name": "Bram van den Heuvel",
        "timestamp": 1595438355
    },
    {
        "content": "<p>Yup, I read that one. That's where I realized that it's not supported. Specialization doesn't help some use cases too. I think the next steps if we want to have something like this is to add it in chalk. I am just asking the contributors opinions here. cc <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 204810891,
        "sender_full_name": "pksunkara",
        "timestamp": 1595517348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254853\">@pksunkara</span> are you asking is this possible in Chalk or rustc?</p>",
        "id": 204824077,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595523498
    },
    {
        "content": "<p>So, in Chalk</p>",
        "id": 204824187,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595523553
    },
    {
        "content": "<p>this I think would heavily rely on negative goals</p>",
        "id": 204824210,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595523568
    },
    {
        "content": "<p>and then runs the risk of negative cycles</p>",
        "id": 204824222,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595523575
    },
    {
        "content": "<p>which we currently don't handle in slg</p>",
        "id": 204824262,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595523594
    },
    {
        "content": "<p>and recursive solver is in limbo</p>",
        "id": 204824322,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595523603
    },
    {
        "content": "<p>For it to be implemented in rustc it would need to be implemented in chalk first since we are aiming for chalk to be the main trait solver in rustc</p>",
        "id": 204826228,
        "sender_full_name": "pksunkara",
        "timestamp": 1595524589
    },
    {
        "content": "<p>So yeah I was asking about the possibility of this in chalk first</p>",
        "id": 204826248,
        "sender_full_name": "pksunkara",
        "timestamp": 1595524605
    },
    {
        "content": "<p>Yeah, honestly this is more of t-lang/RFC territory. There is a question of whether or not this <em>could</em> be implemented in Chalk and/or what it would take. But the bigger question is whether this would be or should be part of the rust lang</p>",
        "id": 204827562,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595525394
    },
    {
        "content": "<p>The real question is what <code>!</code> means</p>",
        "id": 205626580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596221014
    },
    {
        "content": "<p>In particular, if <code>T: !Foo</code> means \"there isn't currently an impl of <code>Foo</code> for <code>T</code>\", I see that as a non-starter, both because it means we'd have general purpose negative goals and in particular cyclic goals, and because of semver</p>",
        "id": 205626740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596221075
    },
    {
        "content": "<p>But there's an alternative world where people can write negative impls</p>",
        "id": 205626764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596221083
    },
    {
        "content": "<p>And in that case <code>T: !Foo</code> means <em>there is an explicit negative impl</em></p>",
        "id": 205626780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596221090
    },
    {
        "content": "<p>And coherence has the job of proving that all positive and negative impls are disjoint</p>",
        "id": 205626818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596221106
    },
    {
        "content": "<p>That I think works reasonably well</p>",
        "id": 205626835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596221111
    },
    {
        "content": "<p>and it means that \"negative goals\" in Rust's surface syntax are actually <em>positive goals</em> in the desugaring (a positive goal proving <code>!Foo</code>)</p>",
        "id": 205626893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596221134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/not-logic/near/205626780\">said</a>:</p>\n<blockquote>\n<p>And in that case <code>T: !Foo</code> means <em>there is an explicit negative impl</em></p>\n</blockquote>\n<p>I don't quite understand how this is different than the previous</p>",
        "id": 205629759,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596222652
    },
    {
        "content": "<p>Or I guess, I don't understand how <em>this</em> doesn't have problems with cyclic and semver</p>",
        "id": 205629784,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596222674
    },
    {
        "content": "<p>the idea is that we would NOT translate a predicate like <code>T: !Foo</code> into <code>not { Implemented(T: Foo) }</code></p>",
        "id": 205637454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226890
    },
    {
        "content": "<p>but rather into <code>NotImplemented(T: Foo)</code></p>",
        "id": 205637471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226901
    },
    {
        "content": "<p>and then if you have a <code>impl !Foo for u32</code></p>",
        "id": 205637477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226906
    },
    {
        "content": "<p>that would generate a program clause like <code>NotImplemented(u32: Foo)</code></p>",
        "id": 205637487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226917
    },
    {
        "content": "<p>but if you don't have such an impl, say for <code>i32</code>, then <code>i32: !Foo</code> is not provable</p>",
        "id": 205637544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226935
    },
    {
        "content": "<p>so the <code>!</code> syntax in Rust would not correspond to <code>not { G }</code> goals in chalk</p>",
        "id": 205637605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596226983
    },
    {
        "content": "<p>would this basically be like a <code>NotFoo</code> trait whose only connection to <code>Foo</code> is through coherence?</p>",
        "id": 205637863,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596227117
    },
    {
        "content": "<p>yes</p>",
        "id": 205638023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596227215
    }
]