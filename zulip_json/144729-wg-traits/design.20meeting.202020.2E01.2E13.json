[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 185524101,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578941652
    },
    {
        "content": "<p>Bit early</p>",
        "id": 185524110,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578941659
    },
    {
        "content": "<p>But, let's figure out what we want to talk about today?</p>",
        "id": 185524120,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578941670
    },
    {
        "content": "<p>I was just pondering that</p>",
        "id": 185524198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578941717
    },
    {
        "content": "<p>So, one thing I was thinking about</p>",
        "id": 185524244,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578941733
    },
    {
        "content": "<p>Was <code>impl Trait</code></p>",
        "id": 185524259,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578941737
    },
    {
        "content": "<p>So, we removed <code>Opaque</code></p>",
        "id": 185524273,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578941750
    },
    {
        "content": "<p>In favor of <code>Alias</code></p>",
        "id": 185524290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578941758
    },
    {
        "content": "<p>But, a bit confused with this</p>",
        "id": 185524340,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578941767
    },
    {
        "content": "<p>We could also discuss how we might want to handle yielding in the middle of solving</p>",
        "id": 185524433,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578941821
    },
    {
        "content": "<p>I've been thinking about the strategy for migrating and developing chalk. I've been thining in particular that it makes sense to be doing two things:</p>\n<ul>\n<li>modifying rustc to bring it closer to chalk</li>\n<li>extending chalk's capabilities and integrating it with rustc</li>\n</ul>\n<p>I was curious to discuss the first bullet point a bit in particular.</p>\n<p>The second I think can be useful in part to help in validating chalk's role as a definitive semantics for Rust's trait system, as much as anything else.</p>",
        "id": 185524460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578941838
    },
    {
        "content": "<p>(does the design of my PR make sense, or do we want to do something else, basically)</p>",
        "id": 185524464,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578941842
    },
    {
        "content": "<blockquote>\n<p>But, a bit confused with this</p>\n</blockquote>\n<p>we could discuss it, sure</p>",
        "id": 185524472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578941847
    },
    {
        "content": "<p>I've also been starting to write up some chalk goals: <a href=\"https://hackmd.io/VeMmXIYBRu2KdYbJDIpcFA?both\" target=\"_blank\" title=\"https://hackmd.io/VeMmXIYBRu2KdYbJDIpcFA?both\">https://hackmd.io/VeMmXIYBRu2KdYbJDIpcFA?both</a></p>",
        "id": 185524490,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578941863
    },
    {
        "content": "<p>kind of rough write now</p>",
        "id": 185524497,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578941868
    },
    {
        "content": "<blockquote>\n<p>We could also discuss how we might want to handle yielding in the middle of solving</p>\n</blockquote>\n<p>ok, I didn't get a chance to look too closely at your PR yet but we could talk it over</p>",
        "id": 185524500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578941869
    },
    {
        "content": "<p>but mostly breaking them down into categories</p>",
        "id": 185524514,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578941877
    },
    {
        "content": "<blockquote>\n<ul>\n<li>modifying rustc to bring it closer to chalk</li>\n</ul>\n</blockquote>\n<p>This is interesting to me, but I wouldn't be able to say much</p>",
        "id": 185524605,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578941915
    },
    {
        "content": "<p>I spent some time filling out <a href=\"https://github.com/rust-lang/wg-traits/projects\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-traits/projects\">https://github.com/rust-lang/wg-traits/projects</a> earlier --</p>",
        "id": 185524694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578941956
    },
    {
        "content": "<p>(nothing since last week)</p>",
        "id": 185524741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578941982
    },
    {
        "content": "<p>Do we want to use that \"chalk development\" project there? Or make one in <code>rust-lang/chalk</code></p>",
        "id": 185524782,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942002
    },
    {
        "content": "<p>but one thing I was thinking of doing today is trying to fill out a few more such goals and brain dump in steps along the way</p>",
        "id": 185524807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942003
    },
    {
        "content": "<blockquote>\n<p>Do we want to use that \"chalk development\" project there? Or make one in <code>rust-lang/chalk</code></p>\n</blockquote>\n<p>a good question</p>",
        "id": 185524865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942023
    },
    {
        "content": "<p>I guess it depends how much \"interaction\" we expect perhaps</p>",
        "id": 185524898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942041
    },
    {
        "content": "<p>interaction with rustc you mean?</p>",
        "id": 185524966,
        "sender_full_name": "detrumi",
        "timestamp": 1578942074
    },
    {
        "content": "<p>one of the questions this group has wrestled with a lot is figuring out its scope</p>",
        "id": 185524981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942079
    },
    {
        "content": "<p>I personally feel like, unless there are cross-project concerns, it would be best in <code>rust-lang/chalk</code></p>",
        "id": 185524995,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942088
    },
    {
        "content": "<p>(well I meant like \"is the focus just on chalk\" or does it encompass rustc, and how much would we expect people to go back and forth between them)</p>",
        "id": 185525036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942104
    },
    {
        "content": "<p>I guess I don't care too much which place we put things</p>",
        "id": 185525167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942150
    },
    {
        "content": "<p>(I wonder how easy it is to move)</p>",
        "id": 185525171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942154
    },
    {
        "content": "<p>hmm, can you even move projects? not sure</p>",
        "id": 185525209,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942177
    },
    {
        "content": "<p>I think you cannot</p>",
        "id": 185525230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942188
    },
    {
        "content": "<p>at least I don't see an obvious way</p>",
        "id": 185525239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942192
    },
    {
        "content": "<blockquote>\n<p>I personally feel like, unless there are cross-project concerns, it would be best in <code>rust-lang/chalk</code></p>\n</blockquote>\n<p>I agree this is where I would naively expect things to be</p>",
        "id": 185525252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942203
    },
    {
        "content": "<p>anyways, it's 2:03, maybe we should start with a sync-up?</p>",
        "id": 185525254,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942205
    },
    {
        "content": "<p>yes</p>",
        "id": 185525258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942209
    },
    {
        "content": "<p>well, for me, last week somehow got very full, and I spent most of my \"trait related\" time pondering <a href=\"https://github.com/rust-lang/rust/issues/57893\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57893\">#57893</a>, a soundness bug</p>",
        "id": 185525315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942241
    },
    {
        "content": "<p>I think the work on that plausibly falls under this group, if we take the more expansive definition :)</p>",
        "id": 185525368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942251
    },
    {
        "content": "<p>I haven't looked at that in a while</p>",
        "id": 185525395,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942271
    },
    {
        "content": "<p>but I remember it</p>",
        "id": 185525413,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942283
    },
    {
        "content": "<p>As for me, I made a PR to refactor the test infra a bit</p>",
        "id": 185525454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942309
    },
    {
        "content": "<p>I did some reviewing or PRs and I am contemplating in particular <a href=\"https://github.com/rust-lang/rust/pull/67717\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67717\">https://github.com/rust-lang/rust/pull/67717</a> and optimization of canonicalization, which I need to follow up with <span class=\"user-mention\" data-user-id=\"224180\">@Ben Lewis</span> about (probably)</p>",
        "id": 185525461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942310
    },
    {
        "content": "<p>(<a href=\"https://github.com/rust-lang/chalk/pull/317\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/317\">https://github.com/rust-lang/chalk/pull/317</a>)</p>",
        "id": 185525480,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942320
    },
    {
        "content": "<p>Also, been looking at some of the rust-analyzer reported issues</p>",
        "id": 185525512,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942343
    },
    {
        "content": "<p>I have different different branches for <a href=\"https://github.com/rust-lang/chalk/issues/301\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/301\">rust-lang/chalk#301</a></p>",
        "id": 185525575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942363
    },
    {
        "content": "<p>And I started with the renaming to Alias, though in some places it wasn't really clear whether other kinds of aliases weren't implemented yet or whether they will be handled like associated types</p>",
        "id": 185525598,
        "sender_full_name": "detrumi",
        "timestamp": 1578942383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> glad you're here. definitely I think we should discuss this</p>",
        "id": 185525633,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942411
    },
    {
        "content": "<p>yeah, I was going to say the same thing</p>",
        "id": 185525660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942443
    },
    {
        "content": "<p>Let's start with that?</p>",
        "id": 185525664,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942451
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 185525670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942455
    },
    {
        "content": "<p>Sure</p>",
        "id": 185525677,
        "sender_full_name": "detrumi",
        "timestamp": 1578942461
    },
    {
        "content": "<p>If we have time later, we can get into the rust-analyzer issues</p>",
        "id": 185525678,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942461
    },
    {
        "content": "<p>But anyways, I was looking into how to maybe reimplement <code>impl Trait</code></p>",
        "id": 185525692,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942480
    },
    {
        "content": "<p>So, in terms of aliases, rust has 3 notion of aliases. Each is handled somewhat differently in rustc but have a lot of similarities</p>",
        "id": 185525750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942498
    },
    {
        "content": "<p>And I think maybe I'm not understanding what we expect <code>Alias</code> to be correctly</p>",
        "id": 185525770,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942509
    },
    {
        "content": "<p>Right, like commented here: <a href=\"https://github.com/rust-lang/chalk/pull/320/files#diff-9cded8099833735b25a53f395aa7f9f3R262\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/320/files#diff-9cded8099833735b25a53f395aa7f9f3R262\">https://github.com/rust-lang/chalk/pull/320/files#diff-9cded8099833735b25a53f395aa7f9f3R262</a></p>",
        "id": 185525794,
        "sender_full_name": "detrumi",
        "timestamp": 1578942532
    },
    {
        "content": "<p>yes</p>",
        "id": 185525805,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942542
    },
    {
        "content": "<p>though, <code>impl Trait</code> doesn't really seem to fit the others</p>",
        "id": 185525824,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942560
    },
    {
        "content": "<p>well so</p>",
        "id": 185525882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942599
    },
    {
        "content": "<p>Namely, the associated type and <code>type XXX = ...</code> essentially points to another type</p>",
        "id": 185525928,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942603
    },
    {
        "content": "<p>it really does :)</p>",
        "id": 185525934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942605
    },
    {
        "content": "<p>Isn't that <code>&lt;T as Trait&gt;::...</code>? (just a guess)</p>",
        "id": 185525939,
        "sender_full_name": "detrumi",
        "timestamp": 1578942610
    },
    {
        "content": "<p>(a type function, you said another time)</p>",
        "id": 185525943,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942612
    },
    {
        "content": "<p>or at least I think it does</p>",
        "id": 185525945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942614
    },
    {
        "content": "<p>so, here is why</p>",
        "id": 185525961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> maybe want to elaborate and I'll wait a bit</p>",
        "id": 185525966,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578942627
    },
    {
        "content": "<p>to start, I'm talking here about the \"opaque\" view of an <code>impl Trait</code></p>",
        "id": 185526001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942648
    },
    {
        "content": "<p>that is, I'm not talking about the logic to figure out what the hidden type is</p>",
        "id": 185526010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942654
    },
    {
        "content": "<p>but more about what happens when you use a <code>fn foo() -&gt; impl trait</code> (or whatever) \"from the outside\"</p>",
        "id": 185526035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942665
    },
    {
        "content": "<p>in that case, we are really always dealing with a placeholder type</p>",
        "id": 185526063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942686
    },
    {
        "content": "<p>where the only things we know are (a) the declared trait bounds and (b) we also have to think about auto-trait leakage :)</p>",
        "id": 185526098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942710
    },
    {
        "content": "<p>let's assume for a moment we know the hidden type</p>",
        "id": 185526155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942728
    },
    {
        "content": "<p>sorry, let's assume we are rustc, and we know the hidden type</p>",
        "id": 185526158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942736
    },
    {
        "content": "<p>we want to generate rules for chalk to use for proving bounds and things</p>",
        "id": 185526205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942769
    },
    {
        "content": "<p>so given say a <code>type Foo = impl A + B+ C; // hidden type T0</code></p>",
        "id": 185526248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942794
    },
    {
        "content": "<p>and given some kind of chalk type representing an \"alias placeholder\", let's call it <code>!Foo</code></p>",
        "id": 185526286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942818
    },
    {
        "content": "<p>then we might make rules like</p>",
        "id": 185526290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942825
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Implemented(!Foo: A)\nImplemented(!Foo: B)\nImplemented(!Foo: C)\nImplemented(!Foo: Send) :- Implemented(T0 : Send)\n</pre></div>",
        "id": 185526349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942844
    },
    {
        "content": "<p>the more general case would be something like: </p>\n<p><code>Implemented(!Foo: Trait)</code> where <code>!Foo</code> is some \"impl trait alias placeholder\"</p>\n<ul>\n<li>if <code>Trait</code> is an auto-trait, we make a rule <code>Implemented(!Foo: Trait) :- Implemented(T0: Trait)</code></li>\n<li>otherwise, we generate rules from the bounds (which are useless if <code>Trait</code> doesn't appear among them)</li>\n</ul>",
        "id": 185526393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578942880
    },
    {
        "content": "<p>this makes sense</p>",
        "id": 185526624,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578943005
    },
    {
        "content": "<p>but not necessarily how it fits <code>Alias</code> (or how that's the \"same\" as an associated type)</p>",
        "id": 185526651,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578943025
    },
    {
        "content": "<p>the three sorts of aliases I see are:</p>\n<ul>\n<li>\n<p>type aliases (<code>type Foo = Bar</code>)<br>\n    * these can always be \"converted\" from <code>Foo</code> to <code>Bar</code>, so there isn't really a need for a \"placeholder\" form</p>\n</li>\n<li>\n<p>associated types (<code>&lt;T as Trait&gt;::Bar</code>)<br>\n    * these can be converted into another type by finding an impl, if we can find one, so we might need a placeholder<br>\n    * if we need a placeholder, then <code>trait Trait { type Bar: Bounds; }</code> the <code>Bounds</code> there are things we know about it</p>\n</li>\n<li>\n<p>opaque impl trait types (<code>type Foo = impl Bar</code>)<br>\n    * these can be converted from <code>Foo</code> to <code>Bar</code> only when in <code>Reveal</code> mode (during codegen), so we often need placeholders<br>\n    * if we need a placeholder, then <code>impl Bar</code> plus auto-traits tells us what we know about it</p>\n</li>\n</ul>",
        "id": 185526721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943070
    },
    {
        "content": "<p>I see the three as  behaving very similarly in that:</p>\n<ul>\n<li>when you try to equate them, you generate a goal for <code>AliasEq</code></li>\n</ul>\n<p>but the rules we use to satisfy this goal will depend on the kind of alias</p>",
        "id": 185526832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943116
    },
    {
        "content": "<ul>\n<li>when you have the placeholder type, at least, the bounds for it will come from the definition</li>\n</ul>",
        "id": 185526899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943150
    },
    {
        "content": "<p>that said, I remember that initially I was hoping to have only one alias type, and to know from context  if it was a placeholder or not (as rustc does)</p>",
        "id": 185526918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943163
    },
    {
        "content": "<p>however, I convinced myself that was not viable, and we would need distinct placeholder types</p>",
        "id": 185526929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943172
    },
    {
        "content": "<blockquote>\n<p>but not necessarily how it fits <code>Alias</code> (or how that's the \"same\" as an associated type)</p>\n</blockquote>\n<p>I guess I would say that it doesn't necessarily <em>have</em> to be grouped together -- we could make more cases -- but the way we  <em>had</em> implemented it, where the bounds were part of the type, was not correct</p>",
        "id": 185527024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943214
    },
    {
        "content": "<p>i.e., it's not like <code>dyn</code></p>",
        "id": 185527034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943219
    },
    {
        "content": "<p>impl trait values have to have a def-id they are based off of</p>",
        "id": 185527054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943233
    },
    {
        "content": "<p>so that we can generate the \"auto trait\" rules etc</p>",
        "id": 185527065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943244
    },
    {
        "content": "<p>and because with <code>type Foo = impl Trait; type Bar = impl Trait;</code>, <code>Foo</code> and <code>Bar</code> are not the same type</p>",
        "id": 185527090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943260
    },
    {
        "content": "<p>Not sure I understand; would that mean <code>AliasTy</code> would become an enum to hold that def-id?</p>",
        "id": 185527248,
        "sender_full_name": "detrumi",
        "timestamp": 1578943337
    },
    {
        "content": "<p>On a related note, one of the things I've been thinking about with the type transition is that we should try to move rustc and chalk closer together by refactoring them both. so e.g. chalk has far fewer categories, and I think we might experiment with merging some of rustc's categories to make them line up. This may be a pain because parts of rustc wish to distinguish between types that chalk wouldn't, and we can decide if it's worth it -- it will also have some memory usage implications, which we would want to measure. In other words, I doubt we can pick the perfect variants a priori</p>",
        "id": 185527268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943350
    },
    {
        "content": "<blockquote>\n<p>Not sure I understand; would that mean <code>AliasTy</code> would become an enum to hold that def-id?</p>\n</blockquote>\n<p>well, there are two choices</p>",
        "id": 185527320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943376
    },
    {
        "content": "<p>first, it already has a def-id</p>",
        "id": 185527326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943381
    },
    {
        "content": "<p>well, it has an AssociatedTyId or something</p>",
        "id": 185527337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943385
    },
    {
        "content": "<p>which in rustc would just be a def-id anyway</p>",
        "id": 185527370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943403
    },
    {
        "content": "<p>Ah right, AssocTypeId is just a DefId</p>",
        "id": 185527387,
        "sender_full_name": "detrumi",
        "timestamp": 1578943413
    },
    {
        "content": "<p>we can either say that, from <em>Chalk's</em> POV, there is just <code>AliasDefId</code></p>",
        "id": 185527392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943415
    },
    {
        "content": "<p>Isn't the point of the <code>Ty</code> vs <code>TyData</code> split to (somewhat) allow differences in types</p>",
        "id": 185527412,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578943422
    },
    {
        "content": "<p>and then have the chalk-solve have some callbacks to ask the <code>RustIrDatabase</code> what sort of alias it is</p>",
        "id": 185527435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943436
    },
    {
        "content": "<p>or is that solely for interning</p>",
        "id": 185527439,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578943437
    },
    {
        "content": "<blockquote>\n<p>Isn't the point of the <code>Ty</code> vs <code>TyData</code> split to (somewhat) allow differences in types</p>\n</blockquote>\n<p>this was meant to be temporary, in my mind</p>",
        "id": 185527502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943451
    },
    {
        "content": "<p>until we had converged on a single definition</p>",
        "id": 185527513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943455
    },
    {
        "content": "<p>we still need the split mind you</p>",
        "id": 185527529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943459
    },
    {
        "content": "<p>to permit interning vs not interning</p>",
        "id": 185527535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943461
    },
    {
        "content": "<p>but I did want to converge eventually on rustc sharing the same enum as rust-analyzer</p>",
        "id": 185527575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943483
    },
    {
        "content": "<p>well, ideally, rustc and rust-analyzer sharing bigger libraries (like chalk) that are based around this enum</p>",
        "id": 185527621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943507
    },
    {
        "content": "<p>The enum would live in the type library, right?</p>",
        "id": 185527667,
        "sender_full_name": "detrumi",
        "timestamp": 1578943531
    },
    {
        "content": "<p>right</p>",
        "id": 185527671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943535
    },
    {
        "content": "<p>the thing that I meant to be temporary, specifically:</p>",
        "id": 185527682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943539
    },
    {
        "content": "<p>I imagined that in rustc integration, when you invoke <code>data()</code> we would generate lazilly a chalk enum representation</p>",
        "id": 185527706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943554
    },
    {
        "content": "<p>(or maybe eagerly, if you have <code>-Zchalk</code>)</p>",
        "id": 185527756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943563
    },
    {
        "content": "<p>but the rest of rustc goes on using its current types for now</p>",
        "id": 185527771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943572
    },
    {
        "content": "<p>but I don't think we want that long term</p>",
        "id": 185527779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943578
    },
    {
        "content": "<p>for one thing, it's a waste of memory</p>",
        "id": 185527794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943586
    },
    {
        "content": "<p>but it seems convenient in order to get chalk-solve integrated</p>",
        "id": 185527819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943609
    },
    {
        "content": "<p>(make sense?)</p>",
        "id": 185527842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943626
    },
    {
        "content": "<p>I think that makes sense</p>",
        "id": 185527867,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578943649
    },
    {
        "content": "<p>I'll have to think about it more</p>",
        "id": 185527877,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578943655
    },
    {
        "content": "<p>Wouldn't changing rustc's types take a lot of refactoring?</p>",
        "id": 185527880,
        "sender_full_name": "detrumi",
        "timestamp": 1578943659
    },
    {
        "content": "<p>yes :)</p>",
        "id": 185527888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943664
    },
    {
        "content": "<p>the alternative would be to move chalk to be the same as rustc</p>",
        "id": 185527922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943682
    },
    {
        "content": "<p>I imagine we will do some of both</p>",
        "id": 185527962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943687
    },
    {
        "content": "<p>Right, because translating between representations would be expensive in its own way</p>",
        "id": 185527999,
        "sender_full_name": "detrumi",
        "timestamp": 1578943719
    },
    {
        "content": "<p>I'm a bit annoyed at this aspect of rust's design really</p>",
        "id": 185528001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943722
    },
    {
        "content": "<p>in particular, it seems annoying that how you group your enum variants has real impact on performance and memory usage</p>",
        "id": 185528022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943737
    },
    {
        "content": "<p>rustc takes a \"maximal\" view and makes a ton of variants</p>",
        "id": 185528048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943748
    },
    {
        "content": "<p>but then you commonly have match statements grouping lots of things together</p>",
        "id": 185528059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943757
    },
    {
        "content": "<p>chalk uses nested variants, which is nice, but then if you need to do recursive matching</p>",
        "id": 185528075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943769
    },
    {
        "content": "<p>that's going to be a bit less optimal code</p>",
        "id": 185528082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943776
    },
    {
        "content": "<p>and we're going to use more memory in the memory layout</p>",
        "id": 185528086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943781
    },
    {
        "content": "<p>there's some kind of missing feature here but oh well :)</p>",
        "id": 185528093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943788
    },
    {
        "content": "<p>(we've sort of known this for a while, but it's hard to fix)</p>",
        "id": 185528175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943821
    },
    {
        "content": "<p>anyway to circle back to alias's for a second --</p>",
        "id": 185528189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943833
    },
    {
        "content": "<p>if we just had <code>AliasDefId</code></p>",
        "id": 185528197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943841
    },
    {
        "content": "<p>then presumably we could have a method like <code>alias_kind</code> in <code>RustIrDatabase</code> that tells chalk-solve what sort of alias it is</p>",
        "id": 185528211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943855
    },
    {
        "content": "<p>and hence which kind of <code>AliasEq</code> and other rules to generate for it</p>",
        "id": 185528215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943861
    },
    {
        "content": "<p>though this again is a very ... \"chalk-centric\" POV</p>",
        "id": 185528247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943877
    },
    {
        "content": "<p>i.e., maybe parts of rustc might want to distinguish them and it would be annoying that they had only one variant and had to use helper methods to figure out what sort of alias they have</p>",
        "id": 185528364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943930
    },
    {
        "content": "<p>Won't that be the case in Chalk as well?</p>",
        "id": 185528407,
        "sender_full_name": "detrumi",
        "timestamp": 1578943969
    },
    {
        "content": "<p>yeah, in chalk-solve, just not in unify etc</p>",
        "id": 185528418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943981
    },
    {
        "content": "<p>hmm</p>",
        "id": 185528436,
        "sender_full_name": "detrumi",
        "timestamp": 1578943991
    },
    {
        "content": "<p>so maybe we want 3 variants ...</p>",
        "id": 185528440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578943995
    },
    {
        "content": "<p>... that unify treats the same ...</p>",
        "id": 185528467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944011
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>‍♂️</p>",
        "id": 185528556,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> did you want to try to implement this?</p>",
        "id": 185528591,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944072
    },
    {
        "content": "<blockquote>\n<p>Wouldn't changing rustc's types take a lot of refactoring?</p>\n</blockquote>\n<p>I guess this might argue for matching rustc's design</p>",
        "id": 185528645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944102
    },
    {
        "content": "<p>I'd like to try, at least <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 185528655,
        "sender_full_name": "detrumi",
        "timestamp": 1578944107
    },
    {
        "content": "<p>after all, refactoring chalk is easier thus far ;)</p>",
        "id": 185528659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944109
    },
    {
        "content": "<p>though I do appreciate a \"smaller\" type enum that tries to highlight the essential behavior of each type</p>",
        "id": 185528705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944136
    },
    {
        "content": "<p>but I also think that trying to group these 3 sorts of \"aliases\" together only <em>kind of</em> works</p>",
        "id": 185528742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944152
    },
    {
        "content": "<p>If possible (and elegant), I would also prefer a smaller type enum</p>",
        "id": 185528803,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944165
    },
    {
        "content": "<p>I see them as kind of points along a spectrum, but they are distinct points (and you have to squint a bit, thanks to stuff like auto trait leakage)</p>",
        "id": 185528835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944185
    },
    {
        "content": "<p>Ok if <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> wants to try to implement this, then I'll do other stuff :)</p>",
        "id": 185529023,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944288
    },
    {
        "content": "<p>But I think it would be better to \"fix\" <code>impl Trait</code> sooner rather than later</p>",
        "id": 185529055,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944308
    },
    {
        "content": "<p>since rust-analyzer will probably want the fixes for other issues</p>",
        "id": 185529093,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944335
    },
    {
        "content": "<p>yes, I think it's good to be presenting a coherent view of the type enum</p>",
        "id": 185529102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944337
    },
    {
        "content": "<p>I'll need a bit more detail to get started, but it seems doable</p>",
        "id": 185529114,
        "sender_full_name": "detrumi",
        "timestamp": 1578944344
    },
    {
        "content": "<blockquote>\n<p>since rust-analyzer will probably want the fixes for other issues</p>\n</blockquote>\n<p>see <a href=\"#narrow/stream/144729-wg-traits/topic/ambiguous.20answer.20replacement/near/185302669\" title=\"#narrow/stream/144729-wg-traits/topic/ambiguous.20answer.20replacement/near/185302669\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/ambiguous.20answer.20replacement/near/185302669</a></p>",
        "id": 185529147,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944373
    },
    {
        "content": "<p>Anything else for <code>impl Trait</code> or <code>Alias</code> right now?</p>",
        "id": 185529195,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944397
    },
    {
        "content": "<p>I think that covers this</p>",
        "id": 185529269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944417
    },
    {
        "content": "<blockquote>\n<p>since rust-analyzer will probably want the fixes for other issues</p>\n</blockquote>\n<p>yeah, I see, sorry <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> ...</p>",
        "id": 185529305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944449
    },
    {
        "content": "<p>Speaking of rust-analyzer bugs</p>",
        "id": 185529345,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944479
    },
    {
        "content": "<p>I've looked at two</p>",
        "id": 185529351,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944483
    },
    {
        "content": "<p>yep</p>",
        "id": 185529362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944489
    },
    {
        "content": "<p>nice segway <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span></p>",
        "id": 185529367,
        "sender_full_name": "detrumi",
        "timestamp": 1578944491
    },
    {
        "content": "<p>this one: <a href=\"https://github.com/rust-lang/chalk/issues/302\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/302\">https://github.com/rust-lang/chalk/issues/302</a></p>",
        "id": 185529383,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944501
    },
    {
        "content": "<p>So, we kind of saw this coming</p>",
        "id": 185529412,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944514
    },
    {
        "content": "<p>And this one: <a href=\"https://github.com/rust-lang/chalk/issues/301\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/301\">https://github.com/rust-lang/chalk/issues/301</a></p>",
        "id": 185529461,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944528
    },
    {
        "content": "<p>(and then I also found a potential bug: <a href=\"https://github.com/rust-lang/chalk/issues/318\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/318\">https://github.com/rust-lang/chalk/issues/318</a>)</p>",
        "id": 185529489,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944555
    },
    {
        "content": "<p>all of these directly come from truncation</p>",
        "id": 185529501,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944562
    },
    {
        "content": "<p>those the first (302) actually is a slightly larger issue around ambiguity (but in this case is from truncation)</p>",
        "id": 185529554,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944602
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was suggesting that maybe we don't do truncation at all</p>",
        "id": 185529576,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944614
    },
    {
        "content": "<p>That would be fairly easy to test, I think</p>",
        "id": 185529659,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944654
    },
    {
        "content": "<p>to be specific, I think we would turn truncation into something like a boolean test</p>",
        "id": 185529672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944671
    },
    {
        "content": "<p>if it exceeds the threshold, we would flounder</p>",
        "id": 185529688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944677
    },
    {
        "content": "<p>rustc has a similar rule where it just plain forbids the creation of types larger than a certain size</p>",
        "id": 185529739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944704
    },
    {
        "content": "<p>there are really only two places we truncate right now: in <code>get_or_create_table_for_subgoal</code></p>",
        "id": 185529765,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944728
    },
    {
        "content": "<p>and in: <code>truncate_returned</code></p>",
        "id": 185529778,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944737
    },
    {
        "content": "<p>yeah</p>",
        "id": 185529798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944748
    },
    {
        "content": "<p>for the first, it's pretty easy: we just <code>Flounder</code> the table</p>",
        "id": 185529803,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944751
    },
    {
        "content": "<p>for the second, we could just...not?</p>",
        "id": 185529820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944762
    },
    {
        "content": "<p>/me ponders</p>",
        "id": 185529880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944783
    },
    {
        "content": "<p>what rustc actually does is to abort I think</p>",
        "id": 185529898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944795
    },
    {
        "content": "<p>like, hard abort compilation</p>",
        "id": 185529909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944804
    },
    {
        "content": "<p>I'd rather not go that far if we can avoid it</p>",
        "id": 185529919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944812
    },
    {
        "content": "<p>I don't think we want that</p>",
        "id": 185529927,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944816
    },
    {
        "content": "<p>(but we may wish to propagate back some kind of error)</p>",
        "id": 185529942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944821
    },
    {
        "content": "<p>in any case the reason we apply that in both places is to prevent infinite loops</p>",
        "id": 185529971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944832
    },
    {
        "content": "<p>if anything, we could do as we do with <code>NegativeCycle</code> and propogate out immediately</p>",
        "id": 185529972,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944834
    },
    {
        "content": "<p>right</p>",
        "id": 185529987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944846
    },
    {
        "content": "<p>and that may be reasonable</p>",
        "id": 185529992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944849
    },
    {
        "content": "<blockquote>\n<p>in any case the reason we apply that in both places is to prevent infinite loops</p>\n</blockquote>\n<p>I'm trying to think about the case of \"if you just apply it when creating new tables\"... whta can go wrong...</p>",
        "id": 185530017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944870
    },
    {
        "content": "<p>I suspect there can be some kind of cycle but not entirely sure how to build it</p>",
        "id": 185530070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944885
    },
    {
        "content": "<p>This also hits on the idea of performance too</p>",
        "id": 185530074,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944887
    },
    {
        "content": "<p>regardless, I think the other question is:</p>",
        "id": 185530076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944889
    },
    {
        "content": "<p>when you lift the limit in rust-analyzer</p>",
        "id": 185530079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944892
    },
    {
        "content": "<p>I believe it starts to have <em>other</em> problems</p>",
        "id": 185530087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944898
    },
    {
        "content": "<p>yes, let me see if I can find that</p>",
        "id": 185530097,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944906
    },
    {
        "content": "<p>and it seems like we need to address <em>those</em>, rigit?</p>",
        "id": 185530103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578944910
    },
    {
        "content": "<p>we talked about that shortly</p>",
        "id": 185530106,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944912
    },
    {
        "content": "<p><a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Changing.20CHALK_SOLVER_MAX_SIZE/near/184864153\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Changing.20CHALK_SOLVER_MAX_SIZE/near/184864153\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Changing.20CHALK_SOLVER_MAX_SIZE/near/184864153</a></p>",
        "id": 185530144,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944937
    },
    {
        "content": "<p>So, different/wrong answers</p>",
        "id": 185530188,
        "sender_full_name": "detrumi",
        "timestamp": 1578944967
    },
    {
        "content": "<p>no, I think just hanging</p>",
        "id": 185530203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944978
    },
    {
        "content": "<p>I think as long as we have a way to prevent Chalk from hanging, we should be fine</p>",
        "id": 185530206,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578944981
    },
    {
        "content": "<p>But this also opens a bit of a design problem:</p>",
        "id": 185530353,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945066
    },
    {
        "content": "<p>If we expect that at <em>some point</em>, there will be a large program</p>",
        "id": 185530378,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945082
    },
    {
        "content": "<p>(even if we are super fast)</p>",
        "id": 185530386,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945092
    },
    {
        "content": "<p>we will take a long time</p>",
        "id": 185530399,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945102
    },
    {
        "content": "<p>and we want the caller to say \"that's enough, I don't care\"</p>",
        "id": 185530418,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945117
    },
    {
        "content": "<p>but, what do we do:</p>",
        "id": 185530421,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945122
    },
    {
        "content": "<p>do we just say \"I got nothing\"</p>",
        "id": 185530468,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945127
    },
    {
        "content": "<p>or do we try to give some kind of hint</p>",
        "id": 185530479,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945134
    },
    {
        "content": "<p>yeah this is the subject of your PR, right?</p>",
        "id": 185530499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945152
    },
    {
        "content": "<p>Slightly</p>",
        "id": 185530528,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945174
    },
    {
        "content": "<p>so with my PR, I basically allow the solving to be cancelled at any point</p>",
        "id": 185530575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945194
    },
    {
        "content": "<p>and it'll just give a suggestion with any answers that have <em>already come through</em></p>",
        "id": 185530596,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945211
    },
    {
        "content": "<p>(even though the full aggregated answer isn't available)</p>",
        "id": 185530619,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945226
    },
    {
        "content": "<p>I talk a bit about this in the PR desc.</p>",
        "id": 185530646,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945241
    },
    {
        "content": "<p>but I could see us in the future allowing cancellation based on the <em>current aggregated answer</em></p>",
        "id": 185530724,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945261
    },
    {
        "content": "<p>or to also extend the suggested answer by <em>potential future answers</em></p>",
        "id": 185530756,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945280
    },
    {
        "content": "<p>ok so</p>",
        "id": 185530784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945301
    },
    {
        "content": "<p>in this version you are threading down a \"should continue\" closure</p>",
        "id": 185530802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945308
    },
    {
        "content": "<p>yeah</p>",
        "id": 185530829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945322
    },
    {
        "content": "<p>which gets invoked periodically</p>",
        "id": 185530852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945336
    },
    {
        "content": "<p>and which forces a <code>QuantumExceeded</code> result if it is true?</p>",
        "id": 185530869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945347
    },
    {
        "content": "<p>it gets invoked anytime Chalk returns a <code>QuantumExceeded</code></p>",
        "id": 185530932,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945369
    },
    {
        "content": "<p>skimming the commits I somehow missed where <code>should_continue()</code> gets called</p>",
        "id": 185530935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945371
    },
    {
        "content": "<p>I'd imagine that RA would want a partial answer, while rustc would only want the exact answer?</p>",
        "id": 185530937,
        "sender_full_name": "detrumi",
        "timestamp": 1578945371
    },
    {
        "content": "<blockquote>\n<p>it gets invoked anytime Chalk returns a <code>QuantumExceeded</code></p>\n</blockquote>\n<p>oh, I see</p>",
        "id": 185530959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945386
    },
    {
        "content": "<p>so, we're still at the mercy of the engine if no <code>QuantumExceeded</code> ever gets called</p>",
        "id": 185530961,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945391
    },
    {
        "content": "<p>interesting</p>",
        "id": 185530967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945399
    },
    {
        "content": "<p>ok</p>",
        "id": 185530968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945400
    },
    {
        "content": "<p>not quite what I imagined at first</p>",
        "id": 185530978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945413
    },
    {
        "content": "<p>this is making me think btw</p>",
        "id": 185530986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945416
    },
    {
        "content": "<p>but if <code>QuantumExceeded</code> never gets called, then we are on the happy path</p>",
        "id": 185530988,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945418
    },
    {
        "content": "<p>that it'd be pretty nice to be documenting this high-level flow in the chalk book</p>",
        "id": 185531003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945427
    },
    {
        "content": "<blockquote>\n<p>that it'd be pretty nice to be documenting this high-level flow in the chalk book</p>\n</blockquote>\n<p>yes, I'm going to write <code>chalk-engine</code> documentation in the book at some point</p>",
        "id": 185531032,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945450
    },
    {
        "content": "<p>it seems like it might be useful also</p>",
        "id": 185531065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945475
    },
    {
        "content": "<p>to be able to thread down said closure, perhaps as part of the <code>Context</code> or whatever</p>",
        "id": 185531118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945485
    },
    {
        "content": "<p>(but that's fine)</p>",
        "id": 185531131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945496
    },
    {
        "content": "<p>we can change exactly when/where/how it gets invoked</p>",
        "id": 185531146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945513
    },
    {
        "content": "<p>but the main thing is, if it <em>is</em> invoked, you get back kind of \"what we got so far\"</p>",
        "id": 185531159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945524
    },
    {
        "content": "<p>another semi-related issue is: <a href=\"https://github.com/rust-lang/chalk/issues/260\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/260\">https://github.com/rust-lang/chalk/issues/260</a></p>",
        "id": 185531188,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945549
    },
    {
        "content": "<p>which relates to the idea of \"cancellation\"</p>",
        "id": 185531225,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945583
    },
    {
        "content": "<blockquote>\n<p>but the main thing is, if it <em>is</em> invoked, you get back kind of \"what we got so far\"</p>\n</blockquote>\n<p>which I'm just doing a <code>Guidance(Suggested(current_subst))</code></p>",
        "id": 185531307,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945612
    },
    {
        "content": "<p><code>should_continue</code> is actually just cancellation from within instead of from outside</p>",
        "id": 185531334,
        "sender_full_name": "detrumi",
        "timestamp": 1578945631
    },
    {
        "content": "<blockquote>\n<p><code>should_continue</code> is actually just cancellation from within instead of from outside</p>\n</blockquote>\n<p>what do you mean?</p>",
        "id": 185531355,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945648
    },
    {
        "content": "<p>But, it's 3:00, so I'll give a quick summary of the meeting:</p>",
        "id": 185531367,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945656
    },
    {
        "content": "<p>cancellation and <code>should_continue</code> seem very similar, the only difference is who decides to stop the search (and for what reason)</p>",
        "id": 185531435,
        "sender_full_name": "detrumi",
        "timestamp": 1578945702
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>but the main thing is, if it <em>is</em> invoked, you get back kind of \"what we got so far\"</p>\n</blockquote>\n<p>which I'm just doing a <code>Guidance(Suggested(current_subst))</code></p>\n</blockquote>\n<p>interesting, yes. it seems like we should report that it's partial <em>somehow</em></p>",
        "id": 185531636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945809
    },
    {
        "content": "<p>but I'm <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> on the PR overall</p>",
        "id": 185531642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945815
    },
    {
        "content": "<blockquote>\n<p>But, it's 3:00, so I'll give a quick summary of the meeting:</p>\n</blockquote>\n<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 185531647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578945824
    },
    {
        "content": "<ul>\n<li><code>Alias</code> might make sense as one enum variant, or maybe three</li>\n<li>We want to bring rustc and Chalk's types closer together/merge</li>\n<li><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> is going to try to reimplement <code>impl Trait</code></li>\n<li>We should try to just remove truncation and instead just <code>Flounder</code> (Jack will try)</li>\n<li>performance/cancellation is the next big thing if we remove truncation &amp; related errors</li>\n</ul>",
        "id": 185531717,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945847
    },
    {
        "content": "<p>Did I miss anything?</p>",
        "id": 185531736,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945862
    },
    {
        "content": "<blockquote>\n<ul>\n<li><code>Alias</code> might make sense as one enum variant, or maybe three</li>\n</ul>\n</blockquote>",
        "id": 185531751,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945877
    },
    {
        "content": "<p>that's very much an oversimplification</p>",
        "id": 185531758,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945884
    },
    {
        "content": "<p>Also, for any who didn't see: I'm working on writing down some chalk goals: <a href=\"https://hackmd.io/VeMmXIYBRu2KdYbJDIpcFA?both\" target=\"_blank\" title=\"https://hackmd.io/VeMmXIYBRu2KdYbJDIpcFA?both\">https://hackmd.io/VeMmXIYBRu2KdYbJDIpcFA?both</a></p>",
        "id": 185531831,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945935
    },
    {
        "content": "<p>feel free to add anything you feel is important</p>",
        "id": 185531846,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945947
    },
    {
        "content": "<p>After I list them, I'll try to prioritize and add them to a github project (either on rust-lang/chalk or rust-lang/wg-traits)</p>",
        "id": 185531915,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578945979
    },
    {
        "content": "<p>Maybe we should have one board for chalk changes, and one for rustc-chalk integration. Though it's not always clear what goes where then <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 185532266,
        "sender_full_name": "detrumi",
        "timestamp": 1578946192
    },
    {
        "content": "<p>I think that's the plan</p>",
        "id": 185532375,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578946253
    }
]