[
    {
        "content": "<p>Is it just me or is this bit of code wrong? <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_infer/infer/canonical/mod.rs#L68\">https://github.com/rust-lang/rust/blob/master/src/librustc_infer/infer/canonical/mod.rs#L68</a></p>",
        "id": 203133763,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594142933
    },
    {
        "content": "<p>Shouldn't that be <code>1..canonical.max_universe</code></p>",
        "id": 203133812,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594142958
    },
    {
        "content": "<p>Since it's chained from <code>ROOT</code></p>",
        "id": 203133853,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594142976
    },
    {
        "content": "<p>(so, this actually creates one extra universe)</p>",
        "id": 203133879,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594142987
    },
    {
        "content": "<p>It's an exclusive range, so it's counting 0 twice and <code>max_universe</code> zero times</p>",
        "id": 203134054,
        "sender_full_name": "detrumi",
        "timestamp": 1594143056
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♂️ ah</p>",
        "id": 203134122,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594143091
    },
    {
        "content": "<p>But yeah, <code>1..=canonical.max_universe</code> would be clearer</p>",
        "id": 203134154,
        "sender_full_name": "detrumi",
        "timestamp": 1594143110
    },
    {
        "content": "<p>wait...</p>",
        "id": 203134269,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594143153
    },
    {
        "content": "<p>So, if <code>canonical.max_universe</code> is 1</p>",
        "id": 203134307,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594143171
    },
    {
        "content": "<p>the it would be <code>ROOT</code> chained with <code>0..1</code> (so length 1)</p>",
        "id": 203134373,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594143210
    },
    {
        "content": "<p>so two universes</p>",
        "id": 203134378,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594143213
    },
    {
        "content": "<p>oh wait</p>",
        "id": 203134485,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594143253
    },
    {
        "content": "<p>Is <code>max_universe</code> the number of universes, or the index of the largest universe?</p>",
        "id": 203134488,
        "sender_full_name": "detrumi",
        "timestamp": 1594143253
    },
    {
        "content": "<p>yeah, it's the index of the largest</p>",
        "id": 203134516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594143265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you think you could help me come up with some tests for <a href=\"https://github.com/rust-lang/chalk/issues/512\">https://github.com/rust-lang/chalk/issues/512</a></p>",
        "id": 203139152,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594145590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I could! Are you working on this? I was thinking of hacking on that some, but happy to not do so :)</p>",
        "id": 203142709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594147483
    },
    {
        "content": "<p>I did start playing a bit</p>",
        "id": 203142742,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594147499
    },
    {
        "content": "<p>But I can just push what I have</p>",
        "id": 203142757,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594147504
    },
    {
        "content": "<p>if you want to take over</p>",
        "id": 203142767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594147509
    },
    {
        "content": "<p>I'm not sure if the test added in <a href=\"https://github.com/rust-lang-nursery/chalk/issues/529\">chalk#529</a> is sufficient</p>",
        "id": 203143532,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594147808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> well so far I only got so far as working on the impl trait docs, and I still have more to do there, and I've also completely failed to keep up with GH notifications, so don't block on me :P</p>",
        "id": 203144858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594148352
    },
    {
        "content": "<p>my eyes are maybe bigger than my plate this week</p>",
        "id": 203144871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594148358
    },
    {
        "content": "<p>yeah, I would certainly say if that if you had to pick between this and <code>impl Trait</code>, go with <code>impl Trait</code> :)</p>",
        "id": 203145016,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594148408
    },
    {
        "content": "<p>but I did think that sem-syn equality in general was a good area that seemed to be blocking a lot of things</p>",
        "id": 203145022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594148410
    },
    {
        "content": "<p>Also the subtyping PR is probably higher priority than this</p>",
        "id": 203145104,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594148445
    },
    {
        "content": "<p>So, I mostly canonicalization of placeholders working (there's an edge case that I have to track down)</p>",
        "id": 203227146,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594178174
    },
    {
        "content": "<p>but I ran into a problem: all of our tests need to be fixed</p>",
        "id": 203227162,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594178198
    },
    {
        "content": "<p>consider: <code>goal { forall &lt; 'a &gt; { fn (fn1 &lt; 'a &gt;) : Foo } }</code></p>",
        "id": 203227167,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594178208
    },
    {
        "content": "<p>for </p>\n<div class=\"codehilite\"><pre><span></span><code>program {\n    trait Foo { } struct fn1 &lt; &#39;a &gt; { } struct fn2 &lt; &#39;a, &#39;b &gt; { } impl Foo for\n    for &lt; &#39;a &gt; fn (fn1 &lt; &#39;a &gt;) { }\n}\n</code></pre></div>",
        "id": 203227182,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594178227
    },
    {
        "content": "<p>Before, we got: <code>Unique; substitution [], lifetime constraints [InEnvironment { environment: Env([]), goal: '!1_0: '!3_0 }, InEnvironment { environment: Env([]), goal: '!3_0: '!1_0 }]</code></p>",
        "id": 203227199,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594178275
    },
    {
        "content": "<p>But now, we get <code>Unique; for&lt;?U1,?U3&gt; { substitution [?0 := '^0.0], lifetime constraints [InEnvironment { environment: Env([]), goal: '^0.0: '^0.1 }, InEnvironment { environment: Env([]), goal: '^0.1: '^0.0 }] }</code></p>",
        "id": 203227254,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594178319
    },
    {
        "content": "<p>Welp okay so that edge case I was talking about, that seems to be the program clauses before instantiation issue</p>",
        "id": 203304881,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594233190
    },
    {
        "content": "<p><code>solve_iteration</code> is called with a goal of <code>UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([for&lt;&gt; AliasEq(&lt;^1.0 as Iterator&gt;::Item = ^1.1), for&lt;&gt; FromEnv(^1.0: Iterator), for&lt;&gt; AliasEq(&lt;^1.1 as IntoIterator&gt;::Item = Uint(U32)), for&lt;&gt; FromEnv(^1.1: IntoIterator)]), goal: FromEnv(^0.2: Iterator) }, binders: [PlaceholderTy(!1_0), PlaceholderTy(!1_1), Ty(General, U1)] }, universes: 2 }</code></p>",
        "id": 203305036,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594233249
    },
    {
        "content": "<p>But then we ask for program clauses like: <code>program_clauses_for_goal{environment=Env([for&lt;&gt; AliasEq(&lt;^1.0 as Iterator&gt;::Item = ^1.1), for&lt;&gt; FromEnv(^1.0: Iterator), for&lt;&gt; AliasEq(&lt;^1.1 as IntoIterator&gt;::Item = Uint(U32)), for&lt;&gt; FromEnv(^1.1: IntoIterator)]), goal=FromEnv(^0.2: Iterator)}</code></p>",
        "id": 203305068,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594233270
    },
    {
        "content": "<p>And we've lost the binders</p>",
        "id": 203305084,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594233278
    },
    {
        "content": "<p>So we get <code>clauses=[for&lt;&gt; FromEnv(^1.0: Iterator), for&lt;type&gt; FromEnv(^0.0: Iterator) :- FromEnv((Iterator::Item)&lt;^0.0&gt;), for&lt;type&gt; FromEnv(&lt;^0.0 as IntoIterator&gt;::IntoIter: Iterator) :- FromEnv(^0.0: IntoIterator)]</code></p>",
        "id": 203305134,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594233305
    },
    {
        "content": "<p>and <code>solve_from_clauses{clause=for&lt;&gt; FromEnv(^1.0: Iterator)}</code></p>",
        "id": 203305158,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594233317
    },
    {
        "content": "<p>So, we either need to subst the bound vars in <code>clause</code> or wrap it in a <code>Binders</code></p>",
        "id": 203305575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594233520
    },
    {
        "content": "<p>Okay so I solved that by essentially wrapping the clause into a <code>UCanonical</code> and subst'ing it</p>",
        "id": 203310457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594236042
    },
    {
        "content": "<p><em>But</em> new problem</p>",
        "id": 203310469,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594236048
    },
    {
        "content": "<p>Now that placeholders get canonicalized</p>",
        "id": 203310507,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594236070
    },
    {
        "content": "<p>they're getting instantiated as inference vars</p>",
        "id": 203310531,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594236085
    },
    {
        "content": "<p>which for <code>non_enumerable</code> traits flounders...</p>",
        "id": 203310561,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594236099
    },
    {
        "content": "<p>I guess the only way to solve this would be to have the vars for <code>Binders</code> be <code>CanonicalVarKinds</code> instead of <code>VariableKinds</code></p>",
        "id": 203310658,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594236139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> around?</p>",
        "id": 203326427,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594244001
    },
    {
        "content": "<p>(This might be a silly question, but) why do we want to canonicalize placeholders?</p>",
        "id": 203442145,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1594329553
    },
    {
        "content": "<p>I honestly don't know</p>",
        "id": 203455511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594338122
    },
    {
        "content": "<p>Its the way rustc does it</p>",
        "id": 203455526,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594338132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'm around-ish now...</p>",
        "id": 204260304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595020644
    },
    {
        "content": "<p>The reason that I want to canonicalize placeholders is that it is <em>more canonical</em>, for one thing</p>",
        "id": 204260345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595020663
    },
    {
        "content": "<p>I haven't looked at this in a week</p>",
        "id": 204260369,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595020669
    },
    {
        "content": "<p>ok, well, I just caught up on notifications mostly</p>",
        "id": 204260431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595020696
    },
    {
        "content": "<p>nice</p>",
        "id": 204260436,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595020700
    },
    {
        "content": "<p>Let me check if I actually pushed this branch</p>",
        "id": 204260477,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595020734
    },
    {
        "content": "<p>Yeah, I think this is up to date: <a href=\"https://github.com/jackh726/chalk/tree/canonicalize\">https://github.com/jackh726/chalk/tree/canonicalize</a></p>",
        "id": 204260544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595020779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Canonicalization/near/203310658\">said</a>:</p>\n<blockquote>\n<p>I guess the only way to solve this would be to have the vars for <code>Binders</code> be <code>CanonicalVarKinds</code> instead of <code>VariableKinds</code></p>\n</blockquote>\n<p>I guess this is the question. Is this how we want to move forward?</p>",
        "id": 204261996,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595021493
    },
    {
        "content": "<p>Or maybe it isn't needed and I just didn't do something right. Which is possible.</p>",
        "id": 204262101,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595021545
    },
    {
        "content": "<p>I'm currently reading <a href=\"https://github.com/rust-lang/rust/issues/73503\">#73503</a></p>",
        "id": 204262414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595021717
    },
    {
        "content": "<p>will try to take a look shortly!</p>",
        "id": 204262423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595021721
    },
    {
        "content": "<p>no rush :)</p>",
        "id": 204262551,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595021767
    },
    {
        "content": "<p>Just ping me when/if you want to chat. Just working on some other things.</p>",
        "id": 204263392,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595022296
    },
    {
        "content": "<p>Ok, I've probably got to stop for the day, but I'll try to take a look monday or maybe over weekend and leave any thoughts</p>",
        "id": 204263785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595022592
    },
    {
        "content": "<p>Works for me</p>",
        "id": 204263923,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595022683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> looking at your branch now</p>",
        "id": 204596865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595362007
    },
    {
        "content": "<p>Cool</p>",
        "id": 204596936,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595362045
    },
    {
        "content": "<p>I'm around-ish to discuss if you need</p>",
        "id": 204596948,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595362056
    },
    {
        "content": "<p>I guess the point is that everything breaks? :)</p>",
        "id": 204597580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595362397
    },
    {
        "content": "<p>yeah, basically</p>",
        "id": 204597742,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595362493
    },
    {
        "content": "<p>well, not <em>everything</em></p>",
        "id": 204597758,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595362499
    },
    {
        "content": "<p>just most things</p>",
        "id": 204597763,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595362501
    },
    {
        "content": "<p>ok :)</p>",
        "id": 204598188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595362757
    },
    {
        "content": "<p>any thoughts?</p>",
        "id": 204598560,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595362956
    },
    {
        "content": "<p>well, in the ones I've looked at so far, the error is mostly in the \"diff\"</p>",
        "id": 204598776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595363082
    },
    {
        "content": "<p>that is, the output is correct, but it now looks different</p>",
        "id": 204598789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595363091
    },
    {
        "content": "<p>because where it used to include (e.g.) <code>!1_1</code>, it now includes a bound variable (e.g., <code>^0.0</code>)</p>",
        "id": 204598837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595363120
    },
    {
        "content": "<p>I am wondering though if we ought to be \"instantiating\" that solution before printing it</p>",
        "id": 204598894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595363161
    },
    {
        "content": "<p>or if it's better to update the diff</p>",
        "id": 204598943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595363171
    },
    {
        "content": "<p>it's also true I think that the canonicalization pretty-printing isn't dumping quite enough information</p>",
        "id": 204598987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595363196
    },
    {
        "content": "<p>example:</p>",
        "id": 204600284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595363977
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">-&quot;Unique;substitution[],lifetimeconstraints[InEnvironment{environment:Env([]),goal:\\&#39;!1_0:\\&#39;!1_1},InEnvironment{environment:Env([]),goal:\\&#39;!1_1:\\&#39;!1_0}]&quot;</span>\n<span class=\"gi\">+&quot;Unique;for&lt;?U1,?U1&gt;{substitution[?0:=\\&#39;^0.0,?1:=\\&#39;^0.1],lifetimeconstraints[InEnvironment{environment:Env([]),goal:\\&#39;^0.0:\\&#39;^0.1},InEnvironment{enviro&quot;</span>\n</code></pre></div>",
        "id": 204600289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595363984
    },
    {
        "content": "<p>but some other tests are getting other results, I guess, like Ambiguous instead of Unique</p>",
        "id": 204600404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595364059
    },
    {
        "content": "<p>Also, I'm not sure why the <code>substitution</code> is non-empty</p>",
        "id": 204600440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595364074
    },
    {
        "content": "<p>hmm</p>",
        "id": 204600442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595364075
    },
    {
        "content": "<p>well, some are Ambiguous now because they are now inference vars instead of placeholders</p>",
        "id": 204602621,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595365417
    },
    {
        "content": "<p>so, when they are <code>non_enumerable</code>, they flounder. Which makes me feel like I made a mistake somewhere</p>",
        "id": 204602695,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595365446
    },
    {
        "content": "<p>(I didn't have time to dig more deeply yet, but will try to do so)</p>",
        "id": 204603489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595365969
    },
    {
        "content": "<p>No worries. I might take another look later tonight if I have time</p>",
        "id": 204604082,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595366302
    },
    {
        "content": "<p>Ah okay. So <em>one</em> new issue when canonicalizing placeholders comes when we invert a goal</p>",
        "id": 204617218,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595376100
    },
    {
        "content": "<p>So, for <code>forall&lt;T&gt; { not { [T]: Sized } }</code></p>",
        "id": 204617277,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595376128
    },
    {
        "content": "<p>This will fail: <code>let inverted_subgoal = infer.invert_goal(context.interner(), subgoal)?;</code></p>",
        "id": 204617300,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595376151
    },
    {
        "content": "<p>Wait why are placeholders get instantiated as inference vars</p>",
        "id": 204631544,
        "sender_full_name": "Areredify",
        "timestamp": 1595395685
    },
    {
        "content": "<p>Also I don't quite understand why <code>free_vars</code> in your <code>canonicalize.rs</code> contain both  placeholders and inference vars, I thought they are supposed to just contain inference vars (hence the name)</p>",
        "id": 204631654,
        "sender_full_name": "Areredify",
        "timestamp": 1595395897
    },
    {
        "content": "<p>Well, so we want to match rustc's canonicalization of placeholders</p>",
        "id": 204631709,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595395972
    },
    {
        "content": "<p>So, the placeholders turn into bound vars</p>",
        "id": 204631728,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595395995
    },
    {
        "content": "<p>Yeah</p>",
        "id": 204631731,
        "sender_full_name": "Areredify",
        "timestamp": 1595396003
    },
    {
        "content": "<p>And then when we create a subgoal, those turn into inference vars, if I'm remembering correctly</p>",
        "id": 204631739,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396040
    },
    {
        "content": "<p>(But that also might not be right)</p>",
        "id": 204631782,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396050
    },
    {
        "content": "<p>But, the free vars includes placeholders now because now placeholders <em>are</em> vars</p>",
        "id": 204631796,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396084
    },
    {
        "content": "<p>But again, that might not be right and my understanding here might be wrong</p>",
        "id": 204631819,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396121
    },
    {
        "content": "<p>This mostly just matched up with how rustc does it</p>",
        "id": 204631825,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396137
    },
    {
        "content": "<p>In rustc, it isn't called free vars, but something else</p>",
        "id": 204631871,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396169
    },
    {
        "content": "<p>They instantiate into inference vars because that's the logic, but I thought you are supposed to match on CanonicalVarKind and instantiate them into placeholder variables if they are a placeholder variable</p>",
        "id": 204631887,
        "sender_full_name": "Areredify",
        "timestamp": 1595396217
    },
    {
        "content": "<p>Right, which makes me feel like my statement is wrong</p>",
        "id": 204631975,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396343
    },
    {
        "content": "<p>Free vars are needed to merge solutions</p>",
        "id": 204631979,
        "sender_full_name": "Areredify",
        "timestamp": 1595396351
    },
    {
        "content": "<p>It's been a bit since I've dug into this</p>",
        "id": 204631986,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396364
    },
    {
        "content": "<p>But basically, chalk-engine doesn't instantiate the canonical to create a subgoal, IIRC</p>",
        "id": 204632038,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396415
    },
    {
        "content": "<p>Hmm or maybe it does</p>",
        "id": 204632074,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396510
    },
    {
        "content": "<p>it doesnt seem to I think?</p>",
        "id": 204632207,
        "sender_full_name": "Areredify",
        "timestamp": 1595396696
    },
    {
        "content": "<p><code>program_clauses_for_goal</code> is called for a canonical value</p>",
        "id": 204632223,
        "sender_full_name": "Areredify",
        "timestamp": 1595396731
    },
    {
        "content": "<p>Indeed</p>",
        "id": 204632278,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396794
    },
    {
        "content": "<p>Also, I don't think chalk-engine uses free vars at all</p>",
        "id": 204632286,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396820
    },
    {
        "content": "<p>and everything flounders on a bound var, isnt that nice</p>",
        "id": 204632290,
        "sender_full_name": "Areredify",
        "timestamp": 1595396830
    },
    {
        "content": "<p>Haha yep</p>",
        "id": 204632293,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396845
    },
    {
        "content": "<p>Well uhh</p>",
        "id": 204632356,
        "sender_full_name": "Areredify",
        "timestamp": 1595396945
    },
    {
        "content": "<p>Err wait, chalk-engine does instantiate goals before getting program clauses</p>",
        "id": 204632366,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396962
    },
    {
        "content": "<p>Chalk-recursive doesn't</p>",
        "id": 204632372,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595396971
    },
    {
        "content": "<p>Oooh, I stumbled into the wrong solve</p>",
        "id": 204632440,
        "sender_full_name": "Areredify",
        "timestamp": 1595397007
    },
    {
        "content": "<p>In my branch I got stopped on merging guidance and reformatting the output so it matches the old version</p>",
        "id": 204632509,
        "sender_full_name": "Areredify",
        "timestamp": 1595397126
    },
    {
        "content": "<p>Hmm</p>",
        "id": 204632538,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595397173
    },
    {
        "content": "<p>Is your code up?</p>",
        "id": 204632540,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595397181
    },
    {
        "content": "<p>Yes, but it panics on every second test because merging (I think at least, I didnt trace it)</p>",
        "id": 204632561,
        "sender_full_name": "Areredify",
        "timestamp": 1595397233
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/compare/master...Areredify:canonicalization_rework\">https://github.com/rust-lang/chalk/compare/master...Areredify:canonicalization_rework</a></p>",
        "id": 204632617,
        "sender_full_name": "Areredify",
        "timestamp": 1595397281
    },
    {
        "content": "<p>Also it's old, Ill rebase it one moment</p>",
        "id": 204632623,
        "sender_full_name": "Areredify",
        "timestamp": 1595397300
    },
    {
        "content": "<p>That's okay. I'm up way too late to think too hard about this or do anything</p>",
        "id": 204632637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595397325
    },
    {
        "content": "<p>Also sorry I vanished everyone</p>",
        "id": 204632699,
        "sender_full_name": "Areredify",
        "timestamp": 1595397396
    },
    {
        "content": "<p>I plan to start working on chalk fulltime starting august hopefully</p>",
        "id": 204632707,
        "sender_full_name": "Areredify",
        "timestamp": 1595397421
    },
    {
        "content": "<p>Fulltime? Oooh</p>",
        "id": 204632740,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595397472
    },
    {
        "content": "<p>Fancy</p>",
        "id": 204632745,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595397476
    },
    {
        "content": "<p>rebased</p>",
        "id": 204632996,
        "sender_full_name": "Areredify",
        "timestamp": 1595397782
    },
    {
        "content": "<p>Anyways, I'm gonna sleep now. I'll maybe look more through your branch tomorrow. But I think the biggest difference is the free vars being split in yours</p>",
        "id": 204633189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595398055
    },
    {
        "content": "<p>And then also I guess CanonicalVarKinds being 6 different variants in mine whereas you use a Source enum</p>",
        "id": 204633243,
        "sender_full_name": "Jack Huey",
        "timestamp": 1595398099
    },
    {
        "content": "<p>Yeah I don't see a big difference between our branches either</p>",
        "id": 204633321,
        "sender_full_name": "Areredify",
        "timestamp": 1595398224
    }
]