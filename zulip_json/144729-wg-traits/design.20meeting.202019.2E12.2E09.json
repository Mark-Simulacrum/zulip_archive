[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> =)</p>\n<p>I don't have a dedicated topic for today's meeting, but what I was thinking would be useful was to try and \"plot out\" some of the big picture roadmap questions. I created a <a href=\"https://hackmd.io/J1QG2rwERAKdknM_qgrhMA\" target=\"_blank\" title=\"https://hackmd.io/J1QG2rwERAKdknM_qgrhMA\">hackmd</a> and was starting to write stuff into it. I'd hoped to have this ready <em>before</em> this time slot but c'est la vie</p>",
        "id": 182987877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918153
    },
    {
        "content": "<p>also, I don't think we ever wrote up our notes from the last design meeting, where we talked about types, right?</p>",
        "id": 182988164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918311
    },
    {
        "content": "<p>I am around-ish. Enough to listen and respond to some comments (if we do talk about something), but not really enough to discuss in-depth</p>",
        "id": 182988170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575918312
    },
    {
        "content": "<p>ok, I'm going to edit the hackmd and leave random things in this channel :P</p>",
        "id": 182988183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918324
    },
    {
        "content": "<p>I was also talking to <span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> on Friday, who may have some time to pursue some of this work in January</p>",
        "id": 182988212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918353
    },
    {
        "content": "<p>That being said, I nominate we talk next week about the associated types problem</p>",
        "id": 182988216,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575918356
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/238\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/238\">#238</a> I think</p>",
        "id": 182988268,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575918370
    },
    {
        "content": "<p>yeah, that's probably a good idea</p>",
        "id": 182988280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918379
    },
    {
        "content": "<p>maybe I can add it to the calendar</p>",
        "id": 182988292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918387
    },
    {
        "content": "<p>I had some more time on the plane yesterday to play around with it more</p>",
        "id": 182988315,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575918409
    },
    {
        "content": "<p>I guess you mean <a href=\"https://github.com/rust-lang/chalk/issues/234\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/234\">https://github.com/rust-lang/chalk/issues/234</a></p>",
        "id": 182988346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918426
    },
    {
        "content": "<p>But there are some key questions that need to be discussed</p>",
        "id": 182988358,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575918430
    },
    {
        "content": "<p>Yes, that</p>",
        "id": 182988369,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575918440
    },
    {
        "content": "<p>Indeed, it's definitely a topic in the spirit I hope to use this meeting for more and more: one where the right answer is rather unclear</p>",
        "id": 182988384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918456
    },
    {
        "content": "<p>Maybe today, we can discuss/think about the rust-analyzer infinite loop problem?</p>",
        "id": 182988456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575918483
    },
    {
        "content": "<p>Yes. I've thought about that and I think I know the strategy I would like to pursue</p>",
        "id": 182988478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918502
    },
    {
        "content": "<p>It actually fits some of the work we've been doing</p>",
        "id": 182988490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918511
    },
    {
        "content": "<p>In short, the idea is to separate <em>unification</em> (syntactic equality) from <em>type relation</em> (Rust type equality)</p>",
        "id": 182988517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918530
    },
    {
        "content": "<p>Today we conflate them and that is part of what is leading us into trouble here</p>",
        "id": 182988546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918546
    },
    {
        "content": "<p>You may recall that in past meetings I talked about a similar theme</p>",
        "id": 182988566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918558
    },
    {
        "content": "<p>Sounds like <a href=\"https://github.com/rust-lang/rust/issues/234\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/234\">#234</a>?</p>",
        "id": 182988592,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575918581
    },
    {
        "content": "<p>Certainly related</p>",
        "id": 182988601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918589
    },
    {
        "content": "<p>When we were introducing the generic types, one of my goals was to take</p>",
        "id": 182988666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918608
    },
    {
        "content": "<p>clauses that include projection types</p>",
        "id": 182988682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918617
    },
    {
        "content": "<p>and compile them down</p>",
        "id": 182988685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918619
    },
    {
        "content": "<p>I probably talked about it in <a href=\"https://github.com/rust-lang/rust/issues/234\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/234\">#234</a>, yeah</p>",
        "id": 182988692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918624
    },
    {
        "content": "<p>so e.g. </p>\n<div class=\"codehilite\"><pre><span></span>forall&lt;T&gt; {\n    Foo(&lt;T as Iterator&gt;::Item: Blah&lt;T&gt;) :- ...\n}\n</pre></div>\n\n\n<p>might become</p>\n<div class=\"codehilite\"><pre><span></span>forall&lt;T, U&gt; {\n    Foo(U: Blah&lt;T&gt;) :- ProjectionEq(&lt;T as Iterator&gt;::Item -&gt; U), ...\n}\n</pre></div>",
        "id": 182988745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918672
    },
    {
        "content": "<p>That's somewhat the approach I've been taking playing around</p>",
        "id": 182988755,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575918679
    },
    {
        "content": "<p>I had that working but I stopped at some point because I realized there was a problem around higher-ranked things</p>",
        "id": 182988773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918699
    },
    {
        "content": "<p>but what I realized recently was that I was giving up too easily</p>",
        "id": 182988779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918705
    },
    {
        "content": "<p>in short when we are creating clauses (and goals) we can find all the cases where syntactic equality and Rust type equality diverge and compile them with a similar pattern:</p>",
        "id": 182988865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918739
    },
    {
        "content": "<p>introduce a variable + a clause that constraints the variable</p>",
        "id": 182988876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918745
    },
    {
        "content": "<p>On mobile,  so I can't link right now, but there was a couple tests that I found that are \"ambiguous\" now that seem like they should be unique</p>",
        "id": 182988909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575918772
    },
    {
        "content": "<p>Will link later</p>",
        "id": 182988917,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575918778
    },
    {
        "content": "<p>this comes up in I think 3 cases:</p>\n<ul>\n<li>lifetime parameters</li>\n<li>higher-ranked types (functions, dyn Traits)</li>\n<li>projections</li>\n</ul>",
        "id": 182988918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918779
    },
    {
        "content": "<p>the reason that I stumbled on this again <em>recently</em> is that I was trying to mock up the approach to region solving that I wanted to use, where chalk is responsible for handling higher-ranked lifetimes (cc <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>)</p>",
        "id": 182988982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918822
    },
    {
        "content": "<p>and to do <em>that</em> I found I really needed to separate out <em>syntactic</em> equality of lifetimes with <em>Rust equality</em></p>",
        "id": 182988997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918834
    },
    {
        "content": "<p>Can you elaborate on that?</p>",
        "id": 182989111,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575918893
    },
    {
        "content": "<p>e.g. I wanted to be able to write a transitive rule for lifetimes like so:</p>\n<div class=\"codehilite\"><pre><span></span>Outlives(A: C) :- Outlives(A: B), Outlives(B: C)\n</pre></div>\n\n\n<p>(the actual rule would be mildly different, but that's the idea)</p>",
        "id": 182989112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918894
    },
    {
        "content": "<blockquote>\n<p>Can we elaborate on that?</p>\n</blockquote>\n<p>doing so :)</p>",
        "id": 182989130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918903
    },
    {
        "content": "<p>the idea being that if you had in your environment something like <code>'a : 'b</code> and <code>'b: 'c</code>, I'd like to be able to find \"all the things that <code>'a</code> outlives in the environment\")</p>",
        "id": 182989181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918934
    },
    {
        "content": "<p>but right now whenever you try to equate two lifetimes in chalk, it always succeeds, and it generates a \"constraint\" that propagates out that says that the outer context must prove they are equal</p>",
        "id": 182989209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918958
    },
    {
        "content": "<p>the idea is that chalk can't solve all of those constraints itself, it <em>generates</em> constraints that are fed to the borrow checker later</p>",
        "id": 182989263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918971
    },
    {
        "content": "<p>(the idea I am exploring around higher-ranked lifetimes is basically saying: actually chalk <em>can</em> figure this out for higher-ranked cases like <code>forall&lt;'a&gt; { ... }</code>, precisely because in that case we're not supposed to assume anything other than what assumptions we've been explicitly given)</p>",
        "id": 182989320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919012
    },
    {
        "content": "<p>ordinarily I'd write some of this logic in Rust code</p>",
        "id": 182989349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919028
    },
    {
        "content": "<p>but I wanted to express it in the trait solver</p>",
        "id": 182989376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919046
    },
    {
        "content": "<p>and right now it can't because it's always treating all lifetimes as equal, effectively</p>",
        "id": 182989399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919064
    },
    {
        "content": "<p><em>anyway</em>, I can go more into that in a sec, but the same sort of problem is cropping up that causes the rust-analyzer infinite loop</p>",
        "id": 182989475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919094
    },
    {
        "content": "<p>Ok, on laptop now</p>",
        "id": 182989581,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575919196
    },
    {
        "content": "<p>Can you explain why this is ambiguous? <a href=\"https://github.com/rust-lang/chalk/blob/ba116c4d88f98358e9ff03eaa7fe84e6933fb377/tests/test/projection.rs#L454\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/ba116c4d88f98358e9ff03eaa7fe84e6933fb377/tests/test/projection.rs#L454\">https://github.com/rust-lang/chalk/blob/ba116c4d88f98358e9ff03eaa7fe84e6933fb377/tests/test/projection.rs#L454</a></p>",
        "id": 182989628,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575919206
    },
    {
        "content": "<p>Related?</p>",
        "id": 182989638,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575919214
    },
    {
        "content": "<blockquote>\n<p><em>anyway</em>, I can go more into that in a sec, but the same sort of problem is cropping up that causes the rust-analyzer infinite loop</p>\n</blockquote>\n<p>I'm pondering this statement I made and wondering how true it is</p>",
        "id": 182989669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919235
    },
    {
        "content": "<p>in particular, if we \"truncate\" some of the environment and introduce inference variables</p>",
        "id": 182989698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919264
    },
    {
        "content": "<p>or really any part of the query</p>",
        "id": 182989719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919278
    },
    {
        "content": "<p>the resulting answer could include values for those variables</p>",
        "id": 182989729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919287
    },
    {
        "content": "<p>anyway what we do now is to \"equate\" the type that was replaced with a variable with the type that the answer gave back</p>",
        "id": 182989772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919319
    },
    {
        "content": "<p>and I was proposing that we could switch that to syntactic equality</p>",
        "id": 182989826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919336
    },
    {
        "content": "<p>but actually that seems...wrong</p>",
        "id": 182989830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919339
    },
    {
        "content": "<p>e.g., if we had a query like <code>u32: Bar&lt;i32&gt;</code> (say) and we chose to truncate that to <code>u32: Bar&lt;?T&gt;</code></p>",
        "id": 182989871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919376
    },
    {
        "content": "<p>and then (from some impl) we get a result like <code>?T := &lt;vec::IntoIter&lt;i32&gt; as Iterator&gt;::Item</code></p>",
        "id": 182989917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919405
    },
    {
        "content": "<p>we'd prefer to determine that those are equal</p>",
        "id": 182989941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919428
    },
    {
        "content": "<blockquote>\n<p>e.g., if we had a query like <code>u32: Bar&lt;i32&gt;</code> (say) and we chose to truncate that to <code>u32: Bar&lt;?T&gt;</code></p>\n</blockquote>\n<p>this is the core mechanism of what we're doing, in case that wasn't clear; the assumption is that we can replace parts of the input with variables and that the solver will cope with that, though it may generate ambiguity where there was none before</p>",
        "id": 182990024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919472
    },
    {
        "content": "<blockquote>\n<p>Can you explain why this is ambiguous? <a href=\"https://github.com/rust-lang/chalk/blob/ba116c4d88f98358e9ff03eaa7fe84e6933fb377/tests/test/projection.rs#L454\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/ba116c4d88f98358e9ff03eaa7fe84e6933fb377/tests/test/projection.rs#L454\">https://github.com/rust-lang/chalk/blob/ba116c4d88f98358e9ff03eaa7fe84e6933fb377/tests/test/projection.rs#L454</a></p>\n</blockquote>\n<p>anyway, about this test</p>",
        "id": 182990047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919496
    },
    {
        "content": "<p>Why aren't we just leaving the <code>i32</code> there? Wouldn't that make solving easier?</p>",
        "id": 182990249,
        "sender_full_name": "detrumi",
        "timestamp": 1575919543
    },
    {
        "content": "<p>that ambiguity is not necessary, no, and I spent some time writing about various ways we might fix it in an issue somewhere</p>",
        "id": 182990260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919550
    },
    {
        "content": "<blockquote>\n<p>Why aren't we just leaving the <code>i32</code> there? Wouldn't that make solving easier?</p>\n</blockquote>\n<p>we do this when types get too big</p>",
        "id": 182990304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919562
    },
    {
        "content": "<p>in <em>principle</em> we can do it anywhere we like</p>",
        "id": 182990319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919568
    },
    {
        "content": "<p>it's been a bit, so I can't remember the exact details of how the infinite loop happens (though I did make a comment about it on the issue)</p>",
        "id": 182990322,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575919568
    },
    {
        "content": "<p>the infinite loop arises because</p>",
        "id": 182990341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919582
    },
    {
        "content": "<p>we have an input like <code>Foo: Bar&lt;&lt;T as Iterator&gt;::Item&gt;</code></p>",
        "id": 182990363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919597
    },
    {
        "content": "<p>we replace it with <code>Foo: Bar&lt;?X&gt;</code></p>",
        "id": 182990377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919604
    },
    {
        "content": "<p>it turns out that the query results in an answer where we just have <code>?X</code> unconstrained --</p>",
        "id": 182990396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919620
    },
    {
        "content": "<p>in particular we get back a mapping like <code>forall&lt;?Y&gt; [ ?X := ?Y ]</code></p>",
        "id": 182990424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919636
    },
    {
        "content": "<p>I don't think that's what's happening with this issue</p>",
        "id": 182990437,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575919650
    },
    {
        "content": "<p>to process this answer, we create a fresh inference variable for <code>?Y</code> and then we equate the \"old type\" with it</p>",
        "id": 182990442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919653
    },
    {
        "content": "<p>so we have to prove that <code>&lt;T as Iterator&gt;::Item = ?Y</code> for this fresh variable</p>",
        "id": 182990450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919661
    },
    {
        "content": "<p>that in turn generates a new obligation for us to prove</p>",
        "id": 182990457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919666
    },
    {
        "content": "<p>in never leaves that <code>loop</code></p>",
        "id": 182990458,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575919667
    },
    {
        "content": "<p>but that <em>new</em> obligation <em>also</em> has an environment that is too big</p>",
        "id": 182990465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919675
    },
    {
        "content": "<p>i.e., it has the same environment we started with</p>",
        "id": 182990469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919679
    },
    {
        "content": "<p>which then gets truncated again, starting us back on this cycle</p>",
        "id": 182990511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919685
    },
    {
        "content": "<p>one way to side-step this <em>particular</em> case would be</p>",
        "id": 182990526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919695
    },
    {
        "content": "<p>to recognize that if you have a variable in the answer that only appears once, it's meaningless</p>",
        "id": 182990540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919710
    },
    {
        "content": "<blockquote>\n<p>I don't think that's what's happening with this issue</p>\n</blockquote>\n<p>pretty sure it is</p>",
        "id": 182990547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919716
    },
    {
        "content": "<p>but not 100% sure :)</p>",
        "id": 182990558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919720
    },
    {
        "content": "<p>at least, that's what I observed when last I looked at it</p>",
        "id": 182990563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919726
    },
    {
        "content": "<p>maybe there are two problems?</p>",
        "id": 182990567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919729
    },
    {
        "content": "<p>in any case, the fix  that I did in <em>my</em> branch was to say that if you have</p>",
        "id": 182990603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919745
    },
    {
        "content": "<p>let me look over your comments once more real quickly</p>",
        "id": 182990611,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575919752
    },
    {
        "content": "<p>&lt;T as Iterator&gt;::Item = ?Y and ?Y is unconstrained,</p>",
        "id": 182990612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919752
    },
    {
        "content": "<p>it might be right just reading it wrong</p>",
        "id": 182990623,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575919761
    },
    {
        "content": "<p>you can just equate <code>?T</code> with <code>&lt;T as Iterator&gt;::Item</code> (i.e., the unnormalized form)</p>",
        "id": 182990624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919762
    },
    {
        "content": "<p>I dont' think this is <em>wrong</em></p>",
        "id": 182990629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919766
    },
    {
        "content": "<p>but I think we used to have an invariant that we never unified a variable with an unnormalized projection</p>",
        "id": 182990651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919780
    },
    {
        "content": "<p>this might in turn be useful for things like being more specific about what impls we want</p>",
        "id": 182990674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919798
    },
    {
        "content": "<p>your fix was just to avoid truncating the environment</p>",
        "id": 182990731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919810
    },
    {
        "content": "<p>that also seems \"ok for now\"</p>",
        "id": 182990743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919817
    },
    {
        "content": "<p>yes, that's right</p>",
        "id": 182990748,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575919821
    },
    {
        "content": "<p>my only hesitation was that, in general, we might move to a place where the environment can contain more variables</p>",
        "id": 182990766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919840
    },
    {
        "content": "<p>but today in Rust it doesn't really happen and maybe we just cross that bridge when we come to it</p>",
        "id": 182990778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919855
    },
    {
        "content": "<p>I think if we are going to do one of the two fixes I might prefer yours :)</p>",
        "id": 182990793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919862
    },
    {
        "content": "<p>it feels a bit more limited</p>",
        "id": 182990804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919867
    },
    {
        "content": "<p>that was my thought</p>",
        "id": 182990823,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575919879
    },
    {
        "content": "<p>we can always have a pending FIXME explaining the motivation and then considering other alternatives later as we've made progress elsewhere</p>",
        "id": 182990853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919905
    },
    {
        "content": "<p>ok, I'm convinced</p>",
        "id": 182990857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919907
    },
    {
        "content": "<p>I can land that PR</p>",
        "id": 182990863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919911
    },
    {
        "content": "<p>though definitely file a followup issue so we eventually try to write a test to break it again</p>",
        "id": 182990923,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575919937
    },
    {
        "content": "<p>Jack's solution feels like we're doing a fix for the symptom and not the problem, while niko's fix feels like a fix for a specific instance of a more general problem</p>",
        "id": 182990947,
        "sender_full_name": "detrumi",
        "timestamp": 1575919959
    },
    {
        "content": "<p>Basically, yeah</p>",
        "id": 182990966,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575919979
    },
    {
        "content": "<blockquote>\n<p>Jack's solution feels like we're doing a fix for the symptom and not the problem, while niko's fix feels like a fix for a specific instance of a more general problem</p>\n</blockquote>\n<p>yeah</p>",
        "id": 182990987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575919996
    },
    {
        "content": "<p>I'd rather treat the problem but I think we don't <em>quite</em> know how yet</p>",
        "id": 182991021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920013
    },
    {
        "content": "<p>I guess in particular hm</p>",
        "id": 182991038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920024
    },
    {
        "content": "<p>It's definitely going to overlap with <a href=\"https://github.com/rust-lang/rust/issues/234\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/234\">#234</a> though</p>",
        "id": 182991056,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575920037
    },
    {
        "content": "<p>I wonder if the only bad scenario is this case where the answer actually gave back no real information</p>",
        "id": 182991063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920039
    },
    {
        "content": "<p>perhaps, perhaps not</p>",
        "id": 182991067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920042
    },
    {
        "content": "<p>that's the thing I'm not quite sure of :)</p>",
        "id": 182991111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920045
    },
    {
        "content": "<p>fair enough</p>",
        "id": 182991167,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575920091
    },
    {
        "content": "<p>Anyway, I agree that Jack's fix is the way to go for now, since we're not sure yet how to fix the problem, or where else it will pop up. The only danger is that we introduce special cases which we might forget to remove after the problem is fixed</p>",
        "id": 182991432,
        "sender_full_name": "detrumi",
        "timestamp": 1575920241
    },
    {
        "content": "<blockquote>\n<p>that ambiguity is not necessary, no, and I spent some time writing about various ways we might fix it in an issue somewhere</p>\n</blockquote>\n<p>so, it should be <code>unique</code> ideally?</p>",
        "id": 182991524,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575920288
    },
    {
        "content": "<p>Yes. I think the question though is</p>",
        "id": 182991538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920303
    },
    {
        "content": "<p>where to detect that</p>",
        "id": 182991541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920305
    },
    {
        "content": "<p>I have so far been leaning towards making this the job of the \"anti-unifier\"</p>",
        "id": 182991554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920321
    },
    {
        "content": "<p>though in some ways it seems suboptimal</p>",
        "id": 182991564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920327
    },
    {
        "content": "<p>I guess I might as well walk through a bit what's going on there</p>",
        "id": 182991571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920338
    },
    {
        "content": "<p>since we have been chatting this much anyway :)</p>",
        "id": 182991579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920345
    },
    {
        "content": "<p>or should we keep it for a dedicated meeting?</p>",
        "id": 182991588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920352
    },
    {
        "content": "<p>I guess I can give the short version for now</p>",
        "id": 182991605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920372
    },
    {
        "content": "<p>I wouldn't mind walking through it</p>",
        "id": 182991622,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575920387
    },
    {
        "content": "<p>on my branches, I've actually gotten the to be unique</p>",
        "id": 182991632,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575920399
    },
    {
        "content": "<p>basically the problem is that, in general, there are two ways to deal with \"projections\". You can either think about them as <em>placeholders</em> or you can normalize them.</p>",
        "id": 182991633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920399
    },
    {
        "content": "<p>Sometimes you only have one route available</p>",
        "id": 182991678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920405
    },
    {
        "content": "<p>though, I'm running into issues with the AntiUnifier</p>",
        "id": 182991679,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575920408
    },
    {
        "content": "<p>e.g., <code>forall&lt;T&gt; { if (T: Iterator) { ... } }</code></p>",
        "id": 182991686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920414
    },
    {
        "content": "<p>it's <em>too</em> dumb</p>",
        "id": 182991690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575920417
    },
    {
        "content": "<p>in there, if you have a type <code>T::Item</code></p>",
        "id": 182991703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920424
    },
    {
        "content": "<p>or, more accurately, <code>&lt;T as Iterator&gt;::Item</code></p>",
        "id": 182991713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920437
    },
    {
        "content": "<p>there is really only one option for it, which is to think of it as a placeholder</p>",
        "id": 182991741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920464
    },
    {
        "content": "<p>in chalk we model this as a kind of \"applicative\" type</p>",
        "id": 182991749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920476
    },
    {
        "content": "<p>you might sometimes see <code>(Iterator::Item)&lt;T&gt;</code></p>",
        "id": 182991758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920485
    },
    {
        "content": "<p>that is kind of the \"placeholder\" for <code>&lt;T as Iterator&gt;::Item</code></p>",
        "id": 182991761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920493
    },
    {
        "content": "<p>it means \"whatever the item type of <code>T</code> is\"</p>",
        "id": 182991767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920499
    },
    {
        "content": "<p>the other option is that, if you can find an impl, you can normalize it</p>",
        "id": 182991786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920516
    },
    {
        "content": "<p>so e.g. <code>&lt;vec::IntoIter&lt;i32&gt; as Iterator&gt;::Item</code> can be normalized to <code>i32</code></p>",
        "id": 182991836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920531
    },
    {
        "content": "<p>and of course sometimes we have information from our environment; in Rust notation, <code>where T: Iterator&lt;Item = u32&gt;</code></p>",
        "id": 182991872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920565
    },
    {
        "content": "<p>anyway what we do in the <em>compiler</em> is to kind of have a \"normalization\" function that that tries to find an impl etc and falls back to the placeholder</p>",
        "id": 182991910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920599
    },
    {
        "content": "<p>that is kind of an \"if (...) else if (...)\"</p>",
        "id": 182991917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920609
    },
    {
        "content": "<p>this is not something that \"plain logic\" can model very well</p>",
        "id": 182991922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920617
    },
    {
        "content": "<p>so in chalk what we have more like two possible rules, one that says \"normalize from an impl\" and one that says \"use the placeholder\"</p>",
        "id": 182991950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920642
    },
    {
        "content": "<p>but this also means you get back two possible answers</p>",
        "id": 182991984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920653
    },
    {
        "content": "<p>in principle we could introduce some \"cuts\" or other things to kind of try one alterantive and -- if it fails -- try the other</p>",
        "id": 182992027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920684
    },
    {
        "content": "<p>but I'm a bit nervous about it</p>",
        "id": 182992048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920702
    },
    {
        "content": "<p>That seems like a big step</p>",
        "id": 182992080,
        "sender_full_name": "detrumi",
        "timestamp": 1575920723
    },
    {
        "content": "<p>there are some complex scenarios but also</p>",
        "id": 182992084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920725
    },
    {
        "content": "<p>there are times when you have recursion during normalization, at least you can -- I'd like to dig a more into rustc to help spell out some of the scenarios where I remember this cropping up</p>",
        "id": 182992118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920759
    },
    {
        "content": "<p>but suffice to say if we added cuts, we also have to address the question of cycles</p>",
        "id": 182992167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920771
    },
    {
        "content": "<p>e.g., if we are in the process of solving <code>Normalize(&lt;T as Iterator&gt;::Item = ?U)</code> and we wind up needing to solve that same query recursively --</p>",
        "id": 182992187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920791
    },
    {
        "content": "<p>does that mean we \"failed to normalize\"? and hence we can fallback to the placeholder?</p>",
        "id": 182992198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920805
    },
    {
        "content": "<p>but if we fallback then, what about the <em>outer</em> <code>Normalize</code> goal -- it may still succeed</p>",
        "id": 182992211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920820
    },
    {
        "content": "<p>and now we had a kind of inconsistency</p>",
        "id": 182992218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920824
    },
    {
        "content": "<p>This is why I was curious to see whether we could keep the current structure, which is naive but clear</p>",
        "id": 182992252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920852
    },
    {
        "content": "<p>but the problem with the current one is:</p>",
        "id": 182992258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920860
    },
    {
        "content": "<ul>\n<li>it produces two answers, maybe we can resolve that at the outer levels</li>\n</ul>",
        "id": 182992264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920867
    },
    {
        "content": "<p>but also</p>",
        "id": 182992265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920867
    },
    {
        "content": "<ul>\n<li>internally there may be cases where it produces two answers, meaning we may be doing \"twice as much work\" in some cases</li>\n</ul>",
        "id": 182992278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920878
    },
    {
        "content": "<p>So, what I've been trying out locally is instead keeping track of basically what a projection \"normalizes to\" in the answer itself</p>",
        "id": 182992315,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575920883
    },
    {
        "content": "<p>(maybe this doesn't show up at the outer levels as two answers)</p>",
        "id": 182992326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920887
    },
    {
        "content": "<p>(side note: One of the things I had hoped to be true of chalk is that it let us kind of unify \"normalizations\" and other kinds of goals into one framework; that may just not work out as I had hoped, but oh well)</p>",
        "id": 182992403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920952
    },
    {
        "content": "<blockquote>\n<p>So, what I've been trying out locally is instead keeping track of basically what a projection \"normalizes to\" in the answer itself</p>\n</blockquote>\n<p>say a bit more</p>",
        "id": 182992422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575920968
    },
    {
        "content": "<p>sure</p>",
        "id": 182992433,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575920978
    },
    {
        "content": "<p>hold on, gonna try to find the test I'm thinking of</p>",
        "id": 182992528,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921036
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/ba116c4d88f98358e9ff03eaa7fe84e6933fb377/tests/test/projection.rs#L123\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/ba116c4d88f98358e9ff03eaa7fe84e6933fb377/tests/test/projection.rs#L123\">https://github.com/rust-lang/chalk/blob/ba116c4d88f98358e9ff03eaa7fe84e6933fb377/tests/test/projection.rs#L123</a></p>",
        "id": 182992546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921052
    },
    {
        "content": "<p>So, here the answers that we get back today are <code>(Trait1::Type)&lt;S&gt;</code> and <code>u32</code></p>",
        "id": 182992586,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921089
    },
    {
        "content": "<p>And the aggregator can't aggregate these</p>",
        "id": 182992612,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921108
    },
    {
        "content": "<p>instead, the answers could be <code>(Trait1::Type)&lt;S&gt;</code> (the unnormalized placeholder) and <code>(Trait1::Type)&lt;S&gt; as u32</code> (the normalized type)</p>",
        "id": 182992694,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921146
    },
    {
        "content": "<p>Then the aggregator can aggregate these</p>",
        "id": 182992705,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921159
    },
    {
        "content": "<p>Which, this doesn't seem too effective alone</p>",
        "id": 182992732,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921177
    },
    {
        "content": "<p>But you can also think about the case where there may be multiple answers (not just one)</p>",
        "id": 182992766,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921195
    },
    {
        "content": "<p>yeah so I was imaining just having the aggregator see</p>",
        "id": 182992769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921196
    },
    {
        "content": "<p>if there are two types, and one of them is a placeholder</p>",
        "id": 182992779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921203
    },
    {
        "content": "<p>it can go ahead and try to normalize the placeholder to the other type</p>",
        "id": 182992796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921210
    },
    {
        "content": "<p>if that succeeds, it can discard the placeholder</p>",
        "id": 182992806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921224
    },
    {
        "content": "<p>but i'm not sure how easy that would be to do in practice :)</p>",
        "id": 182992818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921233
    },
    {
        "content": "<p>this would however be a boolean query</p>",
        "id": 182992838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921242
    },
    {
        "content": "<p>it would have at most one answer, in other words</p>",
        "id": 182992878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921248
    },
    {
        "content": "<p>So, so you have <code>(Trait1::Type)&lt;S&gt; as u32</code> and <code>(Trait1::Type)&lt;T&gt; as i32</code></p>",
        "id": 182992886,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921254
    },
    {
        "content": "<p>sure, that can happen, but that's ok</p>",
        "id": 182992920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921277
    },
    {
        "content": "<p>those are distinct types</p>",
        "id": 182992925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921279
    },
    {
        "content": "<p>the aggregator could change this to <code>(Trait1::Type)&lt;?0&gt;</code></p>",
        "id": 182992945,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921292
    },
    {
        "content": "<p>(I wrote an actually test in one my branches, but a bit distracted, so I'll have to find it later)</p>",
        "id": 182992985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921318
    },
    {
        "content": "<p>I guess I'm nervous about tracking the normalization this way</p>",
        "id": 182992999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921332
    },
    {
        "content": "<p>though I'm trying to put my finger on why</p>",
        "id": 182993007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921340
    },
    {
        "content": "<p>That's fair enough</p>",
        "id": 182993028,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921355
    },
    {
        "content": "<p>I was going to say that I don't like to have multiple equal representations or a type, but of course we do today, which is sort of the whole problem</p>",
        "id": 182993079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921366
    },
    {
        "content": "<p>I guess also i'm not sure I see that it solves the underlying challenge</p>",
        "id": 182993094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921375
    },
    {
        "content": "<p>I've also played with removing the placeholder type entirely</p>",
        "id": 182993095,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921375
    },
    {
        "content": "<p>( or at least not in a <em>better</em> way that having the aggregator do a normalization query, though I should try to determine what I mean by \"better\" there )</p>",
        "id": 182993150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921406
    },
    {
        "content": "<p>that said, there are some other alterantvies</p>",
        "id": 182993167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921418
    },
    {
        "content": "<p>for example, there's a paper that aims to handle normalization in a haskell context</p>",
        "id": 182993189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921428
    },
    {
        "content": "<p>I saw that</p>",
        "id": 182993199,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921435
    },
    {
        "content": "<p>I think that amounts to taking more the approach I was outlining in the beginning, at least from what I glean so far from reading and pondering it</p>",
        "id": 182993219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921451
    },
    {
        "content": "<p>basically trying to make normalization be more of a function that converts things to a canonical form</p>",
        "id": 182993238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921463
    },
    {
        "content": "<p>How would the aggregator handle <code>(Trait1::Type)&lt;S&gt;</code> <code>u32</code> <code>(Trait1::Type)&lt;T&gt;</code> <code>i32</code></p>",
        "id": 182993251,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921472
    },
    {
        "content": "<p>especially if <code>u32</code> and <code>i32</code> came first?</p>",
        "id": 182993309,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921484
    },
    {
        "content": "<p>it would just give <code>?X</code></p>",
        "id": 182993322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921491
    },
    {
        "content": "<p>(since order isn't specified)</p>",
        "id": 182993324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921491
    },
    {
        "content": "<p>but that seems ok</p>",
        "id": 182993326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921493
    },
    {
        "content": "<p>I am not convinced we <em>should</em> handle that case, I guess</p>",
        "id": 182993351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921507
    },
    {
        "content": "<p>let me see if I can find the test case</p>",
        "id": 182993371,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921521
    },
    {
        "content": "<p>in particular that's a kind of weird answer</p>",
        "id": 182993378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921525
    },
    {
        "content": "<p>it's saying \"the answer is some <code>Type</code> projected from <em>something</em> (but I don't know what)\"</p>",
        "id": 182993408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921539
    },
    {
        "content": "<p>that maybe true for some values of something</p>",
        "id": 182993413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921543
    },
    {
        "content": "<p>but likely not all</p>",
        "id": 182993436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921553
    },
    {
        "content": "<p>and it is sort of not... <em>required</em> to project <code>Type</code> from something to reach that answer, right?</p>",
        "id": 182993459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921563
    },
    {
        "content": "<p>in other words, the aggregator is supposed to be giving back things that are \"required\" -- the only query that could succeed would be one that included these components</p>",
        "id": 182993493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921585
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/compare/master...jackh726:associated_types#diff-055bea933f4bb1135dd71fa066e5d457R1301\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/compare/master...jackh726:associated_types#diff-055bea933f4bb1135dd71fa066e5d457R1301\">https://github.com/rust-lang/chalk/compare/master...jackh726:associated_types#diff-055bea933f4bb1135dd71fa066e5d457R1301</a></p>",
        "id": 182993496,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921588
    },
    {
        "content": "<p>this is a bit of a weird case because the two things are kind of aliases for one another</p>",
        "id": 182993512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921597
    },
    {
        "content": "<p>( yeah, I guess I feel ok with coming back with <code>?</code> in that case )</p>",
        "id": 182993639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921651
    },
    {
        "content": "<p>but it is somewhat interesting</p>",
        "id": 182993661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921666
    },
    {
        "content": "<p>So with that test, you could give back<code>?0 = ^0, ?1 = (Trait1::Type)&lt;^0&gt;</code></p>",
        "id": 182993710,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921700
    },
    {
        "content": "<p>ok, we're at the end of an hour, but this was a good intro, let's dive deeper next time, in the meantime I want to push a bit more on that hackmd :P -- also, I'd like to merge your PR <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, though I think I want to add my test case to it</p>",
        "id": 182993769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921723
    },
    {
        "content": "<p>yeah I have to go</p>",
        "id": 182993786,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921734
    },
    {
        "content": "<p>I added the test :)</p>",
        "id": 182993799,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921743
    },
    {
        "content": "<p>We can make a hackmd for this</p>",
        "id": 182993817,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921754
    },
    {
        "content": "<p>I'll also link my branches for later</p>",
        "id": 182993823,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921760
    },
    {
        "content": "<p>(or in the hackmd)</p>",
        "id": 182993829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921765
    },
    {
        "content": "<p>Can one of you link that paper as well?</p>",
        "id": 182993874,
        "sender_full_name": "detrumi",
        "timestamp": 1575921798
    },
    {
        "content": "<p><a href=\"https://hackmd.io/nQyCMpIvTQe5DsC90qFSKg\" target=\"_blank\" title=\"https://hackmd.io/nQyCMpIvTQe5DsC90qFSKg\">hackmd for normalization, next meeting</a></p>",
        "id": 182993911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921830
    },
    {
        "content": "<p>feel free to add notes there etc</p>",
        "id": 182993924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575921838
    },
    {
        "content": "<p>I'll add the paper</p>",
        "id": 182994076,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921930
    },
    {
        "content": "<p>Another thought for next week is if we actually need <code>Normalize</code> or if we can get away with just <code>ProjectionEq</code>. They seem redundant.</p>",
        "id": 182994188,
        "sender_full_name": "Jack Huey",
        "timestamp": 1575921996
    },
    {
        "content": "<p>Yeah, I'm trying to remember why we have both. I don't think they're redundant but they may be. When we introducd these changes we had a different solver than was less general, and we may have been trying to work around some of its limitations (<span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> may remember, but I doubt it, it was a while ago).</p>",
        "id": 182994384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575922124
    }
]