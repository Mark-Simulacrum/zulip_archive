[
    {
        "content": "<p>So, I'm entirely sure what we should discuss today.</p>\n<p>Last week, we had a zoom meeting where we decided that we wanted to make the focus of 2021 be \"async fn in traits\", with that encompassing a few different features: 1) Named impl trait 2) GATs with lifetimes 3) Some impl trait lifetime inference extensions 4) Possibly extending GATs with non-lifetime types 5) Possibly other kinds of sugar</p>\n<p>I think we also decided that the next steps would be to \"take stock\" of the current state of the features and decide on their next steps. We probably expected this bit to be async. But we could also just a spend a meeting each for named impl trait and GATs to go over them. This might require a bit of prep work from someone (likely me or <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, maybe <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>) in terms of going over the relevant RFC, looking at current relevant issues, looking at relevant tests, and maybe just playing with some code. All in order to \"get prepared\" to help drive the discussion.</p>\n<p>For this meeting though, maybe if might be best to just give <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> an hour of sync discussion about the open PRs on his plate to review <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> I would actually like some sync conversation on the rustc binder refactor, but that doesn't necessarily have to be in this meeting.</p>\n<p>Anyways, open to thoughts here from <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> or others</p>",
        "id": 224080686,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611685102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> around?</p>",
        "id": 224102571,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611694935
    },
    {
        "content": "<p>I'm around</p>",
        "id": 224102597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611694945
    },
    {
        "content": "<p>Let me read what you wrote :)</p>",
        "id": 224102743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695009
    },
    {
        "content": "<p>I am still on board with this plan and I've been thinking more about it</p>",
        "id": 224102769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695020
    },
    {
        "content": "<p>(That is, the plan of having async fn in traits be a major focus)</p>",
        "id": 224102816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695036
    },
    {
        "content": "<p>I started a hackmd, as an aside</p>",
        "id": 224102900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695056
    },
    {
        "content": "<p><a href=\"https://hackmd.io/5kCE2T6sTDijhqMx8kaikw\">https://hackmd.io/5kCE2T6sTDijhqMx8kaikw</a></p>",
        "id": 224102914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695065
    },
    {
        "content": "<p>Kind of cleaned up, simplified version of our discussion</p>",
        "id": 224102932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695075
    },
    {
        "content": "<p>Oh awesome</p>",
        "id": 224102961,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695090
    },
    {
        "content": "<p>I woudl be game to spend this hour doing reviews and sync discussion, in any case</p>",
        "id": 224102969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695098
    },
    {
        "content": "<p>We (<span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>, <span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span>, and I) just finished a quick zoom meeting doing some discussion related to type library</p>",
        "id": 224103000,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695117
    },
    {
        "content": "<p>Ah, nice</p>",
        "id": 224103024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695130
    },
    {
        "content": "<p>I wanted to figure out if/where that falls on this list -- or maybe it's a separate list</p>",
        "id": 224103035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695137
    },
    {
        "content": "<p>It's separate, I think</p>",
        "id": 224103075,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695152
    },
    {
        "content": "<p>i'm going to 'mark all messages' as read in this stream</p>",
        "id": 224103081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695156
    },
    {
        "content": "<p>forgive me ;p</p>",
        "id": 224103086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695158
    },
    {
        "content": "<p>i'm not 100% sure they are separate, but they are somewhat separate</p>",
        "id": 224103162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695178
    },
    {
        "content": "<p>they might start to be entangled if/when we extend GATs to cover types</p>",
        "id": 224103193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695195
    },
    {
        "content": "<p>there comes some point where we are extending the expressiveness of the system to the point that we're re-inventing chalk</p>",
        "id": 224103237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695217
    },
    {
        "content": "<p>When I say separate, I mean that the work on the type library doesn't directly overlap with implementing/stabilizing the features here</p>",
        "id": 224103290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-01-26/near/224103237\">said</a>:</p>\n<blockquote>\n<p>there comes some point where we are extending the expressiveness of the system to the point that we're re-inventing chalk</p>\n</blockquote>\n<p>I did briefly speak about this on the call</p>",
        "id": 224103291,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695252
    },
    {
        "content": "<p>I know nothing about this</p>",
        "id": 224103444,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695324
    },
    {
        "content": "<p>Just saw <a href=\"https://github.com/rust-lang/rust/issues/61997\">#61997</a></p>",
        "id": 224103445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695324
    },
    {
        "content": "<p>Did you want to talk about open PRs today?</p>",
        "id": 224103463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695337
    },
    {
        "content": "<p>Sure</p>",
        "id": 224103475,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695344
    },
    {
        "content": "<p>I figured that's a good use of time</p>",
        "id": 224103487,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695353
    },
    {
        "content": "<p>Let's start with chalk PRs</p>",
        "id": 224103504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695369
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/661\">chalk#661</a></p>",
        "id": 224103552,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695391
    },
    {
        "content": "<p>quick question first</p>",
        "id": 224103555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LÃ©o Lanteri Thauvin</span> -- is <a href=\"https://github.com/rust-lang/rust/pull/79951\">https://github.com/rust-lang/rust/pull/79951</a> basically \"ready to go\"?</p>",
        "id": 224103609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695405
    },
    {
        "content": "<p>I guess I see some late-breaking comments</p>",
        "id": 224103617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695412
    },
    {
        "content": "<p>yes</p>",
        "id": 224103618,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695413
    },
    {
        "content": "<p>I was skimming my review queue</p>",
        "id": 224103623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695416
    },
    {
        "content": "<p>ok, it looked that way</p>",
        "id": 224103629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695420
    },
    {
        "content": "<p>ok, <a href=\"https://github.com/rust-lang/chalk/issues/661\">chalk#661</a></p>",
        "id": 224103675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695442
    },
    {
        "content": "<p>I mean, I do see a couple comments, but those could be moved to a later PR</p>",
        "id": 224103695,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-01-26/near/224103675\">said</a>:</p>\n<blockquote>\n<p>ok, <a href=\"https://github.com/rust-lang/chalk/issues/661\">chalk#661</a></p>\n</blockquote>\n<p>Okay, so</p>",
        "id": 224103707,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695460
    },
    {
        "content": "<p>This is essentially just cleanup, no \"semantic\" changes</p>",
        "id": 224103725,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695472
    },
    {
        "content": "<p>OK, Im skimming quickly</p>",
        "id": 224103768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695512
    },
    {
        "content": "<p>I'm inclined to r+ though</p>",
        "id": 224103773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-01-26/near/224103609\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"255061\">LÃ©o Lanteri Thauvin</span> -- is <a href=\"https://github.com/rust-lang/rust/pull/79951\">https://github.com/rust-lang/rust/pull/79951</a> basically \"ready to go\"?</p>\n</blockquote>\n<p>It should be</p>",
        "id": 224103781,
        "sender_full_name": "LÃ©o Lanteri Thauvin",
        "timestamp": 1611695521
    },
    {
        "content": "<p>I just r+'d <a href=\"https://github.com/rust-lang/rust/issues/79951\">#79951</a></p>",
        "id": 224103824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-01-26/near/224103725\">said</a>:</p>\n<blockquote>\n<p>This is essentially just cleanup, no \"semantic\" changes</p>\n</blockquote>\n<p>The bullet points do a good job of summarizing</p>",
        "id": 224103874,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695565
    },
    {
        "content": "<p>Basically, 1) we use the <code>chalk-solve</code> InferenceTable in chalk-engine and chalk-recursive</p>",
        "id": 224104021,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695618
    },
    {
        "content": "<p>2) <code>CanonicalStrand</code> is now just <code>Canonical&lt;Strand&gt;</code> and the <code>InferenceTable</code> in <code>Strand</code> is passed separately</p>",
        "id": 224104199,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695646
    },
    {
        "content": "<p>3) <code>Variances</code> shares some of the slice interners macro code</p>",
        "id": 224104342,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695675
    },
    {
        "content": "<p>this all seems great</p>",
        "id": 224104529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695715
    },
    {
        "content": "<p>I'm going to just trust you and r+ :P</p>",
        "id": 224104542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695721
    },
    {
        "content": "<p>Works for me</p>",
        "id": 224104564,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695732
    },
    {
        "content": "<p>\"2 way door\", as amazon people would say</p>",
        "id": 224104603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695749
    },
    {
        "content": "<p>anyway, go on</p>",
        "id": 224104609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695751
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/671\">chalk#671</a></p>",
        "id": 224104671,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695767
    },
    {
        "content": "<p>This one is more complicated</p>",
        "id": 224104680,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695773
    },
    {
        "content": "<p>But the problem here is that a goal like</p>\n<div class=\"codehilite\"><pre><span></span><code>            exists&lt;&#39;a&gt; {\n                if (FromEnv(&amp;&#39;a ())) {\n                    WellFormed(&amp;&#39;a ())\n                }\n            }\n</code></pre></div>\n<p>was running into problems</p>",
        "id": 224104751,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695811
    },
    {
        "content": "<p>For a couple different reasons</p>",
        "id": 224104781,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695835
    },
    {
        "content": "<p>mmm</p>",
        "id": 224104913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695892
    },
    {
        "content": "<p>This became apparent when I tried to upgrade chalk in rustc since the canonical program clauses refactor</p>",
        "id": 224104929,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695905
    },
    {
        "content": "<p>putting inference variables in the environment is probably fairly fishy and poorly tested</p>",
        "id": 224104937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695910
    },
    {
        "content": "<p>rustc does it a lot</p>",
        "id": 224104969,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695930
    },
    {
        "content": "<p>really?</p>",
        "id": 224104983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695940
    },
    {
        "content": "<p>Or at least, some form of this</p>",
        "id": 224104985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611695941
    },
    {
        "content": "<p>interesting</p>",
        "id": 224105026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695961
    },
    {
        "content": "<p>if you have an example of where it happens in rustc, I'd be curious</p>",
        "id": 224105037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611695971
    },
    {
        "content": "<p>huh, kinda weird to put inference vars in the environment, shouldn't inference vars always be scoped somewhere?</p>",
        "id": 224105064,
        "sender_full_name": "detrumi",
        "timestamp": 1611695988
    },
    {
        "content": "<p>in <em>principle</em> it should work</p>",
        "id": 224105099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696000
    },
    {
        "content": "<p>It might be canonical vars in the enviroment for rustc</p>",
        "id": 224105155,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696011
    },
    {
        "content": "<p>I'm not sure if/when we will need it, I could imagine it coming up</p>",
        "id": 224105159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696013
    },
    {
        "content": "<p>Well, the changes in this PR are needed for <a href=\"https://github.com/rust-lang/rust/issues/80593\">#80593</a> to work</p>",
        "id": 224105224,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696044
    },
    {
        "content": "<p>I'll have to get you the list of failing chalkify tests without this</p>",
        "id": 224105314,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696099
    },
    {
        "content": "<p>but it's basically like 70% of them</p>",
        "id": 224105327,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696105
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>                     let clauses = subst.apply(clauses, context.program().interner());\n</code></pre></div>\n\n</blockquote>",
        "id": 224105338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696114
    },
    {
        "content": "<p>that seems suspicious to me</p>",
        "id": 224105349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696117
    },
    {
        "content": "<p>from <a href=\"https://github.com/rust-lang/chalk/pull/671/files#diff-53486c610ab9bd93077fcccfb0f45d0c38708b8d3188fdd44ceda4494b5d852aR283\">this line</a></p>",
        "id": 224105417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696137
    },
    {
        "content": "<p>There's a few suspicious things in this PR tbh</p>",
        "id": 224105420,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696138
    },
    {
        "content": "<p>the reason is that I expect the output from <code>program_clauses_for_goal</code> to have no free variables</p>",
        "id": 224105436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696152
    },
    {
        "content": "<p>(\"closed terms\")</p>",
        "id": 224105448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696159
    },
    {
        "content": "<p>so that the substitution would be a no-op</p>",
        "id": 224105458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696165
    },
    {
        "content": "<p>we've definitely failed on this before</p>",
        "id": 224105466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696171
    },
    {
        "content": "<p>It does when the environment does</p>",
        "id": 224105493,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696186
    },
    {
        "content": "<p>in places where we were copying types and things out from the goal</p>",
        "id": 224105497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696187
    },
    {
        "content": "<p>hmm</p>",
        "id": 224105502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696192
    },
    {
        "content": "<p>ok</p>",
        "id": 224105507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696195
    },
    {
        "content": "<p>I see</p>",
        "id": 224105511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696197
    },
    {
        "content": "<p>I wonder</p>",
        "id": 224105531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696205
    },
    {
        "content": "<p>Actually yeah, let me write a better example</p>",
        "id": 224105536,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696207
    },
    {
        "content": "<p>maybe we should separate out the \"from env\" part</p>",
        "id": 224105557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696217
    },
    {
        "content": "<p>from the other part</p>",
        "id": 224105561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696219
    },
    {
        "content": "<p>Essentially, there are <code>Canonical</code> bound vars and the environment is referring to them</p>",
        "id": 224105591,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696233
    },
    {
        "content": "<p>and invoke the \"for environment\" part on the instantiated version</p>",
        "id": 224105593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696233
    },
    {
        "content": "<p>That would solve it</p>",
        "id": 224105682,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696266
    },
    {
        "content": "<p>And remove a lot of the hacks here</p>",
        "id": 224105693,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696271
    },
    {
        "content": "<p>Would have to extend that the recursive solver too (same problem)</p>",
        "id": 224105728,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696290
    },
    {
        "content": "<p>I think I would prefer that</p>",
        "id": 224105791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696320
    },
    {
        "content": "<p>Well, I'm trying to think: I'm not sure it would solve the <code>Constraints</code> issue</p>",
        "id": 224105809,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696328
    },
    {
        "content": "<p>I'd like an assertion on the output from <code>program_clauses_for_goal</code> that it has no free variables, too</p>",
        "id": 224105819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696334
    },
    {
        "content": "<p>to catch future oversights</p>",
        "id": 224105842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-01-26/near/224105809\">said</a>:</p>\n<blockquote>\n<p>Well, I'm trying to think: I'm not sure it would solve the <code>Constraints</code> issue</p>\n</blockquote>\n<p>which issue is this?</p>",
        "id": 224105853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696352
    },
    {
        "content": "<p>We have that assertion further down, I think. But it doesn't cover env clauses</p>",
        "id": 224105928,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-01-26/near/224105853\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-01-26/near/224105809\">said</a>:</p>\n<blockquote>\n<p>Well, I'm trying to think: I'm not sure it would solve the <code>Constraints</code> issue</p>\n</blockquote>\n<p>which issue is this?</p>\n</blockquote>\n<p>This is the other side of this coin: When the environment refers to the canonically bound vars, the code we have related to <code>Constraints</code> breaks</p>",
        "id": 224106004,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696412
    },
    {
        "content": "<p>It's been a bit, so I'm not super clear on the details</p>",
        "id": 224106048,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696433
    },
    {
        "content": "<p>In this PR, I didn't solve that, I just put it off by not including the environment in <code>Constraint</code>s</p>",
        "id": 224106232,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696523
    },
    {
        "content": "<p>I'm trying to bring this back in cache a bit</p>",
        "id": 224106322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696565
    },
    {
        "content": "<p>a <code>Constraint</code> is the output for the region solver?</p>",
        "id": 224106360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696590
    },
    {
        "content": "<p>we're at \"talk to me like I'm 5\" level here ;)</p>",
        "id": 224106375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696600
    },
    {
        "content": "<p>I guess we don't need the environment <em>for now</em></p>",
        "id": 224106437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696611
    },
    {
        "content": "<p>(ah, yes, resolving the \"how to communicate region constraints and integrate polonius\" problem...)</p>",
        "id": 224106482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696630
    },
    {
        "content": "<p>Uh, <code>Constraint</code> is something like <code>!1_0: !1_1</code></p>",
        "id": 224106502,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696639
    },
    {
        "content": "<p>right</p>",
        "id": 224106519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696646
    },
    {
        "content": "<p>Yeah, basically this is a bigger design question that I think for now we can just ignore the environment until we solve</p>",
        "id": 224106564,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696672
    },
    {
        "content": "<p>should have really called that <code>OutlivesConstraint</code> or something</p>",
        "id": 224106566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696673
    },
    {
        "content": "<p>I think that's ok</p>",
        "id": 224106578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696677
    },
    {
        "content": "<p>I agree we should kick the can down the road</p>",
        "id": 224106597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696686
    },
    {
        "content": "<p>Okay, then I will split the <code>program_clauses_for_goal</code> into an environment bit and the canonical goal bit</p>",
        "id": 224106660,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696720
    },
    {
        "content": "<p>should we break this into multiple PRs?</p>",
        "id": 224106716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696731
    },
    {
        "content": "<p>e.g., can the constraint bit be separated?</p>",
        "id": 224106725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696737
    },
    {
        "content": "<p>Maybe?</p>",
        "id": 224106752,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696752
    },
    {
        "content": "<p>I guess it's not too much code</p>",
        "id": 224106765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696760
    },
    {
        "content": "<p>Yeah, it's literally one line</p>",
        "id": 224106781,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696770
    },
    {
        "content": "<p>There's also a little cleanup in here (adding a <code>Substitute</code> trait that essentially generalizes <code>Substituion::apply</code>)</p>",
        "id": 224106959,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696850
    },
    {
        "content": "<p>Which I can/will split out</p>",
        "id": 224106969,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696859
    },
    {
        "content": "<p>I see a few misc cleanups, yeah, might be ncie to factor those out</p>",
        "id": 224107009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696882
    },
    {
        "content": "<p>ok, next PR :)</p>",
        "id": 224107017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611696888
    },
    {
        "content": "<p>Okay, that's it for chalk</p>",
        "id": 224107073,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696927
    },
    {
        "content": "<p>now the tough one :)</p>",
        "id": 224107081,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696931
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/76814\">#76814</a></p>",
        "id": 224107123,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696951
    },
    {
        "content": "<p>I'm gonna assume that you saw <em>none</em> of my ramblings in the other thread about the interaction between super trait HRTBs and associated type bounds</p>",
        "id": 224107235,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611696990
    },
    {
        "content": "<p>probably true</p>",
        "id": 224107252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697000
    },
    {
        "content": "<p>though we've talked about this from time to time</p>",
        "id": 224107270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697007
    },
    {
        "content": "<p>heh, that's a nice big pr</p>",
        "id": 224107297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697024
    },
    {
        "content": "<p>And that's <em>after</em> several cleanup PRs being split out</p>",
        "id": 224107330,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697039
    },
    {
        "content": "<p>if you want me to reading the other thread, I can -- is it <a class=\"stream-topic\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits/topic/rustc.20binder.20refactor\">#wg-traits &gt; rustc binder refactor</a></p>",
        "id": 224107380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697065
    },
    {
        "content": "<p>Don't worry about it</p>",
        "id": 224107408,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697082
    },
    {
        "content": "<p>I'll summarize relevant points here</p>",
        "id": 224107461,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697089
    },
    {
        "content": "<p>Let's start with this:</p>\n<div class=\"codehilite\"><pre><span></span><code>trait I&lt;&#39;a, &#39;b, &#39;c&gt; {\n    type As;\n}\ntrait H&lt;&#39;d, &#39;e&gt;: for&lt;&#39;f&gt; I&lt;&#39;d, &#39;f, &#39;e&gt; + &#39;d {}\nfn foo2&lt;T&gt;() where T: for&lt;&#39;g&gt; H&lt;&#39;g, &#39;g, As: for&lt;&#39;h&gt; H&lt;&#39;h, &#39;g&gt; + &#39;g&gt; {}\n</code></pre></div>",
        "id": 224107485,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697099
    },
    {
        "content": "<p>Now, a valid question is \"what are the late bound vars on the <code>As: for&lt;'h&gt; H&lt;'h, 'g&gt;</code> trait ref</p>",
        "id": 224107618,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697163
    },
    {
        "content": "<p>And, the answer might shock you:</p>",
        "id": 224107656,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697186
    },
    {
        "content": "<p><code>['f, 'g, 'h]</code></p>",
        "id": 224107677,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697196
    },
    {
        "content": "<p>this is one heck of an example</p>",
        "id": 224107784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697235
    },
    {
        "content": "<p>Since that essentially desugars to <code>for&lt;'f, 'g, 'h&gt; &lt;T as I&lt;'h, 'f, 'g&gt;&gt;::As: H&lt;'h, 'g&gt;</code></p>",
        "id": 224107812,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697249
    },
    {
        "content": "<p>(this is worse: <code>T: for&lt;'i&gt; H&lt;'i, 'i, As: for&lt;'j&gt; H&lt;'j, 'i, As: for&lt;'k&gt; I&lt;'i, 'k, 'j&gt; + 'j&gt; + 'i&gt;</code>)</p>",
        "id": 224107858,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697270
    },
    {
        "content": "<p>ok</p>",
        "id": 224107912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697301
    },
    {
        "content": "<p>I'm starting to see what's going on here :)</p>",
        "id": 224107924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-01-26/near/224107812\">said</a>:</p>\n<blockquote>\n<p>Since that essentially desugars to <code>for&lt;'f, 'g, 'h&gt; &lt;T as I&lt;'h, 'f, 'g&gt;&gt;::As: H&lt;'h, 'g&gt;</code></p>\n</blockquote>\n<p>But, the problem here is <em>not</em> necessarily finding the late bound vars</p>",
        "id": 224107941,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697317
    },
    {
        "content": "<p>The problem is actually keeping track of the fact that \"that final <code>'h</code> is going to have a bound index of <code>1</code>, even though in the <code>for&lt;'h&gt;</code> it has an index of <code>0</code></p>",
        "id": 224108109,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697387
    },
    {
        "content": "<p>I've tried to approach this a couple different ways. They've all failed</p>",
        "id": 224108152,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697415
    },
    {
        "content": "<p>(Failed <em>and</em> are ugly)</p>",
        "id": 224108201,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697434
    },
    {
        "content": "<p>sometimes I wonder if debruijn is really so great</p>",
        "id": 224108203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697435
    },
    {
        "content": "<p>but let me read and read this example a few 100 times now</p>",
        "id": 224108283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697458
    },
    {
        "content": "<p>so I can understand the problem</p>",
        "id": 224108291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697461
    },
    {
        "content": "<p>Let me know when you're ready to continue</p>",
        "id": 224108316,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697477
    },
    {
        "content": "<p>\"bound index\" here refers to the index <em>within</em> binder, right?</p>",
        "id": 224108374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697515
    },
    {
        "content": "<p>not the depth</p>",
        "id": 224108380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697519
    },
    {
        "content": "<p>yes</p>",
        "id": 224108399,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697532
    },
    {
        "content": "<p>glad you brought that up. Depth here also is terrible</p>",
        "id": 224108430,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697548
    },
    {
        "content": "<p>where does this desugaring take place</p>",
        "id": 224108513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697576
    },
    {
        "content": "<p>I have no memory of how this <code>A: Foo&lt;B: Bar&gt;</code> stuff is implemented</p>",
        "id": 224108534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697588
    },
    {
        "content": "<p>In <code>astconv/mod</code></p>",
        "id": 224108539,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697592
    },
    {
        "content": "<p>also that notion is both <em>so awesome</em> and ... kind of so subtle</p>",
        "id": 224108547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697598
    },
    {
        "content": "<p>i wonder if we will ever stabilize it</p>",
        "id": 224108552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697601
    },
    {
        "content": "<p>never mind that now</p>",
        "id": 224108564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697606
    },
    {
        "content": "<p>One sec, will pull the code</p>",
        "id": 224108568,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697609
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/7907345e58b4f4d2c95e5ea9b8e0b3bff8946523/compiler/rustc_typeck/src/astconv/mod.rs#L1051\">https://github.com/rust-lang/rust/blob/7907345e58b4f4d2c95e5ea9b8e0b3bff8946523/compiler/rustc_typeck/src/astconv/mod.rs#L1051</a></p>",
        "id": 224108606,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697633
    },
    {
        "content": "<p>What's also difficult about this is the bounds are converted lazily</p>",
        "id": 224108628,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697648
    },
    {
        "content": "<p>which bounds</p>",
        "id": 224108734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697689
    },
    {
        "content": "<p>and what do you mean by lazilly :)</p>",
        "id": 224108740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697692
    },
    {
        "content": "<p>associated type bounds</p>",
        "id": 224108754,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697698
    },
    {
        "content": "<p>Well, I guess there's not really a way to make this <em>not</em> lazy</p>",
        "id": 224108870,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697769
    },
    {
        "content": "<p>so, nvm that</p>",
        "id": 224108902,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697784
    },
    {
        "content": "<p>by lazy</p>",
        "id": 224109021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697840
    },
    {
        "content": "<p>Moreso referring to the fact that <code>ConvertedBindingKind::Equality</code> contains a <code>ty</code> where <code>ast_ty_to_ty</code> has already been called, but <code>ConvertedBindingKind::Constraint</code> has a list of hir bounds</p>",
        "id": 224109031,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697847
    },
    {
        "content": "<p>you mean that it is done during hir lowering</p>",
        "id": 224109040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697852
    },
    {
        "content": "<p>this is sort of coming back</p>",
        "id": 224109069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697869
    },
    {
        "content": "<p>Basically, rather than being able to say \"here are the bounds, now wrap them in a binder\", you have to pass all the bound vars down</p>",
        "id": 224109201,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697938
    },
    {
        "content": "<p>I have to say that this is making me ponder the idea of nested binders again =)</p>",
        "id": 224109226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611697952
    },
    {
        "content": "<p>I also discovered last night this same sort of issue is run into with <code>for&lt;...&gt; dyn for&lt;...&gt; T: Trait</code></p>",
        "id": 224109283,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611697986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-01-26/near/224107618\">said</a>:</p>\n<blockquote>\n<p>Now, a valid question is \"what are the late bound vars on the <code>As: for&lt;'h&gt; H&lt;'h, 'g&gt;</code> trait ref</p>\n</blockquote>\n<p>ok, so,</p>",
        "id": 224109337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698011
    },
    {
        "content": "<p>Where <code>T</code> or <code>Trait</code> can refer to the outer bound vars</p>",
        "id": 224109342,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698012
    },
    {
        "content": "<p>But we don't pass those down, and would have to completely change the <code>ast_ty_to_ty</code></p>",
        "id": 224109390,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698038
    },
    {
        "content": "<p>one part of this is that the debruijn index info is computed by region resolution, right?</p>",
        "id": 224109493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698080
    },
    {
        "content": "<p>i.e., before the <code>ast_ty_to_ty</code> code is invoked?</p>",
        "id": 224109514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698091
    },
    {
        "content": "<p>Yes</p>",
        "id": 224109517,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698091
    },
    {
        "content": "<p>and it also computes the offset within the binder, I imagine</p>",
        "id": 224109534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698100
    },
    {
        "content": "<p>that all happens in <code>rustc_resolve/late/lifetimes</code></p>",
        "id": 224109551,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-01-26/near/224109534\">said</a>:</p>\n<blockquote>\n<p>and it also computes the offset within the binder, I imagine</p>\n</blockquote>\n<p>yep</p>",
        "id": 224109584,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698119
    },
    {
        "content": "<p>and so a challenge in the case you started with is that some of the things in scope are coming from supertrait expansion</p>",
        "id": 224109587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698120
    },
    {
        "content": "<p>and we don't have access to that info yet probably, certainly not convenient info</p>",
        "id": 224109599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698129
    },
    {
        "content": "<p>Right</p>",
        "id": 224109610,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698136
    },
    {
        "content": "<p>so we can compute the info for the <strong>HIR</strong></p>",
        "id": 224109622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698143
    },
    {
        "content": "<p>So, this is where the thoughts I had <em>today</em> come in</p>",
        "id": 224109633,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698148
    },
    {
        "content": "<p>this setup for region resolution is kind of ungreat</p>",
        "id": 224109695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698164
    },
    {
        "content": "<p>although i have vague memories that it was useful to lean on in some ways</p>",
        "id": 224109726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-01-26/near/224109599\">said</a>:</p>\n<blockquote>\n<p>and we don't have access to that info yet probably, certainly not convenient info</p>\n</blockquote>\n<p>I don't think we need supertrait expansion for most things</p>",
        "id": 224109734,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698185
    },
    {
        "content": "<p>It's really only for that projection</p>",
        "id": 224109751,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698197
    },
    {
        "content": "<p>(<code>&lt;T as I&lt;...&gt;&gt;</code>)</p>",
        "id": 224109759,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698205
    },
    {
        "content": "<p>But we don't that until late</p>",
        "id": 224109778,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698214
    },
    {
        "content": "<p>(by late, I mean in astconv/mod`)</p>",
        "id": 224109802,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698225
    },
    {
        "content": "<p>So, as long as super trait bound vars come <em>after</em> all others, this might be okay</p>",
        "id": 224109872,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698260
    },
    {
        "content": "<p>i am trying hard not to propose abandoning debruijn indices</p>",
        "id": 224109909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698278
    },
    {
        "content": "<p>Of course, I haven't gotten to this yet</p>",
        "id": 224109955,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698284
    },
    {
        "content": "<p>(it's something i've been toying with for a while)</p>",
        "id": 224109960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-01-26/near/224109909\">said</a>:</p>\n<blockquote>\n<p>i am trying hard not to propose abandoning debruijn indices</p>\n</blockquote>\n<p>In favor of?</p>",
        "id": 224109974,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698297
    },
    {
        "content": "<p>but it seems like probably not a great idea at this juncture :P</p>",
        "id": 224109978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698298
    },
    {
        "content": "<p>unique names</p>",
        "id": 224109989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698305
    },
    {
        "content": "<p>or something like that</p>",
        "id": 224109997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698308
    },
    {
        "content": "<p>I mean, that is somewhat the rustc system, right</p>",
        "id": 224110028,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698324
    },
    {
        "content": "<p>it'd be a big job</p>",
        "id": 224110050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698333
    },
    {
        "content": "<p>i just feel like debruijn are kind of mindbinding</p>",
        "id": 224110064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698340
    },
    {
        "content": "<p>and they do require you to track a lot of context</p>",
        "id": 224110077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698348
    },
    {
        "content": "<p>In basically all of the ast conversion, we're looking of lifetimes by name</p>",
        "id": 224110085,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698353
    },
    {
        "content": "<p>I guess my <em>intuition</em> here is that the problem is that we're making resolve lifetimes do work it shouldn't do</p>",
        "id": 224110141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698383
    },
    {
        "content": "<p>I have another call though</p>",
        "id": 224110161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698391
    },
    {
        "content": "<p>I think in <em>this</em> case, it could potentially be easier (and I have thought about using that as an intermediate step), but in general it would be harder</p>",
        "id": 224110166,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698394
    },
    {
        "content": "<p>we'll have to pick this up later</p>",
        "id": 224110228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698404
    },
    {
        "content": "<p>I'm gonna put in some work to test out my theory</p>",
        "id": 224110299,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698419
    },
    {
        "content": "<p>i could schedule something for tomorrow prob</p>",
        "id": 224110303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1611698420
    },
    {
        "content": "<p>But I can talk tomorrow late afternoon</p>",
        "id": 224110376,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611698436
    }
]