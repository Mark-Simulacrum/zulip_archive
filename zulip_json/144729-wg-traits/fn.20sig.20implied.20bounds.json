[
    {
        "content": "<p>this compiles both with nll and without it</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span>: <span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277274858,
        "sender_full_name": "lcnr",
        "timestamp": 1648730927
    },
    {
        "content": "<p>this does not compile with either</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277274917,
        "sender_full_name": "lcnr",
        "timestamp": 1648730966
    },
    {
        "content": "<p>this also does not compile with either</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277275070,
        "sender_full_name": "lcnr",
        "timestamp": 1648731039
    },
    {
        "content": "<p>is that expected behavior? I would assume that the first example also causes an error</p>",
        "id": 277275122,
        "sender_full_name": "lcnr",
        "timestamp": 1648731063
    },
    {
        "content": "<p>the following compiles, </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span>: <span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span>: <span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">baz</span>::<span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277275578,
        "sender_full_name": "lcnr",
        "timestamp": 1648731306
    },
    {
        "content": "<p>here we have a local with the type <code>fn(&amp;'?x mut &amp;'a &amp;'b ())</code> which isn't wf</p>",
        "id": 277275628,
        "sender_full_name": "lcnr",
        "timestamp": 1648731330
    },
    {
        "content": "<p>i wasn't able to abuse that to get unsoundness because we correctly check function signatures for wf</p>",
        "id": 277276419,
        "sender_full_name": "lcnr",
        "timestamp": 1648731620
    },
    {
        "content": "<p>i would still expect us to error in all of these test, cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> on how implied bounds should work here</p>",
        "id": 277276547,
        "sender_full_name": "lcnr",
        "timestamp": 1648731661
    },
    {
        "content": "<p>I am digging around in the wf code for impl trait right now due to a very similar issue: <a href=\"https://github.com/rust-lang/rust/issues/84657\">https://github.com/rust-lang/rust/issues/84657</a></p>\n<p>probably unrelated and just a timing coincidence, but I am very interested</p>",
        "id": 277276602,
        "sender_full_name": "oli",
        "timestamp": 1648731681
    },
    {
        "content": "<p>I think the reason this is allowed, is because the lifetime bounds are checked at function call</p>",
        "id": 277288417,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648736341
    },
    {
        "content": "<p>It's also likely the difference here is because of fndef vs fnptr</p>",
        "id": 277288599,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648736413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/fn.20sig.20implied.20bounds/near/277288417\">said</a>:</p>\n<blockquote>\n<p>I think the reason this is allowed, is because the lifetime bounds are checked at function call</p>\n</blockquote>\n<p>yes, I guess I was asking why that is the case <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 277288624,
        "sender_full_name": "lcnr",
        "timestamp": 1648736423
    },
    {
        "content": "<p><code>let _: fn(&amp;'a &amp;'b ());</code> is a user type annotation and these are checked for wf</p>",
        "id": 277288679,
        "sender_full_name": "lcnr",
        "timestamp": 1648736448
    },
    {
        "content": "<p>yeah, I think so</p>",
        "id": 277288713,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648736463
    },
    {
        "content": "<p>looking at mir typeck makes me slightly uncomfortable because the way we check for wf is fairly ad hoc</p>",
        "id": 277288763,
        "sender_full_name": "lcnr",
        "timestamp": 1648736489
    },
    {
        "content": "<p>and, there is a difference between fn inputs and bounds (the former are assumed to be WF)</p>",
        "id": 277288824,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648736514
    },
    {
        "content": "<p>yeah, WF checking is kind of arbitrary right now</p>",
        "id": 277288898,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648736534
    },
    {
        "content": "<p>e.g. <a href=\"https://github.com/rust-lang/rust/issues/95275\">https://github.com/rust-lang/rust/issues/95275</a> which is probably just unsound (in an exploitable way), though that's not easy to trigger</p>",
        "id": 277288904,
        "sender_full_name": "lcnr",
        "timestamp": 1648736539
    },
    {
        "content": "<p>I think the only way you could exploit <a href=\"https://github.com/rust-lang/rust/issues/95275\">#95275</a> is if you could have any lifetimes in the associated const</p>",
        "id": 277289257,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648736676
    },
    {
        "content": "<p>(which isn't allowed, right?)</p>",
        "id": 277289271,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648736683
    },
    {
        "content": "<p>it is allowed</p>",
        "id": 277289305,
        "sender_full_name": "lcnr",
        "timestamp": 1648736692
    },
    {
        "content": "<p>associated constants can do whatever they want with generic params</p>",
        "id": 277289336,
        "sender_full_name": "lcnr",
        "timestamp": 1648736703
    },
    {
        "content": "<p>i didn't get <code>ASSOC</code> with type <code>fn(&amp;'b String) -&gt; fn(&amp;'a String)</code> to work, there seems some weird wf check there i can't quite seem to avoid</p>",
        "id": 277289431,
        "sender_full_name": "lcnr",
        "timestamp": 1648736742
    },
    {
        "content": "<p>but i didn't look into it too deeply</p>",
        "id": 277289473,
        "sender_full_name": "lcnr",
        "timestamp": 1648736762
    },
    {
        "content": "<p>the question is where the \"where clauses\" from implied bounds <em>go</em></p>",
        "id": 277304926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648743016
    },
    {
        "content": "<p>I think my expectation is that they are on the impl</p>",
        "id": 277304975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648743035
    },
    {
        "content": "<p>or rather, on the call fn itself probably</p>",
        "id": 277305016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648743049
    },
    {
        "content": "<p>to some extent though this is exactly why I am pushing on mir-formality, I want to establish our definitive answers here and then go implement them</p>",
        "id": 277305045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648743063
    },
    {
        "content": "<p>to your <em>specific</em> questions</p>",
        "id": 277305108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648743091
    },
    {
        "content": "<p>it depends somewhat on the particulars of how we desugar things</p>",
        "id": 277305151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648743111
    },
    {
        "content": "<p>I'm thinking, because <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I remember you were doing some things with closure upvars?</p>",
        "id": 277305227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648743140
    },
    {
        "content": "<p>I am still doing that, though it's pretty much only on the back of my mind because my original idea is somewhat <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> have some new idea that could be worth a discussion but its still far from concrete</p>",
        "id": 277376157,
        "sender_full_name": "lcnr",
        "timestamp": 1648795298
    },
    {
        "content": "<p>ok. I was just thinking that these questions are not entirely independent.</p>",
        "id": 277422460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648821677
    }
]