[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> briefly...</p>",
        "id": 136284834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232509
    },
    {
        "content": "<p>today, when we see <code>type Foo = Bar</code>, during <em>type lowering</em> we convert it into <code>Bar</code></p>",
        "id": 136284840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232522
    },
    {
        "content": "<p>this means that if you have e.g. <code>type Foo&lt;X&gt; = Vec&lt;X&gt;</code>, and you have <code>fn func(x: Foo&lt;u32&gt;)</code>, we never see <code>Foo&lt;u32&gt;</code> as a <code>Ty&lt;'tcx&gt;</code> at all</p>",
        "id": 136284885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232544
    },
    {
        "content": "<p>ok</p>",
        "id": 136284896,
        "sender_full_name": "scalexm",
        "timestamp": 1540232563
    },
    {
        "content": "<p>this means that we never really considered very much what bounds are declared on the type alias</p>",
        "id": 136284901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232572
    },
    {
        "content": "<p>so e.g. <code>struct HashSet&lt;K: Hash&gt;</code>, <code>type Foo&lt;K&gt; = HashSet&lt;K&gt;</code>, does not get an error</p>",
        "id": 136284910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232585
    },
    {
        "content": "<p>yes I'm familiar with that</p>",
        "id": 136284919,
        "sender_full_name": "scalexm",
        "timestamp": 1540232595
    },
    {
        "content": "<p>as you can imagine, it is hard to change this without breaking code — though perhaps not as much as I feared</p>",
        "id": 136284921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232600
    },
    {
        "content": "<p>we've been investigating various parameters of this</p>",
        "id": 136284929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232616
    },
    {
        "content": "<p>there was some hope of making some things hard errors in Rust 2018 to lay groundwork</p>",
        "id": 136284939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232628
    },
    {
        "content": "<p>in particular extra bounds</p>",
        "id": 136284948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232640
    },
    {
        "content": "<p>i.e., you could \"ret-con\" <code>type Foo = Bar</code> as having an implied where clause like <code>WellFormed(Bar)</code></p>",
        "id": 136284991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232655
    },
    {
        "content": "<p>but if there are <em>extra</em> bounds like <code>type Foo&lt;T: Hash&gt; = Vec&lt;T&gt;</code></p>",
        "id": 136284997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232667
    },
    {
        "content": "<p>and we started enforcing those</p>",
        "id": 136284999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232672
    },
    {
        "content": "<p>it would break existing code</p>",
        "id": 136285001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232675
    },
    {
        "content": "<p>so we wanted to error if you have a bound B <em>unless</em> <code>WellFormed(Bar) =&gt; Implemented(B)</code></p>",
        "id": 136285035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232716
    },
    {
        "content": "<p>I'm however feeling like there's not time to do this change right</p>",
        "id": 136285047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232736
    },
    {
        "content": "<p>I guess I don't know if I have a question for you specifically</p>",
        "id": 136285060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232753
    },
    {
        "content": "<p>mmh ok we want to error if you have a non-existing bound, and we would also want to error if the type alias is not well-formed, e.g. in your <code>type Foo&lt;K&gt; = HashSet&lt;K&gt;</code> we would now complain that <code>K: Hash</code> is missing?</p>",
        "id": 136285141,
        "sender_full_name": "scalexm",
        "timestamp": 1540232816
    },
    {
        "content": "<p>well</p>",
        "id": 136285157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232844
    },
    {
        "content": "<p>if we could go back to pre-1.0 days =)</p>",
        "id": 136285162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232856
    },
    {
        "content": "<p>I think I would make type aliases be implemented literally as a kind of \"custom projection\"</p>",
        "id": 136285169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232865
    },
    {
        "content": "<p>e.g., <code>type Foo&lt;P*&gt; = X</code> would be</p>",
        "id": 136285178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232879
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136285224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232901
    },
    {
        "content": "<p>and each reference to <code>Foo&lt;A*&gt;</code> would be <code>&lt;() as Foo&lt;A*&gt;&gt;::Out</code></p>",
        "id": 136285240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232916
    },
    {
        "content": "<p><em>however</em></p>",
        "id": 136285243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232923
    },
    {
        "content": "<p>as I said, that would break a lot of crates, probably not an option without either an edition or a long migration period,</p>",
        "id": 136285251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232931
    },
    {
        "content": "<blockquote>\n<p>mmh ok we want to error if you have a non-existing bound, and we would also want to error if the type alias is not well-formed, e.g. in your <code>type Foo&lt;K&gt; = HashSet&lt;K&gt;</code> we would now complain that <code>K: Hash</code> is missing?</p>\n</blockquote>\n<p>precisely because of this</p>",
        "id": 136285253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232937
    },
    {
        "content": "<p>yes ok so we just want to deal with extra bounds right now</p>",
        "id": 136285265,
        "sender_full_name": "scalexm",
        "timestamp": 1540232950
    },
    {
        "content": "<p>I think the hope was</p>",
        "id": 136285273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232963
    },
    {
        "content": "<p>if we dealt with that</p>",
        "id": 136285275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232966
    },
    {
        "content": "<p>we could (in Rust <em>2018</em>)</p>",
        "id": 136285279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232970
    },
    {
        "content": "<p>translate to this:</p>",
        "id": 136285280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232974
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">WF</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136285286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540232983
    },
    {
        "content": "<p>which would be roughly equivalent to today</p>",
        "id": 136285299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540233000
    },
    {
        "content": "<p>but principled :)</p>",
        "id": 136285340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540233004
    },
    {
        "content": "<p>(this would also almost work in 2015, but that extra bounds would not be enforced)</p>",
        "id": 136285355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540233019
    },
    {
        "content": "<p>ok I see</p>",
        "id": 136285378,
        "sender_full_name": "scalexm",
        "timestamp": 1540233044
    },
    {
        "content": "<p>like I said, I'm not sure what I really wanted to ask you</p>",
        "id": 136285423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540233107
    },
    {
        "content": "<p>for extra bounds, I guess we would just to change a bit the translation</p>",
        "id": 136285432,
        "sender_full_name": "scalexm",
        "timestamp": 1540233115
    },
    {
        "content": "<p>maybe just to bring up up to date :)</p>",
        "id": 136285433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540233115
    },
    {
        "content": "<blockquote>\n<p>for extra bounds, I guess we would just to change a bit the translation</p>\n</blockquote>\n<p>what do you mean exactly?</p>",
        "id": 136285485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540233136
    },
    {
        "content": "<p>mmh no I was thinking about adding those extra bounds on the projection type but that would not work</p>",
        "id": 136285499,
        "sender_full_name": "scalexm",
        "timestamp": 1540233167
    },
    {
        "content": "<p>I mean we could \"retcon\" the current behavior by saying</p>",
        "id": 136285621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540233321
    },
    {
        "content": "<p>\"explicit bounds are ignored\"</p>",
        "id": 136285627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540233328
    },
    {
        "content": "<p>:P</p>",
        "id": 136285629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540233330
    },
    {
        "content": "<p>anyway, I'm feeling like this should not be a blocker though — but it's tricky, of course, because it'd be nice to do this right and not have to wait a long time. I guess I would just like to think we can push that through as a \"bug fix\" sort of change</p>",
        "id": 136285702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540233375
    },
    {
        "content": "<blockquote>\n<p>\"retcon\" the current behavior</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>warning: where clauses are not enforced in type aliases\n --&gt; src/lib.rs:3:5\n  |\n3 |     T: Into&lt;i32&gt;,\n  |     ^^^^^^^^^^^^\n  |\n  = note: #[warn(type_alias_bounds)] on by default\n  = help: the clause will not be checked when the type alias is used, and should be removed\n</pre></div>",
        "id": 136287420,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540235074
    },
    {
        "content": "<p>yes well</p>",
        "id": 136287458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540235128
    },
    {
        "content": "<p>first step, remove that lint ;)</p>",
        "id": 136287460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540235133
    },
    {
        "content": "<p>although basically it evaluates to what I am proposing</p>",
        "id": 136287473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540235146
    },
    {
        "content": "<p>I mean, isn't that what you want to retcon <em>to</em>?</p>",
        "id": 136287475,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540235149
    },
    {
        "content": "<p>to a certain extent, yes, indeed. This is why we added the lint in the first place, basically, because I expected we'd do some sort of retcon that rationalized the behavior</p>",
        "id": 136287538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540235181
    },
    {
        "content": "<p>I .. kinda still think that should be the way to go, just for project mgmt reasons if nothing else, at least to start... <a href=\"https://github.com/rust-lang/rust/issues/55222#issuecomment-431937764\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55222#issuecomment-431937764\">I left a comment here on #55222</a></p>",
        "id": 136287549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540235204
    },
    {
        "content": "<p>From the outside, it feels reasonable to go from that warning today to some bounds being applied, even in a regular version bump; no need for edition.</p>",
        "id": 136287677,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540235353
    },
    {
        "content": "<p>And continue warning for any specific types of bounds that might not be applied.</p>",
        "id": 136287691,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540235388
    }
]