[
    {
        "content": "<p>I'm refactoring the Chalk lowering code in rust-analyzer a bit (preparing for the chalk-ir changes), and I was wondering what the best way to handle errors in where clauses is (e.g. <code>where T: UnknownTrait</code>). We used to lower them to a clause that can never be met by 'making up' a trait without impls, but that is kind of an ugly hack. We could also just leave them out, i.e. make them always succeed. Or we could add a <code>WhereClause::Error</code> variant and have the Chalk program clause code decide on a case-by-case basis.</p>\n<p>I'm not actually sure what the best behavior is; I think it should be 'whatever makes the most code type-check', but actually both approaches can lead to errors (leaving out the clause can cause more ambiguities).</p>\n<p>Finally, this problem probably becomes much less important the more correct rust-analyzer's name resolution becomes, so maybe the best answer is 'whatever is simplest' ;)</p>",
        "id": 184017257,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576947078
    },
    {
        "content": "<p>Sounds a bit like <code>Goal::CannotProve</code>?</p>",
        "id": 184017566,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576947624
    },
    {
        "content": "<p>Sure, that's not something that's available on the chalk-ir level though (if we introduce a <code>WhereClause::Error</code>, that might get involved)</p>",
        "id": 184017780,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576948035
    },
    {
        "content": "<blockquote>\n<p>We could also just leave them out, i.e. make them always succeed.</p>\n</blockquote>\n<p>Seems like one can't get simpler than this? :)</p>",
        "id": 184018452,
        "sender_full_name": "matklad",
        "timestamp": 1576949185
    },
    {
        "content": "<blockquote>\n<p>Seems like one can't get simpler than this? :)</p>\n</blockquote>\n<p>Yeah, and that's what I've implemented now, I'm just wondering whether the potential fallout from that is acceptable</p>",
        "id": 184019747,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576951528
    },
    {
        "content": "<p>it's really probably fine, doesn't change much in <code>analysis-stats</code> actually :)</p>",
        "id": 184020308,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576952484
    },
    {
        "content": "<p>I think leaving them out is <em>probably</em> what you want</p>",
        "id": 184098188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577100071
    },
    {
        "content": "<p>Cannot prove etc feels too strong</p>",
        "id": 184098194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577100077
    },
    {
        "content": "<p>That would make it an error to invoke those functions (because we cannot prove that they are callable)</p>",
        "id": 184098198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577100088
    }
]