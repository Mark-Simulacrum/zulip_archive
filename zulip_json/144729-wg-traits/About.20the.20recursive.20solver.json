[
    {
        "content": "<p>Hey all, </p>\n<p>I'm currently trying to find issues I could work on and expect to achieve anything (e.g., <a href=\"https://github.com/rust-lang/chalk/issues/667\">chalk#667</a> was already solved when I only managed to pinpoint the problem; yet, I still learned a lot in the process, so it wasn't wasted effort). </p>\n<p>Today, I've started looking into <a href=\"https://github.com/rust-lang/chalk/issues/587\">chalk#587</a> and, while trying to figure out whether this was still relevant, I encountered some bits about the recursive solver I don't fully understand:</p>\n<ul>\n<li>What exactly is the purpose of the recursive solver at the moment? As far as I understood, it is supposed to be some kind of reference implementation for the SLG solver to compare against. Is that correct?</li>\n<li>The recursive solver implements its own <code>Solution</code> and <code>Guidance</code> types that are nearly identical to the ones defined in chalk-solve. The only difference are some functionalities for solutions that are necessary for the recursive solver. Would it be reasonable to lift these functionalities to chalk-solve to keep the code DRY? Or would it be better to make the recursive solution a newtype for the general solution?</li>\n<li>What is the correct way to translate test cases from the SLG solver to the recursive solver? E.g., if the test case tests <code>yields_first[SolverChoice::slg(2, None)</code> and expects an ambiguous substitution result, would this correspond to testing <code>yields[SolverChoice::recursive(2,100)</code> expecting an ambiguous solution with the same substitution? And should a floundered result correspond to an ambiguous solution with no inference guidance, etc.?</li>\n</ul>\n<p>I'm really sorry, if this is a bit much to answer at once. Though, every little guidance would help me understanding a bit more.</p>",
        "id": 222071146,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1610112160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"365822\">FireFighterDuck</span> <a href=\"#narrow/stream/144729-wg-traits/topic/About.20the.20recursive.20solver/near/222071146\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/chalk/issues/667\">chalk#667</a> was already solved when I only managed to pinpoint the problem; yet, I still learned a lot in the process, so it wasn't wasted effort</p>\n</blockquote>\n<p>Oops, sorry to snipe you <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I'm glad you feel like your learned something in the process. I would be happy to discuss the problem/solution with you if you think that'll help too.</p>",
        "id": 222078092,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610116183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"365822\">FireFighterDuck</span> <a href=\"#narrow/stream/144729-wg-traits/topic/About.20the.20recursive.20solver/near/222071146\">said</a>:</p>\n<blockquote>\n<ul>\n<li>What exactly is the purpose of the recursive solver at the moment? As far as I understood, it is supposed to be some kind of reference implementation for the SLG solver to compare against. Is that correct?<br>\nI'm really sorry, if this is a bit much to answer at once. Though, every little guidance would help me understanding a bit more.</li>\n</ul>\n</blockquote>\n<p>So, the recursive solver is essentially a <em>different</em> PROLOG-ish trait solver implementation.</p>",
        "id": 222078168,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610116206
    },
    {
        "content": "<p>So, let's think about the crates:</p>",
        "id": 222078279,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610116265
    },
    {
        "content": "<p><code>chalk-ir</code> essentially defines the types of Rust, and the goals we can use to solve questions about these types</p>",
        "id": 222078363,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610116314
    },
    {
        "content": "<p><code>chalk-solve</code> defines the rules for how these types interact and defines an interface for allowing impls, traits, structs, etc. to be defined</p>",
        "id": 222078540,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610116378
    },
    {
        "content": "<p><code>chalk-engine</code> is a solver implementation based around the SLG algorithm. The core idea behind is that each canonical goal (e.g. <code>for&lt;T&gt; Implemented(Foo&lt;T&gt;: Bar)</code>) has it's own <code>Table</code>. There may be multiple ways to solve this goal, each represented by a <code>Strand</code>. Because there may be multiple ways to solve the goal, there may be multiple (or infinite) answers. (e.g. <code>T = u32</code>, <code>T = i32</code>). Then, to get a final answer, you have to aggregate them to find a general solution.</p>",
        "id": 222079200,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610116710
    },
    {
        "content": "<p><code>chalk-recursive</code> is a solver implementation that to my knowledge is roughly based around the current rustc implementation. The core idea being that rather than each canonical goal being solved independently, you always keep around the \"current state\" of the solution. I don't have an example off the top of my head, but I think there are some examples in the book (if not, message me later an we can discuss)</p>",
        "id": 222079666,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610116998
    },
    {
        "content": "<p>We currrently don't know between <code>chalk-engine</code> and <code>chalk-recursive</code> which is better. First, <code>chalk-engine</code> has a big problem w.r.t. associated types (<a href=\"https://github.com/rust-lang/chalk/issues/234\">chalk#234</a>). But <code>chalk-recursive</code> has some problems when solving WF goals (<a href=\"https://github.com/rust-lang/chalk/issues/587\">chalk#587</a>; this might not be chalk-recursive's fault, it could be in the WF rules). We also aren't sure how performance will differ between the two once all the obvious/relevant optimizations are done. Theoretically, SLG answers are more \"reusable\", but e.g. rust-analyzer was always throwing away those between solves because of memory. Also, theoretically, the SLG is more \"complete\" (example in book), but even the current rustc implementation can't solve that example.</p>",
        "id": 222080193,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610117322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"365822\">FireFighterDuck</span> <a href=\"#narrow/stream/144729-wg-traits/topic/About.20the.20recursive.20solver/near/222071146\">said</a>:</p>\n<blockquote>\n<ul>\n<li>The recursive solver implements its own <code>Solution</code> and <code>Guidance</code> types that are nearly identical to the ones defined in chalk-solve. The only difference are some functionalities for solutions that are necessary for the recursive solver. Would it be reasonable to lift these functionalities to chalk-solve to keep the code DRY? Or would it be better to make the recursive solution a newtype for the general solution?</li>\n</ul>\n</blockquote>\n<p>Completely reasonable to move code around to deduplicate things :) There's been some refactoring/moving around in terms of crates that I don't remember if there's still a reason these types are in chalk-recursive or not. At one point, chalk-solve depended on chalk-engine and chalk-recursive, so the types had to be duplicated between the two. But not, idk. If there's some refactoring you can find to make things cleaner, by all means PR them :)</p>",
        "id": 222080533,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610117480
    },
    {
        "content": "<p>First of all, already a big thanks for the really detailed answers.</p>\n<blockquote>\n<p>We currrently don't know between chalk-engine and chalk-recursive which is better.</p>\n</blockquote>\n<p>Ah ok, so it's still undecided/undecidable . That was in fact the part that I didn't catch before.</p>\n<blockquote>\n<p>by all means PR them :)</p>\n</blockquote>\n<p>On it, I just wanted to get a clearer picture  of these things first. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 222081164,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1610117794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"365822\">FireFighterDuck</span> <a href=\"#narrow/stream/144729-wg-traits/topic/About.20the.20recursive.20solver/near/222071146\">said</a>:</p>\n<blockquote>\n<ul>\n<li>What is the correct way to translate test cases from the SLG solver to the recursive solver? E.g., if the test case tests <code>yields_first[SolverChoice::slg(2, None)</code> and expects an ambiguous substitution result, would this correspond to testing <code>yields[SolverChoice::recursive(2,100)</code> expecting an ambiguous solution with the same substitution? And should a floundered result correspond to an ambiguous solution with no inference guidance, etc.?</li>\n</ul>\n</blockquote>\n<p>So, there's not <em>exactly</em> a 1:1 translation between <code>yields_first[SolverChoice::slg(2, None)</code> and <code>yields[SolverChoice::recursive(2,100)</code>. The closest would be <code>yields[SolverChoice::recursive(N,2)</code> or something. I think it depends on what the test is supposed to be tested in terms of what the choice is. <code>yields_first</code> isn't a complete answer. It's only <code>T = u32</code> from the example a bit above, not the general <code>T = ?0</code>. The recursive solver doesn't know anything about this.</p>",
        "id": 222081174,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610117801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"365822\">FireFighterDuck</span> <a href=\"#narrow/stream/144729-wg-traits/topic/About.20the.20recursive.20solver/near/222071146\">said</a>:</p>\n<blockquote>\n<p>I'm really sorry, if this is a bit much to answer at once. Though, every little guidance would help me understanding a bit more.</p>\n</blockquote>\n<p>No reason to be sorry. I'm quite happy to help answer things. Let me know if I missed anything or I need to clarify</p>",
        "id": 222081251,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610117848
    },
    {
        "content": "<blockquote>\n<p>rust-analyzer was always throwing away those between solves because of memory</p>\n</blockquote>\n<p>hmm actually I think we stopped reusing the solver because it made it impossible to accurately track dependencies for each trait query, hence making it impossible to reuse solutions <em>across edits</em></p>",
        "id": 222085535,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1610119919
    },
    {
        "content": "<p>(also, reusing the solver was complicated wrt panic and thread safety)</p>",
        "id": 222085998,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1610120134
    },
    {
        "content": "<p>So, as far as I understand rust-analyzer uses the SLG solver primarily, yet does not reuse it as it is meant to be. Does rust-analyzer make use of the recursive solver in the current stable release as well? And if so, which of those two fits the use case of rust-analyzer better?</p>",
        "id": 222086510,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1610120392
    },
    {
        "content": "<p>no, rust-analyzer uses the recursive solver, mainly because of <a href=\"https://github.com/rust-lang/chalk/issues/234\">chalk#234</a></p>",
        "id": 222086723,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1610120517
    },
    {
        "content": "<p>the recursive solver was primarily resurrected to solve that bug; before that, we used the SLG solver</p>",
        "id": 222087105,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1610120739
    },
    {
        "content": "<p>I see, that makes sense. Thanks for the clarification. Such past decisions are sometimes a bit hard to track down <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 222087256,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1610120809
    },
    {
        "content": "<p>As a bit of a follow up to the previous discussion, I looked further into <a href=\"https://github.com/rust-lang/chalk/issues/587\">chalk#587</a> and would like to discuss some results.<br>\nOf the tests mentioned in <a href=\"https://github.com/rust-lang/chalk/issues/587\">chalk#587</a> only two are reproducibly problematic with the recursive solver in regard to WF checking: <code>wf_lowering::ill_formed_type_in_header</code> and <code>wf_lowering::higher_ranked_cyclic_requirements</code></p>\n<p>So far I only looked into the first one in greater detail. It became apparent that it fails with a stack overflow due to the recursive solver's eager search for more solutions. For the goal <code>WellFormed(!1_0: Bar)</code> both the SLG and the recursive solver find the same unique solution from the environment. Yet, only the recursive solver tries additionally an (seemingly) endless loop of <code>AliasEq(&lt;(Foo::Value)&lt;!1_0&gt; as Foo&gt;::Value = ^0.0)</code> (and similar goals) where <code>!1_0</code> only gets exchanged for ever more instances of the placeholder <code>(Foo::Value)&lt;!1_0&gt;</code> like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>AliasEq(&lt;(Foo::Value)&lt;(Foo::Value)&lt;(Foo::Value)&lt;....&lt;!1_0&gt;...&gt;&gt;&gt; as Foo&gt;::Value = ^0.0)\n</code></pre></div>\n<p>There are at least two possible solutions to this and I would love to hear some opinions on them:</p>\n<ul>\n<li>We could prohibit such recursively growing goals by some kind of heuristic. Yet, I'm not sure whether this behaviour of nesting associated type placeholders would actually be necessary to solve some special cases or if it would be feasible to simply prohibit them. Just from the sound of it, nested associated type placeholders seem a bit odd.</li>\n<li>Fortunately, the goals are only getting bigger. Therefore, the recursive solver is able to cancel computations before the stack overflows if it is not invoked with the default maximum goal size (e.g. 25 instead of 30 does the trick). Changing <code>recursive_default()</code> to use a maximum goal size of 25 would not change any other test results, though such a simple workaround seems to miss the core of the problem.</li>\n</ul>",
        "id": 222883199,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1610728109
    },
    {
        "content": "<p>I have to think more about this, but it's weird to me that its hitting an infinite loop instead of being caught as getting to big and being ambiguous (i.e. needs truncation)</p>",
        "id": 222888016,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610729764
    },
    {
        "content": "<p>Also, I'm assuming that isn't a problem in SLG because of <a href=\"https://github.com/rust-lang/chalk/issues/234\">chalk#234</a>?</p>",
        "id": 222888143,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610729810
    },
    {
        "content": "<p>Yes, the SLG solver does not run into this problem. It also less of an infinite loop and more of a rather slowly growing formula. The truncation does help, but not for a maximum size of 30.</p>",
        "id": 222888585,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1610729972
    },
    {
        "content": "<p>On an other note, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> you were the last one to update the status of <a href=\"https://github.com/rust-lang/chalk/issues/587\">chalk#587</a> . You seem to have checked both <code>test::misc::subgoal_cycle_inhabited</code> and <code>test::misc::subgoal_cycle_uninhabited</code> with the recursive solver. May I ask what goals you used for these tests? Both use <code>yields_first</code> and I'm a bit lost at how to transform these goals for the recursive solver.</p>",
        "id": 222889179,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1610730183
    },
    {
        "content": "<p>I mean, that sounds like an infinite loop though? <code>1_0</code> will always turn into <code>(Foo::Value)&lt;!1_0&gt;</code>, so it will always loop. What do you mean truncation doesn't help at 30? Does it stop then somehow?</p>",
        "id": 222890566,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610730680
    },
    {
        "content": "<p>And for the tests, I changed the solver for WF checking to SLG in test/mod</p>",
        "id": 222890636,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610730707
    },
    {
        "content": "<p>For a maximum size of 30 (as in the default settings for the recursive solver) the test will run into an stack overflow as the goals are growing slower than the call stack. If truncation already stops computation at goals of, for example, size 25, than the stack overflow doesn't happen but the correct result is achieved.</p>",
        "id": 222891210,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1610730924
    },
    {
        "content": "<p>Sounds like we need something like stacker for the recursive solver</p>",
        "id": 222902628,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610735393
    }
]