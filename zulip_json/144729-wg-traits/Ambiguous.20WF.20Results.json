[
    {
        "content": "<p>Would an ambiguous WF result for a TraitRef hold any specific meaning? <br>\nAs far as I understand it would mean that there are at least two different implementations for this TraitRef that are well formed but not equal (or at least unifyable). As WF checking happens after coherence checking, there can be at most one matching implementation. Thus, ambiguous results for a TraitRef WF goal seem to hint at other internal errors, or am I missing something here?</p>\n<p>Context: The <code>wf_lowering::higher_ranked_cyclic_requirements</code> test fails for the recursive solver as it finds an ambiguous WF result. It finds these two solution substitutions: <code>[?0 := !1_0]</code> and <code>[?0 := ^0.0]</code> Both come from the same clause in the environment and should denote the same type substitution but seem to be evaluated in different contexts due to some cycles occurring.  I suspect that the problem lies somewhere in the recursive solver's usage of the inference table. I would highly appreciate it if someone else could give me a hand with figuring out if this is actually supposed to happen or where exactly things go wrong.</p>",
        "id": 224300762,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1611825320
    },
    {
        "content": "<p>I'll look at this sometime today. This is good though.</p>",
        "id": 224326409,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611841281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> Did you have an chance to look at this yet?</p>",
        "id": 224708125,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1612175525
    },
    {
        "content": "<p>Ugh I didn't. Let me look now</p>",
        "id": 224739475,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192427
    },
    {
        "content": "<blockquote>\n<p>As far as I understand it would mean that there are at least two different implementations for this TraitRef that are well formed but not equal (or at least unifyable).</p>\n</blockquote>\n<p>Yes</p>",
        "id": 224739879,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192592
    },
    {
        "content": "<blockquote>\n<p>As WF checking happens after coherence checking, there can be at most one matching implementation.</p>\n</blockquote>\n<p>Well, in the chalk test suite, they're lumped together, sort of</p>",
        "id": 224740047,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192661
    },
    {
        "content": "<p>I don't think we \"actually\" have WF checks</p>",
        "id": 224740141,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192694
    },
    {
        "content": "<p>err, we do</p>",
        "id": 224740180,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192714
    },
    {
        "content": "<blockquote>\n<p>Thus, ambiguous results for a TraitRef WF goal seem to hint at other internal errors, or am I missing something here?</p>\n</blockquote>\n<p>Well...probably, yes</p>",
        "id": 224740302,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192781
    },
    {
        "content": "<blockquote>\n<p>The wf_lowering::higher_ranked_cyclic_requirements test fails for the recursive solver as it finds an ambiguous WF result. It finds these two solution substitutions: [?0 := !1_0] and [?0 := ^0.0] Both come from the same clause in the environment and should denote the same type substitution but seem to be evaluated in different contexts due to some cycles occurring.</p>\n</blockquote>\n<p>Looking at this now</p>",
        "id": 224740385,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612192805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Ambiguous.20WF.20Results/near/224740385\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>The wf_lowering::higher_ranked_cyclic_requirements test fails for the recursive solver as it finds an ambiguous WF result. It finds these two solution substitutions: [?0 := !1_0] and [?0 := ^0.0] Both come from the same clause in the environment and should denote the same type substitution but seem to be evaluated in different contexts due to some cycles occurring.</p>\n</blockquote>\n<p>Looking at this now</p>\n</blockquote>\n<p>To be more specific, it happens in the third part of the test and only for the <code>impl&lt;T,U&gt; Bar...</code>.</p>",
        "id": 224740646,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1612192922
    },
    {
        "content": "<p>weird...uh...it's working for me locally</p>",
        "id": 224740946,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612193039
    },
    {
        "content": "<p>Let me pull latest master and double check</p>",
        "id": 224741056,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612193070
    },
    {
        "content": "<p>I wonder if this was variance related bug that got fixed recently?</p>",
        "id": 224741447,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612193206
    },
    {
        "content": "<p>My list of failures with current master:</p>\n<div class=\"codehilite\"><pre><span></span><code>    test::cycle::overflow\n    test::lifetimes::empty_outlives\n    test::lifetimes::erased_outlives\n    test::lifetimes::static_outlives\n    test::misc::lifetime_outlives_constraints\n    test::misc::subgoal_abstraction\n    test::misc::subgoal_cycle_inhabited\n    test::misc::subgoal_cycle_uninhabited\n    test::misc::type_outlives_constraints\n</code></pre></div>",
        "id": 224741529,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612193240
    },
    {
        "content": "<p>I think that's simultaneously the best feeling and the worst feeling: when a bug you've seen is just fixed in the latest code</p>",
        "id": 224741932,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612193379
    },
    {
        "content": "<p>I probably should have mentioned that I run the WF checks with the recursive solver as part of working on <a href=\"https://github.com/rust-lang/chalk/issues/587\">chalk#587</a> . To be more specific, I changed the used solver in the <code>lowering_success</code> macro to recursive_default. . With this I can reproduce the failure on latest master.</p>",
        "id": 224741957,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1612193391
    },
    {
        "content": "<p>:O</p>",
        "id": 224742042,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612193412
    },
    {
        "content": "<p>oof I see</p>",
        "id": 224742091,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612193430
    },
    {
        "content": "<p>I only changed it in <code>test/mod</code></p>",
        "id": 224742134,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612193445
    },
    {
        "content": "<p>yep, there we go</p>",
        "id": 224742402,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612193540
    },
    {
        "content": "<p>Thanks for that :)</p>",
        "id": 224742409,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612193543
    },
    {
        "content": "<p>One sec, looking...</p>",
        "id": 224742422,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612193547
    },
    {
        "content": "<p>the recursive needs a debug output makeover</p>",
        "id": 224748509,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612195614
    },
    {
        "content": "<p>I can jump on that</p>",
        "id": 224757632,
        "sender_full_name": "Areredify",
        "timestamp": 1612199044
    },
    {
        "content": "<p>That would be awesome, actually. I'm trying to go through the debug output and just...not getting very far</p>",
        "id": 224757745,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612199089
    },
    {
        "content": "<p>Also, anyone know if there's a way to disable a specific span in <code>tracing</code> while keeping everything else <code>debug</code></p>",
        "id": 224757906,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612199154
    },
    {
        "content": "<p>I tried <code>CHALK_DEBUG=[program_clauses_for_env]=info,debug</code>, but that doesn't do what I want (hide everything under <code>program_clauses_for_env</code>)</p>",
        "id": 224758011,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612199183
    },
    {
        "content": "<p>Here is a slightly cleaned up debug output for anyone looking (and for me later): <a href=\"https://gist.github.com/jackh726/36a6ee16cb250e630b809cd4b27629e9\">https://gist.github.com/jackh726/36a6ee16cb250e630b809cd4b27629e9</a></p>",
        "id": 224758423,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612199346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Ambiguous.20WF.20Results/near/224758423\">said</a>:</p>\n<blockquote>\n<p>Here is a slightly cleaned up debug output for anyone looking (and for me later): <a href=\"https://gist.github.com/jackh726/36a6ee16cb250e630b809cd4b27629e9\">https://gist.github.com/jackh726/36a6ee16cb250e630b809cd4b27629e9</a></p>\n</blockquote>\n<p>The actually interesting part start around line 4860.</p>",
        "id": 224759011,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1612199565
    },
    {
        "content": "<p>I edited it to make it shorter,  I think from there</p>",
        "id": 224759594,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612199768
    },
    {
        "content": "<p>I'll try sketching out what's going (i.e. what goals occur):</p>\n<ul>\n<li>WellFormed(!1_1: Bar&lt;!1_0&gt;)</li>\n<li>Implemented(!1_1: Bar&lt;!1_0&gt;)</li>\n<li>FromEnv(!1_1: Bar&lt;!1_0&gt;)</li>\n<li>FromEnv(!1_1: Foo&lt;^0.0&gt;) (From the clause <code>FromEnv(^0.0: Bar&lt;^0.2&gt;) :- FromEnv(^0.0: Foo&lt;^0.1&gt;)</code> where we obviously do not know ^0.1)</li>\n<li>FromEnv(!1_1: Bar&lt;^0.0&gt;)</li>\n<li>FromEnv(!1_1: Foo&lt;^0.0&gt;) again, the computation stops as this is a cycle</li>\n<li>It returns to the first occurance and tries <code>FromEnv(!1_1: Foo&lt;!1_0&gt;)</code> which obviously works</li>\n<li>the cycle gets rolled back, we have the first solution <code>[?0 := !1_0]</code></li>\n</ul>",
        "id": 224761047,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1612200340
    },
    {
        "content": "<p>It then goes on like this:</p>\n<ul>\n<li>FromEnv(!1_1: Bar&lt;^0.0&gt;)</li>\n<li>FromEnv(!1_1: Foo&lt;^0.0&gt;) again a cycle</li>\n<li>it takes the current solution <code>[?0 := !1_0]</code> and somehow ends up creating <code>[?0 := ^0.0]</code></li>\n<li>it somehow again finds the solution  <code>[?0 := !1_0]</code> (I'm not really sure what happens here)</li>\n<li>the new solution gets pushed up and is combined with the old one =&gt; ambiguous (and this result doesn't change any more)</li>\n</ul>",
        "id": 224761832,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1612200695
    }
]