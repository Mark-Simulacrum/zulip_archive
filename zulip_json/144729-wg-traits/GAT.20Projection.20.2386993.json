[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'm reading the code</p>",
        "id": 245449392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625840498
    },
    {
        "content": "<p>My concern is for the case where an inference variable is returned</p>",
        "id": 245449599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625840592
    },
    {
        "content": "<p>Really, that's the problem always here, right?</p>",
        "id": 245449631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625840600
    },
    {
        "content": "<p>Regardless of where the bound region appears, we need (I believe) to maintain the invariant that bound regions cannot appear in the value of inference variables</p>",
        "id": 245449679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625840625
    },
    {
        "content": "<p>How often does normalization result in an inference variable (at least, an inference variable that didn't appear in the <em>original source types</em>)</p>",
        "id": 245449755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625840646
    },
    {
        "content": "<p>One case is in the event of an error</p>",
        "id": 245449769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625840652
    },
    {
        "content": "<p>Another, I believe, is in the case of ambiguity</p>",
        "id": 245449802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625840671
    },
    {
        "content": "<p>I believe that if we have a <em>successful</em> candidate, however, this should never happen</p>",
        "id": 245450016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625840791
    },
    {
        "content": "<p>We will create inference variables when matching against an impl, but they should be equated with the input types, and hence take a value from there</p>",
        "id": 245450065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625840818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Projection.20.2386993/near/245449769\">said</a>:</p>\n<blockquote>\n<p>One case is in the event of an error</p>\n</blockquote>\n<p>Maybe we can use something else for this case, e.g., an unnormalized projection</p>",
        "id": 245450255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625840896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Projection.20.2386993/near/245449802\">said</a>:</p>\n<blockquote>\n<p>Another, I believe, is in the case of ambiguity</p>\n</blockquote>\n<p>This is the hard one</p>",
        "id": 245450291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625840917
    },
    {
        "content": "<p>I wonder if it's time to consider <em>lazy normalization</em> as an alternative</p>",
        "id": 245450344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625840941
    },
    {
        "content": "<p>but a slightly different form than the way chalk approached it</p>",
        "id": 245450368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625840953
    },
    {
        "content": "<p>what if we had <code>UnnormalizedProjection</code> as a type, and we only produced it <em>in the case of ambiguity</em></p>",
        "id": 245450442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625840981
    },
    {
        "content": "<p>and then, when we try to equate it with another type, we would generate the obvious obligations</p>",
        "id": 245450501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625841003
    },
    {
        "content": "<p>(actually, if we did that, we could plausibly use it for errors too)</p>",
        "id": 245450569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625841018
    },
    {
        "content": "<p>the other option, of course, is to use this technique to make the \"best effort\" approach we talked about</p>",
        "id": 245450640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625841052
    },
    {
        "content": "<p>and -- if there are binders present -- we will invoke <code>opt_normalize_projection_type</code> and just refuse to do anything in the case of ambiguity</p>",
        "id": 245450684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625841075
    },
    {
        "content": "<p>(just treat it like we do today, which will likely yield an ICE somewhere down the line)</p>",
        "id": 245450703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625841084
    },
    {
        "content": "<p>I wonder if that will lead to fresh kinds of compilation errors, where something normalizes successfully in one context, but not another</p>",
        "id": 245450752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625841106
    },
    {
        "content": "<p>So, good questions</p>",
        "id": 245453274,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625842370
    },
    {
        "content": "<p>First, there's not a case right now in the tests where we can't project when there's only a gat bound var</p>",
        "id": 245453421,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625842431
    },
    {
        "content": "<p>(I actually had a <code>bug!()</code>in the unwrap_or_else)</p>",
        "id": 245453522,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625842471
    },
    {
        "content": "<p>But, I would need to dig into it a little</p>",
        "id": 245453624,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625842533
    },
    {
        "content": "<p>As I said, I think one reasonable alternative is to just return a ty::Error. Given that we would only error out <em>under GATs</em>, it's not like we would break anything stable</p>",
        "id": 245453993,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625842701
    },
    {
        "content": "<p>And it gives us a chance to move GATs forward and see what bug reports we get</p>",
        "id": 245454078,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625842741
    },
    {
        "content": "<p>I did think about the <code>UnnormalizedProjection</code></p>",
        "id": 245454167,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625842794
    },
    {
        "content": "<p>But didn't think hard enough to consider exactly how to use it</p>",
        "id": 245454322,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625842852
    },
    {
        "content": "<p>I'm debating about the idea of </p>\n<ul>\n<li>make a best effort for now, maybe even only with GATs to start</li>\n<li>experiment with \"unnormalized projection\" as a follow-up (for all bound variables, hopefully)</li>\n</ul>",
        "id": 245455283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625843288
    },
    {
        "content": "<p>That sounds about like what I would prefer</p>",
        "id": 245458544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625844837
    },
    {
        "content": "<p>Given that, how do you feel about <a href=\"https://github.com/rust-lang/rust/issues/86993\">#86993</a> as-is?</p>",
        "id": 245458632,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625844871
    },
    {
        "content": "<p>I don't think it quite does the \"best effort\" I have in mind</p>",
        "id": 245468320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625849747
    },
    {
        "content": "<p>I'll make some suggestions</p>",
        "id": 245468325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625849750
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> -- talk ?</p>",
        "id": 245682126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626094805
    },
    {
        "content": "<p>yep, joining now :)</p>",
        "id": 245682179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626094820
    },
    {
        "content": "<p>(If other wg-traits folks want to join, the invite is in the calendar, with a zoom url)</p>",
        "id": 245682342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626094893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/issues/issue-60283.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/issues/issue-60283.rs</a> is one example of a test that fails when we \"fall back\" to not normalizing (and just returning the  <code>ProjectionTy</code> itself) instead of registering a suboligation</p>",
        "id": 245730187,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626115764
    },
    {
        "content": "<p>Get an error something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>   |             expected signature of `for&lt;&#39;a&gt; fn(&lt;() as Trait&lt;&#39;a&gt;&gt;::Item) -&gt; _`\n   |             found signature of `fn(()) -&gt; _`\n</code></pre></div>",
        "id": 245730270,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626115801
    },
    {
        "content": "<p>I think there is some good news here</p>",
        "id": 245730916,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626116065
    },
    {
        "content": "<p>I think of all the tests that fail, I only see one ICE. But it's because there was a failed normalization at codegen or something.</p>",
        "id": 245731319,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626116224
    },
    {
        "content": "<p>But the rest are just \"type mismatches\" or such</p>",
        "id": 245731397,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626116242
    },
    {
        "content": "<p>And this <em>might</em> mean that sticking a normalization call or two somewhere later might fix this</p>",
        "id": 245732075,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626116467
    },
    {
        "content": "<p>It's a bit peculiar to me in, for example, that test above, that we have problems <em>now</em></p>",
        "id": 245732076,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626116467
    },
    {
        "content": "<p>Since this is basically what we were doing before, since that has a bound var</p>",
        "id": 245732152,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626116493
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/85499/files#diff-6668b42c7ad7c5245f6ef60bfb63ceb7162f32fe7a48e8f4dfbec803ba2b0122L18\">https://github.com/rust-lang/rust/pull/85499/files#diff-6668b42c7ad7c5245f6ef60bfb63ceb7162f32fe7a48e8f4dfbec803ba2b0122L18</a></p>",
        "id": 245732633,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626116670
    },
    {
        "content": "<p>oh, this isn't a regression, just a reversion</p>",
        "id": 245732651,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626116679
    },
    {
        "content": "<p>Okay here is the full list</p>\n<div class=\"codehilite\"><pre><span></span><code>    [ui] ui/associated-types/hr-associated-type-bound-object.rs\n    [ui] ui/associated-types/normalization-generality.rs\n    [ui] ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs\n    [ui] ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-3.rs\n    [ui] ui/higher-rank-trait-bounds/normalize-under-binder/issue-70120.rs\n    [ui] ui/hrtb/issue-62203-hrtb-ice.rs\n    [ui] ui/issues/issue-44005.rs\n    [ui] ui/issues/issue-60283.rs\n</code></pre></div>",
        "id": 245732915,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626116804
    },
    {
        "content": "<p>okay shoot, I think <code>ui/associated-types/normalization-generality.rs</code> (which is a new test) is the only one that we <em>really</em> need to worry about</p>",
        "id": 245733250,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626116967
    },
    {
        "content": "<p>The others just fall under \"incomplete\". And we don't <em>quite</em> do as well as we were <em>going to</em>, but there aren't any real regressions. And this still does fix the ICEs</p>",
        "id": 245733404,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626117025
    },
    {
        "content": "<p>Well, of course the GATs-only branch runs into the \"layout code is calling <code>normalize_erasing_regions</code> without wrapping a <code>Binder</code>\" problem</p>",
        "id": 245776798,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626148526
    },
    {
        "content": "<p><code>Instance::fn_sig_for_fn_abi</code> is where I've seen this originate from</p>",
        "id": 245776862,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626148592
    },
    {
        "content": "<p>ah, interesting. So it is wrapped in a  <code>Binder</code>...</p>",
        "id": 245776914,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626148684
    },
    {
        "content": "<p>The problem is <code>NormalizeAfterErasingRegionsFolder</code></p>",
        "id": 245776963,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626148769
    },
    {
        "content": "<p>That folds through and normalizes types and consts individually</p>",
        "id": 245777090,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626148885
    },
    {
        "content": "<p>If it weren't for that <code>fold_mir_const</code> there, this might be a really straightforward change (might still be, but not sure)</p>",
        "id": 245777304,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626149130
    },
    {
        "content": "<p>I guess maybe it's done this way because <code>normalize_generic_arg_after_erasing_regions</code> is a query</p>",
        "id": 245777393,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626149209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> another rabbit hole :(</p>",
        "id": 245835715,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626187737
    },
    {
        "content": "<p>I think I can paper over this by just making that <code>normalize_erasing_regions</code> call conditional on polymorphization for now</p>",
        "id": 245867841,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626201184
    },
    {
        "content": "<p>This just feels like a tower of cards</p>",
        "id": 245867858,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626201204
    },
    {
        "content": "<p>Okay, so I did that and now <a href=\"https://github.com/rust-lang/rust/issues/86993\">#86993</a> should be ready</p>",
        "id": 245873314,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626203677
    },
    {
        "content": "<p>Also opened <a href=\"https://github.com/rust-lang/rust/issues/87113\">#87113</a> and a queued a perf run</p>",
        "id": 245873767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626203892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'm reading <a href=\"https://github.com/rust-lang/rust/issues/86993\">#86993</a></p>",
        "id": 246092646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626355483
    },
    {
        "content": "<p>I'm around</p>",
        "id": 246092694,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626355507
    },
    {
        "content": "<p>So</p>",
        "id": 246092717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626355516
    },
    {
        "content": "<p>Available to chat if you would like</p>",
        "id": 246092718,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626355517
    },
    {
        "content": "<p>I have one comment, but I also would like to know if there are any outstanding bugs</p>",
        "id": 246092732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626355523
    },
    {
        "content": "<p>I can't quite tell if your comments above were...resolved?</p>",
        "id": 246092753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626355535
    },
    {
        "content": "<p>No bugs</p>",
        "id": 246092775,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626355545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Projection.20.2386993/near/245867841\">said</a>:</p>\n<blockquote>\n<p>I think I can paper over this by just making that <code>normalize_erasing_regions</code> call conditional on polymorphization for now</p>\n</blockquote>\n<p>I guess this is the answer?</p>",
        "id": 246092776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626355545
    },
    {
        "content": "<p>That indeed is resolved</p>",
        "id": 246092804,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626355557
    },
    {
        "content": "<p>See the comment in query/normalize</p>",
        "id": 246092864,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626355575
    },
    {
        "content": "<p>Basically, looks like the <code>fn_sig_for_fn_abi</code> call was the only source of escaping bound vars being passed to <code>query/normalize</code> <em>in current tests</em></p>",
        "id": 246092944,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626355618
    },
    {
        "content": "<p>But the underlying issue in <code>normalize_erasing_regions</code> is still there</p>",
        "id": 246092982,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626355635
    },
    {
        "content": "<p>So, the question is: do we just <code>bug!()</code> if we see escaping bound vars (and remove the hacky <code>self.failed</code>), or keep that and <em>possibly</em> recover</p>",
        "id": 246093073,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626355678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> question</p>",
        "id": 246094569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356394
    },
    {
        "content": "<p>well, where is the workaround code?</p>",
        "id": 246094623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356407
    },
    {
        "content": "<p>I must have missed it</p>",
        "id": 246094628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356409
    },
    {
        "content": "<p>and where is the <code>bug!</code> call?</p>",
        "id": 246094670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356431
    },
    {
        "content": "<p>I'll post the relevant bits</p>",
        "id": 246094736,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626356456
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86993/files#diff-b0320c2b8868f325d83c027fc5d71732636e9763551e35895488f30fe057c6e9R2481\">https://github.com/rust-lang/rust/pull/86993/files#diff-b0320c2b8868f325d83c027fc5d71732636e9763551e35895488f30fe057c6e9R2481</a></p>",
        "id": 246094738,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626356456
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86993/files#diff-8d11697c196da9f44774488ae0bf353283e5c6466a6dd570d7818431b73d4a44R501\">https://github.com/rust-lang/rust/pull/86993/files#diff-8d11697c196da9f44774488ae0bf353283e5c6466a6dd570d7818431b73d4a44R501</a></p>",
        "id": 246094780,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626356475
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86993/files#diff-530297dac7d71b016d17cb5838d22065417f9020c3c3d4df773901a9e33c4814R239\">https://github.com/rust-lang/rust/pull/86993/files#diff-530297dac7d71b016d17cb5838d22065417f9020c3c3d4df773901a9e33c4814R239</a></p>",
        "id": 246094865,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626356519
    },
    {
        "content": "<p>oh man</p>",
        "id": 246094935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356538
    },
    {
        "content": "<p>I just realized I was only reading 1 commit</p>",
        "id": 246094947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356543
    },
    {
        "content": "<p><span aria-label=\"speechless\" class=\"emoji emoji-1f636\" role=\"img\" title=\"speechless\">:speechless:</span></p>",
        "id": 246095022,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626356577
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">has_escaping_bound_vars</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Normalizing without wrapping in a `Binder`\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246095128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356631
    },
    {
        "content": "<p>is that the <code>bug!</code> call you were talking about?</p>",
        "id": 246095144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356638
    },
    {
        "content": "<p>there's another possible workaround here</p>",
        "id": 246095201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356645
    },
    {
        "content": "<p>Nope</p>",
        "id": 246095318,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626356701
    },
    {
        "content": "<p>That's never hit</p>",
        "id": 246095340,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626356709
    },
    {
        "content": "<p>But the question is whether to add the equivalent before folding with <code>QueryNormalizer</code></p>",
        "id": 246095426,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626356752
    },
    {
        "content": "<p>so</p>",
        "id": 246095445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356761
    },
    {
        "content": "<p>the <code>failed</code> bool</p>",
        "id": 246095473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356764
    },
    {
        "content": "<p>that is set to true if... any part of the projected type includes bound regions from some \"outer binder\" that we haven't traversed?</p>",
        "id": 246095525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356787
    },
    {
        "content": "<p>yes</p>",
        "id": 246095558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626356805
    },
    {
        "content": "<p>This means we don't have to visit the whole type beforehand</p>",
        "id": 246095637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626356835
    },
    {
        "content": "<p>Can't we track the depth in the folder</p>",
        "id": 246095725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356876
    },
    {
        "content": "<p>and then check if there is anything escaping outside that depth?</p>",
        "id": 246095785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356886
    },
    {
        "content": "<p>e.g., instead of <code>ty::Projection(data) if !data.trait_ref(self.tcx()).has_escaping_bound_vars() =&gt; {</code></p>",
        "id": 246095811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356905
    },
    {
        "content": "<p>something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ty</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">!</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">has_bound_vars_escaping_depth</span><span class=\"p\">(</span><span class=\"n\">outer_depth</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">!</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">trait_ref</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">()).</span><span class=\"n\">has_escaping_bound_vars</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246095866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356932
    },
    {
        "content": "<p>then we could get rid of that <code>failed</code> logic, right?</p>",
        "id": 246095929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356965
    },
    {
        "content": "<p>Yes. A bit less lazy, but probably fine</p>",
        "id": 246095979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626356988
    },
    {
        "content": "<p>has-bound-vars-escaping-depth is pretty fast</p>",
        "id": 246095996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626356998
    },
    {
        "content": "<p>(does that function exist? <code>has_bound_vars_escaping_depth</code>)</p>",
        "id": 246095999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626356999
    },
    {
        "content": "<p>something like it</p>",
        "id": 246096050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357006
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">has_escaping_bound_vars</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">has_vars_bound_at_or_above</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">INNERMOST</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246096100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357030
    },
    {
        "content": "<p>I misremembered the name</p>",
        "id": 246096110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357036
    },
    {
        "content": "<p>hmm</p>",
        "id": 246096124,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626357046
    },
    {
        "content": "<p>Yeah, actually that should be goo, because <code>Ty</code> has <code>outer_exclusive_binder</code></p>",
        "id": 246096280,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626357113
    },
    {
        "content": "<p>Okay, that's a better workaround</p>",
        "id": 246096315,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626357123
    },
    {
        "content": "<p>But the question remains: do we keep it or just not allow them in the first place</p>",
        "id": 246096399,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626357146
    },
    {
        "content": "<p>if we were not going to allow them</p>",
        "id": 246096592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357227
    },
    {
        "content": "<p>I would want to do it by an <code>assert!</code> like what I wrote above</p>",
        "id": 246096615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357237
    },
    {
        "content": "<p>hmm</p>",
        "id": 246096673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357248
    },
    {
        "content": "<p>I'm tempted to disallow</p>",
        "id": 246096685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357251
    },
    {
        "content": "<p>we can always fall back if people complain</p>",
        "id": 246096708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357261
    },
    {
        "content": "<p>but it'd be good to know where else it happens</p>",
        "id": 246096717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357264
    },
    {
        "content": "<p>that said, I think we would need to file a bug that blocks stabilizing polymorphization</p>",
        "id": 246096767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Projection.20.2386993/near/246096615\">said</a>:</p>\n<blockquote>\n<p>I would want to do it by an <code>assert!</code> like what I wrote above</p>\n</blockquote>\n<p>Where?</p>",
        "id": 246096825,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626357307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Projection.20.2386993/near/246095128\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">has_escaping_bound_vars</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Normalizing without wrapping in a `Binder`\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>this?</p>",
        "id": 246096874,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626357323
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ty</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">trait_ref</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">()).</span><span class=\"n\">has_escaping_bound_vars</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">has_bound_vars_escaping_depth</span><span class=\"p\">(</span><span class=\"n\">outer_depth</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246096935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357341
    },
    {
        "content": "<p>and then we can remove <code>self.failed</code>, which makes the code messy</p>",
        "id": 246096963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357353
    },
    {
        "content": "<p>I think I'd prefer to assert that before folding with <code>QueryNormalizer</code></p>",
        "id": 246097071,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626357388
    },
    {
        "content": "<p>it gives more context</p>",
        "id": 246097083,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626357393
    },
    {
        "content": "<p>yeah, as far up in the chain as you like</p>",
        "id": 246097227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357454
    },
    {
        "content": "<p>or both places :)</p>",
        "id": 246097234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357456
    },
    {
        "content": "<p>I am imagining that if we get an ICE with an \"array index out of bounds\" it'll be confusing, so an early assertion is good</p>",
        "id": 246097286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357480
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86993#pullrequestreview-707339114\">left review notes here</a></p>",
        "id": 246097338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357487
    },
    {
        "content": "<p>yes, I even misinterpreted that error in the crater reports</p>",
        "id": 246097697,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626357620
    },
    {
        "content": "<p>Okay, let me make these changes</p>",
        "id": 246097736,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626357633
    },
    {
        "content": "<p>cool, ping me</p>",
        "id": 246097786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626357649
    },
    {
        "content": "<p>Should take about 10 minutes</p>",
        "id": 246097890,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626357686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what do you mean by <a href=\"https://github.com/rust-lang/rust/pull/86993#discussion_r670476401\">https://github.com/rust-lang/rust/pull/86993#discussion_r670476401</a></p>",
        "id": 246098487,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626357925
    },
    {
        "content": "<p>Ah, okay, so does look like some const-generics tests are calling <code>query/normalize</code> with escaping bound vars (but none in GATs projections)</p>",
        "id": 246100621,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626358744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> interesting</p>",
        "id": 246101308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626359033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Projection.20.2386993/near/246098487\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> what do you mean by <a href=\"https://github.com/rust-lang/rust/pull/86993#discussion_r670476401\">https://github.com/rust-lang/rust/pull/86993#discussion_r670476401</a></p>\n</blockquote>\n<p>oh, you can ignore that. I was just idling that this code would be clearer, I think, if rewritten like:</p>",
        "id": 246101439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626359077
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">selcx</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">().</span><span class=\"n\">resolve_vars_if_possible</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">has_escaping_bound_vars</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Normalizing without wrapping in a `Binder`\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">has_projections</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246101508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626359113
    },
    {
        "content": "<p>Oh, I see. Unfortunately, I think that fails if we end up not replacing a projection</p>",
        "id": 246101722,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626359207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just pushed commit addressing your review</p>",
        "id": 246104224,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626360178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I made a mistake.</p>",
        "id": 246105881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626360912
    },
    {
        "content": "<p>I left a comment :)</p>",
        "id": 246105898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626360916
    },
    {
        "content": "<p>Ok I'll remove commit_if_ok</p>",
        "id": 246106089,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626361000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok updated. But I force pushed...did I see you make a change?</p>",
        "id": 246106918,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626361273
    },
    {
        "content": "<p>oh, I just merged somebody's nit</p>",
        "id": 246107036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626361304
    },
    {
        "content": "<p>doesn't matter</p>",
        "id": 246107047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626361307
    },
    {
        "content": "<p>whoops</p>",
        "id": 246107517,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626361486
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/84623\">#84623</a> just got merged, so GATs are <em>officially</em> no longer incomplete <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 246265609,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626462435
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> please take a look and leave comments: <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/869\">https://github.com/rust-lang/blog.rust-lang.org/pull/869</a></p>",
        "id": 246804359,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626923064
    }
]