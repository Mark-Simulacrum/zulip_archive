[
    {
        "content": "<p>This came up when implementing <code>Index</code> support in rust-analyzer: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f3f417b1731dcd6e09970651d8f5f084\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f3f417b1731dcd6e09970651d8f5f084\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f3f417b1731dcd6e09970651d8f5f084</a></p>\n<p>It seems that rustc detects that since the parameter type is some kind of integer, only the <code>u32</code> impl can apply, and it infers that type. This won't be possible with current Chalk, since it has no concept of integer variables, right?</p>",
        "id": 183873740,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576781626
    },
    {
        "content": "<p>Yes and no</p>",
        "id": 183876023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576783108
    },
    {
        "content": "<p>I've been wondering about this as I started to draft some notes for the \"type library\"</p>",
        "id": 183876043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576783123
    },
    {
        "content": "<p><em>Probably</em> the easiest thing to do is indeed to extend with a \"kind\" of type variable that can only be an integral type, but I was wondering if we could model it via predicates too</p>",
        "id": 183876089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576783154
    },
    {
        "content": "<p>(e.g., some kind of <code>IsIntegral(T)</code> predicate that is true for <code>u32</code> and friends)</p>",
        "id": 183876109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576783164
    },
    {
        "content": "<p>It's a bit annoying since I don't really want to make integral types so special but there might be nothing for it</p>",
        "id": 183876146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576783189
    },
    {
        "content": "<p>(There is also an analogous situation around floating point types; we have special variables for them in rustc too)</p>",
        "id": 183876210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576783205
    },
    {
        "content": "<p>I think the problem with just having a predicate would be that Chalk would have to iterate through all impls to find potentially matching ones</p>",
        "id": 183878258,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576784592
    },
    {
        "content": "<p>if it knows the set of possible types, it could specifically look for them</p>",
        "id": 183878283,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576784622
    },
    {
        "content": "<p>although I guess the impl search could also be extended to know about the predicates</p>",
        "id": 183878302,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576784636
    },
    {
        "content": "<p>Certainly having variables that cannot be unified with non-integral types would let us reject faster; the compiler still (I think) iterates through all possible impls in this case, but it is able to reject them relatively quickly.</p>",
        "id": 183889927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576793045
    },
    {
        "content": "<p>I'm wondering if there is some suitable \"generalization\" of this concept</p>",
        "id": 183889946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576793062
    }
]