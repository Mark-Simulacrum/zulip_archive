[
    {
        "content": "<p>hackmd: <a href=\"https://hackmd.io/DYGeIIHHSQah6g86piR1dQ\">https://hackmd.io/DYGeIIHHSQah6g86piR1dQ</a></p>",
        "id": 224098613,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611693141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> Not sure if you started on this yet, but I thought I'd help out by doing some digging into TyCtxt usages in TyDecoder. I'm leaving notes in the hackmd</p>",
        "id": 224235918,
        "sender_full_name": "detrumi",
        "timestamp": 1611776099
    },
    {
        "content": "<p>I had a chance for just a brief look today. Seems most of the time its the arena being used (from TyCtxt that is)</p>",
        "id": 224236633,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1611776435
    },
    {
        "content": "<p>So then we'd need to make <code>CtxtInterners</code> available from the interner?</p>",
        "id": 224237590,
        "sender_full_name": "detrumi",
        "timestamp": 1611776889
    },
    {
        "content": "<p>Ah, so even though <code>RustInterner</code> holds the whole TyCtxt, we should route all the method calls through the <code>Interner</code> trait</p>",
        "id": 224237983,
        "sender_full_name": "detrumi",
        "timestamp": 1611777096
    },
    {
        "content": "<p>I switched the topic here :)</p>",
        "id": 224240618,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611778335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Moving.20.60TyEncodable.60.2F.60TyDecodable.60.20to.20.60rustc_typeir.60/near/224237983\">said</a>:</p>\n<blockquote>\n<p>Ah, so even though <code>RustInterner</code> holds the whole TyCtxt, we should route all the method calls through the <code>Interner</code> trait</p>\n</blockquote>\n<p>that seems correct</p>",
        "id": 224241727,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1611778874
    },
    {
        "content": "<p>Do we just add a <code>type Arena = CtxtInterners</code> associated type to Interner then?</p>",
        "id": 224242416,
        "sender_full_name": "detrumi",
        "timestamp": 1611779231
    },
    {
        "content": "<p><del>We can't use the existing intern_* methods because those intern Chalk types</del><br>\nEdit: oops, this is a different interner, nvm</p>",
        "id": 224242589,
        "sender_full_name": "detrumi",
        "timestamp": 1611779309
    },
    {
        "content": "<p>btw, I'm imagining that the interface of the \"<code>Interner</code>\" that gets added to <code>rustc_type_ir</code> now (or <code>rustc_middle</code> in the meantime) will look the same as the eventual <code>Interner</code> that's shared and look awfully close to the current chalk-ir <code>Interner</code></p>",
        "id": 224243726,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611779827
    },
    {
        "content": "<p>There a bunch of <code>Copy</code> types in rustc that we don't require to be so in Chalk. That'll eventually get resolved in some way</p>",
        "id": 224243838,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611779879
    },
    {
        "content": "<p>The decoders also call a bunch of <code>tcx.mk_*</code> functions, so those could be moved to the interner as well</p>",
        "id": 224253109,
        "sender_full_name": "detrumi",
        "timestamp": 1611784407
    },
    {
        "content": "<p>I mean, those are essentially the equivalent of chalk's <code>intern_*</code></p>",
        "id": 224253408,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611784546
    },
    {
        "content": "<p>Yeah, the <code>mk_*</code> functions are just a wrapper around the <code>interners.intern_*</code> calls</p>",
        "id": 224253533,
        "sender_full_name": "detrumi",
        "timestamp": 1611784616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> have you started working on it already ?</p>",
        "id": 224303566,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1611826999
    },
    {
        "content": "<p>Not really</p>",
        "id": 224303703,
        "sender_full_name": "detrumi",
        "timestamp": 1611827101
    },
    {
        "content": "<p>I left some notes on the tcx usages in the hackmd, and did some rough sketches locally to get an idea of what the interner would look like</p>",
        "id": 224303827,
        "sender_full_name": "detrumi",
        "timestamp": 1611827170
    },
    {
        "content": "<p>that will be helpful</p>",
        "id": 224304019,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1611827315
    },
    {
        "content": "<p>As a first step, I just put a concrete struct in rustc_middle:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[derive(Copy, Clone)]\npub struct TyInterner&lt;&#39;tcx&gt; {\n    tcx: TyCtxt&lt;&#39;tcx&gt;,\n}\n\nimpl TyInterner&lt;&#39;tcx&gt; {\n    pub fn new(tcx: TyCtxt&lt;&#39;tcx&gt;) -&gt; Self {\n        Self { tcx }\n    }\n    pub fn mk_predicate(self, binder: Binder&lt;PredicateKind&lt;&#39;tcx&gt;&gt;) -&gt; Predicate&lt;&#39;tcx&gt; {\n        let inner = self.tcx.interners.intern_predicate(binder);\n        Predicate { inner }\n    }\n    pub fn arena(self) -&gt; &amp;&#39;tcx WorkerLocal&lt;Arena&lt;&#39;tcx&gt;&gt; {\n        self.tcx.arena\n    }\n    pub fn ty_rcache(self) -&gt; Lock&lt;FxHashMap&lt;ty::CReaderCacheKey, Ty&lt;&#39;tcx&gt;&gt;&gt; {\n        self.tcx.ty_rcache\n    }\n    pub fn queries(self) -&gt; query::Queries&lt;&#39;tcx&gt; {\n        self.tcx.queries\n    }\n}\n</code></pre></div>",
        "id": 224304308,
        "sender_full_name": "detrumi",
        "timestamp": 1611827499
    },
    {
        "content": "<p>Moving that to a trait which lives in rustc_type_ir would be trickier, because it uses several types that we don't want to move</p>",
        "id": 224304463,
        "sender_full_name": "detrumi",
        "timestamp": 1611827603
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...detrumi:tcx-to-interner-prototype\">Branch with my changes so far</a></p>",
        "id": 224305150,
        "sender_full_name": "detrumi",
        "timestamp": 1611828002
    },
    {
        "content": "<p><del>Would it be possible for me to help you with this topic as well?</del> Sorry, this was not meant that way.</p>",
        "id": 224323779,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1611839868
    },
    {
        "content": "<p>Hmm. I know <span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> wants to try to approach this, and would rather let them try that without a bunch of people also doing the same thing</p>",
        "id": 224326356,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611841254
    },
    {
        "content": "<p>But we can find something else :)</p>",
        "id": 224326372,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611841263
    },
    {
        "content": "<p>I am certainly way in over my head. Playing with <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>  branch now. So wrt to making it a trait. I guess we can flatten the methods the decodable uses on arena and put them on the trait. Do we ultimatelly want to move the Binder&lt;PredicateKind&gt; to <code>type_ir</code>? . I guess the <code>query::Queries</code>  is one of the tricky ones (although it is not used all that much... )</p>",
        "id": 224329699,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1611842807
    },
    {
        "content": "<p>Both <code>Binder</code> and <code>PredicateKind</code> are type-related in <code>rustc_middle::ty</code>, so yeah those should go to type_ir</p>",
        "id": 224329962,
        "sender_full_name": "detrumi",
        "timestamp": 1611842928
    },
    {
        "content": "<p>For queries and the like, we can either make the trait return the whole thing (with the result type being an associated type of the interner), or check whether we can make it more specific</p>",
        "id": 224330195,
        "sender_full_name": "detrumi",
        "timestamp": 1611843030
    },
    {
        "content": "<p>I think the more I look at it the more I get spooked.  move some stuff around and try to make your struct a trait</p>",
        "id": 224330476,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1611843158
    },
    {
        "content": "<p>When I tried that last time I ran into some issues with the return type of <code>TyDecoder::interner()</code>, as that changes from a concrete type to something like a trait object, but I'll see what I can do</p>",
        "id": 224332378,
        "sender_full_name": "detrumi",
        "timestamp": 1611843964
    },
    {
        "content": "<p>nevertheless quite a lot of stuff will have to move at once by the looks of it ..</p>",
        "id": 224332758,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1611844109
    },
    {
        "content": "<p>Ah, you mean the actual types like <code>PredicateKind</code>, yeah we only want to move those in a later step</p>",
        "id": 224333897,
        "sender_full_name": "detrumi",
        "timestamp": 1611844529
    },
    {
        "content": "<p>We could move all the <code>mk_*</code> functions to <code>CtxtInterners</code> instead, so the interner only has to grant access to that</p>",
        "id": 224334124,
        "sender_full_name": "detrumi",
        "timestamp": 1611844619
    },
    {
        "content": "<p>Although that would be a big refactor on its own, and changing all <code>tcx.mk_*</code> calls to <code>tcx.interner().interners().mk_*</code> to avoid moving everything at once would introduce too much indirection. Which we could solve by having a helper function <code>tcx.interners()</code> to be used when working with tcx, and <code>interner.interners()</code> when working with the interner.</p>",
        "id": 224335176,
        "sender_full_name": "detrumi",
        "timestamp": 1611845039
    },
    {
        "content": "<p>Ah wait, moving them to a <code>impl HasTyCtxt {}</code> block is better, as then we don't have to update usages for now</p>",
        "id": 224336521,
        "sender_full_name": "detrumi",
        "timestamp": 1611845584
    },
    {
        "content": "<p>Hm, it all comes down to all the mk_* functions that are directly on TyCtxt, which I'm not sure we can just refactor without something like a major change proposal</p>",
        "id": 224337236,
        "sender_full_name": "detrumi",
        "timestamp": 1611845877
    },
    {
        "content": "<p><code>OnDiskCache</code> is used in <code>impl Decodable for DefId</code>, but I don't think we want to pull that into the type library</p>",
        "id": 224348781,
        "sender_full_name": "detrumi",
        "timestamp": 1611850180
    },
    {
        "content": "<p>Yeah, I see what you meant now with <code>Arena</code>,  that's tricky because it's all in rustc_middle</p>",
        "id": 224352008,
        "sender_full_name": "detrumi",
        "timestamp": 1611851363
    },
    {
        "content": "<p>Even naming the types is hard, because <code>ArenaAllocatable</code> and such are instantiated through macros from rustc_middle</p>",
        "id": 224354398,
        "sender_full_name": "detrumi",
        "timestamp": 1611852316
    },
    {
        "content": "<p>So we need to either move the whole arena to rustc_type_ir, or refactor it to split the interface off from the implementation</p>",
        "id": 224356540,
        "sender_full_name": "detrumi",
        "timestamp": 1611852801
    },
    {
        "content": "<p>Yes, so I think we can go with the struct approach but as sson as we want to move that to a trait in the type library we need to shift a lot. Am I wrong?</p>",
        "id": 224360719,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1611854413
    },
    {
        "content": "<p>You're not wrong. Not sure if it's better to refactor first or just do the move</p>",
        "id": 224390640,
        "sender_full_name": "detrumi",
        "timestamp": 1611866948
    },
    {
        "content": "<p>yeah just moving the arena alone is a big one. If we do a ton of effort to just move out a trait that is going to be laregely different when the other types are moved... not sure if it makes sense. But I am pretty new to the codebase so it hard for me to tell</p>",
        "id": 224391839,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1611867599
    },
    {
        "content": "<p>So I added some notes to the hackmd with pointers to the types, but frankly speaking I am a bit lost on how to shift all of that or even abstract it away. It seems to me that a lot needs to move and it is hard for me to tell what we want to move and what we do not want to touch.</p>",
        "id": 224512797,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1611944225
    },
    {
        "content": "<p>Let me look over what you wrote</p>",
        "id": 224513158,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611944378
    },
    {
        "content": "<p>Well, looks like this is going to be tough</p>",
        "id": 224513441,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611944495
    },
    {
        "content": "<blockquote>\n<p>It seems to me that a lot needs to move and it is hard for me to tell what we want to move and what we do not want to touch.</p>\n</blockquote>\n<p>I think this is going to require a bit of experimenting. I think most \"types\" will get abstracted out by putting things behind associated types of a trait with associated functions to manipulate them. (Think of <code>SlgContext</code> from when <code>chalk-solve</code> and <code>chalk-ir</code> depended on <code>chalk-engine</code>, instead of the other way around)</p>",
        "id": 224513849,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611944666
    },
    {
        "content": "<p>It's probably easiest to start by defining an empty <code>Interner</code> trait, and add what you need to it to get things to work</p>",
        "id": 224514000,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611944731
    },
    {
        "content": "<p>a side question, In theory, if there was a type lib in place at the moment (a complete one), I guess the whole lowering that is done by <code>LowerInto</code> would not be needed, correct ?</p>",
        "id": 224514220,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1611944834
    },
    {
        "content": "<p>Yes, that's the plan!</p>",
        "id": 224567752,
        "sender_full_name": "Jack Huey",
        "timestamp": 1611985503
    },
    {
        "content": "<p>It's mainly the <code>mk_*</code> methods that need a lot of associated types. For the query/cache we just need to figure out the right interface, and the arena is a bit more involved because of how all the types are generated by macros</p>",
        "id": 224574376,
        "sender_full_name": "detrumi",
        "timestamp": 1611997142
    },
    {
        "content": "<p>Is there a way to put this function on the interner trait without moving <code>ArenaAllocatable</code> from rustc_middle?</p>\n<div class=\"codehilite\"><pre><span></span><code>pub fn alloc&lt;T: ArenaAllocatable&lt;&#39;tcx, U&gt;, U&gt;(&amp;self, value: T) -&gt; &amp;mut T\n</code></pre></div>\n<p>That comes down to something along the lines of <code>type T = for&lt;U&gt; T: ArenaAllocatable&lt;'tcx, U&gt;</code>, which we can't express yet</p>",
        "id": 224632814,
        "sender_full_name": "detrumi",
        "timestamp": 1612083411
    },
    {
        "content": "<p>What is this used for? Could just have it be on concrete types (or associated types)</p>",
        "id": 224666772,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612130104
    },
    {
        "content": "<p>The decoder traits use such calls: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/ty/codec.rs#L346\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/ty/codec.rs#L346</a></p>",
        "id": 224668589,
        "sender_full_name": "detrumi",
        "timestamp": 1612131037
    },
    {
        "content": "<p>The concrete types are in rustc_middle, which the trait can't reference. And making it an associated type would require GATs, no?</p>",
        "id": 224669572,
        "sender_full_name": "detrumi",
        "timestamp": 1612131895
    },
    {
        "content": "<p>I mean, at worst you could just have a <code>decode_predicate_span_slice</code> associated function on the <code>Interner</code>. But there are certainly ways to make that slightly more abstract.</p>",
        "id": 224686103,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612155802
    },
    {
        "content": "<p>Where do you think there would be GATs?</p>",
        "id": 224686119,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612155836
    },
    {
        "content": "<p>Ah, that's an idea, putting the decode functions themselves in the interner trait</p>",
        "id": 224737344,
        "sender_full_name": "detrumi",
        "timestamp": 1612191610
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/SYizCqyymP_rdFL0-CYu9_dP/image.png\">image.png</a> <br>\nNot the cleanest, but it works</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/SYizCqyymP_rdFL0-CYu9_dP/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/SYizCqyymP_rdFL0-CYu9_dP/image.png\"></a></div>",
        "id": 224749705,
        "sender_full_name": "detrumi",
        "timestamp": 1612196078
    },
    {
        "content": "<p>It's a start!</p>",
        "id": 224749815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612196137
    },
    {
        "content": "<p>Again, you can always make it a bit more abstract</p>",
        "id": 224749833,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612196146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> seems you are getting your hands dirty with all this (as compared to me struggling :D ), should I try and pick up smth else ?</p>",
        "id": 224757402,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612198973
    },
    {
        "content": "<p>You say that as if I'm not struggling as well <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 224760573,
        "sender_full_name": "detrumi",
        "timestamp": 1612200141
    },
    {
        "content": "<p>I can relate...</p>",
        "id": 224761317,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612200454
    },
    {
        "content": "<p>So uh, I'm just trying to get this whole thing started. We can work on it together or you can take over from here, or you can pick something else if you want something more self-contained (although finding something suitable to work on can be the hard part)</p>",
        "id": 224762103,
        "sender_full_name": "detrumi",
        "timestamp": 1612200819
    },
    {
        "content": "<p>I think I am more than happy to use some help with  getting this started.</p>",
        "id": 224764097,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612201615
    },
    {
        "content": "<p>Cool, I should be able to help with that</p>",
        "id": 224764255,
        "sender_full_name": "detrumi",
        "timestamp": 1612201690
    },
    {
        "content": "<p>Want to do another sync call to talk through the design some more?</p>",
        "id": 224764322,
        "sender_full_name": "detrumi",
        "timestamp": 1612201729
    },
    {
        "content": "<p>cannot right now but should be able to tomorrow.  We are in a similar time zone</p>",
        "id": 224764576,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612201848
    },
    {
        "content": "<p>ah, nice</p>",
        "id": 224764600,
        "sender_full_name": "detrumi",
        "timestamp": 1612201860
    },
    {
        "content": "<p>you have time during the day ?</p>",
        "id": 224764700,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612201904
    },
    {
        "content": "<p>Sure, how about 12:00 UTC? (13:00 my time, 14:00 in yours)</p>",
        "id": 224765210,
        "sender_full_name": "detrumi",
        "timestamp": 1612202081
    },
    {
        "content": "<p><time datetime=\"2021-02-02T12:00:00Z\">2021-02-02T13:00:00+01:00</time></p>",
        "id": 224765684,
        "sender_full_name": "detrumi",
        "timestamp": 1612202251
    },
    {
        "content": "<p>sounds great !</p>",
        "id": 224765876,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612202319
    },
    {
        "content": "<p>Great. Let's go for Zoom I guess</p>",
        "id": 224766137,
        "sender_full_name": "detrumi",
        "timestamp": 1612202435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> here in a few mins</p>",
        "id": 224861297,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612267097
    },
    {
        "content": "<p>Will PM you a zoom invite</p>",
        "id": 224861369,
        "sender_full_name": "detrumi",
        "timestamp": 1612267157
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> what is the reason for the interner to be <code>Interner&lt;D: Decoder&gt;</code> instead of simply <code>Interner</code></p>",
        "id": 224879807,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612276925
    },
    {
        "content": "<p>Because Interner::Predicate needs a bound on <code>Decodable&lt;D&gt;</code>. There's 2 impls for Decoder, I haven't checked if we needed both of them</p>",
        "id": 224880197,
        "sender_full_name": "detrumi",
        "timestamp": 1612277125
    },
    {
        "content": "<p>Having <code>type Predicate: Decodable&lt;Decoder&gt;;</code> on the interner trait instead would be nicer, but that only works if all interner usages use the same concrete decoder type</p>",
        "id": 224880454,
        "sender_full_name": "detrumi",
        "timestamp": 1612277226
    },
    {
        "content": "<p>yes.. and having the generic <code>D</code> indeed makes it a bit hard to implement the trait on <code>TyCtxt</code>  directly</p>",
        "id": 224880771,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612277344
    },
    {
        "content": "<p>Is it? Doesn't <code>impl&lt;'tcx&gt; Interner&lt;Decoder&gt; for TyCtxt&lt;'tcx&gt;</code> work?</p>",
        "id": 224880976,
        "sender_full_name": "detrumi",
        "timestamp": 1612277426
    },
    {
        "content": "<p>Yes sorry, my bad that worked fine indeed</p>",
        "id": 224881215,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612277530
    },
    {
        "content": "<p>Might not actually work in the end, because that picks one of the 2 concrete decoders, and they might both be used</p>",
        "id": 224894594,
        "sender_full_name": "detrumi",
        "timestamp": 1612282819
    },
    {
        "content": "<p>an ultimatelly <code>TypeDecoder::interner</code> should be giving us the interner trait rather than the <code>TyCtxt / TyInterner</code> correct ?</p>",
        "id": 224902868,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612285822
    },
    {
        "content": "<p>That'd require returning <code>dyn Interner</code></p>",
        "id": 224903186,
        "sender_full_name": "detrumi",
        "timestamp": 1612285926
    },
    {
        "content": "<p>as long as TypeDecoder knows the concrete type, I don't see why we would want to return the trait there</p>",
        "id": 224903300,
        "sender_full_name": "detrumi",
        "timestamp": 1612285968
    },
    {
        "content": "<p>I was under the impression that <code>TyDecoder</code> will   move to the <code>rustc_typeir</code></p>",
        "id": 224907263,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612287439
    },
    {
        "content": "<p>I think you're right, I'm just a bit confused with what should move and what shouldn't</p>",
        "id": 224907558,
        "sender_full_name": "detrumi",
        "timestamp": 1612287560
    },
    {
        "content": "<p>well yes me as well...</p>",
        "id": 224908089,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612287832
    },
    {
        "content": "<p>however. if we move the <code>TyDecoder</code>, then we will not know about the concrete type.</p>",
        "id": 224908156,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612287852
    },
    {
        "content": "<p>Right</p>",
        "id": 224908251,
        "sender_full_name": "detrumi",
        "timestamp": 1612287904
    },
    {
        "content": "<p>But we can put that question off for now, as we're only trying to move types and such in this first move</p>",
        "id": 224909269,
        "sender_full_name": "detrumi",
        "timestamp": 1612288345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> I moved some more calls into the TyInterner. Here is my branch. Will try and take a see what can be done with all the arena methods</p>",
        "id": 225314116,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612539605
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...zaharidichev:move-encodable-to-type-ir?expand=1\">https://github.com/rust-lang/rust/compare/master...zaharidichev:move-encodable-to-type-ir?expand=1</a></p>",
        "id": 225314123,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612539607
    },
    {
        "content": "<p>On another note I wonder how we can avoid all the <code>&lt;TyInterner&lt;'tcx&gt; as Interner&lt;D&gt;&gt;::</code> bits</p>",
        "id": 225314242,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612539657
    },
    {
        "content": "<p>Ah nice, so alloc functions and some more types</p>",
        "id": 225314290,
        "sender_full_name": "detrumi",
        "timestamp": 1612539676
    },
    {
        "content": "<p>yes</p>",
        "id": 225314368,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612539710
    },
    {
        "content": "<p>I think it is mostly the arena that is left. Will try and see what can be done with that soon</p>",
        "id": 225314472,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612539741
    },
    {
        "content": "<p>Yeah, so about that decoder parameter...</p>",
        "id": 225314484,
        "sender_full_name": "detrumi",
        "timestamp": 1612539747
    },
    {
        "content": "<p>Do you know if both decoders are actually used, or could we name the concrete decoder instead?</p>",
        "id": 225314550,
        "sender_full_name": "detrumi",
        "timestamp": 1612539776
    },
    {
        "content": "<p>Btw since you are working together on this, feel free to create/use a branch in the rust-lang/chalk repo</p>",
        "id": 225314603,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612539797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> Heh, this is a rustc (fork) branch though</p>",
        "id": 225314655,
        "sender_full_name": "detrumi",
        "timestamp": 1612539824
    },
    {
        "content": "<p>I mean, unless you can create a rustc branch inside the chalk repo?</p>",
        "id": 225314801,
        "sender_full_name": "detrumi",
        "timestamp": 1612539875
    },
    {
        "content": "<p>not sure whether both decoders are used but even if not, we would ideally want to be able to leave that generic, right?</p>",
        "id": 225314899,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612539916
    },
    {
        "content": "<p>also there are few other bits that bug me</p>",
        "id": 225314964,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612539943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Moving.20.60TyEncodable.60.2F.60TyDecodable.60.20to.20.60rustc_typeir.60/near/225314655\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> Heh, this is a rustc (fork) branch though</p>\n</blockquote>\n<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♀️oops nvm</p>",
        "id": 225314980,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612539954
    },
    {
        "content": "<p>namely... I feel like fn <code>TyDecoder::interner(&amp;self)</code> should be returning <code>impl Interner</code> rather than <code>TyInterner&lt;'tcx&gt;</code></p>",
        "id": 225315177,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612540030
    },
    {
        "content": "<p>isnt that right ?</p>",
        "id": 225315186,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612540034
    },
    {
        "content": "<p>after all.. I assume <code>TyDecoder</code> will move to the shared lib, right ?</p>",
        "id": 225315419,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612540114
    },
    {
        "content": "<p>Ah, don't know about that (TyDecoder moving to the shared lib)</p>",
        "id": 225315446,
        "sender_full_name": "detrumi",
        "timestamp": 1612540127
    },
    {
        "content": "<p>But I guess it's good from a API purity standpoint</p>",
        "id": 225315470,
        "sender_full_name": "detrumi",
        "timestamp": 1612540139
    },
    {
        "content": "<p>in that it would prevent using TyInterner functions that aren't on the trait</p>",
        "id": 225315511,
        "sender_full_name": "detrumi",
        "timestamp": 1612540157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> WDYT wrt to moving the decoder trait ?</p>",
        "id": 225315641,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612540205
    },
    {
        "content": "<p>This sounds specific to rustc's allocations, while the interner trait should be generic over the type representation</p>",
        "id": 225315811,
        "sender_full_name": "detrumi",
        "timestamp": 1612540289
    },
    {
        "content": "<p>ah wait nvm we cannot return impl Trait from the Decoder trait because imple returns are not allowed in traits....</p>",
        "id": 225315819,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612540291
    },
    {
        "content": "<p>The alternative is a trait object</p>",
        "id": 225315934,
        "sender_full_name": "detrumi",
        "timestamp": 1612540327
    },
    {
        "content": "<p>I'm not sure how much I can weigh in rn. Not mentally in this context currently</p>",
        "id": 225315987,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612540349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283967\">Zahari Dichev</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Moving.20.60TyEncodable.60.2F.60TyDecodable.60.20to.20.60rustc_typeir.60/near/225314242\">said</a>:</p>\n<blockquote>\n<p>On another note I wonder how we can avoid all the <code>&lt;TyInterner&lt;'tcx&gt; as Interner&lt;D&gt;&gt;::</code> bits</p>\n</blockquote>\n<p>So we have this <code>type Predicate: Decodable&lt;D&gt;</code> bound, but even though it should be decodable with any decoder, we have to pick one</p>",
        "id": 225316964,
        "sender_full_name": "detrumi",
        "timestamp": 1612540775
    },
    {
        "content": "<p>Ah, I see what I did wrong there</p>",
        "id": 225316980,
        "sender_full_name": "detrumi",
        "timestamp": 1612540782
    },
    {
        "content": "<p>Would it help to change it to <code>type Predicate: Decodable&lt;D: Decoder&gt;</code>? This feels like something implied bounds should get us for free, but maybe that doesn't apply here</p>",
        "id": 225317151,
        "sender_full_name": "detrumi",
        "timestamp": 1612540832
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0658]: associated type bounds are unstable\n  --&gt; compiler/rustc_type_ir/src/lib.rs:21:31\n   |\n21 |     type Predicate: Decodable&lt;D: Decoder&gt;;\n   |                               ^^^^^^^^^^\n   |\n   = note: see issue #52662 &lt;https://github.com/rust-lang/rust/issues/52662&gt; for more information\n   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n\nerror[E0107]: wrong number of type arguments: expected 1, found 0\n  --&gt; compiler/rustc_type_ir/src/lib.rs:21:21\n   |\n21 |     type Predicate: Decodable&lt;D: Decoder&gt;;\n   |                     ^^^^^^^^^^^^^^^^^^^^^ expected 1 type argument\n\nerror[E0220]: associated type `D` not found for `Decodable&lt;[type error]&gt;`\n  --&gt; compiler/rustc_type_ir/src/lib.rs:21:31\n   |\n21 |     type Predicate: Decodable&lt;D: Decoder&gt;;\n   |                               ^ associated type `D` not found\n\nerror: aborting due to 3 previous errors\n</code></pre></div>",
        "id": 225317995,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612541130
    },
    {
        "content": "<p>Heh, of course GATs would also help here, how ironic</p>",
        "id": 225318234,
        "sender_full_name": "detrumi",
        "timestamp": 1612541208
    },
    {
        "content": "<p>Hm, weird. Apparently it just works if you remove all those bounds?</p>",
        "id": 225318759,
        "sender_full_name": "detrumi",
        "timestamp": 1612541425
    },
    {
        "content": "<p>Remove the <code>D</code> parameter from <code>Interner</code> and the associated types and it just works <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 225318945,
        "sender_full_name": "detrumi",
        "timestamp": 1612541513
    },
    {
        "content": "<p>I originally added those bounds because something wasn't working, but maybe some change afterwards made it unnecessary</p>",
        "id": 225319476,
        "sender_full_name": "detrumi",
        "timestamp": 1612541713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283967\">Zahari Dichev</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Moving.20.60TyEncodable.60.2F.60TyDecodable.60.20to.20.60rustc_typeir.60/near/225315419\">said</a>:</p>\n<blockquote>\n<p>after all.. I assume <code>TyDecoder</code> will move to the shared lib, right ?</p>\n</blockquote>\n<p>I did some digging into the code generated by the derives, and since the <code>TyEncodable</code> derive uses <code>TyEncoder</code>, I'm now convinced that <code>TyEncodable</code> should be moved (alongside <code>TyDecoder</code> and <code>RefDecodable</code>). So <span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> you were totally right</p>",
        "id": 225601510,
        "sender_full_name": "detrumi",
        "timestamp": 1612815546
    },
    {
        "content": "<p>As for the other derives, interestingly the <code>HashStable</code> derive generates a <code>HashStable&lt;StableHashingContext&gt;</code> impl, and that context (rustc_middle::ich::StableHashingContext) lives in rustc_middle and can't really be moved. Not sure yet how to untangle that</p>",
        "id": 225602533,
        "sender_full_name": "detrumi",
        "timestamp": 1612815975
    },
    {
        "content": "<p>There's also the <code>HashStable_Generic</code> derive</p>",
        "id": 225602956,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612816141
    },
    {
        "content": "<p>Ah right, looks like that's made especially for the use case of deriving HashStable outside of rustc_middle</p>",
        "id": 225603142,
        "sender_full_name": "detrumi",
        "timestamp": 1612816223
    },
    {
        "content": "<p>@detrumi I will not be able to make it to today's meeting but here is my branch. It is the arena methods that still need moving to the interner: <a href=\"https://github.com/rust-lang/rust/compare/master...zaharidichev:move-encodable-to-type-ir?expand=1\">https://github.com/rust-lang/rust/compare/master...zaharidichev:move-encodable-to-type-ir?expand=1</a> I am still not entirely sure how to go about that</p>",
        "id": 225751901,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1612902305
    },
    {
        "content": "<p>Nice, so the arena methods are the only thing missing from the interner trait?</p>",
        "id": 225753769,
        "sender_full_name": "detrumi",
        "timestamp": 1612903138
    },
    {
        "content": "<p>I think the RefDecodable impls also need to be updated, and those contain some more functions that need to be in the trait. <del>Same thing with TyEncoder</del></p>",
        "id": 225754295,
        "sender_full_name": "detrumi",
        "timestamp": 1612903398
    },
    {
        "content": "<p>As for the arena methods: ideally that'd fit into something like this, but that doesn't quite work because the trait doesn't know of <code>'tcx</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn alloc_from_iter&lt;T: Copy&gt;(self, iter: impl IntoIterator&lt;Item = T&gt;) -&gt; &amp;&#39;tcx mut [T]\n</code></pre></div>\n<p>So for now we can go with concrete methods for each type instantiation, so we get <code>alloc_symbol</code>, <code>alloc_def</code> etc.</p>",
        "id": 225822999,
        "sender_full_name": "detrumi",
        "timestamp": 1612956575
    },
    {
        "content": "<p>I just pushed into the branch and there is only the arena left. I think the arena work is complicated by the fact that a lot of the decoder impls are also defined in a macro and make use of <code>decode_arena_allocable</code>/<code>decode_arena_allocable_slice</code>. <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> maybe you can provide some hints here.  You think there is a more elegant way than providing separate methods for all types ?</p>",
        "id": 226141090,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1613139178
    },
    {
        "content": "<p>Like I wrote above, the things I tried didn't really work out, unless we introduce a lifetime to the interner trait, which might or might not be an improvement</p>",
        "id": 226142096,
        "sender_full_name": "detrumi",
        "timestamp": 1613139693
    },
    {
        "content": "<p>seems like if we have a lifetime we can get rid of  type like <code>ListGenericArg</code></p>",
        "id": 226143909,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1613140610
    },
    {
        "content": "<p>alternatively, yeah its just providing all the different methods, which seems far from ideal..</p>",
        "id": 226144078,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1613140689
    },
    {
        "content": "<p>I think I am a bit stuck here. If we avoid the lifetime, it seems we need to provide different arena methods for all types for which the decoder is implemented via the macros, which can be found here: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_hir/src/arena.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_hir/src/arena.rs</a> and here: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/arena.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/arena.rs</a>  Does that sound right. This kind of feels a bit detached from the right approch but am not quite sure what else is better</p>",
        "id": 226388557,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1613398281
    },
    {
        "content": "<p>I was assuming we'd only need the types that are actually mentioned in the decodable impls</p>",
        "id": 226388706,
        "sender_full_name": "detrumi",
        "timestamp": 1613398367
    },
    {
        "content": "<p>And that should be only about 3-5 from what I saw</p>",
        "id": 226389112,
        "sender_full_name": "detrumi",
        "timestamp": 1613398587
    },
    {
        "content": "<p>@detrumi  yes I extracted these and it all compiles well except for the Span allocation on the arena. That is causing some compile problems that I cannot quite understand the source of</p>",
        "id": 227095614,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1613832286
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0283]: type annotations needed\n   --&gt; compiler/rustc_middle/src/ty/context.rs:206:24\n    |\n206 |         self.tcx.arena.alloc_from_iter(iter)\n    |                        ^^^^^^^^^^^^^^^ cannot infer type for type parameter `U` declared on the associated function `alloc_from_iter`\n    |\n    = note: cannot satisfy `rustc_span::Span: ArenaAllocatable&lt;&#39;_, _&gt;`\n\nerror: aborting due to 2 previous errors\n</code></pre></div>",
        "id": 227095637,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1613832328
    },
    {
        "content": "<p>pushed into the same branch <a href=\"https://github.com/rust-lang/rust/compare/master...zaharidichev:move-encodable-to-type-ir?expand=1\">https://github.com/rust-lang/rust/compare/master...zaharidichev:move-encodable-to-type-ir?expand=1</a></p>",
        "id": 227095643,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1613832344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> So that's the <code>T:ArenaAllocatable&lt; 'tcx,U&gt;</code> bound again that's causing trouble</p>",
        "id": 227106084,
        "sender_full_name": "detrumi",
        "timestamp": 1613842804
    },
    {
        "content": "<p>It's not obvious why this works for the other from_iter functions but not not this one</p>",
        "id": 227106219,
        "sender_full_name": "detrumi",
        "timestamp": 1613842978
    },
    {
        "content": "<p>Maybe because it's because <code>Span</code> doesn't take a <code>'tcx</code> like the others do...</p>",
        "id": 227106303,
        "sender_full_name": "detrumi",
        "timestamp": 1613843050
    },
    {
        "content": "<p>Ah no, that's the same as <code>CodeRegion</code></p>",
        "id": 227106326,
        "sender_full_name": "detrumi",
        "timestamp": 1613843095
    },
    {
        "content": "<p>Ah, <code>Span</code> isn't defined in rustc_middle, so it can't derive TyEncodable/TyDecodable directly. That's probably what's different</p>",
        "id": 227106472,
        "sender_full_name": "detrumi",
        "timestamp": 1613843245
    },
    {
        "content": "<p>Maybe it can't infer <code>U</code> because the type is <code>Self::Span</code>, which doesn't (and probably can't) have a <code>ArenaAllocatable</code> bound</p>",
        "id": 227107970,
        "sender_full_name": "detrumi",
        "timestamp": 1613844787
    },
    {
        "content": "<p>Tricky, we can't mention the generic args explicitly because it's an impl trait arg</p>",
        "id": 227108192,
        "sender_full_name": "detrumi",
        "timestamp": 1613845010
    },
    {
        "content": "<p>Yeah, not too sure what exactly can be done about that one...</p>",
        "id": 227262823,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1613999158
    },
    {
        "content": "<p>Any ideas ?</p>",
        "id": 227263344,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1613999411
    },
    {
        "content": "<p>I tried inlining the first <code>alloc_from_iter</code> (the one on Arena), but that still has the same problem</p>",
        "id": 227263870,
        "sender_full_name": "detrumi",
        "timestamp": 1613999660
    },
    {
        "content": "<p>Maybe calling <code>T::allocate_from_iter</code> directly on the concrete type would improve things</p>",
        "id": 227264046,
        "sender_full_name": "detrumi",
        "timestamp": 1613999756
    },
    {
        "content": "<p>yeah I tried using <code>allocate_from_iter</code> as well but no luck</p>",
        "id": 227265497,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1614000503
    },
    {
        "content": "<p>yeah and moving Span to rustc_middle is a no go. I am really not sure what to do here</p>",
        "id": 227268861,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1614001971
    },
    {
        "content": "<p>Howdy :) I've somewhat been following here (but not really thinking too hard). Anything I can help with?</p>",
        "id": 227507148,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614116020
    },
    {
        "content": "<p>I think the first step is mostly complete, except for a specific arena allocation for <code>Span</code>: <a href=\"https://github.com/rust-lang/rust/compare/master...zaharidichev:move-encodable-to-type-ir?expand=1#diff-0c8c9cf0c0f8cda43eb64bbe5ef63c3239b0cf25901587b3c1f2b1d97a7e8441R196\">https://github.com/rust-lang/rust/compare/master...zaharidichev:move-encodable-to-type-ir?expand=1#diff-0c8c9cf0c0f8cda43eb64bbe5ef63c3239b0cf25901587b3c1f2b1d97a7e8441R196</a></p>",
        "id": 227507851,
        "sender_full_name": "detrumi",
        "timestamp": 1614116310
    },
    {
        "content": "<p>That still fails because it can't infer the type param <code>U</code>, and things don't work out because of the <code>impl IntoIterator</code> param, and the fact that <code>Span</code> isn't defined in rustc_middle</p>",
        "id": 227508140,
        "sender_full_name": "detrumi",
        "timestamp": 1614116449
    },
    {
        "content": "<p>Is that supposed to be pointing to a line?</p>",
        "id": 227508707,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614116678
    },
    {
        "content": "<p>Oh ugh, it doesn't expand</p>",
        "id": 227508760,
        "sender_full_name": "detrumi",
        "timestamp": 1614116702
    },
    {
        "content": "<p>context.rs:196</p>",
        "id": 227508810,
        "sender_full_name": "detrumi",
        "timestamp": 1614116717
    },
    {
        "content": "<p>yes, just found that</p>",
        "id": 227508829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614116726
    },
    {
        "content": "<p>yeah, that's an unfortunate bit of github</p>",
        "id": 227508853,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614116737
    },
    {
        "content": "<p>Where is <code>U</code> here?</p>",
        "id": 227508969,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614116778
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_arena/src/lib.rs#L736\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_arena/src/lib.rs#L736</a></p>",
        "id": 227509060,
        "sender_full_name": "detrumi",
        "timestamp": 1614116824
    },
    {
        "content": "<p>I'm guessing on <code>alloc_from_iter</code></p>",
        "id": 227509065,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614116825
    },
    {
        "content": "<p>ninja'd</p>",
        "id": 227509096,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614116837
    },
    {
        "content": "<p>And trying <code>Span::allocate_from_iter(self.tcx.arena, iter)</code> results in <code>cannot satisfy rustc_span::Span: ArenaAllocatable&lt;'_, _&gt;</code></p>",
        "id": 227509178,
        "sender_full_name": "detrumi",
        "timestamp": 1614116876
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0283]: type annotations needed\n   --&gt; compiler/rustc_middle/src/ty/context.rs:196:9\n    |\n196 |         Span::allocate_from_iter(self.tcx.arena, iter)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T` declared on the trait `ArenaAllocatable`\n    |\n   ::: /home/wilco/p/rust/rust/compiler/rustc_arena/src/lib.rs:669:16\n    |\n669 |             fn allocate_from_iter&lt;&#39;a&gt;(\n    |                ------------------ required by a bound in this\n670 |                 arena: &amp;&#39;a Arena&lt;&#39;tcx&gt;,\n671 |                 iter: impl ::std::iter::IntoIterator&lt;Item = Self&gt;,\n    |                                                      ----------- required by this bound in `ArenaAllocatable::allocate_from_iter`\n    |\n    = note: cannot satisfy `rustc_span::Span: ArenaAllocatable&lt;&#39;_, _&gt;`\nhelp: consider specifying the type argument in the function call\n    |\n196 |         Span::allocate_from_iter::&lt;impl ::std::iter::IntoIterator&lt;Item = Self&gt;&gt;(self.tcx.arena, iter)\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>",
        "id": 227509329,
        "sender_full_name": "detrumi",
        "timestamp": 1614116931
    },
    {
        "content": "<p>(the hint doesn't work because 'impl trait' isn't allowed there)</p>",
        "id": 227509408,
        "sender_full_name": "detrumi",
        "timestamp": 1614116971
    },
    {
        "content": "<p>Where is the <code>ArenaAllocatable</code> impl supposed to be here?</p>",
        "id": 227509531,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117011
    },
    {
        "content": "<p>It's inside the <code>declare_arena!</code> macro</p>",
        "id": 227509601,
        "sender_full_name": "detrumi",
        "timestamp": 1614117046
    },
    {
        "content": "<p>... which is called in combination with the <code>arena_types!</code> macro, to make all of this more confusing</p>",
        "id": 227509687,
        "sender_full_name": "detrumi",
        "timestamp": 1614117093
    },
    {
        "content": "<p>One second, let me get a handle on things</p>",
        "id": 227509840,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117157
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_arena/src/lib.rs#L705\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_arena/src/lib.rs#L705</a> that's what I was missing :)</p>",
        "id": 227509959,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117231
    },
    {
        "content": "<p>wait, no</p>",
        "id": 227510066,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117269
    },
    {
        "content": "<p>could you do something like <code>self.tcx.arena.alloc_from_iter::&lt;'_, _, Span&gt;(iter)</code></p>",
        "id": 227510164,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117320
    },
    {
        "content": "<p>Nope:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n</code></pre></div>",
        "id": 227510330,
        "sender_full_name": "detrumi",
        "timestamp": 1614117393
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♀️</p>",
        "id": 227510390,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117430
    },
    {
        "content": "<p>The error message is kinda wild: <code>cannot specify lifetime arguments explicitly if late bound lifetime parameters are present</code></p>",
        "id": 227510410,
        "sender_full_name": "detrumi",
        "timestamp": 1614117439
    },
    {
        "content": "<p>err wait</p>",
        "id": 227510479,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117479
    },
    {
        "content": "<p>it should be <code>&lt;'_, Span, _&gt;</code> right?</p>",
        "id": 227510550,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117492
    },
    {
        "content": "<p><code>U</code> is the third parameter though, and it couldn't infer that one</p>",
        "id": 227510609,
        "sender_full_name": "detrumi",
        "timestamp": 1614117524
    },
    {
        "content": "<p>But even having <code>_</code> is not allowed, it's still counted as explicit</p>",
        "id": 227510679,
        "sender_full_name": "detrumi",
        "timestamp": 1614117560
    },
    {
        "content": "<p>What is that <code>U</code> even used for...</p>",
        "id": 227510729,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117587
    },
    {
        "content": "<p>And you can't do <code>&lt;'_, Span, Span&gt;</code></p>",
        "id": 227511107,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117665
    },
    {
        "content": "<p>Or <code>Span::allocate_from_iter::&lt;'_, Span, Span&gt;(self.tcx.arena, iter)</code></p>",
        "id": 227511463,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117730
    },
    {
        "content": "<p>Nope, it's not even looking at what you pass in, any explicit arg is not allowed</p>",
        "id": 227511475,
        "sender_full_name": "detrumi",
        "timestamp": 1614117731
    },
    {
        "content": "<p>Because of the <code>impl IntoIterator</code>?</p>",
        "id": 227511583,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117766
    },
    {
        "content": "<p>Could you just...not have that...</p>",
        "id": 227511619,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117775
    },
    {
        "content": "<p>And just make a <code>T: IntoIterator</code></p>",
        "id": 227511661,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117787
    },
    {
        "content": "<p>You could even be extremely explicit and do <code>Span::allocate_from_iter::&lt;'tcx Span, Span&gt;(self.tcx.arena, iter)</code></p>",
        "id": 227511999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117878
    },
    {
        "content": "<p>err</p>",
        "id": 227512084,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117903
    },
    {
        "content": "<p>I see what you mean</p>",
        "id": 227512153,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117922
    },
    {
        "content": "<p>Yeah, just uh, change <code>impl IntoIterator</code> into a <code>T: IntoIterator</code></p>",
        "id": 227512370,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117980
    },
    {
        "content": "<p>then you can be explicit</p>",
        "id": 227512425,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614117996
    },
    {
        "content": "<p>Right, adding an extra type parameter there fixes that, but the lifetime error is still there and I don't understand it</p>",
        "id": 227512897,
        "sender_full_name": "detrumi",
        "timestamp": 1614118136
    },
    {
        "content": "<p>err wait...</p>",
        "id": 227512949,
        "sender_full_name": "detrumi",
        "timestamp": 1614118150
    },
    {
        "content": "<p>Yeah, you won't be able to be explicit here with removing the <code>impl IntoIterator</code></p>",
        "id": 227513102,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614118199
    },
    {
        "content": "<p>I'm not 100% what the inference isn't working here</p>",
        "id": 227513165,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614118207
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --&gt; compiler/rustc_middle/src/ty/context.rs:197:42\n    |\n197 |         self.tcx.arena.alloc_from_iter::&lt;&#39;_, Span, Span, _&gt;(iter)\n    |                                          ^^\n    |\n   ::: /home/wilco/p/rust/rust/compiler/rustc_arena/src/lib.rs:736:36\n    |\n736 |             pub fn alloc_from_iter&lt;&#39;a, T: ArenaAllocatable&lt;&#39;tcx, U&gt;, U, V: IntoIterator&lt;Item = T&gt;&gt;(\n    |                                    -- the late bound lifetime parameter is introduced here\n    |\n    = note: `-D late-bound-lifetime-arguments` implied by `-D warnings`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42868 &lt;https://github.com/rust-lang/rust/issues/42868&gt;\n</code></pre></div>",
        "id": 227513216,
        "sender_full_name": "detrumi",
        "timestamp": 1614118220
    },
    {
        "content": "<p>And <code>'tcx</code> doesn't work either</p>",
        "id": 227513353,
        "sender_full_name": "detrumi",
        "timestamp": 1614118262
    },
    {
        "content": "<p>give me a second</p>",
        "id": 227513413,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614118276
    },
    {
        "content": "<p>With the function now being:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub fn alloc_from_iter&lt;&#39;a, T: ArenaAllocatable&lt;&#39;tcx, U&gt;, U, V: IntoIterator&lt;Item = T&gt;&gt;(\n    &amp;&#39;a self,\n    iter: V,\n) -&gt; &amp;&#39;a mut [T] {\n    T::allocate_from_iter(self, iter)\n}```\n</code></pre></div>",
        "id": 227513478,
        "sender_full_name": "detrumi",
        "timestamp": 1614118290
    },
    {
        "content": "<p>You could remove the <code>'a</code> entirely right</p>",
        "id": 227513630,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614118326
    },
    {
        "content": "<p>It's used in the return value</p>",
        "id": 227513670,
        "sender_full_name": "detrumi",
        "timestamp": 1614118337
    },
    {
        "content": "<p>Oh you're right</p>",
        "id": 227513809,
        "sender_full_name": "detrumi",
        "timestamp": 1614118375
    },
    {
        "content": "<p>yeah, just remove it</p>",
        "id": 227513829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614118378
    },
    {
        "content": "<p>just change everything to <code>'tcx</code></p>",
        "id": 227513847,
        "sender_full_name": "detrumi",
        "timestamp": 1614118380
    },
    {
        "content": "<p>no, just remove it</p>",
        "id": 227513908,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614118389
    },
    {
        "content": "<p>there's only one lifetime</p>",
        "id": 227513940,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614118393
    },
    {
        "content": "<p>Also <code>self.tcx.arena.alloc_from_iter::&lt;Span, Span, _&gt;(iter)</code> might work</p>",
        "id": 227514036,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614118414
    },
    {
        "content": "<p>since that lifetime is late-bound, it's not a param</p>",
        "id": 227514089,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614118425
    },
    {
        "content": "<p>(Idk if rustc allows that)</p>",
        "id": 227514106,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614118436
    },
    {
        "content": "<p>I see, yeah that works</p>",
        "id": 227514154,
        "sender_full_name": "detrumi",
        "timestamp": 1614118445
    },
    {
        "content": "<p>see <a href=\"https://github.com/rust-lang/rust/issues/42868#issuecomment-325647940\">https://github.com/rust-lang/rust/issues/42868#issuecomment-325647940</a></p>",
        "id": 227514213,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614118477
    },
    {
        "content": "<p>That diagnostic is terrible</p>",
        "id": 227514291,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614118520
    },
    {
        "content": "<p>Interesting how eliding the lifetime changes things here</p>",
        "id": 227514402,
        "sender_full_name": "detrumi",
        "timestamp": 1614118568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> So we solved the issue! You can use this:<br>\n<code>self.tcx.arena.alloc_from_iter::&lt;Span, Span, _&gt;(iter)</code><br>\nAnd then change the function on <code>Arena</code> to this:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub fn alloc_from_iter&lt;T: ArenaAllocatable&lt;&#39;tcx, U&gt;, U, V: IntoIterator&lt;Item = T&gt;&gt;(\n    &amp;self,\n    iter: V,\n) -&gt; &amp;mut [T] {\n    T::allocate_from_iter(self, iter)\n}\n</code></pre></div>",
        "id": 227514553,
        "sender_full_name": "detrumi",
        "timestamp": 1614118668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> <span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> I'm assuming no updates here?</p>",
        "id": 229730796,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615405742
    },
    {
        "content": "<p>All that's left of splitting things off TyCtxt is doing the alloc_from_iter change we figured out above, when that's done I think we can start moving types into rustc_type_ir</p>",
        "id": 229733786,
        "sender_full_name": "detrumi",
        "timestamp": 1615406802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> Are you still interested in doing this?</p>",
        "id": 229733833,
        "sender_full_name": "detrumi",
        "timestamp": 1615406822
    },
    {
        "content": "<p>If you're not interested any more or don't have time for this, I could take over</p>",
        "id": 229734435,
        "sender_full_name": "detrumi",
        "timestamp": 1615407030
    },
    {
        "content": "<p>I was preoccupied with some side things. Will try to move the rest of the methods over this week</p>",
        "id": 229759523,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1615415623
    },
    {
        "content": "<p>alright, now that finally compiles. Need to rebase, but there is certainly a good number of things that are probably not ideal with this. Should I post a PR after rebasing?</p>",
        "id": 230036646,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1615559079
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...zaharidichev:move-encodable-to-type-ir?expand=1\">https://github.com/rust-lang/rust/compare/master...zaharidichev:move-encodable-to-type-ir?expand=1</a></p>",
        "id": 230036662,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1615559085
    },
    {
        "content": "<p>Not sure if we should land this first or go on with moving the types before merging, but either way a PR would be nice</p>",
        "id": 230038723,
        "sender_full_name": "detrumi",
        "timestamp": 1615559813
    },
    {
        "content": "<p>I think this should/can land separately, but also somewhat want to see some examples of this working, if that makes sense? So maybe not all types need to be moved, but maybe the most problematic ones?</p>",
        "id": 230088671,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615579277
    },
    {
        "content": "<p>But nonetheless, a PR would be great to check perf</p>",
        "id": 230088707,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615579290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>   I have submitted a draft to get some feedback before I move on to moving types. <a href=\"https://github.com/rust-lang/rust/pull/83142\">https://github.com/rust-lang/rust/pull/83142</a>.  Not sure whether all the associated types make sense. Also this at the moment looks very very different than <code>chalk_ir::interner::Interner</code></p>",
        "id": 230333208,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1615809855
    },
    {
        "content": "<p>and <a href=\"http://context.rs\">context.rs</a> is too many lines ...</p>",
        "id": 230334874,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1615810796
    },
    {
        "content": "<p>Nice, I'll take a look later today</p>",
        "id": 230335733,
        "sender_full_name": "detrumi",
        "timestamp": 1615811213
    },
    {
        "content": "<p>The point isn't to get the interners the same in one go, we can slowly get them closer together over time once we have something in</p>",
        "id": 230335786,
        "sender_full_name": "detrumi",
        "timestamp": 1615811252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283967\">Zahari Dichev</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Moving.20.60TyEncodable.60.2F.60TyDecodable.60.20to.20.60rustc_typeir.60/near/230334874\">said</a>:</p>\n<blockquote>\n<p>and <a href=\"http://context.rs\">context.rs</a> is too many lines ...</p>\n</blockquote>\n<p>Does it hit a max rustc file length lint somewhere, or do you mean it's just a lot of boilerplate?</p>",
        "id": 230336012,
        "sender_full_name": "detrumi",
        "timestamp": 1615811377
    },
    {
        "content": "<p>hits the lint, I will add an ignore Feel free to take a look, also a suggestion for next steps will be very good (a collection of particular types to move?). I am still a bit lost around the codebase tbh</p>",
        "id": 230336807,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1615811795
    },
    {
        "content": "<p>Well, we're trying to check whether the approach will work, so it's best to pick a tricky type. Maybe one that's mentioned in <code>impl_ty_decoder_arena_type!</code>, and one of the types that are returned from an <code>alloc_from_iter</code> call</p>",
        "id": 230337479,
        "sender_full_name": "detrumi",
        "timestamp": 1615812155
    },
    {
        "content": "<p>I think we could move the <code>Interner</code> impl into a <code>ty/interner.rs</code> module</p>",
        "id": 230351813,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615818030
    },
    {
        "content": "<p>Also, looking over this, I wonder if it's worth trying generalize <code>alloc_from_iter</code> <em>now</em></p>",
        "id": 230352008,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615818104
    },
    {
        "content": "<p>i.e. add some kind of <code>trait InternerAllocable { type Target; }</code>, <code>trait Interner { fn alloc_from_iter&lt;T: InternerAllocable&gt;(t: T) -&gt; T::Target; }</code>, <code>impl&lt;'tcx, T: ArenaAllocatable&lt;'tcx&gt;&gt; InternerAllocable for T { ... }</code></p>",
        "id": 230352484,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615818264
    },
    {
        "content": "<p>(though that last impl might be a problem in terms of coherence, might have to manually impl individual types or create another extension trait or something)</p>",
        "id": 230352654,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615818337
    },
    {
        "content": "<p>I started trying to move some of the types over. Will post an update soon.</p>",
        "id": 230537597,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1615910071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span>  I took another look at the <code>alloc_from_iter</code> calls, and turns out we can simplify things a lot by just adding a lifetime to the <code>Interner</code> trait:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;tcx&gt; Interner&lt;&#39;tcx&gt; for TyInterner&lt;&#39;tcx&gt; {\n    fn alloc_from_iter&lt;T: Copy&gt;(self, iter: impl IntoIterator&lt;Item = T&gt;) -&gt; &amp;&#39;tcx mut [T] {\n        self.tcx.arena.alloc_from_iter(iter)\n    }\n</code></pre></div>\n<p>That limits the interned types to slice references of course, but we can avoid all the associated types and <code>alloc_*_from_iter</code> functions that way</p>",
        "id": 231547986,
        "sender_full_name": "detrumi",
        "timestamp": 1616535460
    },
    {
        "content": "<p>The only thing I would say is be aware of how the <code>Interner</code> looks like in Chalk. I.e. do we eventually want to add a lifetime there?</p>",
        "id": 231549826,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616536378
    },
    {
        "content": "<p>FYI I've picked up <a href=\"https://github.com/rust-lang/rust/issues/83142\">#83142</a> to try to rebase it onto master</p>",
        "id": 240092066,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621881209
    },
    {
        "content": "<p>I don't know how close to finished it was</p>",
        "id": 240092242,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621881272
    },
    {
        "content": "<p>I don't remember. I think maybe we were trying to figure out what the end product is going to look like</p>",
        "id": 240095547,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621882685
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/86435\">#86435</a>, I've just \"blindly\" rebased and made it compile</p>",
        "id": 243169058,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1624026917
    },
    {
        "content": "<p>Ooh nice</p>",
        "id": 243175981,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624030129
    },
    {
        "content": "<p>We/I should go through and review what the \"end goal\" is going to look like. A few HackMDs are around <a href=\"https://hackmd.io/DYGeIIHHSQah6g86piR1dQ\">https://hackmd.io/DYGeIIHHSQah6g86piR1dQ</a> <a href=\"https://hackmd.io/K8cPSWn3So2GlPPvPuktAQ\">https://hackmd.io/K8cPSWn3So2GlPPvPuktAQ</a></p>",
        "id": 243176992,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624030570
    },
    {
        "content": "<p>I'll try to look at this PR today and give some meaningful feedback</p>",
        "id": 243177017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624030586
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span></p>",
        "id": 243177024,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624030590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Moving.20.60TyEncodable.60.2F.60TyDecodable.60.20to.20.60rustc_typeir.60/near/243176992\">said</a>:</p>\n<blockquote>\n<p>We/I should go through and review what the \"end goal\" is going to look like. A few HackMDs are around <a href=\"https://hackmd.io/DYGeIIHHSQah6g86piR1dQ\">https://hackmd.io/DYGeIIHHSQah6g86piR1dQ</a> <a href=\"https://hackmd.io/K8cPSWn3So2GlPPvPuktAQ\">https://hackmd.io/K8cPSWn3So2GlPPvPuktAQ</a></p>\n</blockquote>\n<p>Will take a look</p>",
        "id": 243177073,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1624030617
    },
    {
        "content": "<p>nice, <span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span></p>",
        "id": 243179358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624031750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> you around?</p>",
        "id": 243190286,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038109
    },
    {
        "content": "<p>Yes <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 243190303,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1624038119
    },
    {
        "content": "<p>So, since <code>TyDecoder</code> is going to stay in <code>rustc_middle</code>, that should be able to keep the <code>fn tcx(&amp;self) -&gt; TyCtxt&lt;'tcx&gt;;</code>, right?</p>",
        "id": 243190398,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038154
    },
    {
        "content": "<p>Sorry, I haven't read the hackmds yet</p>",
        "id": 243190457,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1624038201
    },
    {
        "content": "<p>Then, <code>Interner</code> doesn't need some of the alloc functions, like <code>set_alloc_id_same_memory</code></p>",
        "id": 243190472,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038213
    },
    {
        "content": "<p>No worries</p>",
        "id": 243190488,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038224
    },
    {
        "content": "<p>So we're only trying to move <code>Encodable</code>/<code>Decodable</code> but not <code>TyEncodable</code>/<code>TyDecodable</code>?</p>",
        "id": 243190576,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1624038267
    },
    {
        "content": "<p><code>Encodable</code> will still stay in <code>rustc_serialize</code>, maybe</p>",
        "id": 243190700,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038359
    },
    {
        "content": "<p>Oh, I remember, there are no TyEncoable/TyDecodable traits</p>",
        "id": 243190829,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1624038420
    },
    {
        "content": "<p>Correct</p>",
        "id": 243190848,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038434
    },
    {
        "content": "<p>Do you have time now to play with this, or should I just pull your branch and play</p>",
        "id": 243190877,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038457
    },
    {
        "content": "<p>I have time, but I don't know what I should play with</p>",
        "id": 243190943,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1624038484
    },
    {
        "content": "<p>Honestly, I'm lost on this, I only rebased a PR <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 243190988,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1624038513
    },
    {
        "content": "<p>No worries</p>",
        "id": 243190999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038524
    },
    {
        "content": "<p>Can you try keeping <code>fn tcx()</code> on <code>TyDecoder</code>?</p>",
        "id": 243191019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038534
    },
    {
        "content": "<p>Instead of <code>interner()</code></p>",
        "id": 243191024,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038538
    },
    {
        "content": "<p>You mean <code>Decoder</code> then, no?</p>",
        "id": 243191056,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1624038570
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86435/files#diff-0cd144a40ce608d62363b9d675d5b18f775b2eab49111d54880cc04994f540d5R164\">no</a></p>",
        "id": 243191159,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038630
    },
    {
        "content": "<p>Ah nevermind</p>",
        "id": 243191169,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1624038639
    },
    {
        "content": "<p>There's no <code>TyDecodable</code>/<code>TyEncodable</code>, but there is <code>TyEncoder</code>/<code>TyDecoder</code></p>",
        "id": 243191228,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038685
    },
    {
        "content": "<p>Ok, so loosely speaking the plan is \"generic <code>TyInterner</code> in <code>Encodable</code>/<code>Decodable</code>, but we can use <code>TyCtxt</code> in the decoders because they'll stay in rustc\"</p>",
        "id": 243191260,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1624038719
    },
    {
        "content": "<p>We can use <code>TyCtxt</code> in <code>TyDecoder</code>, since that will stay in rustc, yes</p>",
        "id": 243191350,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038779
    },
    {
        "content": "<p>Then, we should be able to remove some functions from <code>Interner</code></p>",
        "id": 243191372,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038802
    },
    {
        "content": "<ul>\n<li><code>set_alloc_id_same_memory</code></li>\n</ul>",
        "id": 243191377,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038804
    },
    {
        "content": "<ul>\n<li><code>create_fn_alloc</code></li>\n</ul>",
        "id": 243191393,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038822
    },
    {
        "content": "<ul>\n<li><code>create_static_alloc</code></li>\n</ul>",
        "id": 243191408,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038833
    },
    {
        "content": "<ul>\n<li><code>reserve_alloc_id</code></li>\n</ul>",
        "id": 243191473,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038872
    },
    {
        "content": "<ul>\n<li><code>insert_same_cached_ty</code> and <code>get_cached_ty</code>, I think</li>\n</ul>",
        "id": 243191521,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038923
    },
    {
        "content": "<p>That's a start</p>",
        "id": 243191601,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624038963
    },
    {
        "content": "<p>There's one thing I don't understand, don't all the types that use <code>#[derive(TyEncodable)]</code> depend on <code>TyDecoder</code>?</p>",
        "id": 243191654,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1624038996
    },
    {
        "content": "<p>Or is that actually not needed</p>",
        "id": 243191670,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1624039004
    },
    {
        "content": "<p>The alloc functions I think we can also make more general. Or at least remove some</p>",
        "id": 243191684,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624039010
    },
    {
        "content": "<p>Yes</p>",
        "id": 243191739,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624039042
    },
    {
        "content": "<p>All types that derive <code>TyEncodable</code> or <code>TyDecodable</code> need <code>TyDecoder</code> or <code>TyEncoder</code></p>",
        "id": 243191764,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624039062
    },
    {
        "content": "<p><em>I think</em></p>",
        "id": 243191776,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624039070
    },
    {
        "content": "<p>Yeah, there are a lot of impls where we have a <code>D: TyDecodable</code> and we don't need the alloc function and associated type and such in <code>Interner</code></p>",
        "id": 243193382,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624040071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> like I said, just let me know if you don't have time and want me to take a stab. Could use a break from looking at the normalization under binders</p>",
        "id": 243193440,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624040125
    },
    {
        "content": "<p>Currently reading, trying to catch up, so if you wanted to try something go ahead</p>",
        "id": 243193612,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1624040230
    },
    {
        "content": "<p>Just pushed some changes. Have some more in the works</p>",
        "id": 243199752,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624044476
    },
    {
        "content": "<p>I basically got into the weeds of moving TyKind to rustc_type_ir as an example</p>",
        "id": 243216774,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624059314
    },
    {
        "content": "<p>The HashStable, Encodable, and Decodable impls are rough</p>",
        "id": 243216784,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624059344
    },
    {
        "content": "<p>Forever wishing for a way to derive on foreign types</p>",
        "id": 243216910,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624059536
    },
    {
        "content": "<p>Well, we aren't allowed to write</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CTX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">rustc_type_ir</span>::<span class=\"n\">TyKind</span><span class=\"o\">&lt;</span><span class=\"n\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">E</span>: <span class=\"nc\">TyEncoder</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 243323450,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624225840
    },
    {
        "content": "<p>That violates the orphan rule</p>",
        "id": 243323461,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624225865
    },
    {
        "content": "<p>The other way around would work if it weren't for the <code>Encodable for [u8]</code> specialization I think.</p>",
        "id": 243323685,
        "sender_full_name": "bjorn3",
        "timestamp": 1624226213
    },
    {
        "content": "<p>What do you mean other way around?</p>",
        "id": 243334559,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624244022
    },
    {
        "content": "<p>I think probably the easiest/best solution <em>for now</em> (might change later), is to just move <code>TyEncoder</code> into <code>rustc_type_ir</code> and keep these impls there</p>",
        "id": 243334615,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624244077
    },
    {
        "content": "<p>But then <code>Ty</code> and <code>PredicateKind</code> have to go together because of the <code>type_shorthands</code> and <code>predicate_shorthands</code></p>",
        "id": 243334681,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624244189
    },
    {
        "content": "<p>It would be interesting to try change that to be a map keyed by type id to hashmap of shorthands</p>",
        "id": 243334715,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624244278
    },
    {
        "content": "<p>But I feel like this is perf sensitive and that one extra level of lookups wouldn't be great</p>",
        "id": 243334762,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624244300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Moving.20.60TyEncodable.60.2F.60TyDecodable.60.20to.20.60rustc_typeir.60/near/243334559\">said</a>:</p>\n<blockquote>\n<p>What do you mean other way around?</p>\n</blockquote>\n<p>Never mind, read your code wrong.</p>",
        "id": 243355265,
        "sender_full_name": "bjorn3",
        "timestamp": 1624266023
    },
    {
        "content": "<p>:/</p>",
        "id": 243406999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624292491
    },
    {
        "content": "<p>Well, okay. So trying to move <code>TyEncoder</code> to <code>rustc_type_ir</code>. And I'd like to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Interner</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">E</span>: <span class=\"nc\">Encoder</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Encoder</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TyEncoder</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Encoder</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">BoundTyKind</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">TyEncoder</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BoundTyKind</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but of course that impl at the bottom isn't  allowed because <code>I</code> isn't constrained</p>",
        "id": 243411008,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624294477
    },
    {
        "content": "<p><code>TyEncoder</code> really looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TyEncoder</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Encoder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">CLEAR_CROSS_CRATE</span>: <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">position</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">type_shorthands</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">FxHashMap</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>::<span class=\"n\">Ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">predicate_shorthands</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">FxHashMap</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>::<span class=\"n\">PredicateKind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">encode_alloc_id</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alloc_id</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">I</span>::<span class=\"n\">AllocId</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 243411124,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624294545
    },
    {
        "content": "<p>Guess an associated type works here</p>",
        "id": 243412128,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624294970
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">__I</span>: <span class=\"nc\">Interner</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">__E</span>: <span class=\"nc\">TyEncoder</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">TyKind</span><span class=\"o\">&lt;</span><span class=\"n\">__I</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">DelaySpanBugEmitted</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">AdtDef</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">SubstsRef</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">DefId</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">Ty</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">Const</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">Region</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">TypeAndMut</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">Mutability</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">Movability</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">PolyFnSig</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">ListBinderExistentialPredicate</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">BinderListTy</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">ProjectionTy</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">ParamTy</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">BoundTy</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">PlaceholderType</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">InferTy</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">DelaySpanBugEmitted</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">PredicateKind</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">__I</span>::<span class=\"n\">AllocId</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">__E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So that...works</p>",
        "id": 243415749,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624296687
    },
    {
        "content": "<p>Oh my gosh this is so terrible</p>",
        "id": 243431735,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624304061
    },
    {
        "content": "<p>Okay just have some mysterious \"hidden type for <code>impl Trait</code> captures lifetime that does not appear in bounds\" to figure out and I think I have it compiling with <code>TyKind</code> moved to <code>rustc_type_ir</code></p>",
        "id": 243432199,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624304312
    },
    {
        "content": "<p>I think moving types around must have changed the variance of something somewhere because now I'm getting a bunch of lifetime errors</p>",
        "id": 243435039,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624305674
    },
    {
        "content": "<p>I'm getting errors like</p>\n<div class=\"codehilite\"><pre><span></span><code>error: lifetime may not live long enough\n   --&gt; compiler/rustc_middle/src/mir/interpret/value.rs:604:9\n    |\n567 | impl&lt;&#39;tcx, Tag&gt; ScalarMaybeUninit&lt;Tag&gt; {\n    |      ---- lifetime `&#39;tcx` defined here\n...\n604 |         self.check_init()?.to_f64()\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `&#39;tcx` must outlive `&#39;static`\n    |\n    = help: consider replacing `&#39;tcx` with `&#39;static`\n</code></pre></div>",
        "id": 243435124,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624305718
    },
    {
        "content": "<p>I think maybe it's because <code>TyKind</code> no longer takes a <code>'tcx</code> but rather a <code>I: Interner</code></p>",
        "id": 243435267,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624305778
    },
    {
        "content": "<p>Where in <code>rustc_middle</code> there's a <code>type TyKind&lt;'tcx&gt; = IrTypeKind&lt;TyInterner&lt;'tcx&gt;&gt;</code></p>",
        "id": 243435306,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624305805
    },
    {
        "content": "<p>SOS <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 243435410,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624305849
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 243435435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624305863
    },
    {
        "content": "<p>sorry I've been so afk</p>",
        "id": 243435442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624305866
    },
    {
        "content": "<p>I'll be resurfacing for trait-related things on thu I think</p>",
        "id": 243435457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624305873
    },
    {
        "content": "<p>I'll be off of vacation on thursday</p>",
        "id": 243435620,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624305966
    },
    {
        "content": "<p>do you have a minute to give thoughts?</p>",
        "id": 243435648,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624305978
    },
    {
        "content": "<p>uh</p>",
        "id": 243435678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624305997
    },
    {
        "content": "<p>is there a branch I can try?</p>",
        "id": 243435684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624306001
    },
    {
        "content": "<p>I can push what I have</p>",
        "id": 243435713,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624306010
    },
    {
        "content": "<p>that'd be helpful</p>",
        "id": 243435723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624306014
    },
    {
        "content": "<p><a href=\"https://github.com/LeSeulArtichaut/rust/tree/zd/type-interner-5\">https://github.com/LeSeulArtichaut/rust/tree/zd/type-interner-5</a></p>",
        "id": 243435828,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624306071
    },
    {
        "content": "<p>Not the errors I expected to hit tbh</p>",
        "id": 243437053,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624306650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> honestly, I don't think it'll compile past rustc_middle, but the rough part is rustc_middle itself</p>",
        "id": 243437347,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624306783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any luck?</p>",
        "id": 243455832,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624317858
    },
    {
        "content": "<p>no-- haven't had time :( sorry, will try to do so soon</p>",
        "id": 243457730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624319497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 243812446,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624552604
    },
    {
        "content": "<p>Okay, so I decided to have some fun and do something different and take a look at this again</p>",
        "id": 250252854,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629604463
    },
    {
        "content": "<p>I've narrowed down the problem here to show what's going on into a playground: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bd6701683459e7447041399d6caf0b7f\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bd6701683459e7447041399d6caf0b7f</a></p>",
        "id": 250252856,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629604488
    },
    {
        "content": "<p>Basically, the magic bit is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">//kind: IrTyKind&lt;TyCtxt&lt;'tcx&gt;&gt;,</span>\n<span class=\"w\">    </span><span class=\"n\">kind</span>: <span class=\"nc\">RawTyKind</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250252864,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629604511
    },
    {
        "content": "<p><code>RawTyKind&lt;'tcx&gt;</code> works but <code>IrTyKind&lt;TyCtxt&lt;'tcx&gt;&gt;</code> does not</p>",
        "id": 250252873,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629604531
    },
    {
        "content": "<p>As I expected, it <em>is</em> a variance issue</p>",
        "id": 250252881,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629604542
    },
    {
        "content": "<p><code>RawTyKind</code> is covariant over <code>'tcx</code> but <code>IrTyKind</code> is <em>invariant</em> over <code>I</code></p>",
        "id": 250252922,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629604573
    },
    {
        "content": "<p>(so <code>TyS</code> ends up being covariant over <code>'tcx</code> with the former and invariant over <code>'tcx</code> with the latter)</p>",
        "id": 250252928,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629604624
    },
    {
        "content": "<p>So, started down this rabbit hole a bit</p>",
        "id": 250253947,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629606450
    },
    {
        "content": "<p>Found <a href=\"https://github.com/rust-lang/rust/issues/21726\">#21726</a></p>",
        "id": 250253949,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629606454
    },
    {
        "content": "<p>Also this <a href=\"https://github.com/rust-lang/rust/issues/57440\">#57440</a></p>",
        "id": 250254629,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629607466
    },
    {
        "content": "<p>So there's this pattern</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">S1</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span>::<span class=\"n\">Assoc</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250254638,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629607500
    },
    {
        "content": "<p>And I've seen that in rustc at some point</p>",
        "id": 250254648,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629607517
    },
    {
        "content": "<p>From <a href=\"https://github.com/rust-lang/rust/issues/57440\">#57440</a></p>\n<blockquote>\n<p>Instead, I was hoping that internally rust could treat S2 as though it had an implicit A = T::Assoc type parameter, and given that, its variance could be handled exactly the same as S1.</p>\n</blockquote>\n<p>That might be a decent way to handle this?</p>",
        "id": 250254698,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629607569
    },
    {
        "content": "<p>Right now, we're rather limited when asking if <code>Foo&lt;T&gt; &lt;: Foo&lt;U&gt;</code>, because we can only answer that by looking at <code>T</code> and <code>U</code></p>",
        "id": 250254718,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629607641
    },
    {
        "content": "<p>but I somewhat feel like it does make sense to be able to extend that to <code>T::Assoc</code> and <code>U::Assoc</code></p>",
        "id": 250254767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629607685
    },
    {
        "content": "<p>but unsure how that would work</p>",
        "id": 250254769,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629607692
    },
    {
        "content": "<p>a workaround: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=cf16da7c677fdef3d54efd3037a8a377\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=cf16da7c677fdef3d54efd3037a8a377</a></p>",
        "id": 250254936,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629608003
    },
    {
        "content": "<p>Note that workaround quickly breaks down: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2317c07d48821d668e45ee4f00012fd3\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2317c07d48821d668e45ee4f00012fd3</a></p>",
        "id": 250417040,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629755558
    }
]