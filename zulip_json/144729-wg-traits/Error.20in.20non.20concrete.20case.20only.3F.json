[
    {
        "content": "<p>I'm writing a blog post, and need someone to check my understanding.</p>\n<p>Rustc doesn't seam to be able to reason about lifetime or trait constraints through a unknown type parameter's associated type.<br>\nAs we can see in <code>foo_str</code>, rustc knows <code>Of&lt;'a, &amp;str&gt; == Of&lt;'b, &amp;str&gt;</code> and <code>Of&lt;'_, &amp;str&gt; == &amp;str</code>.<br>\nIt can even prove <code>Of&lt;'a, Gc&lt;&amp;str&gt;&gt; == Of&lt;'b, Gc&lt;&amp;str&gt;&gt;</code> and <code>Of&lt;'_, Gc&lt;&amp;str&gt;&gt; == Gc&lt;&amp;str&gt;</code>.<br>\nIt just can't see through a type parameter <code>T</code> preventing <code>Of&lt;'a, T&gt; == Of&lt;'b, T&gt;</code>.<br>\nA version of this issue occurred in every encoding I attempted.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Applies a lifetime.</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">PlugLife</span><span class=\"o\">&lt;'</span><span class=\"na\">l</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span>: <span class=\"o\">'</span><span class=\"na\">l</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">UnPlugLife</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Removes a lifetime.</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UnPlugLife</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// We can always apply a lifetime after removing one.</span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">PlugLife</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Gc with a unapplied lifetime.</span>\n<span class=\"k\">struct</span> <span class=\"nc\">GcL</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">PlugLife</span><span class=\"o\">&lt;'</span><span class=\"na\">l</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">PlugLife</span><span class=\"o\">&lt;'</span><span class=\"na\">l</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">GcL</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Gc</span><span class=\"o\">&lt;'</span><span class=\"na\">l</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">PlugLife</span><span class=\"o\">&lt;'</span><span class=\"na\">l</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">UnPlugLife</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">UnPlugLife</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Gc</span><span class=\"o\">&lt;'</span><span class=\"na\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">GcL</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">UnPlugLife</span><span class=\"o\">&gt;</span>::<span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Replace a lifetime with `'r`.</span>\n<span class=\"k\">type</span> <span class=\"nc\">Of</span><span class=\"o\">&lt;'</span><span class=\"na\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">UnPlugLife</span><span class=\"o\">&gt;</span>::<span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">PlugLife</span><span class=\"o\">&lt;'</span><span class=\"na\">r</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The problem can be seen clearest by comparing a concrete function signature to a paramedic one.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"cp\">#[may_dangle]</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">l</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">PlugLife</span><span class=\"o\">&lt;'</span><span class=\"na\">l</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">l</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"cp\">#[may_dangle]</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">r</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">UnPlugLife</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">r</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// This compiles!</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo_str</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">Of</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">Of</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// But this errors.</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">UnPlugLife</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Eq</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">Of</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">Of</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//~ [rustc E0623] [E] lifetime mismatch ...but data from `a` flows into `b` here</span>\n\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//^~ [rustc E0369] [E] binary operation `==` cannot be applied to type `&lt;&lt;T as UnPlugLife&gt;::T as PlugLife&gt;::T&lt;'a&gt;`</span>\n<span class=\"w\">    </span><span class=\"c1\">//   the trait `std::cmp::PartialEq` is not implemented for `&lt;&lt;T as UnPlugLife&gt;::T as PlugLife&gt;::T&lt;'a&gt;`</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216446090,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605173965
    },
    {
        "content": "<p>In particular I am confused by the \"data from <code>a</code> flows into <code>b</code> here\"  in the parametric case.<br>\nWhy does <code>'a: 'b, 'b: 'a</code> arise in <code>foo</code>, but not in <code>foo_str</code>?</p>",
        "id": 216446430,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605174236
    },
    {
        "content": "<p>I expect the issue is that <code>&amp;str</code> is covariant, so <code>v</code> actually has the lt <code>'c</code> with <code>'a: 'c</code>, <code>'b: 'c</code></p>",
        "id": 216446666,
        "sender_full_name": "lcnr",
        "timestamp": 1605174409
    },
    {
        "content": "<p>The type param <code>T</code> is invariant so you don't have a shared subtype you can use for <code>v</code></p>",
        "id": 216446726,
        "sender_full_name": "lcnr",
        "timestamp": 1605174454
    },
    {
        "content": "<p>How does variance work with GAT?<br>\nWhat's the variance of <code>T::L&lt;'a&gt;</code>?<br>\nI'm assuming it's invariant since it produces the same errors.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Life</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">L</span><span class=\"o\">&lt;'</span><span class=\"na\">l</span><span class=\"o\">&gt;</span>: <span class=\"o\">'</span><span class=\"na\">l</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Life</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Of</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">#[may_dangle]</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Life</span><span class=\"o\">&gt;</span>::<span class=\"n\">L</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216448114,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605175274
    },
    {
        "content": "<p>If type equality constraints ever land would <code>T == &lt;T as Life&gt;::L&lt;'a&gt;</code> fix my issue?</p>",
        "id": 216448258,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605175363
    },
    {
        "content": "<p>probably</p>",
        "id": 216448959,
        "sender_full_name": "lcnr",
        "timestamp": 1605175835
    },
    {
        "content": "<p>can you share your full example on the playground?</p>",
        "id": 216449156,
        "sender_full_name": "lcnr",
        "timestamp": 1605175951
    },
    {
        "content": "<p>I want to experiment a bit here</p>",
        "id": 216449177,
        "sender_full_name": "lcnr",
        "timestamp": 1605175964
    },
    {
        "content": "<p><a href=\"https://github.com/Avi-D-coder/gc-gat\">https://github.com/Avi-D-coder/gc-gat</a> (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=5521bd53c59b34e21a1d0f83ccc4899e\">playground</a>)<br>\n<a href=\"https://github.com/Avi-D-coder/gc-gat-plug/tree/plug\">https://github.com/Avi-D-coder/gc-gat-plug/tree/plug</a> (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=5521bd53c59b34e21a1d0f83ccc4899e\">playground</a>)<br>\n<a href=\"https://github.com/Avi-D-coder/gc-gat-family\">https://github.com/Avi-D-coder/gc-gat-family</a></p>\n<p>These are the main playgrounds and most up to date branches, any of my repos prefixed <code>gc-*</code> have other version of the idea.</p>",
        "id": 216450408,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605176769
    },
    {
        "content": "<p>I meant to share a version of that using <a href=\"https://play.rust-lang.org/\">https://play.rust-lang.org/</a> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> don't have the energy to do this locally rn</p>",
        "id": 216450628,
        "sender_full_name": "lcnr",
        "timestamp": 1605176929
    },
    {
        "content": "<p>Added in parens</p>",
        "id": 216450774,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605177025
    },
    {
        "content": "<p>The family pattern attempt is not in a sharable state out side of git. I think that ones a dead end anyway.</p>",
        "id": 216450958,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605177134
    },
    {
        "content": "<p>I hoped that something like this might have worked <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7b6ba916162cfa9ccbab8a809822e2ff\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7b6ba916162cfa9ccbab8a809822e2ff</a></p>",
        "id": 216452142,
        "sender_full_name": "lcnr",
        "timestamp": 1605177879
    },
    {
        "content": "<p>also, I just reread your first comments and I really like the idea of injecting and erasing lt like this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 216452514,
        "sender_full_name": "lcnr",
        "timestamp": 1605178140
    },
    {
        "content": "<p>I had hoped something like that would work as well.</p>\n<p>Thanks for taking a look.<br>\nHere's hoping I missed something!</p>",
        "id": 216452766,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605178311
    },
    {
        "content": "<p>why do you want your types to be variant?</p>",
        "id": 216453465,
        "sender_full_name": "lcnr",
        "timestamp": 1605178715
    },
    {
        "content": "<p>New GCed allocations and marking into <code>Arena</code>s have to extend the lifetime of existing referenced objects.</p>",
        "id": 216455645,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605180188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> How should I credit you in my blog post for pointing out the relation to variance?<br>\nShould I use your username?</p>",
        "id": 216592466,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605263223
    },
    {
        "content": "<p>that's a good question <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 216592494,
        "sender_full_name": "lcnr",
        "timestamp": 1605263258
    },
    {
        "content": "<p>I guess I would prefer <a href=\"https://github.com/lcnr\">https://github.com/lcnr</a></p>",
        "id": 216592625,
        "sender_full_name": "lcnr",
        "timestamp": 1605263341
    }
]