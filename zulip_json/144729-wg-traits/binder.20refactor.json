[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let me know when you're available</p>",
        "id": 229671001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615387193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ping</p>",
        "id": 229675332,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615388542
    },
    {
        "content": "<p>Just waiting on Niko <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 229675577,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615388619
    },
    {
        "content": "<p>Oh <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is active now :)</p>",
        "id": 229675884,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615388710
    },
    {
        "content": "<p>wave</p>",
        "id": 229676003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615388753
    },
    {
        "content": "<p>Zoom? or text?</p>",
        "id": 229676052,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615388763
    },
    {
        "content": "<p>hmm</p>",
        "id": 229676125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615388773
    },
    {
        "content": "<p>I'm kind of rather text if that's ok</p>",
        "id": 229676150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615388779
    },
    {
        "content": "<p>Works for me</p>",
        "id": 229676175,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615388791
    },
    {
        "content": "<p>Changed the topic here</p>",
        "id": 229676266,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615388824
    },
    {
        "content": "<p>I'm looking backwards briefly to remember where we are at</p>",
        "id": 229676270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615388824
    },
    {
        "content": "<p>ok</p>",
        "id": 229676346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615388855
    },
    {
        "content": "<p>I sort of remember now :)</p>",
        "id": 229676358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615388863
    },
    {
        "content": "<p>I can talk through anything that you feel might be helpful. And/or I can discuss the recent progress that I made and the next challenge</p>",
        "id": 229676433,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615388891
    },
    {
        "content": "<p>well</p>",
        "id": 229676651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615388949
    },
    {
        "content": "<p>you mentioned that you  had solved some things</p>",
        "id": 229676796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389008
    },
    {
        "content": "<p>:)</p>",
        "id": 229676800,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389008
    },
    {
        "content": "<p>so I am torn between forcing you to repeat</p>",
        "id": 229676806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389012
    },
    {
        "content": "<p>or just having you talk about the challenge</p>",
        "id": 229676841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389019
    },
    {
        "content": "<p>I guess let me run some thoughts by you to see if I'm following</p>",
        "id": 229676863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389026
    },
    {
        "content": "<p>ah I remember that I wanted to talk a bit about how the <code>Foo&lt;T: Bar&gt;</code> desugaring works</p>",
        "id": 229676904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389050
    },
    {
        "content": "<p>Yes, of course</p>",
        "id": 229676909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389052
    },
    {
        "content": "<p>I can talk through that</p>",
        "id": 229676924,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389061
    },
    {
        "content": "<p>that sounds helpful</p>",
        "id": 229677038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389082
    },
    {
        "content": "<p>Ok, so let's see</p>",
        "id": 229677083,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389098
    },
    {
        "content": "<p>to start, how is <code>Foo&lt;T: Bar&gt;</code> represented in HIR?</p>",
        "id": 229677099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389109
    },
    {
        "content": "<p>Well, let's go with <code>T: Foo&lt;T: Bar&gt;</code></p>",
        "id": 229677207,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389127
    },
    {
        "content": "<p>I recommend <code>T: Foo&lt;Bar: Baz&gt;</code> or something</p>",
        "id": 229677256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389142
    },
    {
        "content": "<p>not to repeat <code>T</code> :)</p>",
        "id": 229677261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389145
    },
    {
        "content": "<p>oops yeah</p>",
        "id": 229677275,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389151
    },
    {
        "content": "<p>but yes</p>",
        "id": 229677282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389153
    },
    {
        "content": "<p>that is a <code>hir::TraitRef</code></p>",
        "id": 229677311,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389165
    },
    {
        "content": "<p>(I'm also trying to find code snippets)</p>",
        "id": 229677341,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389178
    },
    {
        "content": "<p>but maybe: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/struct.TraitRef.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/struct.TraitRef.html</a></p>",
        "id": 229677482,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389205
    },
    {
        "content": "<p>I just loaded that :)</p>",
        "id": 229677509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389216
    },
    {
        "content": "<p>so it's part of a <code>PathSegment</code>?</p>",
        "id": 229677679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389256
    },
    {
        "content": "<p>yes</p>",
        "id": 229677694,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389260
    },
    {
        "content": "<p>I guess it's a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.TypeBinding.html\"><code>TypeBinding</code></a></p>",
        "id": 229677754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389279
    },
    {
        "content": "<p>since you could do <code>T: buzz::Foo&lt;Bar: Baz&gt;</code></p>",
        "id": 229677759,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389280
    },
    {
        "content": "<p>Yes</p>",
        "id": 229677772,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389286
    },
    {
        "content": "<p>OK</p>",
        "id": 229677785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389292
    },
    {
        "content": "<p>I feel like you'll click through things faster then I can type</p>",
        "id": 229677804,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389301
    },
    {
        "content": "<p>So that means that AstConv is responsible for managing those</p>",
        "id": 229677899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389313
    },
    {
        "content": "<p>and converting them into predicates</p>",
        "id": 229677908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389317
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, are you following along?)</p>",
        "id": 229677936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389324
    },
    {
        "content": "<p>yes</p>",
        "id": 229677942,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389325
    },
    {
        "content": "<p>(or others?)</p>",
        "id": 229677946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389328
    },
    {
        "content": "<p>I don't want to leave folks behind :)</p>",
        "id": 229677950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389332
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/a4d9624242df6bfe6c0a298867dd2bd527263424/compiler/rustc_typeck/src/astconv/mod.rs#L635\"><code>instantiate_poly_trait_ref</code></a> is sort of the entrypoint for that</p>",
        "id": 229678039,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389364
    },
    {
        "content": "<p>(side note, there is an awesome vscode plugin for getting canonical github links from active vscode editors)</p>",
        "id": 229678172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389390
    },
    {
        "content": "<p>ooh</p>",
        "id": 229678188,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389401
    },
    {
        "content": "<p>There we essentially push <code>T: Foo</code>, then calls <code>add_predicates_for_ast_type_binding</code> for the <code>Bar: Baz</code> binding</p>",
        "id": 229678323,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229678172\">said</a>:</p>\n<blockquote>\n<p>(side note, there is an awesome vscode plugin for getting canonical github links from active vscode editors)</p>\n</blockquote>\n<p>This? <a href=\"https://marketplace.visualstudio.com/items?itemName=gimenete.github-linker\">https://marketplace.visualstudio.com/items?itemName=gimenete.github-linker</a></p>",
        "id": 229678399,
        "sender_full_name": "detrumi",
        "timestamp": 1615389475
    },
    {
        "content": "<p>so how related is that to the code that manages <code>Foo&lt;T = Bar&gt;</code></p>",
        "id": 229678409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389480
    },
    {
        "content": "<p>the one I use is called \"copy-github-permalink\"</p>",
        "id": 229678534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389496
    },
    {
        "content": "<p>Right, so add_predicates_for_ast_type_binding handles both <code>T: Bar</code> or <code>T = Bar</code></p>",
        "id": 229678566,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389510
    },
    {
        "content": "<p><a href=\"https://marketplace.visualstudio.com/items?itemName=hogashi.vscode-copy-github-permalink\">link</a></p>",
        "id": 229678568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229677936\">said</a>:</p>\n<blockquote>\n<p>(<span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span>, are you following along?)</p>\n</blockquote>\n<p>sorry, Julieta is a bit sick, back and catching up</p>",
        "id": 229678578,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615389519
    },
    {
        "content": "<p>ok, so this is related to what <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> was asking yesterday in a way</p>",
        "id": 229678599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389531
    },
    {
        "content": "<p>about where the upcasts happen</p>",
        "id": 229678607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389534
    },
    {
        "content": "<p>But it first changes <code>T: Foo</code> to <code>T: Buzz</code> if <code>Foo</code> doesn't actually define <code>Bar</code></p>",
        "id": 229678617,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389541
    },
    {
        "content": "<p>yes :)</p>",
        "id": 229678692,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389549
    },
    {
        "content": "<p>i.e., we start out with the trait-ref the user gave: <code>T: Foo</code> (or whatever)</p>",
        "id": 229678712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389559
    },
    {
        "content": "<p>then we enumerate all the upcast versions of it</p>",
        "id": 229678724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389565
    },
    {
        "content": "<p>(more or less)</p>",
        "id": 229678739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389569
    },
    {
        "content": "<p>and evaluate the bindings against those</p>",
        "id": 229678747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389574
    },
    {
        "content": "<p>looking for the one where the associated type appears directly in the trait</p>",
        "id": 229678792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389591
    },
    {
        "content": "<p>Yes</p>",
        "id": 229678809,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389597
    },
    {
        "content": "<p>in what way are <code>AT: Foo</code> worse than <code>AT=X</code> bindings?</p>",
        "id": 229678901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389620
    },
    {
        "content": "<p>Well, a few</p>",
        "id": 229678998,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389642
    },
    {
        "content": "<p>before you answer that</p>",
        "id": 229679006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389647
    },
    {
        "content": "<p>/me waits</p>",
        "id": 229679119,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389671
    },
    {
        "content": "<p>so <code>instantiate_poly_trait_ref_inner</code> <a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_typeck/src/astconv/mod.rs#L650-L656\">invokes <code>create_substs_for_ast_trait_ref</code></a></p>",
        "id": 229679130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389673
    },
    {
        "content": "<p>Yes</p>",
        "id": 229679165,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389679
    },
    {
        "content": "<p>which in turn invokes <code>create_substs_for_ast_path</code></p>",
        "id": 229679193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389687
    },
    {
        "content": "<p>This essentially just gets the substs for <code>Foo&lt;'a, T, U&gt;</code></p>",
        "id": 229679260,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389721
    },
    {
        "content": "<p>It doesn't handle associated types</p>",
        "id": 229679312,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389727
    },
    {
        "content": "<p>I have to get my noise cancelling headphoens</p>",
        "id": 229679381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389736
    },
    {
        "content": "<p>the neighbors have decided to use their jackhammers today</p>",
        "id": 229679403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389743
    },
    {
        "content": "<p>Well...</p>",
        "id": 229679415,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389750
    },
    {
        "content": "<p>Actually it sort of does</p>",
        "id": 229679426,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389754
    },
    {
        "content": "<p>But at the end of the function</p>",
        "id": 229679441,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389763
    },
    {
        "content": "<p>In my branch, I actually split it out for clarity</p>",
        "id": 229679472,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229679441\">said</a>:</p>\n<blockquote>\n<p>But at the end of the function</p>\n</blockquote>\n<p>you mean <a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_typeck/src/astconv/mod.rs#L549-L577\">this code</a>?</p>",
        "id": 229679651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389822
    },
    {
        "content": "<p>But that does lead to the first point to you \"why is it worse question\"</p>",
        "id": 229679659,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389825
    },
    {
        "content": "<p>yeah</p>",
        "id": 229679690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389834
    },
    {
        "content": "<p>that's not at all dependent on the rest of the function</p>",
        "id": 229679728,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389844
    },
    {
        "content": "<p>ok so</p>",
        "id": 229679851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389870
    },
    {
        "content": "<p>this actually doesn't do the upcasting</p>",
        "id": 229679866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389876
    },
    {
        "content": "<p>it just converts e.g. <code>Item = u32</code> into a <code>ConvertedBindingKind::Equality(u32)</code></p>",
        "id": 229679900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389887
    },
    {
        "content": "<p>right</p>",
        "id": 229679920,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389896
    },
    {
        "content": "<p>(eagerly)</p>",
        "id": 229679926,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389900
    },
    {
        "content": "<p>Whereas <code>Item: Bar</code> is lazy</p>",
        "id": 229679965,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389909
    },
    {
        "content": "<p>interesting</p>",
        "id": 229679974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389913
    },
    {
        "content": "<p>(first point)</p>",
        "id": 229680004,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389916
    },
    {
        "content": "<p>upcasting is in <code>add_predicates_for_ast_type_binding</code></p>",
        "id": 229680081,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389934
    },
    {
        "content": "<p>and yeah this is totally independent, isn't it?</p>",
        "id": 229680091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389937
    },
    {
        "content": "<p>ok</p>",
        "id": 229680096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615389938
    },
    {
        "content": "<p><code>instantiate_poly_trait_ref</code> only pushes <code>T: Foo</code>, not <code>T: Bar</code> (where Bar would be upcasted)</p>",
        "id": 229680288,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615389973
    },
    {
        "content": "<p>wait what</p>",
        "id": 229680474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390029
    },
    {
        "content": "<p>ok ok I think I understand</p>",
        "id": 229680503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390042
    },
    {
        "content": "<p>Okay, the second point to why <code>As: Foo</code> is worse than <code>As = X</code> (ready?)</p>",
        "id": 229680524,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390053
    },
    {
        "content": "<p>ok</p>",
        "id": 229680543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390063
    },
    {
        "content": "<p><code>As: Foo</code> allows new late bound vars</p>",
        "id": 229680561,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390069
    },
    {
        "content": "<p>i.e. <code>As: for&lt;'b&gt; Foo&lt;'b&gt;</code></p>",
        "id": 229680592,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390079
    },
    {
        "content": "<p>I'm trying to remember what we said about GATs and forall binders</p>",
        "id": 229680708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390094
    },
    {
        "content": "<p>and whether it made any sense to have <code>T: Foo&lt;for&lt;'a&gt; AT&lt;'a&gt; = ...&gt;</code></p>",
        "id": 229680739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390110
    },
    {
        "content": "<p>but ok</p>",
        "id": 229680755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390119
    },
    {
        "content": "<p>let's go back to the narration</p>",
        "id": 229680806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390132
    },
    {
        "content": "<p>So, for GATs, it would have to be <code>for&lt;'a&gt; Foo&lt;AT&lt;'a&gt; = ...&gt;</code></p>",
        "id": 229680820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390136
    },
    {
        "content": "<p>Really, they ultimately end up being the same :)</p>",
        "id": 229680934,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390163
    },
    {
        "content": "<p>Okay, so continuing</p>",
        "id": 229680966,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390176
    },
    {
        "content": "<p>So the <code>At: Foo</code> bit isn't actually just a PolyTraitRef, it's actually a list of <em>bounds</em></p>",
        "id": 229681181,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390220
    },
    {
        "content": "<p>since you could also have <code>Outlives</code></p>",
        "id": 229681215,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390227
    },
    {
        "content": "<p>so at <a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_typeck/src/astconv/mod.rs#L650-L657\">this point</a> we have the (non-upcast) trait ref and a set of \"converted\" bindings</p>",
        "id": 229681220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390228
    },
    {
        "content": "<p>yes</p>",
        "id": 229681317,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390260
    },
    {
        "content": "<p>then we <a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_typeck/src/astconv/mod.rs#L663-L672\">invoke <code>add_predicates_for_ast_type_bindings</code></a></p>",
        "id": 229681375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390279
    },
    {
        "content": "<p>yes</p>",
        "id": 229681385,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390282
    },
    {
        "content": "<p>Okay, I'll continue?</p>",
        "id": 229681639,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390331
    },
    {
        "content": "<p>So, then, in <code>add_predicates_for_ast_type_bindings</code></p>",
        "id": 229681695,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390351
    },
    {
        "content": "<p>sorry, reading into the code</p>",
        "id": 229681709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390357
    },
    {
        "content": "<p>We have to take our upcasted <code>T: Bar</code> and our associated type <code>As</code> (with optional substs on <code>As</code>), and make a projection ty <code>&lt;T as Bar&gt;::As</code></p>",
        "id": 229681886,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390399
    },
    {
        "content": "<p>the upcasting occurs in <a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_typeck/src/astconv/mod.rs#L999-L1010\">the call to <code>one_bound_for_assoc_type</code></a>?</p>",
        "id": 229681974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390428
    },
    {
        "content": "<p>(again, I'm not sure how much help me typing things out versus you just reading code is)</p>",
        "id": 229682007,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390435
    },
    {
        "content": "<p>yes</p>",
        "id": 229682145,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390447
    },
    {
        "content": "<p>heh, probably better if you just let me ask you questions for a bit</p>",
        "id": 229682169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390454
    },
    {
        "content": "<p>that fn is essentially just a wrapper around <code>traits::supertraits</code></p>",
        "id": 229682273,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390490
    },
    {
        "content": "<p>i.e. elaborating super traits to find all candidates of <code>As</code>, and then spitting diagnostics if there are multiple</p>",
        "id": 229682404,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390509
    },
    {
        "content": "<p>right</p>",
        "id": 229682447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390521
    },
    {
        "content": "<p>ok, and that is called for both equality and the other kind</p>",
        "id": 229682503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390538
    },
    {
        "content": "<p>and it returns the upcast trait ref</p>",
        "id": 229682511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390541
    },
    {
        "content": "<p>Well, the important args there are <code>trait::supertraits(...)</code> and <code>binding.item_name</code></p>",
        "id": 229682740,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390584
    },
    {
        "content": "<p>right</p>",
        "id": 229682785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390601
    },
    {
        "content": "<p>It doesn't really care about whether we have <code>Constraint</code> or <code>Equality</code> bounds</p>",
        "id": 229682786,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390604
    },
    {
        "content": "<p>right</p>",
        "id": 229682799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390609
    },
    {
        "content": "<p>the next notable event is that we <a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_typeck/src/astconv/mod.rs#L1052-L1078\">create the projection type</a></p>",
        "id": 229682924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390631
    },
    {
        "content": "<p>yep</p>",
        "id": 229682950,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390641
    },
    {
        "content": "<p>and then <a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_typeck/src/astconv/mod.rs#L1117-L1146\">do the actual binding conversion here</a></p>",
        "id": 229682975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390648
    },
    {
        "content": "<p>ok</p>",
        "id": 229682977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390649
    },
    {
        "content": "<p>ok, thank you for your patience</p>",
        "id": 229683041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390673
    },
    {
        "content": "<p>yes</p>",
        "id": 229683045,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390676
    },
    {
        "content": "<p>no problem :)</p>",
        "id": 229683055,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390679
    },
    {
        "content": "<p>so binders</p>",
        "id": 229683058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390680
    },
    {
        "content": "<p>Right, binders</p>",
        "id": 229683151,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390688
    },
    {
        "content": "<p>the challenge here is that the <code>AT: Foo</code> (or the <code>AT = Foo</code>, for that matter) occur under a different set of binders</p>",
        "id": 229683225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390713
    },
    {
        "content": "<p>and we didn't \"take them through the upcast\" somehow</p>",
        "id": 229683240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390720
    },
    {
        "content": "<p>Well...</p>",
        "id": 229683261,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390730
    },
    {
        "content": "<p>I guess this doesn't apply to <code>AT = Foo</code> today .......... ? I'm a bit confused about that</p>",
        "id": 229683388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390759
    },
    {
        "content": "<p>So, for me, it's actually helpful to split <code>At: Foo</code> into the <code>At</code> bit and the <code>for&lt;...&gt; Foo</code> bit</p>",
        "id": 229683389,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390759
    },
    {
        "content": "<p>The <code>At</code> bit has a set of binders that is defined by the trait ref of the trait that defines it</p>",
        "id": 229683476,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390797
    },
    {
        "content": "<p>imagine you have <code>for&lt;'a&gt; T: Foo&lt;'a, AT = &amp;'a u32&gt;</code></p>",
        "id": 229683540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390807
    },
    {
        "content": "<p>hmm</p>",
        "id": 229683635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390826
    },
    {
        "content": "<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">AT</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 229683726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390861
    },
    {
        "content": "<p>(also important to note that <code>one_bound_for_assoc_type</code> does <code>subst_supertrait</code>)</p>",
        "id": 229683921,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390915
    },
    {
        "content": "<p>ok, so is the trick here that we preserve the indices</p>",
        "id": 229684059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390936
    },
    {
        "content": "<p>and because we flatten the binders</p>",
        "id": 229684073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390941
    },
    {
        "content": "<p>the depth still works?</p>",
        "id": 229684081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390944
    },
    {
        "content": "<p>i.e., the danger is that <code>AT = &amp;'a u32</code> existed under one level of binder</p>",
        "id": 229684104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390952
    },
    {
        "content": "<p>Well...depth is the tricky bit :) that I'd like to get to</p>",
        "id": 229684154,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390967
    },
    {
        "content": "<p>but we now inserting it into <code>for&lt;'a, 'b&gt;</code></p>",
        "id": 229684158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615390968
    },
    {
        "content": "<p>The problem with depth is <em>not</em> the supertrait bounds</p>",
        "id": 229684271,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615390992
    },
    {
        "content": "<p>Since the associated type contraints/equality can't name them</p>",
        "id": 229684307,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391007
    },
    {
        "content": "<p>(they are only \"seen\" in the projection type)</p>",
        "id": 229684329,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391015
    },
    {
        "content": "<p>seen/found</p>",
        "id": 229684560,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391070
    },
    {
        "content": "<p>ok, what is the problem?</p>",
        "id": 229684596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391087
    },
    {
        "content": "<p>The problem with depth comes into play with the \"constrained\" lifetimes</p>",
        "id": 229684658,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391111
    },
    {
        "content": "<p>let me type up an example</p>",
        "id": 229684684,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391117
    },
    {
        "content": "<p>If I think about this in terms of recursive binders</p>",
        "id": 229684689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391118
    },
    {
        "content": "<p>it seems relatively easy but it requires a bit of \"careful attention\"</p>",
        "id": 229684741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391130
    },
    {
        "content": "<p>in particular, you would have to take <code>&amp;'a u32</code> and \"push it through\" the additional binders that were added to the trait ref by the upcasting</p>",
        "id": 229684785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391149
    },
    {
        "content": "<p><code>for&lt;'a&gt; T: Foo&lt;Bar: for&lt;'x&gt; Baz&lt;As: 'a + 'x&gt;</code></p>",
        "id": 229684862,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391164
    },
    {
        "content": "<p>Here, <code>'a</code> is okay, but <code>'x</code> is not</p>",
        "id": 229684960,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229684658\">said</a>:</p>\n<blockquote>\n<p>The problem with depth comes into play with the \"constrained\" lifetimes</p>\n</blockquote>\n<p>to be clear, you only have problems with <code>AT: ...</code></p>",
        "id": 229684992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391194
    },
    {
        "content": "<p>and not <code>AT = ...</code>?</p>",
        "id": 229685023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229684992\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229684658\">said</a>:</p>\n<blockquote>\n<p>The problem with depth comes into play with the \"constrained\" lifetimes</p>\n</blockquote>\n<p>to be clear, you only have problems with <code>AT: ...</code></p>\n</blockquote>\n<p>yes :)</p>",
        "id": 229685027,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391203
    },
    {
        "content": "<p>and my description of why <code>AT = X</code> works sounds right to you?</p>",
        "id": 229685068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391218
    },
    {
        "content": "<p>i.e., we add any new things to the end of the index list</p>",
        "id": 229685087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391225
    },
    {
        "content": "<p>and we don't introduce any new binders</p>",
        "id": 229685148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391232
    },
    {
        "content": "<p>(because we flatten)</p>",
        "id": 229685151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391235
    },
    {
        "content": "<p>so everything is preserved?</p>",
        "id": 229685168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391238
    },
    {
        "content": "<p>um, yes?</p>",
        "id": 229685202,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391247
    },
    {
        "content": "<p>Yes</p>",
        "id": 229685207,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391251
    },
    {
        "content": "<p>I think it makes sense :) this is what <code>subst_supertrait</code> does essentially</p>",
        "id": 229685232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391263
    },
    {
        "content": "<p>/me goes to get link</p>",
        "id": 229685274,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391281
    },
    {
        "content": "<p>instead of taking <code>for&lt;'a&gt; T: Foo&lt;'a&gt;</code> and producing <code>for&lt;'a&gt; for&lt;'b&gt; T: Bar&lt;'a, 'b&gt;</code></p>",
        "id": 229685360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391286
    },
    {
        "content": "<p>it produces <code>for&lt;'a, 'b&gt; T: Bar&lt;'a, 'b&gt;</code></p>",
        "id": 229685398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391302
    },
    {
        "content": "<p><del>maybe that would be clearer if I quantified over <code>'a</code></del> done</p>",
        "id": 229685436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391327
    },
    {
        "content": "<p><a href=\"https://github.com/jackh726/rust/blob/2656d6f363f671df23bc1770d994332c4098c3d0/compiler/rustc_middle/src/ty/mod.rs#L1148\">https://github.com/jackh726/rust/blob/2656d6f363f671df23bc1770d994332c4098c3d0/compiler/rustc_middle/src/ty/mod.rs#L1148</a></p>",
        "id": 229685438,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391329
    },
    {
        "content": "<p>yes, I think you've got it</p>",
        "id": 229685559,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391363
    },
    {
        "content": "<p>ok</p>",
        "id": 229685575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229684862\">said</a>:</p>\n<blockquote>\n<p><code>for&lt;'a&gt; T: Foo&lt;Bar: for&lt;'x&gt; Baz&lt;As: 'a + 'x&gt;</code></p>\n</blockquote>\n<p>so let's go back to this</p>",
        "id": 229685598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391385
    },
    {
        "content": "<p>Right, so</p>",
        "id": 229685611,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391391
    },
    {
        "content": "<p>Should I explain, or let you ask questions</p>",
        "id": 229685663,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391403
    },
    {
        "content": "<p>why don't you narrate now</p>",
        "id": 229685755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391413
    },
    {
        "content": "<p>Okay</p>",
        "id": 229685768,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391417
    },
    {
        "content": "<p>or I could dig through the code I guess</p>",
        "id": 229685779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391421
    },
    {
        "content": "<p>maybe that's better :)</p>",
        "id": 229685785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391423
    },
    {
        "content": "<p>you mean walk through the code that handles <code>As: 'a + 'x</code>?</p>",
        "id": 229685816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391430
    },
    {
        "content": "<p>Well, that's in <code>add_bounds</code></p>",
        "id": 229685850,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391440
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_typeck/src/astconv/mod.rs#L1134-L1145\">this call</a></p>",
        "id": 229685875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391446
    },
    {
        "content": "<p>right</p>",
        "id": 229685881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391447
    },
    {
        "content": "<p>But this check actually gets called <a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_typeck/src/astconv/mod.rs#L1088\">here</a></p>",
        "id": 229686019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391479
    },
    {
        "content": "<p>err</p>",
        "id": 229686058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391491
    },
    {
        "content": "<p>Well</p>",
        "id": 229686065,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391495
    },
    {
        "content": "<p>what check</p>",
        "id": 229686091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391502
    },
    {
        "content": "<p>let me make the example more simple</p>",
        "id": 229686107,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391505
    },
    {
        "content": "<p><code>for&lt;'a&gt; T: Foo&lt;Bar: for&lt;'x&gt; Baz&lt;As = Buzz&lt;'a, 'x&gt;&gt;&gt;</code></p>",
        "id": 229686291,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391540
    },
    {
        "content": "<p>This problem ends up not being directly related to the associated type bounds at all</p>",
        "id": 229686359,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391567
    },
    {
        "content": "<p>but to <em>depth</em></p>",
        "id": 229686374,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391574
    },
    {
        "content": "<p>Specifically, what we <em>want</em> to do (and what I've basically finished at this point, since yesterday)</p>",
        "id": 229686509,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391613
    },
    {
        "content": "<p>Is to \"flatten\" all the late bound vars</p>",
        "id": 229686539,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391625
    },
    {
        "content": "<p>oh, fun</p>",
        "id": 229686541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391625
    },
    {
        "content": "<p>ok</p>",
        "id": 229686547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391626
    },
    {
        "content": "<p>So for that inner <code>&lt;...&gt;::Bar: Baz&lt;As = Buzz&lt;'a, 'x&gt;&gt;</code> has late bound vars essentially like <code>for&lt;'a, 'x&gt;</code></p>",
        "id": 229686721,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391667
    },
    {
        "content": "<p>The problem is the contrained lifetimes check</p>",
        "id": 229686782,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391687
    },
    {
        "content": "<p>Before, <code>'a</code> is \"escaping\" that trait ref</p>",
        "id": 229686863,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391709
    },
    {
        "content": "<p>But now it isn't</p>",
        "id": 229686878,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391713
    },
    {
        "content": "<p>I will pause</p>",
        "id": 229686987,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391733
    },
    {
        "content": "<p>ok, yes. I'm wonering if we should plan some time to continue tomorrow or Friday :)</p>",
        "id": 229687035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229678534\">said</a>:</p>\n<blockquote>\n<p>the one I use is called \"copy-github-permalink\"</p>\n</blockquote>\n<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> that's really useful, thanks</p>",
        "id": 229687059,
        "sender_full_name": "lcnr",
        "timestamp": 1615391757
    },
    {
        "content": "<p>I'm following so far :)</p>",
        "id": 229687067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391759
    },
    {
        "content": "<p>tomorrow would be better</p>",
        "id": 229687084,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391763
    },
    {
        "content": "<p>ok</p>",
        "id": 229687155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391768
    },
    {
        "content": "<p>I'm still turning over what is the \"right\" way to do this</p>",
        "id": 229687192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391779
    },
    {
        "content": "<p>in general the managing of binders in astconv is a bit meh</p>",
        "id": 229687220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391788
    },
    {
        "content": "<p>But, to extend on this:</p>",
        "id": 229687232,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391791
    },
    {
        "content": "<p>if I recall there's some subtle stuff where the code kind of \"knows\" that things are at a certain depth etc</p>",
        "id": 229687266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229687220\">said</a>:</p>\n<blockquote>\n<p>in general the managing of binders in astconv is a bit meh</p>\n</blockquote>\n<p>Well, from yesterday, I don't manage binders there at all. It's all done in <code>late/lifetimes</code></p>",
        "id": 229687335,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391823
    },
    {
        "content": "<p>I could prob chat at <time datetime=\"2021-03-11T14:00:00Z\">2021-03-11T09:00:00-05:00</time> on Zulip</p>",
        "id": 229687355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391826
    },
    {
        "content": "<p>I can do then</p>",
        "id": 229687400,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391835
    },
    {
        "content": "<p>I'm still turning over the idea of producing nested things and flatenning :)</p>",
        "id": 229687492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391858
    },
    {
        "content": "<p>but I'd like to know what this new approach of yours is, definitely</p>",
        "id": 229687527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615391868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229687232\">said</a>:</p>\n<blockquote>\n<p>But, to extend on this:</p>\n</blockquote>\n<p>The way I've written the code currently is <em>all</em> late bound vars get concatenated. Including something like <code>fn foo&lt;'a, T&gt;() where for T: Bar&lt;As: 'a&gt;</code></p>",
        "id": 229687677,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391892
    },
    {
        "content": "<p>The bound vars on that final predicate get to be <code>for&lt;'a&gt;</code></p>",
        "id": 229687773,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391916
    },
    {
        "content": "<p>And so now they're not \"escaping\" and things fail</p>",
        "id": 229687808,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391928
    },
    {
        "content": "<p>This, we could easily just say \"okay we only flatten in trait refs\", but then what about trait objects? etc. etc.</p>",
        "id": 229687900,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391958
    },
    {
        "content": "<p>A can of worms</p>",
        "id": 229687939,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615391963
    },
    {
        "content": "<p>Surprisingly, there's a state where flattening the indices but keeping the depth as what it is in <code>hir/ast</code> works completely fine. Which says to me that at some point things are getting mangled</p>",
        "id": 229688417,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615392044
    },
    {
        "content": "<p>Like, quite literally <code>https://github.com/rust-lang/rust/compare/master...jackh726:binder-refactor-ohno</code> builds completely fine and passes all the new tests</p>",
        "id": 229688789,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615392098
    },
    {
        "content": "<p>well, all tests, including new ones</p>",
        "id": 229688839,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615392107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229687677\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229687232\">said</a>:</p>\n<blockquote>\n<p>But, to extend on this:</p>\n</blockquote>\n<p>The way I've written the code currently is <em>all</em> late bound vars get concatenated. Including something like <code>fn foo&lt;'a, T&gt;() where for T: Bar&lt;As: 'a&gt;</code></p>\n</blockquote>\n<p>I've convinced myself that not allowing this is more correct; any impl of <code>Bar</code> would never be able to ensure that <code>As</code> outlives a lifetime it can't name</p>",
        "id": 229700516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615395039
    },
    {
        "content": "<p>And I think think that's the first user-visible semantic change</p>",
        "id": 229700674,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615395100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I also realized that I forgot I have a meeting tomorrow from 8:30 to 10:00-10:30 ish. If there's another time tomorrow that also works for you, that would be more ideal for me. But as long as we're just text chatting, I can be around at 9:00 and discuss. Just may have to go away at moments</p>",
        "id": 229701440,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615395345
    },
    {
        "content": "<p>sorry that I needed to leave, already catched up with stuff, tomorrow I can also try to participate</p>",
        "id": 229702839,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615395789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229700516\">said</a>:</p>\n<blockquote>\n<p>...<br>\nI've convinced myself that not allowing this is more correct; any impl of <code>Bar</code> would never be able to ensure that <code>As</code> outlives a lifetime it can't name</p>\n</blockquote>\n<p>But wait, what about</p>\n<div class=\"codehilite\"><pre><span></span><code>fn b&lt;T&gt;(items: &amp;[T]) -&gt; Box&lt;dyn Iterator&lt;Item=&amp;T&gt; + &#39;_&gt; { ... }\n</code></pre></div>\n<p>Or put slightly differently:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn b_2&lt;T&gt;(items: &amp;[T]) -&gt; Box&lt;std::slice::Iter&lt;&#39;_, T&gt;&gt; { ... }\n</code></pre></div>\n<p>I've unconvinced myself</p>",
        "id": 229731238,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615405915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> around?</p>",
        "id": 229851931,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615471289
    },
    {
        "content": "<p>I'm around</p>",
        "id": 229851991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615471320
    },
    {
        "content": "<p>for some reason I thought you were busy</p>",
        "id": 229852052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615471328
    },
    {
        "content": "<p>oh, because you said you were</p>",
        "id": 229852065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615471335
    },
    {
        "content": "<p>I'm on a call :)</p>",
        "id": 229852080,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615471343
    },
    {
        "content": "<p>But can chat</p>",
        "id": 229852086,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615471346
    },
    {
        "content": "<p>ok, I can also be around later potentially</p>",
        "id": 229852186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615471386
    },
    {
        "content": "<p>it's the compiler team triage meeting but lately i've been leaving that to <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> and just skimming later :P</p>",
        "id": 229852243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615471404
    },
    {
        "content": "<p>I'm good to chat now</p>",
        "id": 229852296,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615471430
    },
    {
        "content": "<p>Not a problem</p>",
        "id": 229852311,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615471435
    },
    {
        "content": "<p>(don't tell anyone)</p>",
        "id": 229852375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615471447
    },
    {
        "content": "<p>ok</p>",
        "id": 229852387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615471450
    },
    {
        "content": "<p>Plus, I know you're around now, and wouldn't want to risk you being too busy later</p>",
        "id": 229852401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615471455
    },
    {
        "content": "<p>Alright so</p>",
        "id": 229852454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615471483
    },
    {
        "content": "<p>I'm trying to find a charger for my computer</p>",
        "id": 229852501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615471502
    },
    {
        "content": "<p>Where do you want to start?</p>",
        "id": 229852506,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615471503
    },
    {
        "content": "<p>let me see</p>",
        "id": 229852890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615471641
    },
    {
        "content": "<p>let me scroll back a bit</p>",
        "id": 229853092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615471708
    },
    {
        "content": "<p>Okay, that works for me</p>",
        "id": 229853130,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615471728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> do you want me to start reading your branch?</p>",
        "id": 229853938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615471990
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229688789\">said</a>:</p>\n<blockquote>\n<p>Like, quite literally <code>https://github.com/rust-lang/rust/compare/master...jackh726:binder-refactor-ohno</code> builds completely fine and passes all the new tests</p>\n</blockquote>\n<p>like this one?</p>",
        "id": 229853955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615471998
    },
    {
        "content": "<p>You could</p>",
        "id": 229853964,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615472006
    },
    {
        "content": "<p>I could also summarize what I do</p>",
        "id": 229853979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615472012
    },
    {
        "content": "<p>And the problems I've encountered</p>",
        "id": 229854000,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615472022
    },
    {
        "content": "<p>I'm also realizing just how underspecified associated type bounds are</p>",
        "id": 229854127,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615472058
    },
    {
        "content": "<p>say more?</p>",
        "id": 229854160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615472072
    },
    {
        "content": "<p>when I run into issues like <a href=\"https://github.com/rust-lang/rust/issues/83017\">#83017</a></p>",
        "id": 229854172,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615472078
    },
    {
        "content": "<p>or <a href=\"https://github.com/rust-lang/rust/issues/81193\">#81193</a></p>",
        "id": 229854198,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615472086
    },
    {
        "content": "<p>These are like, the same \"idea\" of the issues that I <em>have</em> to think about when being explicit about late bound vars</p>",
        "id": 229854380,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615472148
    },
    {
        "content": "<p>those are intense examples :)</p>",
        "id": 229855487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615472520
    },
    {
        "content": "<p>I guess let me check out your branch</p>",
        "id": 229855528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615472524
    },
    {
        "content": "<p>Sure</p>",
        "id": 229855565,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615472529
    },
    {
        "content": "<p>Let me know if you need a summary</p>",
        "id": 229855602,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615472538
    },
    {
        "content": "<p><code>late/lifetimes</code> and <code>astconv/mod</code> are the most relevant</p>",
        "id": 229855683,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615472567
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/021ca0ffb2b181ac2c9ec4d7a159bb1fc8770839\">https://github.com/rust-lang/rust/commit/021ca0ffb2b181ac2c9ec4d7a159bb1fc8770839</a> is the big \"shift\" in approach</p>",
        "id": 229855776,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615472605
    },
    {
        "content": "<p>checked out and building</p>",
        "id": 229857004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473012
    },
    {
        "content": "<p>that's helpful</p>",
        "id": 229857020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473015
    },
    {
        "content": "<p>it's probablya best if I read into the code and throw questions your way</p>",
        "id": 229857035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473021
    },
    {
        "content": "<p>That works for me</p>",
        "id": 229857384,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'm looking over stuff like <code>shifted_ast_region_to_region</code> and I'm wondering -- was that pre-existing?</p>",
        "id": 229857999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473394
    },
    {
        "content": "<p>or a fn you introduced</p>",
        "id": 229858004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473396
    },
    {
        "content": "<p>introduced</p>",
        "id": 229858021,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473405
    },
    {
        "content": "<p>(and I hate it)</p>",
        "id": 229858039,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473410
    },
    {
        "content": "<p>that is removed in the latest commits though, right?</p>",
        "id": 229858145,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473437
    },
    {
        "content": "<p>I <em>was</em> using that to shift the vars based on newly introduced super trait vars</p>",
        "id": 229858194,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473463
    },
    {
        "content": "<p>yes, I'm just trying to figure out what \"essence\" of this commit is :)</p>",
        "id": 229858198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473464
    },
    {
        "content": "<p>Yeah, so a key bit is here: <a href=\"https://github.com/rust-lang/rust/commit/021ca0ffb2b181ac2c9ec4d7a159bb1fc8770839#diff-87880ceb989914cb25dc43961cb1cee5e7b07d8b04bcd9c967e7995cd85315d9R2598\">https://github.com/rust-lang/rust/commit/021ca0ffb2b181ac2c9ec4d7a159bb1fc8770839#diff-87880ceb989914cb25dc43961cb1cee5e7b07d8b04bcd9c967e7995cd85315d9R2598</a></p>",
        "id": 229858482,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473553
    },
    {
        "content": "<p>Essentially, I can now know what supertrait HRTBs we need to keep around</p>",
        "id": 229858570,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473579
    },
    {
        "content": "<p>and so I can late those into account in the late bound vars</p>",
        "id": 229858620,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473599
    },
    {
        "content": "<p>that link didn't work for me</p>",
        "id": 229858628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473602
    },
    {
        "content": "<p>oops</p>",
        "id": 229858680,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473607
    },
    {
        "content": "<p>I bet late/lifetimes isn't expanded</p>",
        "id": 229858706,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473613
    },
    {
        "content": "<p>It's essentially where I introduce the <code>Supertrait</code> scope</p>",
        "id": 229858738,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229858620\">said</a>:</p>\n<blockquote>\n<p>and so I can late those into account in the late bound vars</p>\n</blockquote>\n<p>And therefore don't have to worry about them in <code>astconv/mod</code>, since they are already accounted for</p>",
        "id": 229858807,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473654
    },
    {
        "content": "<p>I think it'd be more helpful to give me links into the source</p>",
        "id": 229859060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473746
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/021ca0ffb2b181ac2c9ec4d7a159bb1fc8770839/compiler/rustc_resolve/src/late/lifetimes.rs#L2598\">https://github.com/rust-lang/rust/blob/021ca0ffb2b181ac2c9ec4d7a159bb1fc8770839/compiler/rustc_resolve/src/late/lifetimes.rs#L2598</a></p>",
        "id": 229859143,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473781
    },
    {
        "content": "<p>how's that</p>",
        "id": 229859155,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473784
    },
    {
        "content": "<p>It's really not super helpful. Just all these changes are possible because of it</p>",
        "id": 229859235,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473818
    },
    {
        "content": "<p>so you introduced the <code>Supertrait</code> scope?</p>",
        "id": 229859462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473890
    },
    {
        "content": "<p>yes</p>",
        "id": 229859562,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615473919
    },
    {
        "content": "<p>ok, I understand what it's going I <em>think</em></p>",
        "id": 229859623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473941
    },
    {
        "content": "<p>I have to dig a bit deeper but presumably</p>",
        "id": 229859756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473972
    },
    {
        "content": "<p>when you have <code>trait Foo: for&lt;'b&gt; Bar { .. }</code> and you're looking at some associated type <code>AT</code> defined in <code>Bar</code>, you introduce this <code>Supertrait</code> scope to account for the <code>for&lt;'b&gt;</code>?</p>",
        "id": 229859819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615473997
    },
    {
        "content": "<p>exactly</p>",
        "id": 229859894,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615474027
    },
    {
        "content": "<p>ok</p>",
        "id": 229861307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615474502
    },
    {
        "content": "<p>I'm reading more into the code :)</p>",
        "id": 229861339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615474508
    },
    {
        "content": "<p>I'm here for questions or whatever :)</p>",
        "id": 229861450,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615474549
    },
    {
        "content": "<p>I'm thinking about it</p>",
        "id": 229861589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615474586
    },
    {
        "content": "<p>I'm not sure what time you have to go, but I would like to discuss the problems I've run into (if you haven't already figured it out)</p>",
        "id": 229861609,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615474594
    },
    {
        "content": "<p>I guess my question is</p>",
        "id": 229861612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615474596
    },
    {
        "content": "<p>what goes wrong now?</p>",
        "id": 229861627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615474600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229861609\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what time you have to go, but I would like to discuss the problems I've run into (if you haven't already figured it out)</p>\n</blockquote>\n<p>yeah, this</p>",
        "id": 229861652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615474609
    },
    {
        "content": "<p>that said, maybe we have to continue tomorrow :)</p>",
        "id": 229861670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615474616
    },
    {
        "content": "<p>but it'd be good to get strated now</p>",
        "id": 229861709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615474634
    },
    {
        "content": "<p>haha I can be available tomorrow morning again</p>",
        "id": 229861716,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615474638
    },
    {
        "content": "<p>But as far as I can tell, there are two problems</p>",
        "id": 229861733,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615474647
    },
    {
        "content": "<p>The first revolves around \"constrained lifetimes\" in trait refs/functions</p>",
        "id": 229861788,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615474671
    },
    {
        "content": "<p>i.e. <code>fn foo&lt;'a, T&gt;() where for T: Bar&lt;As = &amp;'a ()&gt;</code></p>",
        "id": 229861941,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615474710
    },
    {
        "content": "<p>\"early bound\" lifetimes?</p>",
        "id": 229861983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615474725
    },
    {
        "content": "<p>not quite</p>",
        "id": 229862017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615474736
    },
    {
        "content": "<p>we probably use the term constrained in many different ways</p>",
        "id": 229862023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615474738
    },
    {
        "content": "<p>ah, so the point is that they're targeted by the <code>As = ...</code> binding</p>",
        "id": 229862079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615474752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229861941\">said</a>:</p>\n<blockquote>\n<p>i.e. <code>fn foo&lt;'a, T&gt;() where for T: Bar&lt;As = &amp;'a ()&gt;</code></p>\n</blockquote>\n<p>currently, this is okay, because <code>'a</code> is escaping the <code>T: ...</code> trait ref</p>",
        "id": 229862121,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615474768
    },
    {
        "content": "<p>what do you mean by \"this is ok\"</p>",
        "id": 229862210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615474800
    },
    {
        "content": "<p>or maybe that will become clear as you continue</p>",
        "id": 229862288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615474808
    },
    {
        "content": "<p>It compiles fine</p>",
        "id": 229862291,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615474809
    },
    {
        "content": "<p>But, with the PR, the idea is that for <code>T: Bar&lt;...&gt;</code> the lifetimes on that <em>includes</em> <code>'a</code>, so it no longer is escaping, and thus fails</p>",
        "id": 229862436,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615474855
    },
    {
        "content": "<p>(note that the <em>current</em> code is fine, because we keep around a debruijn index, but it's kind of weird because we're also always concatenating</p>",
        "id": 229862573,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615474900
    },
    {
        "content": "<p>When I remove the debruijn index locally and always use <code>0</code>, that's when things blow up</p>",
        "id": 229862743,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615474940
    },
    {
        "content": "<p>I'm finding this a bit confusing</p>",
        "id": 229862912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615475010
    },
    {
        "content": "<p>why would you always use 0?</p>",
        "id": 229862949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615475027
    },
    {
        "content": "<p>maybe it helps to show me the desugared version</p>",
        "id": 229862955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615475030
    },
    {
        "content": "<p>(in the back of my mind, btw, I'm still contemplating the 'nest/flatten' approach)</p>",
        "id": 229862978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615475040
    },
    {
        "content": "<p>(and trying to compare/contrast)</p>",
        "id": 229863027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615475045
    },
    {
        "content": "<p>Right so</p>",
        "id": 229863048,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475051
    },
    {
        "content": "<p><code>fn foo&lt;'a, T&gt;() where T: Bar&lt;As = &amp;'a ()&gt;</code></p>",
        "id": 229863102,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475069
    },
    {
        "content": "<p>Generates <code>for&lt;&gt; &lt;T as Bar&gt;::As = &amp;'^1.0 ()</code> today</p>",
        "id": 229863229,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475117
    },
    {
        "content": "<p>Or at least, if we tracked vars that's what it would be</p>",
        "id": 229863267,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475128
    },
    {
        "content": "<p>But, with these changes, we instead would generate <code>for&lt;'a&gt; &lt;T as Bar&gt;::As = &amp;'^0.0 ()</code></p>",
        "id": 229863418,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475176
    },
    {
        "content": "<p>since we concatenate late vars always</p>",
        "id": 229863450,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475186
    },
    {
        "content": "<p>are you saying we want to generate the latter?</p>",
        "id": 229863795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615475307
    },
    {
        "content": "<p>this is confusing me a tiny bit because I expect <code>'a</code> to be early bound</p>",
        "id": 229863843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615475329
    },
    {
        "content": "<p>am I correct?</p>",
        "id": 229863848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615475331
    },
    {
        "content": "<p>(I would like to remove that distinction, of course, but for now it still exists...)</p>",
        "id": 229863878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615475339
    },
    {
        "content": "<p>oh, you're right</p>",
        "id": 229863921,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475353
    },
    {
        "content": "<p>Okay, see <code>fn b&lt;T&gt;(items: &amp;[T]) -&gt; Box&lt;dyn Iterator&lt;Item=&amp;T&gt; + '_&gt; { ... }</code></p>",
        "id": 229864000,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475390
    },
    {
        "content": "<p>There's an anonymous lifetime</p>",
        "id": 229864111,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475411
    },
    {
        "content": "<p>ok</p>",
        "id": 229864113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615475412
    },
    {
        "content": "<p>With this PR, the binders around <code>Item = &amp;T</code> would be <code>for&lt;anon&gt;</code></p>",
        "id": 229864202,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475435
    },
    {
        "content": "<p>so <code>&amp;'0.0 T</code> instead of <code>&amp;'^1.0 T</code></p>",
        "id": 229864238,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475451
    },
    {
        "content": "<p>So...we probably don't want to always be concatenating things</p>",
        "id": 229864282,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475464
    },
    {
        "content": "<p>So the question is: if we do want to for the associated type bounds, is there any other places that it's okay? And why <em>is</em> it okay for associated type bounds? (Like, would we theoretically be <em>too strict</em> with ATBs if we concatenate?)</p>",
        "id": 229864530,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229864202\">said</a>:</p>\n<blockquote>\n<p>With this PR, the binders around <code>Item = &amp;T</code> would be <code>for&lt;anon&gt;</code></p>\n</blockquote>\n<p>what happens today?</p>",
        "id": 229864985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615475696
    },
    {
        "content": "<p>The anonymouse lifetime there as a debruijn index of 1</p>",
        "id": 229865136,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475739
    },
    {
        "content": "<p>And the binders around Item = &amp;T (on the <code>dyn</code>) is empty</p>",
        "id": 229865256,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475771
    },
    {
        "content": "<p>ok</p>",
        "id": 229865620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615475901
    },
    {
        "content": "<p>so it's kind of equivaent to</p>",
        "id": 229865700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615475937
    },
    {
        "content": "<p>As much as I like the <code>associated_type_bounds</code> feature, this is a pain in the butt</p>",
        "id": 229865715,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475943
    },
    {
        "content": "<p><code>fn b&lt;'a, T&gt;(...) -&gt; Box&lt;dyn Iterator&lt;Item = &amp;'a T&gt;&gt;</code></p>",
        "id": 229865768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615475957
    },
    {
        "content": "<p>yes, exactly the same</p>",
        "id": 229865812,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615475974
    },
    {
        "content": "<p>The other problem that seems to come from concatenating vars like this stems from NLL. But I haven't been able to look into that at all</p>",
        "id": 229866179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615476086
    },
    {
        "content": "<p>but I was seeing some things that looked really sus</p>",
        "id": 229866208,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615476098
    },
    {
        "content": "<p>so .. it seems to me that we don't <em>want</em> to change this behavior</p>",
        "id": 229866486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615476194
    },
    {
        "content": "<p>right</p>",
        "id": 229866497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615476200
    },
    {
        "content": "<p>like this is meant to be a \"no changes refactoring\"</p>",
        "id": 229866512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615476208
    },
    {
        "content": "<p>yes, at least not in the general case</p>",
        "id": 229866527,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615476213
    },
    {
        "content": "<p>But, for nested trait refs...maybe?</p>",
        "id": 229866555,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615476227
    },
    {
        "content": "<p>idk</p>",
        "id": 229866563,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615476231
    },
    {
        "content": "<p>what is a nested trait ref</p>",
        "id": 229866641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615476248
    },
    {
        "content": "<p>with the associated type bounds</p>",
        "id": 229866704,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615476267
    },
    {
        "content": "<p><code>T: Foo&lt;As: Bar&gt;</code></p>",
        "id": 229866739,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615476282
    },
    {
        "content": "<p>what would be an example we might want to change?</p>",
        "id": 229866870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615476331
    },
    {
        "content": "<p>I agree we can change that (unstable)</p>",
        "id": 229866898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615476340
    },
    {
        "content": "<p>I'd rather do it intensionally :)</p>",
        "id": 229866904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615476344
    },
    {
        "content": "<p>well, the thing is, I think this is so underspecified that I don't know if this is <em>change</em> or a <em>choice</em></p>",
        "id": 229867016,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615476372
    },
    {
        "content": "<p>but</p>",
        "id": 229867019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615476374
    },
    {
        "content": "<p>going back to <code>T: for&lt;'a&gt; Foo&lt;'a, As: for&lt;'b&gt; Bar&lt;'a, 'b&gt;&gt;</code></p>",
        "id": 229867117,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615476407
    },
    {
        "content": "<p>(now with lifetimes <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span>)</p>",
        "id": 229867141,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615476418
    },
    {
        "content": "<p>some part of me is tempted to remove this feature and re-implement it later:)</p>",
        "id": 229867187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615476432
    },
    {
        "content": "<p>but anyway</p>",
        "id": 229867196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615476434
    },
    {
        "content": "<p>Today, the debruijn index of the <code>'a</code> on <code>Bar</code> is <code>1</code>, with these changes it would be <code>0</code></p>",
        "id": 229867222,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615476446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/229867187\">said</a>:</p>\n<blockquote>\n<p>some part of me is tempted to remove this feature and re-implement it later:)</p>\n</blockquote>\n<p>I thought about that. And then I looked through github for uses of the feature....too much</p>",
        "id": 229867263,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615476470
    },
    {
        "content": "<p>But, at least my rational, is that by changing this to always concatenate vars in nested trait refs, that is more in line with what the desugaring of that is</p>",
        "id": 229869199,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615477112
    },
    {
        "content": "<p>Okay so only doing concatenation in nested trait refs makes all tests pass</p>",
        "id": 229898562,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615486346
    },
    {
        "content": "<p>And, modulo some cleanup, I think that I feel comfortable with that as a \"final\" state</p>",
        "id": 229898614,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615486375
    },
    {
        "content": "<p>Curious to hear your thoughts <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 229898674,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615486390
    },
    {
        "content": "<p>Hmm</p>",
        "id": 229925009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615496484
    },
    {
        "content": "<p>branch is updated (<a href=\"https://github.com/rust-lang/rust/compare/master...jackh726:binder-refactor-ohno\">https://github.com/rust-lang/rust/compare/master...jackh726:binder-refactor-ohno</a>)</p>",
        "id": 229927090,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615497324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> see <a href=\"https://github.com/rust-lang/rust/issues/82743\">#82743</a></p>",
        "id": 229930239,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615498516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> not sure if you wanted to talk tomorrow morning, but I'll be on at <time datetime=\"2021-03-12T14:00:00Z\">2021-03-12T09:00:00-05:00</time> . Otherwise, probably start doing a real review of <a href=\"https://github.com/rust-lang/rust/issues/76814\">#76814</a>, because I think it's ready</p>",
        "id": 229966633,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615517566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ok -- I left a review on <a href=\"https://github.com/rust-lang/rust/issues/82743\">#82743</a>. I won't be around at 9am this morning (have another thing) but I can be around, I plan to do a lot of reviews today (including more time on <span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span>'s PR)</p>",
        "id": 230009143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615546258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 230062872,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615568120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I added some comments that should hopefully address your thoughts</p>",
        "id": 230070441,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615571244
    },
    {
        "content": "<p>Ping to take another look at <a href=\"https://github.com/rust-lang/rust/issues/82743\">#82743</a> if you have time today <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 230351587,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615817945
    },
    {
        "content": "<p>Sorry to jump in; I think you have modified rustdoc files by mistake? <code>src/librustdoc/html/static/FiraSans-Medium.woff2</code> has been modified somehow</p>",
        "id": 230390306,
        "sender_full_name": "marmeladema",
        "timestamp": 1615830619
    },
    {
        "content": "<p>As well as <code>src/librustdoc/html/static/FiraSans-Regular.woff2</code></p>",
        "id": 230390370,
        "sender_full_name": "marmeladema",
        "timestamp": 1615830638
    },
    {
        "content": "<p>oof</p>",
        "id": 230393806,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615832100
    },
    {
        "content": "<p>how did that happen</p>",
        "id": 230393819,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615832103
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>warning: CRLF will be replaced by LF in src/librustdoc/html/static/FiraSans-Regular.woff2.\nThe file will have its original line endings in your working directory.\n</code></pre></div>\n<p>...</p>",
        "id": 230397502,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615833597
    },
    {
        "content": "<p>Should be fixed now. Turns out the git version on the server I use is old enough that it tries to change line-endings for <code>.woff2</code> files, which were recently added</p>",
        "id": 230400606,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615834941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are you still looking over <a href=\"https://github.com/rust-lang/rust/issues/82743\">#82743</a></p>",
        "id": 230590926,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928598
    },
    {
        "content": "<p>and/or is there anything about it that you want to talk about</p>",
        "id": 230590948,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615928608
    },
    {
        "content": "<p>I am thinking about scheduling some time to go over the coinduction PR, and maybe i should do this PR review too</p>",
        "id": 230763521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616014001
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I was not happy with the \"two modes\"</p>",
        "id": 230763537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616014010
    },
    {
        "content": "<p>and i was trying to convince myself whether it was needed</p>",
        "id": 230763543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616014015
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 230764251,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616014264
    },
    {
        "content": "<p>Okay so,</p>",
        "id": 230764269,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616014268
    },
    {
        "content": "<p>the motivating example for the split was</p>\n<div class=\"codehilite\"><pre><span></span><code>pub trait HInt: Int {\n    type D: DInt&lt;H = Self&gt; + Int;\n}\npub trait DInt: Int {\n    type H: HInt&lt;D = Self&gt; + Int;\n}\n</code></pre></div>",
        "id": 230764475,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616014345
    },
    {
        "content": "<p>On it's own, this isn't needed for <a href=\"https://github.com/rust-lang/rust/issues/82743\">#82743</a></p>",
        "id": 230764579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616014393
    },
    {
        "content": "<p>But mixed with <a href=\"https://github.com/rust-lang/rust/issues/76814\">#76814</a>, it is</p>",
        "id": 230764623,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616014416
    },
    {
        "content": "<p>hmm</p>",
        "id": 230764814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616014486
    },
    {
        "content": "<p>Because, in <a href=\"https://github.com/rust-lang/rust/issues/76814\">#76814</a>, when we do lifetime resolution, we get to <code>HInt</code> (in the <code>DInt</code> defintion) and ask \"where is <code>D</code> defined on the trait <code>HInt</code>\"</p>",
        "id": 230764815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616014486
    },
    {
        "content": "<p>ok</p>",
        "id": 230764817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616014487
    },
    {
        "content": "<p>So we then we go try to resolve lifetimes for <code>HInt</code>. Without splitting trait definitions, we get to <code>DInt</code> and a cycle happens</p>",
        "id": 230764933,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616014541
    },
    {
        "content": "<p>If you have a more elegant way to handle this, I would love to hear it though :)</p>",
        "id": 230765139,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616014631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I will rebase when you've finished your review</p>",
        "id": 230854803,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616070927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ok</p>",
        "id": 230864263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616074811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> poke :)</p>",
        "id": 231086448,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616186227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> Sorry :) I don't really understand this motivating example, I have to say</p>",
        "id": 231446435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616494252
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 231468095,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616505486
    },
    {
        "content": "<p>This is literally pulled from <code>compiler_builtins</code></p>",
        "id": 231468136,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616505505
    },
    {
        "content": "<p>The associated type of <code>DInt</code> references <code>HInt</code> and vice-versa</p>",
        "id": 231468316,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616505599
    },
    {
        "content": "<p>You can probably ignore the <code>Int</code> bounds and it's the same problem</p>",
        "id": 231468394,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616505622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you need/want to discuss this</p>",
        "id": 231496860,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616515681
    },
    {
        "content": "<p>what I mean is</p>",
        "id": 231527448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616527051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> can we schedule a time to do it?</p>",
        "id": 231527472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616527063
    },
    {
        "content": "<p>maybe tomorrow ?</p>",
        "id": 231527490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616527069
    },
    {
        "content": "<p>I was thinking I wanted to schedule some trait times to do reviews and discussion</p>",
        "id": 231527504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616527080
    },
    {
        "content": "<p>but what I meant was -- I didn't see how that example per se motivated the split :)</p>",
        "id": 231527560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616527090
    },
    {
        "content": "<p>If it's tomorrow morning, like 9ish, yes</p>",
        "id": 231527575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616527098
    },
    {
        "content": "<p>So, without the split, imagine we want to resolve lifetimes <code>HInt</code>. As part of that, we see <code>DInt</code>. But in the binder refactor, we need to know possible lifetimes from super trait HRTBs on <code>DInt</code>. Now, in <em>this</em> example, there aren't any, but we don't know that. So we ask \"what are the lifetimes from super trait HRTBs on <code>DInt</code>\". To do that, we have to resolve lifetimes on <code>DInt</code>. Now, if we naively resolve <em>all</em> lifetimes, we'll get to <code>type H: HInt&lt;D = Self&gt; + Int;</code> and end up in a cycle. So instead, we only look at the <code>DInt: Int</code> part of the definition (If we had something like <code>Foo&lt;'a&gt;: for&lt;'b&gt; Bar&lt;'a, 'b&gt;</code> then we visit that entire thing). I guess it's also important that we know that <code>H</code> is defined on <code>DInt</code> (not <code>Int</code>) without resolving lifetimes.</p>",
        "id": 231528556,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616527402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you're around?</p>",
        "id": 231628794,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616590851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> yes!</p>",
        "id": 231629255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591015
    },
    {
        "content": "<p>had to get coffee</p>",
        "id": 231629269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591021
    },
    {
        "content": "<p>Howdy :)</p>",
        "id": 231629275,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591026
    },
    {
        "content": "<p>Coffee is important</p>",
        "id": 231629295,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591033
    },
    {
        "content": "<p>Need to get those brains cells moving</p>",
        "id": 231629309,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591039
    },
    {
        "content": "<p>now I just have to drink it</p>",
        "id": 231629426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591081
    },
    {
        "content": "<p>but let's get started :)</p>",
        "id": 231629438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591086
    },
    {
        "content": "<p>ps cc <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 231629469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591104
    },
    {
        "content": "<p>Wait, I'm a scientist, I can be more accurate: Gotta get those brain cells <em>firing</em></p>",
        "id": 231629487,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591114
    },
    {
        "content": "<p>Okay, so let's start with...the resolve refactor</p>",
        "id": 231629529,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591137
    },
    {
        "content": "<p>/me tries to remember PR number</p>",
        "id": 231629548,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591146
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/82743\">#82743</a></p>",
        "id": 231629624,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591168
    },
    {
        "content": "<p>sadly there is no :white-lab-coat: emoji</p>",
        "id": 231629650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591179
    },
    {
        "content": "<p>I remember talking to some computer scientists from a research lab in Big Company That Will Not Be Named</p>",
        "id": 231629703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591204
    },
    {
        "content": "<p>they had made a movie highlighting some of their new Javascript APIs</p>",
        "id": 231629729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591215
    },
    {
        "content": "<p>and the filmmakers made them wear white lab coats</p>",
        "id": 231629740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591222
    },
    {
        "content": "<p>I found this unendingly funny</p>",
        "id": 231629755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591227
    },
    {
        "content": "<p>That is absolutely perfect</p>",
        "id": 231629774,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591235
    },
    {
        "content": "<p>Okay, so I figure that we can start by just going through <em>why</em> this PR is necessary</p>",
        "id": 231629916,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591285
    },
    {
        "content": "<p>sounds like a plan</p>",
        "id": 231629958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591298
    },
    {
        "content": "<p>let me tile some windows here..</p>",
        "id": 231629970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591303
    },
    {
        "content": "<p>And hopefully the implementation is straightforward from there</p>",
        "id": 231629979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591305
    },
    {
        "content": "<p>So, maybe let's start with: What's your understanding so far?</p>",
        "id": 231630088,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591346
    },
    {
        "content": "<p>well this PR seems obviously better</p>",
        "id": 231630151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591370
    },
    {
        "content": "<p>just from first principles :)</p>",
        "id": 231630157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591373
    },
    {
        "content": "<p>but I guess I don't 100% know why it's <em>necessary</em></p>",
        "id": 231630181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591379
    },
    {
        "content": "<p>I'm reading your PR description now</p>",
        "id": 231630209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591395
    },
    {
        "content": "<blockquote>\n<p>The reason behind this change will (hopefully) allow us to (as part of <a href=\"https://github.com/rust-lang/rust/issues/76814\">#76814</a>) be able to essentially use the lifetime resolve code to resolve all late bound vars (including those of super traits).</p>\n</blockquote>",
        "id": 231630278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591409
    },
    {
        "content": "<p>so I guess that we need to be more fine-grained</p>",
        "id": 231630306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591422
    },
    {
        "content": "<p>but I don't 100% know why</p>",
        "id": 231630326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591430
    },
    {
        "content": "<p>I should remove that \"(hopefully)\" because turns out it does work as expected</p>",
        "id": 231630332,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591434
    },
    {
        "content": "<p>Okay, let me write a bit of code</p>",
        "id": 231630366,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591448
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">As</span><span class=\"o\">=&amp;'</span><span class=\"na\">foo</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">As</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231630563,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591525
    },
    {
        "content": "<p>ok</p>",
        "id": 231630567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591526
    },
    {
        "content": "<p>Alright so</p>",
        "id": 231630640,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591556
    },
    {
        "content": "<p>Well, let me change it just a bit</p>",
        "id": 231630662,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591568
    },
    {
        "content": "<p>Okay, so let's imagine we're going to type check <code>foo</code></p>",
        "id": 231630817,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591631
    },
    {
        "content": "<p>And we ask \"what are the predicates for <code>foo</code>\"</p>",
        "id": 231630874,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591642
    },
    {
        "content": "<p>tip: use <code>```rust</code></p>",
        "id": 231630904,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1616591653
    },
    {
        "content": "<p>ok</p>",
        "id": 231631010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591697
    },
    {
        "content": "<p>Now, without going into all of the details, we eventually end up calling <code>instantiate_poly_trait_ref</code> on the <code>T: Bar&lt;'foo, As=&amp;'foo ()&gt;</code> bound</p>",
        "id": 231631084,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591727
    },
    {
        "content": "<p>wait</p>",
        "id": 231631142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/231630874\">said</a>:</p>\n<blockquote>\n<p>And we ask \"what are the predicates for <code>Foo</code>\"</p>\n</blockquote>\n<p>did you mean <code>foo</code></p>",
        "id": 231631201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591766
    },
    {
        "content": "<p>And in there, we call many <code>ast_region_to_region</code> and <code>ast_ty_to_ty</code></p>",
        "id": 231631212,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591770
    },
    {
        "content": "<p>yes yes</p>",
        "id": 231631256,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591781
    },
    {
        "content": "<p>sorry</p>",
        "id": 231631257,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591782
    },
    {
        "content": "<p>(I'll get there though)</p>",
        "id": 231631332,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/231631201\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/231630874\">said</a>:</p>\n<blockquote>\n<p>And we ask \"what are the predicates for <code>Foo</code>\"</p>\n</blockquote>\n<p>did you mean <code>foo</code></p>\n</blockquote>\n<p>was wondering the same but at some point you need predicates of <code>Foo</code> too, so I though Jack was talking about that</p>",
        "id": 231631386,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1616591825
    },
    {
        "content": "<p>right, but it didn't make sense to from <code>Foo</code> to <code>T: Bar&lt;'...&gt;</code></p>",
        "id": 231631429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591843
    },
    {
        "content": "<p>anyway, carry on</p>",
        "id": 231631436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591845
    },
    {
        "content": "<p>So, still type checking <code>foo</code>, we want it's predicates, and we have to convert hir regions to ty regions, <em>and so we have to call <code>resolve_lifetimes</code></em></p>",
        "id": 231631474,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591873
    },
    {
        "content": "<p>confirm</p>",
        "id": 231631556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616591892
    },
    {
        "content": "<p>now a bit of a side-step</p>",
        "id": 231631621,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591923
    },
    {
        "content": "<p>In the binder refactor PR, in order to handle super trait HRTBs and making sure that we get the index of all the vars right, we want to be able to know all the lifetimes from super trait HRTBs <em>that would be in scope</em></p>",
        "id": 231631744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616591980
    },
    {
        "content": "<p>We can/will go over that separately, but let's take that mostly as fact right now</p>",
        "id": 231631851,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592010
    },
    {
        "content": "<p>ok. I still don't want this to be true but I also want to land the PR and argue about it later, so <span aria-label=\"zip it\" class=\"emoji emoji-1f910\" role=\"img\" title=\"zip it\">:zip_it:</span></p>",
        "id": 231631948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592052
    },
    {
        "content": "<p>Want what to be true?</p>",
        "id": 231632013,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592071
    },
    {
        "content": "<p>I don't want us to have to know that</p>",
        "id": 231632037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592084
    },
    {
        "content": "<p>Unfortunately I don't know if there's a better way to do it</p>",
        "id": 231632094,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592107
    },
    {
        "content": "<p>Or at least, I still believe that creating some intermediate form that gets flattened might be a nicer way to manage that</p>",
        "id": 231632097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592109
    },
    {
        "content": "<p>The problem with that is there is so much code that calls <code>ast_ty_to_ty</code> after we've already gone through levels of binders</p>",
        "id": 231632235,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592154
    },
    {
        "content": "<p>so you have to do that \"flattening\" before <code>ast_ty_to_ty</code></p>",
        "id": 231632267,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592171
    },
    {
        "content": "<p>And really, <code>rustc_resolve::late::lifetimes</code> <em>is</em> essentially flattening</p>",
        "id": 231632328,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592197
    },
    {
        "content": "<p>ok, carry on</p>",
        "id": 231632330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592199
    },
    {
        "content": "<p>I still don't like it but I'm prepared to concede you may be right (for now)</p>",
        "id": 231632352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592213
    },
    {
        "content": "<p>something feels off to me is all</p>",
        "id": 231632373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592223
    },
    {
        "content": "<p>like it could be made simpler</p>",
        "id": 231632381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592225
    },
    {
        "content": "<p>Turns out this actually only really matters within nested trait refs anyways</p>",
        "id": 231632397,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592234
    },
    {
        "content": "<p>otherwise we wouldn't have to care at all and <code>subst_supertrait</code> is sufficient</p>",
        "id": 231632454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592250
    },
    {
        "content": "<p>Anyways, let me finish the motivation then we can circle back later</p>",
        "id": 231632527,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592284
    },
    {
        "content": "<p>yes I was supposed to be <span aria-label=\"zip it\" class=\"emoji emoji-1f910\" role=\"img\" title=\"zip it\">:zip_it:</span></p>",
        "id": 231632636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592331
    },
    {
        "content": "<p>I blame you :)</p>",
        "id": 231632642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592333
    },
    {
        "content": "<p>So, now, we see <code>T: Bar&lt;'foo, As=&amp;'foo ()&gt;</code></p>",
        "id": 231632679,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592349
    },
    {
        "content": "<p>In <code>resolve_lifetimes</code></p>",
        "id": 231632752,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592367
    },
    {
        "content": "<p>And we ask \"What are the super trait lifetimes in scope for the <code>As=&amp;'foo</code> predicate?\"</p>",
        "id": 231632871,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592420
    },
    {
        "content": "<p>So, we essentially go through the tree <code>Bar</code> -&gt; <code>Foo</code> to find where <code>As</code> is defined</p>",
        "id": 231632930,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592448
    },
    {
        "content": "<p>But as part of this, <em>we have to instantiate the <code>Bar&lt;'b&gt;: for&lt;'a&gt; Foo&lt;'a, 'b&gt;</code> trait ref</em></p>",
        "id": 231633003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592482
    },
    {
        "content": "<p>And that requires...you guessed it...<code>resolve_lifetimes</code></p>",
        "id": 231633072,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592500
    },
    {
        "content": "<p>and so now, we're in a cycle</p>",
        "id": 231633109,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592518
    },
    {
        "content": "<p>so</p>",
        "id": 231633118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592522
    },
    {
        "content": "<p>because currently, <code>resolve_lifetimes</code> gets called <em>per-crate</em></p>",
        "id": 231633140,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592534
    },
    {
        "content": "<p>I am happy with this motivation but I have a question</p>",
        "id": 231633160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592546
    },
    {
        "content": "<p>do truly need to <em>instantiate the trait ref</em> or do we only need to know the trait's defid</p>",
        "id": 231633191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592563
    },
    {
        "content": "<p>Well, we really only need the <code>DefId</code>, but we have to <code>resolve_lifetimes</code> to know whether or not the <code>'a</code> and <code>'b</code> there are late-bound or not</p>",
        "id": 231633348,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592627
    },
    {
        "content": "<p>which I gues we need to know because late-bound regions will end up in the binder in the end</p>",
        "id": 231633603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592707
    },
    {
        "content": "<p>yes</p>",
        "id": 231633620,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592714
    },
    {
        "content": "<p>ok</p>",
        "id": 231633631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592719
    },
    {
        "content": "<p>so now can we walk through the two modes :)</p>",
        "id": 231633679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592724
    },
    {
        "content": "<p>as I said, making things per-item is better from first principles regardless</p>",
        "id": 231633703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592736
    },
    {
        "content": "<p>Actually, in <a href=\"https://github.com/rust-lang/rust/issues/76814\">#76814</a>, I only care about <code>DefId</code>, but also can't use any existing machinery because have to keep track of the late-bound lifetimes too</p>",
        "id": 231633732,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592752
    },
    {
        "content": "<p>right okay, two modes</p>",
        "id": 231633759,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592763
    },
    {
        "content": "<p>(quick note: we don't have to worry about cycles because..supertraits are acyclic?)</p>",
        "id": 231633825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592789
    },
    {
        "content": "<p>yes</p>",
        "id": 231633865,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592802
    },
    {
        "content": "<p>(that's a restriction I want to lift but never mind)</p>",
        "id": 231633877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592810
    },
    {
        "content": "<p>(not in the short term:)</p>",
        "id": 231633894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616592817
    },
    {
        "content": "<p>So, we just went through why we're calling <code>resolve_lifetimes</code> on a different trait when trying to <code>resolve_lifetimes</code> on one</p>",
        "id": 231634046,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592858
    },
    {
        "content": "<p>Well, I guess we didn't quite</p>",
        "id": 231634081,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592875
    },
    {
        "content": "<p>But you could imagine that you have an extra level of super traits there</p>",
        "id": 231634120,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592898
    },
    {
        "content": "<p>And you have to instantiate the trait ref of both \"sub traits\"</p>",
        "id": 231634153,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592913
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 231634225,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592944
    },
    {
        "content": "<p>Or do I need to write an example</p>",
        "id": 231634235,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592950
    },
    {
        "content": "<p>(While I wait, I'll type)</p>",
        "id": 231634325,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616592986
    },
    {
        "content": "<p>well, actually forget that example</p>",
        "id": 231634410,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593028
    },
    {
        "content": "<p>let's go back to that \"motivating example\" I showed the other day</p>",
        "id": 231634438,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593045
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HInt</span>: <span class=\"nc\">Int</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">D</span>: <span class=\"nc\">DInt</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">DInt</span>: <span class=\"nc\">Int</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">H</span>: <span class=\"nc\">HInt</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231634466,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593064
    },
    {
        "content": "<p>So, now knowing what we know so far</p>",
        "id": 231634537,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593084
    },
    {
        "content": "<p>imagine elsewhere we have <code>T: HInt&lt;D = u32&gt;</code></p>",
        "id": 231634588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593109
    },
    {
        "content": "<p>ok</p>",
        "id": 231634650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593139
    },
    {
        "content": "<p>We eventually ask \"What lifetimes come from super trait HRTBs on the <code>D = u32</code> bound?\"</p>",
        "id": 231634667,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593149
    },
    {
        "content": "<p>ok</p>",
        "id": 231634710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593174
    },
    {
        "content": "<p>before we go further let me back up</p>",
        "id": 231634720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593178
    },
    {
        "content": "<p>the two modes:</p>",
        "id": 231634724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593180
    },
    {
        "content": "<p>So then we try to instantiate <code>HInt: Int</code></p>",
        "id": 231634743,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593185
    },
    {
        "content": "<p>Ok, pausing</p>",
        "id": 231634750,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593188
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Indicates that we only care about the definition of a trait. This should</span>\n<span class=\"sd\">/// be false if the `Item` we are resolving lifetimes for is not a trait or</span>\n<span class=\"sd\">/// we eventually need lifetimes resolve for trait items.</span>\n<span class=\"n\">trait_definition_only</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231634808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593204
    },
    {
        "content": "<p>this affects a few bits of code</p>",
        "id": 231634906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593244
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">visit_trait_item_ref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ii</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">hir</span>::<span class=\"n\">TraitItemRef</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">trait_definition_only</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">intravisit</span>::<span class=\"n\">walk_trait_item_ref</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ii</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231634914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593247
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>                                        &quot;`impl Trait` can only capture lifetimes \\\n</code></pre></div>\n\n</blockquote>",
        "id": 231634973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593271
    },
    {
        "content": "<p>I'm trying to decide if I have a question</p>",
        "id": 231635005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593283
    },
    {
        "content": "<p>So, right <code>trait_definition_only</code></p>",
        "id": 231635040,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593308
    },
    {
        "content": "<p>i guess it was kind of ... \"I want to understand why each of these bits of code should do the opposite in the other mode\"</p>",
        "id": 231635041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593308
    },
    {
        "content": "<p>I will explain :)</p>",
        "id": 231635070,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593322
    },
    {
        "content": "<p>carry on</p>",
        "id": 231635118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593332
    },
    {
        "content": "<p><code>trait_definition_only</code> should only be true if we're resolving lifetimes in essentially the \"trait ref of a trait\"</p>",
        "id": 231635185,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593365
    },
    {
        "content": "<p>i.e. <code>Bar&lt;'b&gt;: for&lt;'a&gt; Foo&lt;'a, 'b&gt;</code></p>",
        "id": 231635205,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593376
    },
    {
        "content": "<p>Everywhere else, i.e. other items or in associated items for traits, it is false</p>",
        "id": 231635307,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593418
    },
    {
        "content": "<p>But also importantly (and this is what <span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span>'s comment was): when <code>trait_defintion_only</code> is false we <em>still</em> visit the <code>Bar&lt;'b&gt;: for&lt;'a&gt; Foo&lt;'a, 'b&gt;</code></p>",
        "id": 231635445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593474
    },
    {
        "content": "<p>And this essentially comes back to diagnostics/warnings</p>",
        "id": 231635488,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593495
    },
    {
        "content": "<p>(I think)</p>",
        "id": 231635578,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/231635205\">said</a>:</p>\n<blockquote>\n<p>i.e. <code>Bar&lt;'b&gt;: for&lt;'a&gt; Foo&lt;'a, 'b&gt;</code></p>\n</blockquote>\n<p>I don't really undesrtand this yet</p>",
        "id": 231635588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593534
    },
    {
        "content": "<p>we invoke resolve-lifetimes on items, right?</p>",
        "id": 231635595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593538
    },
    {
        "content": "<p>yes</p>",
        "id": 231635615,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593545
    },
    {
        "content": "<p>but we can ask for the <code>named_region</code> of <code>'b</code></p>",
        "id": 231635665,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593562
    },
    {
        "content": "<p>and that gets the item that \"owns\" it, i.e. the trait</p>",
        "id": 231635724,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/231635205\">said</a>:</p>\n<blockquote>\n<p>i.e. <code>Bar&lt;'b&gt;: for&lt;'a&gt; Foo&lt;'a, 'b&gt;</code></p>\n</blockquote>\n<p>is this the \"super trait\"</p>",
        "id": 231635765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593594
    },
    {
        "content": "<p>and calls <code>resolve_lifetimes</code> (or really, here, <code>resolve_lifetimes_trait_definition</code>)</p>",
        "id": 231635776,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593599
    },
    {
        "content": "<p>yes</p>",
        "id": 231635802,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/231635665\">said</a>:</p>\n<blockquote>\n<p>but we can ask for the <code>named_region</code> of <code>'b</code></p>\n</blockquote>\n<p>can you tie this to the code?</p>",
        "id": 231635840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593624
    },
    {
        "content": "<p>is it <code>named_region_map</code>?</p>",
        "id": 231635870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593634
    },
    {
        "content": "<p>yes</p>",
        "id": 231635883,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593640
    },
    {
        "content": "<p>one sec</p>",
        "id": 231635917,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593646
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/680d9fcac1dec4b671707e0ffc6bf95ac7115ebe/compiler/rustc_middle/src/ty/context.rs#L2643\">https://github.com/rust-lang/rust/blob/680d9fcac1dec4b671707e0ffc6bf95ac7115ebe/compiler/rustc_middle/src/ty/context.rs#L2643</a></p>",
        "id": 231635970,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593666
    },
    {
        "content": "<p>from the PR I see</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">         </span><span class=\"n\">named_region_map</span>: <span class=\"o\">|</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">resolve_lifetimes_for</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">).</span><span class=\"n\">defs</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">id</span><span class=\"p\">),</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231636073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593698
    },
    {
        "content": "<p>So the <code>id</code> there is the id of the <em>owner</em> of a lifetime</p>",
        "id": 231636130,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593727
    },
    {
        "content": "<p>So, either the <code>Item</code> if it's like the trait ref of a trait</p>",
        "id": 231636155,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593746
    },
    {
        "content": "<p>Or the <code>function</code> if it's in a where clause</p>",
        "id": 231636179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593754
    },
    {
        "content": "<p>etc.</p>",
        "id": 231636194,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593757
    },
    {
        "content": "<p>(pre-existing, but we should be documenting these things)</p>",
        "id": 231636258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593786
    },
    {
        "content": "<p>ah, maybe it is</p>",
        "id": 231636287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593798
    },
    {
        "content": "<p>in that <code>resolve_lifetimes_for</code> has a nice comment</p>",
        "id": 231636358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593809
    },
    {
        "content": "<blockquote>\n<p>fn resolve_lifetimes_for&lt;'tcx&gt;(tcx: TyCtxt&lt;'tcx&gt;, def_id: LocalDefId) -&gt; &amp;'tcx ResolveLifetimes {</p>\n</blockquote>",
        "id": 231636363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593813
    },
    {
        "content": "<p>The documentation is a bit scattered</p>",
        "id": 231636397,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593824
    },
    {
        "content": "<p>/// Second, if we are asking for lifetimes in a trait <em>definition</em>, we use <code>resolve_lifetimes_trait_definition</code><br>\n/// instead of <code>resolve_lifetimes</code>, which does not descend into the trait items and does not emit diagnostics.</p>",
        "id": 231636432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593836
    },
    {
        "content": "<p>that's the part I'm still struggling to understand though</p>",
        "id": 231636449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593842
    },
    {
        "content": "<p>I don't quite like that <code>named_region</code> and similar counterparts are in <code>ty/context</code></p>",
        "id": 231636458,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/231636449\">said</a>:</p>\n<blockquote>\n<p>that's the part I'm still struggling to understand though</p>\n</blockquote>\n<p>right</p>",
        "id": 231636488,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593858
    },
    {
        "content": "<p>should I continue then</p>",
        "id": 231636513,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593867
    },
    {
        "content": "<p>I guess :)</p>",
        "id": 231636545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593879
    },
    {
        "content": "<p>yes!</p>",
        "id": 231636554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593882
    },
    {
        "content": "<p>I'm just reading into the code a bit at the same time</p>",
        "id": 231636563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593887
    },
    {
        "content": "<p>Let me explain first why the split is necessary</p>",
        "id": 231636609,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593908
    },
    {
        "content": "<p>I should load this into vscode</p>",
        "id": 231636613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616593908
    },
    {
        "content": "<p>and then second how we define the <em>split</em></p>",
        "id": 231636714,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593938
    },
    {
        "content": "<p>But I think it might be helpful to think of <code>resolve_lifetimes_trait_defintion</code> as really only a small and duplicated subset of <code>resolve_lifetimes</code></p>",
        "id": 231636783,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/231634743\">said</a>:</p>\n<blockquote>\n<p>So then we try to instantiate <code>HInt: Int</code></p>\n</blockquote>\n<p>starting here</p>",
        "id": 231636819,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616593987
    },
    {
        "content": "<p>(from the supertrait?)</p>",
        "id": 231636917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594032
    },
    {
        "content": "<p>yes</p>",
        "id": 231636976,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594044
    },
    {
        "content": "<p>let me back up a bit more</p>",
        "id": 231636998,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594049
    },
    {
        "content": "<p>also to help myself get orientated</p>",
        "id": 231637009,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/231634466\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HInt</span>: <span class=\"nc\">Int</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">D</span>: <span class=\"nc\">DInt</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">DInt</span>: <span class=\"nc\">Int</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">H</span>: <span class=\"nc\">HInt</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>here</p>",
        "id": 231637054,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/231634588\">said</a>:</p>\n<blockquote>\n<p>imagine elsewhere we have <code>T: HInt&lt;D = u32&gt;</code></p>\n</blockquote>\n<p>and this</p>",
        "id": 231637163,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594111
    },
    {
        "content": "<p>We ask, \"what lifetimes from super trait HRTBs are there on <code>D = u32</code>\"</p>",
        "id": 231637239,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594133
    },
    {
        "content": "<p>So then we go to <code>HInt: Int</code></p>",
        "id": 231637356,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594167
    },
    {
        "content": "<p>eventually call <code>resolve_lifetimes</code> (I'm blanking on exactly why, but we're low on time, so going to try to power through)</p>",
        "id": 231637440,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594201
    },
    {
        "content": "<p>err, actually, I don't think this particular cycle starts from a separate trait ref</p>",
        "id": 231637546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594249
    },
    {
        "content": "<p>because that doesn't make sense</p>",
        "id": 231637566,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594260
    },
    {
        "content": "<p>I think this just happens when we get to <code>D: DInt&lt;H = Self&gt; + Int</code> <em>normally</em></p>",
        "id": 231637609,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594280
    },
    {
        "content": "<p>I think I just don't expect <code>resolve_lifetimes</code> to resolve the lifetimes for trait items</p>",
        "id": 231637708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594302
    },
    {
        "content": "<p>I'm now pondering why that is</p>",
        "id": 231637720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594306
    },
    {
        "content": "<p>I guess that the lifetimes from the trait are in scope</p>",
        "id": 231637736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594312
    },
    {
        "content": "<p>yes</p>",
        "id": 231637751,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594317
    },
    {
        "content": "<p>that doesn't seem good enough :)</p>",
        "id": 231637788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594332
    },
    {
        "content": "<p>that is, we could setup the scope again</p>",
        "id": 231637834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594347
    },
    {
        "content": "<p>but ok, that's a decent reason</p>",
        "id": 231637846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594351
    },
    {
        "content": "<p>so maybe that's the cycle then</p>",
        "id": 231637854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594354
    },
    {
        "content": "<p>I mean, I definitely thought about why we can't resolve lifetimes <em>per-owner</em></p>",
        "id": 231637855,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594355
    },
    {
        "content": "<p>you don't need probably such a complex example</p>",
        "id": 231637902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594376
    },
    {
        "content": "<p>just something like</p>",
        "id": 231637913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594378
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span>: <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231637933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594385
    },
    {
        "content": "<p>will do?</p>",
        "id": 231637938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594387
    },
    {
        "content": "<p>Potentially</p>",
        "id": 231637962,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594395
    },
    {
        "content": "<p>e.g., the problem is that we need to know the \"supertraits\" of <code>Foo</code> sometimes</p>",
        "id": 231637969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594397
    },
    {
        "content": "<p>to resolve the <code>Bar: Foo</code></p>",
        "id": 231638064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594414
    },
    {
        "content": "<p>The example I gave was literally the first thing that stopped compiling</p>",
        "id": 231638074,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594416
    },
    {
        "content": "<p>I mean presumably I have to add some some assoc types and binders and things</p>",
        "id": 231638098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594424
    },
    {
        "content": "<p>to show the necessity</p>",
        "id": 231638137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594432
    },
    {
        "content": "<p>so it <em>feels</em> like there is a different set of queries that could work here</p>",
        "id": 231638199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594446
    },
    {
        "content": "<p>that doesn't mean we can't land this PR though</p>",
        "id": 231638246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594462
    },
    {
        "content": "<p>Yeah, like I said, if we could resolve lifetimes per-owner, this would be fine</p>",
        "id": 231638250,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594464
    },
    {
        "content": "<p>Anyways, let me quickly describe the split itself</p>",
        "id": 231638312,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594480
    },
    {
        "content": "<p>essentially, because the work we do in <code>resolve_lifetimes_trait_definition</code> is duplicated (but also very limited), we don't want to emit any diagnostics</p>",
        "id": 231638393,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594512
    },
    {
        "content": "<p>(we also can't emit i.e. lifetime unused because we can't check all possible uses)</p>",
        "id": 231638500,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594534
    },
    {
        "content": "<p>And also, if we only care about the <code>trait Foo</code> part, then we don't go through any associated items</p>",
        "id": 231638604,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594566
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 231638640,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594575
    },
    {
        "content": "<p>yes, I think what I would expect to see is</p>",
        "id": 231638898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594653
    },
    {
        "content": "<p>(side note, resolving lifetimes per-owner might be more possible if we move actual name resolution to ast, like <span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> mentioned is \"on the horizon\")</p>",
        "id": 231638911,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594657
    },
    {
        "content": "<p>\"actual name resolution\"?</p>",
        "id": 231638970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594675
    },
    {
        "content": "<p>I guess you mean <em>of lifetimes</em></p>",
        "id": 231639036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594699
    },
    {
        "content": "<p>yes</p>",
        "id": 231639094,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594712
    },
    {
        "content": "<p>I'm thinking</p>",
        "id": 231639342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594780
    },
    {
        "content": "<p>I guess what I was expecting was something like \"resolve_trait_header\" as a building block for resolving other things</p>",
        "id": 231639396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594801
    },
    {
        "content": "<p>but really this way is ok too, it's very similar</p>",
        "id": 231639428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594813
    },
    {
        "content": "<p>I'm thinking now how to comment it</p>",
        "id": 231639454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594823
    },
    {
        "content": "<p>so that I can understand it later</p>",
        "id": 231639472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616594828
    },
    {
        "content": "<p>yeah, as was commented, it is duplicated, but it would be nice if there was a clean way to make it \"separate\" and as \"building block\" like you say</p>",
        "id": 231639548,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594853
    },
    {
        "content": "<p>but, it's so little work that the duplication probably doesn't matter</p>",
        "id": 231639613,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594880
    },
    {
        "content": "<p>It might be worth doing a perf run, but even combined into the binder refactor, that only is a couple percent in a couple benchmarks, but overall not really any effect</p>",
        "id": 231639799,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594926
    },
    {
        "content": "<p><a href=\"https://perf.rust-lang.org/compare.html?start=03e864fd86b8e346a2ea75235ce2b924ab453fa1&amp;end=9044cef82a24b8595a5f89c0c75a3eb867941441\">https://perf.rust-lang.org/compare.html?start=03e864fd86b8e346a2ea75235ce2b924ab453fa1&amp;end=9044cef82a24b8595a5f89c0c75a3eb867941441</a> that is the binder refactor as a whole</p>",
        "id": 231639888,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594959
    },
    {
        "content": "<p>slightly worse that I remember it</p>",
        "id": 231639932,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616594984
    },
    {
        "content": "<p>Anyways, I have time for maybe one more question, but otherwise have to go for now</p>",
        "id": 231640082,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616595024
    },
    {
        "content": "<p>I am not really concerned about perf</p>",
        "id": 231640093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616595026
    },
    {
        "content": "<p>But I'll be around tomorrow</p>",
        "id": 231640111,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616595031
    },
    {
        "content": "<p>just how to explain it</p>",
        "id": 231640129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616595034
    },
    {
        "content": "<p>ok :) this was helpful, thanks!</p>",
        "id": 231640145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616595039
    },
    {
        "content": "<p>Of course :)</p>",
        "id": 231640164,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616595047
    },
    {
        "content": "<p>I'm ready to r+ the first PR, although I might try to add some comments to capture my understanding</p>",
        "id": 231640173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616595050
    },
    {
        "content": "<p>Yeah, either just push them or comment on the PR and I'll add them sometime today</p>",
        "id": 231640219,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616595074
    },
    {
        "content": "<p>oh yeah, I have to rebase :/</p>",
        "id": 231640504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616595186
    },
    {
        "content": "<p>Okay <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've rebased this PR</p>",
        "id": 231710082,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616620621
    },
    {
        "content": "<p>ok!</p>",
        "id": 231724230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616627627
    },
    {
        "content": "<p>I started writing a comment but got distracted with some things</p>",
        "id": 231724241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616627636
    },
    {
        "content": "<p>It happens</p>",
        "id": 231724575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616627836
    },
    {
        "content": "<p>let me try to pick this back up again</p>",
        "id": 231796606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616677674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'm around now</p>",
        "id": 231797355,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616677937
    },
    {
        "content": "<p>I was just resetting my branch mostly in the meantime :)</p>",
        "id": 231797513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616677997
    },
    {
        "content": "<p>Great</p>",
        "id": 231797561,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616678019
    },
    {
        "content": "<p>So, things we could do/discuss today:</p>",
        "id": 231797598,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616678036
    },
    {
        "content": "<p>1) Just wait for you to make comments/r+</p>",
        "id": 231797655,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616678045
    },
    {
        "content": "<p>2) Talk about the coinduction PR</p>",
        "id": 231797695,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616678059
    },
    {
        "content": "<p>3) Talk about the binder refactor PR</p>",
        "id": 231797706,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616678064
    },
    {
        "content": "<p>Anything else?</p>",
        "id": 231797748,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616678082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/231797695\">said</a>:</p>\n<blockquote>\n<p>2) Talk about the coinduction PR</p>\n</blockquote>\n<p>I'd like to do this</p>",
        "id": 231798104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678225
    },
    {
        "content": "<p>let me write a short-ish comment to start to see if you agree</p>",
        "id": 231798124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678233
    },
    {
        "content": "<p>Works for me :)</p>",
        "id": 231798291,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616678301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> pushed a commit</p>",
        "id": 231798851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678554
    },
    {
        "content": "<p>/me goes to look</p>",
        "id": 231798890,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616678571
    },
    {
        "content": "<p>I'm not seeing it</p>",
        "id": 231798949,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616678600
    },
    {
        "content": "<p>er, pushed it now</p>",
        "id": 231799161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678673
    },
    {
        "content": "<p>I had some git problems</p>",
        "id": 231799170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678676
    },
    {
        "content": "<p>There we go</p>",
        "id": 231799235,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616678711
    },
    {
        "content": "<p>one sec</p>",
        "id": 231799236,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616678712
    },
    {
        "content": "<p>Looks good to me :)</p>",
        "id": 231799420,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616678773
    },
    {
        "content": "<p>great</p>",
        "id": 231799484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678802
    },
    {
        "content": "<p>then I will r+</p>",
        "id": 231799506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616678813
    },
    {
        "content": "<p><span aria-label=\"hearts\" class=\"emoji emoji-2665\" role=\"img\" title=\"hearts\">:hearts:</span></p>",
        "id": 231799551,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616678832
    },
    {
        "content": "<p>So, coinduction PR?</p>",
        "id": 231800035,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616679007
    },
    {
        "content": "<p>I will say that I looked very briefly at the previous PR and not at all at the current</p>",
        "id": 231800147,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616679043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> if I step away for 15-20 minutes, will you be here when I get back?</p>",
        "id": 231800378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616679135
    },
    {
        "content": "<p>yes</p>",
        "id": 231800415,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616679148
    },
    {
        "content": "<p>ok, something came up here I have to resolve :)</p>",
        "id": 231800442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616679162
    },
    {
        "content": "<p>No worries :)</p>",
        "id": 231800449,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616679167
    },
    {
        "content": "<p>I just rebased this on top of the resolve refactor</p>",
        "id": 231816832,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616684499
    },
    {
        "content": "<p>(bors tests have failed for <a href=\"https://github.com/rust-lang/rust/pull/82743\">https://github.com/rust-lang/rust/pull/82743</a>)</p>",
        "id": 231849886,
        "sender_full_name": "marmeladema",
        "timestamp": 1616695851
    },
    {
        "content": "<p>Just nll test needs blessing</p>",
        "id": 231850481,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616696070
    },
    {
        "content": "<p>Already fixed</p>",
        "id": 231850488,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616696073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> it merged!</p>",
        "id": 231900654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616721306
    },
    {
        "content": "<p>Yes :) and the binder refactor PR is rebased</p>",
        "id": 231900789,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616721421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> also, be ready tomorrow because I think we have a lot to discussion (coinduction maybe, binder refactor probably, chalk closures maybe)</p>",
        "id": 231902790,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616723050
    },
    {
        "content": "<p>I've been enjoying this 9am-10am hour</p>",
        "id": 231902985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616723227
    },
    {
        "content": "<p>I was thinking I might just block out that part of my day for chalk every day</p>",
        "id": 231902994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616723233
    },
    {
        "content": "<p>or every day but Tuesday, when I have a standing thing</p>",
        "id": 231903002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616723244
    },
    {
        "content": "<p>I like that idea :)</p>",
        "id": 231903009,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616723258
    },
    {
        "content": "<p>Gives me a time to bug you to do or discuss things :P</p>",
        "id": 231903027,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616723282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> bit early but <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 231958567,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616763276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 231960040,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616763881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> going to be 15 minutes late-- my morning run took longer than anticipated</p>",
        "id": 231960253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616763963
    },
    {
        "content": "<p>be there very soon!</p>",
        "id": 231960275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616763972
    },
    {
        "content": "<p>Okay :)</p>",
        "id": 231960295,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616763978
    },
    {
        "content": "<p>I wish I had the motivation and energy to get up early and run</p>",
        "id": 231960338,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> me too</p>",
        "id": 231961359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616764421
    },
    {
        "content": "<p>ok, i'm here ;)</p>",
        "id": 231961364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616764423
    },
    {
        "content": "<p>I do it, but I wouldn't call myself <em>motivated</em></p>",
        "id": 231961393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616764436
    },
    {
        "content": "<p>Well okay, then I wish I just made myself do it :)</p>",
        "id": 231961575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764513
    },
    {
        "content": "<p>Anyways, howdy</p>",
        "id": 231961592,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764519
    },
    {
        "content": "<p>howdy!</p>",
        "id": 231961606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616764522
    },
    {
        "content": "<p>shall we discuss rebinder or pick back up with coinduction</p>",
        "id": 231961625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616764530
    },
    {
        "content": "<p>also, I did decide to schedule this hour most days, i'm going to add to the compiler team calendar</p>",
        "id": 231961648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616764542
    },
    {
        "content": "<p>I'll let you decide :) for coinduction, I'm not sure how much I can help</p>",
        "id": 231961739,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764569
    },
    {
        "content": "<p>for binder refactor, I can summarize, answer questions, help go through</p>",
        "id": 231961766,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764580
    },
    {
        "content": "<p>ok, why don't we do rebinder</p>",
        "id": 231961783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616764587
    },
    {
        "content": "<p>And at some point, I would like some feedback on closures in chalk</p>",
        "id": 231961801,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764596
    },
    {
        "content": "<p>as long as poor <span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span> has been waiting, you've been waiting longer :P</p>",
        "id": 231961808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616764597
    },
    {
        "content": "<p>but for now, let's do the binder refactor</p>",
        "id": 231961839,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764608
    },
    {
        "content": "<p>yeah I saw <a class=\"stream-topic\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits/topic/Functions.20in.20Chalk\">#wg-traits &gt; Functions in Chalk</a> too-- kind of a long topic :)</p>",
        "id": 231961848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616764613
    },
    {
        "content": "<p>a lot of it is me figuring it out</p>",
        "id": 231961913,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764647
    },
    {
        "content": "<p>I will summarize when we get there</p>",
        "id": 231961927,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764655
    },
    {
        "content": "<p>Okay so <a href=\"https://github.com/rust-lang/rust/issues/76814\">#76814</a></p>",
        "id": 231961958,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764670
    },
    {
        "content": "<p>This has been rebased on master, which includes the resolve refactor</p>",
        "id": 231962037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764691
    },
    {
        "content": "<p>Let me see if I can point out a few <em>important</em> places in the PR</p>",
        "id": 231962172,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764753
    },
    {
        "content": "<p>I'm not sure you need a general summary of what it's doing or the motivation</p>",
        "id": 231962214,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764771
    },
    {
        "content": "<p>I remember the general idea :)</p>",
        "id": 231962278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616764799
    },
    {
        "content": "<p>let me check out the code</p>",
        "id": 231962330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616764805
    },
    {
        "content": "<p>Okay, so I'm just scrolling, so these aren't all in order of like \"most important\" just \"important things I see first\"</p>",
        "id": 231962627,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764914
    },
    {
        "content": "<p>Which <code>BoundVarsCollector</code>/<code>ValidateBoundVars</code> in <a href=\"https://github.com/rust-lang/rust/blob/9d7126b6def686536f77164356e1ed23cc94de24/compiler/rustc_middle/src/ty/fold.rs#L752\"><code>ty/fold</code></a></p>",
        "id": 231962732,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616764944
    },
    {
        "content": "<p>what about it :)</p>",
        "id": 231962920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765032
    },
    {
        "content": "<p>I'm looking at the code</p>",
        "id": 231962922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765035
    },
    {
        "content": "<p><code>BoundVarsCollector</code> essentially just folds through a type to find bound vars. Importantly, we catch bound regions everywhere else, so that's just a <code>bug</code>. But there is one test that still has a <code>Binder::bind</code> over a type that contains a bound type (issue 644something)</p>",
        "id": 231962987,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765051
    },
    {
        "content": "<p><code>ValidateBoundVars</code> is similar, but just verifys that a list of bound vars you give it matches the bound vars in the type</p>",
        "id": 231963053,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/231962987\">said</a>:</p>\n<blockquote>\n<p><code>BoundVarsCollector</code> essentially just folds through a type to find bound vars. Importantly, we catch bound regions everywhere else, so that's just a <code>bug</code>. But there is one test that still has a <code>Binder::bind</code> over a type that contains a bound type (issue 644something)</p>\n</blockquote>\n<p>by this you mean:</p>",
        "id": 231963087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765097
    },
    {
        "content": "<p>used in debug assertions</p>",
        "id": 231963089,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765098
    },
    {
        "content": "<p>(issue 64494 test)</p>",
        "id": 231963127,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765115
    },
    {
        "content": "<p>it's a bug if there are late-bond <em>lifetimes</em>...? oh, I think I see</p>",
        "id": 231963160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765125
    },
    {
        "content": "<p>There's a bug if you use <code>Binder::bind</code> on a type that has late bound lifetimes, because you should be using <code>rebind</code> or <code>bind_with_vars</code></p>",
        "id": 231963280,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765164
    },
    {
        "content": "<p>because we should know that everywhere</p>",
        "id": 231963296,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765176
    },
    {
        "content": "<p>(now)</p>",
        "id": 231963328,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765187
    },
    {
        "content": "<p>Also, this did come up clean in the crater run, so it's not like we're missing tests that would cover the remaining <code>Binder::bind</code>s</p>",
        "id": 231963540,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765259
    },
    {
        "content": "<p>Next important thing:</p>",
        "id": 231963664,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765300
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/76814/files#diff-b12d31237d3790cfe414f072d2ac7ed12906ccbc95f01b7454c72ebab5001421R546\"><code>subst_supertrait</code></a></p>",
        "id": 231963735,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765332
    },
    {
        "content": "<p>I don't think there's any logic difference here actually</p>",
        "id": 231963787,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765354
    },
    {
        "content": "<p>yeah</p>",
        "id": 231963862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765385
    },
    {
        "content": "<p>More so we just keep track of bound vars now and have to shift bound vars as needed</p>",
        "id": 231963869,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765388
    },
    {
        "content": "<p>I wrote a very helpful comment (for me at least) that makes things a bit more clear</p>",
        "id": 231963964,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765407
    },
    {
        "content": "<p>/me continues to search</p>",
        "id": 231964066,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765446
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/76814/files#diff-4864ab6ed9e5cec3c6d0d561211554aafbd0094842869d2a711b5451151bc534R942\"><code>BoundVariableKind</code></a></p>",
        "id": 231964151,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765479
    },
    {
        "content": "<p>this is a quite clean commit history</p>",
        "id": 231964164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765484
    },
    {
        "content": "<p>kind of important to the whole PR, yeah</p>",
        "id": 231964172,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765487
    },
    {
        "content": "<p>That's after about 15 interactive rebases</p>",
        "id": 231964207,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765502
    },
    {
        "content": "<p>Wish I was joking</p>",
        "id": 231964211,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765506
    },
    {
        "content": "<p>oh I know how that goes</p>",
        "id": 231964237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765517
    },
    {
        "content": "<p>Well, I mean, there were plenty of rebases to update changes from master</p>",
        "id": 231964321,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765536
    },
    {
        "content": "<p>then I split things out a few times</p>",
        "id": 231964338,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765542
    },
    {
        "content": "<p>And I had fixes in later commits that I amended into earlier commits</p>",
        "id": 231964386,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765560
    },
    {
        "content": "<p>And a few made more sense next to each other, so I moved them around, then squashed</p>",
        "id": 231964420,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765574
    },
    {
        "content": "<p>yes, that's what I mean</p>",
        "id": 231964422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765577
    },
    {
        "content": "<p>I know how <em>that</em> goes</p>",
        "id": 231964435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765579
    },
    {
        "content": "<p>It's great</p>",
        "id": 231964453,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765584
    },
    {
        "content": "<p>Git is so powerful</p>",
        "id": 231964480,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765590
    },
    {
        "content": "<p>usually I just <code>git reset rust-lang/master</code> and re-add things</p>",
        "id": 231964489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765592
    },
    {
        "content": "<p>then do git rebase -i and the <code>edit</code> option to make sure things build at each step and see what I missed</p>",
        "id": 231964549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765613
    },
    {
        "content": "<p>Okay so <code>BoundVariableKind</code></p>",
        "id": 231964550,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765614
    },
    {
        "content": "<p>anyway, I get the idea of this variable enum I think</p>",
        "id": 231964587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765624
    },
    {
        "content": "<p>This is essentially Chalks <code>VariableKind</code></p>",
        "id": 231964599,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765631
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/76814/files#diff-4864ab6ed9e5cec3c6d0d561211554aafbd0094842869d2a711b5451151bc534R958\"><code>Binder</code></a></p>",
        "id": 231964654,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765644
    },
    {
        "content": "<p><code>Binder&lt;T&gt;(T)</code> -&gt; <code>Binder&lt;'tcx, T&gt;(T, &amp;'tcx ty::List&lt;BoundVariableKind&gt;)</code></p>",
        "id": 231964744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765671
    },
    {
        "content": "<p>Then notable changes to the <code>impl Binder</code>s:</p>",
        "id": 231964797,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765695
    },
    {
        "content": "<p><code>bind</code> now calls <code>BoundVarCollector</code>, really should only be necessary in issue 64494 test, but need to more thoroughly check</p>",
        "id": 231964889,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765731
    },
    {
        "content": "<p><code>bind_with_vars</code> you have to know the vars and it checks with <code>ValidateBoundVars</code></p>",
        "id": 231965010,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765766
    },
    {
        "content": "<p>/me continues scrolling</p>",
        "id": 231965092,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765795
    },
    {
        "content": "<p>I guess the code I really want to read is the lifetime resolution code</p>",
        "id": 231965097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765797
    },
    {
        "content": "<p>presumably that's where the grungiest stuff happens</p>",
        "id": 231965113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765803
    },
    {
        "content": "<p>Yes, was about to mention that</p>",
        "id": 231965186,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765834
    },
    {
        "content": "<p>let me see if there is anything else super important</p>",
        "id": 231965225,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765847
    },
    {
        "content": "<p>no, I think <code>late/lifetimes</code> and <code>astconv/mod</code> are the next and last big things</p>",
        "id": 231965428,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765920
    },
    {
        "content": "<p>so, let's start with <code>rustc_resolve::late::lifetimes</code></p>",
        "id": 231965462,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765934
    },
    {
        "content": "<p>Where to start...</p>",
        "id": 231965543,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765969
    },
    {
        "content": "<p>well</p>",
        "id": 231965565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765981
    },
    {
        "content": "<p>Okay, so maybe let's work backwards</p>",
        "id": 231965576,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765986
    },
    {
        "content": "<p>so the tricky stuff, it seems, has to do with associated types</p>",
        "id": 231965582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765987
    },
    {
        "content": "<p>no?</p>",
        "id": 231965592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616765991
    },
    {
        "content": "<p>Yes</p>",
        "id": 231965599,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616765994
    },
    {
        "content": "<p>But, actually, only <em>nested</em> trait refs</p>",
        "id": 231965700,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766026
    },
    {
        "content": "<p>So, there's a few different things we should discuss here</p>",
        "id": 231965842,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766083
    },
    {
        "content": "<p>off the top of my head, just briefly: the \"trait ref hack\", nested trait ref madness/supertrait lifetime resolution, closure binders,</p>",
        "id": 231966030,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766145
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/9d7126b6def686536f77164356e1ed23cc94de24/compiler/rustc_resolve/src/late/lifetimes.rs#L2632-L2652\">https://github.com/rust-lang/rust/blob/9d7126b6def686536f77164356e1ed23cc94de24/compiler/rustc_resolve/src/late/lifetimes.rs#L2632-L2652</a></p>",
        "id": 231966062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766155
    },
    {
        "content": "<p>this is the code to manage bindings</p>",
        "id": 231966095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766168
    },
    {
        "content": "<p>yes</p>",
        "id": 231966130,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766184
    },
    {
        "content": "<p>the comment is a bit inaccurate, I guess</p>",
        "id": 231966287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766245
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// Resolve lifetimes found in the type `XX` from `Item = XX` bindings.</span>\n</code></pre></div>",
        "id": 231966307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766251
    },
    {
        "content": "<p>I actually just was thinking: I could be clever and only query the supertrait hrtb lifetimes if the binding is <code>Constraint</code>, since that's only when it matters, but eh</p>",
        "id": 231966337,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766259
    },
    {
        "content": "<p>I like it better this way</p>",
        "id": 231966364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766270
    },
    {
        "content": "<p>mmm, actually I think that comment is accurate</p>",
        "id": 231966409,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766289
    },
    {
        "content": "<p>fewer ifs = better</p>",
        "id": 231966412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766290
    },
    {
        "content": "<p>Oh?</p>",
        "id": 231966446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766299
    },
    {
        "content": "<p>I expect it is..accurate but incomplete</p>",
        "id": 231966472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766309
    },
    {
        "content": "<p>That's what <code>visit_assoc_type_binding</code> does, right?</p>",
        "id": 231966473,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766309
    },
    {
        "content": "<p>since it applies to <code>Item: Foo</code> too, no?</p>",
        "id": 231966534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766330
    },
    {
        "content": "<p>But yes, it is incomplete now that we also get supertrait hrtb lifetimes</p>",
        "id": 231966540,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766330
    },
    {
        "content": "<p>ah yes, that too</p>",
        "id": 231966580,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766343
    },
    {
        "content": "<p>Are you making review comments atm? If not, I'll add it so I don't forget to change it</p>",
        "id": 231966716,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766388
    },
    {
        "content": "<p>I am not</p>",
        "id": 231966729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766395
    },
    {
        "content": "<p>I'm just reading right now</p>",
        "id": 231966826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766441
    },
    {
        "content": "<p>Okay, so for this, is it more helpful for me to talk through the various bits and pieces, or for you to read code and ask questions</p>",
        "id": 231966837,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766447
    },
    {
        "content": "<p>so the <a href=\"https://github.com/rust-lang/rust/blob/9d7126b6def686536f77164356e1ed23cc94de24/compiler/rustc_resolve/src/late/lifetimes.rs#L2665-L2675\"><code>supertrait_bounds</code></a></p>",
        "id": 231966852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766455
    },
    {
        "content": "<p>probably you can just answer questions</p>",
        "id": 231966881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766466
    },
    {
        "content": "<p>this function takes the first supertrait</p>",
        "id": 231966910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766479
    },
    {
        "content": "<p>of course there could be more than one</p>",
        "id": 231966959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766484
    },
    {
        "content": "<p>er, wait</p>",
        "id": 231967025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766502
    },
    {
        "content": "<p>It takes the \"named\" trait</p>",
        "id": 231967054,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766514
    },
    {
        "content": "<p>this function needs a comment for sure :)</p>",
        "id": 231967142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766558
    },
    {
        "content": "<p>Yes</p>",
        "id": 231967151,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766563
    },
    {
        "content": "<p>This, along with the <code>supertraits</code> function, essentially just finds the supertrait that an associated type is defined on, while keeping track of the hrtb bound vars we find along the way</p>",
        "id": 231967441,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766658
    },
    {
        "content": "<p>(There's like two other places we do something similar, but neither track bound vars; might be nice to merge the functionality)</p>",
        "id": 231967519,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766691
    },
    {
        "content": "<p>I am reminded of <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>'s recent PR</p>",
        "id": 231967725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766774
    },
    {
        "content": "<p>but yes, I see this is tracking bound variables</p>",
        "id": 231967751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766785
    },
    {
        "content": "<p>it'd be nice to highlight that in a comment, it's really not obvious what the logic is here</p>",
        "id": 231967772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766793
    },
    {
        "content": "<p>(can you jot this down? I'm going to have to run soon)</p>",
        "id": 231967789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766802
    },
    {
        "content": "<p>yes</p>",
        "id": 231967805,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766810
    },
    {
        "content": "<p>so far I think the main things needed are some comments and things to clarify what's going on</p>",
        "id": 231967811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616766812
    },
    {
        "content": "<p>yeah, especially the more recent things</p>",
        "id": 231967861,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766835
    },
    {
        "content": "<p>where I was in the \"let's get this working\" mood</p>",
        "id": 231967933,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766847
    },
    {
        "content": "<p>I actually might be able to reuse <code>transitive_bounds_that_define_assoc_type</code></p>",
        "id": 231968257,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616766968
    },
    {
        "content": "<p>ok, so, I'm going to drop now to do this thing</p>",
        "id": 231968570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616767100
    },
    {
        "content": "<p>but let me add the daily 9am things to my calendar...</p>",
        "id": 231968580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616767105
    },
    {
        "content": "<p>I'll do a proper review, not sure if I will get to that today though, likely not</p>",
        "id": 231968620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616767122
    },
    {
        "content": "<p>but the main thing I would say now is comments, that'll also help me think through the logic and look for holes</p>",
        "id": 231968653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616767138
    },
    {
        "content": "<p>very nice job!</p>",
        "id": 231968662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616767143
    },
    {
        "content": "<p>I'm kind of amazed this is working :)</p>",
        "id": 231968698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616767158
    },
    {
        "content": "<p>So much work</p>",
        "id": 231968763,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616767187
    },
    {
        "content": "<p>But I think it's probably worth it in the long run</p>",
        "id": 231968796,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616767199
    },
    {
        "content": "<p>I'll definitely go through and add more coments and such</p>",
        "id": 231968873,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616767212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've done some nice cleanups to <code>late/lifetimes</code> and also added a bunch of comments</p>",
        "id": 232036377,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616795231
    },
    {
        "content": "<p>Well that rebase didn't even last 24 hours :/</p>",
        "id": 232100170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616861412
    },
    {
        "content": "<p>wave</p>",
        "id": 232264544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'm going to try and review your comments later today; we can also talk wed if necessary</p>",
        "id": 232273121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617026656
    },
    {
        "content": "<p>Oops I forgot about this morning <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 232273194,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617026692
    },
    {
        "content": "<p>sorry</p>",
        "id": 232273203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617026697
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 232586941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196022
    },
    {
        "content": "<p>so let me start by reading your comments</p>",
        "id": 232586953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196026
    },
    {
        "content": "<p>howdy</p>",
        "id": 232586954,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617196027
    },
    {
        "content": "<p>gotta find the PR first :)</p>",
        "id": 232587137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196088
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/76814/commits/39100e5437e13d357bd7e2b79b9bdf4c714b67f2\">https://github.com/rust-lang/rust/pull/76814/commits/39100e5437e13d357bd7e2b79b9bdf4c714b67f2</a></p>",
        "id": 232587153,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617196094
    },
    {
        "content": "<p>that commit contains the comments and some cleanup</p>",
        "id": 232587182,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617196106
    },
    {
        "content": "<p>not sure if you want to read that alone or just the whole PR</p>",
        "id": 232587226,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617196123
    },
    {
        "content": "<p>ok</p>",
        "id": 232587405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196200
    },
    {
        "content": "<p>I'll start with the comit I think</p>",
        "id": 232587464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ok so I'm reading but in the meantime</p>",
        "id": 232588261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196497
    },
    {
        "content": "<p>in your mind, what is the \"blocker\" for this to land</p>",
        "id": 232588279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196503
    },
    {
        "content": "<p>(if any)</p>",
        "id": 232588295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196508
    },
    {
        "content": "<p>nothing</p>",
        "id": 232588303,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617196510
    },
    {
        "content": "<p>or what is your \"least favorite\" part</p>",
        "id": 232588305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196512
    },
    {
        "content": "<p>also</p>",
        "id": 232588342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196523
    },
    {
        "content": "<p>is there any place where we describe the \"overall strategy\"</p>",
        "id": 232588356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196529
    },
    {
        "content": "<p>maybe this deserves a rustc-dev-guide chapter</p>",
        "id": 232588376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196536
    },
    {
        "content": "<p>I might take a stab at outlining it in a hackmd right now</p>",
        "id": 232588395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196542
    },
    {
        "content": "<p>and see if you agree</p>",
        "id": 232588404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196545
    },
    {
        "content": "<p>my least favorite part is adding '<code>tcx</code> to <code>Binder</code>, but that's not getting changed here</p>",
        "id": 232588427,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617196552
    },
    {
        "content": "<p>the truth is that I trust you on the tactics, I am mostly interested in documenting the strategy</p>",
        "id": 232588442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196556
    },
    {
        "content": "<p>but other than that, this is basically what I expect it to be</p>",
        "id": 232588480,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617196564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/232588427\">said</a>:</p>\n<blockquote>\n<p>my least favorite part is adding '<code>tcx</code> to <code>Binder</code>, but that's not getting changed here</p>\n</blockquote>\n<p>yeah I dont' care about this right now :)</p>",
        "id": 232588492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196565
    },
    {
        "content": "<p>we need interner to fix it</p>",
        "id": 232588498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196567
    },
    {
        "content": "<p>I could definitely help outline general strategy</p>",
        "id": 232588570,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617196597
    },
    {
        "content": "<p>all-in-all, it's not <em>that</em> complicated</p>",
        "id": 232588593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617196605
    },
    {
        "content": "<p>probably here: <a href=\"https://hackmd.io/5R_E6gF7T36zoD5oqYbLaQ\">https://hackmd.io/5R_E6gF7T36zoD5oqYbLaQ</a></p>",
        "id": 232588851,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617196704
    },
    {
        "content": "<p>sure sure</p>",
        "id": 232588937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196737
    },
    {
        "content": "<p>I kind of want to write it</p>",
        "id": 232588946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196740
    },
    {
        "content": "<p>sure</p>",
        "id": 232588961,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617196746
    },
    {
        "content": "<p>That's maybe better</p>",
        "id": 232589000,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617196758
    },
    {
        "content": "<p>I think I udnerstand it fine</p>",
        "id": 232589006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196761
    },
    {
        "content": "<p>but this is a good test</p>",
        "id": 232589033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196770
    },
    {
        "content": "<p>ok so</p>",
        "id": 232589278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617196847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'm taking some notes at the bottom of that hackmd btw</p>",
        "id": 232589767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617197027
    },
    {
        "content": "<p>man</p>",
        "id": 232590286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617197216
    },
    {
        "content": "<p>I hate how markdown list notation can't embed code snippets</p>",
        "id": 232590305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617197223
    },
    {
        "content": "<p>not that I know what I would do differently exactly</p>",
        "id": 232590348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617197240
    },
    {
        "content": "<p>(brb)</p>",
        "id": 232590661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617197344
    },
    {
        "content": "<p>back now</p>",
        "id": 232591859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617197748
    },
    {
        "content": "<p>does it seem right so far, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ?</p>",
        "id": 232591870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617197752
    },
    {
        "content": "<p>so</p>",
        "id": 232591967,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617197779
    },
    {
        "content": "<p>Things like</p>\n<div class=\"codehilite\"><pre><span></span><code>SubTrait&lt;Item = &amp;&#39;a XYZ&gt;\nSubTrait&lt;Item: Trait&lt;&#39;a&gt;&gt;\n</code></pre></div>",
        "id": 232592058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617197815
    },
    {
        "content": "<p>That <code>'a</code> <em>is</em> apparent</p>",
        "id": 232592086,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617197828
    },
    {
        "content": "<p>yes but the problem I am trying to show is</p>",
        "id": 232592114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617197837
    },
    {
        "content": "<p>its index will depend on things that are not</p>",
        "id": 232592153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617197849
    },
    {
        "content": "<p>yes, that is correct</p>",
        "id": 232592183,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617197861
    },
    {
        "content": "<p>ah and there's the whole flattening thing to contend with</p>",
        "id": 232592205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617197872
    },
    {
        "content": "<p>that's really the only \"complicated\" bit, imo</p>",
        "id": 232592333,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617197906
    },
    {
        "content": "<p>I still consider it unfortunate that <code>resolve_lifetimes </code> has to consider supertraits at all</p>",
        "id": 232592402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617197939
    },
    {
        "content": "<p><strong>but I'm letting it go</strong></p>",
        "id": 232592436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617197951
    },
    {
        "content": "<p>LETTING IT GO</p>",
        "id": 232592442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617197955
    },
    {
        "content": "<p>The only way I could see us getting around it is to actually just desugar from ast -&gt; hir the associated type bounds</p>",
        "id": 232592499,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617197979
    },
    {
        "content": "<p>But I don't know if that type of desugaring happens now at all</p>",
        "id": 232592535,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617197993
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://media.giphy.com/media/xUySTxQp21GMZhX916/giphy.gif\"><img src=\"https://media.giphy.com/media/xUySTxQp21GMZhX916/giphy.gif\"></a></div>",
        "id": 232592540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617197995
    },
    {
        "content": "<p>I think you should clarify that the references from super trait HRTBs only can appear in the <em>self type</em> of a projection bound</p>",
        "id": 232592755,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198065
    },
    {
        "content": "<p>uh</p>",
        "id": 232592906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198124
    },
    {
        "content": "<p>how do you define self type :)</p>",
        "id": 232592919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198131
    },
    {
        "content": "<p>I think I would say \"only appear in the parameters to the trait\"</p>",
        "id": 232592958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198147
    },
    {
        "content": "<p>but they can't really appear in the <code>Self</code> type specifically</p>",
        "id": 232592967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198153
    },
    {
        "content": "<p>In your example, <code>for&lt;'a, 'b&gt; &lt;&amp;'a T as SuperTrait&lt;'b&gt;&gt;::Item</code> is the self type</p>",
        "id": 232593032,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198176
    },
    {
        "content": "<p>I see, ok</p>",
        "id": 232593092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198197
    },
    {
        "content": "<p>But they wouldn't be able to appear in the <code>: Trait&lt;'a&gt;</code> part</p>",
        "id": 232593113,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198207
    },
    {
        "content": "<p>right</p>",
        "id": 232593127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198212
    },
    {
        "content": "<p>(or <code>= &amp;'a XYZ</code> part)</p>",
        "id": 232593150,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198221
    },
    {
        "content": "<p>i.e. you can't <em>name</em> them</p>",
        "id": 232593171,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198232
    },
    {
        "content": "<p>It's only relevant because of lowering</p>",
        "id": 232593193,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198242
    },
    {
        "content": "<p>there's a case with more binders introduced, right?</p>",
        "id": 232593243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198250
    },
    {
        "content": "<p>so that you'd get <code>for&lt;'a, 'b, 'c&gt;</code></p>",
        "id": 232593248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198253
    },
    {
        "content": "<p>something like <code>SubTrait&lt;for&lt;'c&gt; Item: Trait&lt;'c&gt;&gt;</code>?</p>",
        "id": 232593283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198262
    },
    {
        "content": "<p>I forget exactly</p>",
        "id": 232593322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198274
    },
    {
        "content": "<p>but in the example I'm giving, I don't think the index of <code>'a</code> changes?</p>",
        "id": 232593337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198282
    },
    {
        "content": "<p>unless I'm writing it wrong</p>",
        "id": 232593347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/232593283\">said</a>:</p>\n<blockquote>\n<p>something like <code>SubTrait&lt;for&lt;'c&gt; Item: Trait&lt;'c&gt;&gt;</code>?</p>\n</blockquote>\n<p>That's not legal :) You would have to do <code>for&lt;'c&gt; SubTrait&lt;Item: Trait&lt;'c&gt;&gt;</code></p>",
        "id": 232593464,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198324
    },
    {
        "content": "<p>Yes, in your example, not indices change</p>",
        "id": 232593500,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198337
    },
    {
        "content": "<p>Indices only change in nested trait refs</p>",
        "id": 232593550,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198355
    },
    {
        "content": "<p>example?</p>",
        "id": 232593651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198383
    },
    {
        "content": "<p>oh goodness, let me go find it</p>",
        "id": 232593673,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198393
    },
    {
        "content": "<p>it's ok</p>",
        "id": 232593753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198429
    },
    {
        "content": "<p>ok, I think I covered the key bits</p>",
        "id": 232593962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198501
    },
    {
        "content": "<ul>\n<li>The way this works in the <code>resolve_lifetimes</code> code:<br>\n    * Normally we push scopes lexically<br>\n    * But when we are resolving a trait ref and we encounter an associated type binding:<br>\n        * We use the XXX query to get the supertraits <br>\n        * This query also tracks the bound parameters that are introduced through <code>for</code> quantifiers<br>\n        * We can then take those indices into account as we resolve the associated type bindiner</li>\n<li>During astconv:<br>\n    * We consult the various tables generates by the <code>resolve_lifetime</code> code</li>\n</ul>",
        "id": 232593993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198514
    },
    {
        "content": "<p>ugh, stupid nested lists in zulip</p>",
        "id": 232594006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198519
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>trait A&lt;&#39;a&gt; {}\ntrait C&lt;&#39;c&gt;: for&lt;&#39;a&gt; A&lt;&#39;a&gt; {\n    type As;\n}\nfn foo&lt;T&gt;(_: T) where T: for&lt;&#39;c&gt; C&lt;&#39;c, As: A&lt;&#39;c&gt;&gt; {}\n</code></pre></div>",
        "id": 232594010,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198520
    },
    {
        "content": "<p>Err, nope, not that</p>",
        "id": 232594058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198541
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>trait I&lt;&#39;a, &#39;b, &#39;c&gt; {\n    type As;\n}\ntrait H&lt;&#39;d, &#39;e&gt;: for&lt;&#39;f&gt; I&lt;&#39;d, &#39;f, &#39;e&gt; + &#39;d {}\nfn foo2&lt;T&gt;()\nwhere\n    T: for&lt;&#39;g&gt; H&lt;&#39;g, &#39;g, As: for&lt;&#39;h&gt; H&lt;&#39;h, &#39;g&gt; + &#39;g&gt;,\n{\n}\n</code></pre></div>",
        "id": 232594094,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198558
    },
    {
        "content": "<p>I was going to say</p>",
        "id": 232594108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198568
    },
    {
        "content": "<p>that didn't seem right</p>",
        "id": 232594117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198571
    },
    {
        "content": "<p>ok</p>",
        "id": 232594118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198572
    },
    {
        "content": "<p>The index of <code>'h</code> isn't <code>1</code> like you might expect from the bound vars in the syntax, but instead <code>2</code> because <code>'f</code> gets added</p>",
        "id": 232594246,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198613
    },
    {
        "content": "<p>ok, I think I can make a simpler variant for my explanation</p>",
        "id": 232594281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/binder.20refactor/near/232593962\">said</a>:</p>\n<blockquote>\n<p>ok, I think I covered the key bits</p>\n</blockquote>\n<p>looks right to me</p>",
        "id": 232594394,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198658
    },
    {
        "content": "<p>Yeah, that came straight from tests. You really only need only lifetime</p>",
        "id": 232594453,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198687
    },
    {
        "content": "<p>yeah so I think there are two surprising things</p>",
        "id": 232594835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198820
    },
    {
        "content": "<p>the first is binder flattening <em>period</em></p>",
        "id": 232594856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198827
    },
    {
        "content": "<p>the second is that binder flattening may introduce variables from super traits</p>",
        "id": 232594877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198837
    },
    {
        "content": "<p>i.e., <code>for&lt;'a&gt; Foo&lt;Bar: for&lt;'c&gt; ..&gt;</code></p>",
        "id": 232594941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198847
    },
    {
        "content": "<p>doesn't result in 2 debruijn indices but one</p>",
        "id": 232594961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198854
    },
    {
        "content": "<p>that itself is surprising to me :)</p>",
        "id": 232594970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198856
    },
    {
        "content": "<p>so, this it basically what the associated type bounds RFC says it should do</p>",
        "id": 232595018,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198871
    },
    {
        "content": "<p>/me gets link</p>",
        "id": 232595036,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198878
    },
    {
        "content": "<p>sure</p>",
        "id": 232595038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198879
    },
    {
        "content": "<p>but that's because the RFC is surprising</p>",
        "id": 232595068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198887
    },
    {
        "content": "<p>(to me) :)</p>",
        "id": 232595085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198892
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rfcs/2289-associated-type-bounds.html\">https://rust-lang.github.io/rfcs/2289-associated-type-bounds.html</a></p>",
        "id": 232595096,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198894
    },
    {
        "content": "<p>the natural thing to me would be to desugar to nested foralls</p>",
        "id": 232595119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198901
    },
    {
        "content": "<p>we're just kind of making our lives  more complicated</p>",
        "id": 232595200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198926
    },
    {
        "content": "<p>because we don't have those</p>",
        "id": 232595221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198931
    },
    {
        "content": "<p>Well, actually, I'm trying to remember. Maybe the RFC didn't say anything about the bound vars</p>",
        "id": 232595233,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617198936
    },
    {
        "content": "<p>we already had this discrepancy</p>",
        "id": 232595387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198984
    },
    {
        "content": "<p>it is what gave rise to <code>trait_ref_hack</code></p>",
        "id": 232595409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198990
    },
    {
        "content": "<p><em>really</em> we ought to have two levels of binder in the HIR</p>",
        "id": 232595437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617198999
    },
    {
        "content": "<p>or, even, I think we do</p>",
        "id": 232595447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617199004
    },
    {
        "content": "<p>But it did say that <code>T: Foo&lt;Bar: Baz&gt;</code> does desugar to <code>&lt;T as Foo&gt;::Bar: Baz</code></p>",
        "id": 232595468,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617199011
    },
    {
        "content": "<p>That's a really good point</p>",
        "id": 232595503,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617199028
    },
    {
        "content": "<p>I didn't realize that until just now :)</p>",
        "id": 232595546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617199051
    },
    {
        "content": "<p>Actually, in this PR, it's even apparent that we have to treat <em>both</em> sets of bound vars for <code>trait_ref_hack</code> as in scope</p>",
        "id": 232595617,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617199074
    },
    {
        "content": "<p>so yeah, I guess that's also a form of \"flattening\"</p>",
        "id": 232595681,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617199085
    },
    {
        "content": "<p>ok, gotta go, the hackmd is almost done in my view</p>",
        "id": 232596073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617199228
    },
    {
        "content": "<p>if that is accurate, I'm ready to r+</p>",
        "id": 232596078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617199234
    },
    {
        "content": "<p>Ooh nice</p>",
        "id": 232596137,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617199255
    },
    {
        "content": "<p>What we wrote is accurate</p>",
        "id": 232596220,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617199286
    },
    {
        "content": "<p>I will rebase and then let you r+</p>",
        "id": 232596240,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617199293
    },
    {
        "content": "<p>Okay <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it's rebased for whatever you want to do with it :)</p>",
        "id": 232604141,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617201971
    },
    {
        "content": "<p>It's merged <span aria-label=\"hearts\" class=\"emoji emoji-2665\" role=\"img\" title=\"hearts\">:hearts:</span></p>",
        "id": 232661460,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617223174
    },
    {
        "content": "<p>how many months of work was that again?</p>",
        "id": 232661558,
        "sender_full_name": "detrumi",
        "timestamp": 1617223207
    },
    {
        "content": "<p>more than 6</p>",
        "id": 232661614,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617223235
    },
    {
        "content": "<p>insane. great work!</p>",
        "id": 232661820,
        "sender_full_name": "detrumi",
        "timestamp": 1617223334
    },
    {
        "content": "<p>now time to go cleanup/delete the like 2 dozen branches from rebases/splitting off</p>",
        "id": 232661932,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617223391
    },
    {
        "content": "<p>Am I missing something? <a href=\"https://github.com/rust-lang/rust/issues/83737#issuecomment-812164105\">https://github.com/rust-lang/rust/issues/83737#issuecomment-812164105</a></p>",
        "id": 232830820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617314271
    },
    {
        "content": "<p>It's not the exact same thing twice I think</p>",
        "id": 232831256,
        "sender_full_name": "detrumi",
        "timestamp": 1617314489
    },
    {
        "content": "<p><code>ReErased</code> in one, <code>ReLateBound(DebruijnIndex(1), BoundRegion { var: 6, kind: BrNamed('t4) })</code> in the other</p>",
        "id": 232831358,
        "sender_full_name": "detrumi",
        "timestamp": 1617314529
    },
    {
        "content": "<p>Where?</p>",
        "id": 232831407,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617314546
    },
    {
        "content": "<p>In the last comment?</p>",
        "id": 232831412,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617314555
    },
    {
        "content": "<p>Looking at the <code>Zverbose</code> output in <a href=\"https://github.com/rust-lang/rust/issues/83737#issuecomment-812071616\">https://github.com/rust-lang/rust/issues/83737#issuecomment-812071616</a></p>",
        "id": 232831427,
        "sender_full_name": "detrumi",
        "timestamp": 1617314563
    },
    {
        "content": "<p>that's out of date</p>",
        "id": 232831443,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617314577
    },
    {
        "content": "<p>not what is actually being compared</p>",
        "id": 232831466,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617314584
    },
    {
        "content": "<p>(<code>decl.ty</code> and <code>witness</code> were being printed, now it's actually <code>decl_ty</code> and <code>allowed</code>)</p>",
        "id": 232831603,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617314658
    },
    {
        "content": "<p>ah right. Yeah in the last comment it's the same, my bad</p>",
        "id": 232831606,
        "sender_full_name": "detrumi",
        "timestamp": 1617314660
    },
    {
        "content": "<p>Okay so...why is <code>allowed.contains(&amp;decl_ty)</code> returning false</p>",
        "id": 232831647,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617314700
    },
    {
        "content": "<p>There is also <a href=\"https://github.com/rust-lang/rust/issues/83753\">https://github.com/rust-lang/rust/issues/83753</a> with a MCVE, maybe they are the same?</p>",
        "id": 232831729,
        "sender_full_name": "marmeladema",
        "timestamp": 1617314749
    },
    {
        "content": "<p>Nope that's different I think</p>",
        "id": 232831849,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617314805
    },
    {
        "content": "<p>Pretty sure that one is easy: just trying to get bound vars for a trait that doesn't exist</p>",
        "id": 232831940,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617314874
    },
    {
        "content": "<p>Because the associated item is on a struct</p>",
        "id": 232831951,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617314882
    },
    {
        "content": "<p>Too bad, it's going to be challenging to \"remotely\" debug fuschia codebase without a MCVE :/</p>",
        "id": 232831991,
        "sender_full_name": "marmeladema",
        "timestamp": 1617314885
    },
    {
        "content": "<p>Right</p>",
        "id": 232832128,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617314996
    },
    {
        "content": "<p>And I feel really bad about asking <span class=\"user-mention silent\" data-user-id=\"296355\">Rich Kadel</span> to test my patches</p>",
        "id": 232832198,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617315015
    },
    {
        "content": "<p>I mean, the issue is clear (at least, the final bit of it is): the type in the witness list isn't exactly the same as the type we're checking</p>",
        "id": 232832278,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617315062
    },
    {
        "content": "<p>Even though we erase all regions</p>",
        "id": 232832303,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617315081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I imagine you're about to get off, but any thoughts?</p>",
        "id": 232832327,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617315103
    },
    {
        "content": "<p>I mean, <em>maybe</em> the same type is getting interned differently?</p>",
        "id": 232832607,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617315279
    },
    {
        "content": "<p>that would be really weird</p>",
        "id": 232832614,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617315285
    },
    {
        "content": "<p>(that doesn't even make sense though)</p>",
        "id": 232832800,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617315392
    },
    {
        "content": "<p>Someone just posted what appears to be a similar issue with <code>tide</code></p>",
        "id": 232833571,
        "sender_full_name": "marmeladema",
        "timestamp": 1617315860
    },
    {
        "content": "<p>yep that's the same issue</p>",
        "id": 232833636,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617315906
    },
    {
        "content": "<p>I still don't understand what's going on</p>",
        "id": 232833878,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617316075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> They're definitely interning differently... I'm seeing:</p>\n<div class=\"codehilite\"><pre><span></span><code>allowed[4] = 0x000000011a8bcfe0 (&amp;mut dyn std::future::Future&lt;Output = ()&gt; + std::marker::Unpin)\ndecl_ty = 0x000000011a8b1588 (&amp;mut dyn std::future::Future&lt;Output = ()&gt; + std::marker::Unpin)\n</code></pre></div>",
        "id": 232901060,
        "sender_full_name": "eggyal",
        "timestamp": 1617371580
    },
    {
        "content": "<p>I'm going to be honest, this was a rabbit hole I did <em>not</em> expect to be going down</p>",
        "id": 232901415,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617371781
    },
    {
        "content": "<p>It's a bit weird though? I would expect that the <code>PartialEq</code> impl would forward to the <code>TyS</code> impl?</p>",
        "id": 232901504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617371880
    },
    {
        "content": "<p>Oh it is, but <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/mod.rs.html#319-324\">this</a></p>",
        "id": 232901579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617371908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249694\">@eggyal</span> thank you btw for looking into this. I'm going to be short on time today</p>",
        "id": 232901609,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617371939
    },
    {
        "content": "<p>It's probably worth debug printing out the flags and <code>outer_exclusive_binder</code></p>",
        "id": 232901774,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617372033
    },
    {
        "content": "<p><em>hopefully</em> it's not the actually allocation/interning that's different</p>",
        "id": 232901818,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617372049
    },
    {
        "content": "<p>They both have <code>flags: HAS_RE_ERASED</code> and <code>outer_exclusive_binder: DebruijnIndex(0)</code></p>",
        "id": 232904472,
        "sender_full_name": "eggyal",
        "timestamp": 1617373461
    },
    {
        "content": "<p>Welp</p>",
        "id": 232904992,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617373746
    },
    {
        "content": "<p>Oh, hang on... <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/mod.rs.html#329\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/mod.rs.html#329</a> ?</p>",
        "id": 232907695,
        "sender_full_name": "eggyal",
        "timestamp": 1617375180
    },
    {
        "content": "<p>I don't think hashing here matters; <code>.contains</code> uses <code>PartialEq</code></p>",
        "id": 232909272,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617375952
    },
    {
        "content": "<p>But <code>PartialEq</code> uses <code>ptr::eq(self, other)</code></p>",
        "id": 232909368,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617375981
    },
    {
        "content": "<p>so same issue</p>",
        "id": 232909376,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617375984
    },
    {
        "content": "<p>No, but when interning, the hash determines whether they are the same object or not..?</p>",
        "id": 232909780,
        "sender_full_name": "eggyal",
        "timestamp": 1617376199
    },
    {
        "content": "<p>Well, I think this is just saying that the Hash of <code>Ty&lt;'tcx&gt;</code> (or <code>&amp;'tcx TyS&lt;'tcx&gt;</code>) is just the hash of the pointer?</p>",
        "id": 232910701,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617376590
    },
    {
        "content": "<p>We should only be getting <code>&amp;'tcx TyS&lt;'tcx&gt;</code> i.e. we should only be getting those <em>from</em> <code>intern_ty</code></p>",
        "id": 232911054,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617376702
    },
    {
        "content": "<p>Ah, okay.  Will take a closer look a bit later.  Just out walking the dogs rn <span aria-label=\"puppy\" class=\"emoji emoji-1f436\" role=\"img\" title=\"puppy\">:puppy:</span></p>",
        "id": 232911577,
        "sender_full_name": "eggyal",
        "timestamp": 1617376950
    },
    {
        "content": "<p>No worries :)</p>",
        "id": 232911966,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617377164
    },
    {
        "content": "<p>okay so</p>",
        "id": 232951589,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617397412
    },
    {
        "content": "<p>With the tide MCVE</p>",
        "id": 232951633,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617397434
    },
    {
        "content": "<p>We have a <code>decl_ty</code> of</p>\n<div class=\"codehilite\"><pre><span></span><code>decl_ty.kind() = Adt(\n    std::boxed::Box,\n    [\n        (dyn std::future::Future&lt;Output = ()&gt; + std::marker::Unpin + ReErased),\n        std::alloc::Global,\n    ],\n)\n</code></pre></div>",
        "id": 232951686,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617397448
    },
    {
        "content": "<p>And</p>\n<div class=\"codehilite\"><pre><span></span><code>a.kind() = Adt(\n    std::boxed::Box,\n    [\n        (dyn std::future::Future&lt;Output = ()&gt; + std::marker::Unpin + ReErased),\n        std::alloc::Global,\n    ],\n)\n</code></pre></div>\n<p>in the list</p>",
        "id": 232951732,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617397484
    },
    {
        "content": "<p>Looks the same right? (This is <code>-Zverbose</code>)</p>",
        "id": 232951751,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617397495
    },
    {
        "content": "<p>Well, the ty in the list has </p>\n<div class=\"codehilite\"><pre><span></span><code>Binder(\n            Trait(\n                std::future::Future,\n            ),\n            [],\n        )\n</code></pre></div>",
        "id": 232951820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617397525
    },
    {
        "content": "<p>Whereas the <code>decl_ty</code> has</p>\n<div class=\"codehilite\"><pre><span></span><code>Binder(\n            Trait(\n                std::future::Future,\n            ),\n            [\n                Region(\n                    BrAnon(0),\n                ),\n            ],\n        )\n</code></pre></div>",
        "id": 232951884,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617397548
    },
    {
        "content": "<p>So first off, why the heck is this <em>not</em> getting printed</p>",
        "id": 232952071,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617397636
    },
    {
        "content": "<p>second, the heck</p>",
        "id": 232952085,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617397648
    },
    {
        "content": "<p>Okay, so the bound vars aren't getting printed because pretty printing searches through the type to find bound vars</p>",
        "id": 232952687,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617397941
    },
    {
        "content": "<p>which there are none</p>",
        "id": 232952700,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617397947
    },
    {
        "content": "<p>Alright so when when we \"see\" the generator to generate witnesses, there is</p>\n<div class=\"codehilite\"><pre><span></span><code>std::boxed::Box&lt;(dyn for&lt;&#39;r&gt; std::future::Future&lt;for&lt;&#39;s&gt; Output = ()&gt; + std::marker::Unpin + ReStatic)&gt;\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code>std::boxed::Box&lt;(dyn for&lt;&#39;r&gt; std::future::Future&lt;for&lt;&#39;s&gt; Output = ()&gt; + std::marker::Unpin + &#39;_#6r)&gt;\n</code></pre></div>",
        "id": 232959012,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617402346
    },
    {
        "content": "<p>But the type in the witness ends up </p>\n<div class=\"codehilite\"><pre><span></span><code>std::boxed::Box&lt;(dyn std::future::Future&lt;Output = ()&gt; + std::marker::Unpin + ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrNamed(&#39;t0) }))&gt;\n</code></pre></div>",
        "id": 232959063,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617402367
    },
    {
        "content": "<p>i.e. we're losing the binders</p>",
        "id": 232959084,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617402381
    },
    {
        "content": "<p>Sidenote, I don't know if there's a better way to do this, but I really wish there was a flag to tell <code>compiletest</code> to <em>not</em> truncate the stderr</p>",
        "id": 232960258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617403286
    },
    {
        "content": "<p>Sometimes I just want to see everything</p>",
        "id": 232960269,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617403295
    },
    {
        "content": "<p><code>YES_I_KNOW_ITS_ALOT_JUST_PRINT_EVERYTHING=yes</code></p>",
        "id": 232960394,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617403396
    },
    {
        "content": "<p>Welp</p>",
        "id": 232961194,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617404080
    },
    {
        "content": "<p><code>anonymize_late_bound_regions</code></p>",
        "id": 232961198,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617404082
    },
    {
        "content": "<p>Ignores existing bound vars</p>",
        "id": 232961216,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617404101
    },
    {
        "content": "<p>Sorry, am back looking at this again now too</p>",
        "id": 232962156,
        "sender_full_name": "eggyal",
        "timestamp": 1617404779
    },
    {
        "content": "<p>That's okay, I have a fix</p>",
        "id": 232962175,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617404801
    },
    {
        "content": "<p>:)  Ah, great.</p>",
        "id": 232962255,
        "sender_full_name": "eggyal",
        "timestamp": 1617404860
    },
    {
        "content": "<p>At least I think it's a fix</p>",
        "id": 232962263,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617404867
    },
    {
        "content": "<p>Just about to build/test</p>",
        "id": 232962267,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617404873
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0282]: type annotations needed\n    --&gt; library/alloc/src/string.rs:1226:31\n     |\n1226 |     pub fn remove_matches&lt;&#39;a, P&gt;(&amp;&#39;a mut self, pat: P)\n     |                               ^ cannot infer type for type parameter `P`\n\nerror: aborting due to previous error\n</code></pre></div>",
        "id": 232963579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617405882
    },
    {
        "content": "<p>Okay so maybe this isn't correct</p>",
        "id": 232963592,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617405893
    },
    {
        "content": "<p>maybe I made a mistake in my implementation</p>",
        "id": 232963619,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617405906
    },
    {
        "content": "<p>I keep coming to the <code>skip_binder()</code> in <code>replace_late_bound_regions</code>... but I readily confess I'm not as close to this as you are, Jack...</p>",
        "id": 232963668,
        "sender_full_name": "eggyal",
        "timestamp": 1617405954
    },
    {
        "content": "<p>What about it?</p>",
        "id": 232963750,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617406021
    },
    {
        "content": "<p>No, sorry, ignore that.  I'm getting myself in a muddle.</p>",
        "id": 232964117,
        "sender_full_name": "eggyal",
        "timestamp": 1617406347
    },
    {
        "content": "<p>No worries</p>",
        "id": 232964127,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617406357
    },
    {
        "content": "<p>I need to take a break and think</p>",
        "id": 232964140,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617406374
    },
    {
        "content": "<p>Here's where I'm at: what exactly is the expected behavior for <code>anonymize_late_bound_regions</code></p>",
        "id": 232964209,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617406430
    },
    {
        "content": "<p>First, does it \"anonymize\" the binders? Or just the lifetimes within</p>",
        "id": 232964356,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617406534
    },
    {
        "content": "<p>Next, does it anonymize the same lifetime seen multiple times to the same anonymous lifetime or multiple?</p>",
        "id": 232964357,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617406534
    },
    {
        "content": "<p>Okay, so back looking at this</p>",
        "id": 233016254,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617466845
    },
    {
        "content": "<p>I think this fundamentally is caused by a subtle problem:</p>",
        "id": 233016289,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617466865
    },
    {
        "content": "<p>There's a couple different ways we can \"erase regions\"</p>",
        "id": 233016301,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617466890
    },
    {
        "content": "<p>The default <code>erase_regions</code> visits regions that <em>aren't</em> late bound and replaces them with <code>ReErased</code> <em>but also</em> recursively calls <code>anonymize_late_bound_regions</code> when we see a <code>Binder</code></p>",
        "id": 233016434,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617467047
    },
    {
        "content": "<p>But there's also <code>erase_late_bound_regions</code>, which replaces late-bound regions with <code>ReErased</code>, but <em>doesn't</em> \"recurse\" in the sense that it \"anonymizes\" Binders</p>",
        "id": 233016546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617467185
    },
    {
        "content": "<p>This is sort of tricky because of the questions I raised before about how <code>anonymize_late_bound_regions</code> should work</p>",
        "id": 233016575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617467242
    },
    {
        "content": "<p>And a fundamental question: should <code>for&lt;'a&gt; fn() -&gt; ()</code> equal <code>fn() -&gt; ()</code></p>",
        "id": 233016581,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617467264
    },
    {
        "content": "<p>But you can imagine that's somewhat extended to <code>for&lt;'a&gt; fn(&amp;'a ())</code> and <code>for&lt;'b&gt; fn(&amp;'b ())</code></p>",
        "id": 233016648,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617467348
    },
    {
        "content": "<p>Okay well this was a rabbit I didn't need to fall down</p>",
        "id": 233022033,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473279
    },
    {
        "content": "<p>(I think this might still be relevant at some point though)</p>",
        "id": 233022074,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473294
    },
    {
        "content": "<p>Let's back up</p>",
        "id": 233022081,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473299
    },
    {
        "content": "<p><code>F: Fn(&amp;()) -&gt; Box&lt;dyn Future&lt;Output = ()&gt; + Unpin&gt;</code></p>",
        "id": 233022086,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473308
    },
    {
        "content": "<p><code>std::boxed::Box&lt;(dyn for&lt;'r&gt; std::future::Future&lt;for&lt;'s&gt; Output = ()&gt; + std::marker::Unpin + ReStatic)&gt;</code></p>",
        "id": 233022123,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473329
    },
    {
        "content": "<p>Where did that <code>'r</code> and <code>'s</code> come from?</p>",
        "id": 233022126,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473342
    },
    {
        "content": "<p>That isn't right</p>",
        "id": 233022130,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473345
    },
    {
        "content": "<p>I made a mistake with my \"concatenate bound vars in nested trait refs\" implementation</p>",
        "id": 233022269,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473511
    },
    {
        "content": "<p>When we get to the <code>for&lt;?&gt; Future</code> trait ref</p>",
        "id": 233022339,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473574
    },
    {
        "content": "<p>We try to see if we're in a nested trait ref, so we backup and find the <code>for&lt;'_&gt; Fn(&amp;())</code> trait ref</p>",
        "id": 233022361,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473609
    },
    {
        "content": "<p>which isn't right</p>",
        "id": 233022368,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473624
    },
    {
        "content": "<p>Okay, so breaking early when we see a <code>Elision</code> or <code>ObjectLifetimeDefault</code> scope fixes it</p>",
        "id": 233022518,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473764
    },
    {
        "content": "<p>which was an...easy fix</p>",
        "id": 233022534,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473770
    },
    {
        "content": "<p>Just have to think a little bit</p>",
        "id": 233022543,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473778
    },
    {
        "content": "<p>and run all tests</p>",
        "id": 233022549,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473790
    },
    {
        "content": "<p>welp, nope</p>",
        "id": 233022562,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473803
    },
    {
        "content": "<p>okay, be back in a bit</p>",
        "id": 233022588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617473836
    },
    {
        "content": "<p>back</p>",
        "id": 233023901,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617475183
    },
    {
        "content": "<p>I was just reading <a href=\"https://rustc-dev-guide.rust-lang.org/early-late-bound.html#late-bound-parameters\">https://rustc-dev-guide.rust-lang.org/early-late-bound.html#late-bound-parameters</a> and noticed that it says</p>\n<blockquote>\n<p>The Binder doesn't know how many variables there are at that binding level. This can only be determined by walking the type itself and collecting them. So a type like for&lt;'a, 'b&gt; ('a, 'b) would be for (^0.a, ^0.b). Here, we just write for because we don't know the names of the things bound within.<br>\n[...]<br>\nThis setup of not knowing the full set of variables at a binding level has some advantages and some disadvantages. The disadvantage is that you must walk the type to find out what is bound at the given level and so forth. The advantage is primarily that, when constructing types from Rust syntax, if we encounter anonymous regions like in fn(&amp;u32), we just create a fresh index and don't have to update the binder.</p>\n</blockquote>\n<p>Is this still true after the binder refactor, or does it need to be updated?</p>",
        "id": 233042116,
        "sender_full_name": "Noah Lev",
        "timestamp": 1617494205
    },
    {
        "content": "<p>Needs to be updated :)</p>",
        "id": 233046099,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617499005
    },
    {
        "content": "<p>Thanks! Opened an issue: <a href=\"https://github.com/rust-lang/rustc-dev-guide/issues/1105\">rustc-dev-guide#1105</a>.</p>",
        "id": 233047194,
        "sender_full_name": "Noah Lev",
        "timestamp": 1617500308
    },
    {
        "content": "<p>(marking this topic as read; you'll have to catch me up)</p>",
        "id": 233169174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617627939
    },
    {
        "content": "<p>Works for me</p>",
        "id": 233169276,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617628003
    }
]