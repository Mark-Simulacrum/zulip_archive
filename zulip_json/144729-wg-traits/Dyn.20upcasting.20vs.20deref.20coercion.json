[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/89190\">#89190</a> gives code that compiles in stable but does not in beta, and involves trait upcasting.</p>\n<p>In stable it is currently deref coercion, and it now becomes an upcasting coercion. How can we resolve this? Unsizing coercion takes priority over deref coercion and I think it's very reasonable since unsizing can only be done via coercion while deref can be explicit. We could \"hide\" upcasting coercion if the feature is not enabled so the code won't break, but then when we stablise this feature it'll become a behaviour change.</p>",
        "id": 254461534,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632357158
    },
    {
        "content": "<p>Oh dear! :)</p>",
        "id": 254595946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632427423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span> is this a hypothetical regression or something from a real code base?</p>",
        "id": 254595969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632427439
    },
    {
        "content": "<p>I am not the original poster :)</p>\n<p>I hope it's not from a real code base; it it was, then it might actually be mimicking trait upcasting so replacing it with trait upcasting might work. But I guess we might need a crater run to find out.</p>",
        "id": 254596286,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632427560
    },
    {
        "content": "<p>I'm quite curious how that deref could be implemented though...</p>",
        "id": 254598479,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632428427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Dyn.20upcasting.20vs.20deref.20coercion/near/254595969\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> is this a hypothetical regression or something from a real code base?</p>\n</blockquote>\n<p>Yes and no, I'm more or less about to publish the crate where I ran across this (days, likely), but I've also put a workaround in there already because I need to debug some derive macros with <code>cargo expand</code>. (I'm exposing <code>Ord</code> and <code>Eq</code> on trait objects of one trait object type that derefs into another trait object type that's only <code>Eq</code> that in turns derefs into another that's neither, and they're also a trait dependency chain.)</p>",
        "id": 254600381,
        "sender_full_name": "Tamme Schichler",
        "timestamp": 1632429181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Dyn.20upcasting.20vs.20deref.20coercion/near/254596286\">said</a>:</p>\n<blockquote>\n<p>I am not the original poster :)</p>\n<p>I hope it's not from a real code base; it it was, then it might actually be mimicking trait upcasting so replacing it with trait upcasting might work. But I guess we might need a crater run to find out.</p>\n</blockquote>\n<p>It's mimicking trait upcasting in this case, or rather it <em>should</em>. Consumers can implement it differently, though.<br>\nIt may be possible to lock this down more. I'll have to think about it, but it would likely involve additional marker traits.</p>",
        "id": 254601645,
        "sender_full_name": "Tamme Schichler",
        "timestamp": 1632429673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Dyn.20upcasting.20vs.20deref.20coercion/near/254598479\">said</a>:</p>\n<blockquote>\n<p>I'm quite curious how that deref could be implemented though...</p>\n</blockquote>\n<p><a href=\"https://github.com/Tamschi/fruit-salad/blob/develop/src/lib.rs#L352-L361\">https://github.com/Tamschi/fruit-salad/blob/develop/src/lib.rs#L352-L361</a> Is the implementation, so it's really just deferring that to the actual trait implementation there. (I've got some left-over <code>mem::transmute</code>s in there, I think. I'll go over this again later on, once all my tests compile.)<br>\n<a href=\"https://github.com/Tamschi/fruit-salad/blob/develop/src/lib.rs#L374\">https://github.com/Tamschi/fruit-salad/blob/develop/src/lib.rs#L374</a> (for example) is where I ran across the bug. The second <code>.as_dyncast_eq()</code> is unnecessary on stable.</p>",
        "id": 254602790,
        "sender_full_name": "Tamme Schichler",
        "timestamp": 1632430175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Dyn.20upcasting.20vs.20deref.20coercion/near/254598479\">said</a>:</p>\n<blockquote>\n<p>I'm quite curious how that deref could be implemented though...</p>\n</blockquote>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9c804746d53218d5762c9b0e04dff5b6\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9c804746d53218d5762c9b0e04dff5b6</a> Here you go, a working dyn upcast emulation :)</p>",
        "id": 254603160,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632430312
    },
    {
        "content": "<p>Using a technique that I discovered ~1 month ago about how to add default impl that has Sized bound without making the method non-object-safe ;)</p>",
        "id": 254603586,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632430454
    },
    {
        "content": "<p>Ah interesting</p>",
        "id": 254603643,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632430487
    },
    {
        "content": "<p>I figured it was going to be something like that</p>",
        "id": 254603657,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632430494
    },
    {
        "content": "<p>Oops, I named it downcast but it's actually upcast (fixed)</p>",
        "id": 254603770,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632430557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Dyn.20upcasting.20vs.20deref.20coercion/near/254603160\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Dyn.20upcasting.20vs.20deref.20coercion/near/254598479\">said</a>:</p>\n<blockquote>\n<p>I'm quite curious how that deref could be implemented though...</p>\n</blockquote>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9c804746d53218d5762c9b0e04dff5b6\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9c804746d53218d5762c9b0e04dff5b6</a> Here you go, a working dyn upcast emulation :)</p>\n</blockquote>\n<p>This works extremely well for my crate. Is it okay if I credit you for the idea (in a source code comment) by GitHub username and a link to this message? (I've adapted it a bit to use a private generic trait, since I need this for multiple traits.)</p>",
        "id": 254608666,
        "sender_full_name": "Tamme Schichler",
        "timestamp": 1632432616
    },
    {
        "content": "<p>Still not entirely airtight, but it's less convenient to implement this otherwise now.</p>",
        "id": 254608811,
        "sender_full_name": "Tamme Schichler",
        "timestamp": 1632432686
    },
    {
        "content": "<p>Sure</p>",
        "id": 254615734,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632436191
    },
    {
        "content": "<p>Thanks for pointing this out!</p>",
        "id": 254650009,
        "sender_full_name": "Charles Lew",
        "timestamp": 1632458452
    },
    {
        "content": "<p>I'm not totally familiar with the procedure here...  Should we start a crater run to address the back-compat-breakage scope first?</p>",
        "id": 254650747,
        "sender_full_name": "Charles Lew",
        "timestamp": 1632459079
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> we should decide whether we want to fix it first :)</p>",
        "id": 255049264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632749961
    },
    {
        "content": "<p>Ok... I have a branch that converts this into a future incompat lint. If a future-incompat lint is the way to go here, i can finish the implementation and submit it this weekend.</p>",
        "id": 255370074,
        "sender_full_name": "Charles Lew",
        "timestamp": 1632908650
    },
    {
        "content": "<p>Personally i'd prefer to discourage people using this trick... A future incompatible lint can provide smooth migration, but i fear this actually advocates people using this trick...</p>",
        "id": 255370896,
        "sender_full_name": "Charles Lew",
        "timestamp": 1632909062
    },
    {
        "content": "<p>Why is it future incompatible? The code using this trick will still compile with <code>#![feature(trait_upcasting)]</code>/after its stabilization. It just will silently stop calling the <code>deref</code> (and that shouldn't be a problem for reasonable deref implementations).</p>",
        "id": 255371605,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1632909407
    },
    {
        "content": "<p>I'm just not sure what people might do in <code>deref</code> and <code>deref_mut</code>s... Maybe i'm more prudent than necessary...</p>",
        "id": 255375034,
        "sender_full_name": "Charles Lew",
        "timestamp": 1632911136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"273349\">Waffle Lapkin</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Dyn.20upcasting.20vs.20deref.20coercion/near/255371605\">said</a>:</p>\n<blockquote>\n<p>Why is it future incompatible? The code using this trick will still compile with <code>#![feature(trait_upcasting)]</code>/after its stabilization. It just will silently stop calling the <code>deref</code> (and that shouldn't be a problem for reasonable deref implementations).</p>\n</blockquote>\n<p>This is a behaviour change, so I think a future incompat lint is a good idea.</p>",
        "id": 255485814,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632954468
    },
    {
        "content": "<p>created <a href=\"https://github.com/rust-lang/rust/pull/89461\">https://github.com/rust-lang/rust/pull/89461</a></p>",
        "id": 255864501,
        "sender_full_name": "Charles Lew",
        "timestamp": 1633174617
    }
]