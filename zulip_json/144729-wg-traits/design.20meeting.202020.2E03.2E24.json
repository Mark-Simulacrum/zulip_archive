[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 191663614,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585079629
    },
    {
        "content": "<p>~7 minutes to meeting</p>",
        "id": 191663625,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585079634
    },
    {
        "content": "<p>Announcement: Today ends the first sprint of 2020 :)</p>",
        "id": 191663695,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585079657
    },
    {
        "content": "<p>Link to Hackmd of meeting agenda/planning: <a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\" target=\"_blank\" title=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\">https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both</a></p>",
        "id": 191663730,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585079684
    },
    {
        "content": "<p>here</p>",
        "id": 191664457,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585080017
    },
    {
        "content": "<p>Okay, <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> meeting time :)</p>",
        "id": 191664596,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080079
    },
    {
        "content": "<p>Ah there you are niko</p>",
        "id": 191664778,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080185
    },
    {
        "content": "<p>Forgot to <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 191664818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080215
    },
    {
        "content": "<p>I'm skimming over the agenda</p>",
        "id": 191664829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080222
    },
    {
        "content": "<p>Anyways, so since today is the last day of the sprint, I figured we should start by going over what we accomplished?</p>",
        "id": 191664883,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080244
    },
    {
        "content": "<p>Great idea :)</p>",
        "id": 191664891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080250
    },
    {
        "content": "<p>It feels like we did a lot</p>",
        "id": 191664899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080260
    },
    {
        "content": "<p>So let's see: (feel free to start listing things)</p>",
        "id": 191664905,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080268
    },
    {
        "content": "<p>Yes, we did</p>",
        "id": 191664910,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080271
    },
    {
        "content": "<p>Looking over the <a href=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\" target=\"_blank\" title=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\">skill tree</a></p>",
        "id": 191664921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080279
    },
    {
        "content": "<p>Things that <em>I</em> did:</p>",
        "id": 191664932,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080286
    },
    {
        "content": "<ul>\n<li>Added <code>&amp;self</code> to intern methods (<span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>)</li>\n</ul>",
        "id": 191664933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080286
    },
    {
        "content": "<ul>\n<li>Added <code>&amp;self</code> to data methods (<span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>, <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span>)</li>\n</ul>",
        "id": 191664944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080291
    },
    {
        "content": "<ul>\n<li>Progress towards adapt rustc to debruijn model (<span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>)</li>\n</ul>",
        "id": 191664991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080322
    },
    {
        "content": "<ul>\n<li>Prototype and evaluation underway for recursive solver (<span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>)</li>\n</ul>",
        "id": 191665020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080345
    },
    {
        "content": "<ul>\n<li>Initial PR towards impl trait (<span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>), pending some improvements</li>\n</ul>",
        "id": 191665032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080359
    },
    {
        "content": "<ul>\n<li>Exploratory rustc-chalk integration MVP (<span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>)</li>\n</ul>",
        "id": 191665120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080402
    },
    {
        "content": "<ul>\n<li>A bit of work to make chalk-engine more <code>UnwindSafe</code></li>\n<li>Removed <code>lalrpop-intern</code>as a default dependency of <code>chalk-ir</code></li>\n<li>Initial work in Chalk to get it to build in rustc</li>\n</ul>",
        "id": 191665122,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080406
    },
    {
        "content": "<p>Not sure what the status of the tracing work is</p>",
        "id": 191665141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080421
    },
    {
        "content": "<ul>\n<li>Lots of work on the book :)</li>\n</ul>",
        "id": 191665160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span></p>",
        "id": 191665183,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080448
    },
    {
        "content": "<p>tracing seems to be somewhat working</p>",
        "id": 191665193,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080458
    },
    {
        "content": "<p>see screenshot here: <a href=\"#narrow/stream/144729-wg-traits/topic/tracing.20in.20chalk/near/190618258\" title=\"#narrow/stream/144729-wg-traits/topic/tracing.20in.20chalk/near/190618258\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/tracing.20in.20chalk/near/190618258</a></p>",
        "id": 191665217,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080477
    },
    {
        "content": "<p>side note that I was trying to develop chalk on my windows machine using VSCode, and one of the main obstacles I encountered was that powershell doesn't make it easy to set env variables :) not sure if tracing helps at all there, I guess prob not</p>",
        "id": 191665268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080494
    },
    {
        "content": "<p>interesting</p>",
        "id": 191665354,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080553
    },
    {
        "content": "<p>I just use wsl</p>",
        "id": 191665384,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080567
    },
    {
        "content": "<p>I went back to emacs and wsl for now</p>",
        "id": 191665421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080593
    },
    {
        "content": "<p>So, yes, we did a lot this sprint</p>",
        "id": 191665496,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080620
    },
    {
        "content": "<p>good job everyone :)</p>",
        "id": 191665504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080623
    },
    {
        "content": "<p>So, I think we agreed last week that we should write a blog post to go out sometime this week</p>",
        "id": 191665605,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080694
    },
    {
        "content": "<p>then start the next sprint next week</p>",
        "id": 191665612,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080701
    },
    {
        "content": "<p>tracing can set filters without using env variables</p>",
        "id": 191665617,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585080706
    },
    {
        "content": "<p>i mean you still need to pick a way to do inputs but its not hard to avoid that specific hurdle</p>",
        "id": 191665683,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585080724
    },
    {
        "content": "<p>the main problem is that we have to get the info from <code>x.py test</code> down</p>",
        "id": 191665696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080733
    },
    {
        "content": "<p>s/to do inputs/to provide input/</p>",
        "id": 191665706,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585080736
    },
    {
        "content": "<p>anyway, not imp't :)</p>",
        "id": 191665707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080736
    },
    {
        "content": "<p>secretly I'm glad for an excuse to go back to emacs, though vscode is nice</p>",
        "id": 191665729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080750
    },
    {
        "content": "<p>mk</p>",
        "id": 191665730,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585080751
    },
    {
        "content": "<p>lol</p>",
        "id": 191665745,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585080759
    },
    {
        "content": "<p>you can use vscode remote with wsl</p>",
        "id": 191665761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080771
    },
    {
        "content": "<p>works really well tbh</p>",
        "id": 191665767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080776
    },
    {
        "content": "<p>re: tracing—I might need to work with jane (or anyone!) to get some semantically meaningful data out. I feel like what i have is much too noisy, and I have difficulty saying <em>what</em> should be emitted.</p>",
        "id": 191665769,
        "sender_full_name": "David Barsky",
        "timestamp": 1585080777
    },
    {
        "content": "<p>(or just vscode with wsl terminal)</p>",
        "id": 191665788,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E24/near/191665605\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E24/near/191665605\">said</a>:</p>\n<blockquote>\n<p>So, I think we agreed last week that we should write a blog post to go out sometime this week</p>\n</blockquote>\n<p>that seems ideal -- I guess it would highlight the work that was done and talk about our upcoming goals</p>",
        "id": 191665795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080790
    },
    {
        "content": "<p>there were also a few folks who jumped in recently saying they were interested in helping out</p>",
        "id": 191665833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080819
    },
    {
        "content": "<p>Do you want to write that? (At least the initial draft) or do you want me to</p>",
        "id": 191665848,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080826
    },
    {
        "content": "<p>Oh yeah, lots of interest</p>",
        "id": 191665864,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080836
    },
    {
        "content": "<p>Either way is ok, I think I could bang something out, I'm more interested in discussing <em>now</em> what those goals should be</p>",
        "id": 191665917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080843
    },
    {
        "content": "<p>Speaking of which, someone should respond to <a href=\"https://github.com/rust-lang/chalk/issues/333\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/333\">https://github.com/rust-lang/chalk/issues/333</a></p>",
        "id": 191665937,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080857
    },
    {
        "content": "<p>ah, I just came up with \"yet another\" place I sort of wanted that</p>",
        "id": 191665985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080894
    },
    {
        "content": "<p>Right, so I just started listing some things that came to mind in the hackmd doc</p>",
        "id": 191665994,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080904
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span>   * Rustc ty refactor/librarification\n        * the design \n        * Proposed path is to start by adjusting the `Ty` API, e.g., changing `ty.kind` to `ty.kind(tcx)`.\n        * Compare names of things in rustc \n        * Might be simple enough to start moving some things from `rustc::ty` to a separate in-tree crate, as-is\n            * `Ty`, `TypeFolder`, `TypeVisitor`\n    * rustc `Predicate` refactor?\n        * Niko - post a short description\n    * Rustc integration\n        * &quot;MVP&quot;?\n        * Builtin traits\n        * Fn and closures\n        * Refactoring debruijn indices\n            * There is ongoing work on the chalk side\n            * And [some changes on the rustc side](https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/debruijn.20indices.20and.20bound.20variables.20chalk.23334/near/191636362)\n        * Params?\n    * Performance? (very open-ended)\n        * Benchmarks\n        * Tracing\n        * Memory usage\n        * Creating a .chalk from a given program for reproducing\n</pre></div>\n\n\n</blockquote>",
        "id": 191666046,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585080936
    },
    {
        "content": "<p>Also some of these: <a href=\"https://paper.dropbox.com/doc/wg-traits-2020-sprint-planning--AwyHYhIF7xYmKXYdUxYJaEk4Ag-SSt74TfcovdnKKhZNyzeW\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/wg-traits-2020-sprint-planning--AwyHYhIF7xYmKXYdUxYJaEk4Ag-SSt74TfcovdnKKhZNyzeW\">https://paper.dropbox.com/doc/wg-traits-2020-sprint-planning--AwyHYhIF7xYmKXYdUxYJaEk4Ag-SSt74TfcovdnKKhZNyzeW</a></p>",
        "id": 191666170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081001
    },
    {
        "content": "<p>might still be relevant</p>",
        "id": 191666178,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081005
    },
    {
        "content": "<p>so</p>",
        "id": 191666255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081045
    },
    {
        "content": "<p>I think working towards the rustc integration MVP is a good \"meta goal\" -- I am also somewhat motivated by the work to extract a rustc type library, I think that those kind of overlap in some cases</p>",
        "id": 191666364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081091
    },
    {
        "content": "<p>for rustc MVP integration purposes, I am imagining that we want to basically \"spike\" through to get some very simple tests working</p>",
        "id": 191666424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081133
    },
    {
        "content": "<p>e.g.</p>",
        "id": 191666434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081136
    },
    {
        "content": "<p>I actually don't think they overlap, in practice</p>",
        "id": 191666453,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081146
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">generic</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">generic</span>::<span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191666474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E24/near/191666453\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E24/near/191666453\">said</a>:</p>\n<blockquote>\n<p>I actually don't think they overlap, in practice</p>\n</blockquote>\n<p>the debruijn work, at least, seems to me to overlap</p>",
        "id": 191666491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081174
    },
    {
        "content": "<p>(also, in my branch a couple of the -Z chalk tests do pass)</p>",
        "id": 191666499,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081184
    },
    {
        "content": "<p>although, maybe not</p>",
        "id": 191666507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081193
    },
    {
        "content": "<p>Well, I guess intially they don't really overlap</p>",
        "id": 191666569,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081205
    },
    {
        "content": "<p>Of course, later on they will</p>",
        "id": 191666581,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081213
    },
    {
        "content": "<p>(that is, if we eagerly convert <code>Ty</code> to <code>&amp;TyData</code>, as we talked about earlier, the debruijn work isn't really a dependency)</p>",
        "id": 191666583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081215
    },
    {
        "content": "<p>since you can convert the rustc style types to chalk style</p>",
        "id": 191666622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081234
    },
    {
        "content": "<p>without changing the chalk side</p>",
        "id": 191666634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081240
    },
    {
        "content": "<p>But I was sort of thinking that the initial step would be to extract out the pieces that <em>would go</em> into the library out first</p>",
        "id": 191666637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081243
    },
    {
        "content": "<p>even if what that library looks like is very different right now</p>",
        "id": 191666698,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081270
    },
    {
        "content": "<p>do you mean in rustc?</p>",
        "id": 191666714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081278
    },
    {
        "content": "<p>I'm not sure I'd start there</p>",
        "id": 191666716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081280
    },
    {
        "content": "<p>then bit-by-bit, we can refactor</p>",
        "id": 191666717,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081280
    },
    {
        "content": "<p>yes</p>",
        "id": 191666721,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081282
    },
    {
        "content": "<p>oh</p>",
        "id": 191666743,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081294
    },
    {
        "content": "<p>I'm debating :)</p>",
        "id": 191666756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081300
    },
    {
        "content": "<p>the reason is</p>",
        "id": 191666760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081303
    },
    {
        "content": "<p>right now, I think a lot of the definitions are quite tied to <code>tcx</code> and there's no convenient way to separate that out</p>",
        "id": 191666785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081318
    },
    {
        "content": "<p>at least for inherent methods</p>",
        "id": 191666831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081325
    },
    {
        "content": "<p>so if we were going to create a library, it would either have to use more extension traits to add methods, or else include the arena code from rustc</p>",
        "id": 191666898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081355
    },
    {
        "content": "<p>and I don't think we'd want that code in the end</p>",
        "id": 191666921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081365
    },
    {
        "content": "<p>I think it might be better to start by trying to factor the types a bit so that they can be made generic in a transparent way, but I'm not 100% sure</p>",
        "id": 191666946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081381
    },
    {
        "content": "<p>some of that factoring is fairly rote anyway and needs to happen one way or the other</p>",
        "id": 191666968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081393
    },
    {
        "content": "<p>but I do think it'd be a good use of time to start to elaborate the types that <em>would</em> be in there</p>",
        "id": 191667000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081409
    },
    {
        "content": "<p>or <em>should</em></p>",
        "id": 191667008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081412
    },
    {
        "content": "<p>and maybe it is a good use of time to try extacting them, just to get an idea what goes wrong</p>",
        "id": 191667036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081426
    },
    {
        "content": "<p>(i.e., if you pull out this type, you need to pull out that type too, etc)</p>",
        "id": 191667052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081438
    },
    {
        "content": "<p>I think this is probably going to come down to trying it out</p>",
        "id": 191667054,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081439
    },
    {
        "content": "<p>end of the day there is lots of things to attack</p>",
        "id": 191667105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081447
    },
    {
        "content": "<p>exactly</p>",
        "id": 191667112,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081453
    },
    {
        "content": "<p>but I agree it's not blocking MVP integration \"per se\"</p>",
        "id": 191667114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081455
    },
    {
        "content": "<p>so what do you think <em>is</em> blocking that?</p>",
        "id": 191667142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081465
    },
    {
        "content": "<p>we talked about \"builtin traits\"</p>",
        "id": 191667158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081471
    },
    {
        "content": "<p>I think just that</p>",
        "id": 191667175,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081481
    },
    {
        "content": "<p>oh</p>",
        "id": 191667185,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081487
    },
    {
        "content": "<p>which also seems like something that could be parallelized -- <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> was maybe going to do some of the foundational work, right?</p>",
        "id": 191667188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081488
    },
    {
        "content": "<p>well</p>",
        "id": 191667189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081488
    },
    {
        "content": "<blockquote>\n<ul>\n<li>rustc integration: <code>TypeOutlives</code>, <code>RegionOutlives</code>, <code>Subtype</code><br>\n    * <code>*Outlives</code> are <code>WhereClause</code> variants, <code>Subtype</code> is <code>GoalKind</code></li>\n</ul>\n</blockquote>",
        "id": 191667203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081500
    },
    {
        "content": "<p>this is something we need to talk about</p>",
        "id": 191667226,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081515
    },
    {
        "content": "<p>if not here, in the other thread</p>",
        "id": 191667238,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081523
    },
    {
        "content": "<p>but other than builtin traits and that, I think the big thing is just actually writing the <em>correct</em> code to convert rustc types to chalk and back</p>",
        "id": 191667369,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081570
    },
    {
        "content": "<p>ah ok so we need to figure out the \"region integration\" story a bit more, yes, hmm. I have thoughts but I have to sort them out a bit maybe. Still, I feel like this is also an area where wec an probably start by cutting some horrible corners :)</p>",
        "id": 191667375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081572
    },
    {
        "content": "<p>well not sure how necessary that is. \"type outlives\" is an  interesting case.</p>",
        "id": 191667474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081628
    },
    {
        "content": "<p>that said, most of that stuff today</p>",
        "id": 191667492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081641
    },
    {
        "content": "<p>is not handled by the \"trait system\" in rustc</p>",
        "id": 191667501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081644
    },
    {
        "content": "<p>it is handled externally</p>",
        "id": 191667505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081647
    },
    {
        "content": "<p>So, the way I'm working around this currently is essentially lowering a <code>ty::Predicate</code> to an <code>Option&lt;QuantifiedWhereClause&gt;</code></p>",
        "id": 191667510,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081649
    },
    {
        "content": "<p>and I imagine we can preserve that</p>",
        "id": 191667512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081650
    },
    {
        "content": "<p>or <code>GoalData</code></p>",
        "id": 191667538,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081665
    },
    {
        "content": "<p>basically, sort of hacking around this</p>",
        "id": 191667609,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081685
    },
    {
        "content": "<p>yeah, so, let's discuss in a bit more detail later, but I guess it suffices for now that \"outlives integration\" is a bullet</p>",
        "id": 191667709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081730
    },
    {
        "content": "<p>yes</p>",
        "id": 191667786,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081764
    },
    {
        "content": "<p>what I'll say real briefly is that what rustc does <em>today</em> (which isn't <em>quite</em> what I think chalk wants to do long term) is to basically pass those outlives obligations out; this is what chalk calls \"region constraints\" today. We could generalize that notion</p>",
        "id": 191667789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081767
    },
    {
        "content": "<p>So basically the answer you get back would include some region cosntraints</p>",
        "id": 191667812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081775
    },
    {
        "content": "<p>the challenge here is that we'll have to translate those types <em>back</em> to rustc types</p>",
        "id": 191667829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081785
    },
    {
        "content": "<p>hmm</p>",
        "id": 191667894,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081802
    },
    {
        "content": "<p>I think we could kind of \"ignore\" those region constraints for now, which means we'd be unsound with respect to borrowck, but doesn't interfere with the more interesting things we want to explore</p>",
        "id": 191667917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081809
    },
    {
        "content": "<p>That's what I'm doing</p>",
        "id": 191668013,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081860
    },
    {
        "content": "<p>And longer term I have some thoughts on how chalk should handle things that I talked about with <span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> some time back, I'll have to find the topic</p>",
        "id": 191668020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081862
    },
    {
        "content": "<p>I guess just the question is <em>how</em> to ignore that</p>",
        "id": 191668050,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081872
    },
    {
        "content": "<p>But it may at least mean that \"aligning\" chalk with rustc types is sort of a \"semi blocker\" on doing that stuff right</p>",
        "id": 191668075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081882
    },
    {
        "content": "<p>i.e. to lower <code>DomainGoal</code> to <code>chalk_ir::DomainGoal</code> for those, we really need an \"always true\" DomainGoal</p>",
        "id": 191668145,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081918
    },
    {
        "content": "<p><code>GoalData::All</code></p>",
        "id": 191668275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081962
    },
    {
        "content": "<p>with an empty vector</p>",
        "id": 191668276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081964
    },
    {
        "content": "<p>is always true :)</p>",
        "id": 191668282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081966
    },
    {
        "content": "<p>I do that when I lower to <code>GoalData</code></p>",
        "id": 191668308,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081983
    },
    {
        "content": "<p>oh oh</p>",
        "id": 191668329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081991
    },
    {
        "content": "<p>but trying to lower to <code>DomainGoal</code></p>",
        "id": 191668330,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585081991
    },
    {
        "content": "<p>I see</p>",
        "id": 191668331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585081992
    },
    {
        "content": "<p>so guess I have to move it up a bit</p>",
        "id": 191668352,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082000
    },
    {
        "content": "<p>anyways, with the go-ahead to just ignore those for now, I'll figure it out :)</p>",
        "id": 191668582,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082093
    },
    {
        "content": "<p>(and we can discuss in the separate thread if needed)</p>",
        "id": 191668608,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082103
    },
    {
        "content": "<p>lets go back to things to do for next sprint</p>",
        "id": 191668632,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082120
    },
    {
        "content": "<p>since that seems more important</p>",
        "id": 191668650,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082128
    },
    {
        "content": "<p>agreed</p>",
        "id": 191668796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082189
    },
    {
        "content": "<p>although I think this is relevant</p>",
        "id": 191668814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082197
    },
    {
        "content": "<p>yes, definitely relevant</p>",
        "id": 191668831,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082207
    },
    {
        "content": "<p>so, looking at <a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\" target=\"_blank\" title=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\">the hackmd</a>...</p>",
        "id": 191668857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082215
    },
    {
        "content": "<p>maybe we can add a bit more details</p>",
        "id": 191668913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082244
    },
    {
        "content": "<p>you're saying that some basic tests work with existing branch you have?</p>",
        "id": 191668982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082277
    },
    {
        "content": "<p>yes</p>",
        "id": 191669054,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082296
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// check-pass\n// compile-flags: -Z chalk\n\ntrait Foo {}\n\nstruct Bar {}\n\nimpl Foo for Bar {}\n\nfn main() -&gt; () {\n    let _ = Bar {};\n}\n</pre></div>\n\n\n<p>passes</p>",
        "id": 191669121,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082338
    },
    {
        "content": "<p>ok :)</p>",
        "id": 191669172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082371
    },
    {
        "content": "<p>I've more or less been going through the tests that are there right now and seeing what doesn't work and trying to work through them</p>",
        "id": 191669181,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082377
    },
    {
        "content": "<p>I'm putting some notes about the meaning of \"MVP\"</p>",
        "id": 191669372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082450
    },
    {
        "content": "<ul>\n<li>rustc types are converted to chalk types deeply and eagerly</li>\n<li>region integration is basically ignored, so not sound</li>\n<li>chalk is responsible for generating builtin trait rules, and those may be approximated in some cases</li>\n</ul>",
        "id": 191669390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082460
    },
    {
        "content": "<p>Those all make sense</p>",
        "id": 191669429,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082478
    },
    {
        "content": "<p>I'm not sure if there are other bullet points to add but I think that's helpful in my mind for scoping out \"things we don't plan to solve\"</p>",
        "id": 191669541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082523
    },
    {
        "content": "<p>and we can amend it as we go</p>",
        "id": 191669552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082526
    },
    {
        "content": "<p>the immediate steps we know of then are :</p>",
        "id": 191669562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082530
    },
    {
        "content": "<ul>\n<li>modeling builtin traits</li>\n</ul>",
        "id": 191669570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082533
    },
    {
        "content": "<p>gonna work on that today</p>",
        "id": 191669587,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585082544
    },
    {
        "content": "<p>after this I think</p>",
        "id": 191669612,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585082554
    },
    {
        "content": "<p>it seems like maybe fn and closure types are kind of \"nice to have\"</p>",
        "id": 191669614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082554
    },
    {
        "content": "<p>there is some work on the chalk side of kind of growing our types to accomodate more things though</p>",
        "id": 191669625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082566
    },
    {
        "content": "<p>Ah, so \"const\"</p>",
        "id": 191669666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082591
    },
    {
        "content": "<p>ah yeah, that</p>",
        "id": 191669684,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082600
    },
    {
        "content": "<p>I feel like we can just sort of ignore const, but I think you were pointing out that may be hard, because it appears in some key impls?</p>",
        "id": 191669691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082605
    },
    {
        "content": "<p>So, whenever I see a const, I just substitute as an <code>()</code></p>",
        "id": 191669729,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E24/near/191669625\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E24/near/191669625\">said</a>:</p>\n<blockquote>\n<p>there is some work on the chalk side of kind of growing our types to accomodate more things though</p>\n</blockquote>\n<p>I feel like maybe we should loop this separately, towards the <em>other</em> goal of aligning rustc and chalk types</p>",
        "id": 191669732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082632
    },
    {
        "content": "<p>so yes, just ignoring it</p>",
        "id": 191669734,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E24/near/191669729\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E24/near/191669729\">said</a>:</p>\n<blockquote>\n<p>So, whenever I see a const, I just substitute as an <code>()</code></p>\n</blockquote>\n<p>is this causing any immediate problems?</p>",
        "id": 191669795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082646
    },
    {
        "content": "<p>if not, I'm <em>inclined</em> to say that's \"ok\" for now, though I suspect that doing some sort of const integration wouldn't be too hard, and it might be nic to at least have a goal of having some <em>conversations</em> about how to do it</p>",
        "id": 191669829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082670
    },
    {
        "content": "<p>side note that I think this \"sync up meeting\" is generally working well but those kind of longer form conversations might also be nice to schedule at sprint time</p>",
        "id": 191669865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082695
    },
    {
        "content": "<p>like \"design work for sprint N+1\"</p>",
        "id": 191669898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082704
    },
    {
        "content": "<p>nope</p>",
        "id": 191669902,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082705
    },
    {
        "content": "<p>in fact, I don't even think I need that now that I'm <em>actually</em> limiting the set of matching impls by trait</p>",
        "id": 191669967,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E24/near/191669865\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E24/near/191669865\">said</a>:</p>\n<blockquote>\n<p>side note that I think this \"sync up meeting\" is generally working well but those kind of longer form conversations might also be nice to schedule at sprint time</p>\n</blockquote>\n<p>\"sprint time\" meaning what</p>",
        "id": 191670126,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082804
    },
    {
        "content": "<p>well .. now maybe :)</p>",
        "id": 191670158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082820
    },
    {
        "content": "<p>depends if we want to use this slot of schedule a separate slot</p>",
        "id": 191670185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082837
    },
    {
        "content": "<p>I'm basically just saying that I think \"have a few conversations about const and hopefully sketch out a design for next time\" is a good sprint goal, and it would be resolved by scheduling a time to chat in the next week or two</p>",
        "id": 191670217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585082864
    },
    {
        "content": "<p>oh</p>",
        "id": 191670303,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082899
    },
    {
        "content": "<p>I think that this time slot is probably fine for this?</p>",
        "id": 191670328,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082919
    },
    {
        "content": "<p>I mean, I know a lot of the time for the past few meetings has gone towards sprint planning and such, so maybe it's not so much \"design meeting\", more so \"wg-traits meeting of design,planning,etc.\"</p>",
        "id": 191670430,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585082984
    },
    {
        "content": "<p>we've been using it for differnt things</p>",
        "id": 191670762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083133
    },
    {
        "content": "<p>but we have often done design work</p>",
        "id": 191670779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083143
    },
    {
        "content": "<p>right</p>",
        "id": 191670792,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083152
    },
    {
        "content": "<p>anyway ok so I was editing the hackmd</p>",
        "id": 191670796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083154
    },
    {
        "content": "<p>so, yes, I agree we should schedule a meeting during this sprint to flesh out const design :)</p>",
        "id": 191670835,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083182
    },
    {
        "content": "<p>take a look at <a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?edit\" target=\"_blank\" title=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?edit\">the hackmd</a></p>",
        "id": 191670915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083239
    },
    {
        "content": "<p>if you're not already</p>",
        "id": 191670961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083245
    },
    {
        "content": "<p>yes</p>",
        "id": 191670983,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083259
    },
    {
        "content": "<p>I am</p>",
        "id": 191670989,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083262
    },
    {
        "content": "<p>I elaborated out the builtin traits a bit</p>",
        "id": 191671324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083434
    },
    {
        "content": "<p>I think that <code>Unsize</code> shoudl be out of scope</p>",
        "id": 191671337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083438
    },
    {
        "content": "<p>that's used for coercions like <code>let x: &amp;dyn Debug = &22;</code></p>",
        "id": 191671359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083455
    },
    {
        "content": "<p>i.e., coercing from <code>&amp;i32</code> to <code>&amp;dyn Debug</code></p>",
        "id": 191671374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083462
    },
    {
        "content": "<p>or from <code>&amp;[T; N]</code> to <code>&amp;[T]</code></p>",
        "id": 191671398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083472
    },
    {
        "content": "<p>the rules are kind of complex and I think better left for later</p>",
        "id": 191671410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083481
    },
    {
        "content": "<p>ack</p>",
        "id": 191671459,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585083490
    },
    {
        "content": "<p>I would put the <code>Fn</code> traits as a \"reach goal\"</p>",
        "id": 191671463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083491
    },
    {
        "content": "<p>not <em>so</em> complex but will require us to add some new types for function-defs and closures and bit of other new stuff</p>",
        "id": 191671489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083511
    },
    {
        "content": "<p>so not where I'd start</p>",
        "id": 191671495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I feel like the list of work items is pretty incomplete in that it doesn't really include \"land jack's branch\"</p>",
        "id": 191671550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083549
    },
    {
        "content": "<p>and I'm not 100% sure what's blocking or needed for that, but maybe you want to add some more specific things if you can think of em? It's ok to leave it kind of vague and just have it be assigned to you I think too</p>",
        "id": 191671574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083567
    },
    {
        "content": "<p>We'll have to see how it goes when I try to convert rustc types to Chalk types deeply and eagerly</p>",
        "id": 191671699,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083615
    },
    {
        "content": "<p>that's a clear item I guess</p>",
        "id": 191671721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083627
    },
    {
        "content": "<p>but assuming that \"works\", then I think my branch meets to MVP guidelines</p>",
        "id": 191671748,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083651
    },
    {
        "content": "<p>ok, well, we're at 1:01 hours</p>",
        "id": 191671899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083724
    },
    {
        "content": "<p>True</p>",
        "id": 191671936,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083762
    },
    {
        "content": "<p>quickly</p>",
        "id": 191671944,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083769
    },
    {
        "content": "<p>what are your thoughts on this: <a href=\"#narrow/stream/144729-wg-traits/topic/.22skill.20tree.22/near/190652842\" title=\"#narrow/stream/144729-wg-traits/topic/.22skill.20tree.22/near/190652842\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/.22skill.20tree.22/near/190652842</a></p>",
        "id": 191671959,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083777
    },
    {
        "content": "<p>( I have some secret goals, I wonder if they fit, or if I'm being overly ambitious. )</p>",
        "id": 191671962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083779
    },
    {
        "content": "<p>(I want to hear about secret goals)</p>",
        "id": 191671979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083790
    },
    {
        "content": "<p>Ah, hmm, I forgot about that comment</p>",
        "id": 191671999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083802
    },
    {
        "content": "<p>It seems pretty easy for us to model \"inherent associated types\" if we have the whole alias mechanism truly working</p>",
        "id": 191672032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083827
    },
    {
        "content": "<p>yes</p>",
        "id": 191672052,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083838
    },
    {
        "content": "<p>seems fine to add it as a goal</p>",
        "id": 191672105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083848
    },
    {
        "content": "<p>let me jot it down...</p>",
        "id": 191672117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083859
    },
    {
        "content": "<p>as far as secret goals, well, maybe before that, we didn't talk at all about recursive solver, ambig assoc. types,  etc</p>",
        "id": 191672144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083876
    },
    {
        "content": "<p>Right those</p>",
        "id": 191672164,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083892
    },
    {
        "content": "<p>I didn't mention these because it's not clear how they \"fit\" into everything</p>",
        "id": 191672218,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083924
    },
    {
        "content": "<p>if that makes sense</p>",
        "id": 191672223,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083928
    },
    {
        "content": "<p>like, they are definitely things to work on, but they are somewhat still in the realm of \"trying to work out design\"</p>",
        "id": 191672268,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585083959
    },
    {
        "content": "<p>yeah, I just think we should mention it</p>",
        "id": 191672345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585083996
    },
    {
        "content": "<p>similarly to opaque types</p>",
        "id": 191672364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084006
    },
    {
        "content": "<p>hmm maybe I'll \"treat myself\" to finally exploring <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>'s branch today</p>",
        "id": 191672385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084018
    },
    {
        "content": "<p>I have like 40-50 minutes before I stop working and since I never got around to making my to do list today I'm not skipping anything else ;)</p>",
        "id": 191672422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084043
    },
    {
        "content": "<p>anyway, my secret goals are in some way similar</p>",
        "id": 191672433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084052
    },
    {
        "content": "<p>exploratory I mean</p>",
        "id": 191672453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084064
    },
    {
        "content": "<p>there are two</p>",
        "id": 191672456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084066
    },
    {
        "content": "<p>one of them is that on rustc we need to complete some work on \"removing the leak check\" that I began -- or at least take the next step</p>",
        "id": 191672484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084082
    },
    {
        "content": "<p>I'm honestly not sure if I can mentor that or it's just a work item for me</p>",
        "id": 191672523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084089
    },
    {
        "content": "<p>but it's imporant to helping rustc move towards lazy norm</p>",
        "id": 191672538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084100
    },
    {
        "content": "<p>so I want to put some time into it</p>",
        "id": 191672543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084105
    },
    {
        "content": "<p>the other which is more chalk related is doing the work I wanted to do to explore a new strategy for region integration, one where chalk has a more active role in solving constraints</p>",
        "id": 191672591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084136
    },
    {
        "content": "<p>I remember now that the main \"next step\" I was trying to do there was to do remove \"semantic equality\" in favor of \"syntactic equality\", as we've talked about for some time</p>",
        "id": 191672636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084160
    },
    {
        "content": "<p>and that was <em>fairly close</em></p>",
        "id": 191672642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E24/near/191672636\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E24/near/191672636\">said</a>:</p>\n<blockquote>\n<p>I remember now that the main \"next step\" I was trying to do there was to do remove \"semantic equality\" in favor of \"syntactic equality\", as we've talked about for some time</p>\n</blockquote>\n<p>(is it at all clear what I mean by this?)</p>",
        "id": 191672661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084176
    },
    {
        "content": "<p>I definitely think adding the removing leak check goal isn't a bad idea, I just don't know who else would work on it</p>",
        "id": 191672673,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084181
    },
    {
        "content": "<p>well, it's maybe good in trying to keep me honest, and I really do think we need to make progress on it</p>",
        "id": 191672695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084199
    },
    {
        "content": "<p>syntactic equality also goes along the lines of \"working through design\"</p>",
        "id": 191672744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084207
    },
    {
        "content": "<p>indeed</p>",
        "id": 191672787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084233
    },
    {
        "content": "<p>I think we can probably just remove \"increase chalk perf\" as a goal this time?</p>",
        "id": 191672898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084303
    },
    {
        "content": "<p>though I remain super excited about the idea of extracting a <code>.chalk</code> file</p>",
        "id": 191672912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084313
    },
    {
        "content": "<p>well</p>",
        "id": 191672918,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084316
    },
    {
        "content": "<p>so I put this there</p>",
        "id": 191672927,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084321
    },
    {
        "content": "<p>because I'm trying to think about some Chalk-only things to work on</p>",
        "id": 191672990,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084334
    },
    {
        "content": "<p>for people that are interested in getting involved</p>",
        "id": 191673002,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084344
    },
    {
        "content": "<p>Another piece in there was adding the <code>Visit</code> trait, but that is less of a Goal and more of just a \"good first issue\"</p>",
        "id": 191673097,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084391
    },
    {
        "content": "<p>(I see you <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> )</p>",
        "id": 191673119,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084404
    },
    {
        "content": "<p>yeah I think that fits into the \"align rustc and chalk\" goal</p>",
        "id": 191673123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084405
    },
    {
        "content": "<p>I was going to add it there</p>",
        "id": 191673126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084407
    },
    {
        "content": "<p>and it would be really nice to have :)</p>",
        "id": 191673138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084414
    },
    {
        "content": "<p>Can you attach the link(s) where you talked about region semantic/syntactic equality? I would like to read about that, if possible</p>",
        "id": 191675009,
        "sender_full_name": "Areredify",
        "timestamp": 1585085323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> <a href=\"https://github.com/rust-lang/wg-traits/blob/master/minutes/design-2019-10-16.md\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-traits/blob/master/minutes/design-2019-10-16.md\">this conversation</a> discussed sem vs syn equality</p>",
        "id": 191676142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085986
    }
]