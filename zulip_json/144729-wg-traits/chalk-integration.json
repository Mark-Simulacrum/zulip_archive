[
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the <code>TraitEngine</code> trait uses <code>ty::ParamEnv</code> and <code>ty::Predicate</code>. I'm wondering what would be the best solution to enable the use of our parallel types for chalk <code>traits::Environment</code> and <code>traits::Goal</code></p>",
        "id": 147821927,
        "sender_full_name": "scalexm",
        "timestamp": 1542380658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> hmm</p>",
        "id": 147841789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542398128
    },
    {
        "content": "<p>a good question =)</p>",
        "id": 147841793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542398132
    },
    {
        "content": "<p>maybe <code>TraitEngine</code> approach won't work, seeing how far we've split things</p>",
        "id": 147841801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542398140
    },
    {
        "content": "<p>although almost always</p>",
        "id": 147841868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542398170
    },
    {
        "content": "<p>the <code>PAramEnv</code> comes from a <code>DefId</code></p>",
        "id": 147841870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542398173
    },
    {
        "content": "<p>That was my thought for the param env indeed</p>",
        "id": 147841880,
        "sender_full_name": "scalexm",
        "timestamp": 1542398184
    },
    {
        "content": "<p>maybe we could give it an <code>Option&lt;DefId&gt;</code> or something</p>",
        "id": 147841885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542398188
    },
    {
        "content": "<p>and when it is <code>None</code> we fallback to the old system for now or something, that's quite rare</p>",
        "id": 147841899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542398201
    },
    {
        "content": "<p>translating a predicate to a goal seems easy</p>",
        "id": 147841906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542398212
    },
    {
        "content": "<p>at least...much of the time :)</p>",
        "id": 147841917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542398222
    },
    {
        "content": "<p>We even have a trait for that in <code>librustc_traits</code></p>",
        "id": 147841940,
        "sender_full_name": "scalexm",
        "timestamp": 1542398243
    },
    {
        "content": "<p>Not as clean as I hoped but I guess this will do for a start :)</p>",
        "id": 147841954,
        "sender_full_name": "scalexm",
        "timestamp": 1542398254
    },
    {
        "content": "<p>sounds like a plan</p>",
        "id": 147842063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542398326
    },
    {
        "content": "<p>Is there a list of PRs I can look at to see how we are doing this? This is interesting to me.</p>",
        "id": 147842921,
        "sender_full_name": "blitzerr",
        "timestamp": 1542399135
    },
    {
        "content": "<p>hmm not sure</p>",
        "id": 147846603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542402850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> successfully type-checked the chalk initial program (<a href=\"https://gist.github.com/nikomatsakis/95d11e8112bb80c9e862e0a6800a4dea\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/95d11e8112bb80c9e862e0a6800a4dea\">https://gist.github.com/nikomatsakis/95d11e8112bb80c9e862e0a6800a4dea</a>) with \"-Z chalk\"</p>",
        "id": 148201754,
        "sender_full_name": "scalexm",
        "timestamp": 1542934914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> wooh!</p>",
        "id": 148237004,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542988525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> PR coming up soon? :-D</p>",
        "id": 148237215,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542988790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I’m actually building my work onto one PR which has not landed yet, and another one which isn’t even up yet (because it also builds on the former) lol</p>",
        "id": 148237446,
        "sender_full_name": "scalexm",
        "timestamp": 1542989037
    },
    {
        "content": "<p>plus I think I’d need niko’s universes PR to get region constraints to work properly</p>",
        "id": 148237491,
        "sender_full_name": "scalexm",
        "timestamp": 1542989061
    },
    {
        "content": "<p>I don't even know what \"universes\" are, but fair enough :-)</p>",
        "id": 148239807,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542992080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>  would you mind posting a link to your first integration PR here?</p>",
        "id": 148240676,
        "sender_full_name": "blitzerr",
        "timestamp": 1542993307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> sorry not sure what you meant</p>",
        "id": 148241227,
        "sender_full_name": "scalexm",
        "timestamp": 1542994097
    },
    {
        "content": "<p>my WIP branch can be found here: <a href=\"https://github.com/rust-lang/rust/compare/master...scalexm:chalk\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...scalexm:chalk\">https://github.com/rust-lang/rust/compare/master...scalexm:chalk</a></p>",
        "id": 148241230,
        "sender_full_name": "scalexm",
        "timestamp": 1542994105
    },
    {
        "content": "<p>the beginning of the history is basically <a href=\"https://github.com/rust-lang/rust/pull/55921\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55921\">https://github.com/rust-lang/rust/pull/55921</a></p>",
        "id": 148241246,
        "sender_full_name": "scalexm",
        "timestamp": 1542994136
    },
    {
        "content": "<p>plus some unification things, which I'll push in a separate PR for easier reviewing</p>",
        "id": 148241253,
        "sender_full_name": "scalexm",
        "timestamp": 1542994165
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I’m actually building my work onto one PR which has not landed yet, and another one which isn’t even up yet (because it also builds on the former) lol</p>\n</blockquote>\n<p>Sorry, for the confusion <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> . My comment was related to the above quote of yours. I am guessing that you were referring to your WIP branch. Thanks for the link. <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 148241999,
        "sender_full_name": "blitzerr",
        "timestamp": 1542995304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> list of things that need to be fixed</p>\n<ul>\n<li>apparently <code>WF(ty)</code> predicates cannot error out, when they do I get a <code>bug!(\"* WF predicate not satisfied for ...\")</code>, thoughts?</li>\n<li>typeck pushes <code>Predicate::Subtype</code> obligations, which have no equivalent in<code> chalk-engine</code>; currently I'm relying on the fact that <code>fn unify_parameters</code> is only called with <code>chalk_engine::HhGoal::Unify(_, _)</code> and since we were not using this variant in rustc yet (e.g. no <code>EqGoal</code> or whatever), I'm currently using it to perform sub-typing, but really I think we want <code>chalk_engine::HhGoal::Unify(variance, _, _)</code></li>\n<li>lazy normalization seems to work well in an unnormalized context, but since there are calls to <code>traits::normalize</code> a bit everywhere I cannot even test it with concrete types since the associated types values are resolved even before using the chalk engine :p there seems to be a lot of different ways to normalize associated types currently so I'm not sure which ones I should try to e.g. deactivate in the presence of <code>-Z chalk</code></li>\n<li>I do not handle region constraints yet because I don't know how to deal with <code>DomainGoal::TypeOutlives</code> etc</li>\n</ul>",
        "id": 148743502,
        "sender_full_name": "scalexm",
        "timestamp": 1543439176
    },
    {
        "content": "<p>also the whole setup of creating a <code>ChalkContext</code> etc is not very efficient for now, basically because of coherence but we may discuss that later since at least it works (I have some ideas to fix that)</p>",
        "id": 148743589,
        "sender_full_name": "scalexm",
        "timestamp": 1543439264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> is your chalk integration work existing on a branch?</p>",
        "id": 148749498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543444778
    },
    {
        "content": "<p>is there a PR?</p>",
        "id": 148749499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543444779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <a href=\"https://github.com/rust-lang/rust/compare/master...scalexm:chalk?expand=1\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...scalexm:chalk?expand=1\">https://github.com/rust-lang/rust/compare/master...scalexm:chalk?expand=1</a></p>",
        "id": 148750257,
        "sender_full_name": "scalexm",
        "timestamp": 1543445536
    },
    {
        "content": "<p>no PR yet (waiting on unification PR)</p>",
        "id": 148750259,
        "sender_full_name": "scalexm",
        "timestamp": 1543445543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> sorry, I tried to review yesterday but wasn't up to it. Hoping to do so right now this morning</p>",
        "id": 148787912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543499930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok I'm basically hitting this bug where two answers to one goal have identical substitutions but different lifetime constraints, but actually these lifetime constraints should be identical, it's just the way they are treated in unification that triggers that</p>",
        "id": 148806762,
        "sender_full_name": "scalexm",
        "timestamp": 1543516028
    },
    {
        "content": "<p>so in <code>nll_relate</code> when we see two regions e.g. <code>'?0</code> and <code>'?1</code> we just push two region constraints <code>'?0:  '?1</code> and <code>'?1: '?0</code></p>",
        "id": 148806797,
        "sender_full_name": "scalexm",
        "timestamp": 1543516081
    },
    {
        "content": "<p>but in my case, I have two different ways to prove a goal, say <code>Implemented(T: Sized)</code></p>",
        "id": 148806876,
        "sender_full_name": "scalexm",
        "timestamp": 1543516129
    },
    {
        "content": "<p>I have in my environment: <code>FromEnv(T: Sized)</code>, <code>FromEnv(&amp;Option&lt;T&gt;)</code></p>",
        "id": 148806889,
        "sender_full_name": "scalexm",
        "timestamp": 1543516146
    },
    {
        "content": "<p>both imply <code>Implemented(T: Sized)</code></p>",
        "id": 148806896,
        "sender_full_name": "scalexm",
        "timestamp": 1543516154
    },
    {
        "content": "<p>however when using <code>FromEnv(&amp;Option&lt;T&gt;)</code>, we will basically push two useless region constraints as described above</p>",
        "id": 148806926,
        "sender_full_name": "scalexm",
        "timestamp": 1543516196
    },
    {
        "content": "<p>and in turn the solver believes that there are two different answers</p>",
        "id": 148807019,
        "sender_full_name": "scalexm",
        "timestamp": 1543516224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> er, just saw that</p>",
        "id": 148810274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543518832
    },
    {
        "content": "<p>but I just completed a review of your PR and I had one question <a href=\"https://github.com/rust-lang/rust/pull/56214#discussion_r237620493\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56214#discussion_r237620493\">here</a></p>",
        "id": 148810283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543518840
    },
    {
        "content": "<p>I've got to run now but I'll be back in ~1hr or so and try to read your comments here + respond</p>",
        "id": 148810334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543518857
    },
    {
        "content": "<p>(really have to go now though)</p>",
        "id": 148810343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543518864
    },
    {
        "content": "<blockquote>\n<p>but I just completed a review of your PR and I had one question <a href=\"https://github.com/rust-lang/rust/pull/56214#discussion_r237620493\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56214#discussion_r237620493\">here</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes that was a mistake on my part</p>",
        "id": 148811172,
        "sender_full_name": "scalexm",
        "timestamp": 1543519348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> ok r+</p>",
        "id": 148820433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543526569
    },
    {
        "content": "<p>I .. actually didn't notice if you applied the other nits</p>",
        "id": 148820441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543526577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I did :p</p>",
        "id": 148820484,
        "sender_full_name": "scalexm",
        "timestamp": 1543526609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> related to bullet point number 2 in my above list, I opened <a href=\"https://github.com/rust-lang-nursery/chalk/pull/191\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/pull/191\">https://github.com/rust-lang-nursery/chalk/pull/191</a> in chalk</p>",
        "id": 148821780,
        "sender_full_name": "scalexm",
        "timestamp": 1543527653
    },
    {
        "content": "<p>(also there is <a href=\"https://github.com/rust-lang-nursery/chalk/pull/184\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/pull/184\">https://github.com/rust-lang-nursery/chalk/pull/184</a> which has been there for some time, I had forgotten about it)</p>",
        "id": 148821812,
        "sender_full_name": "scalexm",
        "timestamp": 1543527683
    },
    {
        "content": "<p>bullet points 3 and 4 can be left as follow-up items, as well as my above comments regarding region constraints: I'm basically ignoring all region constraints for now</p>",
        "id": 148823653,
        "sender_full_name": "scalexm",
        "timestamp": 1543529220
    },
    {
        "content": "<p>Regarding bullet point 1, I'm adding a simple error message (\"type ... not well-formed\") for now in the presence of <code>-Z chalk</code></p>",
        "id": 148824979,
        "sender_full_name": "scalexm",
        "timestamp": 1543530545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> <a href=\"https://github.com/rust-lang/rust/pull/56384#pullrequestreview-185739514\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56384#pullrequestreview-185739514\">left a review</a> -- curious to hear your thoughts! Beautiful btw. </p>\n<p>I should probably get a local build going so I can play around with it, actually.</p>",
        "id": 152057479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545078242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so about the def-id I saw this was <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ‘s concern already with the <code>Reveal</code> field or something</p>",
        "id": 152057604,
        "sender_full_name": "scalexm",
        "timestamp": 1545078338
    },
    {
        "content": "<p>well, Reveal is different</p>",
        "id": 152057615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545078350
    },
    {
        "content": "<p>but let me look, are you referring to comments on the PR itself?</p>",
        "id": 152057628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545078362
    },
    {
        "content": "<p>Yes</p>",
        "id": 152057667,
        "sender_full_name": "scalexm",
        "timestamp": 1545078370
    },
    {
        "content": "<p>But I indeed did hit some problems with queries</p>",
        "id": 152057680,
        "sender_full_name": "scalexm",
        "timestamp": 1545078385
    },
    {
        "content": "<p>I don't see any such comments</p>",
        "id": 152057687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545078396
    },
    {
        "content": "<p>Err</p>",
        "id": 152057695,
        "sender_full_name": "scalexm",
        "timestamp": 1545078407
    },
    {
        "content": "<p>the reason I think that the <code>reveal</code> field is different</p>",
        "id": 152057700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545078416
    },
    {
        "content": "<p>Sorry I meant the comment you left</p>",
        "id": 152057705,
        "sender_full_name": "scalexm",
        "timestamp": 1545078419
    },
    {
        "content": "<p>is that indeed the answers to queries are actually <em>different</em></p>",
        "id": 152057713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545078425
    },
    {
        "content": "<p>based on whether things are revealed</p>",
        "id": 152057719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545078430
    },
    {
        "content": "<p>or they could be anyway</p>",
        "id": 152057720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545078433
    },
    {
        "content": "<p>probably I don’t remember</p>",
        "id": 152057753,
        "sender_full_name": "scalexm",
        "timestamp": 1545078479
    },
    {
        "content": "<p>I just remember that eddyb hacked something in a const-related query</p>",
        "id": 152057811,
        "sender_full_name": "scalexm",
        "timestamp": 1545078500
    },
    {
        "content": "<p><code>const_eval</code> / <code>const_eval_raw</code> etc</p>",
        "id": 152057844,
        "sender_full_name": "scalexm",
        "timestamp": 1545078524
    },
    {
        "content": "<p>But anyway yes I agree the def-id is an issue for caching</p>",
        "id": 152057860,
        "sender_full_name": "scalexm",
        "timestamp": 1545078540
    },
    {
        "content": "<p>I saw you were clearing the field in const-related caches</p>",
        "id": 152057871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545078548
    },
    {
        "content": "<p>presumably in part for this reason?</p>",
        "id": 152057877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545078551
    },
    {
        "content": "<p>Yes because otherwise the query was called twice, so it shouldn’t really be an issue <em>but</em> this query emits diagnostics :)</p>",
        "id": 152057955,
        "sender_full_name": "scalexm",
        "timestamp": 1545078603
    },
    {
        "content": "<p>So this was to avoid duplicate errors</p>",
        "id": 152057979,
        "sender_full_name": "scalexm",
        "timestamp": 1545078621
    },
    {
        "content": "<p>Ah and that’s why the query was separated in two halves by eddyb I remember</p>",
        "id": 152057996,
        "sender_full_name": "scalexm",
        "timestamp": 1545078635
    },
    {
        "content": "<p>So that it does not output the error twice when you call it with both <code>Reveal</code> values</p>",
        "id": 152058017,
        "sender_full_name": "scalexm",
        "timestamp": 1545078657
    },
    {
        "content": "<p>About sub-typing I left some comments in a Zulip stream some time ago</p>",
        "id": 152058049,
        "sender_full_name": "scalexm",
        "timestamp": 1545078682
    },
    {
        "content": "<p>But basically: <a href=\"https://github.com/rust-lang-nursery/chalk/pull/191\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/pull/191\">https://github.com/rust-lang-nursery/chalk/pull/191</a></p>",
        "id": 152058075,
        "sender_full_name": "scalexm",
        "timestamp": 1545078707
    },
    {
        "content": "<p>Me using <code>EqGoal</code> to perform sub-typing was just a hack to get things to work</p>",
        "id": 152058131,
        "sender_full_name": "scalexm",
        "timestamp": 1545078724
    },
    {
        "content": "<p>Since we were not using <code>EqGoal</code> in rustc for now</p>",
        "id": 152058152,
        "sender_full_name": "scalexm",
        "timestamp": 1545078744
    },
    {
        "content": "<p>I was planning to rebase when the chalk PR lands</p>",
        "id": 152058162,
        "sender_full_name": "scalexm",
        "timestamp": 1545078756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I gave an example of an issue with region constraints in this stream actually</p>",
        "id": 152059144,
        "sender_full_name": "scalexm",
        "timestamp": 1545079510
    },
    {
        "content": "<p>This message</p>",
        "id": 152059245,
        "sender_full_name": "scalexm",
        "timestamp": 1545079576
    },
    {
        "content": "<p>« <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok I'm basically hitting this bug where two answers to one goal have identical substitutions but different lifetime constraints, but actually these lifetime constraints should be identical, it's just the way they are treated in unification that triggers that »</p>",
        "id": 152059260,
        "sender_full_name": "scalexm",
        "timestamp": 1545079592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> ok I see you are way ahead of me</p>",
        "id": 152060574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545080706
    },
    {
        "content": "<p>shall I land that chalk PR and publish a new version then?</p>",
        "id": 152060588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545080712
    },
    {
        "content": "<p>sorry for being so behind :)</p>",
        "id": 152060591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545080716
    },
    {
        "content": "<p>Lol np</p>",
        "id": 152060606,
        "sender_full_name": "scalexm",
        "timestamp": 1545080735
    },
    {
        "content": "<p>Yes, I’ll rebase my PR to use that chalk PR</p>",
        "id": 152060618,
        "sender_full_name": "scalexm",
        "timestamp": 1545080748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> ok I'm publishing chalk-engine 0.9.0</p>",
        "id": 152061758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545081743
    },
    {
        "content": "<p>in a minute</p>",
        "id": 152061771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545081756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> done</p>",
        "id": 152062898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545082730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I’ll update the PR tomorrow</p>",
        "id": 152199055,
        "sender_full_name": "scalexm",
        "timestamp": 1545240830
    },
    {
        "content": "<p>great, I was not trying to put pressure on you</p>",
        "id": 152199121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545240885
    },
    {
        "content": "<p>was just nothing for my own sanity :)</p>",
        "id": 152199128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545240892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ping</p>",
        "id": 152278318,
        "sender_full_name": "scalexm",
        "timestamp": 1545332189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> png</p>",
        "id": 152564098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545847624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> pong</p>",
        "id": 152564294,
        "sender_full_name": "scalexm",
        "timestamp": 1545847867
    },
    {
        "content": "<p>you rang? :)</p>",
        "id": 152564296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545847881
    },
    {
        "content": "<p>I guess pertaining to your PR perhaps?</p>",
        "id": 152564298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545847888
    },
    {
        "content": "<p>So I updated the code to use the new chalk version, and to set a <code>DefId</code> on <code>ParamEnv</code> only with <code>-Z chalk</code></p>",
        "id": 152564309,
        "sender_full_name": "scalexm",
        "timestamp": 1545847911
    },
    {
        "content": "<p>So I thought maybe we should talk about the lifetime issues I encountered</p>",
        "id": 152564363,
        "sender_full_name": "scalexm",
        "timestamp": 1545847954
    },
    {
        "content": "<p>(Lifetime issues regarding the trait solver I mean)</p>",
        "id": 152564368,
        "sender_full_name": "scalexm",
        "timestamp": 1545847966
    },
    {
        "content": "<p>which lifetime issues are you referring to, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> ?</p>",
        "id": 152564684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545848316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I mean the reasons why I deactivated region constraints in rustc’s chalk code :)</p>",
        "id": 152564700,
        "sender_full_name": "scalexm",
        "timestamp": 1545848374
    },
    {
        "content": "<p>Which you asked about on the PR</p>",
        "id": 152564701,
        "sender_full_name": "scalexm",
        "timestamp": 1545848379
    },
    {
        "content": "<p>ah :)</p>",
        "id": 152564780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545848443
    },
    {
        "content": "<p>I'm skimming the PR comments now to refresh my memory</p>",
        "id": 152564781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545848449
    },
    {
        "content": "<p>I guess you mean this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"c1\">// FIXME: restore this later once we get better at handling regions</span>\n</pre></div>\n\n\n<p>=)</p>",
        "id": 152564826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545848509
    },
    {
        "content": "<p>you mentioned there were some earlier comments in this topic</p>",
        "id": 152564873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545848536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes</p>",
        "id": 152564881,
        "sender_full_name": "scalexm",
        "timestamp": 1545848566
    },
    {
        "content": "<p>I’ll be at home in 5 minutes</p>",
        "id": 152564886,
        "sender_full_name": "scalexm",
        "timestamp": 1545848579
    },
    {
        "content": "<p>ok</p>",
        "id": 152565051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545848782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok so I remember there were two problems</p>",
        "id": 152565323,
        "sender_full_name": "scalexm",
        "timestamp": 1545849016
    },
    {
        "content": "<p>the first one occurs when unification pushes lifetime constraints</p>",
        "id": 152565365,
        "sender_full_name": "scalexm",
        "timestamp": 1545849028
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok I'm basically hitting this bug where two answers to one goal have identical substitutions but different lifetime constraints, but actually these lifetime constraints should be identical, it's just the way they are treated in unification that triggers that</p>\n</blockquote>",
        "id": 152565400,
        "sender_full_name": "scalexm",
        "timestamp": 1545849070
    },
    {
        "content": "<blockquote>\n<p>so in <code>nll_relate</code> when we equate two regions e.g. <code>'?0</code> and <code>'?1</code> we just push two region constraints <code>'?0:  '?1</code> and <code>'?1: '?0</code></p>\n</blockquote>",
        "id": 152565405,
        "sender_full_name": "scalexm",
        "timestamp": 1545849079
    },
    {
        "content": "<blockquote>\n<p>but in my case, I have two different ways to prove a goal, say <code>Implemented(T: Sized)</code></p>\n</blockquote>",
        "id": 152565409,
        "sender_full_name": "scalexm",
        "timestamp": 1545849088
    },
    {
        "content": "<blockquote>\n<p>I have in my environment: <code>FromEnv(T: Sized)</code>, <code>FromEnv(&amp;Option&lt;T&gt;)</code></p>\n</blockquote>",
        "id": 152565411,
        "sender_full_name": "scalexm",
        "timestamp": 1545849094
    },
    {
        "content": "<blockquote>\n<p>both imply <code>Implemented(T: Sized)</code></p>\n</blockquote>",
        "id": 152565416,
        "sender_full_name": "scalexm",
        "timestamp": 1545849111
    },
    {
        "content": "<blockquote>\n<p>however when using <code>FromEnv(&amp;Option&lt;T&gt;)</code>, we will basically push two useless region constraints as described above</p>\n</blockquote>",
        "id": 152565425,
        "sender_full_name": "scalexm",
        "timestamp": 1545849121
    },
    {
        "content": "<blockquote>\n<p>and in turn the solver believes that there are two different answers</p>\n</blockquote>",
        "id": 152565466,
        "sender_full_name": "scalexm",
        "timestamp": 1545849129
    },
    {
        "content": "<p>(this one problem was the one I evoked earlier in this channel)</p>",
        "id": 152565469,
        "sender_full_name": "scalexm",
        "timestamp": 1545849143
    },
    {
        "content": "<p>the <code>?0</code> and <code>?1</code> in this case are variables created as part of unifying with <code>&amp;Option&lt;T&gt;</code>, I guess?</p>",
        "id": 152565802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545849675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> right</p>",
        "id": 152565807,
        "sender_full_name": "scalexm",
        "timestamp": 1545849702
    },
    {
        "content": "<p>in chalk proper, we do a bit more equality unification on regions, which might help address some cases like this, but doesn't seem like a <em>general</em> solution. I was pondering this plus the <code>?T: Sized</code> question a bit</p>",
        "id": 152565811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545849708
    },
    {
        "content": "<p>in particular I was thinking a bit about the \"deferral\" mechanism that SLG offers for handling negative cycles</p>",
        "id": 152565852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545849730
    },
    {
        "content": "<p>anyway, that's only semirelated</p>",
        "id": 152565860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545849738
    },
    {
        "content": "<p>so one thing that I could imagine</p>",
        "id": 152565861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545849741
    },
    {
        "content": "<p>is introducing a some kind of \"or\" constraints, so that we can union together two answers with distinct regions</p>",
        "id": 152565867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545849755
    },
    {
        "content": "<p>but it's probably a good idea to push first on figuring out when constraints don't matter or are equivalent</p>",
        "id": 152565870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545849771
    },
    {
        "content": "<p>just because it'll be more efficient etc</p>",
        "id": 152565873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545849777
    },
    {
        "content": "<p>e.g., in chalk, if we see <code>?0 = ?1</code>, we actually go ahead and unify those variables, which we don't do in rustc</p>",
        "id": 152565882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545849798
    },
    {
        "content": "<p>so in this case the constraints in question would I think just not exist</p>",
        "id": 152565886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545849812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when you say \"in chalk\", you mean in the rustc's unification code used with chalk-engine?</p>",
        "id": 152565936,
        "sender_full_name": "scalexm",
        "timestamp": 1545849851
    },
    {
        "content": "<p>no, I mean in chalk's unification code</p>",
        "id": 152565987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545849955
    },
    {
        "content": "<p>ah sorry</p>",
        "id": 152566036,
        "sender_full_name": "scalexm",
        "timestamp": 1545850008
    },
    {
        "content": "<p>I misread your sentence, I thought you were proposing a solution</p>",
        "id": 152566044,
        "sender_full_name": "scalexm",
        "timestamp": 1545850018
    },
    {
        "content": "<p>well, I sort of am</p>",
        "id": 152566048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850025
    },
    {
        "content": "<p>yes that's what we do in chalk indeed</p>",
        "id": 152566051,
        "sender_full_name": "scalexm",
        "timestamp": 1545850025
    },
    {
        "content": "<p>that is, I'm saying, if we adjusted rustc to behave in this way, it would help with this <em>specific</em> example I think</p>",
        "id": 152566058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850041
    },
    {
        "content": "<p>yes right</p>",
        "id": 152566062,
        "sender_full_name": "scalexm",
        "timestamp": 1545850048
    },
    {
        "content": "<p>I'm going to have to go soon, but I have a question -- do you believe the PR is \"ready to land\" as is?</p>",
        "id": 152566067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850058
    },
    {
        "content": "<p>(I don't see why not, but maybe i'm forgetting something)</p>",
        "id": 152566071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850066
    },
    {
        "content": "<p>there was some sort of implicit question in my quotations which is \"why are we not doing that in rustc\" :)</p>",
        "id": 152566073,
        "sender_full_name": "scalexm",
        "timestamp": 1545850071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think lifetime constraints can be left as a follow-up for now indeed</p>",
        "id": 152566126,
        "sender_full_name": "scalexm",
        "timestamp": 1545850103
    },
    {
        "content": "<p>about <code>?T: Sized</code> I was actually thinking that, since we do multiple passes in <code>select_where_possible</code> until we cannot make anymore progress, we could maybe just have <code>?T: Sized :- CannotProve</code></p>",
        "id": 152566130,
        "sender_full_name": "scalexm",
        "timestamp": 1545850109
    },
    {
        "content": "<p>well</p>",
        "id": 152566146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850149
    },
    {
        "content": "<p>so this would trigger an ambiguity immediately, but hopefully the next pass with resolved type variables would succeed</p>",
        "id": 152566149,
        "sender_full_name": "scalexm",
        "timestamp": 1545850152
    },
    {
        "content": "<p>I don't think this will actually work <em>quite</em> like that</p>",
        "id": 152566152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850165
    },
    {
        "content": "<p>but one simple thing we could do</p>",
        "id": 152566156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850174
    },
    {
        "content": "<p>is provide some way for the engine to help guide which subgoal is selected first</p>",
        "id": 152566159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850187
    },
    {
        "content": "<p>actually we can do this via sorting now I Think</p>",
        "id": 152566160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850192
    },
    {
        "content": "<p>if we just defer <code>?T: Sized</code> goals so they are selected last</p>",
        "id": 152566210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850210
    },
    {
        "content": "<p>and perhaps add a <code>CannotProve</code> rule for the case where <code>?T</code> is unconstrained</p>",
        "id": 152566218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850225
    },
    {
        "content": "<p>I think that would more or less be fine</p>",
        "id": 152566220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes, and then we should change rustc's code to aggregate all obligations into a big <code>And</code> goal I guess</p>",
        "id": 152566225,
        "sender_full_name": "scalexm",
        "timestamp": 1545850233
    },
    {
        "content": "<p>which I'm not doing right now</p>",
        "id": 152566233,
        "sender_full_name": "scalexm",
        "timestamp": 1545850252
    },
    {
        "content": "<p>I think if we <em>just</em> make it return <code>CannotProve</code>, that will be reported as a sol'n effectively</p>",
        "id": 152566234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850256
    },
    {
        "content": "<p>I was considering though revisiting that mechanism</p>",
        "id": 152566246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850273
    },
    {
        "content": "<p>this is what I meant earlier when I said something about deferred goals</p>",
        "id": 152566248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850282
    },
    {
        "content": "<p>I also may just not be remembering properly</p>",
        "id": 152566250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850287
    },
    {
        "content": "<p>but I think that <code>CannotProve</code> will wind up adding a \"deferred constraint\" that can never be discharged..?</p>",
        "id": 152566252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <code>CannotProve</code> in chalk-engine automatically sets <code>ambiguous</code> flag on the solution</p>",
        "id": 152566255,
        "sender_full_name": "scalexm",
        "timestamp": 1545850315
    },
    {
        "content": "<p>yes that's right</p>",
        "id": 152566257,
        "sender_full_name": "scalexm",
        "timestamp": 1545850319
    },
    {
        "content": "<p>right now we don't have a notion of a delayed literal that is a <em>positive</em> goal</p>",
        "id": 152566309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850348
    },
    {
        "content": "<p>but it could be added</p>",
        "id": 152566312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850351
    },
    {
        "content": "<p>the idea would be that when you reach a sol'n with no further literals remaining</p>",
        "id": 152566317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850364
    },
    {
        "content": "<p>you remove the delayed ones</p>",
        "id": 152566319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850366
    },
    {
        "content": "<p>this is however more-or-less equivalent to altering the selection order I think</p>",
        "id": 152566322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I see</p>",
        "id": 152566323,
        "sender_full_name": "scalexm",
        "timestamp": 1545850376
    },
    {
        "content": "<p>yes ok</p>",
        "id": 152566326,
        "sender_full_name": "scalexm",
        "timestamp": 1545850381
    },
    {
        "content": "<p>and so the latter might be a cleaner feeling way to do it</p>",
        "id": 152566331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850386
    },
    {
        "content": "<p>though maybe not</p>",
        "id": 152566334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850398
    },
    {
        "content": "<p>I think all of these incidentally (technically?) invalidate the \"completeness proofs\" of the SLG solver, which assume a \"fixed selection order\", but I doubt it matters</p>",
        "id": 152566336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850417
    },
    {
        "content": "<p>(at least it's not obvious to me how that would actually lead to incompleteness)</p>",
        "id": 152566338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850433
    },
    {
        "content": "<p>I'm also not sure really it's not like I reviewed said proofs in detail, I just remember some notes about it in some papers</p>",
        "id": 152566378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850451
    },
    {
        "content": "<p>that is, I don't really know what \"fixed\" means</p>",
        "id": 152566382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850464
    },
    {
        "content": "<p>anyway I think that choosing a going selection order is going to be somewhat <em>crucial</em> in controlling explosive runtimes in certain cases</p>",
        "id": 152566408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850527
    },
    {
        "content": "<p>e.g., if you have unconstrained type variables, you want to look for trait references that are not going to wind up generating tons and tons of solution for them</p>",
        "id": 152566420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850552
    },
    {
        "content": "<p>right</p>",
        "id": 152566422,
        "sender_full_name": "scalexm",
        "timestamp": 1545850558
    },
    {
        "content": "<p><code>?T: Sized</code> being a good example of a very bad choice :)</p>",
        "id": 152566423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850561
    },
    {
        "content": "<p>I imagine in practice we might have some simple heuristics that look at the impls for other traits and try to judge similar qualities</p>",
        "id": 152566472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850586
    },
    {
        "content": "<p>in my ideal world those heuristics live in <em>chalk</em> and are quite general</p>",
        "id": 152566477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850598
    },
    {
        "content": "<p>but I haven't given it much thought</p>",
        "id": 152566480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850603
    },
    {
        "content": "<p>there <em>has</em> to be prior work on this</p>",
        "id": 152566485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850611
    },
    {
        "content": "<p>yeah probably</p>",
        "id": 152566487,
        "sender_full_name": "scalexm",
        "timestamp": 1545850616
    },
    {
        "content": "<p>I talked some to Will Byrd (of Minikanren fame) about this</p>",
        "id": 152566497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850637
    },
    {
        "content": "<p>the tl;dr was we'd have to gather more data about what happens <em>in Rust</em> before we could figure out what would be best</p>",
        "id": 152566504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850652
    },
    {
        "content": "<p>which seems sort of obvious</p>",
        "id": 152566507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850654
    },
    {
        "content": "<p><em>anyway</em>, I'll go ahead and r+ your PR</p>",
        "id": 152566512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850660
    },
    {
        "content": "<p>I'm going to disappear till tomorrow soon, still on vacation</p>",
        "id": 152566519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850673
    },
    {
        "content": "<p>I don't think we are in a hurry merging this PR, + it does not seem to be affected often by merge conflicts</p>",
        "id": 152566522,
        "sender_full_name": "scalexm",
        "timestamp": 1545850677
    },
    {
        "content": "<p>we could wait a bit until we have more time experimenting with things</p>",
        "id": 152566565,
        "sender_full_name": "scalexm",
        "timestamp": 1545850694
    },
    {
        "content": "<p>ok; regardless, it feels like it'd be great to get it landed as a foundation to build upon</p>",
        "id": 152566568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850699
    },
    {
        "content": "<p>I'm fine with both</p>",
        "id": 152566572,
        "sender_full_name": "scalexm",
        "timestamp": 1545850707
    },
    {
        "content": "<p>but we do have to figure out how to track all the FIXMEs and things most effectively</p>",
        "id": 152566574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850709
    },
    {
        "content": "<p>I am hoping to that we can create a kind of \"roadmap\" for further work</p>",
        "id": 152566582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850719
    },
    {
        "content": "<p>yes</p>",
        "id": 152566586,
        "sender_full_name": "scalexm",
        "timestamp": 1545850723
    },
    {
        "content": "<p>I might put some time into that over next few days, trying to figure out what that even means :)</p>",
        "id": 152566594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> so is work to integrate lifetime bounds into Chalk on the way?</p>",
        "id": 154184151,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1546446138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> not yet</p>",
        "id": 154184196,
        "sender_full_name": "scalexm",
        "timestamp": 1546446181
    },
    {
        "content": "<p>We need to open issues first, and to have some kind of roadmap</p>",
        "id": 154184212,
        "sender_full_name": "scalexm",
        "timestamp": 1546446190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> ah okay. waiting for Niko on that, or just plodding along, and haven't got to it yet?</p>",
        "id": 154184902,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1546446807
    },
    {
        "content": "<p>Both actually :)</p>",
        "id": 154184964,
        "sender_full_name": "scalexm",
        "timestamp": 1546446851
    },
    {
        "content": "<p>okay ;-)</p>",
        "id": 154185822,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1546447615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, long ago <a href=\"#narrow/stream/144729-wg-traits/topic/chalk-integration/near/148743502\" title=\"#narrow/stream/144729-wg-traits/topic/chalk-integration/near/148743502\">you wrote</a>:</p>\n<blockquote>\n<ul>\n<li>lazy normalization seems to work well in an unnormalized context, but since there are calls to <code>traits::normalize</code> a bit everywhere I cannot even test it with concrete types since the associated types values are resolved even before using the chalk engine :p there seems to be a lot of different ways to normalize associated types currently so I'm not sure which ones I should try to e.g. deactivate in the presence of <code>-Z chalk</code></li>\n</ul>\n</blockquote>\n<p>I saw that there is (in the <code>TraitEngine</code> trait) now a <code>normalize</code> method -- did you do something to resolve this? I imagine there still exist a lot of explicit normalization steps</p>",
        "id": 161486483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553290820
    },
    {
        "content": "<p>I'm kind of trying to pull together a comprehensive look at next steps</p>",
        "id": 161486493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553290838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I did not try to remove any of the explicit normalization steps</p>",
        "id": 161486531,
        "sender_full_name": "scalexm",
        "timestamp": 1553290902
    },
    {
        "content": "<p>OK.</p>",
        "id": 161486538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553290916
    },
    {
        "content": "<p>Well, I gotta run, but I have some hand-written notes, and I'm going to try to pull them together</p>",
        "id": 161486587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553290929
    },
    {
        "content": "<p>The <code>normalize</code> method was ore-existing to my set of PRs, introduced in <span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>’s PR</p>",
        "id": 161486591,
        "sender_full_name": "scalexm",
        "timestamp": 1553290933
    },
    {
        "content": "<p>ok</p>",
        "id": 161486596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553290942
    },
    {
        "content": "<p>I figured as much</p>",
        "id": 161486599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553290945
    },
    {
        "content": "<p>but just wanted to confirm</p>",
        "id": 161486600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553290948
    },
    {
        "content": "<p>Was it clear to you what the problem was with lifetimes in unification?</p>",
        "id": 161486608,
        "sender_full_name": "scalexm",
        "timestamp": 1553290960
    },
    {
        "content": "<p>yep, I remember now</p>",
        "id": 161486610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553290965
    },
    {
        "content": "<p>Ok good</p>",
        "id": 161486615,
        "sender_full_name": "scalexm",
        "timestamp": 1553290972
    },
    {
        "content": "<p>I'm going to think about it over the weekend and on Monday and hopefully have some proposals :)</p>",
        "id": 161486630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553290987
    },
    {
        "content": "<p>I mean the options are basically the same things we wrote before I thnk</p>",
        "id": 161486637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553290996
    },
    {
        "content": "<p>at least in short term</p>",
        "id": 161486641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553291002
    }
]