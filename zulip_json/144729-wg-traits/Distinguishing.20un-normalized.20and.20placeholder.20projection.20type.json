[
    {
        "content": "<p>So we have two different places that <code>TyKind::Projection</code> show up in trait solving:</p>\n<ol>\n<li>\n<p>The first is if we forget to normalize a type that comes from the AST (or we fail to normalize, e.g. GATs and/or when the projection captures a late-bound region).</p>\n</li>\n<li>\n<p>The second is when the projection really is just a placeholder in generic code, and it is as normalized as it'll ever get, e.g.</p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span>::<span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"cm\">/* &lt;&lt; this type */</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Do y'all think it's useful to modify rustc to distinguish these two cases as separate TyKinds? We could eventually use this distinction to find out if a projection needs further normalization (e.g. when it is being equated with a concrete type), in the interest of moving towards some sort of lazy (or at least less aggressive) projection normalization in typeck and trait selection.</p>",
        "id": 272745371,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645486882
    },
    {
        "content": "<p>My knowledge of chalk is somewhat limited to just reading the chalk book, but this seems to line up a bit more with how Chalk represents projections as being either an alias type or a placeholder.</p>",
        "id": 272745376,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645486890
    },
    {
        "content": "<p>So if we were to modify rustc to distinguish these cases, perhaps that's also along the lines of the \"make rustc and chalk meet in the middle\" that <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  has been talking about?</p>",
        "id": 272745436,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645486929
    },
    {
        "content": "<p>That is indeed how chalk works</p>",
        "id": 272746675,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645488285
    },
    {
        "content": "<p>It also what causes type ambiguity</p>",
        "id": 272746692,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645488318
    },
    {
        "content": "<p>Unsure how exactly it would work in rustc</p>",
        "id": 272746705,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645488333
    },
    {
        "content": "<p>(Though in the previous chalk integration there <em>was</em> a placeholder type,  but it was only used for chalk, and got removed when the integration got removed)</p>",
        "id": 272746769,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645488390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Distinguishing.20un-normalized.20and.20placeholder.20projection.20type/near/272746692\">said</a>:</p>\n<blockquote>\n<p>It also what causes type ambiguity</p>\n</blockquote>\n<p>what do you mean exactly?</p>",
        "id": 272746915,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645488592
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/Chalk/issues/234\">Chalk#234</a></p>",
        "id": 272752471,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645495271
    },
    {
        "content": "<p>Cool, I'll give that issue a look.</p>",
        "id": 272754022,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645497313
    },
    {
        "content": "<p>There's also <a href=\"https://github.com/matthewjasper/rust/commits/lazy-normalization\">https://github.com/matthewjasper/rust/commits/lazy-normalization</a> which was an attempt to implement lazy norm in rustc.</p>",
        "id": 272778488,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1645522267
    }
]