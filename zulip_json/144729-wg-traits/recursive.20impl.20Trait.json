[
    {
        "content": "<p>one thing I was thinking about -- not directly relted to this -- was recursive functions</p>",
        "id": 246982626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049600
    },
    {
        "content": "<p>right now if you have a recursive impl Trait function, you get a cycle error</p>",
        "id": 246982650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049616
    },
    {
        "content": "<p>if we had some of the infrstructure I'm building in salsa to support chalk, though, we could handle cycles more elegantly, and I think we could handle recursion too</p>",
        "id": 246982664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049630
    },
    {
        "content": "<p>(sorry, I'm mixing in a bit of \"long term impl Trait\" thinking)</p>",
        "id": 246982747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049663
    },
    {
        "content": "<p>I should start writing up the skill tree :P</p>",
        "id": 246982752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049667
    },
    {
        "content": "<p>hehe</p>",
        "id": 246982754,
        "sender_full_name": "oli",
        "timestamp": 1627049667
    },
    {
        "content": "<p>(really, the \"traits vision doc\")</p>",
        "id": 246982771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049681
    },
    {
        "content": "<p>which reminds me that once we ship TAITs, I want to talk to you about <del>a</del> the const generics vision doc</p>",
        "id": 246982790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049697
    },
    {
        "content": "<p>now I'm <em>really</em> off topic</p>",
        "id": 246982802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049702
    },
    {
        "content": "<p>I think with lazy TAIT inference we may be able to solve recursion</p>",
        "id": 246982947,
        "sender_full_name": "oli",
        "timestamp": 1627049771
    },
    {
        "content": "<p>as we stop asking for the hidden type and just generate inference variables</p>",
        "id": 246982975,
        "sender_full_name": "oli",
        "timestamp": 1627049789
    },
    {
        "content": "<p>of course that may run into an inference problem if you don't constrain it elsewhere, but that is expected</p>",
        "id": 246983064,
        "sender_full_name": "oli",
        "timestamp": 1627049847
    },
    {
        "content": "<p>well</p>",
        "id": 246983072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049852
    },
    {
        "content": "<p>that's a good point, we can handle direct recursion</p>",
        "id": 246983249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049928
    },
    {
        "content": "<p>not indirect I don't think</p>",
        "id": 246983260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049933
    },
    {
        "content": "<p>but if foo calls itself, it may indeed \"just work\" (and that might be a user visible difference...)</p>",
        "id": 246983295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049950
    },
    {
        "content": "<p>actually</p>",
        "id": 246983331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049974
    },
    {
        "content": "<p>I guess there's another user visible difference, potentially</p>",
        "id": 246983359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049981
    },
    {
        "content": "<p>consider this</p>",
        "id": 246983409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050001
    },
    {
        "content": "<p>oh, nm</p>",
        "id": 246983498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050025
    },
    {
        "content": "<p>I was thinking of this example, but of course it's not stable</p>",
        "id": 246983518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050036
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">B</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">x</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">y</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246983600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050080
    },
    {
        "content": "<p>heh, wonder what we want to happen here</p>",
        "id": 246983666,
        "sender_full_name": "oli",
        "timestamp": 1627050115
    },
    {
        "content": "<p>this is guaranteed unknown, unless another function constrains either A or B</p>",
        "id": 246983756,
        "sender_full_name": "oli",
        "timestamp": 1627050139
    },
    {
        "content": "<p>in general the ideae of scoping type alias to module ... seems right, but like it will often not be what you want in practice</p>",
        "id": 246983765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/recursive.20impl.20Trait/near/246983756\">said</a>:</p>\n<blockquote>\n<p>this is guaranteed unknown, unless another function constrains either A or B</p>\n</blockquote>\n<p>yes, but what I was really worried about was I guess a slightly different case</p>",
        "id": 246983796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050163
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">B</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">x</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">22</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">y</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246983844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050191
    },
    {
        "content": "<p>really this is just the \"it'd be nice to be able to rely on the fact that <code>y(): Debug</code></p>",
        "id": 246983877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050214
    },
    {
        "content": "<p>ah, even in the defining scope</p>",
        "id": 246983912,
        "sender_full_name": "oli",
        "timestamp": 1627050238
    },
    {
        "content": "<p>which I think we agreed to leave out of scope for now</p>",
        "id": 246983960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050248
    },
    {
        "content": "<p>we do already have fallback logic in type inference</p>",
        "id": 246983971,
        "sender_full_name": "oli",
        "timestamp": 1627050255
    },
    {
        "content": "<p>beacuse it's clearly a future compatible improvement, and it applies in many other cases</p>",
        "id": 246983973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050255
    },
    {
        "content": "<p>when it fails, fall back to the opaque type?</p>",
        "id": 246983983,
        "sender_full_name": "oli",
        "timestamp": 1627050260
    },
    {
        "content": "<p>that is not a good idea :)</p>",
        "id": 246984007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050277
    },
    {
        "content": "<p>what I expect is:</p>",
        "id": 246984018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050284
    },
    {
        "content": "<p>at some point we should consider it \"ok\" to leave the value of an <code>impl Trait</code> unconstrained</p>",
        "id": 246984086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050316
    },
    {
        "content": "<p>so long as we can prove all trait obligations</p>",
        "id": 246984105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050327
    },
    {
        "content": "<p>that simply means that <code>x</code> is not a \"Defining use\" (so to speak) of <code>A</code></p>",
        "id": 246984122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050338
    },
    {
        "content": "<p>(well, in this case, <code>B</code>)</p>",
        "id": 246984130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050343
    },
    {
        "content": "<p>yes, isn't that the same as what I said? XD</p>",
        "id": 246984165,
        "sender_full_name": "oli",
        "timestamp": 1627050360
    },
    {
        "content": "<p>well</p>",
        "id": 246984233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050372
    },
    {
        "content": "<p>you talked about falling back</p>",
        "id": 246984241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050377
    },
    {
        "content": "<p>we already have fallback for <code>fn foo(x: A) -&gt; A { x }</code></p>",
        "id": 246984245,
        "sender_full_name": "oli",
        "timestamp": 1627050379
    },
    {
        "content": "<p>yes, I am saying that this is a bad way to achieve that goal</p>",
        "id": 246984275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050394
    },
    {
        "content": "<p>I'm calling it that, because that's what the code says</p>",
        "id": 246984285,
        "sender_full_name": "oli",
        "timestamp": 1627050398
    },
    {
        "content": "<p>ah heh</p>",
        "id": 246984292,
        "sender_full_name": "oli",
        "timestamp": 1627050402
    },
    {
        "content": "<p>I don't like that code :)</p>",
        "id": 246984296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050404
    },
    {
        "content": "<p>but... how would you do it otherwise? You need to resolve the inference variable somehow, otherwise you get an inference error, right?</p>",
        "id": 246984395,
        "sender_full_name": "oli",
        "timestamp": 1627050457
    },
    {
        "content": "<p>sorry, I have to concentrate on this annoying \"Press 1 for ...\" menu right now :)</p>",
        "id": 246984515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050498
    },
    {
        "content": "<p>XD</p>",
        "id": 246984537,
        "sender_full_name": "oli",
        "timestamp": 1627050514
    },
    {
        "content": "<p>I've been trying to navigate it while talking to you and I keep getting stuck in the wrong place :)</p>",
        "id": 246984575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627050538
    },
    {
        "content": "<p>well, we can continue this whenever you got your hands free again ^^</p>",
        "id": 246984622,
        "sender_full_name": "oli",
        "timestamp": 1627050561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/recursive.20impl.20Trait/near/246984395\">said</a>:</p>\n<blockquote>\n<p>but... how would you do it otherwise? You need to resolve the inference variable somehow, otherwise you get an inference error, right?</p>\n</blockquote>\n<p>while i'm on hold...this is correct, today. What I'm saying is that I think we can revisit this rule.</p>",
        "id": 246985878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627051214
    },
    {
        "content": "<p>I don't think we have to worry about it for now</p>",
        "id": 246985937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627051258
    },
    {
        "content": "<p>kk</p>",
        "id": 246985997,
        "sender_full_name": "oli",
        "timestamp": 1627051305
    }
]