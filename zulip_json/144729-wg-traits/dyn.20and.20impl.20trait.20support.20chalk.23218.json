[
    {
        "content": "<p>starting this thread here for the work on <a href=\"https://github.com/rust-lang/chalk/issues/218\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/218\">https://github.com/rust-lang/chalk/issues/218</a></p>",
        "id": 164783290,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556879180
    },
    {
        "content": "<p>first things first, where is the specification for dyn and impl trait?</p>",
        "id": 164783697,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556879708
    },
    {
        "content": "<p>i'd like to know which positions we're supposed to support this new syntax</p>",
        "id": 164783701,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556879726
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 164787543,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556884276
    },
    {
        "content": "<p>forget about the questions, i'm answering them myself</p>",
        "id": 164789036,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556885931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> In the issue, you said that the chalk parser should create new <code>Ty</code> enum variants with a field containing <code>Vec&lt;InlineBound&gt;</code>, but in the chalk IR, you have <code>Vec&lt;QuantifiedWhereClause&gt;</code> instead. Which one should be the correct one to use?</p>",
        "id": 164815352,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556906139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> nice</p>",
        "id": 164817593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556907695
    },
    {
        "content": "<p>mmm let me see</p>",
        "id": 164817601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556907700
    },
    {
        "content": "<p>as far i can see, the difference between them is whether it supports the \"forall\" syntax or not</p>",
        "id": 164817732,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556907733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> ah. We do want that.</p>",
        "id": 164817980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556907909
    },
    {
        "content": "<p>In other words, these are legal types. <code>dyn for&lt;'a&gt; Output&lt;'a&gt;</code></p>",
        "id": 164817989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556907921
    },
    {
        "content": "<p><code>impl for&lt;'a&gt; Output&lt;'a&gt;</code> :)</p>",
        "id": 164818000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556907931
    },
    {
        "content": "<p>gotcha, so we should use <code>QuantifiedWhereClause</code> instead</p>",
        "id": 164818338,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556908146
    },
    {
        "content": "<p>or wait, what's the difference between <code>QuantifiedWhereClause</code> and <code>QuantifiedInlineBound</code>?</p>",
        "id": 164818365,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556908172
    },
    {
        "content": "<p>it <em>looks</em> to me the better one is <code>QuantifiedInlineBound</code> instead</p>",
        "id": 164818629,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556908341
    },
    {
        "content": "<blockquote>\n<p>it <em>looks</em> to me the better one is <code>QuantifiedInlineBound</code> instead</p>\n</blockquote>\n<p>correct</p>",
        "id": 164818781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556908457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> a suggestion from <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was to get rid of <code>QuantifiedInlineBound</code> and instead have <code>Binder&lt;QuantifiedWhereClause&gt;</code> where the binder would bind an existential <code>^Self</code>. It would be cool if we were able to do that, but I remember having tried and it was not as easy at it sounded</p>",
        "id": 164825887,
        "sender_full_name": "scalexm",
        "timestamp": 1556914065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I think I meant to do it in the lowering, not necessarily in the AST</p>",
        "id": 164826881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556914884
    },
    {
        "content": "<p>i.e., in chalk-ir</p>",
        "id": 164826892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556914893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes</p>",
        "id": 164826902,
        "sender_full_name": "scalexm",
        "timestamp": 1556914906
    },
    {
        "content": "<p>Ah ok we’re still only talking about syntax</p>",
        "id": 164827015,
        "sender_full_name": "scalexm",
        "timestamp": 1556914960
    },
    {
        "content": "<p>Still good to keep this in mind for when we proceed onto implementing dyn traits lowering :)</p>",
        "id": 164827083,
        "sender_full_name": "scalexm",
        "timestamp": 1556915023
    },
    {
        "content": "<p>hmm, looks like i still need some clarification on how \"forall\" is supported</p>",
        "id": 164867692,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556975683
    },
    {
        "content": "<p>given we have <code>impl for&lt;'a&gt; Foo&lt;'a&gt;</code>, is this supposed to work? <code>impl for&lt;'a&gt; Foo&lt;'a&gt; + Bar&lt;'a&gt;</code></p>",
        "id": 164867717,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556975735
    },
    {
        "content": "<p>or is it supposed to be something like <code>impl for&lt;'a&gt; Foo&lt;'a&gt; + for&lt;'b&gt; Bar&lt;'b&gt;</code></p>",
        "id": 164867769,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556975764
    },
    {
        "content": "<p>i'm inclined to believe that the former is the version of quantified types that we'd like to support, and if so, then the grammar is a bit different and I'll need to account for it</p>",
        "id": 164867786,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556975817
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> <code>impl dyn for&lt;'a&gt; Foo&lt;'a&gt; + for&lt;'b&gt; Bar&lt;'b&gt; { ... }</code>makes things easier to understand <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 164867876,
        "sender_full_name": "centril",
        "timestamp": 1556975962
    },
    {
        "content": "<p>i'm not talking about the difficulty of understanding it, i want to know what exactly we'd like to support</p>",
        "id": 164867948,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556976053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span>  we don't allow 1) <code>for&lt;'a&gt; (Foo&lt;'a&gt; + Bar&lt;'a&gt;)</code> in Rust atm. However, using 2) <code>∀ x. [P(x) ∧ Q(x)] ≡ [∀ x. P(x)] ∧ [∀ x. Q(x)]</code> you get 3) <code>(for&lt;'a&gt; Foo&lt;'a&gt;) + (for&lt;'a&gt; Bar&lt;'a&gt;)</code> which is equivalent to 1)</p>",
        "id": 164868060,
        "sender_full_name": "centril",
        "timestamp": 1556976198
    },
    {
        "content": "<p>ok, so the latter is what we'd like to have instead</p>",
        "id": 164868135,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556976303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> yeah we need to support:<br>\n1) <code>dyn (for&lt;'a&gt; Foo&lt;'a&gt;) + (for&lt;'a&gt; Bar&lt;'a&gt;)</code><br>\n2) <code>impl (for&lt;'a&gt; Foo&lt;'a&gt;) + (for&lt;'a&gt; Bar&lt;'a&gt;)</code><br>\n3) <code>T: (for&lt;'a&gt; Foo&lt;'a&gt;) + (for&lt;'a&gt; Bar&lt;'a&gt;)</code></p>",
        "id": 164868161,
        "sender_full_name": "centril",
        "timestamp": 1556976359
    },
    {
        "content": "<p>since rustc does</p>",
        "id": 164868207,
        "sender_full_name": "centril",
        "timestamp": 1556976374
    },
    {
        "content": "<p>so, i found quite a lot of convenience traits and methods that allow me to lower AST types into chalk IR types</p>",
        "id": 164870022,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556979318
    },
    {
        "content": "<p>first, let's be clear about what we want to lower: <code>ast::Ty::Dyn(Vec&lt;QuantifiedInlineBound&gt;)</code> into <code>chalk_ir::Ty::Dyn(Vec&lt;QuantifiedWhereClause&gt;)</code></p>",
        "id": 164870229,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556979643
    },
    {
        "content": "<p>there's already a <code>LowerQuantifiedInlineBound</code> trait which provides me with a method to lower the <code>Vec&lt;ast::QuantifiedInlineBound&gt;</code> into a <code>Vec&lt;rust_ir::QuantifiedInlineBound&gt;</code></p>",
        "id": 164870230,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556979643
    },
    {
        "content": "<p>what's left then is to convert that result into a <code>Vec&lt;chalk_ir::QuantifiedWhereClause&gt;</code>, which the <code>IntoWhereClauses</code> trait also provides me convenience methods for</p>",
        "id": 164870231,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556979643
    },
    {
        "content": "<p>the problem here now is that <code>into_where_clauses</code> accepts an additional <code>self_ty</code> parameter, and I'm trying to figure out what to put there</p>",
        "id": 164870233,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556979643
    },
    {
        "content": "<p>my educated guess is <code>chalk_ir::Ty::BoundVar(binders.len())</code> where <code>binders</code> is the binders for each <code>QuantifiedInlineBound</code> in the vector, because that's the de Bruijn index that describes the anonymous self type that an <code>impl/dyn Trait</code> has</p>",
        "id": 164870297,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556979731
    },
    {
        "content": "<p>can somebody confirm that this is the case?</p>",
        "id": 164870299,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556979741
    },
    {
        "content": "<blockquote>\n<p>Note that these types introduce a level of binder -- this is so that you can represent the (unknown) Self type with a debruijn variable. i.e., something like dyn Foo&lt;Bar&gt; would wind up represented as</p>\n<p>Dyn(^0: Foo&lt;Bar&gt;`)</p>\n<p>where ^0 represents \"debruijn variable with depth 0.</p>\n</blockquote>",
        "id": 164876450,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556987468
    },
    {
        "content": "<p>niko already answered this on the issue</p>",
        "id": 164876461,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556987482
    },
    {
        "content": "<p>at this point then, i'm onto extending <code>chalk-solve</code>, but as niko said in the issue, it's blocked on <a href=\"https://github.com/rust-lang-nursery/chalk/issues/216\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/216\">chalk#216</a></p>",
        "id": 164876524,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556987548
    },
    {
        "content": "<p>oh? it just got merged yesterday</p>",
        "id": 164876550,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1556987584
    },
    {
        "content": "<blockquote>\n<p>error[E0004]: non-exhaustive patterns: <code>(&amp;Dyn(_), &amp;Apply(_))</code>, <code>(&amp;Opaque(_), &amp;Apply(_))</code>, <code>(&amp;Dyn(_), &amp;Dyn(_))</code> and 11 more not covered<br>\n   --&gt; chalk-solve\\src\\infer\\unify.rs:107:15<br>\n    |<br>\n107 |         match (a, b) {<br>\n    |               ^^^^^^ patterns <code>(&amp;Dyn(_), &amp;Apply(_))</code>, <code>(&amp;Opaque(_), &amp;Apply(_))</code>, <code>(&amp;Dyn(_), &amp;Dyn(_))</code> and 11 more not covered</p>\n<p>error[E0004]: non-exhaustive patterns: <code>(&amp;Dyn(_), &amp;Apply(_))</code>, <code>(&amp;Opaque(_), &amp;Apply(_))</code>, <code>(&amp;Dyn(_), &amp;Dyn(_))</code> and 9 more not covered<br>\n   --&gt; chalk-solve\\src\\solve\\slg.rs:364:15<br>\n    |<br>\n364 |         match (new, current) {<br>\n    |               ^^^^^^^^^^^^^^ patterns <code>(&amp;Dyn(_), &amp;Apply(_))</code>, <code>(&amp;Opaque(_), &amp;Apply(_))</code>, <code>(&amp;Dyn(_), &amp;Dyn(_))</code> and 9 more not covered</p>\n<p>error[E0004]: non-exhaustive patterns: <code>(&amp;Dyn(_), _)</code> and <code>(&amp;Opaque(_), _)</code> not covered<br>\n   --&gt; chalk-solve\\src\\solve\\slg\\aggregate.rs:171:15<br>\n    |<br>\n171 |         match (ty0, ty1) {<br>\n    |               ^^^^^^^^^^ patterns <code>(&amp;Dyn(_), _)</code> and <code>(&amp;Opaque(_), _)</code> not covered</p>\n<p>error[E0004]: non-exhaustive patterns: <code>(&amp;Dyn(_), &amp;Apply(_))</code>, <code>(&amp;Opaque(_), &amp;Apply(_))</code>, <code>(&amp;Dyn(_), &amp;Dyn(_))</code> and 11 more not covered<br>\n   --&gt; chalk-solve\\src\\solve\\slg\\resolvent.rs:340:15<br>\n    |<br>\n340 |         match (answer, pending) {<br>\n    |               ^^^^^^^^^^^^^^^^^ patterns <code>(&amp;Dyn(_), &amp;Apply(_))</code>, <code>(&amp;Opaque(_), &amp;Apply(_))</code>, <code>(&amp;Dyn(_), &amp;Dyn(_))</code> and 11 more not covered</p>\n<p>error[E0004]: non-exhaustive patterns: <code>&amp;Dyn(_)</code> and <code>&amp;Opaque(_)</code> not covered<br>\n  --&gt; chalk-solve\\src\\wf.rs:56:15<br>\n   |<br>\n56 |         match self {<br>\n   |               ^^^^ patterns <code>&amp;Dyn(_)</code> and <code>&amp;Opaque(_)</code> not covered</p>\n<p>error: aborting due to 5 previous errors</p>\n</blockquote>",
        "id": 164906327,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1557039861
    },
    {
        "content": "<p>these are the remaining compile time errors that i have to solve</p>",
        "id": 164906344,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1557039905
    },
    {
        "content": "<p>seems like you're making good progress :)</p>",
        "id": 164999567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557162509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I actually do need some help on <code>chalk-solve</code>, precisely because I'm not sure how the general direction should look like</p>",
        "id": 165001501,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1557163884
    },
    {
        "content": "<p>the compiler errors give me a hint, but i don't think it's enough for my theoretical understanding of how a goal with a <code>impl/dyn trait</code> should be solved</p>",
        "id": 165001600,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1557163927
    },
    {
        "content": "<p>let me try and see what components of the solver needs work... <code>unify</code>, <code>slg</code>, <code>aggregate</code>, <code>resolvent</code> and <code>wf</code></p>",
        "id": 165001699,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1557164024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> is there a PR?</p>",
        "id": 165002014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557164263
    },
    {
        "content": "<p>maybe you can leave pointers into places that you have questions?</p>",
        "id": 165002021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557164271
    },
    {
        "content": "<p>no there isn't yet; i'll make one this evening when i get back home</p>",
        "id": 165004039,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1557165739
    },
    {
        "content": "<p>here's a PR <a href=\"https://github.com/rust-lang/chalk/pull/226\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/226\">https://github.com/rust-lang/chalk/pull/226</a></p>",
        "id": 165140851,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1557299764
    },
    {
        "content": "<p>it's still not ready yet; i'll need some eyes here to ensure everything's fiine</p>",
        "id": 165140865,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1557299796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so i'm really not sure what I should do for the chalk solver in order to support <code>dyn Trait</code> and <code>impl Trait</code>, there are no mentoring instructions written up for this and going by the compiler errors doesn't really tell me what each module is doing</p>",
        "id": 166106118,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1558375554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> ok, I'll try to give you some feedback on this this week</p>",
        "id": 166753543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559073453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I saw that you've left review comments on the draft PR i created, however I'd still need some guidance on how we should support dyn and impl Trait on the solver</p>",
        "id": 167227610,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1559593351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> ping <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> -- sorry for the big hiatus, you still interested in maintaining the PR?</p>",
        "id": 176410235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569273197
    },
    {
        "content": "<p>I'm going to leave some comments today, so let me know</p>",
        "id": 176410243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569273205
    },
    {
        "content": "<p>(else I can find someone else to adopt, or adopt myself)</p>",
        "id": 176410254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569273215
    },
    {
        "content": "<p>sure, i still have some time nowadays for it</p>",
        "id": 176410333,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569273278
    },
    {
        "content": "<p>i think i just need  to understand how the solver works</p>",
        "id": 176410360,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569273304
    },
    {
        "content": "<p>OK</p>",
        "id": 176410483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569273387
    },
    {
        "content": "<p>actually you don't</p>",
        "id": 176410487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569273395
    },
    {
        "content": "<p>that is, I think all the required changes are \"outside\" the 'core solver'</p>",
        "id": 176410512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569273411
    },
    {
        "content": "<p>I guess it depends on what you mean by \"the solver\"</p>",
        "id": 176410519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569273416
    },
    {
        "content": "<p>anyway let me write a comment up</p>",
        "id": 176410546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569273431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> <a href=\"https://github.com/rust-lang/chalk/issues/218#issuecomment-534299093\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/218#issuecomment-534299093\">wrote a comment here</a> -- not sure if it's gonna be a bit too opaque to make sense to you, so feel free to drop questions (probably here is better, but if you put them on GH, just make sure to <code>@</code> me)</p>",
        "id": 176412981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569275448
    },
    {
        "content": "<p>ok, will read it when i find the time</p>",
        "id": 176413469,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569275920
    },
    {
        "content": "<p>so, aside from <code>clauses.rs</code> in the solver that I have to update, there is also <code>wf.rs</code>, <code>resolvent.rs</code>, <code>env_elaborator.rs</code>, <code>unify.rs</code> and <code>aggregate.rs</code> that requires me to handle the additional <code>Ty::Dyn</code> and <code>Ty::Opaque</code> cases</p>",
        "id": 176417087,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569279321
    },
    {
        "content": "<p>i'll also need to know what these files in the solver do in order to know how to handle them appropriately</p>",
        "id": 176417109,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569279360
    },
    {
        "content": "<p>OK, I plan to put more time into traits stuff on Friday, so I can leave further instructions then. Ping me <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> if you have any questions on the stuff so far, or you get done early -- if I get some spare cycles i'll try to leave some more notes.</p>",
        "id": 176559580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569415151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok, I just pushed a commit that extends <code>clauses.rs</code> to generate additional program clauses for impl and dyn Trait</p>",
        "id": 176953619,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569864445
    },
    {
        "content": "<p>cool</p>",
        "id": 176954327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569864877
    },
    {
        "content": "<p>now we just need to fix the remaining files where we need to handle the additional variants for impl and  dyn Trait</p>",
        "id": 176954400,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569864927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> <a href=\"https://github.com/rust-lang/chalk/pull/226/commits/30d8323925e902d1ff41a3d413608a7173a1d266#r329709140\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/226/commits/30d8323925e902d1ff41a3d413608a7173a1d266#r329709140\">take a look at this comment</a> -- does it make sense to you?</p>",
        "id": 176956423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569866204
    },
    {
        "content": "<p>ah, so it looks like that  i was generating the wrong clauses</p>",
        "id": 176959378,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569867954
    },
    {
        "content": "<p>i thought  we wanted an implication</p>",
        "id": 176959428,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569867964
    },
    {
        "content": "<p>i'm not exactly understanding what the binders do</p>",
        "id": 176959471,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569867996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> in general?</p>",
        "id": 176963574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569870624
    },
    {
        "content": "<p>or in this specific case?</p>",
        "id": 176963578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569870626
    },
    {
        "content": "<p>Both I suppose</p>",
        "id": 176963603,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569870646
    },
    {
        "content": "<p>are you familiar with debruijn indices?</p>",
        "id": 176963620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569870660
    },
    {
        "content": "<p>(they're just a representation technique, but it's relevant here)</p>",
        "id": 176963640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569870675
    },
    {
        "content": "<p>at a high-level, a <code>Binder&lt;T&gt;</code> represents some kind of, well, <em>binder</em> -- i.e., it creates a variable, but the purpose of that variable depends on the surrounding context</p>",
        "id": 176963659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569870699
    },
    {
        "content": "<p>e.g., if you have a chalk goal like <code>forall&lt;T&gt; { Implemented(T: Trait) }</code></p>",
        "id": 176963672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569870710
    },
    {
        "content": "<p>that <code>&lt;T&gt; { ... }</code> (without the <code>forall</code>) is represented using a <code>Binder</code></p>",
        "id": 176963743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569870731
    },
    {
        "content": "<p>the <code>Binder</code> itself is embedded in a context that indicates whether it's a <code>forall</code>, <code>exists</code>, or something else</p>",
        "id": 176963772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569870746
    },
    {
        "content": "<p>does that help, <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> ?</p>",
        "id": 176969126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569874161
    },
    {
        "content": "<p>sorry, was away for a while</p>",
        "id": 176983292,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569885354
    },
    {
        "content": "<p>so in that comment, you said that we should call <code>Subst::apply</code>, and that would mean that we're filling in the variables in  the binder by giving it  the appropriate context?</p>",
        "id": 176983360,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569885418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> right.</p>",
        "id": 176985816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569888040
    },
    {
        "content": "<p>And in this case, we're storing a type like <code>dyn Foo</code> as (kind of) <code>dyn&lt;X&gt; { X: Foo }</code></p>",
        "id": 176985822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569888052
    },
    {
        "content": "<p>and so we are substituting here the <code>dyn Foo</code> type itself for <code>X</code> to get our final clauses:</p>",
        "id": 176985833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569888069
    },
    {
        "content": "<p><code>dyn Foo: Foo</code></p>",
        "id": 176985836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569888074
    },
    {
        "content": "<p>ok, so i just force-pushed an amended commit that should resolve the comment you made</p>",
        "id": 176985901,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569888124
    },
    {
        "content": "<p>there is another place in the <code>clauses.rs</code> file where i have to handle <code>Ty::Opaque | Ty::Dyn</code>, and it's in <code>match_ty</code></p>",
        "id": 176985917,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569888158
    },
    {
        "content": "<p>(i'm also wondering if I should just create a new method called <code>instantiate</code> on <code>Binder</code> altogether...)</p>",
        "id": 176986005,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569888255
    },
    {
        "content": "<p>yeah, seems good -- I like operating on the bindder itself, I don't like accessing the <code>value</code> field directly</p>",
        "id": 176986129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569888440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> I'd call it <code>substitute</code>, perhaps</p>",
        "id": 176986193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569888487
    },
    {
        "content": "<p>I feel like there used to be such a method but it was removed for being unused</p>",
        "id": 176986197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569888496
    },
    {
        "content": "<p>bsaically the same as this existing method, for a <code>Binders&lt;T: Fold&gt;</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">QuantifiedTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">substitute</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">parameters</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Parameter</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">num_binders</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">parameters</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Subst</span>::<span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176986210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569888527
    },
    {
        "content": "<p>(really, <code>QuantifiedTy</code> is just a \"specialized\" form of binders)</p>",
        "id": 176986226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569888570
    },
    {
        "content": "<p>are program clauses \"facts\" that you provide to the datafrog engine btw?</p>",
        "id": 176989048,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1569891861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think we're awaiting for your review and next steps after  implementing the logic for generating program  clauses in the solver</p>",
        "id": 177271649,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1570126692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> yep, on my list for tomorrow!</p>",
        "id": 177271868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570126854
    },
    {
        "content": "<p>or maybe later today if I get lucky :)</p>",
        "id": 177271881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570126860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> <a href=\"https://github.com/rust-lang/chalk/pull/226#issuecomment-538509914\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/226#issuecomment-538509914\">comment</a></p>",
        "id": 177366078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570213490
    },
    {
        "content": "<p>gotcha, will go over them when i have time</p>",
        "id": 177366162,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1570213541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> one additional thing, I want to make sure that my code here is correct: <a href=\"https://github.com/rust-lang/chalk/pull/226/files#diff-a66f74f4c8a6a7a1342ab7c62c3ae8a4R281\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/226/files#diff-a66f74f4c8a6a7a1342ab7c62c3ae8a4R281\">https://github.com/rust-lang/chalk/pull/226/files#diff-a66f74f4c8a6a7a1342ab7c62c3ae8a4R281</a></p>",
        "id": 177378819,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1570223009
    },
    {
        "content": "<p>this is not part of the clause \"lowering\" code i believe</p>",
        "id": 177378934,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1570223095
    },
    {
        "content": "<p>but is part of the <code>match_ty</code> function</p>",
        "id": 177378972,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1570223132
    },
    {
        "content": "<p>actually, this commit would be the change that i'd like someone to review: <a href=\"https://github.com/rust-lang/chalk/pull/226/commits/0a53a25e5343f2982d9e988e8226aa081c41ca41\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/226/commits/0a53a25e5343f2982d9e988e8226aa081c41ca41\">https://github.com/rust-lang/chalk/pull/226/commits/0a53a25e5343f2982d9e988e8226aa081c41ca41</a></p>",
        "id": 177379110,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1570223261
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> one additional thing, I want to make sure that my code here is correct: <a href=\"https://github.com/rust-lang/chalk/pull/226/files#diff-a66f74f4c8a6a7a1342ab7c62c3ae8a4R281\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/226/files#diff-a66f74f4c8a6a7a1342ab7c62c3ae8a4R281\">https://github.com/rust-lang/chalk/pull/226/files#diff-a66f74f4c8a6a7a1342ab7c62c3ae8a4R281</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> that code is not <em>wrong</em> but also not <em>necessary</em>. The <code>match_ty</code> code is kind of poorly named, but it is only used for various 'internals' chalk goals like <code>IsLocal</code> and so forth, which will never be part of a <code>dyn</code> type. That said, if it were to be used from new places, then the code would be right I think, and those clauses will get screened out eventually.</p>",
        "id": 177379374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223477
    },
    {
        "content": "<p>It might be nice to remove it but instead to add an assertion or something that the clauses <em>aren't</em> relevant</p>",
        "id": 177379402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223501
    },
    {
        "content": "<p>hmm, so similar to another case  where it does nothing, or panicks</p>",
        "id": 177379509,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1570223576
    },
    {
        "content": "<p>(at worst, a <code>debug_assertion!</code> could be used to instantiate the clauses but assert that <code>could_match</code> is false)</p>",
        "id": 177379528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223593
    },
    {
        "content": "<p>or maybe at best :)</p>",
        "id": 177379541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223605
    },
    {
        "content": "<p>that seems ok</p>",
        "id": 177379546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223611
    },
    {
        "content": "<p>I'd say <code>debug_assertion!</code> because it's non trivial in complexity</p>",
        "id": 177379551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223616
    },
    {
        "content": "<p>I guess that <code>match_ty</code> would need another argument, the <code>env_clause</code> we are trying to solve</p>",
        "id": 177379632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223651
    },
    {
        "content": "<p>or rather the <code>goal</code></p>",
        "id": 177379662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223672
    },
    {
        "content": "<p>then you'd do something like this</p>",
        "id": 177379680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223698
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">debug_assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"n\">qwc</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">substitute</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">().</span><span class=\"n\">cast</span><span class=\"p\">()])</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">could_match</span><span class=\"p\">(</span><span class=\"n\">goal</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 177379733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok, i'm down to one last compile error, and it's in <code>unify.rs</code></p>",
        "id": 177450682,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1570349247
    },
    {
        "content": "<p>two cases are still missing from your comment: <code>(Ty::Apply, Ty::Dyn)</code> and <code>(Ty::Apply, Ty::Opaque)</code></p>",
        "id": 177450724,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1570349306
    },
    {
        "content": "<p>i'm not sure how i should unify these types with <code>Ty::Apply</code></p>",
        "id": 177450729,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1570349338
    },
    {
        "content": "<p>my guess is that since <code>Apply</code> is  about  type constructors,  it may just be sufficient if we can prove that the <code>Apply</code> type implements all of the traits that <code>Opaque</code>  requires?</p>",
        "id": 177541475,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1570469458
    },
    {
        "content": "<p>i would think that there shouldn't be any solution for unifying <code>Dyn</code>  and <code>Apply</code>, since <code>Dyn</code> specifically refers to a trait object, and no <code>Apply</code> type represents a trait object</p>",
        "id": 177541586,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1570469531
    },
    {
        "content": "<blockquote>\n<p>i would think that there shouldn't be any solution for unifying <code>Dyn</code>  and <code>Apply</code>, since <code>Dyn</code> specifically refers to a trait object, and no <code>Apply</code> type represents a trait object</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> sorry for not responding to these more promptly, I forgot I hadn't answered. I went ahead and pushed some commits to your branch to fix the unification cases.  This was correct.</p>",
        "id": 178086795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571044799
    },
    {
        "content": "<p>I also pushed a few minor fixes and the branch builds now!</p>",
        "id": 178086844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571044815
    },
    {
        "content": "<p>I was thinking that man we really need to get this code landed.</p>",
        "id": 178086851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571044826
    },
    {
        "content": "<p>(I was attempting some other refactorings and realized I would stomp all over your branch.)</p>",
        "id": 178086857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571044840
    },
    {
        "content": "<p>I was reading the diff and I would say at this point the main thing that's missing is tests -- although when I tried to add one, I immediately got some panics. =) I'm inclined to land the branch first and address adding tests and fixing bugs <em>next</em></p>",
        "id": 178087898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571045832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> ok I merged the existing PR. I also created a list of some tests.</p>",
        "id": 178092090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571049769
    },
    {
        "content": "<p>what kind of tests do you have in mind?</p>",
        "id": 178122334,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1571074488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> I added a list <a href=\"https://github.com/rust-lang/chalk/issues/218#issue-438505476\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/218#issue-438505476\">to the top of this issue</a> -- but let me make a branch with some examples</p>",
        "id": 178151427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571100484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> a sample test (which fails) is on <a href=\"https://github.com/nikomatsakis/chalk-ndm/tree/dyn-trait-test\" target=\"_blank\" title=\"https://github.com/nikomatsakis/chalk-ndm/tree/dyn-trait-test\">this branch</a> -- it panics in unification because we need to write a routine for unifying <code>QuantifiedWhereClauses</code></p>",
        "id": 178151617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571100729
    },
    {
        "content": "<p>similar I imagine to <code>unify_forall_tys</code></p>",
        "id": 178151619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571100736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> did you see the above notes <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> ?</p>",
        "id": 178660831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571668436
    },
    {
        "content": "<p>sorry, i was busying with other stuff</p>",
        "id": 178679400,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1571679921
    },
    {
        "content": "<p>it does look like there's some work left on the implementation itself before it can properly be used</p>",
        "id": 178679431,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1571679940
    },
    {
        "content": "<p>i'm not 100% familiar with the macro syntax in your branch, but I can familiarize myself with it after some reading</p>",
        "id": 178679524,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1571679980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok so I was able to look further into this last night, and the problem that i think i'm encountering right now is the elimination of the 2 binders on the Opaque/Dyn types</p>",
        "id": 179675417,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1572652724
    },
    {
        "content": "<p>i currently made it so that the code checks for arity of the outer binder, ensuring that it is 1 (which represents the self-type)</p>",
        "id": 179675509,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1572652833
    },
    {
        "content": "<p>and if not, panic with an error message</p>",
        "id": 179675514,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1572652846
    },
    {
        "content": "<p>then i create a new universe and construct two placeholder types, and substitute them into both arguments that gets passed in, which removes the outer binder</p>",
        "id": 179675661,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1572653109
    },
    {
        "content": "<p>i have doubts on whether this is the correct  approach, because I felt like i should've created two new variables on the universe instead of creating placeholder types</p>",
        "id": 179675671,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1572653150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> hmm so good questions :) let me circle back to you on this</p>",
        "id": 179863604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894143
    },
    {
        "content": "<p>OK so <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> we have to equate the <code>dyn</code> and <code>impl</code> types...</p>",
        "id": 179878979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572903225
    },
    {
        "content": "<p>I think that in the <em>particular case</em> of the <code>Self</code> binder</p>",
        "id": 179879011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572903242
    },
    {
        "content": "<p>we can take a simpler approach</p>",
        "id": 179879052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572903252
    },
    {
        "content": "<p>precisely because we know there is exactly one parameter</p>",
        "id": 179879083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572903275
    },
    {
        "content": "<p>oh, huh.</p>",
        "id": 179883112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572905935
    },
    {
        "content": "<p>reading the existing unification logic...I ... feel like there is a bug here</p>",
        "id": 179883150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572905944
    },
    {
        "content": "<p>...yep...</p>",
        "id": 179883304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572906034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> I wrote up in detail what needs to be done as <a href=\"https://github.com/rust-lang-nursery/chalk/issues/275\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/275\">chalk#275</a></p>",
        "id": 179884395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572906808
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> -- have you had a chance to take a look at this? if not, I might take a swing at it later on</p>",
        "id": 180458987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573505625
    },
    {
        "content": "<p>not really, i've only looked briefly  at the issue</p>",
        "id": 180459041,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1573505649
    },
    {
        "content": "<p>not so much into the code</p>",
        "id": 180459046,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1573505655
    }
]