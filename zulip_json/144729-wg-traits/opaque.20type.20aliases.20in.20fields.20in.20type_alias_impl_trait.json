[
    {
        "content": "<p>In <a href=\"https://github.com/rust-lang/rust/issues/86732\">#86732</a> we wanted to forbid impl trait type aliases in fields of structs, enums and unions in <code>min_type_alias_impl_trait</code>. Since we now plan to transition directly to <code>type_alias_impl_trait</code>, do we still want to reject them in fields? If not, what changes do we need to make to allow them in those positions?</p>",
        "id": 247303244,
        "sender_full_name": "BN",
        "timestamp": 1627371864
    },
    {
        "content": "<p>That's the beautiful thing with the new scheme that I'm building right now: No additional changes are needed, these will just work. I don't think we'll support <code>struct Foo { x: impl Debug }</code> for now, but <code>type Bar = impl Debug; struct Foo { x: Bar }</code> will just work</p>",
        "id": 247326315,
        "sender_full_name": "oli",
        "timestamp": 1627389012
    },
    {
        "content": "<p>Why would the type alias work, but not impl trait?</p>",
        "id": 247329740,
        "sender_full_name": "BN",
        "timestamp": 1627391000
    },
    {
        "content": "<p>well, it depends on what behaviour you expect from it. Is <code>fn foo(y: Foo) { let a: i32 = y.x; }</code> a defining use? or only <code>fn foo(mut y: Foo) { y.x = 42_i32; }</code>? This gets weird really fast, because the type system is (safe for diagnostics) commutative. So whether you compare <code>a == b</code> or <code>b == a</code> doesn't matter.</p>",
        "id": 247331596,
        "sender_full_name": "oli",
        "timestamp": 1627391950
    },
    {
        "content": "<p>this was the reason <code>impl_trait_in_bindings</code> was so horribly broken (like 10 open issues that ICEd the compiler)</p>",
        "id": 247331650,
        "sender_full_name": "oli",
        "timestamp": 1627391988
    },
    {
        "content": "<p>We'll need to figure out what we actually want/need</p>",
        "id": 247331729,
        "sender_full_name": "oli",
        "timestamp": 1627392009
    }
]