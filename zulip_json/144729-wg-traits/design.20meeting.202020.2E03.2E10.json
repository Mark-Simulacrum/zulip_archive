[
    {
        "content": "<p>Design meeting starts in 10 minutes</p>",
        "id": 190216727,
        "sender_full_name": "detrumi",
        "timestamp": 1583869807
    },
    {
        "content": "<p>I forget, do we have a hackmd doc or something that we use for minutes/agendas? (Maybe that'd be useful:)</p>",
        "id": 190217302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870128
    },
    {
        "content": "<p>e.g., I could imagine collecting the agenda for each week in a fixed doc and then linking to the actual discussion thread</p>",
        "id": 190217327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870148
    },
    {
        "content": "<p>(this would allow us to accumulate agenda questions a bit over the week)</p>",
        "id": 190217389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870167
    },
    {
        "content": "<p>and/or write out updates when things happen</p>",
        "id": 190217452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870197
    },
    {
        "content": "<p>That's a good idea, let's set one up for next week</p>",
        "id": 190217527,
        "sender_full_name": "detrumi",
        "timestamp": 1583870245
    },
    {
        "content": "<p>We don't have one at the moment</p>",
        "id": 190217558,
        "sender_full_name": "detrumi",
        "timestamp": 1583870271
    },
    {
        "content": "<p>hackmd or paper?</p>",
        "id": 190217644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870302
    },
    {
        "content": "<p>the eternal question</p>",
        "id": 190217687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870338
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://media.giphy.com/media/xUPGcvSRiAdLz4UGoE/giphy.gif\" target=\"_blank\" title=\"https://media.giphy.com/media/xUPGcvSRiAdLz4UGoE/giphy.gif\"><img src=\"https://media.giphy.com/media/xUPGcvSRiAdLz4UGoE/giphy.gif\"></a></div><p>\"hackmd, or paper?\"</p>",
        "id": 190217726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870368
    },
    {
        "content": "<p>I think hackmd is better for longer-lived documents, and paper is better for fast iteration</p>",
        "id": 190217747,
        "sender_full_name": "detrumi",
        "timestamp": 1583870383
    },
    {
        "content": "<p>my experience: paper is better if people might leave comments</p>",
        "id": 190217768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870398
    },
    {
        "content": "<p>but there's not that much difference <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 190217771,
        "sender_full_name": "detrumi",
        "timestamp": 1583870399
    },
    {
        "content": "<p>but yeah, indeed :)</p>",
        "id": 190217794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870404
    },
    {
        "content": "<p>let's go with hackmd because</p>",
        "id": 190217824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870408
    },
    {
        "content": "<p>it'll be something we can copy and paste into zulip :)</p>",
        "id": 190217841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870416
    },
    {
        "content": "<p>e.g. for compiler team updates and the like</p>",
        "id": 190217862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870429
    },
    {
        "content": "<p><a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?sync=&amp;type=\" target=\"_blank\" title=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?sync=&amp;type=\">https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?sync=&amp;type=</a></p>",
        "id": 190217919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870464
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> meeting time</p>",
        "id": 190217928,
        "sender_full_name": "detrumi",
        "timestamp": 1583870476
    },
    {
        "content": "<p>I'm filling in some details into the hackmd</p>",
        "id": 190218039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> and <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> -- I never got time to look into the impl trait integration work y'all did</p>",
        "id": 190218341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870745
    },
    {
        "content": "<p>do you think we might be able to talk about it here some?</p>",
        "id": 190218345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870750
    },
    {
        "content": "<p>I didn't have time to implement Florian's suggestions yet, but he did point out some problems with the PR</p>",
        "id": 190218452,
        "sender_full_name": "detrumi",
        "timestamp": 1583870809
    },
    {
        "content": "<p>OK, it's mostly that I thought it'd be interesting to discuss how things are expected to work</p>",
        "id": 190218480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870836
    },
    {
        "content": "<p>One announcement worth making: last week we had a compiler team design meeting where we discussed the idea of extracting out the representation of types to create a shared library that chalk, rust-analyzer, and rustc can all use</p>",
        "id": 190218521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870871
    },
    {
        "content": "<p>In integrating with RA you mean? Sounds good</p>",
        "id": 190218522,
        "sender_full_name": "detrumi",
        "timestamp": 1583870874
    },
    {
        "content": "<p>Sorry, late</p>",
        "id": 190218531,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583870882
    },
    {
        "content": "<p>Yeah, I'm sort of imagining this meeting as a place to (a) raise questions and (b) discuss interesting design points so that the whole group can kind of \"keep up\" with what's going on</p>",
        "id": 190218585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870898
    },
    {
        "content": "<p>(sketch of maybe how we should manage our agenda: 10-15 minutes of announcements / updating doc, then pick two topics for spend 20 min on each?)</p>",
        "id": 190218616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870932
    },
    {
        "content": "<p>I think that's usually what it ends up being?</p>",
        "id": 190218641,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583870948
    },
    {
        "content": "<p>Or one topic of 40 minutes</p>",
        "id": 190218658,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583870957
    },
    {
        "content": "<p>having at least 2 topics feels more productive, unless there's a big blocker</p>",
        "id": 190218712,
        "sender_full_name": "detrumi",
        "timestamp": 1583870993
    },
    {
        "content": "<p>I guess it depends on if we have 2 topics</p>",
        "id": 190218764,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583871006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E10/near/190218641\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E10/near/190218641\">said</a>:</p>\n<blockquote>\n<p>I think that's usually what it ends up being?</p>\n</blockquote>\n<p>yes i'm partly just trying to \"state out loud\" the structure we seem to be evolving</p>",
        "id": 190218798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871033
    },
    {
        "content": "<p>I've got 3 nominated topics in <a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?edit\" target=\"_blank\" title=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?edit\">the hackmd</a> so far :P</p>",
        "id": 190218815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871050
    },
    {
        "content": "<p>though I suspect I'm missing some progress reports</p>",
        "id": 190218875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871105
    },
    {
        "content": "<p>oh, I guess there's the work I did</p>",
        "id": 190218881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871109
    },
    {
        "content": "<p>based on the work that <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> did, i'm updating the roadmap.toml to mark \"add <code>&amp;self</code> to interning methods\" as completely done</p>",
        "id": 190219031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871199
    },
    {
        "content": "<p>seems like the next bit of work is adding <code>&amp;self</code> to the data methods</p>",
        "id": 190219036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871205
    },
    {
        "content": "<p>I know there's a WIP PR for that, not sure if there are open questions</p>",
        "id": 190219060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871220
    },
    {
        "content": "<p>there are open questions</p>",
        "id": 190219077,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871234
    },
    {
        "content": "<p>I'm super happy for that work to land, because it means I don't have to do lifetime transmute in the integration</p>",
        "id": 190219083,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583871237
    },
    {
        "content": "<p>(Side not that I feel like, ideally, we'd have \"sprint goals\" that we could be checking in on and updating progress notes.)</p>",
        "id": 190219134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871248
    },
    {
        "content": "<p>i smacked a bunch of <code>unimplemented!()</code> calls in places where i wasnt sure how it should be handled</p>",
        "id": 190219135,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871248
    },
    {
        "content": "<p>like display impls</p>",
        "id": 190219139,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871251
    },
    {
        "content": "<p>I figured we probably need a wrapper struct to bundle the interner with the object for displaying like <code>Path</code></p>",
        "id": 190219168,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871267
    },
    {
        "content": "<p>so we could do <code>type.display(interner)</code> when we want to print it</p>",
        "id": 190219190,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871281
    },
    {
        "content": "<p>things like that</p>",
        "id": 190219198,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871287
    },
    {
        "content": "<p>fyi just merged the last of the PRs for <a href=\"https://github.com/rust-lang-nursery/chalk/issues/340\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/340\">chalk#340</a> and closed the issue</p>",
        "id": 190219204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871292
    },
    {
        "content": "<p>awesome</p>",
        "id": 190219227,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871313
    },
    {
        "content": "<p>ok, let me add a few notes on that to the doc -- I can try to make some time to review the PR later and leave comments</p>",
        "id": 190219232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871316
    },
    {
        "content": "<p>okay</p>",
        "id": 190219240,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871324
    },
    {
        "content": "<p>you mentioned a roadmap.toml</p>",
        "id": 190219269,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871349
    },
    {
        "content": "<p>where does that live?</p>",
        "id": 190219274,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871351
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\" target=\"_blank\" title=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\">https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html</a></p>",
        "id": 190219283,
        "sender_full_name": "detrumi",
        "timestamp": 1583871358
    },
    {
        "content": "<p>The toml itself is in the wg-traits repo: <a href=\"https://github.com/rust-lang/wg-traits/blob/master/roadmap.toml\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-traits/blob/master/roadmap.toml\">https://github.com/rust-lang/wg-traits/blob/master/roadmap.toml</a></p>",
        "id": 190219368,
        "sender_full_name": "detrumi",
        "timestamp": 1583871391
    },
    {
        "content": "<p>yep, I try to update it in response to these meetings</p>",
        "id": 190219384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871403
    },
    {
        "content": "<p>though I think my last update kind of messed up the rendering :)</p>",
        "id": 190219398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871411
    },
    {
        "content": "<p>need some line breaks</p>",
        "id": 190219400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871413
    },
    {
        "content": "<p>trying not to yah shake <em>too</em> badly on making it pretty</p>",
        "id": 190219416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871426
    },
    {
        "content": "<p>though...it does need a bit of shaving</p>",
        "id": 190219422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871429
    },
    {
        "content": "<p>oh, hmm, it looks better than I remembered, maybe somebody did some fixing :)</p>",
        "id": 190219445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871447
    },
    {
        "content": "<p>Ok, so as far topics for today?</p>",
        "id": 190219451,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583871451
    },
    {
        "content": "<ul>\n<li>\n<p>Design meeting of compiler to discuss extracting a rust-ty library -- nikomatsakis<br>\n    * How does this work interact with this group? Maybe a good thing for next sprint</p>\n</li>\n<li>\n<p>How to handle debruijn and type parameter indexing?<br>\n    * building on <a href=\"https://gist.github.com/fe440aec437f7e8ad4cce8319954a973\" target=\"_blank\" title=\"https://gist.github.com/fe440aec437f7e8ad4cce8319954a973\">the gist</a> that I wrote, I'm not sure what to do</p>\n</li>\n<li>\n<p>Expected pattern for integrating impl Trait into rust-analyzer etc -- nikomatsakis<br>\n    * I'd like to understand better what detrumi + flodiebold were discussing -- nikomatsakis</p>\n</li>\n<li>\n<p>rustc integration: <code>TypeOutlives</code>, <code>RegionOutlives</code>, <code>Subtype</code></p>\n</li>\n</ul>",
        "id": 190219459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871461
    },
    {
        "content": "<p>that's the list from the doc</p>",
        "id": 190219468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871465
    },
    {
        "content": "<p>hmm</p>",
        "id": 190219547,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583871494
    },
    {
        "content": "<p>I think we should leave the first point for next week, and plan for the next sprint then</p>",
        "id": 190219561,
        "sender_full_name": "detrumi",
        "timestamp": 1583871504
    },
    {
        "content": "<p>agreed</p>",
        "id": 190219579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583871511
    },
    {
        "content": "<p>I agree</p>",
        "id": 190219580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871512
    },
    {
        "content": "<p>I had suggested the third point because</p>",
        "id": 190219595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871523
    },
    {
        "content": "<p>it was relatively concrete</p>",
        "id": 190219609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871530
    },
    {
        "content": "<p>last point I think <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and I can talk about in other thread</p>",
        "id": 190219616,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583871537
    },
    {
        "content": "<p>so maybe let's start there...</p>",
        "id": 190219649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871553
    },
    {
        "content": "<p>I'm also curious about impl Trait :)</p>",
        "id": 190219660,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583871558
    },
    {
        "content": "<p>So, on impl Trait...</p>",
        "id": 190219662,
        "sender_full_name": "detrumi",
        "timestamp": 1583871558
    },
    {
        "content": "<p>The discussion we had was mainly about things missing in my PR</p>",
        "id": 190219671,
        "sender_full_name": "detrumi",
        "timestamp": 1583871567
    },
    {
        "content": "<p>Because it didn't allow for some things like binders and trait bounds (e.g. <code>impl Iterator&lt;Item = T&gt;</code>)</p>",
        "id": 190219702,
        "sender_full_name": "detrumi",
        "timestamp": 1583871591
    },
    {
        "content": "<p>Hmm</p>",
        "id": 190219759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871604
    },
    {
        "content": "<p>not to distract but what do we mean by \"Model <code>impl Trait</code>\"</p>",
        "id": 190219771,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871615
    },
    {
        "content": "<p>Not a distraction at all :) goal of discussing is precisely to answer questions like that (and get us all on same page)</p>",
        "id": 190219803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871644
    },
    {
        "content": "<p>if its too big of a topic I dont mind asking in a diff thread</p>",
        "id": 190219810,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871650
    },
    {
        "content": "<p>okay</p>",
        "id": 190219817,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871656
    },
    {
        "content": "<p>basically the question is -- if you have rust code with impl Trait, what role does chalk have in compiling that?</p>",
        "id": 190219854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871680
    },
    {
        "content": "<p>impl Trait meaning an implementation of an arbitrary trait for an arbitrary type / generic?</p>",
        "id": 190219882,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871706
    },
    {
        "content": "<p>impl Trait like the return type</p>",
        "id": 190219937,
        "sender_full_name": "detrumi",
        "timestamp": 1583871726
    },
    {
        "content": "<p>i see i see</p>",
        "id": 190219940,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871727
    },
    {
        "content": "<p>impl Trait meaning things like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 190219941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871727
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/stable/rust-by-example/trait/impl_trait.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/stable/rust-by-example/trait/impl_trait.html\">https://doc.rust-lang.org/stable/rust-by-example/trait/impl_trait.html</a></p>",
        "id": 190219944,
        "sender_full_name": "detrumi",
        "timestamp": 1583871729
    },
    {
        "content": "<p>ooooo</p>",
        "id": 190219949,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871730
    },
    {
        "content": "<p>yey e</p>",
        "id": 190219960,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871738
    },
    {
        "content": "<p>im familiar</p>",
        "id": 190219968,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871743
    },
    {
        "content": "<p>is it specifically return type impl trait?</p>",
        "id": 190219986,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871753
    },
    {
        "content": "<p>which desugars to something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>where the compiler infers what the concrete type <code>Foo</code> is</p>",
        "id": 190219987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871754
    },
    {
        "content": "<p>this is existential qualification vs universal right?</p>",
        "id": 190220081,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871778
    },
    {
        "content": "<p>argument position should be possible as well, but just supporting return position at first is fine too</p>",
        "id": 190220088,
        "sender_full_name": "detrumi",
        "timestamp": 1583871782
    },
    {
        "content": "<p>not sure if qualification or quantification</p>",
        "id": 190220099,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871789
    },
    {
        "content": "<p>manish has explained this to me before</p>",
        "id": 190220105,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871793
    },
    {
        "content": "<p>\"existential\"</p>",
        "id": 190220121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871803
    },
    {
        "content": "<p>yea</p>",
        "id": 190220124,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871808
    },
    {
        "content": "<p>argument position is actually just sugar for normal generics</p>",
        "id": 190220127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871810
    },
    {
        "content": "<p>return position is existential because its determined by the callee</p>",
        "id": 190220133,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871817
    },
    {
        "content": "<p>right</p>",
        "id": 190220139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871824
    },
    {
        "content": "<p>k continue</p>",
        "id": 190220152,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871830
    },
    {
        "content": "<p>in any case from <em>Chalk's</em> point of view the \"core abstraction\" is basically that you have a declared <code>impl Trait</code> type, like <code>type Foo = impl Trait</code></p>",
        "id": 190220169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871840
    },
    {
        "content": "<p>except that right now what <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> has implemented is a bit different--</p>",
        "id": 190220238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871860
    },
    {
        "content": "<p>in that chalk is also told what the <em>hidden type</em> is (i.e., the type that the compiler infers)</p>",
        "id": 190220262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871875
    },
    {
        "content": "<p>(I think that one of the next steps we need to discuss is how/where that inference takes place and what role chalk has in that)</p>",
        "id": 190220294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871899
    },
    {
        "content": "<p>so sneaky</p>",
        "id": 190220295,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583871899
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> so you were saying that bounds like <code>impl Iterator&lt;Item = u32&gt;</code> are not supported,</p>",
        "id": 190220322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871917
    },
    {
        "content": "<p>I wans't clear if there was a plan there? It seems like something we should be able to support I think</p>",
        "id": 190220355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583871948
    },
    {
        "content": "<p>Yes, but that should be as easy as updating the <a href=\"https://github.com/rust-lang/chalk/pull/324/files#diff-3755a68ff1da787d17a42bf27b745aabR425\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/324/files#diff-3755a68ff1da787d17a42bf27b745aabR425\"><code>ImplTraitDatum</code></a></p>",
        "id": 190220426,
        "sender_full_name": "detrumi",
        "timestamp": 1583871978
    },
    {
        "content": "<p>also egads we didn't merge <a href=\"https://github.com/rust-lang-nursery/chalk/issues/324\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/324\">chalk#324</a> yet?! :)</p>",
        "id": 190220467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872013
    },
    {
        "content": "<p>for some reason I thought we did</p>",
        "id": 190220491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872030
    },
    {
        "content": "<p>The bounds shouldn't be just <code>Vec&lt;TraitBound&lt;I&gt;&gt;</code>, but something using <code>QuantifiedWhereClause</code></p>",
        "id": 190220498,
        "sender_full_name": "detrumi",
        "timestamp": 1583872034
    },
    {
        "content": "<p>yeah ok that's kind of what I would expect</p>",
        "id": 190220516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872050
    },
    {
        "content": "<p>Oh, I thought you wanted to review it still?</p>",
        "id": 190220526,
        "sender_full_name": "detrumi",
        "timestamp": 1583872056
    },
    {
        "content": "<p>But merging would be nice too</p>",
        "id": 190220535,
        "sender_full_name": "detrumi",
        "timestamp": 1583872061
    },
    {
        "content": "<p>well I think I thought I reviewed it :)</p>",
        "id": 190220554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872072
    },
    {
        "content": "<p>I will do so!</p>",
        "id": 190220560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/impl.20trait/near/189893382\" title=\"#narrow/stream/144729-wg-traits/topic/impl.20trait/near/189893382\">said</a>:</p>\n<blockquote>\n<p>ok I failed <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> let me try again</p>\n</blockquote>\n<p>You tried a few times <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 190220631,
        "sender_full_name": "detrumi",
        "timestamp": 1583872107
    },
    {
        "content": "<p>lol sigh</p>",
        "id": 190220653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872121
    },
    {
        "content": "<p>Should've reminded you more often I guess</p>",
        "id": 190220665,
        "sender_full_name": "detrumi",
        "timestamp": 1583872133
    },
    {
        "content": "<p>so I guess the thing that I wanted to figure out is</p>",
        "id": 190220704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872159
    },
    {
        "content": "<p>let's say you're rust-analyzer</p>",
        "id": 190220712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872165
    },
    {
        "content": "<p>and you have some Rust code like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 190220729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872180
    },
    {
        "content": "<p>at the moment, when type-checking code <strong>from outside the module</strong> (or at least, code that invokes <code>foo</code>), we're kind of \"all set\" in some sense. This is because, for that code, they want to use <code>Foo</code> as an opaque type.</p>",
        "id": 190220839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872225
    },
    {
        "content": "<p>The way that rustc works now, we will type-check <code>foo</code>, which will infer the hidden type for <code>Foo</code></p>",
        "id": 190220870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872241
    },
    {
        "content": "<p>but what we haven't kind of talked through is what rust-analyzer should be doing in order to infer that hidden type -- i.e., when type-checking the body of <code>foo</code>, and we don't know the hidden type for <code>Foo</code> yet, etc</p>",
        "id": 190220954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872284
    },
    {
        "content": "<p>maybe I should have chosen more unique names :P</p>",
        "id": 190220976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872298
    },
    {
        "content": "<p>I'm not sure if that's something that <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> plus you discussed at all yet?</p>",
        "id": 190221012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872320
    },
    {
        "content": "<p>For rust-analyzer it's kinda problematic that they have to go through the function body to get the hidden type</p>",
        "id": 190221071,
        "sender_full_name": "detrumi",
        "timestamp": 1583872338
    },
    {
        "content": "<p>(It occurs to me that a useful thing to do might be to go try to write out what rustc does now, too. Would make a nice addition to the rusc-dev-guide, assuming it's not already written down.)</p>",
        "id": 190221082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E10/near/190221012\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E10/near/190221012\">said</a>:</p>\n<blockquote>\n<p>I'm not sure if that's something that <span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> plus you discussed at all yet?</p>\n</blockquote>\n<p>We did discuss that a bit</p>",
        "id": 190221085,
        "sender_full_name": "detrumi",
        "timestamp": 1583872349
    },
    {
        "content": "<p>(There are some aspects that I think are not necessarily the behavior we want long term.)</p>",
        "id": 190221108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872371
    },
    {
        "content": "<p>Side note: there's already a <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3446\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3446\">rust-analyzer PR</a> with some open todo's for integrating chalk into rust-analyzer</p>",
        "id": 190221144,
        "sender_full_name": "detrumi",
        "timestamp": 1583872397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E10/near/190221071\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E10/near/190221071\">said</a>:</p>\n<blockquote>\n<p>For rust-analyzer it's kinda problematic that they have to go through the function body to get the hidden type</p>\n</blockquote>\n<p>So, hmm,</p>",
        "id": 190221151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872407
    },
    {
        "content": "<p>you only need the hidden type because of \"auto trait leakage\"</p>",
        "id": 190221165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872415
    },
    {
        "content": "<p>(presuming we're not in <code>Reveal</code> mode)</p>",
        "id": 190221180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> mentioned that, but I'm not entirely up to speed with that</p>",
        "id": 190221241,
        "sender_full_name": "detrumi",
        "timestamp": 1583872447
    },
    {
        "content": "<p>with auto-trait leakage? does everybody know what I mean by that?</p>",
        "id": 190221271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872466
    },
    {
        "content": "<p>auto traits make things difficult</p>",
        "id": 190221274,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583872466
    },
    {
        "content": "<p>i.e., if you have a function like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">do_something</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and then you invoke</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>then the type of <code>x</code> will be the \"opaque type\" that is returned by <code>do_something</code></p>",
        "id": 190221372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872557
    },
    {
        "content": "<p>i think you've explained it but I dont recall</p>",
        "id": 190221373,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583872558
    },
    {
        "content": "<p>i wouldn't mind a refresher</p>",
        "id": 190221383,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583872562
    },
    {
        "content": "<p>so if (approximately) desugar into</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">type</span> <span class=\"nc\">DoSomething</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">do_something</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">DoSomething</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 190221465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872606
    },
    {
        "content": "<p>then the type of <code>x</code> would be <code>DoSomething&lt;i32&gt;</code></p>",
        "id": 190221496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872633
    },
    {
        "content": "<p>(make sense so far?)</p>",
        "id": 190221501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872639
    },
    {
        "content": "<p>yea this is all existentials</p>",
        "id": 190221535,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583872649
    },
    {
        "content": "<p>in other words, all we know about <code>x</code> is that it implements <code>Iterator</code>-- except that's not quite right</p>",
        "id": 190221544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872657
    },
    {
        "content": "<p>in general, you can't see the underling type -- but we allow auto traits to see it</p>",
        "id": 190221556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872669
    },
    {
        "content": "<p>so notably <code>DoSomething&lt;i32&gt;: Send</code> is true if the hidden type implements <code>Send</code></p>",
        "id": 190221578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872683
    },
    {
        "content": "<p>this is very convenient but also kind of annoying from an impl POV :)</p>",
        "id": 190221637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872705
    },
    {
        "content": "<p>in terms of the chalk desugaring, it shows up the rules we create</p>",
        "id": 190221677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872746
    },
    {
        "content": "<p>Right. As I put it <a href=\"https://github.com/rust-lang/chalk/pull/324/files#diff-265f2474acd1cd36ff4847e8c1f3cc89R122\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/324/files#diff-265f2474acd1cd36ff4847e8c1f3cc89R122\">in the PR</a>:</p>\n<div class=\"codehilite\"><pre><span></span>Given `opaque type T&lt;..&gt;: A + B = HiddenTy;`, we generate:\n    ```\nAliasEq(T&lt;..&gt; = HiddenTy) :- Reveal.\nAliasEq(T&lt;..&gt; = !T).\nImplemented(!T: A).\nImplemented(!T: B).\nImplemented(!T: Send) :- Implemented(A + B: Send). // For all auto traits\n```\nwhere `!T` is the placeholder for the unnormalized type `T&lt;..&gt;`.\n</pre></div>",
        "id": 190221889,
        "sender_full_name": "detrumi",
        "timestamp": 1583872839
    },
    {
        "content": "<p>I expected</p>\n<div class=\"codehilite\"><pre><span></span>Implemented(!T: Send) :- Implemented(HiddenTy: Send).\n</pre></div>",
        "id": 190221990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872900
    },
    {
        "content": "<p>I'm not super familiar with prolog syntax, what does <code>:-</code> mean again?</p>",
        "id": 190222148,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583872986
    },
    {
        "content": "<p>Yeah that makes snense</p>",
        "id": 190222162,
        "sender_full_name": "detrumi",
        "timestamp": 1583872991
    },
    {
        "content": "<p>\"if\"</p>",
        "id": 190222165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583872991
    },
    {
        "content": "<p>tyty</p>",
        "id": 190222177,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583873003
    },
    {
        "content": "<p>in other words, <code>Implemented(!T: A).</code> means \"we know that the opaque type implements <code>A</code>\", and <code>Implemented(!T: Send) :- Implemented(HiddenTy: Send)</code> means \"we know that the opaque type implements <code>Send</code> if the hidden type implements <code>Send</code>\"</p>",
        "id": 190222253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> one thing I was thinking is that we might make the \"hidden type\" not be part of the datum</p>",
        "id": 190222311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873049
    },
    {
        "content": "<p>but rather be something that we request lazilly through the <code>RustIrDatabase</code> trait</p>",
        "id": 190222330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873063
    },
    {
        "content": "<p>why is the <code>!</code> there?</p>",
        "id": 190222331,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583873064
    },
    {
        "content": "<p>ooh normalized</p>",
        "id": 190222340,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583873072
    },
    {
        "content": "<p>comment at the bottom</p>",
        "id": 190222343,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583873073
    },
    {
        "content": "<p>that means \"placeholder\"</p>",
        "id": 190222350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873078
    },
    {
        "content": "<p>got it</p>",
        "id": 190222359,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583873080
    },
    {
        "content": "<p>so <code>?X</code> is like \"a variable X whose value we have to figure out\" and <code>!X</code> is \"a variable X that we are using as a placeholder\"</p>",
        "id": 190222387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873103
    },
    {
        "content": "<p>and <code>X</code> is like \"some concrete type <code>X</code>\"</p>",
        "id": 190222401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873110
    },
    {
        "content": "<p>and then there's bound vars (<code>^0</code>)</p>",
        "id": 190222457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873154
    },
    {
        "content": "<p>whats the difference between a placeholder and a type to be figured out, is a placeholder one thats already been figured out?</p>",
        "id": 190222471,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583873162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E10/near/190222311\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E10/near/190222311\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> one thing I was thinking is that we might make the \"hidden type\" not be part of the datum</p>\n</blockquote>\n<p>Hmm, not sure if you can still identify it then</p>",
        "id": 190222523,
        "sender_full_name": "detrumi",
        "timestamp": 1583873170
    },
    {
        "content": "<p>no, a placeholder is one that we don't try to figure it out</p>",
        "id": 190222535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873175
    },
    {
        "content": "<p>ah okay</p>",
        "id": 190222540,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583873180
    },
    {
        "content": "<p>think of it like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>when type-checking the body of <code>foo</code>, we use <code>T</code> as a placeholder type</p>",
        "id": 190222570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873197
    },
    {
        "content": "<p>ooh and that makes the AliasEq stuff make sense too</p>",
        "id": 190222608,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583873228
    },
    {
        "content": "<p>you setup the placeholder when not in reveal mode</p>",
        "id": 190222618,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583873233
    },
    {
        "content": "<p>right, but in reveal mode you can also use the hidden type</p>",
        "id": 190222639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873249
    },
    {
        "content": "<p>and otherwise those facts(?) below it for the placeholder arent needed because then you're checking against the type itself</p>",
        "id": 190222651,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583873258
    },
    {
        "content": "<p>exactly</p>",
        "id": 190222661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873265
    },
    {
        "content": "<p>cool</p>",
        "id": 190222676,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583873277
    },
    {
        "content": "<p>we know they should be true for the hidden type too (or something went wrong along the line)</p>",
        "id": 190222679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873277
    },
    {
        "content": "<p>Ok, 12 minutes left</p>",
        "id": 190222741,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873293
    },
    {
        "content": "<p>Do we want to stay on impl Trait or switch?</p>",
        "id": 190222753,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873300
    },
    {
        "content": "<p>Right, I think we'll get there once niko finally ( <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span>) reviews it. Next!</p>",
        "id": 190222766,
        "sender_full_name": "detrumi",
        "timestamp": 1583873315
    },
    {
        "content": "<p>Do we want to talk about niko's progress?</p>",
        "id": 190222802,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E10/near/190222523\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E10/near/190222523\">said</a>:</p>\n<blockquote>\n<p>Hmm, not sure if you can still identify it then</p>\n</blockquote>\n<p>I think you could but I realize it's a small thing. Mostly I was thinking about \"before we figure out everything, it'd be good to help rust-analyzer be able to work with code without specifying what the hidden type is\", but I think it's kind of a distraction.</p>",
        "id": 190222809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873348
    },
    {
        "content": "<p>on debruijn indices</p>",
        "id": 190222825,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873356
    },
    {
        "content": "<p>(always have to double check I spell it correctly )</p>",
        "id": 190222851,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873381
    },
    {
        "content": "<p>either way is ok for me. I'll try to review the PR maybe after this mtg</p>",
        "id": 190222865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873392
    },
    {
        "content": "<p>after the meeting im gonna go ahead and fix the unimplemented!s for the DIsplay impls</p>",
        "id": 190222951,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583873419
    },
    {
        "content": "<p>so dont worry about reviewing the other PRs right away</p>",
        "id": 190222961,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583873425
    },
    {
        "content": "<p>I think the high-level bit for the debruijn index refactoring is that I'm not quite sure what setup we really want, and I'm not that convinced that I was going down the right path</p>",
        "id": 190222969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873432
    },
    {
        "content": "<p>There was <a href=\"https://gist.github.com/nikomatsakis/fe440aec437f7e8ad4cce8319954a973\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/fe440aec437f7e8ad4cce8319954a973\">this gist</a></p>",
        "id": 190223004,
        "sender_full_name": "detrumi",
        "timestamp": 1583873465
    },
    {
        "content": "<p>So I read through the gist</p>",
        "id": 190223005,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873465
    },
    {
        "content": "<p>but was unclear about what the question was?</p>",
        "id": 190223018,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873474
    },
    {
        "content": "<p>heh, yeah, I guess in some sense I didn't get there yet</p>",
        "id": 190223041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873488
    },
    {
        "content": "<p>I'm trying to page back in a bit</p>",
        "id": 190223073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873513
    },
    {
        "content": "<p>I think before you were in the camp that \"the way rustc does it is better\"</p>",
        "id": 190223083,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873518
    },
    {
        "content": "<p>Yeah, and I was second guessing that somewhat</p>",
        "id": 190223143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873533
    },
    {
        "content": "<p>I guess there's a couple things that are different</p>",
        "id": 190223159,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873543
    },
    {
        "content": "<p>But also that making this change would actually make it <em>easier</em> to bridge between rustc and chalk</p>",
        "id": 190223175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873559
    },
    {
        "content": "<p>one I guess is how we \"name\" or keep track of binders</p>",
        "id": 190223218,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873582
    },
    {
        "content": "<p>I guess there are a few \"timelines\". Ultimately, I'd like to be using <em>the same representation</em></p>",
        "id": 190223245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873596
    },
    {
        "content": "<p>so there is no real \"bridging\"</p>",
        "id": 190223265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873606
    },
    {
        "content": "<p>also just fyi I am going to have to leave at or very shortly after 5</p>",
        "id": 190223292,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873623
    },
    {
        "content": "<p>We could go with rustc's approach and switch later if it ends up becoming a problem</p>",
        "id": 190223362,
        "sender_full_name": "detrumi",
        "timestamp": 1583873649
    },
    {
        "content": "<p>I have to think about what that means, I guess. I like how chalk handles all bindings and variables in a uniform way</p>",
        "id": 190223419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873690
    },
    {
        "content": "<p>anywa I guess there isn't really time to reach  a conclusion here</p>",
        "id": 190223455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873713
    },
    {
        "content": "<p>I guess that this week I will try to finish the gist and leave a few options</p>",
        "id": 190223480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873730
    },
    {
        "content": "<p>so, my opinion so far (which I still in not sure) it doesn't seem like a problem to name bound vars as <code>^0.0</code> (instead of the chalk way of <code>^0</code>)</p>",
        "id": 190223508,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873746
    },
    {
        "content": "<p>I am trying to remember what gave me pause. I think the main thing was that</p>",
        "id": 190223589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873773
    },
    {
        "content": "<p>but that it seems better to track the number of bound vars at each level</p>",
        "id": 190223597,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873777
    },
    {
        "content": "<p>when you had GATs</p>",
        "id": 190223608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873780
    },
    {
        "content": "<p>(which isn't done currently?)</p>",
        "id": 190223625,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873789
    },
    {
        "content": "<p>so e.g. you have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 190223651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873801
    },
    {
        "content": "<p>both chalk and rustc today effectively combine the <code>SElf, X</code> parameters into a single continuous list</p>",
        "id": 190223706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873826
    },
    {
        "content": "<p>but that gets done in different ways, and in a different ordering</p>",
        "id": 190223721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873832
    },
    {
        "content": "<p>yeah, there's a FIXME somewhere in <code>chalk-rust-ir</code> I think to switch that</p>",
        "id": 190223777,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873870
    },
    {
        "content": "<p>if we change to the <code>^X.Y</code> format, then it means that the \"type parameters\" that are in scope for <code>Foo::Bar</code> are coming from two distinct binding levels now</p>",
        "id": 190223783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873874
    },
    {
        "content": "<p>I think that makes sense?</p>",
        "id": 190223854,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583873902
    },
    {
        "content": "<p>which implies a certain amount of \"translation\" here or there or somewhere :)</p>",
        "id": 190223856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873905
    },
    {
        "content": "<p>well, right now if you have e.g. the alias placeholder for <code>Foo::Bar</code>, it has a single <code>Parametesr</code> list</p>",
        "id": 190223889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873927
    },
    {
        "content": "<p>which is a flat list of types</p>",
        "id": 190223897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873933
    },
    {
        "content": "<p>this works for a <code>^X</code>, it can just index into that list</p>",
        "id": 190223924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873947
    },
    {
        "content": "<p>but for <code>^x.Y</code>, we sort of want a <code>Parameters</code> list with two segments</p>",
        "id": 190223962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583873967
    },
    {
        "content": "<p>we can figure out the length of each segment by looking at how many type parameters the trait has, but it is more complex, and it makes that sort of substitution \"different\", so it suggests (to me) that <code>Parameters</code> might want to be more than a flat list</p>",
        "id": 190224031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583874006
    },
    {
        "content": "<p>which might be kind of nice, since right now we have some special code in various places that converts a <code>Parameters</code> from a flat list into two lists</p>",
        "id": 190224099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583874028
    },
    {
        "content": "<p>right</p>",
        "id": 190224109,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583874037
    },
    {
        "content": "<p>in <code>split.rs</code></p>",
        "id": 190224113,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583874041
    },
    {
        "content": "<p>but it's also a big departure from rustc</p>",
        "id": 190224123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583874046
    },
    {
        "content": "<p>which would currently map <code>Parameters</code> to the <code>Substs</code> structure, which is a flat list</p>",
        "id": 190224166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583874076
    },
    {
        "content": "<p>so anyway I think this is the conflict I didn't <em>quite</em> get to writing up</p>",
        "id": 190224193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583874090
    },
    {
        "content": "<p>hmm</p>",
        "id": 190224212,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583874101
    },
    {
        "content": "<p>but it's 5:01pm</p>",
        "id": 190224236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583874119
    },
    {
        "content": "<p>andI think you said you had a hard stop :)</p>",
        "id": 190224285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583874135
    },
    {
        "content": "<p>Gotta run <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 190224302,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583874136
    },
    {
        "content": "<p>I do</p>",
        "id": 190224314,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583874142
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 190224338,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583874155
    },
    {
        "content": "<p>maybe Friday we can discuss more about rustc integration if you have time</p>",
        "id": 190224345,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583874157
    },
    {
        "content": "<p>we can schedule async</p>",
        "id": 190224364,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583874167
    },
    {
        "content": "<p>yep</p>",
        "id": 190224405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583874185
    },
    {
        "content": "<p>I should be around.</p>",
        "id": 190224416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583874194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Is the plan to make space for next week's meeting in the same hackmd?</p>",
        "id": 190224616,
        "sender_full_name": "detrumi",
        "timestamp": 1583874291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> that was my plan, yes!</p>",
        "id": 190224639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583874304
    },
    {
        "content": "<p>then can just link to the hackmd from the web page etc</p>",
        "id": 190224657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583874313
    },
    {
        "content": "<p>and we have a log</p>",
        "id": 190224659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583874314
    }
]