[
    {
        "content": "<p>thinking a bit about marker trait stabilization and also the auto trait unsoundness.</p>\n<p>in <code>candidate_should_be_dropped_in_favor_of</code> the following section is unsound <a href=\"https://github.com/rust-lang/rust/blob/b53a93db2d7717c3bde196cfcf5f214cc00d4937/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1489\">https://github.com/rust-lang/rust/blob/b53a93db2d7717c3bde196cfcf5f214cc00d4937/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1489</a></p>\n<p>if <code>other</code> does not satisfy it's region obligation we still drop <code>victim</code> which may apply even when considering regions. This causes us to incorrectly assume that a predicate does not hold, causing <a href=\"https://github.com/rust-lang/rust/issues/84955\">#84955</a></p>",
        "id": 247899832,
        "sender_full_name": "lcnr",
        "timestamp": 1627892638
    },
    {
        "content": "<p>as this bug relies on the order of the candidates, the given test case doesn't actually work right now</p>",
        "id": 247899902,
        "sender_full_name": "lcnr",
        "timestamp": 1627892703
    },
    {
        "content": "<p>i think, can't actually reproduce that test rn <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247900063,
        "sender_full_name": "lcnr",
        "timestamp": 1627892867
    },
    {
        "content": "<p>jup, can't trivially reproduce <a href=\"https://github.com/rust-lang/rust/issues/84955\">#84955</a> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247908088,
        "sender_full_name": "lcnr",
        "timestamp": 1627901280
    },
    {
        "content": "<p>that's unfortunate <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 247908109,
        "sender_full_name": "lcnr",
        "timestamp": 1627901292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/winnowing.20soundly/near/247899832\">said</a>:</p>\n<blockquote>\n<p>thinking a bit about marker trait stabilization and also the auto trait unsoundness.</p>\n<p>in <code>candidate_should_be_dropped_in_favor_of</code> the following section is unsound <a href=\"https://github.com/rust-lang/rust/blob/b53a93db2d7717c3bde196cfcf5f214cc00d4937/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1489\">https://github.com/rust-lang/rust/blob/b53a93db2d7717c3bde196cfcf5f214cc00d4937/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1489</a></p>\n<p>if <code>other</code> does not satisfy it's region obligation we still drop <code>victim</code> which may apply even when considering regions. This causes us to incorrectly assume that a predicate does not hold, causing <a href=\"https://github.com/rust-lang/rust/issues/84955\">#84955</a></p>\n</blockquote>\n<p>this issue should still apply though</p>",
        "id": 247910611,
        "sender_full_name": "lcnr",
        "timestamp": 1627903726
    },
    {
        "content": "<p>even if not relevant for soundness, there is also </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(marker_trait_attr)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[marker]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247910708,
        "sender_full_name": "lcnr",
        "timestamp": 1627903815
    },
    {
        "content": "<p>which fails to compile as we have the candidates in the same order when wf checking the 2 impls</p>",
        "id": 247910750,
        "sender_full_name": "lcnr",
        "timestamp": 1627903845
    },
    {
        "content": "<p>but always prefer the first candidate</p>",
        "id": 247910755,
        "sender_full_name": "lcnr",
        "timestamp": 1627903851
    },
    {
        "content": "<p>during winnowing, resulting in the following error</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/lib.rs:6:10\n  |\n6 | impl&lt;&#39;a&gt; A for (&amp;&#39;static (), &amp;&#39;a ()) {}\n  |          ^ lifetime mismatch\n  |\n  = note: expected trait `A`\n             found trait `A`\nnote: the lifetime `&#39;a` as defined on the impl at 6:6...\n --&gt; src/lib.rs:6:6\n  |\n6 | impl&lt;&#39;a&gt; A for (&amp;&#39;static (), &amp;&#39;a ()) {}\n  |      ^^\n  = note: ...does not necessarily outlive the static lifetime\n</code></pre></div>",
        "id": 247910771,
        "sender_full_name": "lcnr",
        "timestamp": 1627903870
    },
    {
        "content": "<p>with the current impl this test should fail no matter how we modify candidate assembly (which we don't want)</p>",
        "id": 247910796,
        "sender_full_name": "lcnr",
        "timestamp": 1627903894
    },
    {
        "content": "<p>I can think of 2 ways to fix this</p>",
        "id": 247910842,
        "sender_full_name": "lcnr",
        "timestamp": 1627903940
    },
    {
        "content": "<ul>\n<li>check regions during fulfill so that we always end up with 2 evaluated to ok considering regions here, actually allowing us to choose an arbitrary marker trait impl</li>\n</ul>",
        "id": 247910904,
        "sender_full_name": "lcnr",
        "timestamp": 1627904007
    },
    {
        "content": "<ul>\n<li>keep the \"delayed regionck\" and add some sort of \"or\" to our region obligations, so we \"accept\" both candidates and then only have to satisfy one of those during regionck</li>\n</ul>",
        "id": 247910998,
        "sender_full_name": "lcnr",
        "timestamp": 1627904090
    },
    {
        "content": "<p>i think conceptually the first option seems cleaner but I don't know enough to say much about either approach</p>",
        "id": 247911083,
        "sender_full_name": "lcnr",
        "timestamp": 1627904178
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have some thoughts here? I vaguely remember some mention of removing the separate regionck entirely <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 247911189,
        "sender_full_name": "lcnr",
        "timestamp": 1627904252
    }
]