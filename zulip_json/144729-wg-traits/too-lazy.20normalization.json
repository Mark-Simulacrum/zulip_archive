[
    {
        "content": "<p>So I'm debugging an overflow in the recursive solver while solving something in Diesel, and it works like this:<br>\nThere are a lot of macro-generated types with impls of the form</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">                </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">DB</span>: <span class=\"nc\">Backend</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">QueryFragment</span><span class=\"o\">&lt;</span><span class=\"n\">DB</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Star1</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">&lt;</span><span class=\"n\">Table1</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">QuerySource</span><span class=\"o\">&gt;</span>::<span class=\"n\">FromClause</span>: <span class=\"nc\">QueryFragment</span><span class=\"o\">&lt;</span><span class=\"n\">DB</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>, same for <code>Star2</code> and <code>Table2</code>, and so on. (actually they are all just called <code>star</code> and <code>table</code>, which was very confusing at first.)</p>\n<p>So to solve <code>Star1: QueryFragment</code>, we want to solve <code>&lt;Table1 as QuerySource&gt;::FromClause: QueryFragment</code>. This would be easy if we normalized the projection first, but instead we look for all impls for <code>QueryFragment</code> and try them all. Among them, we find the impl for <code>Star1</code>, but that gives a cycle of course. Then we find the impl for <code>Star2</code>, and continue with that, which means solving <code>&lt;Table2 as QuerySource&gt;::FromClause: QueryFragment</code>. So this isn't a real infinite loop, there just are enough of these impls that the recursion limit gets triggered.</p>\n<p>Now I think one problem is that we try to solve <code>&lt;Table1 as QuerySource&gt;::FromClause: QueryFragment</code> by enumerating all impls, even though the trait is non-enumerable. That's because we don't flounder if the self type is a projection, so I think we should. </p>\n<p>But that will just mean that we can't solve <code>Star1: QueryFragment</code>, even though it's true and would be easy to solve if we just normalized the projection first. So, should we somehow detect this situation and try normalizing first?</p>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 195875261,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588268485
    },
    {
        "content": "<p>floundering on projections as self types would make the <code>Flatten: Iterator</code> impl not work anymore <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 195876967,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588269286
    },
    {
        "content": "<p>Ok so I sort of tried to make a \"minimal\" program here</p>",
        "id": 195877168,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588269369
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>trait QueryFragment {}\nstruct Frag {}\nimpl QueryFragment for Frag {}\nstruct Star1 {}\ntrait QuerySource {\n    type FromClause;\n}\nstruct Table1 {}\nimpl QuerySource for Table1 {\n    type FromClause = Frag;\n}\nimpl QueryFragment for Star1 where &lt;Table1 as QuerySource&gt;::FromClause: QueryFragment {}\n</code></pre></div>",
        "id": 195877172,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588269371
    },
    {
        "content": "<p>Did I get everything right?</p>",
        "id": 195877187,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588269379
    },
    {
        "content": "<p>I think so, yeah</p>",
        "id": 195877282,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588269432
    },
    {
        "content": "<p>that doesn't crash of course, because it would need <code>Table2</code> .. <code>Table100</code></p>",
        "id": 195877335,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588269457
    },
    {
        "content": "<p>right</p>",
        "id": 195877349,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588269463
    },
    {
        "content": "<p>I'm just trying to wrap my head around the general structure</p>",
        "id": 195877388,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588269478
    },
    {
        "content": "<p>I'm actually not sure whether the SLG solver deals better with this</p>",
        "id": 195877537,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588269526
    },
    {
        "content": "<p>yeah, I don't think so</p>",
        "id": 195877559,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588269536
    },
    {
        "content": "<p>I think the \"cause\" of this is that non-enumerable just leads to floundering</p>",
        "id": 195877603,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588269564
    },
    {
        "content": "<p>Well, there's actually two separate problems here, I think</p>",
        "id": 195878150,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588269822
    },
    {
        "content": "<p>mmm maybe</p>",
        "id": 195878489,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588269980
    },
    {
        "content": "<p>let me think</p>",
        "id": 195878492,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588269983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/144729-wg-traits/topic/too-lazy.20normalization/near/195876967\" title=\"#narrow/stream/144729-wg-traits/topic/too-lazy.20normalization/near/195876967\">said</a>:</p>\n<blockquote>\n<p>floundering on projections as self types would make the <code>Flatten: Iterator</code> impl not work anymore <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p>wait why</p>",
        "id": 195878657,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588270077
    },
    {
        "content": "<p>because it uses assoc type bounds:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">I</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span>: <span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">IntoIter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">U</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>which desugar to <code>&lt;I as Iterator&gt;::Item: IntoIterator&lt;&gt;</code></p>",
        "id": 195880799,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588270973
    },
    {
        "content": "<p>hmm</p>",
        "id": 195880921,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588271027
    },
    {
        "content": "<p>for the recursive solver, it seems a somewhat plausible solution to normalize the projection first if we encounter such a goal. maybe there's a more elegant way though</p>",
        "id": 195881099,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588271089
    },
    {
        "content": "<p>Yeah, I'm trying to think about how we would/should solve this with SLG</p>",
        "id": 195881179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588271131
    },
    {
        "content": "<p>I think <code>CouldMatch</code> should be smarter</p>",
        "id": 195882147,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588271516
    },
    {
        "content": "<p>right now it only checks <code>Apply</code>/<code>Apply</code></p>",
        "id": 195882232,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588271534
    },
    {
        "content": "<p><em>That's</em> where I would do any normalization (if any)</p>",
        "id": 195882304,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588271574
    },
    {
        "content": "<p>But also when trying to solve <code>&lt;Table1 as QuerySource&gt;::FromClause: QueryFragment</code></p>",
        "id": 195882406,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588271633
    },
    {
        "content": "<p>err</p>",
        "id": 195882554,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588271687
    },
    {
        "content": "<p>I don't know where I was going</p>",
        "id": 195882571,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588271698
    },
    {
        "content": "<p>actually this reminds me of something <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> mentioned, which (I think) was desugaring projections in goals before the solver, so <code>Implemented(&lt;Foo as Bar&gt;::Type: Trait)</code> would actually become <code>Implemented(?0: Trait), AliasEq(&lt;Foo as Bar&gt;::Type = ?0)</code></p>",
        "id": 195953991,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588334242
    },
    {
        "content": "<p>Yeah, that is what converting from semantic to syntactic equality is about</p>",
        "id": 195956595,
        "sender_full_name": "Areredify",
        "timestamp": 1588336604
    },
    {
        "content": "<p>I have a pending pr about it, but it fails in one test, I didn't get a chance to fix it yet</p>",
        "id": 195956792,
        "sender_full_name": "Areredify",
        "timestamp": 1588336789
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/401\" title=\"https://github.com/rust-lang/chalk/pull/401\">https://github.com/rust-lang/chalk/pull/401</a></p>",
        "id": 195956850,
        "sender_full_name": "Areredify",
        "timestamp": 1588336813
    },
    {
        "content": "<p>Indeed, I was going to say that avoiding this sort of problem was part of the motivation for the sem-to-syn-equality work</p>",
        "id": 196221697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588617300
    },
    {
        "content": "<p>I think it would likely \"just fix\" this problem? In particular, we would create an inference variable for the normalized form of the projection -- if we tried to solve before we've evaluated <code>ProjectionEq</code>, then we would flounder, but later we'll have enough type info to continue.</p>",
        "id": 196221811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588617362
    },
    {
        "content": "<p>yeah, I think it would</p>",
        "id": 196222642,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588617745
    }
]