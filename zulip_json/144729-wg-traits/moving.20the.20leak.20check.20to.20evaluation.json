[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> -- so I've been thinking about the continuing push to move away from the leak check and towards universes. In particular, I'm mulling a change that moves <em>where</em> the leak check occurs, in an effort to unblock lazy normalization and a few other things. Here is a \"proto MCP\" that is writing up the idea:</p>\n<p><a href=\"https://hackmd.io/O2O1lfxsT7e9GL9nMEeT5Q?edit\">https://hackmd.io/O2O1lfxsT7e9GL9nMEeT5Q?edit</a></p>\n<p>I'm curious to get your thoughts. Sorry if that's unclear, it was hastily written.</p>",
        "id": 197599651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589481647
    },
    {
        "content": "<p>I had at first a slightly different plan but realized a complication as I was writing out the MCP...</p>",
        "id": 197599683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589481660
    },
    {
        "content": "<p>I think I need more detail before I can really comment. I'm not entirely sure how the leak check is interacting with lazy normalization.</p>",
        "id": 197611368,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1589487178
    },
    {
        "content": "<p>OK, I've been pushing on this a bit more. I have to update the MCP document, but I've pushed a rough prototype (one test still failing and I haven't tracked it down) to the <a href=\"https://github.com/nikomatsakis/rust/tree/move-leak-check\">move-leak-check branch</a>. The <a href=\"https://github.com/nikomatsakis/rust/commit/fac84bd11f7165e2fe8ca08bc46a6ff244587fb9\">final commit</a> has a length comment that tries to explain the motivation and design. (The earlier commits rewrite the leak-check to be somewhat more precise and more based on universes.)</p>",
        "id": 198179400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589970746
    },
    {
        "content": "<p>Side note that <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> this commit explains a bit how I think the trait solver and polonius ought to interact.</p>",
        "id": 198179472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589970798
    },
    {
        "content": "<p>ooh awesome :)</p>",
        "id": 198198862,
        "sender_full_name": "lqd",
        "timestamp": 1589981713
    },
    {
        "content": "<p>and sounds very logical (although I'm not super aware of the leak check's many interactions <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span>) -- maybe when interacting with the trait solver, we'd like to break up the polonius computation more, if interactively targeting some of its pieces are more interesting than the others. (Maybe even incrementally)</p>",
        "id": 198201777,
        "sender_full_name": "lqd",
        "timestamp": 1589983068
    },
    {
        "content": "<p>The main thing is that I think the trait solver should manage \"higher-ranked\" things, and send polonius only simple subset relations</p>",
        "id": 198202798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589983458
    },
    {
        "content": "<p>There are a few reasons for this -- part of is it that the datalog setup I think just isn't a good match for solving higher-ranked constraints and universes -- but it's also that figuring out what sort of <code>'a: 'b</code> bounds are implied by types being well-formed and so forth is the kind of thing chalk already has to figure out, to manage implied bounds, and that's going to be a necessary part of this.</p>",
        "id": 198202946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589983511
    },
    {
        "content": "<p>And I don't want to have e.g. polonius having to ask questions about whether a trait is implemented :)</p>",
        "id": 198203008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589983532
    },
    {
        "content": "<p>As I wrote in the comment above, the leak-check doesn't <em>quite</em> do this, but it goes part-way there, in that the trait solver is at least <em>rejecting</em> errors early rather than deferring to the region solver.</p>",
        "id": 198203165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589983577
    },
    {
        "content": "<p>One downside of this approach though is that it's more visible, so it gives us less room to change the rules and get smarter without affecting method dispatch and the like :(</p>",
        "id": 198203228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589983598
    },
    {
        "content": "<p>(yeah I was earlier mentioning to shep that chalk needed those same building blocks regardless)</p>",
        "id": 198203277,
        "sender_full_name": "lqd",
        "timestamp": 1589983615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/moving.20the.20leak.20check.20to.20evaluation/near/198203228\">said</a>:</p>\n<blockquote>\n<p>One downside of this approach though is that it's more visible, so it gives us less room to change the rules and get smarter without affecting method dispatch and the like :(</p>\n</blockquote>\n<p>But I think this is kind of inevitable, since there are crates that are relying on this.</p>",
        "id": 198203438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589983678
    },
    {
        "content": "<p>e.g., wasm-bindgen</p>",
        "id": 198203451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589983682
    },
    {
        "content": "<p>it's also just kind of a useful capability</p>",
        "id": 198203891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589983863
    },
    {
        "content": "<p>to be able to rely on :)</p>",
        "id": 198203895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589983865
    },
    {
        "content": "<p>i.e, the wasm-bindgen use-case is legit</p>",
        "id": 198203914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589983872
    },
    {
        "content": "<p>wanting to have one implementation for \"I take ownership of this\" and one for \"I borrow this\"</p>",
        "id": 198203952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589983881
    },
    {
        "content": "<p>unfortunate :)</p>",
        "id": 198204004,
        "sender_full_name": "lqd",
        "timestamp": 1589983906
    },
    {
        "content": "<p>not to mention the fact that crates rely on all kinds of weird details of our type check that we have to fix sometimes</p>",
        "id": 198204013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589983910
    },
    {
        "content": "<p>so..yeah. life in production :)</p>",
        "id": 198204088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589983924
    },
    {
        "content": "<p>but yeah, we don't have much of a choice</p>",
        "id": 198204093,
        "sender_full_name": "lqd",
        "timestamp": 1589983926
    },
    {
        "content": "<p>(that being said, I'm less and less enamored with datalog (to execute the analysis rather than describing it and having a \"reference implementation\") so wouldn't oppose doing non-datalog work in there, and I think that we might <em>have to</em> anyway)</p>",
        "id": 198204174,
        "sender_full_name": "lqd",
        "timestamp": 1589983961
    },
    {
        "content": "<p>yeah, maybe so, but regardless I think it's better to separate out the two</p>",
        "id": 198206373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589984895
    },
    {
        "content": "<p>if we can</p>",
        "id": 198206382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589984900
    },
    {
        "content": "<p>oh sure :)</p>",
        "id": 198206447,
        "sender_full_name": "lqd",
        "timestamp": 1589984931
    },
    {
        "content": "<p>ok, I pushed a new commit and all tests pass, though I still want to fix the commit marked as \"WIP\" and add a few more tests</p>",
        "id": 198207939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589985565
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> btw :)</p>",
        "id": 198207954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589985571
    },
    {
        "content": "<p>and I have to update the MCP, I think it's very much worth investing the time to write out the implications</p>",
        "id": 198207980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589985587
    },
    {
        "content": "<p>for future reference</p>",
        "id": 198207986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589985590
    },
    {
        "content": "<p>Started drafting a <a href=\"https://github.com/nikomatsakis/rust/blob/move-leak-check/mcp.md\">complete MCP</a> for this proposal that includes a lot of background on the leak-check (cc <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, since you've often expressed confusion here). It's not complete yet and it's already quite long, but hopefully helpful.</p>",
        "id": 198429224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590145601
    },
    {
        "content": "<p>It also describes the interaction with lazy normalization, <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>.</p>",
        "id": 198429250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590145624
    },
    {
        "content": "<p>OK, I've completed this rather epic treatise =) I put it in a <a href=\"https://gist.github.com/nikomatsakis/8bfda6c1119727e13ec6e98f33d2b696\">gist</a></p>",
        "id": 198441242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590154360
    },
    {
        "content": "<p>This is helpful. I've quickly skimmed through, but kind of want to go through more thoroughly when I have time</p>",
        "id": 198464156,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590165547
    },
    {
        "content": "<p>I'm making a few more tweaks in the branch / text</p>",
        "id": 198470487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590168655
    },
    {
        "content": "<p>I noticed that we are doing leak-check in more places than I realized</p>",
        "id": 198470502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590168662
    },
    {
        "content": "<p>so i'm removing those to see what happens</p>",
        "id": 198470514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590168665
    },
    {
        "content": "<p>I believe we should be able to limit ourselves to a few key places</p>",
        "id": 198470531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590168672
    },
    {
        "content": "<p>Thanks for the mcp. It has made things a lot clearer.</p>",
        "id": 198471518,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1590169134
    },
    {
        "content": "<p>I'm investigating removing all the leak-checks <em>except</em> the ones on coherence and evaluation</p>",
        "id": 198473080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169912
    },
    {
        "content": "<p>which I think would be best</p>",
        "id": 198473132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169923
    },
    {
        "content": "<p>I did realize a bit how this can influence execution -- in particular, if there is only 1 candidate for a trait, we will pick it now, even if the leak check would've failed. (If there are multiple candidates, we'll use the leak check to sort through them.)</p>\n<p>In our tests, this mostly results in better error messages, but you can imagine it impacting some code. It would have to be a tricky setup though -- one where some trait applies with 0 derefs (or whatever), but will fail leak-check, and then some other method applies with &gt;0 derefs, but would pass leak-check.</p>",
        "id": 198473238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169997
    },
    {
        "content": "<p>I'm not sure if that's really true actually because I believe method dispatch uses the <code>evaluate</code> machinery anyway.</p>",
        "id": 198473282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590170022
    },
    {
        "content": "<p>(The better error messages happen because we trigger special paths for placeholder errors, instead of failing to apply the impl at all and then getting an error about there not being an applicable impl.)</p>",
        "id": 198473383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590170066
    },
    {
        "content": "<p>I'm inclined to agree that restricting the leak check as much as possible would be good. It appears that it is already not applied to all bounds.</p>",
        "id": 198474365,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1590170525
    },
    {
        "content": "<p>Yeah it's sort of uneven</p>",
        "id": 198474501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590170588
    },
    {
        "content": "<p>hmm, removing some of the leak-checks from project results in duplicate errors</p>",
        "id": 198475583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590171241
    },
    {
        "content": "<p>which is sort of annoying</p>",
        "id": 198475627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590171250
    },
    {
        "content": "<p>though maybe easy enough to suppress</p>",
        "id": 198475640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590171260
    },
    {
        "content": "<p>anyway, apart from that, the only other thing is that I realized my leak-check impl isn't actually correct right now (doesn't <em>quite</em> match what the MCP says) but it's easy enough to fix, just been lazy</p>",
        "id": 198476429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590171643
    }
]