[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I'm making this topic for us to talk further</p>",
        "id": 241074988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581253
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 241075462,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622581486
    },
    {
        "content": "<p>to help with continuity<br>\nprevious convo: <a href=\"#narrow/stream/131828-t-compiler/topic/conflicting.20impls\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/conflicting.20impls</a><br>\nnotes: <a href=\"https://hackmd.io/@nikomatsakis/HJLd4WE9O\">https://hackmd.io/@nikomatsakis/HJLd4WE9O</a></p>",
        "id": 241075801,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622581659
    },
    {
        "content": "<p>WIP PR: <a href=\"https://github.com/rust-lang/rust/pull/85764\">https://github.com/rust-lang/rust/pull/85764</a></p>",
        "id": 241075854,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622581682
    },
    {
        "content": "<p>the other question, which we didn't touch on, is what is needed from the lang team side</p>",
        "id": 241076069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581798
    },
    {
        "content": "<p>I'm not sure!</p>",
        "id": 241076108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581803
    },
    {
        "content": "<p>I think I will create a project propsal</p>",
        "id": 241076334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581924
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/lang-team/issues/96\">https://github.com/rust-lang/lang-team/issues/96</a></p>",
        "id": 241076914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622582198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls.20in.20coherence/near/241076914\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/lang-team/issues/96\">https://github.com/rust-lang/lang-team/issues/96</a></p>\n</blockquote>\n<p>blessed, ty</p>",
        "id": 241077848,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622582627
    },
    {
        "content": "<p>minor typo in the motivating examples</p>",
        "id": 241077911,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622582653
    },
    {
        "content": "<p>should be <code>From&lt;&amp;str&gt; for Box&lt;dyn Error&gt;</code> but it's reversed</p>",
        "id": 241077931,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622582668
    },
    {
        "content": "<p>ah yeah</p>",
        "id": 241078132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622582818
    },
    {
        "content": "<p>part of the idea with the new PredicateKind is to change existing negative impls that used to get exposed in <code>predicates</code> as <code>PredicateKind::Trait</code> to <code>PredicateKind::NotTrait</code> right? As in it's not just to have the representation available so we can invert actual impls when doing the overlap check.</p>",
        "id": 241089407,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622590898
    },
    {
        "content": "<p>trying to figure out what \"teach the trait checker to prove <code>T: !Trait</code> if there are negative impls\" entails and starting with making it so negative impls show up as <code>PredicateKind::NotTrait</code> in <code>overlap_within_probe</code></p>",
        "id": 241089513,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622590993
    },
    {
        "content": "<p>ended up digging pretty deep into <a href=\"http://collect.rs\">collect.rs</a> but started to second guess by the time I got to <code>gather_explicit_predicates_of</code></p>",
        "id": 241089933,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622591342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I hadn't quite figured out what shape I thought that should have</p>",
        "id": 241145952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639494
    },
    {
        "content": "<p>this is also connected (a bit) to the semantics of auto traits and negative impls</p>",
        "id": 241145976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639507
    },
    {
        "content": "<p>something that <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> and I were discussing recently</p>",
        "id": 241145990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639515
    },
    {
        "content": "<p>I think my expectation is that we would not change <a href=\"http://collect.rs\">collect.rs</a></p>",
        "id": 241146037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639527
    },
    {
        "content": "<p>I would expect to change how we manage candidates a bit</p>",
        "id": 241146058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639542
    },
    {
        "content": "<p>I'm pulling up the relevant code</p>",
        "id": 241146255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639636
    },
    {
        "content": "<p>basically, where <code>candidate_from_obligation_no_cache</code> invokes <code>filter_negative_and_reservation_impls</code> and so forth</p>",
        "id": 241146489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639739
    },
    {
        "content": "<p>I think we might tweak this a bit</p>",
        "id": 241146501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639745
    },
    {
        "content": "<p>so that there is a \"negative candidate\" and a \"positive candidate\" function</p>",
        "id": 241146517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639755
    },
    {
        "content": "<p>it's still a bit odd that we assemble both polarities together into one list, but I think it's \"ok\"</p>",
        "id": 241146586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639771
    },
    {
        "content": "<p>hmm, went to do this but I'm a bit confused. I don't understand how <code>overlap_within_probe</code> is related to <code>candidate_from_obligation_no_cache</code> or how messing with the candidates in the latter will affect the predicates exposed in the latter</p>",
        "id": 241595032,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622841885
    },
    {
        "content": "<p>okay so, I think I found the connection, obvious in retrospect, <code>candidate_from_obligation</code> is a method on SelectionContext which is an arg in <code>overlap_within_probe</code></p>",
        "id": 241595977,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622842572
    },
    {
        "content": "<p>I think it has to be via <code>predicate_may_hold_fatal</code> but I still haven't figured out how that ends up calling <code>select</code></p>",
        "id": 241596514,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622842981
    },
    {
        "content": "<p>tried tracing backwards through the callers of <code>predicate_may_hold_fatal</code> but dead ended at the <code>FulfillmentContext::select</code></p>",
        "id": 241597217,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622843493
    },
    {
        "content": "<p>oh shit i think I found it in InferContext</p>",
        "id": 241597772,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622843920
    },
    {
        "content": "<p>well, maybe not, but I have a better idea of how they relate, if not understanding the exact series of calls from one to the other</p>",
        "id": 241598262,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622844265
    },
    {
        "content": "<p>oh my god, I think i get it, I'm negating the obligation which is an input into candidate_from_obligation</p>",
        "id": 241598736,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622844433
    },
    {
        "content": "<p>wait so is the idea that we'd have a <code>filter_negative_and_reservation_impls</code> and a <code>filter_positive_and_reservation_impls</code> and when the obligation has been negated we call the <code>filter_positive</code> version instead of <code>filter_negative</code>?</p>",
        "id": 241598944,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622844582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> sorry, last week I was basically afk all week, how are you doing here?</p>",
        "id": 242783080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623783794
    },
    {
        "content": "<p>Haven't picked it back up since my last msgs</p>",
        "id": 242785254,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623784754
    },
    {
        "content": "<p>finally picking this back up again</p>",
        "id": 245351664,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625768548
    },
    {
        "content": "<p>we should probably find some good time to chat about it</p>",
        "id": 245360405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625772749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls.20in.20coherence/near/245360405\">said</a>:</p>\n<blockquote>\n<p>we should probably find some good time to chat about it</p>\n</blockquote>\n<p>my day is wide open today if you have time</p>",
        "id": 245366452,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625775512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> is your day open today? Otherwise, let's schedule a time next week</p>",
        "id": 245441640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625836637
    },
    {
        "content": "<p>I'm not sure about today, it's starting to fill up</p>",
        "id": 245441656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625836643
    },
    {
        "content": "<p>Today's my \"commute to the office day\" so not really open</p>",
        "id": 245441853,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625836738
    },
    {
        "content": "<p>My Monday next week is pretty open though</p>",
        "id": 245441884,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625836756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I changed up <a href=\"https://github.com/rust-lang/rust/pull/85764/\">https://github.com/rust-lang/rust/pull/85764/</a> to properly negate the obligation and to thread the polarity through as a member rather than an alternate PredicateKind</p>",
        "id": 246165721,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389340
    },
    {
        "content": "<p>and now im getting ready to setup the inverse of <code>filter_negative_and_reservation_impls</code> and thread the polarity through the <code>TraitPredicate</code></p>",
        "id": 246165761,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389370
    },
    {
        "content": "<p>and I'm unsure of where exactly I should put the polarity</p>",
        "id": 246165779,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389387
    },
    {
        "content": "<p>my guesses are either in the <code>TraitPredicate</code> or in the <code>TraitRef</code></p>",
        "id": 246165786,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389396
    },
    {
        "content": "<p>but not sure which one to pick</p>",
        "id": 246165792,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389399
    },
    {
        "content": "<p>gonna put it in traitpredicate</p>",
        "id": 246166187,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389666
    },
    {
        "content": "<p>seems more appropriate</p>",
        "id": 246166190,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389669
    },
    {
        "content": "<p>yoloo</p>",
        "id": 246166193,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> that is correct</p>",
        "id": 246232601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626446793
    },
    {
        "content": "<p>TraitRef is a more \"primitive\" concept</p>",
        "id": 246232620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626446801
    },
    {
        "content": "<p><code>TraitPredicate</code> is <em>perfect</em></p>",
        "id": 246232638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626446806
    },
    {
        "content": "<p>TraitPredicate is basically \"what you want to prove\" -- either that the trait <em>is</em> or <em>is not</em> implemented</p>",
        "id": 246232656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626446820
    },
    {
        "content": "<p>perfect. Okay then I think I have that sorted already, there's a lot of places where I wasn't sure how to properly thread in the Polarity so I defaulted it to just assuming positive. The place that I saw it was creating a TraitPredicate from a PredicateKind I used the existing polarity and I'm hoping that's the only place I actually needed to thread it through. Other than that I think I may only need to setup the inverted <code>filter_negative_and_reservation_impls</code> but I'm currently unclear on how exactly to implement that and need to get a better understanding of the existing logic and what each of the return paths mean in practice.</p>",
        "id": 246254685,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626456949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> that sounds <em>reasonable</em>, at least at first glance</p>",
        "id": 246308254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626503058
    },
    {
        "content": "<p>I am imagining that this becomes <code>filter_reserved_or_opposite_polarity_impls</code> -- but the question is, did you also add the polarity into the <code>TraitObligationStack</code> somewhere?</p>",
        "id": 246308281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626503140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span> was trying negative impls out</p>",
        "id": 258998890,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635185710
    },
    {
        "content": "<p>they did <a href=\"https://github.com/yoshuawuyts/rust/commit/591477bd50176fb248a1913b42682bfa21a81b9c\">https://github.com/yoshuawuyts/rust/commit/591477bd50176fb248a1913b42682bfa21a81b9c</a></p>",
        "id": 258998895,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635185713
    },
    {
        "content": "<p>they wanted to enable:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Termination</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>by doing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So they don't get:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error[E0119]: conflicting implementations of trait `process::Termination` for type `()`\n    --&gt; library\\std\\src\\process.rs:2064:1\n     |\n2022 |   impl Termination for () {\n     |   ----------------------- first implementation\nhere\n...\n2064 | / impl&lt;T, F&gt; Termination for F\n2065 | | where\n2066 | |     T: Termination,\n2067 | |     F: Future&lt;Output = T&gt;,\n...    |\n2113 | |     }\n2114 | | }\n     | |_^ conflicting implementation for `()`\n</code></pre></div>",
        "id": 258999049,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635185765
    },
    {
        "content": "<p>I'm not sure why this is going on</p>",
        "id": 258999470,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635185952
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span> added a <code>!Future</code> impl which I don't think it's related to this error</p>",
        "id": 258999532,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635185983
    },
    {
        "content": "<p>in this case <code>()</code> is an specialization of the general implementation they've added</p>",
        "id": 258999565,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635186000
    },
    {
        "content": "<p>but unsure what's going on</p>",
        "id": 258999616,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635186006
    },
    {
        "content": "<p>Is your new logic already in the bootstrap compiler?</p>",
        "id": 259002763,
        "sender_full_name": "oli",
        "timestamp": 1635187475
    },
    {
        "content": "<p>ohhh right :)</p>",
        "id": 259017662,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635194481
    },
    {
        "content": "<p>Oh, so if I'm understanding things correctly this is likely just going to be able to work in the near future?</p>",
        "id": 259063097,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635234988
    },
    {
        "content": "<p>Well, assuming what I did is right (:</p>",
        "id": 259063239,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635235080
    },
    {
        "content": "<p>you can make it work right now, you just need to gate all your changes with #[cfg(not(bootstrap))] so they'll only get built with the stage1 compiler instead of the bootstrap compiler</p>",
        "id": 259075098,
        "sender_full_name": "oli",
        "timestamp": 1635242829
    },
    {
        "content": "<p>tho I'd first try it out by duplicating the same thing in a playground</p>",
        "id": 259075139,
        "sender_full_name": "oli",
        "timestamp": 1635242867
    },
    {
        "content": "<p>much easier than re-compiling the compiler on every little touch of libstd</p>",
        "id": 259075152,
        "sender_full_name": "oli",
        "timestamp": 1635242880
    },
    {
        "content": "<p>it'd also be nice to exercize this negative impl change, IIRC santiago's was working on improving test coverage about it, and this use case could be an interesting one for his tests</p>",
        "id": 259083852,
        "sender_full_name": "lqd",
        "timestamp": 1635248600
    },
    {
        "content": "<p>it's always nice to improve test coverage but just in case to clarify, I'm not working on the test coverage of this</p>",
        "id": 259090167,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635252368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> you're confused with async fns in traits MVP :)</p>",
        "id": 259090202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635252389
    },
    {
        "content": "<p>oooooooops</p>",
        "id": 259090285,
        "sender_full_name": "lqd",
        "timestamp": 1635252430
    },
    {
        "content": "<p>then it would be an interesting test .... in general :)</p>",
        "id": 259090368,
        "sender_full_name": "lqd",
        "timestamp": 1635252476
    },
    {
        "content": "<p>for sure :)</p>",
        "id": 259090549,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635252548
    },
    {
        "content": "<p>It seems to pass <code>cargo check</code>! <a href=\"https://github.com/yoshuawuyts/rust/tree/future-for-termination-2\">https://github.com/yoshuawuyts/rust/tree/future-for-termination-2</a></p>",
        "id": 259256721,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635348210
    },
    {
        "content": "<p>Need to test out whether <code>async fn main</code> <em>actually</em> works with this (<code>py ./x.py build</code> is broken locally right now for me), but I think it should!</p>",
        "id": 259256850,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635348253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts [he/they]</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls.20in.20coherence/near/259256850\">said</a>:</p>\n<blockquote>\n<p><code>py ./x.py build</code> is broken locally right now for me)</p>\n</blockquote>\n<p>that's really unfortunate, because it probably means only part of your changes were tested: I believe the \"cfg(not(bootstrap))\" changes will be checked when you build stage 1 only</p>",
        "id": 259272840,
        "sender_full_name": "lqd",
        "timestamp": 1635354615
    },
    {
        "content": "<p>(and I don't think <a href=\"https://github.com/yoshuawuyts/rust/commit/d2e1a09e0afac8d25711da0970ba91973204682a#diff-36874f872091dd105fbb727506ee7e2d9136ed3265acd5a165c8d925d57db7d1R122-R133\">this will work</a>: the uses being private to the module mean they wouldn't be exported IIRC)</p>",
        "id": 259275952,
        "sender_full_name": "lqd",
        "timestamp": 1635355840
    },
    {
        "content": "<p>Fixed my local compiler install!</p>",
        "id": 259287761,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635360475
    },
    {
        "content": "<p>We're <em>so close</em> it seems now, haha</p>",
        "id": 259287818,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635360487
    },
    {
        "content": "<p>Moved past the earlier error that showed issues with <code>()</code> to the new error, which shows issues with <code>Result&lt;(), E&gt;</code>:</p>\n<div class=\"codehilite\" data-code-language=\"txt\"><pre><span></span><code>error[E0119]: conflicting implementations of trait `process::Termination` for type `core::result::Result&lt;(), _&gt;`\n    --&gt; library\\std\\src\\process.rs:2060:1\n     |\n2025 |   impl&lt;E: fmt::Debug&gt; Termination for Result&lt;(), E&gt; {\n     |   ------------------------------------------------- first implementation here\n...\n2060 | / impl&lt;T, F&gt; Termination for F\n2061 | | where\n2062 | |     T: Termination,\n2063 | |     F: crate::future::Future&lt;Output = T&gt;,\n...    |\n2114 | |     }\n2115 | | }\n     | |_^ conflicting implementation for `core::result::Result&lt;(), _&gt;`\n</code></pre></div>",
        "id": 259287916,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635360540
    },
    {
        "content": "<p>I've tried implementing <code>impl&lt;E&gt; !Future for Result&lt;(), E&gt; {}</code> (<a href=\"https://github.com/yoshuawuyts/rust/commit/377d7fa25a42af865ac14233c479892aad89bffe#diff-ce8cd7d0ae24d8c6503198eeb502052175fc9c47d15fbc85258236b53e312ba0R127\">ref</a>), but it seems that the negative impls in coherence isn't yet smart enough to figure that one out!</p>",
        "id": 259288087,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635360610
    },
    {
        "content": "<p>Oh interesting, I tried creating a repro, but this seems to compile: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=31169f58cd7c2a6dea218a03673bf301\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=31169f58cd7c2a6dea218a03673bf301</a></p>",
        "id": 259288801,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635360864
    },
    {
        "content": "<p>does it maybe repro with two different crates ?</p>",
        "id": 259289027,
        "sender_full_name": "lqd",
        "timestamp": 1635360969
    },
    {
        "content": "<p>yeah, I wonder... -- there's no way to test that on the playground, is there?</p>",
        "id": 259289140,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635361023
    },
    {
        "content": "<p>unfortunately, I don't think so</p>",
        "id": 259289168,
        "sender_full_name": "lqd",
        "timestamp": 1635361036
    },
    {
        "content": "<p>(though it would be sweet. maybe even supporting compiletest and its annotations, simulating multiple files and crates and so on)</p>",
        "id": 259289431,
        "sender_full_name": "lqd",
        "timestamp": 1635361141
    },
    {
        "content": "<p>that'd be nice for sure!</p>",
        "id": 259289750,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635361256
    },
    {
        "content": "<p>gah, think I need to punt my investigation for today</p>",
        "id": 259289798,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635361273
    },
    {
        "content": "<p>might get back to this tomorrow!</p>",
        "id": 259289813,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635361278
    },
    {
        "content": "<p>But if someone wants to verify the playground example using two crates before then, please feel free to!</p>",
        "id": 259289886,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635361318
    },
    {
        "content": "<p>(if you split the Future and Termination items in 2 different crates, it looks like it does reproduce yeah)</p>",
        "id": 259292405,
        "sender_full_name": "lqd",
        "timestamp": 1635362215
    },
    {
        "content": "<p>Yay, it def seems like we've hit a compiler bug then!</p>",
        "id": 259296114,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635363958
    },
    {
        "content": "<p>niko and santiago may be interested in checking this out :)</p>",
        "id": 259296526,
        "sender_full_name": "lqd",
        "timestamp": 1635364154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> thanks, can you share the code you're using to test this in 2 different crates?</p>",
        "id": 259296994,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635364383
    },
    {
        "content": "<p>or I meant, I'm not sure what's the issue you're pointing out</p>",
        "id": 259297043,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635364406
    },
    {
        "content": "<p>sure, let me prepare you what we think looks interesting :)</p>",
        "id": 259297268,
        "sender_full_name": "lqd",
        "timestamp": 1635364509
    },
    {
        "content": "<p>so what seems interesting is that in <a href=\"https://github.com/lqd/negative-impls\">https://github.com/lqd/negative-impls</a> <code>single_crate</code> does build, but splitting its code into 2 crates (e.g. moving the <code>Future</code> things into <code>fake_libcore</code>), makes the rest of the code dealing with <code>Termination</code> (here in <code>fake_libstd</code>) stop building</p>",
        "id": 259299892,
        "sender_full_name": "lqd",
        "timestamp": 1635365669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> can you paste the error you're getting</p>",
        "id": 259301695,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635366498
    },
    {
        "content": "<p>it's a repro of yosh's actual test, so the error they had here is the same <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls.20in.20coherence/near/259287916\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/negative.20impls.20in.20coherence/near/259287916</a></p>",
        "id": 259301764,
        "sender_full_name": "lqd",
        "timestamp": 1635366536
    },
    {
        "content": "<p>oh oh</p>",
        "id": 259301800,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635366555
    },
    {
        "content": "<p>have you tried adding negative_impls in <a href=\"https://github.com/lqd/negative-impls/blob/master/fake_libstd/src/lib.rs\">https://github.com/lqd/negative-impls/blob/master/fake_libstd/src/lib.rs</a> ?</p>",
        "id": 259301810,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635366564
    },
    {
        "content": "<p>but simpler :)</p>",
        "id": 259301821,
        "sender_full_name": "lqd",
        "timestamp": 1635366575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls.20in.20coherence/near/259301810\">said</a>:</p>\n<blockquote>\n<p>have you tried adding negative_impls in <a href=\"https://github.com/lqd/negative-impls/blob/master/fake_libstd/src/lib.rs\">https://github.com/lqd/negative-impls/blob/master/fake_libstd/src/lib.rs</a> ?</p>\n</blockquote>\n<p>I think this is the problem</p>",
        "id": 259301844,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635366587
    },
    {
        "content": "<p>I don't think so, since there are no negative impls in that crate ?</p>",
        "id": 259301996,
        "sender_full_name": "lqd",
        "timestamp": 1635366651
    },
    {
        "content": "<p>hehe :), yeah, but the checks are feature gated using that flag</p>",
        "id": 259302063,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635366685
    },
    {
        "content": "<p>ok I've tried, and it doesn't seem to fix it</p>",
        "id": 259302252,
        "sender_full_name": "lqd",
        "timestamp": 1635366773
    },
    {
        "content": "<p>more info <a href=\"https://github.com/rust-lang/rust/pull/90104#discussion_r733971073\">https://github.com/rust-lang/rust/pull/90104#discussion_r733971073</a></p>",
        "id": 259302261,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635366776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls.20in.20coherence/near/259302252\">said</a>:</p>\n<blockquote>\n<p>ok I've tried, and it doesn't seem to fix it</p>\n</blockquote>\n<p>ohh ok</p>",
        "id": 259302276,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635366784
    },
    {
        "content": "<p>ah thanks for the link</p>",
        "id": 259302315,
        "sender_full_name": "lqd",
        "timestamp": 1635366806
    },
    {
        "content": "<p>it's defo true it could have mattered in this example reproduction, but probably not in yosh's original: both libcore and libstd have the feature gate already</p>",
        "id": 259302900,
        "sender_full_name": "lqd",
        "timestamp": 1635367091
    },
    {
        "content": "<p>(but I've pushed the feature gate to the repro just in case :)</p>",
        "id": 259303082,
        "sender_full_name": "lqd",
        "timestamp": 1635367194
    },
    {
        "content": "<p>yeah, I feel like this is more a specialization issue</p>",
        "id": 259303768,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635367503
    },
    {
        "content": "<p>the feature flag also needs to be included</p>",
        "id": 259303783,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635367511
    },
    {
        "content": "<p>first of all</p>",
        "id": 259303871,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635367558
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(negative_impls)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">fake_libcore</span>::<span class=\"n\">Future</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259303889,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635367562
    },
    {
        "content": "<p>gives</p>",
        "id": 259303916,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635367564
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0119]: conflicting implementations of trait `Termination` for type `std::result::Result&lt;(), _&gt;`\n  --&gt; src/lib.rs:11:1\n   |\n8  | impl&lt;E&gt; Termination for Result&lt;(), E&gt; {}\n   | ------------------------------------- first implementation here\n...\n11 | impl&lt;T&gt; Termination for T {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::result::Result&lt;(), _&gt;`\n</code></pre></div>",
        "id": 259303926,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635367575
    },
    {
        "content": "<p>you add the specialization feature flag</p>",
        "id": 259303944,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635367584
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(negative_impls)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(min_specialization)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">fake_libcore</span>::<span class=\"n\">Future</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259303970,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635367601
    },
    {
        "content": "<p>and it compiles</p>",
        "id": 259303975,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635367605
    },
    {
        "content": "<p>with the specialization feature flag, the whole example doesn't work</p>",
        "id": 259304037,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635367650
    },
    {
        "content": "<p>yeah it's not trying to add a new termination for all Ts, only Futures of Terminations</p>",
        "id": 259304183,
        "sender_full_name": "lqd",
        "timestamp": 1635367723
    },
    {
        "content": "<p>yeah but what I meant is ... it seems to me that the conflict is not related to negative impls and probably due to a limitation of specialization</p>",
        "id": 259304374,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635367832
    },
    {
        "content": "<p>may worth reading what <code>min_specialization</code> has left uncovered and maybe an example like this one is not yet covered</p>",
        "id": 259304417,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635367856
    },
    {
        "content": "<p>unsure tbh</p>",
        "id": 259304426,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635367862
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 259304436,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635367867
    },
    {
        "content": "<p>yeah same</p>",
        "id": 259304442,
        "sender_full_name": "lqd",
        "timestamp": 1635367871
    },
    {
        "content": "<p>at least it's <em>interesting</em> :)</p>",
        "id": 259304473,
        "sender_full_name": "lqd",
        "timestamp": 1635367889
    },
    {
        "content": "<p>especially since it compiles when in a single crate that is</p>",
        "id": 259304576,
        "sender_full_name": "lqd",
        "timestamp": 1635367927
    },
    {
        "content": "<p>coherence isn't an issue when it's a single crate</p>",
        "id": 259304828,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635368041
    },
    {
        "content": "<p>good point</p>",
        "id": 259304958,
        "sender_full_name": "lqd",
        "timestamp": 1635368079
    },
    {
        "content": "<p>then what is this error saying here ?</p>",
        "id": 259305233,
        "sender_full_name": "lqd",
        "timestamp": 1635368198
    },
    {
        "content": "<p>I don't know if this is a specialization issue; seems like a negative impl issue</p>",
        "id": 259305244,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635368205
    },
    {
        "content": "<p>yeah, it may be, after saying that is about specialization I ended having second thoughts :)</p>",
        "id": 259305345,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635368258
    },
    {
        "content": "<p>I imagine that it's something to do with the fact that the negative impl has a type parameter</p>",
        "id": 259305375,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635368281
    },
    {
        "content": "<p>right</p>",
        "id": 259305579,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635368374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> can you try making an even smaller repro using a \"<code>Future</code>\" trait without <code>Output</code></p>",
        "id": 259305597,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635368384
    },
    {
        "content": "<p>it would also be nice to create a test case in the compiler</p>",
        "id": 259305674,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635368407
    },
    {
        "content": "<p>it's very simple</p>",
        "id": 259305690,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635368412
    },
    {
        "content": "<p>I can try yeah</p>",
        "id": 259305692,
        "sender_full_name": "lqd",
        "timestamp": 1635368412
    },
    {
        "content": "<p>So this impl would look like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259305715,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635368418
    },
    {
        "content": "<p>could even probably reduce <code>Result</code> to <code>Result&lt;E&gt;</code></p>",
        "id": 259305773,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635368441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> take a look at <a href=\"https://github.com/rust-lang/rust/pull/90104/files#diff-28616a2505fa0fda83688dfdb184c28b1774b60b0a8ad2756ec377a49587d009\">https://github.com/rust-lang/rust/pull/90104/files#diff-28616a2505fa0fda83688dfdb184c28b1774b60b0a8ad2756ec377a49587d009</a></p>",
        "id": 259305796,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635368455
    },
    {
        "content": "<p>or maybe just use <code>Option</code> for clarity</p>",
        "id": 259305811,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635368461
    },
    {
        "content": "<p>a some point the repro will look like the tests in <a href=\"https://github.com/rust-lang/rust/issues/90104\">#90104</a> which we know work :)</p>",
        "id": 259305900,
        "sender_full_name": "lqd",
        "timestamp": 1635368499
    },
    {
        "content": "<p>lol yeah :)</p>",
        "id": 259306131,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635368614
    },
    {
        "content": "<p>but I think <span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> is right, it may be related to the associated type</p>",
        "id": 259306234,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635368651
    },
    {
        "content": "<p>Well, its either the associated type, or the type parameter</p>",
        "id": 259306289,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635368681
    },
    {
        "content": "<p>My guess is the associated type</p>",
        "id": 259306302,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635368688
    },
    {
        "content": "<p>my guess is the associated type :)</p>",
        "id": 259306319,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635368703
    },
    {
        "content": "<p>We'll see</p>",
        "id": 259306337,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635368715
    },
    {
        "content": "<p>so let's say </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>for a <code>Future</code> without <code>Output</code> ?</p>",
        "id": 259306598,
        "sender_full_name": "lqd",
        "timestamp": 1635368878
    },
    {
        "content": "<p>still conflicts ...</p>",
        "id": 259306730,
        "sender_full_name": "lqd",
        "timestamp": 1635368929
    },
    {
        "content": "<p>if we remove the type parameter for the result negative impl, say use an option, then it works</p>",
        "id": 259307131,
        "sender_full_name": "lqd",
        "timestamp": 1635369136
    },
    {
        "content": "<p>Wait, what do you mean <code>Option</code>?</p>",
        "id": 259307602,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635369370
    },
    {
        "content": "<p><code>Option&lt;T&gt;</code> or <code>Option&lt;()&gt;</code></p>",
        "id": 259307624,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635369378
    },
    {
        "content": "<p>(my suggestion to make it <code>Option&lt;E&gt;</code> was to just remove the needless <code>()</code>)</p>",
        "id": 259307825,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635369431
    },
    {
        "content": "<p>ah sorry I meant Option&lt;E&gt; conflicts while Option&lt;()&gt; doesn't</p>",
        "id": 259308189,
        "sender_full_name": "lqd",
        "timestamp": 1635369589
    },
    {
        "content": "<p>ok cool</p>",
        "id": 259308399,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635369680
    },
    {
        "content": "<p>so just about what I expected</p>",
        "id": 259308407,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635369687
    },
    {
        "content": "<p>can you push that</p>",
        "id": 259308442,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635369707
    },
    {
        "content": "<p>sure</p>",
        "id": 259308463,
        "sender_full_name": "lqd",
        "timestamp": 1635369720
    },
    {
        "content": "<p>right, it's about the type parameter</p>",
        "id": 259308634,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635369795
    },
    {
        "content": "<p>I've also tested it</p>",
        "id": 259308646,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635369799
    },
    {
        "content": "<p>done</p>",
        "id": 259308878,
        "sender_full_name": "lqd",
        "timestamp": 1635369923
    },
    {
        "content": "<p>the very minimal is</p>",
        "id": 259309208,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635370090
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(negative_impls)]</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259309218,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635370093
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(negative_impls)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">fake_libcore</span>::<span class=\"n\">Future</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259309227,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635370103
    },
    {
        "content": "<p>I don't even think  you need specialization</p>",
        "id": 259309299,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635370132
    },
    {
        "content": "<p>ah yes: the <code>()</code> impls were more important in the real code than the example I'll remove them</p>",
        "id": 259309344,
        "sender_full_name": "lqd",
        "timestamp": 1635370161
    },
    {
        "content": "<p>that's the perfect UI test size</p>",
        "id": 259309605,
        "sender_full_name": "lqd",
        "timestamp": 1635370291
    },
    {
        "content": "<p>I think this will work:</p>",
        "id": 259433022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635446181
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(negative_impls)]</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">E</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259433044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635446193
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(negative_impls)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">fake_libcore</span>::<span class=\"n\">Future</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Termination</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259433062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1635446207
    },
    {
        "content": "<p>you're right :)</p>",
        "id": 259433177,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635446271
    },
    {
        "content": "<p>it works</p>",
        "id": 259433185,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635446275
    },
    {
        "content": "<p>nice, thanks Niko! it does work on the repro as well, and yosh will hopefully be able to keep testing their idea (famous last words :)</p>\n<p>(I've pushed this to the repo just in case it gets lost in this thread)</p>",
        "id": 259440406,
        "sender_full_name": "lqd",
        "timestamp": 1635449595
    },
    {
        "content": "<p>dang implicit <code>Sized</code></p>",
        "id": 259442215,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635450462
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>    Finished release [optimized] target(s) in 1m 02s\nBuild completed successfully in 0:06:04\n</code></pre></div>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 259489490,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635491199
    },
    {
        "content": "<p>thanks everyone!!</p>",
        "id": 259489773,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635491437
    },
    {
        "content": "<p><a href=\"https://github.com/yoshuawuyts/rust/commit/6a5ad78a92b0a8f8fa43e642359bc30ebe5a2c37\">Here's the implementation</a>  — going to have to figure out with folks what we want to do with this; but it's really cool to know that it's now possible to implement!</p>",
        "id": 259489913,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1635491549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span> great, this is huge!!!</p>",
        "id": 259513125,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635508356
    },
    {
        "content": "<p>we're going to fix the underlying problem because your original example should have worked</p>",
        "id": 259513172,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635508388
    },
    {
        "content": "<p>Actually, I think the original example <em>shouldn't</em> have worked</p>",
        "id": 259521144,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635512865
    },
    {
        "content": "<p>Because the negative impl only applies for <code>E: Sized</code></p>",
        "id": 259521223,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635512889
    },
    {
        "content": "<p>(Right?)</p>",
        "id": 259521258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635512912
    },
    {
        "content": "<p>according to Niko, negative impls should behave like in an always applicable way</p>",
        "id": 259524797,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635514607
    },
    {
        "content": "<p>I think that already happens on specialization</p>",
        "id": 259524852,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635514633
    },
    {
        "content": "<p>need to read <a href=\"https://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/\">https://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/</a></p>",
        "id": 259524860,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635514636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can explain this better :)</p>",
        "id": 259524928,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1635514664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts [he/they]</span> you can try out <a href=\"https://github.com/rust-lang/rust/issues/93175\">#93175</a></p>",
        "id": 269132061,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643042106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I should have time to do that tomorrow!</p>",
        "id": 269132181,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1643042161
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 269132236,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643042169
    },
    {
        "content": "<p>it may be included in tomorrow's nightly</p>",
        "id": 269132289,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643042197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211722\">Yoshua Wuyts [he/they]</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls.20in.20coherence/near/269132181\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> I should have time to do that tomorrow!</p>\n</blockquote>\n<p>the thing is merged now but I don't think it's on nightly yet</p>",
        "id": 269264855,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1643121279
    },
    {
        "content": "<p>Created a stream for further communication <a class=\"stream\" data-stream-id=\"315151\" href=\"/#narrow/stream/315151-wg-traits.2Fnegative-impls\">#wg-traits/negative-impls</a></p>",
        "id": 271446671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1644506696
    }
]