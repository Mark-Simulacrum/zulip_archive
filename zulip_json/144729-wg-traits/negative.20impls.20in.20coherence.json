[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I'm making this topic for us to talk further</p>",
        "id": 241074988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581253
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 241075462,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622581486
    },
    {
        "content": "<p>to help with continuity<br>\nprevious convo: <a href=\"#narrow/stream/131828-t-compiler/topic/conflicting.20impls\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/conflicting.20impls</a><br>\nnotes: <a href=\"https://hackmd.io/@nikomatsakis/HJLd4WE9O\">https://hackmd.io/@nikomatsakis/HJLd4WE9O</a></p>",
        "id": 241075801,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622581659
    },
    {
        "content": "<p>WIP PR: <a href=\"https://github.com/rust-lang/rust/pull/85764\">https://github.com/rust-lang/rust/pull/85764</a></p>",
        "id": 241075854,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622581682
    },
    {
        "content": "<p>the other question, which we didn't touch on, is what is needed from the lang team side</p>",
        "id": 241076069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581798
    },
    {
        "content": "<p>I'm not sure!</p>",
        "id": 241076108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581803
    },
    {
        "content": "<p>I think I will create a project propsal</p>",
        "id": 241076334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581924
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/lang-team/issues/96\">https://github.com/rust-lang/lang-team/issues/96</a></p>",
        "id": 241076914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622582198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls.20in.20coherence/near/241076914\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/lang-team/issues/96\">https://github.com/rust-lang/lang-team/issues/96</a></p>\n</blockquote>\n<p>blessed, ty</p>",
        "id": 241077848,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622582627
    },
    {
        "content": "<p>minor typo in the motivating examples</p>",
        "id": 241077911,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622582653
    },
    {
        "content": "<p>should be <code>From&lt;&amp;str&gt; for Box&lt;dyn Error&gt;</code> but it's reversed</p>",
        "id": 241077931,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622582668
    },
    {
        "content": "<p>ah yeah</p>",
        "id": 241078132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622582818
    },
    {
        "content": "<p>part of the idea with the new PredicateKind is to change existing negative impls that used to get exposed in <code>predicates</code> as <code>PredicateKind::Trait</code> to <code>PredicateKind::NotTrait</code> right? As in it's not just to have the representation available so we can invert actual impls when doing the overlap check.</p>",
        "id": 241089407,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622590898
    },
    {
        "content": "<p>trying to figure out what \"teach the trait checker to prove <code>T: !Trait</code> if there are negative impls\" entails and starting with making it so negative impls show up as <code>PredicateKind::NotTrait</code> in <code>overlap_within_probe</code></p>",
        "id": 241089513,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622590993
    },
    {
        "content": "<p>ended up digging pretty deep into <a href=\"http://collect.rs\">collect.rs</a> but started to second guess by the time I got to <code>gather_explicit_predicates_of</code></p>",
        "id": 241089933,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622591342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I hadn't quite figured out what shape I thought that should have</p>",
        "id": 241145952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639494
    },
    {
        "content": "<p>this is also connected (a bit) to the semantics of auto traits and negative impls</p>",
        "id": 241145976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639507
    },
    {
        "content": "<p>something that <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> and I were discussing recently</p>",
        "id": 241145990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639515
    },
    {
        "content": "<p>I think my expectation is that we would not change <a href=\"http://collect.rs\">collect.rs</a></p>",
        "id": 241146037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639527
    },
    {
        "content": "<p>I would expect to change how we manage candidates a bit</p>",
        "id": 241146058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639542
    },
    {
        "content": "<p>I'm pulling up the relevant code</p>",
        "id": 241146255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639636
    },
    {
        "content": "<p>basically, where <code>candidate_from_obligation_no_cache</code> invokes <code>filter_negative_and_reservation_impls</code> and so forth</p>",
        "id": 241146489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639739
    },
    {
        "content": "<p>I think we might tweak this a bit</p>",
        "id": 241146501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639745
    },
    {
        "content": "<p>so that there is a \"negative candidate\" and a \"positive candidate\" function</p>",
        "id": 241146517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639755
    },
    {
        "content": "<p>it's still a bit odd that we assemble both polarities together into one list, but I think it's \"ok\"</p>",
        "id": 241146586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639771
    },
    {
        "content": "<p>hmm, went to do this but I'm a bit confused. I don't understand how <code>overlap_within_probe</code> is related to <code>candidate_from_obligation_no_cache</code> or how messing with the candidates in the latter will affect the predicates exposed in the latter</p>",
        "id": 241595032,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622841885
    },
    {
        "content": "<p>okay so, I think I found the connection, obvious in retrospect, <code>candidate_from_obligation</code> is a method on SelectionContext which is an arg in <code>overlap_within_probe</code></p>",
        "id": 241595977,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622842572
    },
    {
        "content": "<p>I think it has to be via <code>predicate_may_hold_fatal</code> but I still haven't figured out how that ends up calling <code>select</code></p>",
        "id": 241596514,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622842981
    },
    {
        "content": "<p>tried tracing backwards through the callers of <code>predicate_may_hold_fatal</code> but dead ended at the <code>FulfillmentContext::select</code></p>",
        "id": 241597217,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622843493
    },
    {
        "content": "<p>oh shit i think I found it in InferContext</p>",
        "id": 241597772,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622843920
    },
    {
        "content": "<p>well, maybe not, but I have a better idea of how they relate, if not understanding the exact series of calls from one to the other</p>",
        "id": 241598262,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622844265
    },
    {
        "content": "<p>oh my god, I think i get it, I'm negating the obligation which is an input into candidate_from_obligation</p>",
        "id": 241598736,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622844433
    },
    {
        "content": "<p>wait so is the idea that we'd have a <code>filter_negative_and_reservation_impls</code> and a <code>filter_positive_and_reservation_impls</code> and when the obligation has been negated we call the <code>filter_positive</code> version instead of <code>filter_negative</code>?</p>",
        "id": 241598944,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622844582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> sorry, last week I was basically afk all week, how are you doing here?</p>",
        "id": 242783080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623783794
    },
    {
        "content": "<p>Haven't picked it back up since my last msgs</p>",
        "id": 242785254,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1623784754
    },
    {
        "content": "<p>finally picking this back up again</p>",
        "id": 245351664,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625768548
    },
    {
        "content": "<p>we should probably find some good time to chat about it</p>",
        "id": 245360405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625772749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls.20in.20coherence/near/245360405\">said</a>:</p>\n<blockquote>\n<p>we should probably find some good time to chat about it</p>\n</blockquote>\n<p>my day is wide open today if you have time</p>",
        "id": 245366452,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625775512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> is your day open today? Otherwise, let's schedule a time next week</p>",
        "id": 245441640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625836637
    },
    {
        "content": "<p>I'm not sure about today, it's starting to fill up</p>",
        "id": 245441656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625836643
    },
    {
        "content": "<p>Today's my \"commute to the office day\" so not really open</p>",
        "id": 245441853,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625836738
    },
    {
        "content": "<p>My Monday next week is pretty open though</p>",
        "id": 245441884,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1625836756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I changed up <a href=\"https://github.com/rust-lang/rust/pull/85764/\">https://github.com/rust-lang/rust/pull/85764/</a> to properly negate the obligation and to thread the polarity through as a member rather than an alternate PredicateKind</p>",
        "id": 246165721,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389340
    },
    {
        "content": "<p>and now im getting ready to setup the inverse of <code>filter_negative_and_reservation_impls</code> and thread the polarity through the <code>TraitPredicate</code></p>",
        "id": 246165761,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389370
    },
    {
        "content": "<p>and I'm unsure of where exactly I should put the polarity</p>",
        "id": 246165779,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389387
    },
    {
        "content": "<p>my guesses are either in the <code>TraitPredicate</code> or in the <code>TraitRef</code></p>",
        "id": 246165786,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389396
    },
    {
        "content": "<p>but not sure which one to pick</p>",
        "id": 246165792,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389399
    },
    {
        "content": "<p>gonna put it in traitpredicate</p>",
        "id": 246166187,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389666
    },
    {
        "content": "<p>seems more appropriate</p>",
        "id": 246166190,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389669
    },
    {
        "content": "<p>yoloo</p>",
        "id": 246166193,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626389670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> that is correct</p>",
        "id": 246232601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626446793
    },
    {
        "content": "<p>TraitRef is a more \"primitive\" concept</p>",
        "id": 246232620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626446801
    },
    {
        "content": "<p><code>TraitPredicate</code> is <em>perfect</em></p>",
        "id": 246232638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626446806
    },
    {
        "content": "<p>TraitPredicate is basically \"what you want to prove\" -- either that the trait <em>is</em> or <em>is not</em> implemented</p>",
        "id": 246232656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626446820
    },
    {
        "content": "<p>perfect. Okay then I think I have that sorted already, there's a lot of places where I wasn't sure how to properly thread in the Polarity so I defaulted it to just assuming positive. The place that I saw it was creating a TraitPredicate from a PredicateKind I used the existing polarity and I'm hoping that's the only place I actually needed to thread it through. Other than that I think I may only need to setup the inverted <code>filter_negative_and_reservation_impls</code> but I'm currently unclear on how exactly to implement that and need to get a better understanding of the existing logic and what each of the return paths mean in practice.</p>",
        "id": 246254685,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1626456949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> that sounds <em>reasonable</em>, at least at first glance</p>",
        "id": 246308254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626503058
    },
    {
        "content": "<p>I am imagining that this becomes <code>filter_reserved_or_opposite_polarity_impls</code> -- but the question is, did you also add the polarity into the <code>TraitObligationStack</code> somewhere?</p>",
        "id": 246308281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626503140
    }
]