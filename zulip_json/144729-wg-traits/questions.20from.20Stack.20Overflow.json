[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Works</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This is does not report any errors from the compiler. If you add a body (even <code>{ unimplemented!() }</code>) it complains about <code>Sized</code>. Is there any possible implementation of this trait method that <em>doesn't</em> require <code>Sized</code>? Should the unimplemented trait method have the same warning?</p>",
        "id": 157298199,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548962844
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Errors</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>this <em>does</em> have the warning</p>",
        "id": 157298279,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548962882
    },
    {
        "content": "<p>I think the latter error is more due to a property of <code>Option</code> itself rather than of the trait</p>",
        "id": 157299640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548963703
    },
    {
        "content": "<p>well</p>",
        "id": 157299643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548963706
    },
    {
        "content": "<p>you can't do <code>Option&lt;[u32]&gt;</code> for example</p>",
        "id": 157299655,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548963719
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> we intentionally (but confusingly)  say that \"every function <strong>body</strong> checks that its return type is sized\"; this was mostly to allow us room to expand traits in the future to permit unsized types in more places</p>",
        "id": 157299728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548963755
    },
    {
        "content": "<p>notably, we wanted to define</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">...);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>without requiring <code>FnOnce: Sized</code></p>",
        "id": 157299748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548963775
    },
    {
        "content": "<p>(since we expect that to be implementable for unsized types eventually)</p>",
        "id": 157299794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548963805
    },
    {
        "content": "<p>the point is, that trait def'n doesn't have a function <strong>body</strong>, so it doesn't enforce the requirement that the parameter types are sized, though it's true that to actually <em>implement</em> the trait, the self type must (presently) be sized</p>",
        "id": 157299872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548963842
    },
    {
        "content": "<p>(what <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> said re: Option is also true, that's a separate case)</p>",
        "id": 157299914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548963868
    },
    {
        "content": "<p>Ok, let me say that back to you.</p>",
        "id": 157300165,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548964042
    },
    {
        "content": "<p>There are two sets of checks happening here, which is why the difference appears confusing. <code>Option</code> requires <code>T: Sized</code>. Something that doesn't require <code>Sized</code> would be fine (e.g. <code>Box&lt;Self&gt;</code>)</p>",
        "id": 157300322,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548964162
    },
    {
        "content": "<p>The second check is that a (trait? any?) function <em>with a body</em> requires all param types (including return type?) to be sized.</p>",
        "id": 157300467,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548964258
    },
    {
        "content": "<p>I guess only traits can have \"bodiless functions\".</p>",
        "id": 157300622,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548964353
    },
    {
        "content": "<p>Can the \"unsized locals/rvalue\" work not apply to a return type then?</p>",
        "id": 157300655,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548964383
    },
    {
        "content": "<p>Oh:</p>\n<div class=\"codehilite\"><pre><span></span>// You CANNOT have unsized return types.\n</pre></div>",
        "id": 157300680,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548964400
    },
    {
        "content": "<blockquote>\n<p>The second check is that a (trait? any?) function <em>with a body</em> requires all param types (including return type?) to be sized.</p>\n</blockquote>\n<p>Right. You can think of it like this:</p>\n<p>The function <em>body</em>, to type-check, requires its parameters + return-type are <code>Sized</code>, because we wouldn't know how to generate code otherwise (but if there is no body, we don't have to generate code, so no error).</p>\n<p>Similarly, calling  a function imposes the same requirement, for the same reason.</p>",
        "id": 157301058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548964617
    },
    {
        "content": "<blockquote>\n<p>Can the \"unsized locals/rvalue\" work not apply to a return type then?</p>\n</blockquote>\n<p>No, it can't, at least, not without more complexity. The problem is that the way return types work, the caller has to allocate stack space for the callee to write into, but without knowing the type of the value that will be returned, we can't know how much stack space to allocate.</p>",
        "id": 157301109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548964676
    },
    {
        "content": "<p>(In contrast, we know how big the parameters we're about to pass are, or we can figure it out)</p>",
        "id": 157301160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548964692
    },
    {
        "content": "<p>Thank you! I think I will need to do some deeper thinking as to how the actual implementation of <code>Box&lt;FnOnce()&gt;</code> can work.</p>",
        "id": 157301800,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548965080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  About that: I've always thought it would be possible to alloca the return value, and then move it when popping the stack frame. Has that been considered?</p>",
        "id": 157302313,
        "sender_full_name": "mikeyhew",
        "timestamp": 1548965420
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/VeJvdfHCSCtp0ipp4_ETgfFE/Screen-Shot-2019-01-31-at-3.23.48-PM.png\" target=\"_blank\" title=\"Screen-Shot-2019-01-31-at-3.23.48-PM.png\">Screen-Shot-2019-01-31-at-3.23.48-PM.png</a> Like this</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/VeJvdfHCSCtp0ipp4_ETgfFE/Screen-Shot-2019-01-31-at-3.23.48-PM.png\" target=\"_blank\" title=\"Screen-Shot-2019-01-31-at-3.23.48-PM.png\"><img src=\"/user_uploads/4715/VeJvdfHCSCtp0ipp4_ETgfFE/Screen-Shot-2019-01-31-at-3.23.48-PM.png\"></a></div>",
        "id": 157303415,
        "sender_full_name": "mikeyhew",
        "timestamp": 1548966261
    },
    {
        "content": "<p>I don't know that I'd thought about moving it, I suppose it may be possible</p>",
        "id": 157305474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548968067
    },
    {
        "content": "<p>certainly a big change to the ABI</p>",
        "id": 157305479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548968070
    }
]