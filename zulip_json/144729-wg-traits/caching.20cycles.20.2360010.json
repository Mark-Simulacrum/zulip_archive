[
    {
        "content": "<p>so over in <a class=\"stream\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler\">#t-compiler</a>, I <a href=\"#narrow/stream/131828-t-compiler/topic/trait.20resolution.20regression.20.2360010/near/164634040\" title=\"#narrow/stream/131828-t-compiler/topic/trait.20resolution.20regression.20.2360010/near/164634040\">noted a problem</a> with the way that we are caching things in our current trait evaluator</p>",
        "id": 164634204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556726451
    },
    {
        "content": "<p>the problem has to do with cycles</p>",
        "id": 164634211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556726455
    },
    {
        "content": "<p>I'm kind of chatting on here about possible solutions :)</p>",
        "id": 164634235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556726470
    },
    {
        "content": "<p>anyway I mean the obvious thing is to do the usual algorithm for detecting SCCs, I think</p>",
        "id": 164634475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556726659
    },
    {
        "content": "<p>basically I think we would not cache <em>anything</em> that depended on a cycle until we reach the \"head\" of the cycle in the stack, and then we'd cache everything at once (as appropriate)</p>",
        "id": 164634532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556726721
    },
    {
        "content": "<p>implementing this though is gonna' be a bit annoying</p>",
        "id": 164635463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556727558
    },
    {
        "content": "<p>I'm also worrying a bit about the SLG solver in chalk-engine; want to be sure it doesn't fall into the same trap... I feel like it may.</p>",
        "id": 164635480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556727578
    }
]