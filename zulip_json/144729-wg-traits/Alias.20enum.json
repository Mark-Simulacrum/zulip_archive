[
    {
        "content": "<blockquote>\n<p>nikomatsakis: so maybe we want 3 variants ...<br>\n... that unify treats the same ...</p>\n</blockquote>\n<p>Unify doesn't have to change at all then, since it doesn't actually look into the alias (it just puts it in <code>AliasEq</code>, but nothing else)</p>",
        "id": 185532833,
        "sender_full_name": "detrumi",
        "timestamp": 1578946524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> So we talked about these two options:</p>\n<ul>\n<li><code>AliasDefId</code>; putting just the <code>DefId</code> inside the <code>Alias</code> and adding a <code>alias_kind</code> method to <code>RustIrDatabase</code></li>\n<li>Changing <code>Alias</code> to an enum (projection, impl trait, type alias)</li>\n</ul>\n<p>I'm not sure we came to a conclusion there, but either way, <code>unify</code> treats them the same, and the main implementation work is adding support for <code>impl Trait</code> types, right?</p>",
        "id": 185533270,
        "sender_full_name": "detrumi",
        "timestamp": 1578946815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> sounds right. I think I mildly lean towards the simpler type enum for now</p>",
        "id": 185641455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579036747
    }
]