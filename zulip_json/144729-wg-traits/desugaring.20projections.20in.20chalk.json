[
    {
        "content": "<p>So I realized something this morning. While I still like the idea of desugaring projections, it's really equivalent to eager normalization -- and it has some of the same problems! In particular, it is straightforward to handle something like this:</p>\n<div class=\"codehilite\"><pre><span></span>Implemented(T: Foo&lt; &lt;T as Iterator&gt;::Item &gt;)\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span>Implemented(T: Foo&lt; U &gt;) :- ProjectionEq(&lt;T as Iterator&gt;::Item  = U)\n</pre></div>\n\n\n<p>But we can't really normalize something like this that way:</p>\n<div class=\"codehilite\"><pre><span></span>Implemented(T: Foo&lt; for&lt;&#39;a&gt; fn(&lt;&amp;&#39;a as Bar&gt;::Item &gt;)\n</pre></div>\n\n\n<p>The problem is that the result <code>U</code> might have to name <code>'a</code>. This is of course a known bug in rustc. It works fine in chalk today, though, because we basically <em>do</em> the <code>ProjectionEq</code> desugaring, but quite \"late\", such that we create the <code>ProjectionEq</code> in a context where it is allowed to name <code>'a</code>.</p>\n<p>This doesn't really invalidate much of the work towards introducing type families etc -- that work is still needed to enable chalk to be shared between rustc and rust-analyzer, for example, and I still think it can be very useful for doing quality engineering later. But it does sort of mean that the \"desugaring\" plan doesn't make sense as I imagined it -- I'm not sure if there is some alternative formulation that <em>does</em> make sense, to be honest. </p>\n<p>All of this fits well with our plan for next design meeting, since the stuff I had planned to talk about was exactly more details around how we handle cases like this (and how to help catch rustc up with chalk in some respects).</p>",
        "id": 179333620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572359246
    },
    {
        "content": "<p>Interestingly, I had already written the code to do the transformation on a branch -- it included an <code>unwrap</code> call that would have failed for these higher-ranked constructs that I say we can't handle. That unwrap never failed. This suggests a hole in our test coverage we should probably fix. :)</p>",
        "id": 179333841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572359372
    },
    {
        "content": "<blockquote>\n<p>I'm not sure if there is some alternative formulation that <em>does</em> make sense, to be honest. </p>\n</blockquote>\n<p>I guess the alternative formulation might be to \"lower\" more of the equality rules, particularly those around higher-ranked types, into goals themselves. I'm not sure if there is real value there or not.</p>",
        "id": 179333976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572359451
    },
    {
        "content": "<p>I'm not sure I understand, isn't this possible?</p>\n<div class=\"codehilite\"><pre><span></span>Implemented(T: Foo&lt; U &gt;) :- ProjectionEq(for&lt;&#39;a&gt; fn(&lt;&amp;&#39;a as Bar&gt;::Item) = U)\n</pre></div>",
        "id": 179340855,
        "sender_full_name": "detrumi",
        "timestamp": 1572363132
    },
    {
        "content": "<p>Or is it the left <code>U</code> that might have to name <code>'a</code>?</p>",
        "id": 179341239,
        "sender_full_name": "detrumi",
        "timestamp": 1572363366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> what you wrote there is not directly possible just by the structure of our goals, but you could write something like</p>\n<div class=\"codehilite\"><pre><span></span>forall&lt;T, U&gt; { // let me make these explicit, I left them implicit before\n    Implemented(T: Foo&lt; fn(U) &gt;) :-\n        forall&lt;&#39;a&gt; { ProjectionEq(&lt;&amp;&#39;a as Bar&gt;::Item = U) }\n}\n</pre></div>\n\n\n<p>Unfortunately, as you noted, the problem here is that the <code>U</code> might have to name <code>'a</code> -- ie., you could have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and (as you can see) <code>'a</code> is not in scope at the point where <code>U</code> is declared.</p>",
        "id": 179364055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572376608
    }
]