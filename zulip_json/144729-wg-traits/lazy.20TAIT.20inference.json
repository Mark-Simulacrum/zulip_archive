[
    {
        "content": "<p>I'm doing some refactorings because the entire opaque type inference state was stored in FnCtxt and not InferCtxt, so we can't use it from InferCtxt (which is just a field of FnCtxt).</p>",
        "id": 246981310,
        "sender_full_name": "oli",
        "timestamp": 1627048937
    },
    {
        "content": "<p>yeah</p>",
        "id": 246981326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627048949
    },
    {
        "content": "<p>but it is looking like I can do the refactorings in nice small steps by re-using the existing eager infrastructure, but using it at the lazy points</p>",
        "id": 246981404,
        "sender_full_name": "oli",
        "timestamp": 1627048991
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 246981413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627048994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/lazy.20TAIT.20inference/near/246981404\">said</a>:</p>\n<blockquote>\n<p>but it is looking like I can do the refactorings in nice small steps by re-using the existing eager infrastructure, but using it at the lazy points</p>\n</blockquote>\n<p>great!</p>",
        "id": 246981438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049013
    },
    {
        "content": "<p>it's wasteful, as the existing stuff can handle a lot of cases that don't happen anymore, but we can clean that up afterwards</p>",
        "id": 246981453,
        "sender_full_name": "oli",
        "timestamp": 1627049023
    },
    {
        "content": "<p>cool</p>",
        "id": 246981474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049033
    },
    {
        "content": "<p>One thing I was wondering is whether we should gate the lazy thing</p>",
        "id": 246981497,
        "sender_full_name": "oli",
        "timestamp": 1627049041
    },
    {
        "content": "<p>side note that next week I am hoping to use to focus primarily on reviews and some other similar things</p>",
        "id": 246981542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049045
    },
    {
        "content": "<p>so hopefully any PRs will be promptly reviewed :)</p>",
        "id": 246981578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/lazy.20TAIT.20inference/near/246981497\">said</a>:</p>\n<blockquote>\n<p>One thing I was wondering is whether we should gate the lazy thing</p>\n</blockquote>\n<p>that's a good question</p>",
        "id": 246981584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049066
    },
    {
        "content": "<p>I'm incliend to say no</p>",
        "id": 246981600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049076
    },
    {
        "content": "<p>I'm debating whether it'll be observable to end users in any way</p>",
        "id": 246981625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049090
    },
    {
        "content": "<p>I am too so far, but we'll see if there are any problems</p>",
        "id": 246981633,
        "sender_full_name": "oli",
        "timestamp": 1627049093
    },
    {
        "content": "<p>(I don't see how?)</p>",
        "id": 246981640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049096
    },
    {
        "content": "<p>only via async if at all</p>",
        "id": 246981643,
        "sender_full_name": "oli",
        "timestamp": 1627049098
    },
    {
        "content": "<p>but I don't see how with async either</p>",
        "id": 246981672,
        "sender_full_name": "oli",
        "timestamp": 1627049108
    },
    {
        "content": "<p>I believe that in all stable cases existential impl Trait only appears in a fn return type</p>",
        "id": 246981691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049118
    },
    {
        "content": "<p>and I don't <em>think</em> these refactorings affect that position</p>",
        "id": 246981703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049126
    },
    {
        "content": "<p>well... they do affect the code that handles these, but the behaviour should be trivially equivalent</p>",
        "id": 246981740,
        "sender_full_name": "oli",
        "timestamp": 1627049147
    },
    {
        "content": "<p>since conceptually we are just kind of visiting the fn return type right away, so lazy and eager are kind of equivalent</p>",
        "id": 246981746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049150
    },
    {
        "content": "<p>right, I meant in terms of user-observable behavior</p>",
        "id": 246981773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049162
    },
    {
        "content": "<p>so in that way I'd rather not gate it</p>",
        "id": 246981821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049170
    },
    {
        "content": "<p>because if there are interactions, I'd like to see them :)</p>",
        "id": 246981829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049175
    },
    {
        "content": "<p>I was mainly worried that it may introduce user-observable behaviour</p>",
        "id": 246981833,
        "sender_full_name": "oli",
        "timestamp": 1627049178
    },
    {
        "content": "<p>I have to take some care around match arm unification</p>",
        "id": 246981852,
        "sender_full_name": "oli",
        "timestamp": 1627049191
    },
    {
        "content": "<p>but other than that, should be fine</p>",
        "id": 246981856,
        "sender_full_name": "oli",
        "timestamp": 1627049195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/lazy.20TAIT.20inference/near/246981852\">said</a>:</p>\n<blockquote>\n<p>I have to take some care around match arm unification</p>\n</blockquote>\n<p>there's some special magic code there that I'm trying to grok</p>",
        "id": 246981878,
        "sender_full_name": "oli",
        "timestamp": 1627049209
    },
    {
        "content": "<p>I hope it's just for diagnostics</p>",
        "id": 246981889,
        "sender_full_name": "oli",
        "timestamp": 1627049213
    },
    {
        "content": "<p>but it's not clear</p>",
        "id": 246981895,
        "sender_full_name": "oli",
        "timestamp": 1627049216
    },
    {
        "content": "<p>hmm, special code for <code>impl Trait</code> there?</p>",
        "id": 246982041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049295
    },
    {
        "content": "<p>that's interesting</p>",
        "id": 246982044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049297
    },
    {
        "content": "<p>I could imagine it being for diagnostics, that might be a common case where people try to return N types</p>",
        "id": 246982070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049307
    },
    {
        "content": "<p>which reminds me</p>",
        "id": 246982075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049311
    },
    {
        "content": "<p>that's a nice thing to cover in an \"impl trait\" vision doc :)</p>",
        "id": 246982098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049322
    },
    {
        "content": "<p>yea, but I don't see how it can affect anything but diagnostics, so I think it's fine, still need to keep it working</p>",
        "id": 246982123,
        "sender_full_name": "oli",
        "timestamp": 1627049333
    },
    {
        "content": "<p>sounds good</p>",
        "id": 246982614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627049588
    },
    {
        "content": "<p>so... fun thing I just noticed, due to the way <code>rustc_infer</code> and <code>rustc_trait_selection</code> are split up, we can't \"just\" transform the eager system into a lazy one. We need to split out obligation registering on opaque types from the opaque type instantiation code</p>",
        "id": 246986275,
        "sender_full_name": "oli",
        "timestamp": 1627051439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> how so?</p>",
        "id": 246991838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627054044
    },
    {
        "content": "<p>we could in principle convert the \"resolve inference variables\" to return obligations, I guess</p>",
        "id": 246991901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627054073
    },
    {
        "content": "<p>the other option I can imagine is that we accumulate the options in the inference context and have to remember to \"take them out\"</p>",
        "id": 246991991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627054100
    },
    {
        "content": "<p>I don't love that</p>",
        "id": 246992002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627054104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/lazy.20TAIT.20inference/near/246991901\">said</a>:</p>\n<blockquote>\n<p>we could in principle convert the \"resolve inference variables\" to return obligations, I guess</p>\n</blockquote>\n<p>it already does that</p>",
        "id": 246993275,
        "sender_full_name": "oli",
        "timestamp": 1627054640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/lazy.20TAIT.20inference/near/246991991\">said</a>:</p>\n<blockquote>\n<p>the other option I can imagine is that we accumulate the options in the inference context and have to remember to \"take them out\"</p>\n</blockquote>\n<p>I think we can just keep collecting the opaque types and then generate the obligations from that list</p>",
        "id": 246993406,
        "sender_full_name": "oli",
        "timestamp": 1627054704
    },
    {
        "content": "<p>we have to process these opaque types anyway for the <code>TypeckResults</code></p>",
        "id": 246993452,
        "sender_full_name": "oli",
        "timestamp": 1627054725
    }
]