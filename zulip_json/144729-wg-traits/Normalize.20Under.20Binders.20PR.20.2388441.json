[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I've been digging into this PR and I <em>think</em> the problem is exactly the \"escaping type variable\" issue</p>",
        "id": 256804433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726515
    },
    {
        "content": "<p>I can't 100% remember how we landed here <em>but</em></p>",
        "id": 256804446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726522
    },
    {
        "content": "<p>(also, I don't know why the NLL doesn't report an error yet, that seems like a bug!)</p>",
        "id": 256804463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726534
    },
    {
        "content": "<p>Hmm</p>",
        "id": 256804490,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633726548
    },
    {
        "content": "<p>let me walk through what happens first</p>",
        "id": 256804501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726558
    },
    {
        "content": "<p>actually it may not be a bug in NLL</p>",
        "id": 256804506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726561
    },
    {
        "content": "<p>it may fall out from how NLL handles things, now that I think about it</p>",
        "id": 256804554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726567
    },
    {
        "content": "<p>so the impls are horrific but</p>",
        "id": 256804635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726612
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Parser</span><span class=\"o\">&lt;'</span><span class=\"na\">s</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">s</span> <span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">panic!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 256804648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726618
    },
    {
        "content": "<p>So, should this be erroring with NLL but isn't?</p>",
        "id": 256804665,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633726626
    },
    {
        "content": "<p>not sure about NLL yet</p>",
        "id": 256804679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726635
    },
    {
        "content": "<p>I've only dug into the other mode :)</p>",
        "id": 256804684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726638
    },
    {
        "content": "<p>that took me all day!</p>",
        "id": 256804693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726641
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">F2</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;&lt;</span><span class=\"n\">F1</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Parser</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span>\n</code></pre></div>",
        "id": 256804708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Normalize.20Under.20Binders.20PR.20.2388441/near/256804693\">said</a>:</p>\n<blockquote>\n<p>that took me all day!</p>\n</blockquote>\n<p>ok not really :) but an hour or two of concentration...</p>",
        "id": 256804732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726665
    },
    {
        "content": "<p>I'll do NLL later ;)</p>",
        "id": 256804746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726671
    },
    {
        "content": "<p>first let me dump these thoughts out while I understand them</p>",
        "id": 256804762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726677
    },
    {
        "content": "<p>so I thnk what it happening:</p>",
        "id": 256804772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Normalize.20Under.20Binders.20PR.20.2388441/near/256804708\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">F2</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;&lt;</span><span class=\"n\">F1</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Parser</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>this is short for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">F2</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">r</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">F1</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Parser</span><span class=\"o\">&lt;'</span><span class=\"na\">s</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span>\n</code></pre></div>",
        "id": 256804848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726709
    },
    {
        "content": "<p>(oh, btw, when I say that NLL maybe <em>should</em> report an error -- I believe this test should <em>ultimately</em> pass. It's just that NLL may be passing for the wrong reasons.)</p>",
        "id": 256804882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726730
    },
    {
        "content": "<p>so at some point, when confirming closures,</p>",
        "id": 256804915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726752
    },
    {
        "content": "<p>we do a normalization</p>",
        "id": 256804924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726762
    },
    {
        "content": "<p>to normalize the <code>&lt;F1 as Parser&lt;'s&gt;&gt;::Output</code></p>",
        "id": 256804952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726775
    },
    {
        "content": "<p>we apply the impl above</p>",
        "id": 256804957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726779
    },
    {
        "content": "<p>this means we create a type variable for <code>T</code> (<code>_#14t</code> and <code>_#18t</code> in my debugging output)</p>",
        "id": 256804992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726797
    },
    {
        "content": "<p>then we unify the impl header</p>",
        "id": 256805062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726811
    },
    {
        "content": "<p>the trick is that <code>T</code> is not constrained by the impl header!</p>",
        "id": 256805086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726817
    },
    {
        "content": "<p>there is an obligation <code>F: Fn(&amp;'s str) -&gt; (&amp;'s str, T)</code></p>",
        "id": 256805123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726828
    },
    {
        "content": "<p>so the \"final type\" that we get is still an unconstrained type variable</p>",
        "id": 256805202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726859
    },
    {
        "content": "<p>along with some obligations</p>",
        "id": 256805213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726862
    },
    {
        "content": "<p>we enqueue the obligations but they are expressed in terms of placeholders</p>",
        "id": 256805268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726888
    },
    {
        "content": "<p>this call:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                    </span><span class=\"n\">PlaceholderReplacer</span>::<span class=\"n\">replace_placeholders</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">infcx</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">mapped_regions</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">mapped_types</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">mapped_consts</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">universes</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">normalized_ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>has no effect because we don't know the value of the type variable yet</p>",
        "id": 256805304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726906
    },
    {
        "content": "<p>this is the case I was worried about before</p>",
        "id": 256805408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726942
    },
    {
        "content": "<p>when I was talking about that \"delayed replace_placeholders logic\"</p>",
        "id": 256805416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726949
    },
    {
        "content": "<p>I can't remember if we convinced ourselves it couldn't happen or what</p>",
        "id": 256805436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726958
    },
    {
        "content": "<p>anyway what winds up happening is that</p>",
        "id": 256805465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633726972
    },
    {
        "content": "<p>in <a href=\"https://github.com/rust-lang/rust/blob/c51f7e0f51dbb0efeada9d677f877ee496f2c655/compiler/rustc_trait_selection/src/traits/select/confirmation.rs#L651-L656\">this call</a> we unify two different versions of the normalizations; but each one yielded up a type variable that didn't have the placeholders replaced</p>",
        "id": 256805564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727027
    },
    {
        "content": "<p>and so each is in a distinct universe</p>",
        "id": 256805591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727041
    },
    {
        "content": "<p>anyway, I'm not sure how to fix it, but it's good to know what the problem is!</p>",
        "id": 256805648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727054
    },
    {
        "content": "<p>I keep thinking that we are working too hard</p>",
        "id": 256805653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727058
    },
    {
        "content": "<p>that replacing the bound variables with placeholders only to map them back is silly</p>",
        "id": 256805665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727067
    },
    {
        "content": "<p>but I haven't quite wrapped my head around what to do instead :)</p>",
        "id": 256805699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727083
    },
    {
        "content": "<p>anyway, so, given all this, the question is: why does NLL work?</p>",
        "id": 256805742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727106
    },
    {
        "content": "<p>It <em>may</em> be because the way NLL handles projections</p>",
        "id": 256805752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727113
    },
    {
        "content": "<p>tends to fully process things more</p>",
        "id": 256805764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727119
    },
    {
        "content": "<p>or because NLL knows more types and the code goes down a different path</p>",
        "id": 256805776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727129
    },
    {
        "content": "<p>(are y'all talking about normalize-under-binder/normalization-under-binders-2.rs ?)</p>",
        "id": 256805787,
        "sender_full_name": "lqd",
        "timestamp": 1633727135
    },
    {
        "content": "<p>it could also be that the region inferencer has a bug</p>",
        "id": 256805795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727141
    },
    {
        "content": "<p>yes, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 256805805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727145
    },
    {
        "content": "<p>this test doesn't currently pass with NLL though right ?</p>",
        "id": 256805920,
        "sender_full_name": "lqd",
        "timestamp": 1633727185
    },
    {
        "content": "<p>I'm not sure, actually, but I don't think so</p>",
        "id": 256805955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727200
    },
    {
        "content": "<p>no, it doesn't</p>",
        "id": 256805984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727220
    },
    {
        "content": "<p>but on the PR, the behavior diverges</p>",
        "id": 256805994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727224
    },
    {
        "content": "<p>interesting :)</p>",
        "id": 256806072,
        "sender_full_name": "lqd",
        "timestamp": 1633727271
    },
    {
        "content": "<p>the PR adds some normaliztions in different spots</p>",
        "id": 256806128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727283
    },
    {
        "content": "<p>so it's not so surprising</p>",
        "id": 256806134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727286
    },
    {
        "content": "<p>totally unrelated, is there a \"global gitignore\" file?</p>",
        "id": 256806187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727312
    },
    {
        "content": "<p>I suppose I could google that</p>",
        "id": 256806217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727324
    },
    {
        "content": "<p>I think there is yes</p>",
        "id": 256806266,
        "sender_full_name": "lqd",
        "timestamp": 1633727351
    },
    {
        "content": "<p>(like a \"excludesfile\" config to point at your gitignore)</p>",
        "id": 256806313,
        "sender_full_name": "lqd",
        "timestamp": 1633727373
    },
    {
        "content": "<p>(there is, but you have to run <code>git config</code>...that's why it didn't work... I've forgotten this before, I remember now)</p>",
        "id": 256806361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727398
    },
    {
        "content": "<p>getting sick of <code>mir-dump</code> directory showing up in <code>git status</code> all the time :)</p>",
        "id": 256806418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727408
    },
    {
        "content": "<p>we should add that to the rustc .gitignore, really</p>",
        "id": 256806447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727423
    },
    {
        "content": "<p>btw, <a href=\"http://pernos.co\">pernos.co</a> was super invaluable in debugging this</p>",
        "id": 256806518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727463
    },
    {
        "content": "<p>if you want to play with it, <a href=\"https://is.gd/vzqcnn\">here is my final session</a></p>",
        "id": 256806559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727493
    },
    {
        "content": "<p>the workflow I found useful:</p>",
        "id": 256806683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727554
    },
    {
        "content": "<p>find the moment in the log you are interested in</p>",
        "id": 256806705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727560
    },
    {
        "content": "<p>click on it</p>",
        "id": 256806711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727561
    },
    {
        "content": "<p>walk up the stack to see where you are</p>",
        "id": 256806734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727567
    },
    {
        "content": "<p>then you can click arund within those functions at the \"green highlighted\" lines and see where in the output each moment corresponds to</p>",
        "id": 256806822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727586
    },
    {
        "content": "<p>too bad you can't dump the values of variables. :(</p>",
        "id": 256806841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727591
    },
    {
        "content": "<p>you should ask roc about that</p>",
        "id": 256806912,
        "sender_full_name": "lqd",
        "timestamp": 1633727608
    },
    {
        "content": "<p>the other thing that's invaluable is that ctrl-f in the log will search</p>",
        "id": 256806915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727609
    },
    {
        "content": "<p>yeah, I've been talking to roc + kyle huey some</p>",
        "id": 256806928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727617
    },
    {
        "content": "<p>(for those following at home, Felix also did a screencast recently about it (but with rustfmt) <a href=\"https://twitter.com/pnkfelix/status/1441753279822712834\">https://twitter.com/pnkfelix/status/1441753279822712834</a>)</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/pnkfelix/status/1441753279822712834\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/d481cd182b8f1b51780eee2728ea0a624dbecbcd/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3337383830303030303334393736343032352f62396537363762326535656263363331383738323633623732613832313631655f6e6f726d616c2e706e67\"></a><p>I made another screencast demoing pernosco, this time analyzing a rustfmt trace. We’ll have to hear from <a href=\"https://twitter.com/ekuber\">@ekuber</a> about whether it was useful for them to see (aka more homework!) #rustlang #debugging <a href=\"https://t.co/BbJUcS1qbc\">https://youtu.be/VnFqe1U8ukE</a></p><span>- Felix S K II (@pnkfelix)</span></div></div>",
        "id": 256806957,
        "sender_full_name": "lqd",
        "timestamp": 1633727638
    },
    {
        "content": "<p>I was curious whether it would add anything to my usual \"log all the things\" style</p>",
        "id": 256807038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727665
    },
    {
        "content": "<p>answer: yes</p>",
        "id": 256807044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727667
    },
    {
        "content": "<p>in particular, it helps to establish \"what the heck was going on when this line was output\"</p>",
        "id": 256807063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727677
    },
    {
        "content": "<p>....it could be even better....</p>",
        "id": 256807087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727689
    },
    {
        "content": "<p>I had to re-run a bunch of times, adding new logs etc</p>",
        "id": 256807100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727697
    },
    {
        "content": "<p>it'd be so sweet if tracing were more smoothly integrated</p>",
        "id": 256807115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727705
    },
    {
        "content": "<p>maybe I'll talk to them about that :)</p>",
        "id": 256807121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727708
    },
    {
        "content": "<p>so it does make it even clearer than only with rr ?</p>",
        "id": 256807135,
        "sender_full_name": "lqd",
        "timestamp": 1633727716
    },
    {
        "content": "<p>oh, definitely</p>",
        "id": 256807146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727721
    },
    {
        "content": "<p>being able to click in the source and walk through</p>",
        "id": 256807156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727727
    },
    {
        "content": "<p>see the callees etc</p>",
        "id": 256807162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727730
    },
    {
        "content": "<p>much better than gdb</p>",
        "id": 256807166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633727732
    },
    {
        "content": "<p>awesome :) we should get on that: someone opens a rustc issue, some automated tool reduces it, runs it with rr and sends it to pernosco <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 256807291,
        "sender_full_name": "lqd",
        "timestamp": 1633727781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Normalize.20Under.20Binders.20PR.20.2388441/near/256805665\">said</a>:</p>\n<blockquote>\n<p>that replacing the bound variables with placeholders only to map them back is silly</p>\n</blockquote>\n<p>so have to think more about the rest of the messages, but FWIR, I got <em>pretty</em> close to being able to just keep late bound regions around</p>",
        "id": 256807539,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633727933
    },
    {
        "content": "<p>Probably only for select issues. At least for the send to pernosco part. Pernosco needs very heavy machines expand traces to allow for realtime analysis AFAIK.</p>",
        "id": 256807544,
        "sender_full_name": "bjorn3",
        "timestamp": 1633727935
    },
    {
        "content": "<p>but the problems started when we have to register obligations</p>",
        "id": 256807572,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633727949
    }
]