[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> -- shall we have a meeting? I had hoped to talk about the work I did on factoring the chalk crate and perhaps try to do a bit of a \"take stock of next steps\" meeting. I think the \"sprint\" hasn't quite worked out for a variety of reasons =)</p>",
        "id": 163401607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555351347
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> -- this is all pretty related to integrating chalk into rls)</p>",
        "id": 163401785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555351485
    },
    {
        "content": "<p>I spent .. a sort of embarassingly large amount of time trying to make a good diagram of the crates and kind of failed, but in the last hour I tried to <a href=\"https://github.com/nikomatsakis/chalk-ndm/blob/queryify/doc/crates.md\" target=\"_blank\" title=\"https://github.com/nikomatsakis/chalk-ndm/blob/queryify/doc/crates.md\">write-up some notes on the general design here</a>. It's not really <em>that</em> complicated.</p>",
        "id": 163401833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555351521
    },
    {
        "content": "<p>Of course, writing up those notes also revealed to me a (relatively minor) problem around re-entrancy that will arise when we try to tackle specialization (and will require some altering of the design)</p>",
        "id": 163401882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555351547
    },
    {
        "content": "<blockquote>\n<p>a sort of embarassingly large amount of time trying to make a good diagram of the crates and kind of failed</p>\n</blockquote>\n<p>I blame the tooling =) I didn't find the right diagramming program yet I thnk :)</p>",
        "id": 163401955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555351572
    },
    {
        "content": "<p>OK so how shall we do this.</p>",
        "id": 163402029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555351644
    },
    {
        "content": "<p>Actually, give me 1 minute to grab a fresh cup of coffee ;)</p>",
        "id": 163402043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555351663
    },
    {
        "content": "<p>That's a good way to give us time to read the notes <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 163402167,
        "sender_full_name": "detrumi",
        "timestamp": 1555351743
    },
    {
        "content": "<p>OK, back.</p>",
        "id": 163402267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555351811
    },
    {
        "content": "<p>So yeah, feel free to skim the notes, but I'll reproduce a (shortened) version here</p>",
        "id": 163402297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555351840
    },
    {
        "content": "<p>There are essentially three key components:</p>\n<ul>\n<li>the <strong>integration</strong> crate</li>\n<li>the <strong>solver</strong></li>\n<li>the <strong>rules</strong> crate</li>\n</ul>",
        "id": 163402314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555351854
    },
    {
        "content": "<p>the solver and rules crate never talk <em>directly</em> to one another</p>",
        "id": 163402359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555351878
    },
    {
        "content": "<p>all intercommunication is ultimately mediated by the <strong>integration crate</strong></p>",
        "id": 163402376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555351892
    },
    {
        "content": "<p>the solver/rules crates also do not know about chalk or anything like that. They each work against a \"database\" that fulfills a trait -- <code>ChalkSolveDatabase</code> or <code>ChalkRulesDatabase</code> respectively -- which defines the things they can ask of \"their context\"</p>",
        "id": 163402465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555351929
    },
    {
        "content": "<p>Example of the <a href=\"https://github.com/nikomatsakis/chalk-ndm/blob/f9f27e12ed9fa5ef8b71becb283891e4d610317d/chalk-solve/src/lib.rs#L12-L22\" target=\"_blank\" title=\"https://github.com/nikomatsakis/chalk-ndm/blob/f9f27e12ed9fa5ef8b71becb283891e4d610317d/chalk-solve/src/lib.rs#L12-L22\">ChalkSolveDatabase</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"sd\">/// The trait for defining the program clauses that are in scope when</span>\n<span class=\"sd\">/// solving a goal.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ChalkSolveDatabase</span>: <span class=\"nc\">Debug</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Returns a set of program clauses that could possibly match</span>\n<span class=\"w\">    </span><span class=\"sd\">/// `goal`. This can be any superset of the correct set, but the</span>\n<span class=\"w\">    </span><span class=\"sd\">/// more precise you can make it, the more efficient solving will</span>\n<span class=\"w\">    </span><span class=\"sd\">/// be.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">program_clauses_that_could_match</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">goal</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">DomainGoal</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vec</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">ProgramClause</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">is_coinductive_trait</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trait_id</span>: <span class=\"nc\">TraitId</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163402550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555351999
    },
    {
        "content": "<p>the <a href=\"https://github.com/nikomatsakis/chalk-ndm/blob/f9f27e12ed9fa5ef8b71becb283891e4d610317d/chalk-rules/src/lib.rs#L15\" target=\"_blank\" title=\"https://github.com/nikomatsakis/chalk-ndm/blob/f9f27e12ed9fa5ef8b71becb283891e4d610317d/chalk-rules/src/lib.rs#L15\"><code>ChalkRulesDatabase</code> trait</a> is the other one, it's a bit bigger :)</p>",
        "id": 163402638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352043
    },
    {
        "content": "<p>I had this table I wound up cutting, but maybe it's helpful actually. It summarizes the intercommunication.</p>\n<table>\n<thead>\n<tr>\n<th>crate</th>\n<th>question</th>\n<th>answered by</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>chalk-solve</td>\n<td>program clauses for a given goal?</td>\n<td>chalk-rules</td>\n</tr>\n<tr>\n<td>chalk-solve</td>\n<td>is a given trait coinductive?</td>\n<td>integration</td>\n</tr>\n<tr>\n<td>chalk-rules</td>\n<td>solve a given goal</td>\n<td>chalk-solve</td>\n</tr>\n<tr>\n<td>chalk-rules</td>\n<td>query the rust ir</td>\n<td>integration</td>\n</tr>\n</tbody>\n</table>",
        "id": 163402700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352080
    },
    {
        "content": "<p>Anyway, all of this setup I think it is sort of .. mostly correct, though as I mentioned I realized a problem (I'll get to it later).</p>",
        "id": 163402807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352155
    },
    {
        "content": "<p>But any questions on this part?</p>",
        "id": 163402862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352168
    },
    {
        "content": "<p>/me can't tell what people are doing :)</p>",
        "id": 163402921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352237
    },
    {
        "content": "<p>reading notes and listening :)</p>",
        "id": 163402932,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1555352252
    },
    {
        "content": "<p>trying to understand the table :)</p>",
        "id": 163402933,
        "sender_full_name": "tmandry",
        "timestamp": 1555352252
    },
    {
        "content": "<p>So the solver returns a superset, and you need to check those with rules?</p>",
        "id": 163402936,
        "sender_full_name": "detrumi",
        "timestamp": 1555352254
    },
    {
        "content": "<p>it's very helpful already, I had looked at the PR and was quite confused as to who implements what :)</p>",
        "id": 163402958,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1555352266
    },
    {
        "content": "<blockquote>\n<p>So the solver returns a superset, and you need to check those with rules?</p>\n</blockquote>\n<p>not quite -- the solver <strong>asks</strong> for a superset</p>",
        "id": 163403034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352297
    },
    {
        "content": "<p>e.g., it might say, I need to prove that <code>Vec&lt;u32&gt;: Clone</code> -- give me any rules that I might use to do that</p>",
        "id": 163403056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352313
    },
    {
        "content": "<p>the more precise we can be, the better in some sense, because the solver will do less work</p>",
        "id": 163403074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352332
    },
    {
        "content": "<p>but it's also ok if we give it rules that don't apply, it will weed them out</p>",
        "id": 163403098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352352
    },
    {
        "content": "<p>it's actually a good place to dig a bit deeper -- but does that make sense so far? (And you do you know what I mean here by \"rules\"?)</p>",
        "id": 163403126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352373
    },
    {
        "content": "<p>it does, i recall talking through this part in one of our recorded video sessions (don't recall which)</p>",
        "id": 163403209,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1555352406
    },
    {
        "content": "<p>yeah</p>",
        "id": 163403218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352411
    },
    {
        "content": "<p>by \"rules\" here I mean \"Program clauses\" in prolog terminology -- basically, the rules that we derive from rust IR. So e.g. if you had <code>impl&lt;T: Clone&gt; Clone for Vec&lt;T&gt;</code>, then that might be lowered to a program clause like </p>\n<div class=\"codehilite\"><pre><span></span>Implemented(Vec&lt;T&gt;: Clone) :- Implemented(T: Clone)\n</pre></div>\n\n\n<p>and that is (naturally) something we would want to return through this callback</p>",
        "id": 163403280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352461
    },
    {
        "content": "<p>(since it would apply to <code>Vec&lt;u32&gt;</code>)</p>",
        "id": 163403299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352468
    },
    {
        "content": "<p>but if there were some impl like <code>impl&lt;T: ?Sized&gt; Clone for Arc&lt;T&gt;</code>, that gives rise to a rule like <code>Implemented(Arc&lt;T&gt;: Clone).</code> -- and we might or might not return that</p>",
        "id": 163403336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352504
    },
    {
        "content": "<p>Right, so mainly impl's, but also trait bounds in functions for example I'd imagine</p>",
        "id": 163403429,
        "sender_full_name": "detrumi",
        "timestamp": 1555352561
    },
    {
        "content": "<p>so where-clauses (if that's what you mean) are actually part of the goals</p>",
        "id": 163403452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352583
    },
    {
        "content": "<p>(where they originate I mean, I understand that Prolog rules are more general)</p>",
        "id": 163403463,
        "sender_full_name": "detrumi",
        "timestamp": 1555352587
    },
    {
        "content": "<p>i.e., if you have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Clone</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">...</span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163403495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352618
    },
    {
        "content": "<p>when type-checking <code>t.clone()</code>, we might generate a goal for the solver like</p>\n<div class=\"codehilite\"><pre><span></span>forall&lt;T&gt; {\n  if (T: Clone) { // from the where clause\n    T: Clone // prove that `T: Clone`...\n  }\n}\n</pre></div>",
        "id": 163403571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352650
    },
    {
        "content": "<p>(not quite right because of implied bounds, but that's the idea)</p>",
        "id": 163403579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352660
    },
    {
        "content": "<p>the solver internally knows how to handle this <code>if (T: Clone)</code> business</p>",
        "id": 163403593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352670
    },
    {
        "content": "<p>so really the callback is <em>just</em> about the global rules that come from impls and the rust semantics</p>",
        "id": 163403607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352686
    },
    {
        "content": "<p>anyway, so, the reason I said this was interesting to dig into a bit</p>",
        "id": 163403659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352729
    },
    {
        "content": "<p>it is interesting to think about how the \"integration crate\" will respond to this request, in terms of caching etc</p>",
        "id": 163403696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352760
    },
    {
        "content": "<p>in my branch that is in the PR, the main work I did was extracting the chalk-solve and chalk-rules crates</p>",
        "id": 163403773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352799
    },
    {
        "content": "<p>but the chalk crate itself (the \"integration\" crate) is still working in a kind of \"global\" fashion</p>",
        "id": 163403788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352817
    },
    {
        "content": "<p>so e.g. it <a href=\"https://github.com/nikomatsakis/chalk-ndm/blob/queryify/src/query.rs#L31\" target=\"_blank\" title=\"https://github.com/nikomatsakis/chalk-ndm/blob/queryify/src/query.rs#L31\">has a query that just says \"give me the rust-ir for the whole program\"</a></p>",
        "id": 163403833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352856
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">program_ir</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">Program</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ChalkError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163403840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352867
    },
    {
        "content": "<p>/me joined, listens attentively</p>",
        "id": 163403905,
        "sender_full_name": "matklad",
        "timestamp": 1555352897
    },
    {
        "content": "<p>however, this <a href=\"https://github.com/nikomatsakis/chalk-ndm/blob/queryify/src/program.rs#L12-L13\" target=\"_blank\" title=\"https://github.com/nikomatsakis/chalk-ndm/blob/queryify/src/program.rs#L12-L13\"><code>Program</code> type</a> has been extracted from the <code>chalk-rust-ir</code> crate and now lives in the <code>chalk</code> crates</p>",
        "id": 163403908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352898
    },
    {
        "content": "<p>this is because -- e.g., in the RLS -- it is not something that we would want to have</p>",
        "id": 163403913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352908
    },
    {
        "content": "<p>(though it's ok in the chalk harness)</p>",
        "id": 163403946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352941
    },
    {
        "content": "<p>there is also a concept of <code>ProgramEnvironment</code>, which is the full set of lowered clauses -- this has also been confined to the <code>chalk</code> crate</p>",
        "id": 163404000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555352984
    },
    {
        "content": "<p>and if you look at the code which answers the solver's \"give me all possibly matching clauses\" call, you will see it just iterates over a vector (<a href=\"https://github.com/nikomatsakis/chalk-ndm/blob/queryify/src/db.rs#L67-L76\" target=\"_blank\" title=\"https://github.com/nikomatsakis/chalk-ndm/blob/queryify/src/db.rs#L67-L76\">link</a>):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">program_clauses_that_could_match</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">goal</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">DomainGoal</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vec</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">ProgramClause</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">environment</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">vec</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">program_clauses</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">clause</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clause</span><span class=\"p\">.</span><span class=\"n\">could_match</span><span class=\"p\">(</span><span class=\"n\">goal</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">cloned</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163404092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353024
    },
    {
        "content": "<p><em>this</em> part is not really right, even for chalk</p>",
        "id": 163404106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353040
    },
    {
        "content": "<p>(because of specialization)</p>",
        "id": 163404113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353047
    },
    {
        "content": "<p>Quick question: what is the purpose of integration crate (<code>chalk</code>)? Should RLS use it directly, or should RLS be itself the \"integration\" crate? </p>\n<p>In other words, why name it \"integration\", and not by name (<code>chalk</code>)</p>",
        "id": 163404119,
        "sender_full_name": "matklad",
        "timestamp": 1555353050
    },
    {
        "content": "<p>the RLS would be that crate</p>",
        "id": 163404133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353063
    },
    {
        "content": "<p>and it is named \"chalk\"</p>",
        "id": 163404149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353075
    },
    {
        "content": "<p>I am trying and maybe failing to use the term \"integration crate\" in order to be more generic</p>",
        "id": 163404166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353090
    },
    {
        "content": "<p>but i'm maybe using it more often than I should :)</p>",
        "id": 163404178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353102
    },
    {
        "content": "<p>but yeah I imagine that the RLS would implement the <code>ChalkSolveDatabase</code> and <code>ChalkRulesDatabase</code> traits</p>",
        "id": 163404254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353137
    },
    {
        "content": "<p>there is still a <em>bit</em> more refactoring within chalk I think to expose useful concepts before we do that</p>",
        "id": 163404270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353152
    },
    {
        "content": "<p>in particular around this callback I'm digging into now</p>",
        "id": 163404286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353158
    },
    {
        "content": "<p>basically, a big goal is that we should <em>never</em> 'iterate over the whole program' when solving a given goal</p>",
        "id": 163404331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353186
    },
    {
        "content": "<p>in an IDE, you can kind of clearly see why that would be --</p>",
        "id": 163404348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353198
    },
    {
        "content": "<p>you want to be as narrow as possible</p>",
        "id": 163404352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353205
    },
    {
        "content": "<p>in terms of what you \"demand\"</p>",
        "id": 163404356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353213
    },
    {
        "content": "<p>but also if you think of incremental compliation, where we are monitoring the bits of the program you looked at, it's the same. If you ask for \"give me all the program clauses from the whole program\" and then <strong>anything</strong> changes, you have to assume all your solving is outdated</p>",
        "id": 163404433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353247
    },
    {
        "content": "<p>Anyway so I think a bit of remaining work is to refine that callback from the solver.</p>",
        "id": 163404466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353292
    },
    {
        "content": "<p>having taken an initial crack at salsaification, this is great and overall makes sense :)</p>",
        "id": 163404500,
        "sender_full_name": "tmandry",
        "timestamp": 1555353320
    },
    {
        "content": "<p>minor point, but I'm a little confused why <code>GoalSolver</code> is defined in <code>chalk-rules</code></p>",
        "id": 163404508,
        "sender_full_name": "tmandry",
        "timestamp": 1555353327
    },
    {
        "content": "<p>so e.g. if we get callback with a goal like <code>Implemented(Vec&lt;u32&gt;: Clone)</code>, it should only access the rust-ir that might produce rules that answer this query -- i.e., impls of <code>Clone</code>, ideally</p>",
        "id": 163404529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353343
    },
    {
        "content": "<blockquote>\n<p>minor point, but I'm a little confused why <code>GoalSolver</code> is defined in <code>chalk-rules</code></p>\n</blockquote>\n<p>yes, that's a good question -- and I think it's actualy not quite right</p>",
        "id": 163404545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353355
    },
    {
        "content": "<blockquote>\n<p>so e.g. if we get callback with a goal like <code>Implemented(Vec&lt;u32&gt;: Clone)</code>, it should only access the rust-ir that might produce rules that answer this query -- i.e., impls of <code>Clone</code>, ideally</p>\n</blockquote>\n<p>I should say that <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> and I already took a crack at defining this logic in rustc</p>",
        "id": 163404597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353371
    },
    {
        "content": "<p>so we basically want to 'port over' that code from rustc back into chalk</p>",
        "id": 163404606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353378
    },
    {
        "content": "<p>i.e., knowing which bits of rust-ir might produce rules relevant to a given goal</p>",
        "id": 163404619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353394
    },
    {
        "content": "<p>and only lowering those</p>",
        "id": 163404623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353400
    },
    {
        "content": "<p>(I'm going to create a paper for this meeting actually to drop some notes in, then we can figure out where to move them to)</p>",
        "id": 163404662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353450
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/WG-Traits-2019.04.15-chalk-query--AbTbcYDBEu6753uK9x19rzH6Ag-N5HWPSfKFg4QM0GXzVpln\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/WG-Traits-2019.04.15-chalk-query--AbTbcYDBEu6753uK9x19rzH6Ag-N5HWPSfKFg4QM0GXzVpln\">paper link</a></p>",
        "id": 163404800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353523
    },
    {
        "content": "<p>So before I take a shot at answering <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>'s question about <code>GoalSolver</code>...</p>",
        "id": 163404877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353591
    },
    {
        "content": "<p>I guess, first off, any questions on what I wrote so far ?</p>",
        "id": 163404931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353603
    },
    {
        "content": "<p>I am not clear about needing <em>two</em> crates to integrate with</p>",
        "id": 163404972,
        "sender_full_name": "matklad",
        "timestamp": 1555353633
    },
    {
        "content": "<p>I guess, I understand why internally this makes sense (separating solving from lowering)</p>",
        "id": 163404988,
        "sender_full_name": "matklad",
        "timestamp": 1555353651
    },
    {
        "content": "<p>like, why separate chalk-solve and chalk-rules?</p>",
        "id": 163404989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353654
    },
    {
        "content": "<p>yeah</p>",
        "id": 163404993,
        "sender_full_name": "matklad",
        "timestamp": 1555353661
    },
    {
        "content": "<p>it's partly just an internal thing</p>",
        "id": 163405008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353667
    },
    {
        "content": "<p>from software engeneering perspective, I'd prefer to integrate RLS with a <em>single</em> crate :D</p>",
        "id": 163405015,
        "sender_full_name": "matklad",
        "timestamp": 1555353676
    },
    {
        "content": "<p>Why can't one call the other?</p>",
        "id": 163405030,
        "sender_full_name": "detrumi",
        "timestamp": 1555353689
    },
    {
        "content": "<p>So that you only expose one of them</p>",
        "id": 163405036,
        "sender_full_name": "detrumi",
        "timestamp": 1555353702
    },
    {
        "content": "<p>well</p>",
        "id": 163405042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353709
    },
    {
        "content": "<p>one of my motivations was that -- when I looked closely at the rules crate</p>",
        "id": 163405052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353722
    },
    {
        "content": "<p>I had the impression that, with some more work, it could probably be refactored such that it could be used from within rustc</p>",
        "id": 163405109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353738
    },
    {
        "content": "<p>but we'd have to do a bit of work on making the various bits of IR a bit more generic</p>",
        "id": 163405115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353748
    },
    {
        "content": "<p>we could certainly make an \"end point\" crate that rls can link against</p>",
        "id": 163405126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353755
    },
    {
        "content": "<p>or perhaps have chalk-solve know about chalk-rules</p>",
        "id": 163405135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353763
    },
    {
        "content": "<p>to be quite honest, the structure I'm presenting here is also something I sort of evolved a bit towards</p>",
        "id": 163405152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353779
    },
    {
        "content": "<p>so for some time I was just picking things apart</p>",
        "id": 163405157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353783
    },
    {
        "content": "<p>so that I could see all the pieces holding them together</p>",
        "id": 163405166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353791
    },
    {
        "content": "<p>and I think it may make sense to recombine them</p>",
        "id": 163405176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353801
    },
    {
        "content": "<p>which is partly why I wanted to talk it out</p>",
        "id": 163405184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353814
    },
    {
        "content": "<blockquote>\n<p>but we'd have to do a bit of work on making the various bits of IR a bit more generic</p>\n</blockquote>\n<p>in particular, we'd want to make the rust-ir crate kind of generic over how types are represented etc. It might not be worth the trouble, but it might be.</p>",
        "id": 163405196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353839
    },
    {
        "content": "<p>\"easy to integrate with rustc\" makes sense!  But <code>chalk-facade</code> would also be helpful: at least there will be a single point to start reading the code from :)</p>",
        "id": 163405247,
        "sender_full_name": "matklad",
        "timestamp": 1555353855
    },
    {
        "content": "<p>yeah.</p>",
        "id": 163405271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353881
    },
    {
        "content": "<p>I think there is probably an intermediate point that chalk would also integrate with</p>",
        "id": 163405282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353897
    },
    {
        "content": "<p>ok, so let me answer <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>'s question</p>",
        "id": 163405319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353929
    },
    {
        "content": "<p>which was \"why does chalk-rules have this <code>GoalSolver</code> trait\"</p>",
        "id": 163405340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353945
    },
    {
        "content": "<p><code>GoalSolver</code> has a single callback, <code>solve</code>, that lets you solve a given goal</p>",
        "id": 163405356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353957
    },
    {
        "content": "<p>(it is a supertrait of <code>ChalkRulesDatabase</code>, so it is meant to be implemented by the general database)</p>",
        "id": 163405421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555353983
    },
    {
        "content": "<p>(I think I just realized why btw)</p>",
        "id": 163405426,
        "sender_full_name": "tmandry",
        "timestamp": 1555353985
    },
    {
        "content": "<p>specialization?</p>",
        "id": 163405454,
        "sender_full_name": "tmandry",
        "timestamp": 1555354013
    },
    {
        "content": "<p>Right now, the chalk-rules crate includes three things:</p>\n<ul>\n<li>code to lower from rust-ir to program clauses</li>\n<li>code to check wf conditions for a given struct, trait, etc</li>\n<li>code to check coherence</li>\n</ul>\n<p>the latter two are basically Rust functions that return <code>Result&lt;(), ChalkError&gt;</code> &lt;-- we should probably tweak those signatures</p>",
        "id": 163405532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354078
    },
    {
        "content": "<p>in order to do their work, they have to solve goals</p>",
        "id": 163405600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354102
    },
    {
        "content": "<blockquote>\n<p>specialization?</p>\n</blockquote>\n<p>(yes, but I'm getting to it)</p>",
        "id": 163405608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354110
    },
    {
        "content": "<p>so they ask the database \"hey solve this goal\", and it has (internally) a cached solver that it delegates to, etc</p>",
        "id": 163405630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354128
    },
    {
        "content": "<p>they use the trait to do this</p>",
        "id": 163405635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354135
    },
    {
        "content": "<p>currently, the \"solving\" callback is not used when lowering from rust-ir to program clauses</p>",
        "id": 163405787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354208
    },
    {
        "content": "<p>however, I grouped them together because, to handle specialization, we do expect to have to solve goals and figure out the overlap between impls</p>",
        "id": 163405818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354234
    },
    {
        "content": "<p>and so creating the program clauses for a given impl (say, one that contains a <code>default</code> associated type) will require running coherence checks</p>",
        "id": 163405840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354259
    },
    {
        "content": "<p>this needs a bit more work to tease out, and this problem I keep hinting at is precisely here -- right now, the solver requires <code>&amp;mut self</code> access. So if it invokes the callback to ask for program clauses, and that recursively invokes stuff in the solver, we have a cycle (what will happen in the code as it is today is a deadlock, because there is a <code>Mutex</code> involved)</p>",
        "id": 163405904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354319
    },
    {
        "content": "<p>(I think that what this means is that the \"coherence checks\" want to instantiate their own solver, which ironically is what the code <em>used</em> to do and I removed it)</p>",
        "id": 163405962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354339
    },
    {
        "content": "<p>But that's a relatively minor point</p>",
        "id": 163405970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354350
    },
    {
        "content": "<p>Anyway, to bring this back, since we're nearing on an hour here.</p>",
        "id": 163406055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354428
    },
    {
        "content": "<p>I think we should land my PR, first of all ;)</p>",
        "id": 163406118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354454
    },
    {
        "content": "<p>but there is still some refactoring to be done -- I think maybe now it is easier to define what that is</p>",
        "id": 163406131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354472
    },
    {
        "content": "<p>I wrote in <a href=\"https://paper.dropbox.com/doc/WG-Traits-2019.04.15-chalk-query--AbTbcYDBEu6753uK9x19rzH6Ag-N5HWPSfKFg4QM0GXzVpln\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/WG-Traits-2019.04.15-chalk-query--AbTbcYDBEu6753uK9x19rzH6Ag-N5HWPSfKFg4QM0GXzVpln\">the paper doc</a>:</p>\n<ul>\n<li>refactor logic when requesting program clauses for a given goal to be more narrow</li>\n<li>create some sort of unified “facade” create that combines chalk-solve and chalk-rules</li>\n</ul>",
        "id": 163406157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354502
    },
    {
        "content": "<p>but I guess I left out \"solve recursive solver setup\"</p>",
        "id": 163406174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354518
    },
    {
        "content": "<p>at that point we're starting to be able to define specialization too</p>",
        "id": 163406187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354543
    },
    {
        "content": "<p>interestingly, this whole effort is in some sense a distraction ;) in that it doesn't really further the rustc-chalk integration we had <em>intended</em> to focus on. But I think it's important still -- and I also continue to have this nagging feeling that we should also push towards RLS integration.</p>",
        "id": 163406269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354605
    },
    {
        "content": "<p>Basically though this work serves two goals:</p>\n<ul>\n<li>RLS integration</li>\n<li>specialization support</li>\n</ul>",
        "id": 163406285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span> you had mentioned wanting to do work on the latter, how much time do you think you have available? Similarly, <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>? I was thinking that maybe we should the 3 of us try to sync a bit</p>",
        "id": 163406337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354654
    },
    {
        "content": "<p>though others are welcome too :) but I wanted to bring up some other topics worth digging into</p>",
        "id": 163406344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354670
    },
    {
        "content": "<p>i.e., I want to try and create two sub-efforts. One focused on these steps towards refactoring chalk (which I hope I have now unblocked, though I expect we'll have to do a bit more sync'ing and mentoring to make clear what's the next steps)</p>",
        "id": 163406433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354706
    },
    {
        "content": "<p>and the other on some of the harder problems around built-in bounds, regions, etc</p>",
        "id": 163406444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354716
    },
    {
        "content": "<p>( which I am happy to go on discussing, but I want to hold off a bit to wrap this up )</p>",
        "id": 163406489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354747
    },
    {
        "content": "<blockquote>\n<p>and the other on some of the harder problems around built-in bounds, regions, etc</p>\n</blockquote>\n<p>I guess harder isn't quite the right term, but there's a bit more unknowns in my mind about it</p>",
        "id": 163406499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354762
    },
    {
        "content": "<p>It's also more a core issue, while the first sub-effort is more on the edge</p>",
        "id": 163406533,
        "sender_full_name": "detrumi",
        "timestamp": 1555354801
    },
    {
        "content": "<p>yeah</p>",
        "id": 163406684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354900
    },
    {
        "content": "<p>So, we had talked about trying to organize \"sprints\". Strictly speaking, we are mid sprint =) though it ends in a few weeks.</p>",
        "id": 163406764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354928
    },
    {
        "content": "<p>(2019.03.18 - 2019.04.29)</p>",
        "id": 163406778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354937
    },
    {
        "content": "<p>I don't actually <em>care</em> about this per se</p>",
        "id": 163406782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354943
    },
    {
        "content": "<p>except that I think the concept of identifying some goals and working towards them is quite good</p>",
        "id": 163406788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354953
    },
    {
        "content": "<p>so I guess what I'm saying is, I think we can make a few clear sprint goals around this topic</p>",
        "id": 163406797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555354967
    },
    {
        "content": "<p>Sorry, I'm unable to take very much time for this meeting today. I am available to work on specialization and I will have a good amount of time to work on it in the coming weeks.</p>",
        "id": 163406815,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1555354983
    },
    {
        "content": "<p>Will try to catch up later</p>",
        "id": 163406826,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1555354986
    },
    {
        "content": "<p>Feel free to DM me about stuff if needed :)</p>",
        "id": 163406832,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1555354994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> are you interested in pursuing the refactoring around queries and stuff we were talking about?</p>",
        "id": 163406852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355011
    },
    {
        "content": "<p>I was guessing you might be given how you jumped on the id stuff</p>",
        "id": 163406866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355022
    },
    {
        "content": "<p>and the connection to RLS</p>",
        "id": 163406872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355027
    },
    {
        "content": "<p>Yeah I'm definitely interested</p>",
        "id": 163406878,
        "sender_full_name": "detrumi",
        "timestamp": 1555355032
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> ok, so let's try to make some time to sync up on that more deeply in a bit, perhaps with <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span>.</p>",
        "id": 163406935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355059
    },
    {
        "content": "<p>I'm not sure who's still around, I feel like <em>this meeting</em> is over</p>",
        "id": 163406984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355108
    },
    {
        "content": "<p>But I'm interested in starting another one to talk a bit more about the next steps on rustc-chalk integration :)</p>",
        "id": 163406994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> you around?</p>",
        "id": 163407116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355205
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> -- were you around today?)</p>",
        "id": 163407140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355222
    },
    {
        "content": "<p>I was looking over the <a href=\"https://paper.dropbox.com/doc/2019.03.18-2019.04.29--AbS_MVSXwugVKLIluWeWhX0vAg-5gix1dpUSHKirVcEww5iw\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/2019.03.18-2019.04.29--AbS_MVSXwugVKLIluWeWhX0vAg-5gix1dpUSHKirVcEww5iw\">current sprint document</a>, and I guess it's still more-or-less ok.</p>",
        "id": 163407162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I wasn’t, just got out of work</p>",
        "id": 163407172,
        "sender_full_name": "scalexm",
        "timestamp": 1555355249
    },
    {
        "content": "<p>I’ll read over after dinner</p>",
        "id": 163407193,
        "sender_full_name": "scalexm",
        "timestamp": 1555355262
    },
    {
        "content": "<p>No worries, the tl;dr is that I'm going to land my PR and try to write-up some concrete \"next steps\" as far as chalk query-ification goes</p>",
        "id": 163407252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355286
    },
    {
        "content": "<p>Ok seems good, I skimmed through the PR already and it looked good</p>",
        "id": 163407270,
        "sender_full_name": "scalexm",
        "timestamp": 1555355306
    },
    {
        "content": "<p>I was just thinking about the more general topic of rustc-chalk integration</p>",
        "id": 163407277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355323
    },
    {
        "content": "<p>I feel like there are two tricky topics:</p>\n<ul>\n<li>the builtin-bounds stuff -- basically, what do to when you have (e.g.) <code>?T: Sized</code> </li>\n<li>region obligations</li>\n</ul>",
        "id": 163407311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355351
    },
    {
        "content": "<p>and they are actually somewhat related</p>",
        "id": 163407315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355357
    },
    {
        "content": "<p>Why do you think they are related?</p>",
        "id": 163407326,
        "sender_full_name": "scalexm",
        "timestamp": 1555355375
    },
    {
        "content": "<p>not <em>deeply</em> related but</p>",
        "id": 163407416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355410
    },
    {
        "content": "<p>I think that when we encounter a <code>?T: Sized</code> goal, we basically know that we want to defer it and try to do other work, and then come back to it later</p>",
        "id": 163407440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355437
    },
    {
        "content": "<p>right now that's not really what we are doing</p>",
        "id": 163407442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355444
    },
    {
        "content": "<p>(indeed, SLG solvers have a mechanism for doing this already, though its purpose is for handling negative cycles)</p>",
        "id": 163407462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355464
    },
    {
        "content": "<p>when you think about it, that's kind of what we are doing with region goals too</p>",
        "id": 163407470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355473
    },
    {
        "content": "<p>i.e., we're proving that \"X is true modulo this subgoal G that we chose not to solve\"</p>",
        "id": 163407499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355494
    },
    {
        "content": "<p>anyway, i'm not sure if we want to handle them through the same mechanism, but we might.</p>",
        "id": 163407608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355562
    },
    {
        "content": "<p>regardless, I thought it would be useful to try and spend some time talking about how the SLG solver works, both at a theoretical level and an <em>actual</em> level (like, how the chalk-engine crate is implementd)</p>",
        "id": 163407654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355593
    },
    {
        "content": "<p>and was going to propose that we try to schedule a (recorded) meeting to do that -- <em>ideally</em> this week, though that might be hard to schedule</p>",
        "id": 163407684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok i like the idea of talking about the SLG solver</p>",
        "id": 163407797,
        "sender_full_name": "scalexm",
        "timestamp": 1555355693
    },
    {
        "content": "<p>This week might be tricky for me regarding scheduling</p>",
        "id": 163407838,
        "sender_full_name": "scalexm",
        "timestamp": 1555355726
    },
    {
        "content": "<p>OK, here are some questions:</p>",
        "id": 163407878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355759
    },
    {
        "content": "<ul>\n<li>Zoom or Zulip? For a technical deep dive, I'm tempted to say Zoom (voice) but I'm not sure </li>\n<li>Exactly what to cover?</li>\n</ul>",
        "id": 163407948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355799
    },
    {
        "content": "<p>I'm thinking maybe next monday could be good</p>",
        "id": 163407957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355806
    },
    {
        "content": "<p>in terms of giving time to prepare and meeting scheduling constraints</p>",
        "id": 163407967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355814
    },
    {
        "content": "<p>Yes next Monday is good, it’s an holiday here</p>",
        "id": 163407990,
        "sender_full_name": "scalexm",
        "timestamp": 1555355831
    },
    {
        "content": "<p>I have to go review, I think what I would ideally do is to cover</p>",
        "id": 163408010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355852
    },
    {
        "content": "<p>the paper \"A New Formulation of Tabled Resolution with Delay\"</p>",
        "id": 163408176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355973
    },
    {
        "content": "<p>sorry, got lost hunting for a link and gave up</p>",
        "id": 163408179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355979
    },
    {
        "content": "<p>that's the more theoretical side, anyway</p>",
        "id": 163408181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355986
    },
    {
        "content": "<p>and try to map it to what the code does</p>",
        "id": 163408183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355989
    },
    {
        "content": "<p>it'd kind of be good for me to remember too</p>",
        "id": 163408187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555355993
    },
    {
        "content": "<p>anyway, ok, so shall we schedule something for monday?</p>",
        "id": 163408248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555356017
    },
    {
        "content": "<p>Seems fine to me</p>",
        "id": 163408269,
        "sender_full_name": "scalexm",
        "timestamp": 1555356044
    },
    {
        "content": "<p>I wonder if that's a holiday for me, too</p>",
        "id": 163408275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555356051
    },
    {
        "content": "<p>(no)</p>",
        "id": 163408297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555356075
    },
    {
        "content": "<p>Given that it's a holiday for you, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, would you rather do a bit earlier?</p>",
        "id": 163408314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555356108
    },
    {
        "content": "<p>I'll just make a doodle</p>",
        "id": 163408395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555356159
    },
    {
        "content": "<p>Yeah earlier is even better</p>",
        "id": 163408443,
        "sender_full_name": "scalexm",
        "timestamp": 1555356230
    },
    {
        "content": "<p>OK -- if you're interested in learning about the chalk-engine crate and SLG solving, <a href=\"https://doodle.com/poll/zp9wckw98p5aprbd\" target=\"_blank\" title=\"https://doodle.com/poll/zp9wckw98p5aprbd\">doodle poll here</a></p>",
        "id": 163408446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555356233
    },
    {
        "content": "<p>Looks like 12:00 noon is the winner</p>",
        "id": 163408732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555356476
    },
    {
        "content": "<p>(Boston time)</p>",
        "id": 163408734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555356480
    },
    {
        "content": "<p>I'll just go schedule that</p>",
        "id": 163408776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555356484
    },
    {
        "content": "<p><a href=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NWI3aThqajdtcTRycTRnNWxpdHJhajVrZGEgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\" target=\"_blank\" title=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NWI3aThqajdtcTRycTRnNWxpdHJhajVrZGEgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\">Calendar event</a></p>",
        "id": 163408844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555356564
    }
]