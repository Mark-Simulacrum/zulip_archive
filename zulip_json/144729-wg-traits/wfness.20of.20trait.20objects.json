[
    {
        "content": "<p>I've come across a bunch of weird looking code snippets that compile, I haven't been able to turn any into unsoundness but they all seem really suspicious:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(generic_associated_types)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">10_</span><span class=\"k\">u64</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>why is this valid code? <code>dyn Trait</code> is very much not <code>Sized</code> yet the <code>Foo = u32</code> makes it seem like our trait object is sized and has the <code>Foo</code> associated type?</p>\n<p>There's other stuff that's weird about wfness of trait objects:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Foo</span>: <span class=\"nc\">OtherTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">OtherTrait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>u32: otherTrait</code> doesn't hold but this code compiles.</p>\n<p>Is it written anywhere what counts as a \"valid\" trait object? Trying to understand this stuff so that I might be able to look at <code>feature(associated_type_defaults)</code> and how it should add associated type equality bounds for trait objects</p>",
        "id": 261137826,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636639612
    },
    {
        "content": "<p>Can you actually use the associated type or only specify it? If the former, that may be a soundness hole, if the later I don't think it would be unsound.</p>",
        "id": 261138629,
        "sender_full_name": "bjorn3",
        "timestamp": 1636640076
    },
    {
        "content": "<p>for the gats one I couldnt find a way to actually use the associated type as every use case seemed to require proving the where clause <code>Self: Sized</code></p>",
        "id": 261138668,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636640106
    },
    {
        "content": "<p>and the second code example you cant call <code>foo</code></p>",
        "id": 261138714,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636640131
    },
    {
        "content": "<p>I did try and make unsoundness but couldn't figure it out, doesnt mean there isnt any though</p>",
        "id": 261138765,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636640159
    },
    {
        "content": "<p>I think this is known</p>",
        "id": 261138942,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636640242
    },
    {
        "content": "<p>I looked though <code>I-unsound</code> issues that mentioned trait objects and some stuff did seem kinda similar</p>",
        "id": 261138990,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636640273
    },
    {
        "content": "<p>There are still unanswered questions for <em>when</em> we check associated type wf</p>",
        "id": 261138995,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636640275
    },
    {
        "content": "<p>Looks like you can use the associated type:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">OtherTrait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span>: <span class=\"nc\">OtherTrait</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span>::<span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 261139324,
        "sender_full_name": "bjorn3",
        "timestamp": 1636640425
    },
    {
        "content": "<p>Can you use FOO though?</p>",
        "id": 261140606,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636641071
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">FOO</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>yes</p>",
        "id": 261141122,
        "sender_full_name": "bjorn3",
        "timestamp": 1636641364
    },
    {
        "content": "<p>I couldn't actually find a way to use <code>u32: OtherTrait</code> anywhere though</p>",
        "id": 261141163,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636641384
    },
    {
        "content": "<p>Hmm</p>",
        "id": 261141262,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636641446
    },
    {
        "content": "<p>(perhaps in a world with fancy enough implied bounds this would be more of a problem or soemthing idk)</p>",
        "id": 261141453,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636641548
    },
    {
        "content": "<p>(it doesnt seem unreasonable to turn knowing <code>dyn Trait&lt;Foo = u32&gt;</code> is wf into knowing <code>u32: OtherTrait</code>)</p>",
        "id": 261141493,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636641580
    }
]