[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 224935407,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612299470
    },
    {
        "content": "<p>meeting in 3ish minutes</p>",
        "id": 224935417,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612299473
    },
    {
        "content": "<p>Today we should maybe talk about current state of GATs?</p>",
        "id": 224935526,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612299526
    },
    {
        "content": "<p>wave -- running a bit late</p>",
        "id": 224935889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612299687
    },
    {
        "content": "<p>We could. Do you mean GATs in rustc or in chalk?</p>",
        "id": 224936069,
        "sender_full_name": "detrumi",
        "timestamp": 1612299747
    },
    {
        "content": "<p>rustc</p>",
        "id": 224936221,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612299814
    },
    {
        "content": "<p>Current state, current issues, what stabilization of GATs with lifetimes might look like</p>",
        "id": 224936273,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612299839
    },
    {
        "content": "<p>/me scrolling a bit through <a href=\"https://github.com/rust-lang/rust/issues/44265\">rust#44265</a></p>",
        "id": 224936388,
        "sender_full_name": "detrumi",
        "timestamp": 1612299887
    },
    {
        "content": "<p>OK, here now</p>",
        "id": 224936410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612299897
    },
    {
        "content": "<p>Before that, did anyone have any announcements?</p>",
        "id": 224936421,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612299904
    },
    {
        "content": "<p>so I didn't have time to do much background reading</p>",
        "id": 224936424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612299904
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AF-generic_associated_types\">Link</a> for GAT issues</p>",
        "id": 224936583,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612299972
    },
    {
        "content": "<p>But also <a href=\"https://github.com/rust-lang/rust/issues/79554\">#79554</a></p>",
        "id": 224936634,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612299996
    },
    {
        "content": "<p>There are 28 issues open for GATs</p>",
        "id": 224936854,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300104
    },
    {
        "content": "<p>hmmm</p>",
        "id": 224936892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300117
    },
    {
        "content": "<p>But <a href=\"https://github.com/rust-lang/rust/issues/79554\">#79554</a> will close 7 of those</p>",
        "id": 224936897,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300120
    },
    {
        "content": "<p>maybe a triage of the GAT issues is a good idea</p>",
        "id": 224936962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300155
    },
    {
        "content": "<p>I was thinking though: we <em>are</em> planning on trying to stabilize GATs with lifetimes before GATs with types/consts?</p>",
        "id": 224936981,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300165
    },
    {
        "content": "<p>In that case, it might be a good idea to split the <code>generic_associated_types</code> feature into two</p>",
        "id": 224937007,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300182
    },
    {
        "content": "<p>I'm debating about it</p>",
        "id": 224937015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300190
    },
    {
        "content": "<p>only lifetimes vs everything</p>",
        "id": 224937017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300190
    },
    {
        "content": "<p>that probably makes sense</p>",
        "id": 224937026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300197
    },
    {
        "content": "<p>Const sounds hardest, not sure about types vs lifetimes</p>",
        "id": 224937097,
        "sender_full_name": "detrumi",
        "timestamp": 1612300218
    },
    {
        "content": "<p>i guess the question is what gets easier because of excluding types</p>",
        "id": 224937109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-02-02/near/224936962\">said</a>:</p>\n<blockquote>\n<p>maybe a triage of the GAT issues is a good idea</p>\n</blockquote>\n<p>how do people feel about this as a concept?</p>",
        "id": 224937140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300252
    },
    {
        "content": "<p>that is, I think we could do that now</p>",
        "id": 224937154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300265
    },
    {
        "content": "<p>Well, so, the problem with non-lifetimes is things like <code>rustc_resolve::late::lifetimes</code> can't handle anything but late-bound lifetimes</p>",
        "id": 224937163,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-02-02/near/224937154\">said</a>:</p>\n<blockquote>\n<p>that is, I think we could do that now</p>\n</blockquote>\n<p>yeah!</p>",
        "id": 224937174,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300278
    },
    {
        "content": "<p>Let me make a hackmd</p>",
        "id": 224937198,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300303
    },
    {
        "content": "<p><a href=\"https://hackmd.io/uxoObhSxSRijNmfmGkId0g\">https://hackmd.io/uxoObhSxSRijNmfmGkId0g</a></p>",
        "id": 224937209,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300313
    },
    {
        "content": "<p>heh, I had one, but it was empty</p>",
        "id": 224937222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300320
    },
    {
        "content": "<p>we'll use yours!</p>",
        "id": 224937224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300322
    },
    {
        "content": "<p>let's go oldest to newest?</p>",
        "id": 224937282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300337
    },
    {
        "content": "<p>I don't know why, just because</p>",
        "id": 224937289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300342
    },
    {
        "content": "<h1>Allow generic associate types in trait paths <a href=\"https://github.com/rust-lang/rust/issues/67510\">#67510</a></h1>",
        "id": 224937306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300352
    },
    {
        "content": "<p>well, I guess we could start with the tracking issue</p>",
        "id": 224937337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300373
    },
    {
        "content": "<h1><span aria-label=\"science\" class=\"emoji emoji-1f52c\" role=\"img\" title=\"science\">:science:</span> Tracking issue for generic associated types (GAT) <a href=\"https://github.com/rust-lang/rust/issues/44265\">#44265</a></h1>",
        "id": 224937379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300397
    },
    {
        "content": "<p>but there doesn't seem to be much there?</p>",
        "id": 224937386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300400
    },
    {
        "content": "<p>nope</p>",
        "id": 224937393,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300405
    },
    {
        "content": "<p>I don't think anything relevant</p>",
        "id": 224937400,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300412
    },
    {
        "content": "<p>5 open blocking bugs?</p>",
        "id": 224937412,
        "sender_full_name": "detrumi",
        "timestamp": 1612300419
    },
    {
        "content": "<p>ah those are all labeled</p>",
        "id": 224937439,
        "sender_full_name": "detrumi",
        "timestamp": 1612300432
    },
    {
        "content": "<p>I think we should circle back to that list</p>",
        "id": 224937444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300433
    },
    {
        "content": "<p>since we'll encounter them as we go</p>",
        "id": 224937448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300437
    },
    {
        "content": "<p>exactly</p>",
        "id": 224937451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-02-02/near/224937306\">said</a>:</p>\n<blockquote>\n<h1>Allow generic associate types in trait paths <a href=\"https://github.com/rust-lang/rust/issues/67510\">#67510</a></h1>\n</blockquote>",
        "id": 224937495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300443
    },
    {
        "content": "<p>So</p>",
        "id": 224937526,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300461
    },
    {
        "content": "<p>pretty simple</p>",
        "id": 224937533,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300465
    },
    {
        "content": "<p>And <a href=\"https://github.com/rust-lang/rust/issues/79554\">#79554</a> directly addresses</p>",
        "id": 224937556,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300482
    },
    {
        "content": "<p>there is a bit of a design question</p>",
        "id": 224937581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300498
    },
    {
        "content": "<p>do you <em>have</em> to give a name</p>",
        "id": 224937591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300502
    },
    {
        "content": "<p>what if you do <code>dyn Foo&lt;Y&lt;'a&gt; = u32&gt;</code></p>",
        "id": 224937603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300509
    },
    {
        "content": "<p>I forget if we answered this in the RFC</p>",
        "id": 224937629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300525
    },
    {
        "content": "<p>I don't remember</p>",
        "id": 224937672,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300555
    },
    {
        "content": "<p>lurking a bit here and I don't want to distract, but meanwhile I read your discussion and try to follow up, is there a place that condenses what's the current status of things? what's missing? what are the main difficulties and all that?</p>",
        "id": 224937680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612300557
    },
    {
        "content": "<p>that's kind of what we're trying to figure out, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 224937732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300568
    },
    {
        "content": "<p>by traiging issues</p>",
        "id": 224937748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300573
    },
    {
        "content": "<p>the \"basic state\" is that things \"kind of mostly work\"</p>",
        "id": 224937758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300578
    },
    {
        "content": "<p>I guess the question is</p>\n<div class=\"codehilite\"><pre><span></span><code>fn f(x: Box&lt;dyn X&lt;Y&lt;&#39;a&gt;=&amp;&#39;a ()&gt;&gt;) {}\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code>fn f(x: Box&lt;dyn for&lt;&#39;a&gt; X&lt;Y&lt;&#39;a&gt;=&amp;&#39;a ()&gt;&gt;) {}\n</code></pre></div>",
        "id": 224937803,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300597
    },
    {
        "content": "<p>I'd call <a href=\"https://github.com/rust-lang/rust/issues/67510\">#67510</a> blocking</p>",
        "id": 224937822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300611
    },
    {
        "content": "<p>we should probably clarify our categories</p>",
        "id": 224937848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300625
    },
    {
        "content": "<p>but to start I would say we are looking at \"blocking / non-blocking'</p>",
        "id": 224937858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300633
    },
    {
        "content": "<p>and maybe we'll add more notes as we go?</p>",
        "id": 224937867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300638
    },
    {
        "content": "<p>Works for me</p>",
        "id": 224937916,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300662
    },
    {
        "content": "<h1>GAT ICE: impl item and trait item have different parameter counts <a href=\"https://github.com/rust-lang/rust/issues/68648\">#68648</a></h1>",
        "id": 224937938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300679
    },
    {
        "content": "<p>looks like it has a pending fix</p>",
        "id": 224938007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300697
    },
    {
        "content": "<p>Same PR</p>",
        "id": 224938037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300715
    },
    {
        "content": "<p>blocking</p>",
        "id": 224938064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300729
    },
    {
        "content": "<p>There's like 3 or 4 issues that have roughly the same example</p>",
        "id": 224938067,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300730
    },
    {
        "content": "<h1>GAT ICE: place local already assigned to <a href=\"https://github.com/rust-lang/rust/issues/68649\">#68649</a></h1>",
        "id": 224938103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300756
    },
    {
        "content": "<p>same thing</p>",
        "id": 224938133,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300775
    },
    {
        "content": "<p>yep</p>",
        "id": 224938136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300777
    },
    {
        "content": "<p>ok</p>",
        "id": 224938139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300778
    },
    {
        "content": "<p>same with 68650 and 68652</p>",
        "id": 224938159,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300790
    },
    {
        "content": "<h1>Yield reference in generator with GAT <a href=\"https://github.com/rust-lang/rust/issues/69268\">#69268</a></h1>",
        "id": 224938291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300831
    },
    {
        "content": "<p>just a feature request</p>",
        "id": 224938302,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300837
    },
    {
        "content": "<p>re. generators</p>",
        "id": 224938309,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300840
    },
    {
        "content": "<p>non-blocking</p>",
        "id": 224938316,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300842
    },
    {
        "content": "<p>I also probably wouldn't even feel comfortable thinking about this until close to stabilization</p>",
        "id": 224938367,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300868
    },
    {
        "content": "<p>(at the earliest)</p>",
        "id": 224938376,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300873
    },
    {
        "content": "<p>definitely not blocking</p>",
        "id": 224938386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300879
    },
    {
        "content": "<p>doesn't even seem like a \"GAT\" bug</p>",
        "id": 224938394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300886
    },
    {
        "content": "<h1>GAT: the type <code>[type error]</code> has an unknown layout <a href=\"https://github.com/rust-lang/rust/issues/70303\">#70303</a></h1>",
        "id": 224938443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612300910
    },
    {
        "content": "<p>blocking</p>",
        "id": 224938522,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300933
    },
    {
        "content": "<p>same as 70304</p>",
        "id": 224938526,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300936
    },
    {
        "content": "<p>both are similiar</p>",
        "id": 224938554,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612300953
    },
    {
        "content": "<p>yeah</p>",
        "id": 224938640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301008
    },
    {
        "content": "<p>blocking but basically just kind of \"misc bug\"</p>",
        "id": 224938750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301048
    },
    {
        "content": "<p>no known fix yet</p>",
        "id": 224938767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301057
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/71176\">#71176</a> is also fixed by <a href=\"https://github.com/rust-lang/rust/issues/79554\">#79554</a> from the looks of it</p>",
        "id": 224938819,
        "sender_full_name": "detrumi",
        "timestamp": 1612301089
    },
    {
        "content": "<p>yes, but not labeled as such in PR, will discuss that in review</p>",
        "id": 224938915,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301129
    },
    {
        "content": "<h1>GAT: open drop from non-ADT <code>[type error]</code> <a href=\"https://github.com/rust-lang/rust/issues/70304\">#70304</a></h1>",
        "id": 224938944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301140
    },
    {
        "content": "<p>same as <a href=\"https://github.com/rust-lang/rust/issues/70303\">#70303</a>, right?</p>",
        "id": 224938952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301145
    },
    {
        "content": "<p>sorry, i'm trying to go systematically here :)</p>",
        "id": 224938958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301149
    },
    {
        "content": "<p>yes</p>",
        "id": 224939025,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301173
    },
    {
        "content": "<h1>GAT ICEs: different parameter counts, cat_expr Errd, broken MIR, debuginfo <a href=\"https://github.com/rust-lang/rust/issues/71176\">#71176</a></h1>",
        "id": 224939051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301182
    },
    {
        "content": "<p>This looks like it's probably fixed in the PR</p>",
        "id": 224939083,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301193
    },
    {
        "content": "<p>but blocking</p>",
        "id": 224939091,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301197
    },
    {
        "content": "<p>yes to both</p>",
        "id": 224939108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301203
    },
    {
        "content": "<h1>Broken LLVM with GAT <a href=\"https://github.com/rust-lang/rust/issues/74684\">#74684</a></h1>",
        "id": 224939140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301223
    },
    {
        "content": "<p>Fixed by PR</p>",
        "id": 224939172,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301242
    },
    {
        "content": "<p>blocking</p>",
        "id": 224939175,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301243
    },
    {
        "content": "<p>known to be fixezd?</p>",
        "id": 224939272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301284
    },
    {
        "content": "<p>ok</p>",
        "id": 224939274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301284
    },
    {
        "content": "<p>yes</p>",
        "id": 224939327,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301311
    },
    {
        "content": "<p>(repro test case in PR)</p>",
        "id": 224939335,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301317
    },
    {
        "content": "<h1>Where clause in GAT must be repeated in function definition <a href=\"https://github.com/rust-lang/rust/issues/74798\">#74798</a></h1>",
        "id": 224939336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301318
    },
    {
        "content": "<p>looks like non-blocking</p>",
        "id": 224939374,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301339
    },
    {
        "content": "<p>hmm</p>",
        "id": 224939390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301347
    },
    {
        "content": "<p>not GAT-specific</p>",
        "id": 224939411,
        "sender_full_name": "detrumi",
        "timestamp": 1612301359
    },
    {
        "content": "<p>this doesn't even look like it uses GATs</p>",
        "id": 224939435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301369
    },
    {
        "content": "<p>am I missing something? :)</p>",
        "id": 224939460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301381
    },
    {
        "content": "<p>heh, you're right</p>",
        "id": 224939489,
        "sender_full_name": "detrumi",
        "timestamp": 1612301396
    },
    {
        "content": "<p>woah</p>",
        "id": 224939576,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301419
    },
    {
        "content": "<p>so I think we can relabel this</p>",
        "id": 224939608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301440
    },
    {
        "content": "<p>uh, wait</p>",
        "id": 224939616,
        "sender_full_name": "detrumi",
        "timestamp": 1612301445
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0658]: where clauses on associated types are unstable\n  --&gt; src/lib.rs:19:5\n   |\n19 |     type ItemHolder: ItemHolder where &lt;Self::ItemHolder as ItemHolder&gt;::Item: Gen&lt;u32&gt;;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #44265 &lt;https://github.com/rust-lang/rust/issues/44265&gt; for more information\n   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n</code></pre></div>",
        "id": 224939641,
        "sender_full_name": "detrumi",
        "timestamp": 1612301457
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 224939652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301464
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 224939664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301472
    },
    {
        "content": "<p>I'm not convinced this where clause means what the issue filer thinks it means</p>",
        "id": 224939709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301495
    },
    {
        "content": "<p>sorry, had to step away for a sec</p>",
        "id": 224940024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301627
    },
    {
        "content": "<p>so--</p>",
        "id": 224940029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301629
    },
    {
        "content": "<p>a where clause on an associated type, just like a where clause on a fn or whatever, means \"you must prove this where clause is true to use the associated type\"</p>",
        "id": 224940097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301652
    },
    {
        "content": "<p>This is the same as <code>type ItemHolder: ItemHolder&lt;Item: Gen&lt;u32&gt;&gt;</code>, right?</p>",
        "id": 224940107,
        "sender_full_name": "detrumi",
        "timestamp": 1612301657
    },
    {
        "content": "<p>No</p>",
        "id": 224940120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301667
    },
    {
        "content": "<p>it's subtle</p>",
        "id": 224940139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301681
    },
    {
        "content": "<p>consider the distinction between</p>",
        "id": 224940157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301691
    },
    {
        "content": "<p><code>type ItemHolder&lt;T: Ord&gt;: Eq</code></p>",
        "id": 224940175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301703
    },
    {
        "content": "<p>let me make a table, our syntax is actually missing something like what this person wants</p>",
        "id": 224940209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301723
    },
    {
        "content": "<p>A note on the subtlety here: we should probably think about strengthening the documentation and diagnostics are this at some point</p>",
        "id": 224940340,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301788
    },
    {
        "content": "<table>\n<thead>\n<tr>\n<th>Syntax</th>\n<th>who proves it</th>\n<th>who can assume it</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>type Foo: Bar = X</code></td>\n<td>the impl</td>\n<td>generic code using <code>T::Foo</code></td>\n</tr>\n<tr>\n<td><code>type Foo&lt;A: Bar&gt; = X</code></td>\n<td>generic code using <code>T::Foo&lt;U&gt;</code>, which must prove that <code>U: Bar</code></td>\n<td>the impl, when proving the type <code>X</code> is WF</td>\n</tr>\n<tr>\n<td><code>type Foo&lt;A&gt; = X where A: Bar</code></td>\n<td>generic code using <code>T::Foo&lt;U&gt;</code>, which must prove that <code>U: Bar</code></td>\n<td>the impl, when proving the type <code>X</code> is WF</td>\n</tr>\n</tbody>\n</table>",
        "id": 224940350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301800
    },
    {
        "content": "<p>(ah right, the <code>as ItemHolder</code> is creating the bound on that trait instead of the associated item)</p>",
        "id": 224940353,
        "sender_full_name": "detrumi",
        "timestamp": 1612301804
    },
    {
        "content": "<p>I can paste the above table and maybe close the issue, I think this is 'working as intended'</p>",
        "id": 224940394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301836
    },
    {
        "content": "<p>I think that table doesn't quite make sense</p>",
        "id": 224940465,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301873
    },
    {
        "content": "<p>at least, naming of params could be better</p>",
        "id": 224940527,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301887
    },
    {
        "content": "<p>there is a typo</p>",
        "id": 224940540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301893
    },
    {
        "content": "<p>for one thing :)</p>",
        "id": 224940551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301898
    },
    {
        "content": "<p>is taht better?</p>",
        "id": 224940599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301930
    },
    {
        "content": "<p>yes</p>",
        "id": 224940623,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301943
    },
    {
        "content": "<p>re. the issue, I think pasting table is good</p>",
        "id": 224940679,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301967
    },
    {
        "content": "<p>I will have to reread the code to be confident it's closable</p>",
        "id": 224940708,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612301983
    },
    {
        "content": "<p>I closed it</p>",
        "id": 224940726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301994
    },
    {
        "content": "<p>I'm all confidence :P</p>",
        "id": 224940729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612301996
    },
    {
        "content": "<p>I'm ok re-opening it though</p>",
        "id": 224940803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302011
    },
    {
        "content": "<p>and we can close later if we still think that's true</p>",
        "id": 224940819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302019
    },
    {
        "content": "<p>works for me</p>",
        "id": 224940826,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302025
    },
    {
        "content": "<h1>[nightly] ICE when using GATs with const generics <a href=\"https://github.com/rust-lang/rust/issues/75415\">#75415</a></h1>",
        "id": 224940930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302080
    },
    {
        "content": "<p>not blocking I think</p>",
        "id": 224940954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302092
    },
    {
        "content": "<p>this seems entangled with the horror that is const generics parenting</p>",
        "id": 224940969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302101
    },
    {
        "content": "<p>I'm going to see if this is the same with min_const_generics</p>",
        "id": 224941002,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302113
    },
    {
        "content": "<p>you could try enabling lazy norm -- <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> what's the feature gate for that?</p>",
        "id": 224941073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302132
    },
    {
        "content": "<p>But not blocing for lifetimes GATs</p>",
        "id": 224941089,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302139
    },
    {
        "content": "<p>I think that will change the way we do parent generics</p>",
        "id": 224941094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302140
    },
    {
        "content": "<p>lazy norm is enabled for <code>const_generics</code></p>",
        "id": 224941120,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302152
    },
    {
        "content": "<p>but not for <code>min_const_generics</code></p>",
        "id": 224941145,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302160
    },
    {
        "content": "<p>so it's already enabled but still a problem?</p>",
        "id": 224941199,
        "sender_full_name": "detrumi",
        "timestamp": 1612302188
    },
    {
        "content": "<p>understood</p>",
        "id": 224941238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302210
    },
    {
        "content": "<p>yes</p>",
        "id": 224941243,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302211
    },
    {
        "content": "<p>perhaps my diagnosis was wrong then</p>",
        "id": 224941256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302219
    },
    {
        "content": "<p>though it's clearly connected somehow :)</p>",
        "id": 224941267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302226
    },
    {
        "content": "<p>either way I'd call this more of a const generics bug</p>",
        "id": 224941297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302240
    },
    {
        "content": "<p>but not sure</p>",
        "id": 224941339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302246
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>‍♀️</p>",
        "id": 224941364,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302252
    },
    {
        "content": "<h1>Bad GAT usage causes infinite build/check/run <a href=\"https://github.com/rust-lang/rust/issues/76187\">#76187</a></h1>",
        "id": 224941401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302270
    },
    {
        "content": "<p>(I'm happy with \"not blocking\" for <a href=\"https://github.com/rust-lang/rust/issues/75415\">#75415</a> for now)</p>",
        "id": 224941425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302283
    },
    {
        "content": "<p>so, this might be fixed by PR?</p>",
        "id": 224941457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302300
    },
    {
        "content": "<p>maybe</p>",
        "id": 224941462,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302301
    },
    {
        "content": "<p>maybe not</p>",
        "id": 224941505,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302316
    },
    {
        "content": "<p>blocking though</p>",
        "id": 224941515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302321
    },
    {
        "content": "<p>well</p>",
        "id": 224941645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302368
    },
    {
        "content": "<p>seems blocking esque to me</p>",
        "id": 224941656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302378
    },
    {
        "content": "<p>but I think what's happening here...</p>",
        "id": 224941662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302382
    },
    {
        "content": "<p>it seems like the set of types reachable is infinite</p>",
        "id": 224941717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302420
    },
    {
        "content": "<p>ah, hmm</p>",
        "id": 224941769,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302455
    },
    {
        "content": "<p>a bit hard for me to tell i guess</p>",
        "id": 224941777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302457
    },
    {
        "content": "<p>I could be wrong</p>",
        "id": 224941780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302460
    },
    {
        "content": "<p>this is wacky :)</p>",
        "id": 224941814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302479
    },
    {
        "content": "<p>I would call this blocking</p>",
        "id": 224941854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302484
    },
    {
        "content": "<p>Would this require some sort of cycle detection?</p>",
        "id": 224941869,
        "sender_full_name": "detrumi",
        "timestamp": 1612302488
    },
    {
        "content": "<p>yeah, I'm sure there's a more minimal repro here</p>",
        "id": 224941873,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302490
    },
    {
        "content": "<p>oh, sorry, you already said blocking</p>",
        "id": 224941882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302494
    },
    {
        "content": "<p>I read your comment as 'non blocking'</p>",
        "id": 224941893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302498
    },
    {
        "content": "<p>I guess I just agree then :)</p>",
        "id": 224941907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302507
    },
    {
        "content": "<h1>Associated type constraint fails, even if it implements requested trait <a href=\"https://github.com/rust-lang/rust/issues/76407\">#76407</a></h1>",
        "id": 224941937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302530
    },
    {
        "content": "<p>I'm not sure</p>",
        "id": 224942026,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302582
    },
    {
        "content": "<p>probably blocking</p>",
        "id": 224942039,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302587
    },
    {
        "content": "<p>error: the trait bound <code>for&lt;'a&gt; &lt;MyStruct as MyTrait&gt;::Item&lt;'a&gt;: Marker</code> is not satisfied</p>",
        "id": 224942128,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302615
    },
    {
        "content": "<p>looks blocking</p>",
        "id": 224942170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302637
    },
    {
        "content": "<p>looks fairly broken to me</p>",
        "id": 224942183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302643
    },
    {
        "content": "<p>actually looks somewhat like just a regular associate type normalization issue</p>",
        "id": 224942224,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302663
    },
    {
        "content": "<p>probably a failed normalization</p>",
        "id": 224942226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302664
    },
    {
        "content": "<p>yep</p>",
        "id": 224942243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302671
    },
    {
        "content": "<p>kinda surprising</p>",
        "id": 224942265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302680
    },
    {
        "content": "<p>I'm calling blocking, but might not be</p>",
        "id": 224942307,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302712
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=813908a74da25efecaba3204de2cb734\">this variant fails to compile too</a></p>",
        "id": 224942391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302749
    },
    {
        "content": "<p>that one doesn't use GATs</p>",
        "id": 224942400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302754
    },
    {
        "content": "<p>probably the same bug</p>",
        "id": 224942404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302756
    },
    {
        "content": "<p>I'm pretty sure I've seen this in a different issue</p>",
        "id": 224942449,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302795
    },
    {
        "content": "<p>I'm a bit torn on whether this is blocking</p>",
        "id": 224942463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302805
    },
    {
        "content": "<p>I think probabl yes</p>",
        "id": 224942469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302807
    },
    {
        "content": "<p>I think it's going to be a lot more common with GATs</p>",
        "id": 224942482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302813
    },
    {
        "content": "<p>the code in the example looks pretty close to what I would call a \"core GAT use case\"</p>",
        "id": 224942500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302827
    },
    {
        "content": "<p>I'm going to put down as blocking with playground link</p>",
        "id": 224942511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302833
    },
    {
        "content": "<p>if you remove the GAT-ness, you just get</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">ty_check</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">MyTrait</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>::<span class=\"n\">Item</span>: <span class=\"nc\">Marker</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224942598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302860
    },
    {
        "content": "<p>and it'd be pretty damn bad if that didn't work :)</p>",
        "id": 224942621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302867
    },
    {
        "content": "<p>Running low on time, so let's try to get through rest</p>",
        "id": 224942664,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302883
    },
    {
        "content": "<p>I doubt we will</p>",
        "id": 224942675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302890
    },
    {
        "content": "<p>probably not</p>",
        "id": 224942684,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302894
    },
    {
        "content": "<p>but i'm game to put in some more time later</p>",
        "id": 224942699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302900
    },
    {
        "content": "<p>and/or read over log if you want to continue</p>",
        "id": 224942710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302906
    },
    {
        "content": "<p>this seems very useful</p>",
        "id": 224942724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302912
    },
    {
        "content": "<p>I can be around any time today</p>",
        "id": 224942726,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302913
    },
    {
        "content": "<h1>Compiler panics when creating a trait object for a trait which uses generic_associated_types <a href=\"https://github.com/rust-lang/rust/issues/76535\">#76535</a></h1>",
        "id": 224942752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302926
    },
    {
        "content": "<p>But I'll also probably just continue going through issues</p>",
        "id": 224942755,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302927
    },
    {
        "content": "<p>This might be fixed by PR</p>",
        "id": 224942789,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302952
    },
    {
        "content": "<p>\"internal compiler error: impl item and trait item have different parameter counts\"</p>",
        "id": 224942803,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302960
    },
    {
        "content": "<p>I thought maybe</p>",
        "id": 224942821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302962
    },
    {
        "content": "<p>blocking either way</p>",
        "id": 224942883,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612302993
    },
    {
        "content": "<p>blocking</p>",
        "id": 224942887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302994
    },
    {
        "content": "<p>yes</p>",
        "id": 224942888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612302995
    },
    {
        "content": "<h1>ICE when combining GATs and HRTBs <a href=\"https://github.com/rust-lang/rust/issues/76826\">#76826</a></h1>",
        "id": 224942937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612303027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-02-02/near/224942803\">said</a>:</p>\n<blockquote>\n<p>\"internal compiler error: impl item and trait item have different parameter counts\"</p>\n</blockquote>\n<p>Oof it's actually changed now: \"internal compiler error: compiler/rustc_middle/src/ty/subst.rs:476:25: Region parameter out of range when substituting in region 'a (index=1)\"</p>",
        "id": 224942971,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303046
    },
    {
        "content": "<p>same gist I think</p>",
        "id": 224942987,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303056
    },
    {
        "content": "<p>this also might be fixed</p>",
        "id": 224943073,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303089
    },
    {
        "content": "<p>in PR</p>",
        "id": 224943076,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303093
    },
    {
        "content": "<p>I wondered</p>",
        "id": 224943088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612303099
    },
    {
        "content": "<p>I guess mark as blocking</p>",
        "id": 224943121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612303121
    },
    {
        "content": "<h1>GAT: unconstrained lifetime in output when using GAT in fn type <a href=\"https://github.com/rust-lang/rust/issues/77905\">#77905</a></h1>",
        "id": 224943128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612303122
    },
    {
        "content": "<p>seems buggy</p>",
        "id": 224943215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612303175
    },
    {
        "content": "<p>the example seems buggy I mean</p>",
        "id": 224943238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612303185
    },
    {
        "content": "<p>something's weird</p>",
        "id": 224943242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612303187
    },
    {
        "content": "<p>gotta drop now!</p>",
        "id": 224943244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612303188
    },
    {
        "content": "<p>Yeah, I'm pretty sure I know where this is erroring out</p>",
        "id": 224943317,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303208
    },
    {
        "content": "<p>also worth checking if PR fixes</p>",
        "id": 224943337,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303217
    },
    {
        "content": "<p>since that will actually see the <code>'a</code> in the input</p>",
        "id": 224943382,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303237
    },
    {
        "content": "<p>blocking</p>",
        "id": 224943411,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303250
    },
    {
        "content": "<h1>GAT lifetime mismatch with type parametrised over dyn trait object with restricted lifetime <a href=\"https://github.com/rust-lang/rust/issues/78113\">#78113</a></h1>",
        "id": 224943442,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-02-02/near/224941073\">said</a>:</p>\n<blockquote>\n<p>you could try enabling lazy norm -- <span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> what's the feature gate for that?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/75415\">#75415</a> is unrelated to lazy norm</p>",
        "id": 224943455,
        "sender_full_name": "lcnr",
        "timestamp": 1612303274
    },
    {
        "content": "<p>(the feature gate for that is either <code>const_generics</code> or <code>lazy_normalization_consts</code>)</p>",
        "id": 224943511,
        "sender_full_name": "lcnr",
        "timestamp": 1612303306
    },
    {
        "content": "<p>we have to get the right parent in <code>type_of</code>  and idk how that works</p>",
        "id": 224943546,
        "sender_full_name": "lcnr",
        "timestamp": 1612303322
    },
    {
        "content": "<p>but haven't looked too deeply into this myself yet</p>",
        "id": 224943595,
        "sender_full_name": "lcnr",
        "timestamp": 1612303333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-02-02/near/224943442\">said</a>:</p>\n<blockquote>\n<h1>GAT lifetime mismatch with type parametrised over dyn trait object with restricted lifetime <a href=\"https://github.com/rust-lang/rust/issues/78113\">#78113</a></h1>\n</blockquote>\n<p>This looks like potentially working as intended</p>",
        "id": 224943661,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303378
    },
    {
        "content": "<p>likely not blocking</p>",
        "id": 224943854,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303456
    },
    {
        "content": "<h1>ICE: compiler/rustc_middle/src/ty/subst.rs:529:17: type parameter <code>T/#1</code> (T/1) out of range when substituting, substs=Self <a href=\"https://github.com/rust-lang/rust/issues/78671\">#78671</a></h1>",
        "id": 224943919,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303499
    },
    {
        "content": "<p>example isn't quite enough</p>",
        "id": 224944008,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303552
    },
    {
        "content": "<p>weird example yeah</p>",
        "id": 224944068,
        "sender_full_name": "detrumi",
        "timestamp": 1612303564
    },
    {
        "content": "<p>comments have a better repro</p>",
        "id": 224944128,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303602
    },
    {
        "content": "<p>still a weird example</p>",
        "id": 224944178,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303642
    },
    {
        "content": "<p>Wait, regression-from-stable-to-stable?</p>",
        "id": 224944191,
        "sender_full_name": "detrumi",
        "timestamp": 1612303652
    },
    {
        "content": "<p>On a GAT issue?</p>",
        "id": 224944196,
        "sender_full_name": "detrumi",
        "timestamp": 1612303656
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>‍♀️</p>",
        "id": 224944224,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303677
    },
    {
        "content": "<p>I'm going to put as non-blocking, since it's a type GAT</p>",
        "id": 224944287,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303703
    },
    {
        "content": "<p>doesn't feel blocking</p>",
        "id": 224944289,
        "sender_full_name": "detrumi",
        "timestamp": 1612303705
    },
    {
        "content": "<p>and the example is really weird</p>",
        "id": 224944300,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303709
    },
    {
        "content": "<p>It wouldn't be valid code if everything worked correctly</p>",
        "id": 224944326,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303729
    },
    {
        "content": "<h1><code>generic_associated_types</code> fails on dyn dyn  <a href=\"https://github.com/rust-lang/rust/issues/79422\">#79422</a></h1>",
        "id": 224944377,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303769
    },
    {
        "content": "<p>blocking, possibly fixed by PR</p>",
        "id": 224944403,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303792
    },
    {
        "content": "<p>yup</p>",
        "id": 224944413,
        "sender_full_name": "detrumi",
        "timestamp": 1612303797
    },
    {
        "content": "<h1>Compiler panic during GAT type bound usage <a href=\"https://github.com/rust-lang/rust/issues/79636\">#79636</a></h1>",
        "id": 224944515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303851
    },
    {
        "content": "<p>oh joy, a Monad example</p>",
        "id": 224944526,
        "sender_full_name": "detrumi",
        "timestamp": 1612303859
    },
    {
        "content": "<p>non blocking</p>",
        "id": 224944554,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303874
    },
    {
        "content": "<p>type GAT, possibly fixed by PR</p>",
        "id": 224944566,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303881
    },
    {
        "content": "<p>Definitely should work on diagnostics here though</p>",
        "id": 224944685,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303930
    },
    {
        "content": "<p>(I imagine we can get the same thing with lifetimes)</p>",
        "id": 224944700,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612303940
    },
    {
        "content": "<p>Is it safe to assume that such ICEs are not a problem with lifetimes only?</p>",
        "id": 224944715,
        "sender_full_name": "detrumi",
        "timestamp": 1612303951
    },
    {
        "content": "<p>seems valid in this case at least, just checked</p>",
        "id": 224944727,
        "sender_full_name": "detrumi",
        "timestamp": 1612303958
    },
    {
        "content": "<p>ah nvm, it mentions substituting type params</p>",
        "id": 224944782,
        "sender_full_name": "detrumi",
        "timestamp": 1612303995
    },
    {
        "content": "<p>yeah, seems like a type-only thing</p>",
        "id": 224944846,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304029
    },
    {
        "content": "<p><em>but</em></p>",
        "id": 224944858,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304038
    },
    {
        "content": "<p>the same underlying problem - not specific vars on GAT - could happen with lifetimes</p>",
        "id": 224944932,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304061
    },
    {
        "content": "<h1>ICE with const generics and GATs <a href=\"https://github.com/rust-lang/rust/issues/79666\">#79666</a></h1>",
        "id": 224944959,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304082
    },
    {
        "content": "<p>another const parent path ICE</p>",
        "id": 224944984,
        "sender_full_name": "detrumi",
        "timestamp": 1612304093
    },
    {
        "content": "<p>non-blocking, const GAT</p>",
        "id": 224944995,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304099
    },
    {
        "content": "<h1><a href=\"https://github.com/rust-lang/rust/issues/79768\">#79768</a> - Internal Compiler Error caused by Generic Associated Types</h1>",
        "id": 224945048,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304136
    },
    {
        "content": "<p>non-blocking, type GAT</p>",
        "id": 224945191,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304170
    },
    {
        "content": "<p>looks similar to <a href=\"https://github.com/rust-lang/rust/issues/79636\">#79636</a></p>",
        "id": 224945283,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304191
    },
    {
        "content": "<h1><a href=\"https://github.com/rust-lang/rust/issues/80433\">#80433</a> - ICE when using \"Generic Associated Types\" feature with references for impl block</h1>",
        "id": 224945445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304235
    },
    {
        "content": "<p>also fixed by 79554</p>",
        "id": 224945491,
        "sender_full_name": "detrumi",
        "timestamp": 1612304270
    },
    {
        "content": "<p>Possibly</p>",
        "id": 224945550,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304285
    },
    {
        "content": "<p>hm, or does it need a workaround?</p>",
        "id": 224945570,
        "sender_full_name": "detrumi",
        "timestamp": 1612304294
    },
    {
        "content": "<p>blocking</p>",
        "id": 224945571,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304294
    },
    {
        "content": "<p>3 more</p>",
        "id": 224945626,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304325
    },
    {
        "content": "<h1><a href=\"https://github.com/rust-lang/rust/issues/80626\">#80626</a> - Enum variant with GAT field fails to derive Sized</h1>",
        "id": 224945630,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304329
    },
    {
        "content": "<p>non-blocking, type GAT</p>",
        "id": 224945655,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304347
    },
    {
        "content": "<p>this is a bit weird though</p>",
        "id": 224945819,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304453
    },
    {
        "content": "<p>oh wait, no</p>",
        "id": 224945823,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304458
    },
    {
        "content": "<p>Because when variants have more than 1 field, all but last field must be <code>Sized</code></p>",
        "id": 224945860,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304489
    },
    {
        "content": "<p>err wait</p>",
        "id": 224945877,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304501
    },
    {
        "content": "<p>it it recursive?</p>",
        "id": 224945901,
        "sender_full_name": "detrumi",
        "timestamp": 1612304517
    },
    {
        "content": "<p>that's backwards from what I expect</p>",
        "id": 224945918,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304522
    },
    {
        "content": "<p>yes, it's recursive</p>",
        "id": 224945988,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304567
    },
    {
        "content": "<p>So, the last field being sized is checked when proving the <code>Struct: Sized</code> bound, while the other fields are only checked when checking the item is well-formed.</p>",
        "id": 224946015,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612304590
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 224946047,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304619
    },
    {
        "content": "<p>Ah right</p>",
        "id": 224946083,
        "sender_full_name": "detrumi",
        "timestamp": 1612304642
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f83e644bf061ffcb1e9fddd14f5dbd41\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f83e644bf061ffcb1e9fddd14f5dbd41</a> works, so specific to type GATs</p>",
        "id": 224946169,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304673
    },
    {
        "content": "<p>definitely non blocking</p>",
        "id": 224946176,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304677
    },
    {
        "content": "<h1><a href=\"https://github.com/rust-lang/rust/issues/80982\">#80982</a> - Error in trait solving</h1>",
        "id": 224946204,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304698
    },
    {
        "content": "<p>Related to 78113, which was likely not blocking</p>",
        "id": 224946249,
        "sender_full_name": "detrumi",
        "timestamp": 1612304729
    },
    {
        "content": "<p>right</p>",
        "id": 224946357,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304775
    },
    {
        "content": "<p>I think same</p>",
        "id": 224946360,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304777
    },
    {
        "content": "<p>but this is a little more complicated</p>",
        "id": 224946396,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304807
    },
    {
        "content": "<p>specifically, the question is does <code>impl&lt;'a&gt; A for &amp;'a Box&lt;dyn A + 'a&gt;</code> satisfy <code>T&lt;'a&gt; : A</code> where the impl is <code>T&lt;'a&gt; = &amp;'a Box&lt;dyn A + 'a&gt;</code></p>",
        "id": 224946493,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304869
    },
    {
        "content": "<p>I <em>think</em> this is working as intended</p>",
        "id": 224946601,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612304919
    },
    {
        "content": "<p>We definitely need better diagnostics then, to avoid getting more of these bug reports</p>",
        "id": 224946673,
        "sender_full_name": "detrumi",
        "timestamp": 1612304971
    },
    {
        "content": "<p>yeah, dianostics here are bad</p>",
        "id": 224946762,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305009
    },
    {
        "content": "<p>essentially trying to coerce <code>Foo</code> to <code>dyn A + 'a</code></p>",
        "id": 224946793,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305025
    },
    {
        "content": "<p>likely not blocking</p>",
        "id": 224946836,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305053
    },
    {
        "content": "<p>yeah, the last part of expected/found makes sense</p>",
        "id": 224946839,
        "sender_full_name": "detrumi",
        "timestamp": 1612305056
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>   = note: expected reference `&amp;&#39;a Box&lt;(dyn A + &#39;a)&gt;`\n              found reference `&amp;&#39;a Box&lt;Foo&gt;`\n</code></pre></div>",
        "id": 224946865,
        "sender_full_name": "detrumi",
        "timestamp": 1612305071
    },
    {
        "content": "<p>That message is essentially correct,</p>",
        "id": 224946891,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612305090
    },
    {
        "content": "<p>There's no unsizing coercion for two layers of pointers.</p>",
        "id": 224946930,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612305117
    },
    {
        "content": "<p>I'm actually going to move it to not blocking</p>",
        "id": 224947019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305155
    },
    {
        "content": "<p>But it's not closable because diagnostics</p>",
        "id": 224947036,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305165
    },
    {
        "content": "<h1><a href=\"https://github.com/rust-lang/rust/issues/81487\">#81487</a> - Error when inferring a lifetime in return type using GATs</h1>",
        "id": 224947046,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305170
    },
    {
        "content": "<p>Not blocking and not a GAT issue</p>",
        "id": 224947047,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612305170
    },
    {
        "content": "<p>last one <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 224947089,
        "sender_full_name": "detrumi",
        "timestamp": 1612305193
    },
    {
        "content": "<p>that's a lot of reference layers</p>",
        "id": 224947209,
        "sender_full_name": "detrumi",
        "timestamp": 1612305264
    },
    {
        "content": "<p>yeah</p>",
        "id": 224947248,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305286
    },
    {
        "content": "<p>this looks...like it should work</p>",
        "id": 224947274,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305302
    },
    {
        "content": "<p>That one (<a href=\"https://github.com/rust-lang/rust/issues/81487\">#81487</a>) is blocking</p>",
        "id": 224947281,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612305306
    },
    {
        "content": "<p>it does? huh, my intuition is wrong then</p>",
        "id": 224947309,
        "sender_full_name": "detrumi",
        "timestamp": 1612305321
    },
    {
        "content": "<p>yeah, basically see that <code>RefWrapper(the_ref)</code> replaced with <code>RefWrapper::&lt;'a, T&gt;(the_ref)</code> works</p>",
        "id": 224947365,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305354
    },
    {
        "content": "<p>It works with <code>feature(nll)</code></p>",
        "id": 224947366,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612305355
    },
    {
        "content": "<p>So, maybe I should finish my attempts to stabilize that.</p>",
        "id": 224947448,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612305391
    },
    {
        "content": "<p>What exactly does that feature enable?</p>",
        "id": 224947464,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305407
    },
    {
        "content": "<p>It disables region checking in (HIR) typeck</p>",
        "id": 224947484,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612305423
    },
    {
        "content": "<p>interesting</p>",
        "id": 224947507,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305445
    },
    {
        "content": "<p>that's very non-obvious when looking at the errors</p>",
        "id": 224947535,
        "sender_full_name": "detrumi",
        "timestamp": 1612305465
    },
    {
        "content": "<p>Yeah. I think with potentially better diagnostics it's okay</p>",
        "id": 224947593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305488
    },
    {
        "content": "<p>but as-is, blocking</p>",
        "id": 224947599,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305493
    },
    {
        "content": "<p>anyways, that's all the issues</p>",
        "id": 224947609,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305497
    },
    {
        "content": "<p>I gotta run</p>",
        "id": 224947613,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612305499
    },
    {
        "content": "<p>In conclusion, we should probably review again after <a href=\"https://github.com/rust-lang/rust/issues/79554\">#79554</a> lands</p>",
        "id": 224947826,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612305624
    },
    {
        "content": "<p>Only about 5 issues besides that, assuming the others are all fixed by that</p>",
        "id": 224947931,
        "sender_full_name": "detrumi",
        "timestamp": 1612305701
    },
    {
        "content": "<p>Trait objects are in a weird place where they don't work (at least if you try to call any methods), but we don't error until the trait system.</p>",
        "id": 225335992,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612549026
    }
]