[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have a question, why do we need <code>InferTy::CanonicalTy</code> in rustc? Couldn't we just re-use <code>InferTy::TyVar</code> / <code>InferTy::IntVar</code> / <code>InferTy::FloatVar</code>?</p>",
        "id": 135620832,
        "sender_full_name": "scalexm",
        "timestamp": 1539276479
    },
    {
        "content": "<p>we could, but then things are less robust</p>",
        "id": 135624956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539280861
    },
    {
        "content": "<p>I would rather use <code>BoundVar</code></p>",
        "id": 135624967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539280869
    },
    {
        "content": "<p>and keep <code>TyVar</code> to represent free types</p>",
        "id": 135624971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539280876
    },
    {
        "content": "<p>(which reminds me, I have to get back to that chalk PR)</p>",
        "id": 135624987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539280901
    },
    {
        "content": "<p>(in particular, if we move to bind-var, we should be able to share the substitution machinery etc)</p>",
        "id": 135624999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539280916
    },
    {
        "content": "<p>Ok, I'm currently trying to move to <code>BoundTy</code> in rustc</p>",
        "id": 135626761,
        "sender_full_name": "scalexm",
        "timestamp": 1539282541
    },
    {
        "content": "<p>my current definition is the following:</p>\n<div class=\"codehilite\"><pre><span></span>pub enum TyKind {\n    ...\n    Bound(DebruijnIndex, BoundTy),\n}\n\npub struct BoundTy {\n    pub idx: u32,\n    pub kind: BoundTyKind,\n}\n\npub enum BoundTyKind {\n    Anon,\n    Param(InternedString),\n}\n</pre></div>",
        "id": 135626792,
        "sender_full_name": "scalexm",
        "timestamp": 1539282586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what do you think of it?</p>",
        "id": 135626853,
        "sender_full_name": "scalexm",
        "timestamp": 1539282607
    },
    {
        "content": "<p>the role of <code>BoundTyKind</code> is basically for printouts?</p>",
        "id": 135627012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539282775
    },
    {
        "content": "<p>seems good, anyway</p>",
        "id": 135627042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539282816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes it's for printouts</p>",
        "id": 135627149,
        "sender_full_name": "scalexm",
        "timestamp": 1539282958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm having trouble figuring out how we will unify bound tys and regions in <code>SubstFolder</code></p>",
        "id": 135669209,
        "sender_full_name": "scalexm",
        "timestamp": 1539343244
    },
    {
        "content": "<p>as far as I understand, <code>SubstFolder</code> only substitutes early bound regions</p>",
        "id": 135669221,
        "sender_full_name": "scalexm",
        "timestamp": 1539343257
    },
    {
        "content": "<p>however, we cannot use early bound regions to express bound regions in a \"general way\", we rather need to use late bound regions ... which are substituted through another routine</p>",
        "id": 135669243,
        "sender_full_name": "scalexm",
        "timestamp": 1539343300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> yes. I was imagining that we would treat \"bound tys\" as \"late-bound\" and use those other routines to do the substitution</p>",
        "id": 135829352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539609042
    },
    {
        "content": "<p>is there a time when we have to \"mix\"?</p>",
        "id": 135829360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539609052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok then in that case, I don't think so</p>",
        "id": 135829421,
        "sender_full_name": "scalexm",
        "timestamp": 1539609120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do we want the <code>BoundTy</code> variant in <code>enum TyKind</code> or rather in <code>enum InferTy</code>?</p>",
        "id": 135888941,
        "sender_full_name": "scalexm",
        "timestamp": 1539682264
    },
    {
        "content": "<p>also if we change <code>CanonicalTy</code> to <code>BoundTy</code>, what about <code>ReCanonical</code>? Do we still want that region variant? Couldn't we use <code>ReLateBound</code>?</p>",
        "id": 135888960,
        "sender_full_name": "scalexm",
        "timestamp": 1539682319
    },
    {
        "content": "<p>I think it should go in <code>TyKind</code> probably, and I also think that <code>ReCanonical</code> can go away, yes</p>",
        "id": 135889491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539682997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what should I do about the <code>HAS_CANONICAL_VARS</code> flag? Can I just remove it?</p>",
        "id": 136354771,
        "sender_full_name": "scalexm",
        "timestamp": 1540317728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I suppose so</p>",
        "id": 136356484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540319052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think I'm seeing the end, but now that I moved from <code>ReCanonical</code> to <code>ReLateBound</code> I hit this assertion: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/infer/region_constraints/mod.rs#L692-L697\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/infer/region_constraints/mod.rs#L692-L697\">https://github.com/rust-lang/rust/blob/master/src/librustc/infer/region_constraints/mod.rs#L692-L697</a> (called from <code>InferCtxt::make_query_response</code>)</p>",
        "id": 136367016,
        "sender_full_name": "scalexm",
        "timestamp": 1540328514
    },
    {
        "content": "<p>I did not try to understand what is happening in that function yet</p>",
        "id": 136367093,
        "sender_full_name": "scalexm",
        "timestamp": 1540328558
    },
    {
        "content": "<p>I'll take a look in a bit :)</p>",
        "id": 136398783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540375255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> can you point me at your diffs and/or open a WIP PR?</p>",
        "id": 136398885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540375358
    },
    {
        "content": "<p>sounds like you are missing a substitution or something <em>somewhere</em></p>",
        "id": 136398899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540375365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes that's what I'm thinking too</p>",
        "id": 136399115,
        "sender_full_name": "scalexm",
        "timestamp": 1540375677
    },
    {
        "content": "<p>this is the full diff: <a href=\"https://github.com/rust-lang/rust/compare/master...scalexm:bound-ty\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...scalexm:bound-ty\">https://github.com/rust-lang/rust/compare/master...scalexm:bound-ty</a></p>",
        "id": 136399149,
        "sender_full_name": "scalexm",
        "timestamp": 1540375683
    },
    {
        "content": "<p>but the problem is with the last commit: <a href=\"https://github.com/rust-lang/rust/commit/8051a2be5f9a9190974cbebe877672b6081cf7ce\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/8051a2be5f9a9190974cbebe877672b6081cf7ce\">https://github.com/rust-lang/rust/commit/8051a2be5f9a9190974cbebe877672b6081cf7ce</a> (which tries to remove <code>ReCanonical</code>)</p>",
        "id": 136399175,
        "sender_full_name": "scalexm",
        "timestamp": 1540375710
    },
    {
        "content": "<p>It may be the canonical substitution that is wrong (I just tweaked the original one, but eventually Iâ€™d like to extend <code>ty::fold::RegionReplacer</code> to replace both bound regions and types, and use that for canonical substitution as well)</p>",
        "id": 136399711,
        "sender_full_name": "scalexm",
        "timestamp": 1540376361
    },
    {
        "content": "<p>oh <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I forgot to look at this</p>",
        "id": 136420637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398372
    },
    {
        "content": "<p>did you figure it out?</p>",
        "id": 136420638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398374
    },
    {
        "content": "<p>also, it so happens that the code I wrote now is trying to canonicalize a value that contains a canonical vaule</p>",
        "id": 136420643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398386
    },
    {
        "content": "<p>annoying that your branch has not already landed :P</p>",
        "id": 136420647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> not yet, I'm still trying to debug</p>",
        "id": 136420654,
        "sender_full_name": "scalexm",
        "timestamp": 1540398404
    },
    {
        "content": "<p>ok if you want I can start up a local build and try to trace it</p>",
        "id": 136420683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398445
    },
    {
        "content": "<p>the commit is big enough it's hard for me to \"just see\" :)</p>",
        "id": 136420688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes that might be helpful</p>",
        "id": 136420913,
        "sender_full_name": "scalexm",
        "timestamp": 1540398702
    },
    {
        "content": "<p>ok starting</p>",
        "id": 136420971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398730
    },
    {
        "content": "<p>er, where is the branch?</p>",
        "id": 136420974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398734
    },
    {
        "content": "<p>ah, <code>bound-ty</code> on your repo</p>",
        "id": 136420986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398740
    },
    {
        "content": "<p>yep</p>",
        "id": 136420996,
        "sender_full_name": "scalexm",
        "timestamp": 1540398755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  oh ok I think I found something</p>",
        "id": 136424467,
        "sender_full_name": "scalexm",
        "timestamp": 1540402361
    },
    {
        "content": "<p><a href=\"https://github.com/scalexm/rust/blob/8051a2be5f9a9190974cbebe877672b6081cf7ce/src/librustc/infer/canonical/query_response.rs#L502-L504\" target=\"_blank\" title=\"https://github.com/scalexm/rust/blob/8051a2be5f9a9190974cbebe877672b6081cf7ce/src/librustc/infer/canonical/query_response.rs#L502-L504\">https://github.com/scalexm/rust/blob/8051a2be5f9a9190974cbebe877672b6081cf7ce/src/librustc/infer/canonical/query_response.rs#L502-L504</a></p>",
        "id": 136424478,
        "sender_full_name": "scalexm",
        "timestamp": 1540402394
    },
    {
        "content": "<p>the <code>skip_binder</code> is wrong, because \"canonical\" late bound regions are adjusted with the binder</p>",
        "id": 136424487,
        "sender_full_name": "scalexm",
        "timestamp": 1540402417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> ah</p>",
        "id": 136425895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540404041
    },
    {
        "content": "<p>indeed, should be not so hard to fix I wouldn't think tho</p>",
        "id": 136425923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540404068
    },
    {
        "content": "<p>so I now see the failure, but maybe I won't look any further <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> ?</p>",
        "id": 136426491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540404631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the build with the fix is still not finished yet but I think this is good yes</p>",
        "id": 136426986,
        "sender_full_name": "scalexm",
        "timestamp": 1540405192
    },
    {
        "content": "<p>nice</p>",
        "id": 136427082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540405282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is it fine to rename <code>Binder::no_late_bound_regions</code> to <code>Binder::no_escaping_vars</code>?</p>",
        "id": 136433072,
        "sender_full_name": "scalexm",
        "timestamp": 1540411499
    },
    {
        "content": "<p>or <code>no_escaping_bound_vars</code></p>",
        "id": 136433146,
        "sender_full_name": "scalexm",
        "timestamp": 1540411576
    },
    {
        "content": "<p>seems fine</p>",
        "id": 136433156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540411589
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>. you round?</p>",
        "id": 136440166,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540419478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> PR up: <a href=\"https://github.com/rust-lang/rust/pull/55330\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55330\">https://github.com/rust-lang/rust/pull/55330</a></p>",
        "id": 136441152,
        "sender_full_name": "scalexm",
        "timestamp": 1540420727
    },
    {
        "content": "<p>I have a test failing locally: <code>src/test/run-pass/rustc-rust-log.rs</code>, but it's weird because compiletest tells me that it encountered an explicit panic, whereas when I run <code>RUST_LOG=debug rustc src/test/run-pass/rustc-rust-log.rs</code> with my stage 1 compiler, everything is fine</p>",
        "id": 136441274,
        "sender_full_name": "scalexm",
        "timestamp": 1540420835
    },
    {
        "content": "<p>that is weird; sometimes it's due to <code>// compile-flags</code>, maybe?</p>",
        "id": 136476044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540473271
    },
    {
        "content": "<p>hmm maybe not</p>",
        "id": 136476051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540473301
    },
    {
        "content": "<p>I think you can use <code>-vv</code> or something to see the <em>exact</em> command being executed</p>",
        "id": 136476062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540473312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I left a review of your PR</p>",
        "id": 136476070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540473320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok fixed</p>",
        "id": 136481102,
        "sender_full_name": "scalexm",
        "timestamp": 1540478084
    },
    {
        "content": "<p>did you have a look at the perf run: <a href=\"https://perf.rust-lang.org/compare.html?start=f99911a4a0bead7dd1f9ef2f90442844434cc391&amp;end=2b86a36d9530d0a26855c5a8ec6759e21fce2efc\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=f99911a4a0bead7dd1f9ef2f90442844434cc391&amp;end=2b86a36d9530d0a26855c5a8ec6759e21fce2efc\">https://perf.rust-lang.org/compare.html?start=f99911a4a0bead7dd1f9ef2f90442844434cc391&amp;end=2b86a36d9530d0a26855c5a8ec6759e21fce2efc</a> ? I'm not sure how to interpret it</p>",
        "id": 136481145,
        "sender_full_name": "scalexm",
        "timestamp": 1540478129
    },
    {
        "content": "<p>I was just worried about degrading the perfs of canonical substitution because we lose the inlining of the var replacement machinery, now that this is done through the <code>fld_t</code> and <code>fld_r</code> function pointers</p>",
        "id": 136482119,
        "sender_full_name": "scalexm",
        "timestamp": 1540478861
    },
    {
        "content": "<blockquote>\n<p>did you have a look at the perf run: <a href=\"https://perf.rust-lang.org/compare.html?start=f99911a4a0bead7dd1f9ef2f90442844434cc391&amp;end=2b86a36d9530d0a26855c5a8ec6759e21fce2efc\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=f99911a4a0bead7dd1f9ef2f90442844434cc391&amp;end=2b86a36d9530d0a26855c5a8ec6759e21fce2efc\">https://perf.rust-lang.org/compare.html?start=f99911a4a0bead7dd1f9ef2f90442844434cc391&amp;end=2b86a36d9530d0a26855c5a8ec6759e21fce2efc</a> ? I'm not sure how to interpret it</p>\n</blockquote>\n<p>yes, it looked like \"no difference\" to me</p>",
        "id": 136485941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540481745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> question abound bound vars in the <code>environment</code> query (same as <code>param_env</code> but for chalk)</p>",
        "id": 136792383,
        "sender_full_name": "scalexm",
        "timestamp": 1540920503
    },
    {
        "content": "<p>currently the result of this query contains type params / early bound regions coming from the generics of the def_id</p>",
        "id": 136792438,
        "sender_full_name": "scalexm",
        "timestamp": 1540920553
    },
    {
        "content": "<p>should I replace them with bound vars instead?</p>",
        "id": 136792446,
        "sender_full_name": "scalexm",
        "timestamp": 1540920572
    },
    {
        "content": "<p>I guess that when we call this query, we next replace these bound vars with placeholder types/regions corresponding to the universally instantiated params</p>",
        "id": 136792518,
        "sender_full_name": "scalexm",
        "timestamp": 1540920609
    },
    {
        "content": "<p>good question, yes</p>",
        "id": 136792781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540920840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I <em>think</em> I expected them to just stay roughly as they are to start; they are effectively placeholders, but in U0, so we can just treat them like any other nominal type I think? I guess this is not true around negative queries though</p>",
        "id": 136795979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540923675
    },
    {
        "content": "<p>that said, I would like to move to a place where we model them as bound-types</p>",
        "id": 136795989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540923695
    },
    {
        "content": "<p>in a uniform way</p>",
        "id": 136795990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540923697
    },
    {
        "content": "<p>ah well â€” I see that we would want to replace them with bound types when creating (e.g.) program clauses</p>",
        "id": 136796003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540923721
    },
    {
        "content": "<p>but I guess that's somewhat separate</p>",
        "id": 136796046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540923726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes so currently I replaced every type parameters in program clauses with bound vars</p>",
        "id": 136796374,
        "sender_full_name": "scalexm",
        "timestamp": 1540924015
    },
    {
        "content": "<p>(Bound at index 0 with the <code>Clause::ForAll</code> variant)</p>",
        "id": 136796396,
        "sender_full_name": "scalexm",
        "timestamp": 1540924027
    },
    {
        "content": "<p>So Iâ€™m going to do the same with <code>environment</code>, which will now return a <code>ty::Binder&lt;Environment&gt;</code></p>",
        "id": 136796432,
        "sender_full_name": "scalexm",
        "timestamp": 1540924062
    },
    {
        "content": "<p>Also now thanks to bound types I can also use them as Â«Â anonymousÂ Â» types to express some built-in program clauses that were not writable before</p>",
        "id": 136796562,
        "sender_full_name": "scalexm",
        "timestamp": 1540924151
    },
    {
        "content": "<p>e.g. <code>forall&lt;â€˜a, T&gt; { T: â€˜a :- FromEnv(&amp;â€™a T) }</code></p>",
        "id": 136796611,
        "sender_full_name": "scalexm",
        "timestamp": 1540924193
    },
    {
        "content": "<p>ok</p>",
        "id": 136796882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540924385
    },
    {
        "content": "<p>oh, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, not urgent, but it occurs to me that since we can now represent bound-types, we could probably cleanup some of the trait object code, so that we can e.g. use a BoundTy to represent the \"unknown self type\"</p>",
        "id": 136934729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091599
    },
    {
        "content": "<p>basically a <code>exists&lt;T&gt; {...}</code> binder</p>",
        "id": 136934780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok</p>",
        "id": 136934976,
        "sender_full_name": "scalexm",
        "timestamp": 1541091837
    },
    {
        "content": "<p>Btw you told me once that placeholder types would be useful for the arbitrary self type RFC</p>",
        "id": 136935024,
        "sender_full_name": "scalexm",
        "timestamp": 1541091856
    },
    {
        "content": "<p>More info on that?</p>",
        "id": 136935026,
        "sender_full_name": "scalexm",
        "timestamp": 1541091859
    },
    {
        "content": "<p>Because Iâ€™m going to add placeholder types on top of your universes refactor 3, so that I can implement most of the chalk engine routines</p>",
        "id": 136935043,
        "sender_full_name": "scalexm",
        "timestamp": 1541091885
    },
    {
        "content": "<p>Ah, well, yes</p>",
        "id": 136935054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091897
    },
    {
        "content": "<p>The PR in question has not landed though I hope it will soon</p>",
        "id": 136935059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091902
    },
    {
        "content": "<p>I haven't heard from the author, <span class=\"user-mention\" data-user-id=\"125273\">@mikeyhew</span>, lately though</p>",
        "id": 136935073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw niko do you think we could maybe set a priority for <a href=\"https://github.com/rust-lang/rust/pull/55305\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55305\">https://github.com/rust-lang/rust/pull/55305</a> and <a href=\"https://github.com/rust-lang/rust/pull/55330\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55330\">https://github.com/rust-lang/rust/pull/55330</a> (once rebased on top of the former)?</p>",
        "id": 136939044,
        "sender_full_name": "scalexm",
        "timestamp": 1541095508
    },
    {
        "content": "<p>I've started to write code that depends on both already, but I'm not very at ease with git and rebasing on top of multiple branches</p>",
        "id": 136939079,
        "sender_full_name": "scalexm",
        "timestamp": 1541095541
    },
    {
        "content": "<p>seems reasonable, yes..</p>",
        "id": 136939404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541095802
    },
    {
        "content": "<p>I gave 55305 p=1, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span></p>",
        "id": 136942007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541098229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I replied to your comment yesterday... we are talking about <a href=\"https://github.com/rust-lang/rust/pull/54383\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54383\">https://github.com/rust-lang/rust/pull/54383</a>, right?</p>",
        "id": 136953330,
        "sender_full_name": "mikeyhew",
        "timestamp": 1541109804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125273\">@mikeyhew</span> so you did :)</p>",
        "id": 137032270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541167940
    },
    {
        "content": "<p>I was talking about that, yes. <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> has added proper support for bound-types into rustc -- at least, I think it landed? I sort of forget. I don't think we're <em>quite</em> at that point where we can use them for that PR yet, but it's a prime example where we would want to.</p>",
        "id": 137032433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541167980
    },
    {
        "content": "<p>quick question <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , if you are in this <code>else</code> branch: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/infer/canonical/canonicalizer.rs#L400-L402\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/infer/canonical/canonicalizer.rs#L400-L402\">https://github.com/rust-lang/rust/blob/master/src/librustc/infer/canonical/canonicalizer.rs#L400-L402</a></p>",
        "id": 137044135,
        "sender_full_name": "scalexm",
        "timestamp": 1541170643
    },
    {
        "content": "<p>won't you miss some placeholder regions? I see that <code>CanonicalizeQueryResponse</code> canonicalizes placeholder regions, but has <code>self.any() == false</code></p>",
        "id": 137044273,
        "sender_full_name": "scalexm",
        "timestamp": 1541170673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <code>create_substs_for_ast_trait_ref</code> is probalby what I want to edit then... but not sure how</p>",
        "id": 137068189,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541178584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok cool, I look forward to using them. For the record, the only reason we need the <code>U</code> type is because using <code>dyn Trait</code> directly causes query cycles</p>",
        "id": 137068526,
        "sender_full_name": "mikeyhew",
        "timestamp": 1541178926
    },
    {
        "content": "<p>Does that mean that ExistentialPredicate would be replaced with Binder&lt;Predicate&gt; or something like that?</p>",
        "id": 137069077,
        "sender_full_name": "mikeyhew",
        "timestamp": 1541179480
    },
    {
        "content": "<p>Sorry that was a reply to this comment, looks like the \"reply\" button isn't very useful</p>\n<blockquote>\n<p>oh, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, not urgent, but it occurs to me that since we can now represent bound-types, we could probably cleanup some of the trait object code, so that we can e.g. use a BoundTy to represent the \"unknown self type\"</p>\n</blockquote>",
        "id": 137069170,
        "sender_full_name": "mikeyhew",
        "timestamp": 1541179570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125273\">@mikeyhew</span> yes I guess so</p>",
        "id": 137069483,
        "sender_full_name": "scalexm",
        "timestamp": 1541179896
    },
    {
        "content": "<blockquote>\n<p>won't you miss some placeholder regions? I see that <code>CanonicalizeQueryResponse</code> canonicalizes placeholder regions, but has <code>self.any() == false</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> it's quite possible that code is now out of sync :(</p>",
        "id": 137072908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541182957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok I just added <code>HAS_RE_PLACEHOLDER</code> in <code>needs_canonical_flags</code></p>",
        "id": 137072967,
        "sender_full_name": "scalexm",
        "timestamp": 1541183010
    },
    {
        "content": "<p>yes, seems good</p>",
        "id": 137072986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183031
    },
    {
        "content": "<p>also, is universe canonicalization even a thing in rustc? Since we canonicalize everything to bound vars</p>",
        "id": 137073047,
        "sender_full_name": "scalexm",
        "timestamp": 1541183053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> at present we are not canonicalizing universes, but I plan to do it at some point, the code is mostly set up for it</p>",
        "id": 137073415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183381
    },
    {
        "content": "<p>well in particular we are not \"compressing\" unused universes</p>",
        "id": 137073421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183391
    },
    {
        "content": "<p>(or renumbering)</p>",
        "id": 137073481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  mmh ok, but I'm not sure where in the code would we be doing that, if I look in chalk this basically happens in two steps: first canonicalizing replaces inference variables with canonical bound vars and leaves placeholder variables untouched, second u-canonicalizing renumbers placeholder variables</p>",
        "id": 137073675,
        "sender_full_name": "scalexm",
        "timestamp": 1541183592
    },
    {
        "content": "<p>anyway this is something that can wait</p>",
        "id": 137073682,
        "sender_full_name": "scalexm",
        "timestamp": 1541183604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> yeah just ignore it for now :P I think we would just do it in the <code>canoncialize_query</code> call though (it's not something you want to do for <code>canonicalize_response</code>)</p>",
        "id": 137073746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183659
    },
    {
        "content": "<p>I don't think the chalk setup is ideal really</p>",
        "id": 137073750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I see that rustc's inference context tracks universes for type variables already, and I'm going to track them in canonicalization as well, but the inference table only tracks universes for unresolved type variables</p>",
        "id": 137082484,
        "sender_full_name": "scalexm",
        "timestamp": 1541192566
    },
    {
        "content": "<p>so I have two possible strategies: either make the inference context track universes for all variables (by e.g. adding a field to <code>TypeVariableData</code>), either try to resolve the variable during canonicalization (if it fails we know that the inference context gives the universe, if it succeeds replace the inference variable with the resolved value instead)</p>",
        "id": 137082515,
        "sender_full_name": "scalexm",
        "timestamp": 1541192616
    },
    {
        "content": "<p>well anyway I'll go for the new field in <code>TypeVariableData</code>, seems simpler</p>",
        "id": 137083222,
        "sender_full_name": "scalexm",
        "timestamp": 1541193391
    },
    {
        "content": "<p>ah no that wouldn't work since the universe indices change during unification</p>",
        "id": 137083682,
        "sender_full_name": "scalexm",
        "timestamp": 1541193878
    },
    {
        "content": "<p>ok so I'll go for the second strategy then lol</p>",
        "id": 137083687,
        "sender_full_name": "scalexm",
        "timestamp": 1541193888
    }
]