[
    {
        "content": "<blockquote>\n<p>I’ll spawn another topic to explain myself later because I’m on my phone now</p>\n</blockquote>\n<p>Where have I <a href=\"https://en.wikiquote.org/wiki/Pierre_de_Fermat\" target=\"_blank\" title=\"https://en.wikiquote.org/wiki/Pierre_de_Fermat\">heard that before</a>...</p>",
        "id": 154596770,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546891284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so about trait objects</p>",
        "id": 154606104,
        "sender_full_name": "scalexm",
        "timestamp": 1546899428
    },
    {
        "content": "<p>my main concern is whether we want to have implied bounds on <code>dyn Trait</code> or not</p>",
        "id": 154606117,
        "sender_full_name": "scalexm",
        "timestamp": 1546899441
    },
    {
        "content": "<p>e.g., if you have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Clone</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// do I want `Implemented(T: Clone)` to be implied or do I need to state it explicitly?</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154606188,
        "sender_full_name": "scalexm",
        "timestamp": 1546899493
    },
    {
        "content": "<p>I believe having full implied bounds on <code>dyn Trait</code> seems natural but may be a difficult problem :)</p>",
        "id": 154606259,
        "sender_full_name": "scalexm",
        "timestamp": 1546899569
    },
    {
        "content": "<p>(at least a problem for which a margin could not contain the solution, cc <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> )</p>",
        "id": 154606347,
        "sender_full_name": "scalexm",
        "timestamp": 1546899623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well here is my proposal for full implied bounds on <code>dyn Trait</code>, I don't know if it is sound but I've not been able to break it yet (nor tried to actually prove it was sound)</p>",
        "id": 154608960,
        "sender_full_name": "scalexm",
        "timestamp": 1546902380
    },
    {
        "content": "<p>so the idea is that, when you have a trait object say <code>dyn Foo&lt;T&gt;</code>, the things we are afraid of are what we can deduce about <code>T</code></p>",
        "id": 154608977,
        "sender_full_name": "scalexm",
        "timestamp": 1546902415
    },
    {
        "content": "<p>the things we can deduce about <code>T</code> are basically:</p>\n<ul>\n<li>all the explicit bounds mentioning <code>T</code> that we can found on the <code>trait Foo&lt;T&gt; where ...</code> declaration</li>\n<li>all the implicit outlive bounds on <code>T</code> than we can syntactically derive from outlive requirements on <code>Self</code> than can be found on the <code>trait Foo&lt;T&gt; where ...</code> declaration</li>\n</ul>",
        "id": 154609066,
        "sender_full_name": "scalexm",
        "timestamp": 1546902516
    },
    {
        "content": "<p>any other bound not mentioning <code>T</code> (i.e. only mentioning <code>Self</code>) are harmless, because we cannot derive anything more about <code>T</code> from them</p>",
        "id": 154609206,
        "sender_full_name": "scalexm",
        "timestamp": 1546902650
    },
    {
        "content": "<p>so suppose a full trait declaration is given by:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">WC1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">...,</span><span class=\"w\"> </span><span class=\"n\">WCn</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154609224,
        "sender_full_name": "scalexm",
        "timestamp": 1546902673
    },
    {
        "content": "<p>I propose we define a specially marked symbol <code>SELF</code> and a new co-inductive predicate <code>Shallow(Type&lt;...&gt;: Foo&lt;...&gt;)</code> defined as:</p>\n<div class=\"codehilite\"><pre><span></span>forall&lt;...&gt; {\n    Shallow(Type&lt;...&gt;: Foo&lt;...&gt;) :- MaybeShallow(WC1), ..., MaybeShallow(WCn)\n}\n</pre></div>\n\n\n<p>where <code>MaybeShallow(WC)</code> is syntactic sugar for:</p>\n<ul>\n<li><code>WC</code> if <code>WC</code> is an outlive requirement or does not mention the <code>SELF</code> special symbol</li>\n<li><code>Shallow(WC)</code> else</li>\n</ul>\n<p>So actually you can think of it as an infinite family of rules indexed by all the possible locations where <code>SELF</code> might appear</p>",
        "id": 154609332,
        "sender_full_name": "scalexm",
        "timestamp": 1546902797
    },
    {
        "content": "<p>then we define the following rules for the well-formedness of <code>dyn Foo&lt;T&gt;</code>:</p>\n<div class=\"codehilite\"><pre><span></span>WellFormed(dyn Foo&lt;T&gt;) :- Shallow(SELF: Foo&lt;T&gt;)\n</pre></div>\n\n\n<p>Eventually, if we manage to prove <code>Shallow(SELF: Foo&lt;T&gt;)</code>, the only thing we will have left are region constraints on <code>SELF</code>: we'll substitute <code>SELF</code> with <code>dyn Foo&lt;T&gt;</code> and prove that the region constraints are syntactically correct</p>\n<p>We now define the following implied bound:</p>\n<div class=\"codehilite\"><pre><span></span>FromEnv(dyn Foo&lt;T&gt;: Foo&lt;T&gt;) :- FromEnv(dyn Foo&lt;T&gt;)\n</pre></div>\n\n\n<p>and the impl:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Note that this impl is WF thanks to the above implied bound,</span>\n<span class=\"c1\">// because `dyn Foo&lt;T&gt;` is an input type of our impl hence we have</span>\n<span class=\"c1\">// `FromEnv(dyn Foo&lt;T&gt;)` in our environment.</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Note the asymmetry between the WF rule and the implied bound rule: in the former we only prove <code>Shallow(SELF: Foo&lt;T&gt;)</code> while in the latter we get the full set of bounds implied by <code>dyn Foo&lt;T&gt;: Foo&lt;T&gt;</code></p>",
        "id": 154609477,
        "sender_full_name": "scalexm",
        "timestamp": 1546902979
    },
    {
        "content": "<p>let's run this proposal through some examples</p>",
        "id": 154609574,
        "sender_full_name": "scalexm",
        "timestamp": 1546903087
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Animal</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Self</span>: <span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// `Shallow(SELF: Animal&lt;?X&gt;) :- Outlives(SELF: &#39;static)`</span>\n\n<span class=\"c1\">// `WellFormed(dyn Animal&lt;&amp;&#39;a i32&gt;) :- Outlives(SELF: &#39;static)`</span>\n<span class=\"c1\">// Provable, but we have `Outlives(SELF: &#39;static)` as a region constraint.</span>\n<span class=\"c1\">// If we substitute `SELF` with `dyn Animal&lt;&amp;&#39;a i32&gt;`, this is yntactically wrong:</span>\n<span class=\"c1\">// `&amp;&#39;a i32` does not outlive `&#39;static`.</span>\n</pre></div>",
        "id": 154609671,
        "sender_full_name": "scalexm",
        "timestamp": 1546903209
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// `Shallow(SELF: Bar).`</span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// `Shallow(SELF: Foo&lt;?T&gt;) :- Shallow(SELF: Bar), Implemented(?T: Copy)`</span>\n\n<span class=\"c1\">// ```</span>\n<span class=\"c1\">// WellFormed(dyn Foo&lt;String&gt;) :-</span>\n<span class=\"c1\">//     Shallow(SELF :- Foo&lt;String&gt;) :- Shallow(SELF: Bar), Implemented(String: Copy)</span>\n<span class=\"c1\">//                                             :- Implemented(String: Copy)</span>\n<span class=\"c1\">// ```</span>\n<span class=\"c1\">// Wrong.</span>\n</pre></div>",
        "id": 154609780,
        "sender_full_name": "scalexm",
        "timestamp": 1546903382
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"o\">&gt;</span>: <span class=\"nc\">where</span><span class=\"w\"> </span><span class=\"n\">Self</span>: <span class=\"nb\">Copy</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// `Shallow(SELF: Baz&lt;?X&gt;).` // `Shallow(SELF: Copy)` is always true</span>\n<span class=\"c1\">// But we also have e.g.:</span>\n<span class=\"c1\">// `Shallow(?T: Baz&lt;SELF&gt;) :- Implemented(?T: Copy)`.</span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FooBaz</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Baz</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// `Shallow(SELF: FooBaz&lt;?T&gt;) :- Shallow(?T: Baz&lt;SELF&gt;)`.</span>\n\n<span class=\"c1\">// ```</span>\n<span class=\"c1\">// WellFormed(dyn FooBaz&lt;String&gt;) :- Shallow(SELF: FooBaz&lt;String&gt;</span>\n<span class=\"c1\">//    :- Shallow(String: Baz&lt;SELF&gt;)</span>\n<span class=\"c1\">//    :- Implemented(String: Copy).</span>\n<span class=\"c1\">// ```</span>\n<span class=\"c1\">// Wrong.</span>\n</pre></div>",
        "id": 154611208,
        "sender_full_name": "scalexm",
        "timestamp": 1546905169
    },
    {
        "content": "<p>Mmh ok so there is one thing that does not work 100% in this proposal, is that we can prove other bounds on <code>dyn Foo&lt;T&gt;</code> than just <code>Implemented(dyn Foo&lt;T&gt;: Foo&lt;T&gt;)</code> <strong>only</strong> if we have <code>FromEnv(dyn Foo&lt;T&gt;)</code> in our environment, because then we can use the implied bound rule</p>",
        "id": 154611490,
        "sender_full_name": "scalexm",
        "timestamp": 1546905526
    },
    {
        "content": "<p>this might be fixable, I'll think about it tomorrow</p>",
        "id": 154611512,
        "sender_full_name": "scalexm",
        "timestamp": 1546905582
    },
    {
        "content": "<p>well, the proposal overall looks complicated, and complicated things are often wrong (but also sometimes they are not, like the proof of Fermat's last theorem to continue on this metaphor lol)</p>",
        "id": 154611751,
        "sender_full_name": "scalexm",
        "timestamp": 1546905853
    },
    {
        "content": "<p>If we didn't allow any implied bounds on <code>dyn Foo&lt;T&gt;</code> other than super-trait bounds from <code>trait Foo&lt;T&gt;</code>, I might have a simpler proposal</p>",
        "id": 154611770,
        "sender_full_name": "scalexm",
        "timestamp": 1546905896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I don’t know how to go the other way, i.e. if you have <code>trait Foo: Bar</code>, how to show that <code>dyn Foo: Bar</code> so eventually I think my proposal won’t work</p>",
        "id": 154629998,
        "sender_full_name": "scalexm",
        "timestamp": 1546934916
    },
    {
        "content": "<p>But I think the general idea about the soundness issue is right: bounds involving <code>Self</code> outside of outlive requirements must be true, every other must be proven</p>",
        "id": 154630017,
        "sender_full_name": "scalexm",
        "timestamp": 1546934964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok I know why the proposal was looking complicated, I was trying to account for bounds like:<br>\n<code>trait Foo&lt;T&gt;: Bar&lt;Self, T&gt;</code><br>\nbut traits with these bounds <em>cannot</em> be made into a trait object</p>",
        "id": 154631402,
        "sender_full_name": "scalexm",
        "timestamp": 1546937231
    },
    {
        "content": "<p>That becomes simpler then</p>",
        "id": 154631434,
        "sender_full_name": "scalexm",
        "timestamp": 1546937282
    },
    {
        "content": "<p>Let’s take again:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">WC1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">...,</span><span class=\"w\"> </span><span class=\"n\">WCn</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Define <code>Shallow(?Self: Foo&lt;?T&gt;) :- MaybeShallow(WC1), ..., MaybeShallow(WCn)</code> where again <code>MaybeShallow(WC)</code> is syntactic sugar for:</p>\n<ul>\n<li><code>Shallow(WC)</code> for bounds of the form <code>WC == Self: Trait</code></li>\n<li><code>WC</code> for other bounds (including outlive requirements)</li>\n</ul>",
        "id": 154631600,
        "sender_full_name": "scalexm",
        "timestamp": 1546937466
    },
    {
        "content": "<p>(<code>Shallow</code> is inductive, I don’t think it needs to be co-inductive)</p>",
        "id": 154631647,
        "sender_full_name": "scalexm",
        "timestamp": 1546937523
    },
    {
        "content": "<p>Define: <code>WF(dyn Foo&lt;T&gt;) :- Shallow(dyn Foo&lt;T&gt;: Foo&lt;T&gt;)</code></p>",
        "id": 154631871,
        "sender_full_name": "scalexm",
        "timestamp": 1546937950
    },
    {
        "content": "<p><code>FromEnv(dyn Foo&lt;T&gt;: Foo&lt;T&gt;) :- FromEnv(dyn Foo&lt;T&gt;)</code></p>",
        "id": 154631891,
        "sender_full_name": "scalexm",
        "timestamp": 1546937990
    },
    {
        "content": "<p>And finally for all super-trait bound <code>SuperTrait&lt;...&gt;</code> transitively derived from <code>trait Foo&lt;T&gt;</code>, you have a generated impl:<br>\n<code>Implemented(dyn Foo&lt;T&gt;: SuperTrait&lt;...&gt;)</code></p>",
        "id": 154632099,
        "sender_full_name": "scalexm",
        "timestamp": 1546938280
    },
    {
        "content": "<p>(The set of all super-trait bounds is easily computed, but this must be done outside of the logic)</p>",
        "id": 154632196,
        "sender_full_name": "scalexm",
        "timestamp": 1546938421
    },
    {
        "content": "<p>argh I did not get time to read this yet <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, hopefully later today</p>",
        "id": 154672221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546977600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> no problem, I'm currently writing a prototype in chalk, I'll try to open a WIP PR this evening so that you might want to read that instead of the long and confuse thoughts I wrote in this stream</p>",
        "id": 154672351,
        "sender_full_name": "scalexm",
        "timestamp": 1546977661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> see <a href=\"https://github.com/rust-lang-nursery/chalk/pull/200\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/pull/200\">https://github.com/rust-lang-nursery/chalk/pull/200</a> for a very sketchy proof of concept</p>",
        "id": 154681955,
        "sender_full_name": "scalexm",
        "timestamp": 1546985817
    },
    {
        "content": "<p>Hmm, implied bounds do add an extra wrinkle <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span></p>",
        "id": 154725351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547042650
    },
    {
        "content": "<p>one thing that may be relevant is that <code>trait Foo&lt;T&gt; where T: Blah&lt;Self&gt;</code> is not a dyn-safe trait (because of the <code>Self</code> in the where-clauses)</p>",
        "id": 154725369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547042688
    },
    {
        "content": "<p>Yes, that’s what I overlooked at the beginning</p>",
        "id": 154725399,
        "sender_full_name": "scalexm",
        "timestamp": 1547042707
    },
    {
        "content": "<p>Without those kind of bounds my proposal is simpler <em>and</em> works</p>",
        "id": 154725420,
        "sender_full_name": "scalexm",
        "timestamp": 1547042724
    },
    {
        "content": "<p>oh I see</p>",
        "id": 154725425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547042736
    },
    {
        "content": "<p>I didn't quite get to the end yet :)</p>",
        "id": 154725427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547042742
    },
    {
        "content": "<p>you are referring to <a href=\"#narrow/stream/144729-wg-traits/topic/scalexm's.20trait.20object.20thoughts/near/154631434\" title=\"#narrow/stream/144729-wg-traits/topic/scalexm's.20trait.20object.20thoughts/near/154631434\">this variant</a>, I guess — beginning at 3:51am</p>",
        "id": 154725507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547042802
    },
    {
        "content": "<p>Mmh could you quote said variant, the link does not work on my phone</p>",
        "id": 154725575,
        "sender_full_name": "scalexm",
        "timestamp": 1547042878
    },
    {
        "content": "<p>it's a lot of messages so hard to quote</p>",
        "id": 154725650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547042910
    },
    {
        "content": "<blockquote>\n<p>Let’s take again:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">WC1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">...,</span><span class=\"w\"> </span><span class=\"n\">WCn</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Define <code>Shallow(?Self: Foo&lt;?T&gt;) :- MaybeShallow(WC1), ..., MaybeShallow(WCn)</code> where again <code>MaybeShallow(WC)</code> is syntactic sugar for:<br>\n* <code>Shallow(WC)</code> for bounds of the form <code>WC == Self: Trait</code><br>\n* <code>WC</code> for other bounds (including outlive requirements)</p>\n</blockquote>",
        "id": 154725662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547042928
    },
    {
        "content": "<p>Right :)</p>",
        "id": 154725672,
        "sender_full_name": "scalexm",
        "timestamp": 1547042937
    },
    {
        "content": "<blockquote>\n<p>(<code>Shallow</code> is inductive, I don’t think it needs to be co-inductive)</p>\n</blockquote>",
        "id": 154725673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547042938
    },
    {
        "content": "<p>etc</p>",
        "id": 154725675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547042940
    },
    {
        "content": "<p>one other thing to keep in mind is that we want to support <code>dyn (Foo+Bar)</code></p>",
        "id": 154725783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547043014
    },
    {
        "content": "<p>Yes, I think the proposal does support them (my chalk PR implements multi-trait objects actually)</p>",
        "id": 154725806,
        "sender_full_name": "scalexm",
        "timestamp": 1547043043
    },
    {
        "content": "<p>I'll have to read the PR</p>",
        "id": 154725835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547043065
    },
    {
        "content": "<p>With the above notations you have <code>WF(dyn Foo+Bar) :- Shallow(dyn (Foo+Bar): Foo), ObjectSafe(Foo), Shallow(dyn (Foo+Bar): Bar), ObjectSafe(Bar)</code></p>",
        "id": 154725864,
        "sender_full_name": "scalexm",
        "timestamp": 1547043107
    },
    {
        "content": "<p>ok I skimmed the PR</p>",
        "id": 154727315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547044256
    },
    {
        "content": "<p>I still have to wrap my head around the <code>Shallow</code> concept somehow</p>",
        "id": 154727355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547044286
    },
    {
        "content": "<p>I guess the point is that <code>Shallow</code> gives you the (transitive) non-supertrait where clauses</p>",
        "id": 154727458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547044346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> exactly, + the outlive requirements</p>",
        "id": 154730509,
        "sender_full_name": "scalexm",
        "timestamp": 1547046638
    },
    {
        "content": "<p>(Although they are not modeled in chalk)</p>",
        "id": 154730519,
        "sender_full_name": "scalexm",
        "timestamp": 1547046650
    },
    {
        "content": "<p><code>Shallow</code> is probably not a good name btw</p>",
        "id": 154730528,
        "sender_full_name": "scalexm",
        "timestamp": 1547046659
    },
    {
        "content": "<p>But the idea behind <code>Shallow</code> is summarized by these two messages:</p>",
        "id": 154730688,
        "sender_full_name": "scalexm",
        "timestamp": 1547046788
    },
    {
        "content": "<p>« so the idea is that, when you have a trait object say <code>dyn Foo&lt;T&gt;</code>, the things we are afraid of are what we can deduce about <code>T</code> »</p>",
        "id": 154730705,
        "sender_full_name": "scalexm",
        "timestamp": 1547046808
    },
    {
        "content": "<p>« the things we can deduce about <code>T</code> are basically:</p>\n<ul>\n<li>all the explicit bounds mentioning <code>T</code> that we can found on the <code>trait Foo&lt;T&gt; where ...</code> declaration</li>\n<li>all the implicit outlive bounds on <code>T</code> than we can syntactically derive from outlive requirements on <code>Self</code> than can be found on the <code>trait Foo&lt;T&gt; where ...</code> declaration »</li>\n</ul>",
        "id": 154730716,
        "sender_full_name": "scalexm",
        "timestamp": 1547046818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think we may not even need <code>Shallow</code> if we write the <code>impl SuperTrait for dyn Trait</code> cleverly (i.e. with the right where clauses)</p>",
        "id": 154759876,
        "sender_full_name": "scalexm",
        "timestamp": 1547069951
    },
    {
        "content": "<p>I'll try this week-end</p>",
        "id": 154759884,
        "sender_full_name": "scalexm",
        "timestamp": 1547069955
    }
]