[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">other</span>: <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This fails in today's Rust because of the standard library's <code>impl From&lt;T&gt; for T</code>. Would the current proposed design of specialization allow this somehow?</p>",
        "id": 158068050,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549921342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I don't believe so, because this is a violation of the orphan rules<br>\nwhich state that if a type parameter appears in the <code>Self</code> type of an impl for a non-local trait, it must be \"covered\" by a local type</p>",
        "id": 158080105,
        "sender_full_name": "tmandry",
        "timestamp": 1549931857
    },
    {
        "content": "<p>e.g. the following example does compile:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">OtherWrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">OtherWrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">other</span>: <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">OtherWrapper</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 158080161,
        "sender_full_name": "tmandry",
        "timestamp": 1549931883
    },
    {
        "content": "<p>due to <code>OtherWrapper</code> covering the type parameter <code>T</code></p>",
        "id": 158080180,
        "sender_full_name": "tmandry",
        "timestamp": 1549931907
    },
    {
        "content": "<p>the accepted specialization RFC does not propose changes to this rule</p>",
        "id": 158080189,
        "sender_full_name": "tmandry",
        "timestamp": 1549931923
    },
    {
        "content": "<p>(see <a href=\"http://smallcultfollowing.com/babysteps/blog/2015/01/14/little-orphan-impls/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2015/01/14/little-orphan-impls/\">this blog post</a> for more on the orphan rules)</p>",
        "id": 158080207,
        "sender_full_name": "tmandry",
        "timestamp": 1549931970
    },
    {
        "content": "<p>I know there is other work going on outside specialization to change the orphan rules to make them more permissive, though</p>",
        "id": 158080301,
        "sender_full_name": "tmandry",
        "timestamp": 1549932082
    },
    {
        "content": "<p>or at least interest. not sure what state all that is in</p>",
        "id": 158080317,
        "sender_full_name": "tmandry",
        "timestamp": 1549932118
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html\"><code>feature(re_rebalance_coherence)</code></a> is live, but does not address this specific aspect, (due to the generic, I believe).</p>",
        "id": 158085432,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549938842
    },
    {
        "content": "<p>That's why I'm curious if specialization (perhaps with rebalancing) would address it</p>",
        "id": 158085495,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549938891
    },
    {
        "content": "<p>Since <em>conceptually</em>, <code>impl From&lt;T&gt; for T</code> could be seen as a specialization.</p>",
        "id": 158085525,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549938937
    }
]