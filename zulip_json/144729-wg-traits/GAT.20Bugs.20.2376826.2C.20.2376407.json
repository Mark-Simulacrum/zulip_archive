[
    {
        "content": "<p>I really want to chat about <a href=\"https://github.com/rust-lang/rust/issues/76826\">#76826</a> and <a href=\"https://github.com/rust-lang/rust/issues/76407\">#76407</a>, because I think I actually think they're blocking GATs (primarily because the ICE on the first, but the underlying issue is the same for both)</p>",
        "id": 236676704,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619704540
    },
    {
        "content": "<p>But I don't think I can <em>right now</em></p>",
        "id": 236676718,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619704549
    },
    {
        "content": "<p>But quickly, to summarize:</p>",
        "id": 236676728,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619704554
    },
    {
        "content": "<p>If we end up with something like <code>&lt;Foo as Bar&gt;::Item&lt;'a&gt;: Baz</code></p>",
        "id": 236676813,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619704578
    },
    {
        "content": "<p>Right now, that <code>ProjectionTy</code> has an escaping bound var <code>'a</code>, so we give up early</p>",
        "id": 236676859,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619704601
    },
    {
        "content": "<p>But, I think we can <em>probably</em> normalize that fine because <code>&lt;Foo as Bar&gt;::Item</code> doesn't have any bound vars</p>",
        "id": 236676924,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619704631
    },
    {
        "content": "<p>The problem then comes in when there's something like <code>type Item&lt;'a&gt; where Self: 'a;</code></p>",
        "id": 236676983,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619704663
    },
    {
        "content": "<p>Because we generate an obligation for that normalization and the obligation now has escaping vars</p>",
        "id": 236677024,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619704682
    },
    {
        "content": "<p>OK</p>",
        "id": 236678551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705265
    },
    {
        "content": "<p>I can dig a bit now, this is my \"async fn in traits\" time</p>",
        "id": 236678577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705274
    },
    {
        "content": "<p>So</p>",
        "id": 236678946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705393
    },
    {
        "content": "<p>This seems just true for all normalization under binders</p>",
        "id": 236679129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705444
    },
    {
        "content": "<p>man</p>",
        "id": 236679234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705501
    },
    {
        "content": "<p>Maybe we just remove that check</p>",
        "id": 236679240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705504
    },
    {
        "content": "<p><em>no</em></p>",
        "id": 236679257,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619705509
    },
    {
        "content": "<p>I tried :)</p>",
        "id": 236679281,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619705518
    },
    {
        "content": "<p>How no?</p>",
        "id": 236679283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705518
    },
    {
        "content": "<p>I think can imagine a lot of stuff dying</p>",
        "id": 236679327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705525
    },
    {
        "content": "<p>Things blow up</p>",
        "id": 236679329,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619705525
    },
    {
        "content": "<p>Yeah, ok</p>",
        "id": 236679341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705529
    },
    {
        "content": "<p>Lots of things assume no bound vars in predicates</p>",
        "id": 236679371,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619705540
    },
    {
        "content": "<p>because they generate a lot of obligations we don't know how to satisfy, right?</p>",
        "id": 236679373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705540
    },
    {
        "content": "<p>Ah, ok, that too</p>",
        "id": 236679395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705549
    },
    {
        "content": "<p>that could be solved</p>",
        "id": 236679537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705616
    },
    {
        "content": "<p>by removing the assertions lol :)</p>",
        "id": 236679543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705620
    },
    {
        "content": "<p>(or in other ways)</p>",
        "id": 236679562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705625
    },
    {
        "content": "<p>but at that point we really want the generalized placeholder infrastructure</p>",
        "id": 236679633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705644
    },
    {
        "content": "<p>well I geuss we have it</p>",
        "id": 236679662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705649
    },
    {
        "content": "<p>I mean, if we remove the assertions, is that <em>okay</em></p>",
        "id": 236679690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619705664
    },
    {
        "content": "<p>I think it's ok, but we have to make sure the code treats them like placeholders</p>",
        "id": 236679749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705697
    },
    {
        "content": "<p>it's also true that</p>",
        "id": 236679821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705725
    },
    {
        "content": "<p>so actually</p>",
        "id": 236679833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705730
    },
    {
        "content": "<p>... I forget how much universe infra is in rustc now</p>",
        "id": 236679854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705739
    },
    {
        "content": "<p>let me go looking</p>",
        "id": 236679867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705744
    },
    {
        "content": "<p>because the right way to handle this is actually to lean on universes</p>",
        "id": 236679908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705756
    },
    {
        "content": "<p>if we actually took a stab at fixing this bug <em>for real</em> we could fix a lot of ICEs</p>",
        "id": 236680012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705785
    },
    {
        "content": "<p>and it may be within reach</p>",
        "id": 236680053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705807
    },
    {
        "content": "<p>I think I landed the big universe refactorings.. didn't I? ;) it's all a blur</p>",
        "id": 236680121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705844
    },
    {
        "content": "<p>I'm not really sure where to begin there</p>",
        "id": 236680123,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619705844
    },
    {
        "content": "<p>Yes, there were some universe refactorings</p>",
        "id": 236680147,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619705856
    },
    {
        "content": "<p>yeah that's ok let me dig a bit</p>",
        "id": 236680149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705857
    },
    {
        "content": "<p>I'm kind of excited now</p>",
        "id": 236680154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705859
    },
    {
        "content": "<p>oh wait</p>",
        "id": 236680265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705891
    },
    {
        "content": "<p>I never <em>quite</em> removed the leak check</p>",
        "id": 236680280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705895
    },
    {
        "content": "<p>No</p>",
        "id": 236680299,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619705901
    },
    {
        "content": "<p>I got really close</p>",
        "id": 236680313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705908
    },
    {
        "content": "<p>I think there were some backwards-compatibility concerns</p>",
        "id": 236680380,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619705931
    },
    {
        "content": "<p>yes. it broke some specific patterns.</p>",
        "id": 236680397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705943
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 236680412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705949
    },
    {
        "content": "<p>removing the leak check may or may not be necessary</p>",
        "id": 236680431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705956
    },
    {
        "content": "<p>but also it may be an option</p>",
        "id": 236680439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705960
    },
    {
        "content": "<p>I had to fix some stuff in coherence to make it work</p>",
        "id": 236680468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619705972
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/56105\">https://github.com/rust-lang/rust/issues/56105</a></p>",
        "id": 236680529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619706001
    },
    {
        "content": "<p>full writeup: <a href=\"https://gist.github.com/nikomatsakis/8bfda6c1119727e13ec6e98f33d2b696\">https://gist.github.com/nikomatsakis/8bfda6c1119727e13ec6e98f33d2b696</a></p>",
        "id": 236680684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619706044
    },
    {
        "content": "<p>in particular <a href=\"https://gist.github.com/nikomatsakis/8bfda6c1119727e13ec6e98f33d2b696#why-not-remove-the-leak-check-part-1-coherence\">this section</a></p>",
        "id": 236680773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619706075
    },
    {
        "content": "<p>I remember this</p>",
        "id": 236681022,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619706151
    },
    {
        "content": "<p>paging back in</p>",
        "id": 236681046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619706160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any thoughts here? If I were to try to do something here, where would I start?</p>",
        "id": 236716410,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619718527
    },
    {
        "content": "<p>Also pretty sure <a href=\"https://github.com/rust-lang/rust/issues/76826\">#76826</a> is a variant of <a href=\"https://github.com/rust-lang/rust/issues/62529\">#62529</a></p>",
        "id": 236716811,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619718712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I will spend more time on this tomorrow, I kind of ran out of budget today; I do think there's something actionable here but I'm not 100% sure what yet :)</p>",
        "id": 236741222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619728682
    },
    {
        "content": "<p>Okay I'll be around at the 9:15 time :)</p>",
        "id": 236741315,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619728714
    },
    {
        "content": "<p>we could talk more about this</p>",
        "id": 236832052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619788558
    },
    {
        "content": "<p>Let's</p>",
        "id": 236832116,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619788572
    },
    {
        "content": "<p>I'm looking at your writeup on the leak check again</p>",
        "id": 236832580,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619788825
    },
    {
        "content": "<p>It's been a while</p>",
        "id": 236832590,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619788828
    },
    {
        "content": "<p>so</p>",
        "id": 236832599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619788835
    },
    {
        "content": "<p>we may actually not have to change anything w/r/t the leak check</p>",
        "id": 236832620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619788846
    },
    {
        "content": "<p>let me double check something</p>",
        "id": 236832713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619788875
    },
    {
        "content": "<p>right ok</p>",
        "id": 236832914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619788955
    },
    {
        "content": "<p>so we do the leak check in two places now;</p>",
        "id": 236832922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619788958
    },
    {
        "content": "<p>the whole problem with the leak check -- besides that it was overly conservative -- was that it prevented us from following the \"unfold\" strategy that we use elsewhere</p>",
        "id": 236833002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619788991
    },
    {
        "content": "<p>where we (for example) normalize and return some obligations that have yet to be proved</p>",
        "id": 236833022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789002
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 236833052,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619789020
    },
    {
        "content": "<p>but the leak check needs to be done after all of those items have been proven</p>",
        "id": 236833054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789020
    },
    {
        "content": "<p>and hence all their implications are known</p>",
        "id": 236833072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789032
    },
    {
        "content": "<p>universes give us the ability to do that</p>",
        "id": 236833082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789040
    },
    {
        "content": "<p>by moving the unvierse into the obligation state etc</p>",
        "id": 236833138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789055
    },
    {
        "content": "<p>so the leak check is kind of not needed anymore</p>",
        "id": 236833148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789057
    },
    {
        "content": "<p>there is this edge case around coherence, though</p>",
        "id": 236833181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789075
    },
    {
        "content": "<p>it basically comes down to \"what information are we allowed to use to decide which impl to use\"-- in some cases, we can see that the outlives relations will lead to errors-- are we allowed to use that info?</p>",
        "id": 236833248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789108
    },
    {
        "content": "<p>we don't normally use <em>any</em> outlives info</p>",
        "id": 236833259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789113
    },
    {
        "content": "<p>but the leak check meant that we did use some, and we rely on that in certain ways</p>",
        "id": 236833284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789125
    },
    {
        "content": "<p><em>luckily</em> I think that, in its current state, this is actually orthogonal</p>",
        "id": 236833298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789136
    },
    {
        "content": "<p>to the problem at hand</p>",
        "id": 236833307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789140
    },
    {
        "content": "<p>\"what!\" you say \"how can that be!\"</p>",
        "id": 236833363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789161
    },
    {
        "content": "<p>what! How can that be!</p>",
        "id": 236833463,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619789193
    },
    {
        "content": "<p>thank you for asking!</p>",
        "id": 236833672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789289
    },
    {
        "content": "<p>I'll tell you</p>",
        "id": 236833677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789293
    },
    {
        "content": "<p>we do leak-checking in two places</p>",
        "id": 236833725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789315
    },
    {
        "content": "<p><a href=\"https://github.com/blitzerr/rust/blob/49920bc581743d6edb9f82fbff4cbafebc212619/compiler/rustc_trait_selection/src/traits/coherence.rs#L212-L217\">one of them is here, in coherence</a></p>",
        "id": 236833762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789337
    },
    {
        "content": "<p>note that this runs at the very end, after we have solved all the resulting obligations</p>",
        "id": 236833781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789349
    },
    {
        "content": "<p>the other place is in the <code>evaluation_probe</code> method</p>",
        "id": 236833878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789402
    },
    {
        "content": "<p>which is called from <del>two</del> 3 places:</p>",
        "id": 236833945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789417
    },
    {
        "content": "<p><a href=\"https://github.com/blitzerr/rust/blob/49920bc581743d6edb9f82fbff4cbafebc212619/compiler/rustc_trait_selection/src/traits/select/mod.rs#L866-L878\">in <code>evaluate_candidate</code></a>, where we are testing whether a given candiate (e.g., impl) is applicable. Here we also perform all the recursive evaluation of all the obligations that result and only run leak check at the end</p>",
        "id": 236834026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789457
    },
    {
        "content": "<p><a href=\"https://github.com/blitzerr/rust/blob/49920bc581743d6edb9f82fbff4cbafebc212619/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1260-L1266\"><code>evaluate_where_clause</code></a> -- same</p>",
        "id": 236834089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789496
    },
    {
        "content": "<p><a href=\"https://github.com/blitzerr/rust/blob/49920bc581743d6edb9f82fbff4cbafebc212619/compiler/rustc_trait_selection/src/traits/select/mod.rs#L382-L387\"><code>evaluate_root_obligations</code></a> -- same</p>",
        "id": 236834242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789563
    },
    {
        "content": "<p>so the point is this:</p>",
        "id": 236834255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789568
    },
    {
        "content": "<p>if we wanted to do normalization under binders, we totally can i believe</p>",
        "id": 236834561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789693
    },
    {
        "content": "<p>it's actually probably easy</p>",
        "id": 236834593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789712
    },
    {
        "content": "<p>Okay, cool</p>",
        "id": 236834596,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619789713
    },
    {
        "content": "<p>I'm debating if I should just do it right now</p>",
        "id": 236834618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789720
    },
    {
        "content": "<p>or explain it to you :)</p>",
        "id": 236834624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789722
    },
    {
        "content": "<p>if you want, we could hop on a zoom</p>",
        "id": 236834638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789729
    },
    {
        "content": "<p>(and anyone else who's listening :)</p>",
        "id": 236834650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789733
    },
    {
        "content": "<p>The next problem is that we just drop the bound vars in some places</p>",
        "id": 236834659,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619789738
    },
    {
        "content": "<p>I can zoom</p>",
        "id": 236834668,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619789741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/236834659\">said</a>:</p>\n<blockquote>\n<p>The next problem is that we just drop the bound vars in some places</p>\n</blockquote>\n<p>say more?</p>",
        "id": 236834678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789749
    },
    {
        "content": "<p>Well, so.</p>",
        "id": 236834703,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619789761
    },
    {
        "content": "<p>For example</p>",
        "id": 236834714,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619789763
    },
    {
        "content": "<p>Should we zoom? Might be quicker?</p>",
        "id": 236834762,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619789773
    },
    {
        "content": "<p>let's do that</p>",
        "id": 236834812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789793
    },
    {
        "content": "<p>I have a hard stop on the hour</p>",
        "id": 236834831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789799
    },
    {
        "content": "<p>link coming :)</p>",
        "id": 236834871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789816
    },
    {
        "content": "<p><a href=\"https://zoom.us/j/99566645565?pwd=MGc2bGtUY003aml6ZHR5b1pUdGNVQT09\">https://zoom.us/j/99566645565?pwd=MGc2bGtUY003aml6ZHR5b1pUdGNVQT09</a></p>",
        "id": 236834893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619789825
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/rust/tree/normalize-under-binder\">https://github.com/nikomatsakis/rust/tree/normalize-under-binder</a> &lt;-- <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 236839022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619791467
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 236839057,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619791484
    },
    {
        "content": "<p>I like how <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> rust fork is so old it still says \" A work-in-progress programming language; not yet suitable for users \" <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 236850997,
        "sender_full_name": "marmeladema",
        "timestamp": 1619795642
    },
    {
        "content": "<p>yeah :)</p>",
        "id": 236857099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619797782
    },
    {
        "content": "<p>that amuses me</p>",
        "id": 236857116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619797791
    },
    {
        "content": "<p>Ok <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so the most naive implementation of this results in most tests passing, a couple dozen tests failing, and at least one test inifinitely running</p>",
        "id": 236896488,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619814389
    },
    {
        "content": "<blockquote>\n<p>at least one<br>\ni.e. <a href=\"http://issue-83150.rs\">issue-83150.rs</a></p>\n</blockquote>",
        "id": 236896519,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619814409
    },
    {
        "content": "<p>One example:</p>",
        "id": 236896752,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619814535
    },
    {
        "content": "<p>For the <code>iterable.rs</code> test in the <code>generic-associated-types</code> tests</p>",
        "id": 236896782,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619814552
    },
    {
        "content": "<p>I get several <code>the parameter type </code>T<code> may not live long enough</code></p>",
        "id": 236896803,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619814569
    },
    {
        "content": "<p>Because of the <code>where T: 'a</code> bounds on <code>Iter&lt;'a&gt;</code></p>",
        "id": 236896919,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619814611
    },
    {
        "content": "<p>I feel like there's implied bounds that <em>should</em> make this solvable</p>",
        "id": 236897545,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619814898
    },
    {
        "content": "<p>Given that <code>Self</code> is <code>Vec&lt;T&gt;</code></p>",
        "id": 236897560,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619814906
    },
    {
        "content": "<p>And we get passed a <code>&amp;'a self</code></p>",
        "id": 236897605,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619814928
    },
    {
        "content": "<p>(<code>self: &amp;'a Self</code>)</p>",
        "id": 236897640,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619814950
    },
    {
        "content": "<p>So <code>&amp;'a Vec&lt;T&gt;</code></p>",
        "id": 236897709,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619814968
    },
    {
        "content": "<p>Which requires <code>T: 'a</code> for WF</p>",
        "id": 236897715,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619814977
    },
    {
        "content": "<p>Sort of importantly, we <em>can't</em> write <code>where T: 'a</code> on the function because it's a trait impl and the trait doesn't know about <code>T</code></p>",
        "id": 236897784,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619815017
    },
    {
        "content": "<p>Seeing a bunch of </p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: compiler/rustc_trait_selection/src/traits/codegen.rs:78:17: Encountered error `OutputTypeParameterMismatch...`\n</code></pre></div>",
        "id": 236898293,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619815304
    },
    {
        "content": "<p>On the other hand, I <em>am</em> seeing some good things. Like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>-       error[E0277]: the trait bound `for&lt;&#39;b&gt; &lt;(T,) as X&lt;&#39;b, T&gt;&gt;::U: Clone` is not satisfied\n+       error[E0277]: the trait bound `str: Clone` is not satisfied\n2         --&gt; $DIR/hr-associated-type-bound-param-4.rs:13:14\n3          |\n4       LL | trait X&lt;&#39;a, T&gt;\n\n8          |                                    ----- required by this bound in `X`\n9       ...\n10      LL |     type U = str;\n-          |              ^^^ the trait `for&lt;&#39;b&gt; Clone` is not implemented for `&lt;(T,) as X&lt;&#39;b, T&gt;&gt;::U`\n-          |\n-          = help: the following implementations were found:\n-                    &lt;&amp;T as Clone&gt;\n+          |              ^^^ the trait `Clone` is not implemented for `str`\n15\n16      error: aborting due to previous error\n17\n</code></pre></div>",
        "id": 236898457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619815393
    },
    {
        "content": "<p>I.e. we get a better error that <code>str: Clone</code> doesn't hold</p>",
        "id": 236898488,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619815413
    },
    {
        "content": "<p>Shoot. <code>issue-35570</code>. We're now getting a <code>the trait bound </code>(): Trait2&lt;'a&gt;<code> is not satisfied</code> error</p>",
        "id": 236898978,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619815647
    },
    {
        "content": "<p>And...I don't see that impl...</p>",
        "id": 236898985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619815652
    },
    {
        "content": "<p>Ok that's a straight up fix...</p>",
        "id": 236899134,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619815706
    },
    {
        "content": "<p>Okay, so there's a couple bugs that I have to iron out. But it looks like a lot of the test failures are because we are now <em>more correct</em></p>",
        "id": 236899303,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619815794
    },
    {
        "content": "<p>Another one that's just awesome: issue-41366</p>",
        "id": 236899487,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619815849
    },
    {
        "content": "<p>Before we got a couple errors. One like </p>\n<div class=\"codehilite\"><pre><span></span><code>   |     | found signature of `fn(u16) -&gt; _`\n   |     expected signature of `fn(&lt;u32 as T&lt;&#39;x&gt;&gt;::V) -&gt; _`\n</code></pre></div>",
        "id": 236899546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619815883
    },
    {
        "content": "<p>Another like </p>\n<div class=\"codehilite\"><pre><span></span><code>help: the trait `Sized` is not implemented for `&lt;u32 as T&lt;&#39;_&gt;&gt;::V`\n</code></pre></div>",
        "id": 236899573,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619815894
    },
    {
        "content": "<p>But we have an impl like </p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;g&gt; T&lt;&#39;g&gt; for u32 {\n    type V = u16;\n}\n</code></pre></div>",
        "id": 236899630,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619815923
    },
    {
        "content": "<p>So we're now accepting what we arguably <em>should</em> have been accepting</p>",
        "id": 236899688,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619815946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/236896803\">said</a>:</p>\n<blockquote>\n<p>I get several <code>the parameter type </code>T<code> may not live long enough</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you get some time, I would love some thoughts on this specifically</p>",
        "id": 236904375,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619817384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> where's the branch, or did you push commits to my fork?</p>",
        "id": 236949015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619856889
    },
    {
        "content": "<p>I didn't push anything yet. Its basically the simple way we initially talked about</p>",
        "id": 236961369,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619870157
    },
    {
        "content": "<p>Bound vars -&gt; placeholders. Then back</p>",
        "id": 236961424,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619870181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/236897545\">said</a>:</p>\n<blockquote>\n<p>I feel like there's implied bounds that <em>should</em> make this solvable</p>\n</blockquote>\n<p>This is actually super related to <a href=\"https://github.com/rust-lang/chalk/issues/556\">chalk#556</a></p>",
        "id": 237074795,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619982957
    },
    {
        "content": "<p>There, for something like <code>for&lt;'a, T&gt; { fn(&amp;'a Foo&lt;T&gt;) }</code> we were generating a <code>WellFormed(&amp;'a Foo&lt;T&gt;)</code> clause</p>",
        "id": 237075099,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619983177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> can you push the commits?</p>",
        "id": 237159662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048237
    },
    {
        "content": "<p>Yeah</p>",
        "id": 237159691,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048243
    },
    {
        "content": "<p>It'd e helpful for me to see the code / reproduce the problems</p>",
        "id": 237159750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048260
    },
    {
        "content": "<p>Do you want to zoom again or no? I have a hard cutoff at 10:00 if we do</p>",
        "id": 237159760,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048265
    },
    {
        "content": "<p>Let's stick with Zulip</p>",
        "id": 237159876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048320
    },
    {
        "content": "<p>better record then</p>",
        "id": 237159914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048339
    },
    {
        "content": "<p>I'm trying to find my checkout of that branch...</p>",
        "id": 237159934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048353
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 237159937,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048355
    },
    {
        "content": "<p><a href=\"https://github.com/jackh726/rust/tree/assoc-type-norm\">https://github.com/jackh726/rust/tree/assoc-type-norm</a></p>",
        "id": 237159945,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048360
    },
    {
        "content": "<p>While you're getting set up, I can briefly go over <em>one</em> of the issues I'm running into</p>",
        "id": 237160060,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048408
    },
    {
        "content": "<p>Specifically, things like <code>the parameter type T may not live long enough</code></p>",
        "id": 237160090,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048426
    },
    {
        "content": "<p>In the branch, there's an <code>issue-76826-2.rs</code> file in the generic-associated-types test dir</p>",
        "id": 237160181,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048474
    },
    {
        "content": "<p>Which we can use as a repro</p>",
        "id": 237160237,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048492
    },
    {
        "content": "<p>K</p>",
        "id": 237160258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048502
    },
    {
        "content": "<p>Importantly, there's an associated type on <code>Iter</code> defined as <code>type Item&lt;'a&gt; where Self: 'a;</code></p>",
        "id": 237160277,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048515
    },
    {
        "content": "<p>and a function with a return value of <code>Option&lt;Self::Item&lt;'a&gt;&gt;;</code></p>",
        "id": 237160298,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048527
    },
    {
        "content": "<p>(this is actually pretting similar to the <code>StreamingIterator</code> test)</p>",
        "id": 237160323,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048545
    },
    {
        "content": "<p>yes</p>",
        "id": 237160328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048547
    },
    {
        "content": "<p>what is the backtrace of the error?</p>",
        "id": 237160351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048561
    },
    {
        "content": "<p>There's no backtrace?</p>",
        "id": 237160401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048591
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0311]: the parameter type `T` may not live long enough\n  --&gt; /home/hueyj/temp/rust/rust/src/test/ui/generic-associated-types/issue-76826-2.rs:18:5\n   |\nLL |   impl&lt;T&gt; Iter for Windows&lt;T&gt; {\n   |        - help: consider adding an explicit lifetime bound...: `T: &#39;a`\n...\nLL | /     fn next&lt;&#39;a&gt;(&amp;&#39;a mut self) -&gt; Option&lt;Self::Item&lt;&#39;a&gt;&gt; {\nLL | |         todo!()\nLL | |     }\n   | |_____^ ...so that the type `Windows&lt;T&gt;` will meet its required lifetime bounds\n\nerror[E0311]: the parameter type `T` may not live long enough\n  --&gt; /home/hueyj/temp/rust/rust/src/test/ui/generic-associated-types/issue-76826-2.rs:18:17\n   |\nLL | impl&lt;T&gt; Iter for Windows&lt;T&gt; {\n   |      - help: consider adding an explicit lifetime bound...: `T: &#39;a`\n...\nLL |     fn next&lt;&#39;a&gt;(&amp;&#39;a mut self) -&gt; Option&lt;Self::Item&lt;&#39;a&gt;&gt; {\n   |                 ^^^^^^^^^^^^ ...so that the type `Windows&lt;T&gt;` will meet its required lifetime bounds\n</code></pre></div>",
        "id": 237160477,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048607
    },
    {
        "content": "<p>Those are the full errors</p>",
        "id": 237160496,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048613
    },
    {
        "content": "<p>try <code>-Ztreat-err-as-bug</code> and <code>RUSTC_BACKTRACE=1</code> :)</p>",
        "id": 237160527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048628
    },
    {
        "content": "<p>but that helps</p>",
        "id": 237160535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048629
    },
    {
        "content": "<p>Well, I can continue</p>",
        "id": 237160558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048640
    },
    {
        "content": "<p>doing a build now</p>",
        "id": 237160561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048641
    },
    {
        "content": "<p>And elaborate a bit more on why this happens</p>",
        "id": 237160589,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048651
    },
    {
        "content": "<p>ok</p>",
        "id": 237160636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048675
    },
    {
        "content": "<p>So, the issue actually occurs when we type check the function on the <code>impl&lt;T&gt; Iter for Windows&lt;T&gt;</code></p>",
        "id": 237160659,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048688
    },
    {
        "content": "<p>When we do WF checking</p>",
        "id": 237160712,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048705
    },
    {
        "content": "<p>yep</p>",
        "id": 237160744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048720
    },
    {
        "content": "<p>So, in the branch, I've basically implemented replacing bound vars to placeholders</p>",
        "id": 237160824,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048746
    },
    {
        "content": "<p>and then substituting back after</p>",
        "id": 237160835,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048754
    },
    {
        "content": "<p>without the fanciness of inference vars yet</p>",
        "id": 237160849,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048763
    },
    {
        "content": "<p>But that wouldn't matter here</p>",
        "id": 237160872,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048776
    },
    {
        "content": "<p>Anyways</p>",
        "id": 237160883,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048780
    },
    {
        "content": "<p>it sounds like an implied bounds problem</p>",
        "id": 237160942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048798
    },
    {
        "content": "<p>yes :)</p>",
        "id": 237160955,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048803
    },
    {
        "content": "<p>i wanted to know the backtrace so i could take a quick look at the code in question</p>",
        "id": 237160974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048816
    },
    {
        "content": "<p>By the time we get to <code>Self::Iter&lt;'a&gt;</code> in <code>AssocTypeNormalizer</code></p>",
        "id": 237160979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048819
    },
    {
        "content": "<p>but you're saying it's from the wfcheck</p>",
        "id": 237160984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048821
    },
    {
        "content": "<p>Yes</p>",
        "id": 237161001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048833
    },
    {
        "content": "<p>Basically, the WF rules of <code>Iter&lt;'a&gt;</code> require <code>Self: 'a</code></p>",
        "id": 237161220,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048929
    },
    {
        "content": "<p>Which we should be able to get from the function args but aren't?</p>",
        "id": 237161252,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620048948
    },
    {
        "content": "<p>yes</p>",
        "id": 237161272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048959
    },
    {
        "content": "<p>there is some logic that should handle this</p>",
        "id": 237161307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048964
    },
    {
        "content": "<p>I'm not sure whether it's just not being applied in this case or something else</p>",
        "id": 237161329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620048971
    },
    {
        "content": "<p>I definitely saw the bit of code where we add the implied bounds</p>",
        "id": 237161457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620049037
    },
    {
        "content": "<p>forget where that was</p>",
        "id": 237161471,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620049041
    },
    {
        "content": "<p><a href=\"https://github.com/jackh726/rust/blob/4a9f6b390ac35869356c51a91f274b366757e6c7/compiler/rustc_typeck/src/check/wfcheck.rs#L903\">https://github.com/jackh726/rust/blob/4a9f6b390ac35869356c51a91f274b366757e6c7/compiler/rustc_typeck/src/check/wfcheck.rs#L903</a></p>",
        "id": 237161522,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620049062
    },
    {
        "content": "<p>yeah, curious</p>",
        "id": 237161606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620049084
    },
    {
        "content": "<p>let me poke a bit to bring this back in cache</p>",
        "id": 237161626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620049096
    },
    {
        "content": "<p>the build is done now</p>",
        "id": 237161640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620049100
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 237161682,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620049121
    },
    {
        "content": "<p>Oh so I might be wrong...</p>",
        "id": 237161769,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620049175
    },
    {
        "content": "<p>Maybe that obligation is being generated from the <code>&amp;'a mut Self</code></p>",
        "id": 237161810,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620049194
    },
    {
        "content": "<p>err idk</p>",
        "id": 237161954,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620049251
    },
    {
        "content": "<p>Woah <code>-Ztreat-err-as-bug</code> is so helpful</p>",
        "id": 237162460,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620049476
    },
    {
        "content": "<p>it is very useful</p>",
        "id": 237162557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620049522
    },
    {
        "content": "<p>the backtrace is nice, but also just not having a bunch of unrelated logs</p>",
        "id": 237162750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620049603
    },
    {
        "content": "<p>Ok I didn't appreciate fully just how complicated the implied outlives bounds code is...</p>",
        "id": 237164045,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050136
    },
    {
        "content": "<p>/me hides</p>",
        "id": 237164244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050222
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>├─2ms DEBUG rustc_infer::infer::outlives::env add_outlives_bounds: outlives_bound=RegionSubParam(ReFree(DefId(0:15 ~ issue_76826_2[317d]::{impl#0}::next), BrNamed(DefId(0:16 ~ issue_76826_2[317d]::{impl#0}::next::&#39;a), &#39;a)), T/#0)\n</code></pre></div>",
        "id": 237164341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050267
    },
    {
        "content": "<p>so that is in the logs</p>",
        "id": 237164347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050270
    },
    {
        "content": "<p>The obligation that we probably don't satisfy is the placeholder version?</p>",
        "id": 237164489,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050324
    },
    {
        "content": "<p>If I had to guess</p>",
        "id": 237164497,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050328
    },
    {
        "content": "<p>ah wait</p>",
        "id": 237164569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050356
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>verify_generic_bound(T/#0, RePlaceholder(Placeholder { universe: U1, name: BrNamed(DefId(0:16 ~ issue_76826_2[317d]:: {impl#0}::next::&#39;a), &#39;a) })\n</code></pre></div>",
        "id": 237164601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050370
    },
    {
        "content": "<p>what is \"the placeholder version\"</p>",
        "id": 237164620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050378
    },
    {
        "content": "<p>In <code>project.rs</code></p>",
        "id": 237164644,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050388
    },
    {
        "content": "<p>When we convert bound vars to placeholders</p>",
        "id": 237164663,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050396
    },
    {
        "content": "<p>why is this a bound variable?</p>",
        "id": 237164746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050417
    },
    {
        "content": "<p>...because it's late-bound in the fn sig?</p>",
        "id": 237164760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050423
    },
    {
        "content": "<p>yes</p>",
        "id": 237164794,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050439
    },
    {
        "content": "<p>seems wrong</p>",
        "id": 237164851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050454
    },
    {
        "content": "<p>something is not lining up</p>",
        "id": 237164866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050458
    },
    {
        "content": "<p>How?</p>",
        "id": 237164875,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050460
    },
    {
        "content": "<p>the same `'a' should not be bound in one place</p>",
        "id": 237164902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050471
    },
    {
        "content": "<p>but free in the <code>add_outlives_bound</code> logic</p>",
        "id": 237164929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050482
    },
    {
        "content": "<p>I agree?</p>",
        "id": 237165070,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050526
    },
    {
        "content": "<p>Unless the <code>add_outlives_bound</code> logic is intended to support the function bodies?</p>",
        "id": 237165118,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050541
    },
    {
        "content": "<p>Which use <code>ReFree</code></p>",
        "id": 237165134,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050546
    },
    {
        "content": "<p>where is the projection taking place</p>",
        "id": 237165168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050558
    },
    {
        "content": "<p>(side note, why <code>ReFree</code> and not <code>RePlaceholder</code>)</p>",
        "id": 237165178,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/237165118\">said</a>:</p>\n<blockquote>\n<p>Unless the <code>add_outlives_bound</code> logic is intended to support the function bodies?</p>\n</blockquote>\n<p>it is</p>",
        "id": 237165187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/237165168\">said</a>:</p>\n<blockquote>\n<p>where is the projection taking place</p>\n</blockquote>\n<p>elaborate?</p>",
        "id": 237165207,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050577
    },
    {
        "content": "<p>it's just... that is also ok for this wf checking I think</p>",
        "id": 237165217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050582
    },
    {
        "content": "<p>I'm not familiar with this code at all, so not really sure where to begin</p>",
        "id": 237165517,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050699
    },
    {
        "content": "<p>(with debugging)</p>",
        "id": 237165535,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050706
    },
    {
        "content": "<p>nm, I'm reading the logs</p>",
        "id": 237165634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050747
    },
    {
        "content": "<p>answering my own questions :)</p>",
        "id": 237165642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050752
    },
    {
        "content": "<p>I was trying to figure out where the normalization was taking place; the answer seems to be \"a few too many places\"</p>",
        "id": 237166087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050946
    },
    {
        "content": "<p>trying a tweak</p>",
        "id": 237166091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620050948
    },
    {
        "content": "<p>Yeah, we try to normalize in a bunch of places</p>",
        "id": 237166150,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620050986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/237166091\">said</a>:</p>\n<blockquote>\n<p>trying a tweak</p>\n</blockquote>\n<p>what tweak?</p>",
        "id": 237166948,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051330
    },
    {
        "content": "<p>still poking</p>",
        "id": 237167014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051362
    },
    {
        "content": "<p>I'll push my current diff to my branch</p>",
        "id": 237167062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051367
    },
    {
        "content": "<p>I want to change gears to look at async fn in traits blockers -- oh, I geuss this kind of is one :)</p>",
        "id": 237167110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051391
    },
    {
        "content": "<p>Yeah, I think it is</p>",
        "id": 237167135,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051404
    },
    {
        "content": "<p>I personally think this is a blocker for GAT stabilization</p>",
        "id": 237167165,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051420
    },
    {
        "content": "<p>now that I realize how close we are to closing this ICE, I very much want to do so</p>",
        "id": 237167203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051436
    },
    {
        "content": "<p>But, possibly not given that other ICEs of this type happen</p>",
        "id": 237167209,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051438
    },
    {
        "content": "<p>I dont' consider it a GAT-specific problem</p>",
        "id": 237167233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051449
    },
    {
        "content": "<p>but maybe it arises more often with GATs</p>",
        "id": 237167239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051453
    },
    {
        "content": "<p>Yeah, I think that's the important bit</p>",
        "id": 237167266,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051468
    },
    {
        "content": "<p>That it will happen more often with GATs</p>",
        "id": 237167290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051476
    },
    {
        "content": "<p>(at least in my mind it would)</p>",
        "id": 237167350,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051487
    },
    {
        "content": "<p>I do want to look at the incremental bug too though</p>",
        "id": 237167391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051505
    },
    {
        "content": "<p>anyway, I pushed a commit</p>",
        "id": 237167412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051514
    },
    {
        "content": "<p>I also added some more debug so let me see what those say</p>",
        "id": 237167424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051519
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 237167536,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051575
    },
    {
        "content": "<p>I also can <em>probably</em> figure this out on my own</p>",
        "id": 237167553,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051584
    },
    {
        "content": "<p>my branch: normalize-under-binder</p>",
        "id": 237167565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051589
    },
    {
        "content": "<p>Just might take a bit for me to completely debug</p>",
        "id": 237167580,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051595
    },
    {
        "content": "<p>i.e. if you want to prioritize other things, that's understandable</p>",
        "id": 237167701,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051639
    },
    {
        "content": "<p>(I just wasn't sure if you were going to have some immediate thoughts)</p>",
        "id": 237167734,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051653
    },
    {
        "content": "<p>I'm not sure I undersatnd what the <code>debug!(?foo)</code> notation does</p>",
        "id": 237167823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051694
    },
    {
        "content": "<p>It just prints out <code>foo</code></p>",
        "id": 237167856,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051707
    },
    {
        "content": "<p>I expect it to be the equivalent of <code>debug!(\"foo={:?}\", foo)</code></p>",
        "id": 237167873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051716
    },
    {
        "content": "<p>Yes</p>",
        "id": 237167881,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051720
    },
    {
        "content": "<p>but I guess it is more like <code>debug!(\"{:?}\", foo)</code>?</p>",
        "id": 237167893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051724
    },
    {
        "content": "<p>except you also can do more fancy things with tracing too</p>",
        "id": 237167948,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051737
    },
    {
        "content": "<p>i'm not seeing it in the output either way; may be that I have to explicit revert in vscode though</p>",
        "id": 237167970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051745
    },
    {
        "content": "<p>huh, weird</p>",
        "id": 237168014,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051767
    },
    {
        "content": "<p>It should be like <code>foo=...</code></p>",
        "id": 237168044,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620051785
    },
    {
        "content": "<p>oh, wait, it's there</p>",
        "id": 237168054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051789
    },
    {
        "content": "<p>it's just much further down than I expected :)</p>",
        "id": 237168076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620051799
    },
    {
        "content": "<p>(brb)</p>",
        "id": 237169069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620052206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> that test passes given the latest commits on my branch</p>",
        "id": 237255738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620091893
    },
    {
        "content": "<p>the main change I made is doing normalization <em>after</em> liberation</p>",
        "id": 237255751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620091905
    },
    {
        "content": "<p>that said, there is some funny business in that <code>compare_method_receiver</code> code</p>",
        "id": 237255764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620091919
    },
    {
        "content": "<p>Woah you're on late</p>",
        "id": 237255765,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620091921
    },
    {
        "content": "<p>Yes, that's what I found not too long ago</p>",
        "id": 237255810,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620091935
    },
    {
        "content": "<p><a href=\"https://github.com/blitzerr/rust/blob/c5a8787814200846dad94b7e740c83f38d3d8c9a/compiler/rustc_typeck/src/check/wfcheck.rs#L1100-L1103\">this logic looks suspicious to me</a></p>",
        "id": 237255830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620091953
    },
    {
        "content": "<p>albeit probably harmless</p>",
        "id": 237255835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620091957
    },
    {
        "content": "<p>I don't know that <code>self_ty</code> would ever have any escaping parameters</p>",
        "id": 237255842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620091969
    },
    {
        "content": "<p>unless you just made changes to <code>check_method_receiver</code></p>",
        "id": 237255843,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620091971
    },
    {
        "content": "<p>I made some edits but mainly reordering things</p>",
        "id": 237255868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620091986
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/c5a8787814200846dad94b7e740c83f38d3d8c9a/compiler/rustc_typeck/src/check/wfcheck.rs#L1095-L1097\">that code looks suspicious</a></p>",
        "id": 237255980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620092049
    },
    {
        "content": "<p>The branch I pulled didn't have the normalization moved in that function</p>",
        "id": 237256015,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620092058
    },
    {
        "content": "<p>oops</p>",
        "id": 237256018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620092058
    },
    {
        "content": "<p>not suspicious</p>",
        "id": 237256021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620092060
    },
    {
        "content": "<p>I just pushed a commit</p>",
        "id": 237256028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620092068
    },
    {
        "content": "<p>like 2 minutes ago</p>",
        "id": 237256031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620092070
    },
    {
        "content": "<p>I think that reordering was the main fix</p>",
        "id": 237256039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620092086
    },
    {
        "content": "<p>oh okay</p>",
        "id": 237256040,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620092089
    },
    {
        "content": "<p>bad news is the full test file fails</p>",
        "id": 237256045,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620092098
    },
    {
        "content": "<p>(not the -2 version)</p>",
        "id": 237256052,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620092102
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_infer::infer::canonical::query_response true_errors = [\n    FulfillmentError(Obligation(predicate=Binder(TraitPredicate(&lt;[closure@/home/hueyj/temp/rust/rust/src/test/ui/generic-associated-types/issue-76826.rs:44:19: 44:50] as std::ops::FnMut&lt;(&lt;Windows&lt;i32&gt; as Iter&gt;::Item&lt;&#39;a&gt;,)&gt;&gt;), [Region(BrNamed(DefId(0:10 ~ issue_76826[317d]::Iter::for_each::&#39;a), &#39;a))]), depth=0),OutputTypeParameterMismatch(Binder(&lt;[closure@/home/hueyj/temp/rust/rust/src/test/ui/generic-associated-types/issue-76826.rs:44:19: 44:50] as std::ops::FnMut&lt;(&amp;mut [i32],)&gt;&gt;, [Region(BrAnon(0))]), Binder(&lt;[closure@/home/hueyj/temp/rust/rust/src/test/ui/generic-associated-types/issue-76826.rs:44:19: 44:50] as std::ops::FnMut&lt;(&lt;Windows&lt;i32&gt; as Iter&gt;::Item&lt;&#39;a&gt;,)&gt;&gt;, [Region(BrNamed(DefId(0:10 ~ issue_76826[317d]::Iter::for_each::&#39;a), &#39;a))]), Sorts(ExpectedFound { expected: &lt;Windows&lt;i32&gt; as Iter&gt;::Item&lt;&#39;a&gt;, found: &amp;mut [i32] }))),\n]\nDEBUG rustc_infer::infer::canonical::query_response make_query_response: true_errors=[\n    FulfillmentError(Obligation(predicate=Binder(TraitPredicate(&lt;[closure@/home/hueyj/temp/rust/rust/src/test/ui/generic-associated-types/issue-76826.rs:44:19: 44:50] as std::ops::FnMut&lt;(&lt;Windows&lt;i32&gt; as Iter&gt;::Item&lt;&#39;a&gt;,)&gt;&gt;), [Region(BrNamed(DefId(0:10 ~ issue_76826[317d]::Iter::for_each::&#39;a), &#39;a))]), depth=0),OutputTypeParameterMismatch(Binder(&lt;[closure@/home/hueyj/temp/rust/rust/src/test/ui/generic-associated-types/issue-76826.rs:44:19: 44:50] as std::ops::FnMut&lt;(&amp;mut [i32],)&gt;&gt;, [Region(BrAnon(0))]), Binder(&lt;[closure@/home/hueyj/temp/rust/rust/src/test/ui/generic-associated-types/issue-76826.rs:44:19: 44:50] as std::ops::FnMut&lt;(&lt;Windows&lt;i32&gt; as Iter&gt;::Item&lt;&#39;a&gt;,)&gt;&gt;, [Region(BrNamed(DefId(0:10 ~ issue_76826[317d]::Iter::for_each::&#39;a), &#39;a))]), Sorts(ExpectedFound { expected: &lt;Windows&lt;i32&gt; as Iter&gt;::Item&lt;&#39;a&gt;, found: &amp;mut [i32] }))),\n]\nerror: internal compiler error: broken MIR in DefId(0:25 ~ issue_76826[317d]::main) (NoSolution): could not prove Binder(TraitPredicate(&lt;[closure@/home/hueyj/temp/rust/rust/src/test/ui/generic-associated-types/issue-76826.rs:44:19: 44:50] as std::ops::FnMut&lt;(&lt;Windows&lt;i32&gt; as Iter&gt;::Item&lt;&#39;a&gt;,)&gt;&gt;), [Region(BrNamed(DefId(0:10 ~ issue_76826[317d]::Iter::for_each::&#39;a), &#39;a))])\n</code></pre></div>",
        "id": 237256082,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620092125
    },
    {
        "content": "<p>true :)</p>",
        "id": 237256085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620092127
    },
    {
        "content": "<p>TIL about about <code>rustc_trait_selection::traits::query::normalize::QueryNormalizer</code> and how similiar it is to <code>AssocTypeNormalizer</code></p>",
        "id": 237345748,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620141886
    },
    {
        "content": "<p>Oh that calls <code>rustc_traits::normalize_projection_ty</code> which calls <code>rustc_trait_selection::traits::project::normalize_projection_type</code></p>",
        "id": 237349321,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620143207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> why are there so many ways to normalize types!?</p>",
        "id": 237349924,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620143405
    },
    {
        "content": "<p>lol</p>",
        "id": 237466777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620207327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> have you pushed latest commits?</p>",
        "id": 237466785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620207333
    },
    {
        "content": "<p>Let me do that...</p>",
        "id": 237487127,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620218093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/jackh726/rust/tree/assoc-type-norm\">https://github.com/jackh726/rust/tree/assoc-type-norm</a></p>",
        "id": 237487427,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620218249
    },
    {
        "content": "<p>There's still about a couple dozen tests failing. Most because output has changed.</p>",
        "id": 237487602,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620218322
    },
    {
        "content": "<p>Was going through then and deciding if the changes were correct or not</p>",
        "id": 237487665,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620218361
    },
    {
        "content": "<p>The biggest thing that I saw consistently and the span for \"this type doesn't implement this trait\" is now on just the function name instead of the whole function (I think)</p>",
        "id": 237487875,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620218444
    },
    {
        "content": "<p>There's also one or two tests that I've had to ignore since they never complete. So have to figure out why and fix that</p>",
        "id": 237487986,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620218503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ok I'm going to poke at it</p>",
        "id": 237491057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620219854
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, one other sort of important change is that if we have <code>&lt;T as Trait2&lt;'y, 'z&gt;&gt;::Foo</code> (where <code>'y</code> and <code>'z</code> are bound vars), before we didn't get any errors if <code>T</code> doesn't implement <code>Trait2&lt;'y, 'z&gt;</code>; now we do</p>",
        "id": 237493891,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221014
    },
    {
        "content": "<p>interesting</p>",
        "id": 237493929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221035
    },
    {
        "content": "<p>expected, but interesting</p>",
        "id": 237493943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221041
    },
    {
        "content": "<p>interesting that you mention it, mostly -- where did it come up?</p>",
        "id": 237494008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221058
    },
    {
        "content": "<p>I'm running <code>x.py test</code> now on your branch</p>",
        "id": 237494033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221074
    },
    {
        "content": "<p>I'm sure there are going to be some tidy complaints :)</p>",
        "id": 237494271,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221163
    },
    {
        "content": "<p>Several tests have this</p>",
        "id": 237494315,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221174
    },
    {
        "content": "<p>See <code>ui/regions/regions-implied-bounds-projection-gap-hr-1.rs</code></p>",
        "id": 237494407,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221214
    },
    {
        "content": "<p>I wonder how much real code would be affected</p>",
        "id": 237494428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/237494407\">said</a>:</p>\n<blockquote>\n<p>See <code>ui/regions/regions-implied-bounds-projection-gap-hr-1.rs</code></p>\n</blockquote>\n<p>Actually, I know there's a simpler example, just have to find</p>",
        "id": 237494519,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221257
    },
    {
        "content": "<p>I was only going to bring up that test because there we <em>want</em> to test a specific lifetime outlives error. But it gets masked by the trait not implemented error</p>",
        "id": 237494635,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/237494428\">said</a>:</p>\n<blockquote>\n<p>I wonder how much real code would be affected</p>\n</blockquote>\n<p>I'm not sure. And certainly this is probably something we <em>want</em>. But probably means we should do a crater run before merge.</p>",
        "id": 237494784,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221362
    },
    {
        "content": "<p>Here is an example of the span change I mentioned before:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>4   LL |     fn uhoh&lt;U:Get&gt;(&amp;self, foo: U, bar: &lt;Self as Get&gt;::Value) {}\n<span class=\"gd\">-      |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`</span>\n<span class=\"gi\">+      |        ^^^^ the trait `Get` is not implemented for `Self`</span>\n</code></pre></div>",
        "id": 237495275,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221541
    },
    {
        "content": "<p>ok</p>",
        "id": 237495452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221625
    },
    {
        "content": "<p>that looks...better than before, tbh</p>",
        "id": 237495466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221633
    },
    {
        "content": "<p>I think they both are not super helpful</p>",
        "id": 237495536,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221649
    },
    {
        "content": "<p>I expect it occurs because the point of error is different</p>",
        "id": 237495542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221650
    },
    {
        "content": "<p>Yeah, probably</p>",
        "id": 237495579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221662
    },
    {
        "content": "<p>I honestly think this diagnostic change is \"fine\"</p>",
        "id": 237495615,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221683
    },
    {
        "content": "<p>Okay so <code>issue-35570.rs</code> is interesting</p>",
        "id": 237495630,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221691
    },
    {
        "content": "<p>Since it's <code>check-pass</code> but fails with these changes</p>",
        "id": 237495671,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221710
    },
    {
        "content": "<p>Because of \"error[E0277]: the trait bound <code>(): Trait2&lt;'a&gt;</code> is not satisfied\"</p>",
        "id": 237495711,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221725
    },
    {
        "content": "<p>how do you skip tidy when running tests??</p>",
        "id": 237495815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221766
    },
    {
        "content": "<p>I guess <code>x.py test src/test/ui</code></p>",
        "id": 237495829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221776
    },
    {
        "content": "<p>but I would like another choice</p>",
        "id": 237495849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221781
    },
    {
        "content": "<p>I just do that, yeah</p>",
        "id": 237495891,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221807
    },
    {
        "content": "<p>I think there's a specific way to ignore tidy</p>",
        "id": 237495905,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221814
    },
    {
        "content": "<p>I thought so but I can't find it</p>",
        "id": 237496061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221872
    },
    {
        "content": "<p>annoying</p>",
        "id": 237496063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221873
    },
    {
        "content": "<p>not a big deal :)</p>",
        "id": 237496105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620221884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/237495711\">said</a>:</p>\n<blockquote>\n<p>Because of \"error[E0277]: the trait bound <code>(): Trait2&lt;'a&gt;</code> is not satisfied\"</p>\n</blockquote>\n<p>For tests like these, I'm basically going one by one to decide if the intention of the test was to actually check something or to i.e. not ICE</p>",
        "id": 237496292,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221970
    },
    {
        "content": "<p>In <em>that</em> case, it was just to not ICE</p>",
        "id": 237496311,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620221978
    },
    {
        "content": "<p>Output of <code>hr-associated-type-bound-param-6.rs</code> looks wrong now...</p>",
        "id": 237496849,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222211
    },
    {
        "content": "<p>\"the trait bound <code>T: X&lt;'b, T&gt;</code> is not satisfied\"</p>",
        "id": 237496870,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222223
    },
    {
        "content": "<p>Before it was \"the trait bound <code>for&lt;'b&gt; T: X&lt;'b, T&gt;</code> is not satisfied\"</p>",
        "id": 237496909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222240
    },
    {
        "content": "<p><code>issue-44005.rs</code> is interesting</p>",
        "id": 237498400,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222846
    },
    {
        "content": "<p>\"error: implementation of <code>Foo</code> is not general enough\"</p>",
        "id": 237498430,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222860
    },
    {
        "content": "<p>There is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237498491,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222888
    },
    {
        "content": "<p>But the bounds required are <code>T: for&lt;'a&gt; Foo&lt;'a&gt;</code></p>",
        "id": 237498555,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222913
    },
    {
        "content": "<p>Where the <code>T</code> we want to pass there is <code>&amp;i32</code></p>",
        "id": 237498618,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> still around?</p>",
        "id": 237498650,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620222959
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/44005#issuecomment-326413826\">https://github.com/rust-lang/rust/issues/44005#issuecomment-326413826</a></p>\n<blockquote>\n<p>I've not dug too deeply here. I do expect this would be addressed by the work I'm doing on reworking normalization, which will enable (among other things) normalizing under binders.</p>\n</blockquote>\n<p>How fitting</p>",
        "id": 237498845,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620223020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/237498430\">said</a>:</p>\n<blockquote>\n<p>\"error: implementation of <code>Foo</code> is not general enough\"</p>\n</blockquote>\n<p>Similiar output with <code>issue-36139-normalize-closure-sig.rs</code></p>",
        "id": 237499577,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620223288
    },
    {
        "content": "<p><code>issue-27901.rs</code>:<br>\n\"non-primitive cast: <code>for&lt;'s&gt; fn(&amp;'s str) -&gt; (&amp;'s str, &lt;&amp;'s str as Stream&gt;::Item) {f}</code> as <code>for&lt;'t&gt; fn(&amp;'t str) -&gt; (&amp;'t str, &lt;&amp;'t str as Stream&gt;::Item)</code>\"</p>",
        "id": 237499961,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620223428
    },
    {
        "content": "<p><code>hr-associated-type-projection-1.rs</code> is weird. We were getting something like<br>\n\"the trait bound <code>&lt;T as UnsafeCopy&lt;'b, T&gt;&gt;::Item: Deref</code> is not satisfied\"</p>",
        "id": 237502572,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620224400
    },
    {
        "content": "<p>But now we're getting \"type mismatch resolving <code>&lt;T as Deref&gt;::Target == T</code>\"</p>",
        "id": 237502646,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620224412
    },
    {
        "content": "<p>And I think it's because <code>&lt;Self as UnsafeCopy&lt;'b, T&gt;&gt;::Item</code> is getting normalized sooner, so we end up with a bound <code>for&lt;'b&gt; T: std::ops::Deref&lt;Target = T&gt;</code></p>",
        "id": 237502829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620224473
    },
    {
        "content": "<p>Okay so....good news</p>",
        "id": 237503443,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620224704
    },
    {
        "content": "<p>I've gone through all the failing tests and triaged them</p>",
        "id": 237503485,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620224722
    },
    {
        "content": "<p>It looks like 5 of them now are \"wrong\"</p>",
        "id": 237503505,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620224732
    },
    {
        "content": "<p>ui/associated-types/hr-associated-type-bound-param-6.rs<br>\n-   error[E0277]: the trait bound <code>for&lt;'b&gt; T: X&lt;'b, T&gt;</code> is not satisfied<br>\n+   error[E0277]: the trait bound <code>T: X&lt;'b, T&gt;</code> is not satisfied</p>\n<p>ui/issues/issue-44005.rs<br>\nui/issues/issue-36139-normalize-closure-sig.rs</p>\n<ul>\n<li>error: implementation of <code>...</code> is not general enough</li>\n</ul>\n<p>ui/issues/issue-27901.rs</p>\n<ul>\n<li>error[E0605]: non-primitive cast</li>\n</ul>\n<p>ui/associated-types/hr-associated-type-projection-1.rs ??<br>\n-   error[E0277]: the trait bound <code>&lt;T as UnsafeCopy&lt;'b, T&gt;&gt;::Item: Deref</code> is not satisfied<br>\n+   error[E0271]: type mismatch resolving <code>&lt;T as Deref&gt;::Target == T</code></p>",
        "id": 237503518,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620224737
    },
    {
        "content": "<p>Plus the 2 ignored tests</p>",
        "id": 237503563,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620224758
    },
    {
        "content": "<p>But, other than that, things look better</p>",
        "id": 237503666,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620224784
    },
    {
        "content": "<p>I still should try to implement the \"try to normalize to an inference variable, then quantify the bound vars over the new placeholders when the normalized type is fully known and set the inference var to that\"</p>",
        "id": 237503840,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620224866
    },
    {
        "content": "<p>But it might not be necessary?</p>",
        "id": 237503873,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620224878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> maybe if you get some time, take a look at those tests?</p>",
        "id": 237503946,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620224896
    },
    {
        "content": "<p>I've gotta call it for now :)</p>",
        "id": 237503969,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620224909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> will look later!</p>",
        "id": 237521696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620230773
    },
    {
        "content": "<p>Okay I have no clue what's going on with <code>issue-44005</code></p>",
        "id": 237862687,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409298
    },
    {
        "content": "<p>The issue thread had someone comment that they're still getting an error</p>",
        "id": 237862783,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409330
    },
    {
        "content": "<p>And I pasted the code into the playground, and it fails <em>sometimes</em>?</p>",
        "id": 237862830,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409349
    },
    {
        "content": "<p>Like, I've seen it fail and pass</p>",
        "id": 237862846,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409355
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>internal compiler error: compiler/rustc_trait_selection/src/traits/codegen.rs:78:17: Encountered error `OutputTypeParameterMismatch(Binder(&lt;[closure@src/lib.rs:25:19: 25:27] as std::ops::Fn&lt;(&lt;&amp;i32 as Foo&lt;&#39;_&gt;&gt;::Bar,)&gt;&gt;), Binder(&lt;[closure@src/lib.rs:25:19: 25:27] as std::ops::Fn&lt;(&amp;i32,)&gt;&gt;), Sorts(ExpectedFound { expected: &amp;i32, found: &lt;&amp;i32 as Foo&lt;&#39;_&gt;&gt;::Bar }))` selecting `Binder(&lt;[closure@src/lib.rs:25:19: 25:27] as std::ops::Fn&lt;(&amp;i32,)&gt;&gt;)` during codegen\n</code></pre></div>",
        "id": 237862944,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409396
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> Finished dev [unoptimized + debuginfo] target(s) in 3.48s\n     Running `target/debug/playground`\n</code></pre></div>",
        "id": 237863028,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409436
    },
    {
        "content": "<p>Something is really weird here</p>",
        "id": 237863089,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409450
    },
    {
        "content": "<p>Okay, so <em>running</em> the code passes, but <em>building</em> it fails</p>",
        "id": 237863182,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409495
    },
    {
        "content": "<p>And yep, adding</p>\n<div class=\"codehilite\"><pre><span></span><code>    catalyst(&amp;0);\n</code></pre></div>\n<p>to <code>main</code> causes running to fail to</p>",
        "id": 237863306,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409545
    },
    {
        "content": "<p>That said, I don't think this test should pass</p>",
        "id": 237863359,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409564
    },
    {
        "content": "<p>We have <code>F: for&lt;'a&gt; Fn(&lt;T as Foo&lt;'a&gt;&gt;::Bar)</code> bound on <code>uncallable</code></p>",
        "id": 237863458,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409607
    },
    {
        "content": "<p>And an impl:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;a, &#39;b, T: &#39;a&gt; Foo&lt;&#39;a&gt; for &amp;&#39;b T {\n    type Bar = &amp;&#39;a T;\n}\n</code></pre></div>",
        "id": 237863506,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409626
    },
    {
        "content": "<p>So, the question: What lifetimes can we assign to <code>'a</code> and <code>'b</code> here to make this callable?</p>",
        "id": 237863676,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409686
    },
    {
        "content": "<p>Say we have some <code>x: &amp;'X i32</code></p>",
        "id": 237863776,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409728
    },
    {
        "content": "<p>If we subst in <code>'X</code> to the impl, we get some impl <code>Foo&lt;'a&gt; for &amp;'X T</code> where <code>(&amp;'X T): 'a</code></p>",
        "id": 237864073,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409851
    },
    {
        "content": "<p><em>ok</em></p>",
        "id": 237864085,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409855
    },
    {
        "content": "<p>But our bound is <code>for&lt;'a&gt; Fn(&lt;T as Foo&lt;'a&gt;&gt;::Bar)</code></p>",
        "id": 237864144,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409888
    },
    {
        "content": "<p>So basically, <code>'a: 'static</code> (essentially, but I don't know if we <em>actually</em> say that?)</p>",
        "id": 237864249,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620409925
    },
    {
        "content": "<p>I've done a really poor job of explaining it, but I think the \"implementation of <code>Foo</code> is not general enough\" error is correct...</p>",
        "id": 237864422,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620410010
    },
    {
        "content": "<p>Wait. The heck. The test is <code>build-pass</code></p>",
        "id": 237864639,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620410110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would like your thoughts here (when you get time) and whether you think <a href=\"https://github.com/rust-lang/rust/issues/44005\">#44005</a> should be reopened?</p>",
        "id": 237864982,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620410269
    },
    {
        "content": "<p>looking</p>",
        "id": 238140423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620652840
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I have to spend some time digging into that syn incremental crash</p>",
        "id": 238141972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620653485
    },
    {
        "content": "<p>that said, I'm going to try and get this build going</p>",
        "id": 238141992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620653494
    },
    {
        "content": "<p>is everything pushed?</p>",
        "id": 238142005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620653502
    },
    {
        "content": "<p>Mmm okay. Yes, everything is pushed.</p>",
        "id": 238142213,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620653581
    },
    {
        "content": "<p>great!</p>",
        "id": 238142862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620653812
    },
    {
        "content": "<p>assoc-type-norm  ?</p>",
        "id": 238142899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620653829
    },
    {
        "content": "<p>Yes</p>",
        "id": 238143278,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620653983
    },
    {
        "content": "<p>building now!</p>",
        "id": 238143295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620653988
    },
    {
        "content": "<p><a href=\"https://github.com/jackh726/rust/tree/assoc-type-norm\">https://github.com/jackh726/rust/tree/assoc-type-norm</a></p>",
        "id": 238143324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620654000
    },
    {
        "content": "<p>The two issues to start with are <code>ui/issues/issue-44005.rs</code> (to verify that we actually <em>can'</em> compile this) and <code>ui/issues/issue-36139-normalize-closure-sig.rs</code> (to figure out <em>why</em> this is running into problems)</p>",
        "id": 238143554,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620654074
    },
    {
        "content": "<p>(when you have time)</p>",
        "id": 238143580,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620654091
    },
    {
        "content": "<p>ok, looking now while I wait for other builds</p>",
        "id": 238143695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620654131
    },
    {
        "content": "<p>Let me know if you have questions :)</p>",
        "id": 238143751,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620654150
    },
    {
        "content": "<p>so, I think that <a href=\"https://github.com/rust-lang/rust/issues/44005\">#44005</a> should <strong>not</strong> compile, at least not as is</p>",
        "id": 238144042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620654274
    },
    {
        "content": "<p>That was my conclusion</p>",
        "id": 238144164,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620654324
    },
    {
        "content": "<p>yeah, you are correct</p>",
        "id": 238144193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620654335
    },
    {
        "content": "<p>otoh</p>",
        "id": 238144974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620654622
    },
    {
        "content": "<p>yes, you're also correct that <a href=\"https://github.com/rust-lang/rust/issues/36139\">#36139</a> should compile</p>",
        "id": 238145013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620654633
    },
    {
        "content": "<p>let me poke at it, i have a few hunches</p>",
        "id": 238145028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620654641
    },
    {
        "content": "<p>I <em>think</em> something is happening around type generalization (during relation) that placeholder types get a new variable but bound vars do not</p>",
        "id": 238145210,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620654721
    },
    {
        "content": "<p>But probably completely wrong there</p>",
        "id": 238145290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620654737
    },
    {
        "content": "<p>I'm actually not sure what your branch does</p>",
        "id": 238145403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620654780
    },
    {
        "content": "<p>I remember you had what seeemed to me to be a quick hack</p>",
        "id": 238145437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620654791
    },
    {
        "content": "<p>(Which was pretty clever)</p>",
        "id": 238145458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620654800
    },
    {
        "content": "<p>but which may itself be responsible for some measure of problems</p>",
        "id": 238145475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620654807
    },
    {
        "content": "<p>Well, so it replaces bound vars with placeholders, normalizes, then replaces placeholders with bound vars</p>",
        "id": 238145900,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620654967
    },
    {
        "content": "<p>It <em>doesn't</em> \"delay\" the replacing of placeholders with bound vars if the type returned is not fully known</p>",
        "id": 238145988,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620654999
    },
    {
        "content": "<p>That <em>could</em> be the problem</p>",
        "id": 238146011,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620655012
    },
    {
        "content": "<p>But I was thinking the problem is because we're pushing outlives goals between to placeholders of different universes</p>",
        "id": 238146082,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620655039
    },
    {
        "content": "<p>right, right</p>",
        "id": 238148500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620655956
    },
    {
        "content": "<p>ok</p>",
        "id": 238148502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620655957
    },
    {
        "content": "<p>So, yes <em>sort</em> of a hack, but really more of a partial implementation</p>",
        "id": 238148900,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620656119
    },
    {
        "content": "<p>yeah, not so much a hack</p>",
        "id": 238149046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620656168
    },
    {
        "content": "<p>I was trying to see if the problems I'm seeing <em>would</em> be solved by delayed the quantification</p>",
        "id": 238149105,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620656193
    },
    {
        "content": "<p>But I really should just devote the time to implement it</p>",
        "id": 238149138,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620656204
    },
    {
        "content": "<p><em>might</em> be easier than just debugging lol</p>",
        "id": 238149166,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620656217
    },
    {
        "content": "<p>Okay, thought I had a lead, but of course it isn't so simple</p>",
        "id": 238513597,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620840858
    },
    {
        "content": "<p>so, backing up again</p>",
        "id": 238513612,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620840864
    },
    {
        "content": "<p>When we get done with typechecking (I think), we end up with the following constraints:</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_infer::infer::lexical_region_resolve Constraint 0 =&gt; VarSubVar(&#39;_#0r, &#39;_#4r)\nDEBUG rustc_infer::infer::lexical_region_resolve Constraint 1 =&gt; VarSubVar(&#39;_#1r, &#39;_#4r)\nDEBUG rustc_infer::infer::lexical_region_resolve Constraint 2 =&gt; VarSubVar(&#39;_#3r, &#39;_#1r)\nDEBUG rustc_infer::infer::lexical_region_resolve Constraint 3 =&gt; VarSubVar(&#39;_#4r, &#39;_#0r)\nDEBUG rustc_infer::infer::lexical_region_resolve Constraint 4 =&gt; VarSubVar(&#39;_#4r, &#39;_#1r)\nDEBUG rustc_infer::infer::lexical_region_resolve Constraint 5 =&gt; RegSubVar(RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a) }), &#39;_#0r)\nDEBUG rustc_infer::infer::lexical_region_resolve Constraint 6 =&gt; RegSubVar(RePlaceholder(Placeholder { universe: U3, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a) }), &#39;_#1r)\nDEBUG rustc_infer::infer::lexical_region_resolve Constraint 7 =&gt; RegSubVar(RePlaceholder(Placeholder { universe: U4, name: BrNamed(DefId(0:14 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a), &#39;a) }), &#39;_#2r)\nDEBUG rustc_infer::infer::lexical_region_resolve Constraint 8 =&gt; VarSubReg(&#39;_#0r, RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a) }))\nDEBUG rustc_infer::infer::lexical_region_resolve Constraint 9 =&gt; VarSubReg(&#39;_#1r, RePlaceholder(Placeholder { universe: U3, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a) }))\nDEBUG rustc_infer::infer::lexical_region_resolve Constraint 10 =&gt; VarSubReg(&#39;_#2r, RePlaceholder(Placeholder { universe: U4, name: BrNamed(DefId(0:14 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a), &#39;a) }))\n</code></pre></div>",
        "id": 238513681,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620840896
    },
    {
        "content": "<p>And we eventually get</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_infer::infer::lexical_region_resolve lub_concrete_regions(RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a) }), RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a) })) = RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a) })\nDEBUG rustc_infer::infer::lexical_region_resolve lub_concrete_regions(RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a) }), RePlaceholder(Placeholder { universe: U3, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a) })) = ReStatic\nDEBUG rustc_infer::infer::lexical_region_resolve region inference error at EarlyBoundRegion(/home/hueyj/temp/rust/rust/src/test/ui/issues/issue-36139-normalize-closure-sig.rs:20:5: 20:19 (#0), &quot;&#39;a&quot;) for &#39;_#0r: SubSupConflict sub: RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a) }) sup: RePlaceholder(Placeholder { universe: U3, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a) })\n</code></pre></div>",
        "id": 238513793,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620840941
    },
    {
        "content": "<p>Which is our error</p>",
        "id": 238513804,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620840946
    },
    {
        "content": "<p>We basically are trying to make <code>!2_'a: !3_'a</code></p>",
        "id": 238514108,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620841061
    },
    {
        "content": "<p>(terrible notation)</p>",
        "id": 238514132,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620841069
    },
    {
        "content": "<p>But that turns into use checking <code>'static: !3_'a</code> which is not true</p>",
        "id": 238514325,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620841136
    },
    {
        "content": "<p>Other info:</p>",
        "id": 238514584,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620841237
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&#39;_#4r == Value(ReEmpty(U0))\n</code></pre></div>",
        "id": 238514595,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620841240
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&#39;_#1r == Value(ReEmpty(U3))\n</code></pre></div>",
        "id": 238514619,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620841250
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&#39;_#0r == Value(ReEmpty(U2))\n</code></pre></div>",
        "id": 238514643,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620841260
    },
    {
        "content": "<p>And <code>'_#2r == Value(ReEmpty(U4))</code></p>",
        "id": 238514763,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620841315
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_infer::infer::lexical_region_resolve collect_errors: region error at Subtype(TypeTrace { cause: ObligationCauseData { span: /home/hueyj/temp/rust/rust/src/test/ui/issues/issue-36139-normalize-closure-sig.rs:20:5: 20:19 (#0), body_id: HirId { owner: DefId(0:16 ~ issue_36139_normalize_closure_sig[317d]::main), local_id: 23 }, code: MiscObligation }, values: TraitRefs(ExpectedFound { expected: &lt;S as ITrait&lt;RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a) })&gt;&gt;, found: &lt;S as ITrait&lt;ReVar(&#39;_#0r)&gt;&gt; }) }): cannot verify that &#39;_#0r=ReStatic &lt;= RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a) })\n</code></pre></div>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 238515327,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620841517
    },
    {
        "content": "<p>Actually I guess we get both</p>",
        "id": 238515393,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620841543
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 238619626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912009
    },
    {
        "content": "<p>let's talk here</p>",
        "id": 238619630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912010
    },
    {
        "content": "<p>Hi</p>",
        "id": 238619639,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912016
    },
    {
        "content": "<p>remind me <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> what the tset case is lol</p>",
        "id": 238619643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912018
    },
    {
        "content": "<p><code>issue-36139-normalize-closure-sig.rs</code></p>",
        "id": 238619676,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912034
    },
    {
        "content": "<p>also let me find which of my many rust directories this is</p>",
        "id": 238619735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912070
    },
    {
        "content": "<p>haha</p>",
        "id": 238619749,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912075
    },
    {
        "content": "<p>I should maybe them better names than rust-{1,2,3,4,...}</p>",
        "id": 238619776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912079
    },
    {
        "content": "<p>ftr, this is rust-2 :)</p>",
        "id": 238619836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912111
    },
    {
        "content": "<p>I've thought about having multiple directories</p>",
        "id": 238619891,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912131
    },
    {
        "content": "<p>But I would get too confused</p>",
        "id": 238619905,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912136
    },
    {
        "content": "<p>I used to have a persistent screen session</p>",
        "id": 238619967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912178
    },
    {
        "content": "<p>and th names of rust-[0..9] would also include the current branch etc</p>",
        "id": 238619986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912188
    },
    {
        "content": "<p>so it was pretty easy for me to remember which was which</p>",
        "id": 238619997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912194
    },
    {
        "content": "<p>I also just try not to dip my toes into too many branches</p>",
        "id": 238620077,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912224
    },
    {
        "content": "<p>But that doesn't always work</p>",
        "id": 238620083,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912229
    },
    {
        "content": "<p>ok, so</p>",
        "id": 238620164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912256
    },
    {
        "content": "<p>I'm reproducing the problem</p>",
        "id": 238620179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912258
    },
    {
        "content": "<p>let me dump some logs and read what you wrote above :)</p>",
        "id": 238620201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912265
    },
    {
        "content": "<p>Ok :)</p>",
        "id": 238620249,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912283
    },
    {
        "content": "<p>you know what would be useful</p>",
        "id": 238620529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912416
    },
    {
        "content": "<p>if we included the universe of every region inference variable :/</p>",
        "id": 238620542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912425
    },
    {
        "content": "<p>e.g., <code>'_#2r[U2]</code></p>",
        "id": 238620560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912433
    },
    {
        "content": "<p>Yes, that would</p>",
        "id": 238620612,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912466
    },
    {
        "content": "<p>(if we have that information without resolving the var)</p>",
        "id": 238620662,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912484
    },
    {
        "content": "<p>I think that for <em>region variables</em> we never modify it,</p>",
        "id": 238620721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912510
    },
    {
        "content": "<p>but I think we do need access to the infcx</p>",
        "id": 238620727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912514
    },
    {
        "content": "<p>which is the problem</p>",
        "id": 238620730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912515
    },
    {
        "content": "<p>anyway... so...</p>",
        "id": 238620734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912518
    },
    {
        "content": "<p>DEBUG rustc_infer::infer::lexical_region_resolve region inference error at EarlyBoundRegion(./src/test/ui/issues/issue-36139-normalize-closure-sig.rs:18:5: 18:19 (<a href=\"https://github.com/rust-lang/rust/issues/0\">#0</a>), \"'a\") for '_#0r: SubSupConflict sub: RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]:<span aria-label=\"m\" class=\"emoji emoji-24c2\" role=\"img\" title=\"m\">:m:</span>:'<a href=\"https://github.com/rust-lang/a/issues/1\">a#1</a>), 'a) }) sup: RePlaceholder(Placeholder { universe: U3, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]:<span aria-label=\"m\" class=\"emoji emoji-24c2\" role=\"img\" title=\"m\">:m:</span>:'<a href=\"https://github.com/rust-lang/a/issues/1\">a#1</a>), 'a) })</p>",
        "id": 238620772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912540
    },
    {
        "content": "<p>we get this error</p>",
        "id": 238620778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912545
    },
    {
        "content": "<p>Yes</p>",
        "id": 238620958,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912628
    },
    {
        "content": "<p>so</p>",
        "id": 238621140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912718
    },
    {
        "content": "<p>the thing to do is to find which is the constraint that makes the connection</p>",
        "id": 238621188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912729
    },
    {
        "content": "<p>i usually just graph these out on paper</p>",
        "id": 238621203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912735
    },
    {
        "content": "<p>Yeah, that's what I was trying to find</p>",
        "id": 238621245,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912759
    },
    {
        "content": "<p>I didn't get very far</p>",
        "id": 238621324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912794
    },
    {
        "content": "<p>so it seems like 4 is the \"lynch pin\"</p>",
        "id": 238621650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620912955
    },
    {
        "content": "<p>Okay so</p>",
        "id": 238621708,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912972
    },
    {
        "content": "<p>That one I tracked down</p>",
        "id": 238621759,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620912994
    },
    {
        "content": "<p>It comes from this obligation:</p>\n<div class=\"codehilite\"><pre><span></span><code>TraitPredicate(&lt;[main::{closure#0} closure_substs=(unavailable)] as std::ops::FnMut&lt;(&amp;ReVar(&#39;_#0r) mut usize,)&gt;&gt;), [])\n</code></pre></div>",
        "id": 238621841,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620913036
    },
    {
        "content": "<p>The fn sig for the closure ends up being <code>FnMut&lt;(&amp;ReVar('_#4r) mut usize,)&gt;</code></p>",
        "id": 238621995,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620913094
    },
    {
        "content": "<p>right, I'm looking</p>",
        "id": 238622062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913142
    },
    {
        "content": "<p>│ │ │ ├─0ms DEBUG rustc_infer::infer::region_constraints created new region variable '_#4r in U4 with origin EarlyBoundRegion(./src/test/ui/issues/issue-36139-normalize-closure-sig.rs:18:29: 18:31 (<a href=\"https://github.com/rust-lang/rust/issues/0\">#0</a>), \"'_\")</p>",
        "id": 238622097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913161
    },
    {
        "content": "<p>it's created there</p>",
        "id": 238622099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913164
    },
    {
        "content": "<p>Is it that one?</p>",
        "id": 238622254,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620913219
    },
    {
        "content": "<p>There end up being four different <code>4</code>s</p>",
        "id": 238622279,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620913231
    },
    {
        "content": "<p>yaeh ok</p>",
        "id": 238622308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913246
    },
    {
        "content": "<p>I was just finding that</p>",
        "id": 238622311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913248
    },
    {
        "content": "<p>I thought i saw there ∑as only one</p>",
        "id": 238622322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913255
    },
    {
        "content": "<p>but i misread it</p>",
        "id": 238622326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913258
    },
    {
        "content": "<p>do you notice that tracing indentation is not very reliable?</p>",
        "id": 238622643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913403
    },
    {
        "content": "<p>oh, is that because of RUSTC_LOG...?</p>",
        "id": 238622658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913409
    },
    {
        "content": "<p>i.e., some of the indentation comes from things that are not enabled?</p>",
        "id": 238622665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913416
    },
    {
        "content": "<p>it's super annoying</p>",
        "id": 238622669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913418
    },
    {
        "content": "<p>Yeah, I noticed that</p>",
        "id": 238622680,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620913430
    },
    {
        "content": "<p>I don't know exactly what it's from</p>",
        "id": 238622698,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620913439
    },
    {
        "content": "<p>I don't think I see the same thing with Chalk (though there's much less going on there)</p>",
        "id": 238622769,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620913457
    },
    {
        "content": "<p>so '4 is created as part of generalizing</p>",
        "id": 238622790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913470
    },
    {
        "content": "<p>DEBUG rustc_infer::infer::sub Sub.tys([main::{closure#0} closure_substs=(unavailable)], _#0t)</p>",
        "id": 238622819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913491
    },
    {
        "content": "<p>But yeah, I'll get either multiple indents for the same span or like nested indents</p>",
        "id": 238622824,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620913494
    },
    {
        "content": "<p>yse</p>",
        "id": 238622847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913506
    },
    {
        "content": "<p>I see all kinds of odd behavior really</p>",
        "id": 238622861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/238622790\">said</a>:</p>\n<blockquote>\n<p>so '4 is created as part of generalizing</p>\n</blockquote>\n<p>Okay, that's what I thought I saw</p>",
        "id": 238622883,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620913519
    },
    {
        "content": "<p>I've been thinking about pestering <span class=\"user-mention\" data-user-id=\"307286\">@Eliza Weisman</span> about it :)</p>",
        "id": 238622892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913523
    },
    {
        "content": "<p>for some reason it prints the closure substs as 'unavailable'</p>",
        "id": 238623009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913566
    },
    {
        "content": "<p>i'm not sure why that is</p>",
        "id": 238623013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913568
    },
    {
        "content": "<p>I quickly checked the tracing github but didn't find anything</p>",
        "id": 238623022,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620913571
    },
    {
        "content": "<p>but it appears that '1 is the region of <code>x</code></p>",
        "id": 238623052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913587
    },
    {
        "content": "<p>And yeah, also checked on that...was confused</p>",
        "id": 238623080,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620913600
    },
    {
        "content": "<p>so one question is</p>",
        "id": 238623100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913611
    },
    {
        "content": "<p>what signature did we decide for this closure</p>",
        "id": 238623106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913614
    },
    {
        "content": "<p>we only infer higher-ranked things when we can see it</p>",
        "id": 238623121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913620
    },
    {
        "content": "<p>based on what I see <em>here</em> it appears that the closure signature is not higher-ranked</p>",
        "id": 238623165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913644
    },
    {
        "content": "<p>That would probably cause the issue</p>",
        "id": 238623190,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620913664
    },
    {
        "content": "<p>so, using RUSTC_LOG=rustc_typeck:<span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span>:closure,rustc_infer,rustc_trait_selection</p>",
        "id": 238623282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913687
    },
    {
        "content": "<p>I miss some emacs commands</p>",
        "id": 238623345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913719
    },
    {
        "content": "<p>I should find the vscode equivalent to m-x occur</p>",
        "id": 238623357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913727
    },
    {
        "content": "<p>You almost certainly can find an extension to use it</p>",
        "id": 238623373,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620913743
    },
    {
        "content": "<p>the Filter Lines extension looks good</p>",
        "id": 238623511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913806
    },
    {
        "content": "<p>I've also found Find All pretty decent for this</p>",
        "id": 238623520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913813
    },
    {
        "content": "<p>I wish I could get the colors from the logs to show up when I redirect into a file</p>",
        "id": 238623573,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620913839
    },
    {
        "content": "<p>so filtering down to <code>rustc_typeck::check::closure</code></p>",
        "id": 238623596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913852
    },
    {
        "content": "<p>actually one second</p>",
        "id": 238623615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620913867
    },
    {
        "content": "<p>so it occurs to me that this might be a result of not having fully implemented the feature</p>",
        "id": 238623889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914001
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_typeck::check::closure check_expr_closure(expr=Expr { hir_id: HirId { owner: DefId(0:16 ~ issue_36139_normalize_closure_sig[317d]::main), local_id: 19 }, kind: Closure(Ref, FnDecl { inputs: [Ty { hir_id: HirId { owner: DefId(0:16 ~ issue_36139_normalize_closure_sig[317d]::main), local_id: 18 }, kind: Infer, span: ./src/test/ui/issues/issue-36139-normalize-closure-sig.rs:18:21: 18:22 (#0) }], output: DefaultReturn(./src/test/ui/issues/issue-36139-normalize-closure-sig.rs:18:24: 18:24 (#0)), c_variadic: false, implicit_self: None }, BodyId { hir_id: HirId { owner: DefId(0:16 ~ issue_36139_normalize_closure_sig[317d]::main), local_id: 17 } }, ./src/test/ui/issues/issue-36139-normalize-closure-sig.rs:18:20: 18:23 (#0), None), span: ./src/test/ui/issues/issue-36139-normalize-closure-sig.rs:18:20: 18:36 (#0) },expected=ExpectHasType(_#0t))\nDEBUG rustc_typeck::check::closure deduce_expectations_from_expected_type(expected_ty=_#0t)\nDEBUG rustc_typeck::check::closure deduce_expectations_from_obligations: obligation.predicate=Binder(TraitPredicate(&lt;_#0t as std::marker::Sized&gt;), [])\nDEBUG rustc_typeck::check::closure deduce_expectations_from_obligations: obligation.predicate=Binder(TraitPredicate(&lt;_#0t as std::ops::FnMut&lt;(&amp;&#39;_#0r mut usize,)&gt;&gt;), [Region(BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a))])\nDEBUG rustc_typeck::check::closure deduce_expectations_from_obligations: obligation.predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [_#0t, (&amp;&#39;_#1r mut usize,)], item_def_id: DefId(2:3082 ~ core[4214]::ops::function::FnOnce::Output) }, ()), [Region(BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a))])\nDEBUG rustc_typeck::check::closure deduce_sig_from_projection(Binder(ProjectionPredicate(ProjectionTy { substs: [_#0t, (&amp;&#39;_#1r mut usize,)], item_def_id: DefId(2:3082 ~ core[4214]::ops::function::FnOnce::Output) }, ()), [Region(BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a))]))\nDEBUG rustc_typeck::check::closure deduce_sig_from_projection: arg_param_ty=(&amp;&#39;_#1r mut usize,)\nDEBUG rustc_typeck::check::closure deduce_sig_from_projection: ret_param_ty=()\nDEBUG rustc_typeck::check::closure deduce_sig_from_projection: sig=Binder(([&amp;&#39;_#1r mut usize]; c_variadic: false)-&gt;(), [Region(BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a))])\nDEBUG rustc_typeck::check::closure check_closure(opt_kind=Some(FnMut), expected_sig=Some(ExpectedSig { cause_span: Some(./src/test/ui/issues/issue-36139-normalize-closure-sig.rs:18:5: 18:19 (#0)), sig: Binder(([&amp;&#39;_#1r mut usize]; c_variadic: false)-&gt;(), [Region(BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a))]) }))\nDEBUG rustc_typeck::check::closure sig_of_closure_with_expectation(expected_sig=ExpectedSig { cause_span: Some(./src/test/ui/issues/issue-36139-normalize-closure-sig.rs:18:5: 18:19 (#0)), sig: Binder(([&amp;&#39;_#1r mut usize]; c_variadic: false)-&gt;(), [Region(BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a))]) })\nDEBUG rustc_typeck::check::closure supplied_sig_of_closure(decl=FnDecl { inputs: [Ty { hir_id: HirId { owner: DefId(0:16 ~ issue_36139_normalize_closure_sig[317d]::main), local_id: 18 }, kind: Infer, span: ./src/test/ui/issues/issue-36139-normalize-closure-sig.rs:18:21: 18:22 (#0) }], output: DefaultReturn(./src/test/ui/issues/issue-36139-normalize-closure-sig.rs:18:24: 18:24 (#0)), c_variadic: false, implicit_self: None }, body.generator_kind=None)\nDEBUG rustc_typeck::check::closure supplied_sig_of_closure: result=Binder(([_#2t]; c_variadic: false)-&gt;_#1t, [])\nDEBUG rustc_typeck::check::closure check_supplied_sig_against_expectation: supplied_sig=Binder(([_#2t]; c_variadic: false)-&gt;_#1t, [])\nDEBUG rustc_typeck::check::closure check_closure: ty_of_closure returns ([&amp;&#39;_#1r mut usize]; c_variadic: false)-&gt;()\nDEBUG rustc_typeck::check::closure check_closure: expr_def_id=DefId(0:17 ~ issue_36139_normalize_closure_sig[317d]::main::{closure#0}), sig=Binder(([(&amp;&#39;_#1r mut usize,)]; c_variadic: false)-&gt;(), []), opt_kind=Some(FnMut)\nDEBUG rustc_typeck::check::closure check_closure: expr.hir_id=HirId { owner: DefId(0:16 ~ issue_36139_normalize_closure_sig[317d]::main), local_id: 19 } closure_type=[main::{closure#0} closure_substs=(unavailable)]\n</code></pre></div>",
        "id": 238623945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914035
    },
    {
        "content": "<p><code>deduce_expectations_from_obligations: obligation.predicate=Binder(TraitPredicate(&lt;_#0t as std::ops::FnMut&lt;(&amp;'_#0r mut usize,)&gt;&gt;)</code></p>",
        "id": 238624021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914067
    },
    {
        "content": "<p>not that <code>'_#0r</code> appears free there</p>",
        "id": 238624050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914088
    },
    {
        "content": "<p><code>│ ├─0ms DEBUG rustc_trait_selection::traits::project folded_with_placeholders=TraitPredicate(&lt;_#0t as std::ops::FnMut&lt;(&amp;'_#0r mut usize,)&gt;&gt;)</code></p>",
        "id": 238624222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914176
    },
    {
        "content": "<p>ok ok</p>",
        "id": 238624377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914267
    },
    {
        "content": "<p>\"the feature\"?</p>",
        "id": 238624378,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620914267
    },
    {
        "content": "<p>so...</p>",
        "id": 238624386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914271
    },
    {
        "content": "<p>The projection normalization?</p>",
        "id": 238624388,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620914273
    },
    {
        "content": "<p>yes, but I'm not sure if what I'm saying makes sense -- or, it is partly the \"half\" implementation you did, but it's also a case I don't think we had fully talked through</p>",
        "id": 238624462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914304
    },
    {
        "content": "<p>in particular: we left out the part about mapping back from inference variables to bound variables in the case that we didn't know the answer yet</p>",
        "id": 238624535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914352
    },
    {
        "content": "<p>I think we can do a small hack to fix this case</p>",
        "id": 238624549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914360
    },
    {
        "content": "<p>will explain in one sec :)</p>",
        "id": 238624553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914364
    },
    {
        "content": "<p>(lest I be misinterpeted, nothing there is criticizing your branch!)</p>",
        "id": 238624582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914387
    },
    {
        "content": "<p>No no, criticize away :)</p>",
        "id": 238624665,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620914415
    },
    {
        "content": "<p>so the problem is that, in the course of normalizing, we create a region inference variable <code>'_0#r</code></p>",
        "id": 238624852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/238624535\">said</a>:</p>\n<blockquote>\n<p>in particular: we left out the part about mapping back from inference variables to bound variables in the case that we didn't know the answer yet</p>\n</blockquote>\n<p>well, we did talk about it, but I didn't implement it...</p>",
        "id": 238624896,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620914511
    },
    {
        "content": "<p>yes, but I think i was thinking more of type variables</p>",
        "id": 238624962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914526
    },
    {
        "content": "<p>region variables need a bit of a special treatment, but I'l show you what i mean</p>",
        "id": 238624986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914535
    },
    {
        "content": "<p>so the thing is that normally we don't ever replace region variables with anything until the very end of type checking</p>",
        "id": 238625206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914634
    },
    {
        "content": "<p>we just accumulate constraints</p>",
        "id": 238625215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914638
    },
    {
        "content": "<p>but we have this one weird special case</p>",
        "id": 238625220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914641
    },
    {
        "content": "<p>/me hates saying things like that</p>",
        "id": 238625276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914652
    },
    {
        "content": "<p>(a lot of problems go away if we adopt a more chalk-like model...)</p>",
        "id": 238625289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914659
    },
    {
        "content": "<p>the problem is that if you have <code>'0: '1</code>, you dn't know whether <code>'1</code> will be equal to <code>'0</code> or not from that alone</p>",
        "id": 238625328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914682
    },
    {
        "content": "<p>but often we wind up equating regions -- e.g., when we're combining invariant types</p>",
        "id": 238625346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914695
    },
    {
        "content": "<p>and then we would add <code>0: 1</code> and <code>1: 0</code> at once</p>",
        "id": 238625376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914714
    },
    {
        "content": "<p>in those cases, we also have a side table of unifications and we record it</p>",
        "id": 238625395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914722
    },
    {
        "content": "<p>during projection, you can specifically request to normalize those equalities</p>",
        "id": 238625417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/238625220\">said</a>:</p>\n<blockquote>\n<p>but we have this one weird special case</p>\n</blockquote>\n<p>And <em>you</em> get a special case. And <em>you</em></p>",
        "id": 238625423,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620914738
    },
    {
        "content": "<p>?</p>",
        "id": 238625446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914753
    },
    {
        "content": "<p>oh I get it :)</p>",
        "id": 238625453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914756
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/ea8d58ea659f36bf6bc305c49bd857aa3ea227b7/compiler/rustc_trait_selection/src/traits/project.rs#L1343-L1344\">https://github.com/rust-lang/rust/blob/ea8d58ea659f36bf6bc305c49bd857aa3ea227b7/compiler/rustc_trait_selection/src/traits/project.rs#L1343-L1344</a></p>",
        "id": 238625457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914758
    },
    {
        "content": "<p>hmm</p>",
        "id": 238625515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914771
    },
    {
        "content": "<p>hat didn't work</p>",
        "id": 238625518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914772
    },
    {
        "content": "<p>anyway there is this thing called the <code>OpportunisticRegionResolver</code></p>",
        "id": 238625533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914780
    },
    {
        "content": "<p>I'm about to push a commit to your branch, one sec</p>",
        "id": 238625567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914799
    },
    {
        "content": "<p>Ok</p>",
        "id": 238625589,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620914813
    },
    {
        "content": "<p>I'm kind of lost</p>",
        "id": 238625598,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620914817
    },
    {
        "content": "<p>ps, <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> -- it's so nice that rust-analyzer manages imports. <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 238625776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914895
    },
    {
        "content": "<p>Niko I also just gave you access to my repo too</p>",
        "id": 238625822,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620914926
    },
    {
        "content": "<p>heh wtf</p>",
        "id": 238625841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914938
    },
    {
        "content": "<p>Wasn't sure if you could push to my branch</p>",
        "id": 238625858,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620914943
    },
    {
        "content": "<p>why are there so many normalizer structs</p>",
        "id": 238625860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914945
    },
    {
        "content": "<p>I think you were asking this same question recently</p>",
        "id": 238625872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914949
    },
    {
        "content": "<p>Yes haha</p>",
        "id": 238625891,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620914955
    },
    {
        "content": "<p>I probably added them both but dear god</p>",
        "id": 238625921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620914969
    },
    {
        "content": "<p>ok so my commit didn't fix it <em>but</em>...</p>",
        "id": 238626817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620915364
    },
    {
        "content": "<p>I don't know why :)</p>",
        "id": 238626833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620915367
    },
    {
        "content": "<p>ugh</p>",
        "id": 238626892,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620915394
    },
    {
        "content": "<p>oh wait</p>",
        "id": 238626978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620915434
    },
    {
        "content": "<p>I didn't actually build</p>",
        "id": 238626983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620915437
    },
    {
        "content": "<p>I just did x.py check</p>",
        "id": 238626985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620915440
    },
    {
        "content": "<p>ok, I was wrong I thikn</p>",
        "id": 238628042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620915855
    },
    {
        "content": "<p>nonetheless I pushed a commit</p>",
        "id": 238628092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620915876
    },
    {
        "content": "<p>digging a bit more but i have to change gears</p>",
        "id": 238628103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620915880
    },
    {
        "content": "<p>er, I didn't</p>",
        "id": 238628233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620915944
    },
    {
        "content": "<p>because the push failed</p>",
        "id": 238628238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620915946
    },
    {
        "content": "<p>oh prob because i didn't accept your invite</p>",
        "id": 238628254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620915954
    },
    {
        "content": "<p>I was about to ask</p>",
        "id": 238628312,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620915967
    },
    {
        "content": "<p>also, was I wrong, or was there 2 problems</p>",
        "id": 238628315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620915972
    },
    {
        "content": "<p>checing something</p>",
        "id": 238628317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620915974
    },
    {
        "content": "<p>Gosh I'm so amazed at how fast you were able to dig into this and find a potential solution</p>",
        "id": 238628399,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620916009
    },
    {
        "content": "<p><em>oh</em></p>",
        "id": 238630988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917104
    },
    {
        "content": "<p>so i'm not wrong about the <em>general problem</em></p>",
        "id": 238631000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917108
    },
    {
        "content": "<p>it's just that the opportunistic region resolver isn't good enough</p>",
        "id": 238631016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917115
    },
    {
        "content": "<p>it only works for <em>two inference variables</em> equated together</p>",
        "id": 238631042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917122
    },
    {
        "content": "<p>it doesn't work for <em>inference variables</em> equated with <em>placeholders</em></p>",
        "id": 238631055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917132
    },
    {
        "content": "<p><code>Equate.regions(RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::'a#1), 'a) }), '_#0r)</code></p>",
        "id": 238631072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917142
    },
    {
        "content": "<p>there's no deep reason for that</p>",
        "id": 238631077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917146
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">make_eqregion</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">origin</span>: <span class=\"nc\">SubregionOrigin</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">sub</span>: <span class=\"nc\">Region</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">sup</span>: <span class=\"nc\">Region</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">sup</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Eventually, it would be nice to add direct support for</span>\n<span class=\"w\">            </span><span class=\"c1\">// equating regions.</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">make_subregion</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sup</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">make_subregion</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sup</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">ReVar</span><span class=\"p\">(</span><span class=\"n\">sub</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">ReVar</span><span class=\"p\">(</span><span class=\"n\">sup</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">sub</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">sup</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"make_eqregion: uniying {:?} with {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sup</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">unification_table</span><span class=\"p\">().</span><span class=\"k\">union</span><span class=\"p\">(</span><span class=\"n\">sub</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sup</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">any_unifications</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238631167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917176
    },
    {
        "content": "<p>that last <code>if let</code> is the code I am talking about</p>",
        "id": 238631178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917182
    },
    {
        "content": "<p><em>really</em> the opportunistic region resolver do a quick SCC search on the region constraint graph</p>",
        "id": 238631252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917216
    },
    {
        "content": "<p>and not use that hacky table</p>",
        "id": 238631256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917219
    },
    {
        "content": "<p>that would probably not be too expensive and would be more general</p>",
        "id": 238631271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917225
    },
    {
        "content": "<p>well, it might be expensive lol</p>",
        "id": 238631302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917237
    },
    {
        "content": "<p>anyway <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> maybe that helps you figure out next steps :)</p>",
        "id": 238631346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917260
    },
    {
        "content": "<p>uh</p>",
        "id": 238631364,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620917266
    },
    {
        "content": "<p>not sure about that</p>",
        "id": 238631386,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620917272
    },
    {
        "content": "<p>But I can try</p>",
        "id": 238631399,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620917277
    },
    {
        "content": "<p>I can be a bit more detailed if you'd like :)</p>",
        "id": 238631456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917288
    },
    {
        "content": "<p>I'm still very lost</p>",
        "id": 238631457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620917288
    },
    {
        "content": "<p>ok, let's talk more tomorrow or later</p>",
        "id": 238631472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917296
    },
    {
        "content": "<p>Tomorrow morning would be good</p>",
        "id": 238631508,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620917309
    },
    {
        "content": "<p>ok</p>",
        "id": 238631537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620917327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/238624852\">said</a>:</p>\n<blockquote>\n<p>so the problem is that, in the course of normalizing, we create a region inference variable <code>'_0#r</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm not sure this is right...</p>",
        "id": 238679377,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620939160
    },
    {
        "content": "<p>I think that variable gets created from the canonicalization of the closure function sig</p>",
        "id": 238679421,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620939178
    },
    {
        "content": "<p>Do you meant <code>'_4#r</code>?</p>",
        "id": 238679443,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620939186
    },
    {
        "content": "<p>We start with</p>\n<div class=\"codehilite\"><pre><span></span><code>│ ├─0ms DEBUG rustc_trait_selection::traits::project with_placeholders=TraitPredicate(&lt;_#0t as std::ops::FnMut&lt;(&lt;S as ITrait&lt;RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:15 ~ issue_36139_normalize_closure_sig[317d]::m::&#39;a#1), &#39;a) })&gt;&gt;::Item,)&gt;&gt;)\n</code></pre></div>",
        "id": 238683577,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620941009
    },
    {
        "content": "<p>Hmm</p>",
        "id": 238683604,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620941025
    },
    {
        "content": "<p>And we finish with</p>\n<div class=\"codehilite\"><pre><span></span><code>│ ├─1ms DEBUG rustc_trait_selection::traits::project folded_with_placeholders=TraitPredicate(&lt;_#0t as std::ops::FnMut&lt;(&amp;&#39;_#0r mut usize,)&gt;&gt;)\n</code></pre></div>",
        "id": 238683765,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620941091
    },
    {
        "content": "<p>So yes, it does get created during normalization</p>",
        "id": 238683811,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620941112
    },
    {
        "content": "<p>right</p>",
        "id": 238685188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620941906
    },
    {
        "content": "<p>Digging into this now</p>",
        "id": 238685238,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620941945
    },
    {
        "content": "<p>I don't quite understand <em>why</em> being more eager here in terms of resolving regions during normalization will help</p>",
        "id": 238685295,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620941985
    },
    {
        "content": "<p>But I'm just going with it :)</p>",
        "id": 238685306,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620941991
    },
    {
        "content": "<p>Ok I think I see what's going on</p>",
        "id": 238693632,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620946801
    },
    {
        "content": "<p>want to continue with this?</p>",
        "id": 238771424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621000903
    },
    {
        "content": "<p>Sure</p>",
        "id": 238772294,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001255
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 238772313,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001265
    },
    {
        "content": "<p>Hey!</p>",
        "id": 238772397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001289
    },
    {
        "content": "<p>So, I'm pretty sure I understand everything you said now :)</p>",
        "id": 238772407,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001292
    },
    {
        "content": "<p>So you understand a bit more why this is important</p>",
        "id": 238772416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001295
    },
    {
        "content": "<p>ok</p>",
        "id": 238772417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001295
    },
    {
        "content": "<p>did you do any coding?</p>",
        "id": 238772425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001302
    },
    {
        "content": "<p>Slightly</p>",
        "id": 238772439,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001308
    },
    {
        "content": "<p>I could kind of walk you through what i think I would do</p>",
        "id": 238772444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001309
    },
    {
        "content": "<p>Doing a bit now</p>",
        "id": 238772451,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001312
    },
    {
        "content": "<p>Sure</p>",
        "id": 238772456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001316
    },
    {
        "content": "<p>I figured in <code>opportunistic_resolve_var</code>, I could do the SCC search</p>",
        "id": 238772509,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001340
    },
    {
        "content": "<p>yeah so ... we could</p>",
        "id": 238772624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001385
    },
    {
        "content": "<p>but I'm not sure we <em>should</em></p>",
        "id": 238772643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001390
    },
    {
        "content": "<p>I'm concerned about the performance</p>",
        "id": 238772650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001393
    },
    {
        "content": "<p>Hmm</p>",
        "id": 238772662,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001398
    },
    {
        "content": "<p>So, I also wanted to make sure that <code>make_eqregion</code> always uses root vars</p>",
        "id": 238772733,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001416
    },
    {
        "content": "<p>another option</p>",
        "id": 238772789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001441
    },
    {
        "content": "<p>So, if a var is resolved to anything other than another var, it should be quick to find</p>",
        "id": 238772806,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001449
    },
    {
        "content": "<p>would be to modify the region inference equivalence table</p>",
        "id": 238772817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001453
    },
    {
        "content": "<p>That was the other thing</p>",
        "id": 238772909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001498
    },
    {
        "content": "<p>I was looking how this is done with types</p>",
        "id": 238772921,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001505
    },
    {
        "content": "<p>right</p>",
        "id": 238772944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001515
    },
    {
        "content": "<p>so we could use roughly that approach</p>",
        "id": 238772951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001518
    },
    {
        "content": "<p>basically the unification engine has the idea of a \"value\" for a region</p>",
        "id": 238773001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001526
    },
    {
        "content": "<p>(it's a bit silly, probably ideal would be that we map each type to an integer,</p>",
        "id": 238773030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001538
    },
    {
        "content": "<p>and use those as keys to the unification table)</p>",
        "id": 238773061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001553
    },
    {
        "content": "<p>or make the unification table a hashmap keyed by a generic <code>T</code></p>",
        "id": 238773094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001565
    },
    {
        "content": "<p>but anyway we're not refactoring <em>that</em> now</p>",
        "id": 238773100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001571
    },
    {
        "content": "<p>(I think at some point there <em>is</em> a unification table keyed by <code>T</code>)</p>",
        "id": 238773140,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001596
    },
    {
        "content": "<p>it's a bit of a hodgepodge</p>",
        "id": 238773204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001625
    },
    {
        "content": "<p>anyway doesn't matter</p>",
        "id": 238773207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001628
    },
    {
        "content": "<p>let's make it more of one</p>",
        "id": 238773212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001631
    },
    {
        "content": "<p>So, <code>TypeVariableStorage</code> has both <code>eq_relations</code> and <code>sub_relations</code></p>",
        "id": 238773221,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001635
    },
    {
        "content": "<p>so, I think the SCC is the \"right\" thing <em>but</em></p>",
        "id": 238773231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001641
    },
    {
        "content": "<p>we call that opportunistic resolve quite frequently</p>",
        "id": 238773280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001652
    },
    {
        "content": "<p>ideally we'd do something clever about just looking at the relations constructed recently</p>",
        "id": 238773324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001671
    },
    {
        "content": "<p>but in the short term, I think it will suffice to extend the unification table</p>",
        "id": 238773355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001687
    },
    {
        "content": "<p>and it wouldn't be very hard</p>",
        "id": 238773358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/238773221\">said</a>:</p>\n<blockquote>\n<p>So, <code>TypeVariableStorage</code> has both <code>eq_relations</code> and <code>sub_relations</code></p>\n</blockquote>\n<p>yes, that's not realted to us</p>",
        "id": 238773374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001697
    },
    {
        "content": "<p>Well, I mean, it's for types. But the purpose is the same, right</p>",
        "id": 238773422,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001716
    },
    {
        "content": "<p>what I mean is</p>",
        "id": 238773688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001817
    },
    {
        "content": "<p>the <code>sub_relations</code> is not relevant to us</p>",
        "id": 238773694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001821
    },
    {
        "content": "<p>the <code>eq_relations</code> is</p>",
        "id": 238773712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001829
    },
    {
        "content": "<p><code>sub_relations</code> is essentially the <code>unification_table</code> in <code>RegionConstraintsCollector</code> now</p>",
        "id": 238773825,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621001879
    },
    {
        "content": "<p>in what sense?</p>",
        "id": 238773881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001889
    },
    {
        "content": "<p>it has a very different purpose</p>",
        "id": 238773902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001896
    },
    {
        "content": "<p>the way that types work:</p>",
        "id": 238773927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001904
    },
    {
        "content": "<p>so, the idea is that each unification key has an associated <em>value</em></p>",
        "id": 238773948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001913
    },
    {
        "content": "<p>it is specified in the impl of <code>UnifyKey</code></p>",
        "id": 238774022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001945
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/24379879acc0959e8ae0f3c19d249b3beb278836/compiler/rustc_middle/src/infer/unify_key.rs#L40-L51\">impl for ty::RegionVid</a></p>",
        "id": 238774035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001950
    },
    {
        "content": "<p>when you unify two variables, you also unify their <em>values</em></p>",
        "id": 238774067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001964
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(PartialEq, Copy, Clone, Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">RegionVidKey</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The minimum region vid in the unification set. This is needed</span>\n<span class=\"w\">    </span><span class=\"sd\">/// to have a canonical name for a type to prevent infinite</span>\n<span class=\"w\">    </span><span class=\"sd\">/// recursion.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">min_vid</span>: <span class=\"nc\">ty</span>::<span class=\"n\">RegionVid</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">UnifyValue</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">RegionVidKey</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NoError</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">unify_values</span><span class=\"p\">(</span><span class=\"n\">value1</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value2</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NoError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">min_vid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">value1</span><span class=\"p\">.</span><span class=\"n\">min_vid</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">value2</span><span class=\"p\">.</span><span class=\"n\">min_vid</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">value1</span><span class=\"p\">.</span><span class=\"n\">min_vid</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">value2</span><span class=\"p\">.</span><span class=\"n\">min_vid</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">RegionVidKey</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">min_vid</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238774093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001974
    },
    {
        "content": "<p>for region variables today, we track the minimum index</p>",
        "id": 238774121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001983
    },
    {
        "content": "<p>so that we have something canonical</p>",
        "id": 238774133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621001988
    },
    {
        "content": "<p>this is .. hmm. I'm not sure why we do that, tbqh, given that we have a root variable already</p>",
        "id": 238774163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002000
    },
    {
        "content": "<p>it doesn't really matter which one it is, and either way it can change as we do unification</p>",
        "id": 238774225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002012
    },
    {
        "content": "<p>maybe the API didn't expose the root</p>",
        "id": 238774246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002020
    },
    {
        "content": "<p>in any case, for <em>types</em>, we do something a bit different</p>",
        "id": 238774269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002027
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/24379879acc0959e8ae0f3c19d249b3beb278836/compiler/rustc_infer/src/infer/type_variable.rs#L400-L412\">impl for TyVidEqKey</a></p>",
        "id": 238774368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002067
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Copy, Clone, Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">TypeVariableValue</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Known</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Unknown</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">universe</span>: <span class=\"nc\">ty</span>::<span class=\"n\">UniverseIndex</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238774399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002078
    },
    {
        "content": "<p>That's only for <code>eq_relations</code></p>",
        "id": 238774479,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002104
    },
    {
        "content": "<p>basically when you unify two variables, their value must be the same (or both unknown)</p>",
        "id": 238774483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/238774479\">said</a>:</p>\n<blockquote>\n<p>That's only for <code>eq_relations</code></p>\n</blockquote>\n<p>that's the one to look at</p>",
        "id": 238774493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002109
    },
    {
        "content": "<p>For <code>sub_relations</code> the value is just <code>()</code></p>",
        "id": 238774523,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002120
    },
    {
        "content": "<p>it tells you when two type variables ust be equal</p>",
        "id": 238774533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002122
    },
    {
        "content": "<p>yes, because <code>sub_relations</code> serves a different purpose</p>",
        "id": 238774576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002131
    },
    {
        "content": "<p>(I guess I'm just trying to figure out why types have two tables and <code>sub</code> is similar to the current region table and <code>eq</code> we want)</p>",
        "id": 238774637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002161
    },
    {
        "content": "<p>What is <code>sub_relations</code> for?</p>",
        "id": 238774673,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002181
    },
    {
        "content": "<p>it is to deal with the occurs check</p>",
        "id": 238774885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002269
    },
    {
        "content": "<p>ah</p>",
        "id": 238774907,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002285
    },
    {
        "content": "<p>when you have <code>T1 &lt;: T2</code> (but not necessarily <code>T1 = T2</code>), we unify them in the sub-relations</p>",
        "id": 238774918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002289
    },
    {
        "content": "<p>we use that to get a root variable during the occurs check</p>",
        "id": 238774950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002306
    },
    {
        "content": "<p>so that T1 cannot be assigned a value that contains T2 or vice versa</p>",
        "id": 238774970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002313
    },
    {
        "content": "<p>Okay so regions, we basically want to make the unification table like <code>eq_relations</code></p>",
        "id": 238775060,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002357
    },
    {
        "content": "<p>closer, anyway</p>",
        "id": 238775080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002362
    },
    {
        "content": "<p>we currently store the universe elsewhere</p>",
        "id": 238775129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002370
    },
    {
        "content": "<p>but we could use an <code>Option&lt;ty::Region&lt;'tcx&gt;&gt;</code> I imagine</p>",
        "id": 238775164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002381
    },
    {
        "content": "<p>so that when you unify a variable V with some non-variable region R, we use that</p>",
        "id": 238775214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002401
    },
    {
        "content": "<p>and when we unify two variables V1 and V2, we merge their values</p>",
        "id": 238775254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002422
    },
    {
        "content": "<p>one tricky bit: if they are both Some, that's an error, but we will detect and report it later</p>",
        "id": 238775303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002441
    },
    {
        "content": "<p>we can either return an Err</p>",
        "id": 238775315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002447
    },
    {
        "content": "<p>which will make the unification fail, and we just ignore that, I guess</p>",
        "id": 238775338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002455
    },
    {
        "content": "<p>or we could just pick one I guess</p>",
        "id": 238775455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002490
    },
    {
        "content": "<p>but that's weird</p>",
        "id": 238775461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002491
    },
    {
        "content": "<p>Why does <code>unify_values</code> return a <code>Result&lt;Self, NoError&gt;</code></p>",
        "id": 238775546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002523
    },
    {
        "content": "<p>Why not either just <code>Self</code> or <code>Result&lt;Self, E&gt;</code></p>",
        "id": 238775571,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002536
    },
    {
        "content": "<p>because sometimes the values can't be unified</p>",
        "id": 238775592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002547
    },
    {
        "content": "<p>what do you mean by <code>NoError</code>?</p>",
        "id": 238775618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002560
    },
    {
        "content": "<p><code>NoError</code> is in ena</p>",
        "id": 238775644,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002569
    },
    {
        "content": "<p>It can't be instantiated</p>",
        "id": 238775655,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002575
    },
    {
        "content": "<p>ah, yes, so</p>",
        "id": 238775674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002582
    },
    {
        "content": "<p>that is basically <code>!</code></p>",
        "id": 238775688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002590
    },
    {
        "content": "<p>the reason type variables return <code>!</code></p>",
        "id": 238775700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002596
    },
    {
        "content": "<p>is because we have another layer on top of this</p>",
        "id": 238775717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002602
    },
    {
        "content": "<p>we never unify two type variables if both are bound</p>",
        "id": 238775795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002617
    },
    {
        "content": "<p>if both have known values, we just recursively walk those</p>",
        "id": 238775822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002626
    },
    {
        "content": "<p>Oh</p>",
        "id": 238775874,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002643
    },
    {
        "content": "<p>It is <code>Self::Error</code></p>",
        "id": 238775893,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002650
    },
    {
        "content": "<p>so the path that <em>would</em> return an error instead calls <code>bug!</code></p>",
        "id": 238775906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002657
    },
    {
        "content": "<p>right</p>",
        "id": 238775924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002664
    },
    {
        "content": "<p>Okay okay</p>",
        "id": 238775952,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002675
    },
    {
        "content": "<p>So, essentially, rather than the value of <code>RegionVid</code> only being <code>RegionVidKey</code>, which is essentially just another <code>RegionVid</code>, it should also have the option value of the region</p>",
        "id": 238776328,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002800
    },
    {
        "content": "<p>I think we should do this in two steps</p>",
        "id": 238776357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002817
    },
    {
        "content": "<p>step 1 is make its value <code>()</code></p>",
        "id": 238776366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002822
    },
    {
        "content": "<p>and use the root var as the \"canonical\" one</p>",
        "id": 238776376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002828
    },
    {
        "content": "<p>step 2 is make it <code>Option&lt;Region&gt;</code></p>",
        "id": 238776395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002839
    },
    {
        "content": "<p>grr, this will be a <em>bit</em> annoying, because of the <code>'tcx</code> thing</p>",
        "id": 238776466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002850
    },
    {
        "content": "<p>you know what we could do</p>",
        "id": 238776500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002861
    },
    {
        "content": "<p>Ugh yeah, <code>RegionVid</code> doesn't have a <code>'tcx</code></p>",
        "id": 238776561,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002887
    },
    {
        "content": "<p>ok, well, we could use <code>RegionKind</code>, or perhaps <code>ty::PlaceholderRegion</code></p>",
        "id": 238776598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002898
    },
    {
        "content": "<p>or we make the annoying wrapper type we have for <code>Ty</code> with a <code>PhantomData</code></p>",
        "id": 238776620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/238776598\">said</a>:</p>\n<blockquote>\n<p>ok, well, we could use <code>RegionKind</code>, or perhaps <code>ty::PlaceholderRegion</code></p>\n</blockquote>\n<p>those types are kind of big, so I'm not thrilled about that</p>",
        "id": 238776679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002927
    },
    {
        "content": "<p>I'd rather use an <code>Option&lt;&amp;...&gt;</code></p>",
        "id": 238776693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/238776620\">said</a>:</p>\n<blockquote>\n<p>or we make the annoying wrapper type we have for <code>Ty</code> with a <code>PhantomData</code></p>\n</blockquote>\n<p>I think we have to do this</p>",
        "id": 238776728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002947
    },
    {
        "content": "<p>someday I want to make ena 2.0</p>",
        "id": 238776745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002956
    },
    {
        "content": "<p>well, probably 1.0 :)</p>",
        "id": 238776750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002959
    },
    {
        "content": "<p>I don't love that library</p>",
        "id": 238776773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002963
    },
    {
        "content": "<p>anyway</p>",
        "id": 238776809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621002971
    },
    {
        "content": "<p>What's wrong with ena</p>",
        "id": 238776859,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621002995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/238776728\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/238776620\">said</a>:</p>\n<blockquote>\n<p>or we make the annoying wrapper type we have for <code>Ty</code> with a <code>PhantomData</code></p>\n</blockquote>\n<p>I think we have to do this</p>\n</blockquote>\n<p>Should be easy enough</p>",
        "id": 238776880,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621003010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/238776859\">said</a>:</p>\n<blockquote>\n<p>What's wrong with ena</p>\n</blockquote>\n<p>the API is just not as ergonomic as I would like</p>",
        "id": 238776898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003019
    },
    {
        "content": "<p>it might be that I want to make a wrapper around ena</p>",
        "id": 238776907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003025
    },
    {
        "content": "<p>I wrote a different version for lark I liked better</p>",
        "id": 238776927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003034
    },
    {
        "content": "<p>that also had more \"debuggability\"-- e.g., it let you trace <em>why</em> something was unified</p>",
        "id": 238776958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003051
    },
    {
        "content": "<p>i forget exactly what I did differently</p>",
        "id": 238776979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003062
    },
    {
        "content": "<p>ena is reasonably fast though</p>",
        "id": 238777006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003076
    },
    {
        "content": "<p>I'm sure it could be tuned but I did profile it and optimize it some</p>",
        "id": 238777087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003093
    },
    {
        "content": "<p>side note that having a separate crate made that <em>so</em> much easier</p>",
        "id": 238777145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003112
    },
    {
        "content": "<p>(score one for library-ification)</p>",
        "id": 238777152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003115
    },
    {
        "content": "<p>Related: I find it odd that rustc uses ena <em>through</em> rustc_data_structures</p>",
        "id": 238777278,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621003165
    },
    {
        "content": "<p>like, just import ena</p>",
        "id": 238777289,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621003170
    },
    {
        "content": "<p>Okay so, I think I can do this</p>",
        "id": 238777454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621003228
    },
    {
        "content": "<p>One last question <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 238777467,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621003234
    },
    {
        "content": "<p>Why would you say a SCC search is <em>right</em></p>",
        "id": 238777484,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621003245
    },
    {
        "content": "<p>Because we can have two sub relations without actual unification?</p>",
        "id": 238777530,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621003263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> yes</p>",
        "id": 238779107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003904
    },
    {
        "content": "<p>ideally I think we would <em>either</em> just record <code>'a: 'b</code> <em>or</em> unification</p>",
        "id": 238779119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003917
    },
    {
        "content": "<p>not some weird hacky version of both</p>",
        "id": 238779127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003922
    },
    {
        "content": "<p>i have been idly musing around writing an incremental SCC algorithm</p>",
        "id": 238779196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003935
    },
    {
        "content": "<p>we could use <span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span>'s code for that :)</p>",
        "id": 238779219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003945
    },
    {
        "content": "<p>that's what I think I really want here...</p>",
        "id": 238779236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003952
    },
    {
        "content": "<p>...not in this PR !</p>",
        "id": 238779281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621003971
    },
    {
        "content": "<p>Sounds interesting :)</p>",
        "id": 238779399,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621004021
    },
    {
        "content": "<p><a href=\"https://cs.stackexchange.com/questions/96424/incremental-strongly-connected-components\">https://cs.stackexchange.com/questions/96424/incremental-strongly-connected-components</a></p>",
        "id": 238779493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004047
    },
    {
        "content": "<blockquote>\n<p>I'm not sure whether there is a good algorithm for directed graphs</p>\n</blockquote>",
        "id": 238779520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004060
    },
    {
        "content": "<p>impossible :)</p>",
        "id": 238779529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004063
    },
    {
        "content": "<p><a href=\"https://arxiv.org/abs/1105.2397\">https://arxiv.org/abs/1105.2397</a></p>",
        "id": 238779578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004094
    },
    {
        "content": "<p>hmm</p>",
        "id": 238779761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621004166
    },
    {
        "content": "<p>this looks interesting</p>",
        "id": 238779771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004169
    },
    {
        "content": "<p><a href=\"https://www.sciencedirect.com/science/article/pii/0304397586900988\">https://www.sciencedirect.com/science/article/pii/0304397586900988</a></p>",
        "id": 238779772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004170
    },
    {
        "content": "<blockquote>\n<p>A data structure is presented for the problem of maintaining a digraph under an arbitrary sequence of two kinds of operations: an Add operation that inserts an arc in the digraph, and a Searchpath operation that checks the presence of a path between a pair of nodes. Our data structure supports both operations in O(n) amortized time and requires O(n2) space, where n is the number of nodes in the digraph.</p>\n</blockquote>",
        "id": 238779779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004175
    },
    {
        "content": "<p>I love writing code like that =)</p>",
        "id": 238779868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004219
    },
    {
        "content": "<p>So would the idea be to replace ena with a more generalized directed graph approach</p>",
        "id": 238779874,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621004223
    },
    {
        "content": "<p>for regions specifically, yes</p>",
        "id": 238779899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004234
    },
    {
        "content": "<p>I'm not sure this is worth the energy to actually <em>do</em> but it may be</p>",
        "id": 238779914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004245
    },
    {
        "content": "<p>Could you do the same for types though?</p>",
        "id": 238779935,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621004256
    },
    {
        "content": "<p>I'm just thinking about the cases in Chalk where we end up with a <code>?0 &lt;: ?1</code> and <code>?1 &lt;: ?0</code></p>",
        "id": 238779967,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621004278
    },
    {
        "content": "<p>Not sure if that's 100% applicable though</p>",
        "id": 238780053,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621004308
    },
    {
        "content": "<p>I don't know</p>",
        "id": 238780099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004338
    },
    {
        "content": "<p>maybe</p>",
        "id": 238780113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004346
    },
    {
        "content": "<p>So, not sure if this is because of the <em>other</em> changes in this branch (I don't think so), but changing <code>opportunistic_resolve_var</code> to <code>self.unification_table().find(rid)</code> makes a bunch of tests fail</p>",
        "id": 238780307,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621004413
    },
    {
        "content": "<p>So there might be some subtlety I'm missing</p>",
        "id": 238780416,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621004448
    },
    {
        "content": "<p>interesting</p>",
        "id": 238781178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004749
    },
    {
        "content": "<p>I don't know why that would be</p>",
        "id": 238781192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004756
    },
    {
        "content": "<p>okay okay, most of these might be the current branch's changes</p>",
        "id": 238781256,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621004770
    },
    {
        "content": "<p>let me do this in a fresh branch</p>",
        "id": 238781284,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621004779
    },
    {
        "content": "<p>yeah I'd probably <code>git stash</code> the current changes and do this work independently</p>",
        "id": 238781294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621004785
    },
    {
        "content": "<p>I'm going to have to hop off in a bit though</p>",
        "id": 238781512,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621004883
    },
    {
        "content": "<p>Think I'm gonna spend 15 minutes</p>",
        "id": 238781571,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621004897
    },
    {
        "content": "<p>Okay only one error:</p>\n<div class=\"codehilite\"><pre><span></span><code>---- [ui] ui/traits/inductive-overflow/lifetime.rs stdout ----\ndiff of stderr:\n\n7       LL |     is_send::&lt;X&lt;C&lt;&#39;static&gt;&gt;&gt;();\n8          |     ^^^^^^^^^^^^^^^^^^^^^^^^\n9          |\n-       note: required because of the requirements on the impl of `NotAuto` for `X&lt;C&lt;&#39;static&gt;&gt;`\n+       note: required because of the requirements on the impl of `NotAuto` for `X&lt;C&lt;&#39;_&gt;&gt;`\n11        --&gt; $DIR/lifetime.rs:19:12\n12         |\n13      LL | impl&lt;T: Y&gt; NotAuto for X&lt;T&gt; where T::P: NotAuto {}\n\n14         |            ^^^^^^^     ^^^^\n+          = note: 2 redundant requirements hidden\n+          = note: required because of the requirements on the impl of `NotAuto` for `X&lt;C&lt;&#39;static&gt;&gt;`\n15\n16      error: aborting due to previous error\n</code></pre></div>",
        "id": 238784194,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621005974
    },
    {
        "content": "<p>interesting</p>",
        "id": 238788664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621007952
    },
    {
        "content": "<p>git you perhance git blame to see if there was anything interesting/</p>",
        "id": 238788735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621007986
    },
    {
        "content": "<p>that error looks pretty close</p>",
        "id": 238788856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621008022
    },
    {
        "content": "<p>No, I haven't looked into it at all. Had to get off and do actual work</p>",
        "id": 238788862,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621008025
    },
    {
        "content": "<p>how dare you</p>",
        "id": 238788915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621008032
    },
    {
        "content": "<p>Yeah, the same information is there</p>",
        "id": 238788928,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621008038
    },
    {
        "content": "<p>So I'm not super concerned</p>",
        "id": 238788949,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621008043
    },
    {
        "content": "<p>Especially given that this seems to be happening on an overflow, so theoretically an edge case</p>",
        "id": 238789069,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621008094
    },
    {
        "content": "<p>So...I think I've gotten the implementation done</p>",
        "id": 238856640,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621042419
    },
    {
        "content": "<p>5 test failures</p>",
        "id": 238856646,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621042429
    },
    {
        "content": "<p><code>ui/rfc1623.rs</code>:</p>",
        "id": 238856723,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621042465
    },
    {
        "content": "<p>A bunch of</p>\n<div class=\"codehilite\"><pre><span></span><code>+       error[E0308]: mismatched types\n+         --&gt; $DIR/rfc1623.rs:24:8\n+          |\n+       LL |     f: &amp;id,\n+          |        ^^^ one type is more general than the other\n+          |\n+          = note: expected reference `&amp;&#39;a Foo&lt;&#39;b&gt;`\n+                     found reference `&amp;&#39;a Foo&lt;&#39;b&gt;`\n</code></pre></div>",
        "id": 238856746,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621042478
    },
    {
        "content": "<p>That doesn't look right</p>",
        "id": 238856749,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621042481
    },
    {
        "content": "<p>I mean, the good news is this isn't a <em>new</em> error:</p>",
        "id": 238856870,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621042583
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>LL |     f: &amp;id,\n   |        ^^^ implementation of `FnOnce` is not general enough\n</code></pre></div>",
        "id": 238856876,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621042586
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/85313\">#85313</a></p>",
        "id": 238862475,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621047971
    },
    {
        "content": "<p>It's not perfect (some bad diagnostic changes, but I think no semantic changes)</p>",
        "id": 238862491,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621047995
    },
    {
        "content": "<p><em>but</em>, the issue we were discussing in the projection normalization branch <em>is</em> fixed when rebased onto this</p>",
        "id": 238862515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621048036
    },
    {
        "content": "<p>So it does what we want it to :)</p>",
        "id": 238862518,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621048043
    },
    {
        "content": "<p>Assuming my previous triage of the projection normalization tests holds, that leaves only two tests that are problematic</p>",
        "id": 238863613,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621048953
    },
    {
        "content": "<p><code>ui/associated-types/hr-associated-type-bound-param-6.rs</code>, which now emits \"<code>T: X&lt;'b, T&gt;</code> is not satisfied\" instead of \"<code>for&lt;'b&gt; T: X&lt;'b, T&gt;</code> is not satisfied\"</p>",
        "id": 238863637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621048991
    },
    {
        "content": "<p>But otherwise fine, except for diagnostics</p>",
        "id": 238863641,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621049002
    },
    {
        "content": "<p>And <code>ui/issues/issue-27901.rs</code></p>",
        "id": 238863647,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621049009
    },
    {
        "content": "<p>Which now emits a \"error[E0605]: non-primitive cast\"</p>",
        "id": 238863651,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621049019
    },
    {
        "content": "<p>(<code>for&lt;'s&gt; fn(&amp;'s str) -&gt; (&amp;'s str, &lt;&amp;'s str as Stream&gt;::Item) {f}</code> as <code>for&lt;'t&gt; fn(&amp;'t str) -&gt; (&amp;'t str, &lt;&amp;'t str as Stream&gt;::Item)</code>)</p>",
        "id": 238863709,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621049045
    },
    {
        "content": "<p>ugh wait</p>",
        "id": 238863741,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621049092
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>ui/issues/issue-38381.rs\n</code></pre></div>",
        "id": 238863744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621049098
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: broken MIR in DefId(0:6 ~ issue_38381[317d]::main) (CanonicalUserTypeAnnotation { user_ty: Canonical { max_universe: U0, variables: [], value: Ty(for&lt;&#39;r&gt; fn(&amp;&#39;r i32) -&gt; &lt;&amp;&#39;r i32 as std::ops::Deref&gt;::Target) }, span: /home/hueyj/temp/rust/rust/src/test/ui/issues/issue-38381.rs:6:13: 6:48 (#0), inferred_ty: for&lt;&#39;r&gt; fn(&amp;&#39;r i32) -&gt; &lt;&amp;&#39;r i32 as std::ops::Deref&gt;::Target }): bad user type (for&lt;&#39;r&gt; fn(&amp;&#39;r i32) -&gt; i32 = for&lt;&#39;r&gt; fn(&amp;&#39;r i32) -&gt; &lt;&amp;&#39;r i32 as std::ops::Deref&gt;::Target): NoSolution\n</code></pre></div>",
        "id": 238863758,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621049111
    },
    {
        "content": "<p>Anyways, those aren't for tonight</p>",
        "id": 238863782,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621049131
    },
    {
        "content": "<p><code>ui/closures/issue-41366.rs</code> also ICEs</p>",
        "id": 238863855,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621049188
    },
    {
        "content": "<p>So--- I wonder if the bad diagnostics and other problems arise from the (Some(_), Some(_)) case</p>",
        "id": 238876793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621063509
    },
    {
        "content": "<p>we could instead return Err if the two regions are not equal</p>",
        "id": 238876807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621063519
    },
    {
        "content": "<p>and just fail to unify in that case</p>",
        "id": 238876811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621063527
    },
    {
        "content": "<p>but i'm pondering what the implications could be</p>",
        "id": 238876813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621063531
    },
    {
        "content": "<p>I'd sort of rather have unification succeed but go to some value that indicates \"many-values\"</p>",
        "id": 238876825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621063549
    },
    {
        "content": "<p>I'm annoyed that an Option like this has size 16 and not 8:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">TriValue</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">NoValue</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">OneValue</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">tcx</span><span class=\"w\"> </span><span class=\"n\">Region</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">MultipleValues</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238876890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621063595
    },
    {
        "content": "<p>you'd think there'd be enough bits to make that work</p>",
        "id": 238876898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621063615
    },
    {
        "content": "<p>it's also annoying that the <code>unify_values</code> routine doesn't, I think, get access to a tcx</p>",
        "id": 238876976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621063702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 238902335,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621089456
    },
    {
        "content": "<p>(don't know if you're around)</p>",
        "id": 238902337,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621089461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/238876793\">said</a>:</p>\n<blockquote>\n<p>So--- I wonder if the bad diagnostics and other problems arise from the (Some(_), Some(_)) case</p>\n</blockquote>\n<p>Possibly. I think the problem essentially boils down to the fact that we <em>were</em> using <code>ReVar</code> and now will opportunistically resolve to an actual region. And because sometimes the region is \"arbitrary\" i.e. when there are multiple different regions that unify, the opportunistic region isn't the same as the region we would necessarily get later when we resolve the constraints, and so errors occur at different places</p>",
        "id": 238902576,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621089704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/238876811\">said</a>:</p>\n<blockquote>\n<p>and just fail to unify in that case</p>\n</blockquote>\n<p>So, since <code>value1</code> is the \"var\" value, then failing to unify should leave that value intact, which ends up being equal to the current code</p>",
        "id": 238902973,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621090060
    },
    {
        "content": "<p>I don't think it's equivalent</p>",
        "id": 238903074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090118
    },
    {
        "content": "<p>I agree it may not be better</p>",
        "id": 238903078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090123
    },
    {
        "content": "<p>I think the better thing would be to not fail but go to 'multiple'</p>",
        "id": 238903086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090132
    },
    {
        "content": "<p>in which case, you would not canonicalize to the placeholder or what have you</p>",
        "id": 238903091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090140
    },
    {
        "content": "<p>but instead to the root variable</p>",
        "id": 238903094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/238876825\">said</a>:</p>\n<blockquote>\n<p>I'd sort of rather have unification succeed but go to some value that indicates \"many-values\"</p>\n</blockquote>\n<p>This is not a bad idea. The only \"problem\" I can think of, is that if we opportunistically resolve regions <em>before</em> we get multiple values, we still can pick an \"arbitrary\" region</p>",
        "id": 238903107,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621090161
    },
    {
        "content": "<p>mm, yes, I see</p>",
        "id": 238903116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090179
    },
    {
        "content": "<p>I wonder</p>",
        "id": 238903125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090192
    },
    {
        "content": "<p>(this btw is partly why I never wanted to have to do this reverse-mapping)</p>",
        "id": 238903171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090205
    },
    {
        "content": "<p>...but given that we're trying to make it work....</p>",
        "id": 238903180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090215
    },
    {
        "content": "<p>maybe what we need is not quite the same as the opportunistic resolve</p>",
        "id": 238903184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090222
    },
    {
        "content": "<p>maybe we should do a different thing, specific to reverse mapping placeholders</p>",
        "id": 238903194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090231
    },
    {
        "content": "<p>they <em>are</em> somewhat special</p>",
        "id": 238903200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090235
    },
    {
        "content": "<p>well</p>",
        "id": 238903214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090251
    },
    {
        "content": "<p>I was going to say \"we know that we have all the constraints relevant to them available\"</p>",
        "id": 238903222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090260
    },
    {
        "content": "<p>but that's not entirely true</p>",
        "id": 238903224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090263
    },
    {
        "content": "<p>the obligations we pass back may produce more</p>",
        "id": 238903234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090269
    },
    {
        "content": "<p>Well, I mean, let's remember: the reason we went down this path is as a hack</p>",
        "id": 238903260,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621090302
    },
    {
        "content": "<p>Since we create a variable and basically immediately unify it</p>",
        "id": 238903266,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621090311
    },
    {
        "content": "<p>I mean, I think keeping <code>opportunistically_resolve_vars</code> is fine</p>",
        "id": 238903347,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621090365
    },
    {
        "content": "<p>well, the point is more this</p>",
        "id": 238903360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090384
    },
    {
        "content": "<p>And then just add <code>opportunistically_resolve_values</code> for projection normalization (placeholder reverse mapping)</p>",
        "id": 238903367,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621090392
    },
    {
        "content": "<p>that the <em>other</em> places using <code>opportunistically_resolve_vars</code> may not want to change</p>",
        "id": 238903371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090399
    },
    {
        "content": "<p>so maybe we kind of have a 3rd thing going on here</p>",
        "id": 238903380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090410
    },
    {
        "content": "<p>ngl this got me thinking about the projection normalization in Chalk...whoops</p>",
        "id": 238903431,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621090445
    },
    {
        "content": "<p>But yeah, I'm going to try to just revert <code>OpportunisticRegionResolver</code> to only resolve to root vars</p>",
        "id": 238903561,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621090590
    },
    {
        "content": "<p>and separately have projection normalization be able to resolve values</p>",
        "id": 238903572,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621090603
    },
    {
        "content": "<p>I think that's right</p>",
        "id": 238903589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090629
    },
    {
        "content": "<p>minimize disruption</p>",
        "id": 238903595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090635
    },
    {
        "content": "<p>that said, I don't think it'll cause <em>problems</em> to opportunistically resolve even if we haven't seen all the constraints yet, as long as we've seen \"enough\" constraints</p>",
        "id": 238903607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090656
    },
    {
        "content": "<p>i.e., if we see an <code>=</code>, that should be ok</p>",
        "id": 238903609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090661
    },
    {
        "content": "<p>I mean: as-is, the code is \"fine\" in that semantics haven't changed</p>",
        "id": 238903671,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621090706
    },
    {
        "content": "<p>right</p>",
        "id": 238903679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090715
    },
    {
        "content": "<p>The only real problem is diagnostics</p>",
        "id": 238903681,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621090720
    },
    {
        "content": "<p>right</p>",
        "id": 238903684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621090725
    },
    {
        "content": "<p>I think it's totally doable to be smarter with those and keep this. But for now, minimizing disruption is probably best</p>",
        "id": 238903773,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621090807
    },
    {
        "content": "<p>Ok, so I dug into the <code>for&lt;'b&gt; T: X&lt;'b, T&gt;</code> -&gt; <code>T: X&lt;'!b, T&gt;</code> issue last night</p>",
        "id": 239422865,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621430620
    },
    {
        "content": "<p>So, the important bit is what happens when <code>T: X&lt;'b, T&gt;</code> <em>can't</em> be resolved</p>",
        "id": 239423039,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621430667
    },
    {
        "content": "<p><a href=\"https://github.com/jackh726/rust/blob/6f20d3a3b2c50cf1780d9524e24658cddad5d596/compiler/rustc_trait_selection/src/traits/project.rs#L683\">https://github.com/jackh726/rust/blob/6f20d3a3b2c50cf1780d9524e24658cddad5d596/compiler/rustc_trait_selection/src/traits/project.rs#L683</a></p>",
        "id": 239423090,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621430692
    },
    {
        "content": "<p>huh</p>",
        "id": 239423130,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621430706
    },
    {
        "content": "<p>why is that 404</p>",
        "id": 239423145,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621430711
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/3e827cc21e0734edd26170e8d1481f0d66a1426b/compiler/rustc_trait_selection/src/traits/project.rs#L546\">https://github.com/rust-lang/rust/blob/3e827cc21e0734edd26170e8d1481f0d66a1426b/compiler/rustc_trait_selection/src/traits/project.rs#L546</a></p>",
        "id": 239423236,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621430752
    },
    {
        "content": "<p>Basically, <code>project_type</code> may return a <code>ProjectionTyError::TraitSelectionError</code> if the trait ref can't be resolved. And for better diagnostics, we add an extra trait predicate</p>",
        "id": 239423447,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621430820
    },
    {
        "content": "<p>reading</p>",
        "id": 239423451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621430822
    },
    {
        "content": "<p>The problem in this case, is that we <em>really</em> want that predicate to be <code>for&lt;'b&gt; T: X&lt;'b, T&gt;</code></p>",
        "id": 239423507,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621430845
    },
    {
        "content": "<p>Not with the placeholder</p>",
        "id": 239423527,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621430851
    },
    {
        "content": "<p>I'm looking</p>",
        "id": 239423579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621430871
    },
    {
        "content": "<p>I think the problem is really the diagnostics</p>",
        "id": 239423589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621430876
    },
    {
        "content": "<p>I think that they should detect placeholders and print them differently</p>",
        "id": 239423612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621430883
    },
    {
        "content": "<p>I thought about that</p>",
        "id": 239423679,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621430896
    },
    {
        "content": "<p>Just making them treat placeholders with late bound vars as late bound themselves</p>",
        "id": 239423709,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621430912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/239423447\">said</a>:</p>\n<blockquote>\n<p>And for better diagnostics, we add an extra trait predicate</p>\n</blockquote>\n<p>why do you say this is for better diagnostics and not some other reason?</p>",
        "id": 239423743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621430926
    },
    {
        "content": "<p>I'm thinking about the way we print things</p>",
        "id": 239423819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621430957
    },
    {
        "content": "<p>Well, otherwise the projection just normalizes to an inference variable</p>",
        "id": 239423898,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621430995
    },
    {
        "content": "<p>and we eventually get a \"type annotations needed\" error</p>",
        "id": 239423944,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431004
    },
    {
        "content": "<p>Which is <em>worse</em> that a \"T doesn't implement <code>for&lt;'b&gt; X&lt;'b, T&gt;</code>\"</p>",
        "id": 239423997,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431025
    },
    {
        "content": "<p>Or worse even than \"T doesn't implement <code>X&lt;'b, T&gt;</code>\" for that matter</p>",
        "id": 239424074,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431053
    },
    {
        "content": "<p>I am wondering about</p>",
        "id": 239424405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431176
    },
    {
        "content": "<p>a print out like \"T must implement <code>X&lt;'b, T&gt;</code> for any region <code>'b</code>\"</p>",
        "id": 239424487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431194
    },
    {
        "content": "<p>but I guess it would be better to print in that style uniformly or not at all</p>",
        "id": 239424553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431220
    },
    {
        "content": "<p>(I was imagining capturing in-scope placeholders and referencing them this way)</p>",
        "id": 239424580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431231
    },
    {
        "content": "<p>I don't think we are very good at explaining higher-ranked things in our errors</p>",
        "id": 239424661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431248
    },
    {
        "content": "<p>I'm always thinking about how I would explain it to another human</p>",
        "id": 239424686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431255
    },
    {
        "content": "<p>Yeah, then we end up with two different styles, depending on how we add the trait ref</p>",
        "id": 239424698,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/239424487\">said</a>:</p>\n<blockquote>\n<p>a print out like \"T must implement <code>X&lt;'b, T&gt;</code> for any region <code>'b</code>\"</p>\n</blockquote>\n<p>I would use words like this</p>",
        "id": 239424714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431260
    },
    {
        "content": "<p>(not that that's the worst thing ever)</p>",
        "id": 239424760,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431280
    },
    {
        "content": "<p>but yes, I think that' s a separate discussion</p>",
        "id": 239424771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431283
    },
    {
        "content": "<p>how hard would it be to detect placeholders and convert to bound form, do you think</p>",
        "id": 239424800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431300
    },
    {
        "content": "<p>it sort of loses information</p>",
        "id": 239424820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431307
    },
    {
        "content": "<p>Where? In the pretty printing code, it's pretty easy to just modify the collect late bound regions to add placeholders</p>",
        "id": 239424882,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431333
    },
    {
        "content": "<p>That's the only place I would feel comfortable adding that though</p>",
        "id": 239424917,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431350
    },
    {
        "content": "<p>I've also thought about two other potential solutions:</p>",
        "id": 239425187,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431456
    },
    {
        "content": "<p>1) \"Eagerly\" add the trait refs in projections as separate predicates <em>before</em> converting bound vars to placeholders</p>",
        "id": 239425304,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431496
    },
    {
        "content": "<p>(and then don't add anything when we fail to project)</p>",
        "id": 239425341,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431513
    },
    {
        "content": "<p>2) Substitute placeholders for the bound vars from which they came in <code>fold_binders</code> in all (new?) obligations, being sure to append the bound vars to the obligations too</p>",
        "id": 239425485,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/239424882\">said</a>:</p>\n<blockquote>\n<p>Where? In the pretty printing code, it's pretty easy to just modify the collect late bound regions to add placeholders</p>\n</blockquote>\n<p>yes, in petty printing</p>",
        "id": 239425614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431619
    },
    {
        "content": "<p>That's the most simple and straightforward</p>",
        "id": 239425675,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/239425485\">said</a>:</p>\n<blockquote>\n<p>2) Substitute placeholders for the bound vars from which they came in <code>fold_binders</code> in all (new?) obligations, being sure to append the bound vars to the obligations too</p>\n</blockquote>\n<p>I don't thnk we should do this</p>",
        "id": 239425686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431645
    },
    {
        "content": "<p>it's going in the wrong direction</p>",
        "id": 239425702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431651
    },
    {
        "content": "<p>we want to be moving <em>towards</em> placeholders and away from \"substituing back\" towards bound forms</p>",
        "id": 239425725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431661
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 239425767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/239425304\">said</a>:</p>\n<blockquote>\n<p>1) \"Eagerly\" add the trait refs in projections as separate predicates <em>before</em> converting bound vars to placeholders</p>\n</blockquote>\n<p>this could be ok, not sure. I don't totally love it because it's the kind of \"non-trivial desugaring\" I would like to avoid on the path towards chalk</p>",
        "id": 239425784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431685
    },
    {
        "content": "<p>I think overall I'd rather handle this in error reporting</p>",
        "id": 239425810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431696
    },
    {
        "content": "<p>placeholders will show up elsewhere, after all</p>",
        "id": 239425820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431700
    },
    {
        "content": "<p>what do you mean by \"non-trivial desugaring\"</p>",
        "id": 239425853,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431711
    },
    {
        "content": "<p>well, maybe I take it back actually</p>",
        "id": 239425927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431726
    },
    {
        "content": "<p>I was thinking that <code>T: Trait&lt;Item = X&gt;</code> desugaring to <code>T: Trait</code> and not just the projection was \"non-trivial\", but in a way it makes sense, Rust only supports the \"compound form\" in its surface syntax</p>",
        "id": 239425988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431753
    },
    {
        "content": "<p>I do think though that relying on particular orderings in the predicates for diagnostics is a bit of a hack</p>",
        "id": 239426037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431771
    },
    {
        "content": "<p>in my mind the order in which we process predicates is not defined</p>",
        "id": 239426051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621431776
    },
    {
        "content": "<p>Well, so</p>",
        "id": 239426097,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431793
    },
    {
        "content": "<p>That \"predicate\" <em>would</em> desugar into two predicates</p>",
        "id": 239426141,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431813
    },
    {
        "content": "<p>The problem is when we get something like <code>&lt;T as Trait&gt;::Item = X</code></p>",
        "id": 239426194,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431835
    },
    {
        "content": "<p>Okay, let me modify the pretty printing code to print placeholders as bound vars</p>",
        "id": 239426383,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621431897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/239426141\">said</a>:</p>\n<blockquote>\n<p>That \"predicate\" <em>would</em> desugar into two predicates</p>\n</blockquote>\n<p>right I get it</p>",
        "id": 239426937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/239426383\">said</a>:</p>\n<blockquote>\n<p>Okay, let me modify the pretty printing code to print placeholders as bound vars</p>\n</blockquote>\n<p>anyway I still like this best :)</p>",
        "id": 239426956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432109
    },
    {
        "content": "<p>I think so too</p>",
        "id": 239426989,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621432126
    },
    {
        "content": "<p>Marginally</p>",
        "id": 239426994,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621432129
    },
    {
        "content": "<p>the main reason I like is that I want to go more towards placeholders</p>",
        "id": 239427062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432159
    },
    {
        "content": "<p>and so I think we are eventually going to see <em>all</em> our errors showing up as placeholder errorse</p>",
        "id": 239427091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432172
    },
    {
        "content": "<p>and want to be able to detect and recover from those</p>",
        "id": 239427104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432177
    },
    {
        "content": "<p>Reasonable</p>",
        "id": 239427426,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621432295
    },
    {
        "content": "<p>All seems like a lot though</p>",
        "id": 239427546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621432326
    },
    {
        "content": "<p>So</p>",
        "id": 239427744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621432403
    },
    {
        "content": "<p>This does bring up one future issue</p>",
        "id": 239427761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621432412
    },
    {
        "content": "<p>If/when we just use the binders for pretty printing</p>",
        "id": 239427818,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621432430
    },
    {
        "content": "<p>And we don't want to go through the type to find late bound regions</p>",
        "id": 239427891,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621432445
    },
    {
        "content": "<p>I guess we'll have to still now</p>",
        "id": 239427921,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621432456
    },
    {
        "content": "<p>Actually <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, what I wrote literally just above ^ I think is the only thing to discuss</p>",
        "id": 239748543,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621603133
    },
    {
        "content": "<p>i.e. how we want to handle pretty printing in the future when we want to use the bound vars instead of storing them in the bound regions/types themselves</p>",
        "id": 239748612,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621603173
    },
    {
        "content": "<p>Also might make sense for you to read through the PR and see if there is anything that jumps out at you</p>",
        "id": 239748796,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621603248
    },
    {
        "content": "<p>(We could also discuss the Chalk closure bug, but I feel like I should try to put together some notes on that; I don't want to keep putting it off though)</p>",
        "id": 239748916,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621603296
    },
    {
        "content": "<p>ok, I'm back</p>",
        "id": 239749368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621603484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/239427891\">said</a>:</p>\n<blockquote>\n<p>And we don't want to go through the type to find late bound regions</p>\n</blockquote>\n<p>I don't understand this</p>",
        "id": 239749411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621603509
    },
    {
        "content": "<p>we're talking just about during pretty printing, right?</p>",
        "id": 239749440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621603519
    },
    {
        "content": "<p>Yes</p>",
        "id": 239749471,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621603532
    },
    {
        "content": "<p>I see. I don't really see any problem with going through  the type during pretty printing</p>",
        "id": 239749507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621603547
    },
    {
        "content": "<p>So, the plan <em>was</em> to eventually remove the <code>var</code> on <code>BoundRegion</code></p>",
        "id": 239749508,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621603548
    },
    {
        "content": "<p>err <code>kind</code></p>",
        "id": 239749513,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621603552
    },
    {
        "content": "<p>Okay</p>",
        "id": 239749594,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621603571
    },
    {
        "content": "<p>Easy enough then :)</p>",
        "id": 239749627,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621603584
    },
    {
        "content": "<p>Maybe just quickly read through the PR then?</p>",
        "id": 239749688,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621603614
    },
    {
        "content": "<p>ok</p>",
        "id": 239749739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621603639
    },
    {
        "content": "<p>lemme look</p>",
        "id": 239749748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621603643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> this PR is very confusing :P</p>",
        "id": 239753348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621605009
    },
    {
        "content": "<p>I think I should not have tried to read it commit by commit</p>",
        "id": 239753363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621605014
    },
    {
        "content": "<p>I feel like I keep reading the same code over and over</p>",
        "id": 239753374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621605019
    },
    {
        "content": "<p>before I relize you're moving it form one place to another</p>",
        "id": 239753383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621605026
    },
    {
        "content": "<p>No, don't read commit by commit</p>",
        "id": 239753426,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621605039
    },
    {
        "content": "<p>I also messed up the rebase somehow at some point and had to redo the changes in \"Normalize after liberating late bound regions\" that you had done between a couple earlier commits</p>",
        "id": 239753555,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621605095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> is src/test/ui/associated-types/hr-associated-type-bound-2.rs no longer a blocker for merging the PR?</p>",
        "id": 239754503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621605395
    },
    {
        "content": "<p>which one is that...</p>",
        "id": 239754597,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621605439
    },
    {
        "content": "<p>one sec</p>",
        "id": 239754599,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621605441
    },
    {
        "content": "<p>impl X&lt;'_&gt; for u32 //~ overflow evaluating the requirement <code>for&lt;'b&gt; u32: X&lt;'b&gt;</code></p>",
        "id": 239754612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621605447
    },
    {
        "content": "<p>I think it is</p>",
        "id": 239754636,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621605461
    },
    {
        "content": "<p>Shouldn't be overflowing there</p>",
        "id": 239754660,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621605473
    },
    {
        "content": "<p>(I'm working on the overflow right now, actually)</p>",
        "id": 239754702,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621605483
    },
    {
        "content": "<p>does it overflow in the wfcheck?</p>",
        "id": 239754796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621605505
    },
    {
        "content": "<p>I can see why it might overflow</p>",
        "id": 239754842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621605531
    },
    {
        "content": "<p>I don't know</p>",
        "id": 239755168,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621605628
    },
    {
        "content": "<p>I started with the other one</p>",
        "id": 239755178,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621605633
    },
    {
        "content": "<p>this feels related to the \"implemented vs fully implemented\" distinction that <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> introduced for implied bounds</p>",
        "id": 239755242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621605649
    },
    {
        "content": "<p>still, pretty awesome!</p>",
        "id": 239755327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621605675
    },
    {
        "content": "<p>I want to see if I can make a test case that requires the inerence variable thing</p>",
        "id": 239755339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621605683
    },
    {
        "content": "<p>Okay :)</p>",
        "id": 239755516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621605747
    },
    {
        "content": "<p>Okay so, the test I'm looking at it <code>src/test/ui/recursion/issue-83150.rs</code></p>",
        "id": 240049813,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621862430
    },
    {
        "content": "<p>ok, let me pull it up</p>",
        "id": 240050082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621862562
    },
    {
        "content": "<p>I'm also sync'ing with your branch</p>",
        "id": 240050219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621862633
    },
    {
        "content": "<p>Looks like it keeps going because obligations like this keep getting registered:</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_trait_selection::traits::fulfill register_predicate_obligation, obligation=Obligation(predicate=Binder(TraitPredicate(&lt;std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt; as std::iter::Iterator&gt;), []), cause=ObligationCauseData { span: src/test/ui/recursion/issue-83150.rs:1:1: 1:1 (#0), body_id: HirId { owner: DefId(0:0 ~ issue_83150[317d]), local_id: 0 }, code: ImplDerivedObligation(DerivedObligationCause { parent_trait_ref: Binder(&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Ma\nDEBUG rustc_trait_selection::traits::fulfill register_predicate_obligation, obligation=Obligation(predicate=Binder(TraitPredicate(&lt;std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt; as std::iter::Iterator&gt;), []), cause=ObligationCauseData { span: src/test/ui/recursion/issue-83150.rs:1:1: 1:1 (#0), body_id: HirId { owner: DefId(0:0 ~ issue_83150[317d]), local_id: 0 }, code: ImplDerivedObligation(DerivedObligationCause { parent_trait_ref: Binder(&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;, [func&lt;std::iter::Map&lt;&amp;ReErased mut std::ops::Range&lt;u8&gt;, [func&lt;std::ops::Range&lt;u8&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt;&gt;::{closure#0} closure_kind_ty=i16 closure_sig_as_fn_ptr_ty=extern &quot;rust-call&quot; fn((u8,)) -&gt; u8 upvar_tys=()]&gt; as std::iter::Iterator&gt;, []), parent_code: MiscObligation }) }, param_env=ParamEnv { caller_bounds: [], reveal: All }, depth=1)\n</code></pre></div>",
        "id": 240050221,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621862634
    },
    {
        "content": "<p>I'm thinking it's happening because of the obligation coming from projecting <code>Iterator::Item</code></p>",
        "id": 240050343,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621862679
    },
    {
        "content": "<p>fun</p>",
        "id": 240050580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621862786
    },
    {
        "content": "<p>But what is weird to me</p>",
        "id": 240050601,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621862798
    },
    {
        "content": "<p>Is <em>that</em> obligation keeps growing. So I'm unsure why we aren't catching that</p>",
        "id": 240050642,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621862823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any thoughts here?</p>",
        "id": 240055653,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621865119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I didn't get too far, but  have some more time blocked out today to work on chalk</p>",
        "id": 240059408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621866811
    },
    {
        "content": "<p>and I will investigate</p>",
        "id": 240059410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621866813
    },
    {
        "content": "<p>mostly I looked into the closure goal so far</p>",
        "id": 240059430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621866826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm guessing you didn't get to this</p>",
        "id": 240119778,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621894589
    },
    {
        "content": "<p>I didn't get <em>too</em> far yet</p>",
        "id": 240322207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035007
    },
    {
        "content": "<p>'m just grabbing the first 50K lines or so of output</p>",
        "id": 240322455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035099
    },
    {
        "content": "<p>So</p>",
        "id": 240322466,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035109
    },
    {
        "content": "<p>I realized that the test itself is pretty recent</p>",
        "id": 240322498,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035127
    },
    {
        "content": "<p>And I think maybe it <em>is</em> technically finite</p>",
        "id": 240322544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035154
    },
    {
        "content": "<p>But just a big regression in solving the predicates</p>",
        "id": 240322581,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035169
    },
    {
        "content": "<p>I'm looking closely at the test now</p>",
        "id": 240322650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035202
    },
    {
        "content": "<p>oh wait</p>",
        "id": 240322743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035219
    },
    {
        "content": "<p>it's one of <em>these</em> kinds of tests</p>",
        "id": 240322756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035223
    },
    {
        "content": "<p>ok, it always overflowed</p>",
        "id": 240322799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035250
    },
    {
        "content": "<p>(as I would expect)</p>",
        "id": 240322826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035258
    },
    {
        "content": "<p>Yes</p>",
        "id": 240322849,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035268
    },
    {
        "content": "<p>so the question is mostly why it doesn't overflow <em>now</em></p>",
        "id": 240322862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035271
    },
    {
        "content": "<p>Correct</p>",
        "id": 240322880,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035278
    },
    {
        "content": "<p>At least, now in a reasonable time</p>",
        "id": 240322901,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035289
    },
    {
        "content": "<p>I've killed it after a few minutes</p>",
        "id": 240322923,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035297
    },
    {
        "content": "<p>particularly as there don't seeeeeeem to be many associated types under binders here...</p>",
        "id": 240323191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035393
    },
    {
        "content": "<p>What's weird is the bit that is taking a long time is during codegen, I think</p>",
        "id": 240323196,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035396
    },
    {
        "content": "<p>At least, there aren't bound vars, just erased</p>",
        "id": 240323285,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035430
    },
    {
        "content": "<p>And yeah, I don't see any bound vars</p>",
        "id": 240323358,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035446
    },
    {
        "content": "<p>I think it might be due to replacing bound vars with placeholders and the inverse. And maybe just the folding?</p>",
        "id": 240323429,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035477
    },
    {
        "content": "<p>Because that happens regardless of if there are actually bound vars</p>",
        "id": 240323456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035492
    },
    {
        "content": "<p>I'm looking</p>",
        "id": 240323586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035554
    },
    {
        "content": "<p>my kingdom for the ability to fold logs</p>",
        "id": 240323599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035559
    },
    {
        "content": "<p>I'm sad nobody responed to my tweet with \"here you go!\"</p>",
        "id": 240323661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035569
    },
    {
        "content": "<p>what is this world coming to</p>",
        "id": 240323672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035574
    },
    {
        "content": "<p>So, I turned of the with verbose entry and exit in rustc_driver and the logs are so much nicer</p>",
        "id": 240323836,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035638
    },
    {
        "content": "<p>I don't even know what that means</p>",
        "id": 240323884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035659
    },
    {
        "content": "<p>I think i know what I <em>really want</em></p>",
        "id": 240324118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035751
    },
    {
        "content": "<p>Verbose entry means when a new span is entered it reprints the current span</p>",
        "id": 240324121,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035751
    },
    {
        "content": "<p>And verbose exit means reprints when exiting</p>",
        "id": 240324145,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622035765
    },
    {
        "content": "<p>I see</p>",
        "id": 240324235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622035793
    },
    {
        "content": "<p>do you know what's a good thing to log to get a good \"overall view\" of how far in compilation we are getting?</p>",
        "id": 240324794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036031
    },
    {
        "content": "<p>something like the old -Ztime-passes</p>",
        "id": 240324902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036070
    },
    {
        "content": "<p>I want to know e.g. \"is typeck completing\"?</p>",
        "id": 240324911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036075
    },
    {
        "content": "<p>Uh, so, maybe just rustc_trait_selection</p>",
        "id": 240324918,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622036078
    },
    {
        "content": "<p>answer: yes</p>",
        "id": 240324952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036100
    },
    {
        "content": "<p>we are bulding MIR</p>",
        "id": 240324966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036102
    },
    {
        "content": "<p>But rustc_typeck also is good</p>",
        "id": 240324980,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622036105
    },
    {
        "content": "<p>I expect we are dying in code generation</p>",
        "id": 240324986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036106
    },
    {
        "content": "<p>or bulding the set of monomorphized items</p>",
        "id": 240325053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036141
    },
    {
        "content": "<p>Yes</p>",
        "id": 240325255,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622036212
    },
    {
        "content": "<p>Only log rustc_ty_utils</p>",
        "id": 240325296,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622036234
    },
    {
        "content": "<p>Repeated calls the codegen_fulfill_obligation</p>",
        "id": 240325344,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622036261
    },
    {
        "content": "<p>cause us to fulfill increasing large predicates</p>",
        "id": 240325445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622036285
    },
    {
        "content": "<p>grep 'visit_item_use.*0:4\\b'</p>",
        "id": 240326213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036564
    },
    {
        "content": "<p>logging that for later :)</p>",
        "id": 240326222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036568
    },
    {
        "content": "<p>so I'm curious why we don't overflow in the collector</p>",
        "id": 240326294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036601
    },
    {
        "content": "<p>it has some logic for this</p>",
        "id": 240326299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036604
    },
    {
        "content": "<p>as you said, it may actually <em>be</em> terminating</p>",
        "id": 240326316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036613
    },
    {
        "content": "<p>Yes</p>",
        "id": 240326329,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622036618
    },
    {
        "content": "<p>it may be that it's just taking a lot longer to normalize at each step</p>",
        "id": 240326341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036623
    },
    {
        "content": "<p>hmm</p>",
        "id": 240326355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036627
    },
    {
        "content": "<p>in chalk this would be cached better :/</p>",
        "id": 240326427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036646
    },
    {
        "content": "<p>Hopefully, yeah</p>",
        "id": 240326497,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622036682
    },
    {
        "content": "<p>I'm surprised it's not :/</p>",
        "id": 240326558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622036702
    },
    {
        "content": "<p>changing the recursion limit to 22 makes the test error immediately</p>",
        "id": 240326682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036748
    },
    {
        "content": "<p>athena. rustc +rust-2-stage1  src/test/ui/recursion/issue-83150.rs<br>\nerror[E0275]: overflow evaluating the requirement <code>Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut std::ops::Range&lt;u8&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;: Iterator</code><br>\n  |<br>\n  = help: consider adding a <code>#![recursion_limit=\"44\"]</code> attribute to your crate (<code>issue_83150</code>)<br>\n  = note: required because of the requirements on the impl of <code>Iterator</code> for <code>&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut Map&lt;&amp;mut std::ops::Range&lt;u8&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;, [closure@src/test/ui/recursion/issue-83150.rs:13:24: 13:33]&gt;</code></p>\n<p>error: aborting due to previous error</p>",
        "id": 240326688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036749
    },
    {
        "content": "<p>ok, let me think on this</p>",
        "id": 240326779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036770
    },
    {
        "content": "<p>I wonder if we will have to improve the caching mechanism too :)</p>",
        "id": 240326818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036788
    },
    {
        "content": "<p>I have to run for a bit, I have some urgent-ish stuff to take care of, but I think we know the problem</p>",
        "id": 240326875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622036813
    },
    {
        "content": "<p>I didn't think to test that</p>",
        "id": 240326949,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622036848
    },
    {
        "content": "<p>Okay</p>",
        "id": 240326957,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622036852
    },
    {
        "content": "<p>I'll be here for a bit longer</p>",
        "id": 240326972,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622036858
    },
    {
        "content": "<p>changing recursion limit to 5 reproduces the error too</p>",
        "id": 240327360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622037017
    },
    {
        "content": "<p>and gives much more reasonable logs:)</p>",
        "id": 240327373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622037020
    },
    {
        "content": "<p>athena. RUSTC_LOG=rustc_trait_selection rustc +rust-2-stage1  src/test/ui/recursion/issue-83150.rs -Zverbose &gt;&amp; killme<br>\nathena. ls -l killme<br>\n-rw-r--r-- 1 nmatsakis nmatsakis 10019498 May 26 09:50 killme</p>",
        "id": 240327405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622037036
    },
    {
        "content": "<p>for future ref :)</p>",
        "id": 240327463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622037063
    },
    {
        "content": "<p>I was going to dig into the cache keys</p>",
        "id": 240327473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622037069
    },
    {
        "content": "<p>I think I can guess the shape of the problem but it'd be good to confirm it</p>",
        "id": 240327490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622037080
    },
    {
        "content": "<p>good to know :)</p>",
        "id": 240327809,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622037232
    },
    {
        "content": "<p>I'm looking again</p>",
        "id": 240466496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622121984
    },
    {
        "content": "<p>with my new script (thanks <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>) for VSCode friendly logs</p>",
        "id": 240466571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622122007
    },
    {
        "content": "<p>but really I should just be reading into how the cache works</p>",
        "id": 240466608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622122018
    },
    {
        "content": "<p>Nice</p>",
        "id": 240467010,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622122163
    },
    {
        "content": "<p>ok so</p>",
        "id": 240469988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622123402
    },
    {
        "content": "<p>I'm kind of spinning my wheels a bit here</p>",
        "id": 240470036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622123406
    },
    {
        "content": "<p>one thing I think would be useful is to add back a -Z flag to restore the old behavior</p>",
        "id": 240470053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622123414
    },
    {
        "content": "<p>so we can compare the logs</p>",
        "id": 240470062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622123416
    },
    {
        "content": "<p>and perhaps profiles</p>",
        "id": 240470075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622123423
    },
    {
        "content": "<p>I was thinking of doing a perf run</p>",
        "id": 240470095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622123431
    },
    {
        "content": "<p>in some sense the code is \"working as it should\"</p>",
        "id": 240470111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622123441
    },
    {
        "content": "<p>so I'd like to see how it ran before to see what happened</p>",
        "id": 240470131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622123451
    },
    {
        "content": "<p>That's a good idea</p>",
        "id": 240470869,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622123761
    },
    {
        "content": "<p>So, I tried adding the -Z option and haven't been able to make the code not take forever</p>",
        "id": 240602248,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622207849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> did you commit that option somewhere?</p>",
        "id": 240602480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622207990
    },
    {
        "content": "<p>I guess you mean that even when you try to disable normalization under binders, it <em>still</em> takes forever?</p>",
        "id": 240602534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622208006
    },
    {
        "content": "<p>that's...interesting</p>",
        "id": 240602540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622208009
    },
    {
        "content": "<p>No, I didn't. Because I couldn't figure it out</p>",
        "id": 240602590,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622208045
    },
    {
        "content": "<p>My next step was going to just work forward. Checkout a clean master and try to incrementally add things</p>",
        "id": 240602662,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622208073
    },
    {
        "content": "<p>right</p>",
        "id": 240602771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622208129
    },
    {
        "content": "<p>that sounds like a good next step</p>",
        "id": 240602784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622208135
    },
    {
        "content": "<p>I'm mostly just a bit confused</p>",
        "id": 240602939,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622208232
    },
    {
        "content": "<p>I literally put like all the changes under a gate</p>",
        "id": 240603010,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622208254
    },
    {
        "content": "<p>Except for the pretty changes, I guess</p>",
        "id": 240603030,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622208268
    },
    {
        "content": "<p>That is pretty confusing</p>",
        "id": 240604462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622208926
    },
    {
        "content": "<p>Let me know how it goes <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 240604987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622209185
    },
    {
        "content": "<p>Going to do that now</p>",
        "id": 240605075,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622209217
    },
    {
        "content": "<p>I'm just wondering if this test usually takes long anyways, and there's just a \"big enough\" increase in time with these changes</p>",
        "id": 240605185,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622209277
    },
    {
        "content": "<p>plausible</p>",
        "id": 240611196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622211915
    },
    {
        "content": "<p>Okay so on a recent master</p>",
        "id": 240612622,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622212515
    },
    {
        "content": "<p>And the test finishes in a reasonable amount of time</p>",
        "id": 240612652,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622212531
    },
    {
        "content": "<p>But when I go to log what's happening</p>",
        "id": 240612664,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622212539
    },
    {
        "content": "<p>bam, just takes forever</p>",
        "id": 240612673,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622212544
    },
    {
        "content": "<p>heh</p>",
        "id": 240613362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622212869
    },
    {
        "content": "<p><em>that's</em> fun</p>",
        "id": 240613374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622212872
    },
    {
        "content": "<p>that said</p>",
        "id": 240613378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622212875
    },
    {
        "content": "<p>I guess I should just run on master</p>",
        "id": 240613389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622212883
    },
    {
        "content": "<p>e.g. you could put the low recursion limit (5)</p>",
        "id": 240613407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622212890
    },
    {
        "content": "<p>and log that</p>",
        "id": 240613414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622212895
    },
    {
        "content": "<p>I'm annoyed nightly builds don't have logs enabled</p>",
        "id": 240613435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622212905
    },
    {
        "content": "<p>I mean, I think the reason is that only logging <code>rustc_trait_selection</code> outputs a causal 1016260 lines</p>",
        "id": 240615581,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622213756
    },
    {
        "content": "<p>definitely need to lower the recursion limit to look into this</p>",
        "id": 240615651,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622213781
    },
    {
        "content": "<p>wait wait wait</p>",
        "id": 240637182,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622223512
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/83406/files\">https://github.com/rust-lang/rust/pull/83406/files</a></p>",
        "id": 240637185,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622223514
    },
    {
        "content": "<p>So it's probably still a bug in the pretty printing</p>",
        "id": 240637219,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622223542
    },
    {
        "content": "<p>rhmmmmmmm</p>",
        "id": 240637239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223553
    },
    {
        "content": "<p>Which makes sense why gating <em>everything else</em> still causes the perf regression</p>",
        "id": 240637265,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622223566
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♀️</p>",
        "id": 240637274,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622223571
    },
    {
        "content": "<p>well, maybe</p>",
        "id": 240637299,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622223581
    },
    {
        "content": "<p>So apparently reverting <a href=\"https://github.com/rust-lang/rust/pull/85499/commits/101fee02f75b24a02ea29236fc18d7f21cc2206d\">https://github.com/rust-lang/rust/pull/85499/commits/101fee02f75b24a02ea29236fc18d7f21cc2206d</a> fixes the regression</p>",
        "id": 240659469,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622235253
    },
    {
        "content": "<p>huh</p>",
        "id": 240675662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622250670
    },
    {
        "content": "<p>tht's a bit strange, isn't it</p>",
        "id": 240675664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622250675
    },
    {
        "content": "<p>Yeah</p>",
        "id": 240675859,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622250972
    },
    {
        "content": "<p>Going to dig into it a bit tonight I think</p>",
        "id": 240675862,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622250988
    },
    {
        "content": "<p>Tried some changes earlier but nothing helped</p>",
        "id": 240675866,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622251006
    },
    {
        "content": "<p>So...if I had to guess, I bet that the reason we're taking more time is that before we were calling <code>replace_late_bound_regions</code> in the pretty code, but now call <code>fold_regions</code></p>",
        "id": 240717175,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622316321
    },
    {
        "content": "<p>So, for the really large types, we end up folding over them rather than skipping them entirely</p>",
        "id": 240717190,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622316350
    },
    {
        "content": "<p>Fixed it</p>",
        "id": 240720017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622320831
    },
    {
        "content": "<p>Okay so last issue, maybe:</p>",
        "id": 240786212,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429670
    },
    {
        "content": "<p><code>hr-associated-type-bound-2.rs</code></p>",
        "id": 240786214,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429683
    },
    {
        "content": "<p>So, the key problem is we have an impl</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">U</span>: <span class=\"nb\">Clone</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">U</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240786229,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429726
    },
    {
        "content": "<p>We're trying to normalize the <code>ParamEnv</code></p>",
        "id": 240786234,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429748
    },
    {
        "content": "<p>err maybe not</p>",
        "id": 240786240,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429760
    },
    {
        "content": "<p>But anyways, we have the <code>for&lt;'b&gt; &lt;&lt;u32 as X&lt;'b&gt;&gt;::U as std::clone::Clone&gt;</code> predicate</p>",
        "id": 240786294,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429810
    },
    {
        "content": "<p>So, starting here seems simple</p>",
        "id": 240786302,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429830
    },
    {
        "content": "<p>Convert that <code>'b</code> to a placeholder</p>",
        "id": 240786304,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429838
    },
    {
        "content": "<p>and try to project <code>&lt;u32 as X&lt;'b&gt;&gt;::U</code></p>",
        "id": 240786309,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429855
    },
    {
        "content": "<p>But this is a problem</p>",
        "id": 240786317,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429875
    },
    {
        "content": "<p>Because to successfully project that to <code>str</code>, we have to actually prove that bound</p>",
        "id": 240786359,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429897
    },
    {
        "content": "<p>So it's a cycle</p>",
        "id": 240786363,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429906
    },
    {
        "content": "<p>But to make it a bit more complicated</p>",
        "id": 240786370,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429936
    },
    {
        "content": "<p>We actually don't detect the cycle</p>",
        "id": 240786375,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429944
    },
    {
        "content": "<p>Because the <em>next</em> predicate has the bound var replaced with a <em>new</em> placeholder</p>",
        "id": 240786381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429965
    },
    {
        "content": "<p>So the predicates aren't a \"real\" cycle</p>",
        "id": 240786387,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622429991
    },
    {
        "content": "<p>This could be solved with canonicalization</p>",
        "id": 240786391,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622430002
    },
    {
        "content": "<p>(interestingly, the normalization in <code>query/normalize</code> canonicalizes the projections <em>and</em> \"eagerly\" selects resulting obligations, whereas <code>AssocTypeNormalizer</code> accumulates obligations)</p>",
        "id": 240786459,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622430098
    },
    {
        "content": "<p>But, that would really only change the error from \"reached recursion limit\" to a cycle error</p>",
        "id": 240786509,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622430135
    },
    {
        "content": "<p>This is sort of a coinductive cycle</p>",
        "id": 240786515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622430176
    },
    {
        "content": "<p>(sort of)</p>",
        "id": 240786519,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622430182
    },
    {
        "content": "<p>Well, I guess it is</p>",
        "id": 240786529,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622430198
    },
    {
        "content": "<p>We can only try to prove that <code>&lt;u32 as X&lt;'b&gt;&gt;::U: Clone</code> if we know that <code>&lt;u32 as X&lt;'b&gt;&gt;::U: Clone</code> holds</p>",
        "id": 240786578,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622430255
    },
    {
        "content": "<p>/me goes to look at how coinductive cycles in trait predicates are normally handled again</p>",
        "id": 240786675,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622430448
    },
    {
        "content": "<p>Are...all cycles in rustc coinductive? No, right?</p>",
        "id": 240786814,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622430630
    },
    {
        "content": "<p>I'm just thinking...if we <em>actually</em> generated the same <code>&lt;u32 as X&lt;'b&gt;&gt;</code> predicates, and that gets treated as coinductive, then we can confirm <code>&lt;u32 as X&lt;'b&gt;&gt;</code> and then project out <code>U</code></p>",
        "id": 240786886,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622430750
    },
    {
        "content": "<p>So, I think I might just try to canonicalization approach</p>",
        "id": 240786953,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622430862
    },
    {
        "content": "<p>But I can't just do what <code>QueryNormalizer</code> does, since we have to accumulate the obligations</p>",
        "id": 240786962,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622430900
    },
    {
        "content": "<p>(I tried already)</p>",
        "id": 240786970,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622430917
    },
    {
        "content": "<p>But I'm just trying to think, that means I also probably have the instantiate the generated subobligations too</p>",
        "id": 240787030,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622430972
    },
    {
        "content": "<p>Ugh well, just the canonicalization approach is a bit more involved than I expected</p>",
        "id": 240788646,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622433231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I won't be around in the morning (not sure if you are, but if so, maybe take a look here and give some thoughts?)</p>",
        "id": 240788850,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622433535
    },
    {
        "content": "<p>Oh, so, looking again, I think the canonicalization approach wouldn't actually work</p>",
        "id": 240843138,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622473143
    },
    {
        "content": "<p>I guess the probably is <em>actually</em> that the selection/confirmation infrastructure is picked and chosen for the projection code</p>",
        "id": 240843860,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622473536
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ProjectionTyCandidateSet</span>::<span class=\"n\">Single</span><span class=\"p\">(</span><span class=\"n\">ProjectionTyCandidate</span>::<span class=\"n\">Object</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">candidates</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Avoid normalization cycle from selection (see</span>\n<span class=\"w\">        </span><span class=\"c1\">// `assemble_candidates_from_object_ty`).</span>\n<span class=\"w\">        </span><span class=\"c1\">// FIXME(lazy_normalization): Lazy normalization should save us from</span>\n<span class=\"w\">        </span><span class=\"c1\">// having to special case this.</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assemble_candidates_from_impls</span><span class=\"p\">(</span><span class=\"n\">selcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">obligation</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">candidates</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240844230,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622473746
    },
    {
        "content": "<p>That comment seems relevant</p>",
        "id": 240844239,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622473753
    },
    {
        "content": "<p>Right - this isn't coinductive</p>",
        "id": 240845704,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622474586
    },
    {
        "content": "<p>Going back to the impl</p>",
        "id": 240845819,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622474653
    },
    {
        "content": "<p>I think we should be able to <em>assume</em> that <code>for&lt;'b&gt; &lt;u32 as X&lt;'b&gt;&gt;::U: Clone</code> holds when normalizing <code>&lt;u32 as X&lt;'b&gt;&gt;::U</code>, but only when confirming the impl itself</p>",
        "id": 240845870,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622474697
    },
    {
        "content": "<p>How does this work without bound vars</p>",
        "id": 240846030,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622474793
    },
    {
        "content": "<p>\"error[E0275]: overflow evaluating the requirement <code>&lt;u32 as X&gt;::U == _</code>\" oh it doesn't</p>",
        "id": 240846137,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622474871
    },
    {
        "content": "<p>okay so this is just an unfortunate case of \"the more general case errored and now we have to deal with that</p>",
        "id": 240846244,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622474919
    },
    {
        "content": "<p>Okay, so I'm gonna actually just say that can be done as a followup issue</p>",
        "id": 240846263,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622474936
    },
    {
        "content": "<p>Ok so massive perf regression in deeply-nested-async</p>",
        "id": 240959268,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622561272
    },
    {
        "content": "<p>there's a lot here</p>",
        "id": 241146312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639645
    },
    {
        "content": "<p>I've not caught up :)</p>",
        "id": 241146319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639648
    },
    {
        "content": "<p>want to give me the TL;DR?</p>",
        "id": 241146335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639656
    },
    {
        "content": "<p>Give me a second</p>",
        "id": 241146426,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622639697
    },
    {
        "content": "<p>So, I fixed the perf regression for 83150</p>",
        "id": 241146691,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622639821
    },
    {
        "content": "<p>What did you have to change?</p>",
        "id": 241146785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639877
    },
    {
        "content": "<p>It was something in the pertty printer?</p>",
        "id": 241146807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639882
    },
    {
        "content": "<p>Yeah, basically just making sure we don't fold if there aren't bound vars or placeholders</p>",
        "id": 241146912,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622639922
    },
    {
        "content": "<p>I also started looking into <code>hr-associated-type-bound-2.rs</code>, which changed from \"the method <code>f</code> exists for type <code>u32</code>, but its trait bounds were not satisfied\" to \"overflow evaluating the requirement <code>for&lt;'b&gt; u32: X&lt;'b&gt;</code>\". This is kind of unfortunate, but I realized that if you take the test, and remove that <code>'b</code> on <code>X</code>, then you also get an overflow error</p>",
        "id": 241147041,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622639988
    },
    {
        "content": "<p>So, while it is unfortunate that it regresses, it's probably something that should be followed up on separately</p>",
        "id": 241147143,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640024
    },
    {
        "content": "<p>And then, I did a perf run, and there were some bad regressions. Namely, deeply-nested-async had an average 4000% regression</p>",
        "id": 241147488,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640164
    },
    {
        "content": "<p>I started digging into it a bit last night, and I think this comes from the fact that normalization both normalizes projections <em>and</em> opaque types (but only in <code>Reveal::All</code>)</p>",
        "id": 241147608,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640221
    },
    {
        "content": "<p>So, with that test, we have an <code>impl Future</code> that contains a bunch of nested <code>impl Future</code></p>",
        "id": 241147696,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640250
    },
    {
        "content": "<p>seems like a caching fail</p>",
        "id": 241147726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622640260
    },
    {
        "content": "<p>If we try to normalize it, then deeply nested there <em>is</em> a projection, but we can't actually get to it, because it's behind an opaque type</p>",
        "id": 241147823,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640306
    },
    {
        "content": "<p>is the perf hit limited to reveal::all?</p>",
        "id": 241147914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622640344
    },
    {
        "content": "<p>I <em>think</em> I can possible fix this by being smarter and only folding during <code>Reveal::UserFacing</code> if there are projections (no opaque tys)</p>",
        "id": 241147986,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640364
    },
    {
        "content": "<p>I don't know</p>",
        "id": 241147999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640369
    },
    {
        "content": "<p>I actually expect that the perf hit comes during the <code>Reveal::UserFacing</code> part, since we fold more than we used to</p>",
        "id": 241148047,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640396
    },
    {
        "content": "<p>Whereas for <code>Reveal::All</code>, I imagine we folded <em>eventually</em> with <code>ReErased</code>?</p>",
        "id": 241148099,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/241147726\">said</a>:</p>\n<blockquote>\n<p>seems like a caching fail</p>\n</blockquote>\n<p>So, not quite. I go into a bit. Caching <em>is</em> failing, but only in the sense that we get an overflow error rather than recursive error. In reality, we don't currently assume an impl holds when we try to normalize associated types <em>within</em> an impl, recursively.</p>",
        "id": 241148317,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/240786229\">said</a>:</p>\n<blockquote>\n<p>So, the key problem is we have an impl</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">U</span>: <span class=\"nb\">Clone</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">U</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is the problematic impl. The problem is that to prove <code>&lt;u32 as X&lt;'b&gt;&gt;::U: Clone</code>, we have to confirm the impl. To confirm the impl, we have to prove that <code>&lt;u32 as X&lt;'b&gt;::U: Clone</code> holds. But this isn't coinductive currently.</p>",
        "id": 241148650,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640655
    },
    {
        "content": "<p>are you sure that's the name of the test?</p>",
        "id": 241148702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622640679
    },
    {
        "content": "<p>maybe my checkout is out of date</p>",
        "id": 241148724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622640695
    },
    {
        "content": "<p>Which one?</p>",
        "id": 241148874,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640762
    },
    {
        "content": "<p>I can't find any test named '<a href=\"http://deeply-nested-async.rs\">deeply-nested-async.rs</a>'</p>",
        "id": 241148895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622640776
    },
    {
        "content": "<p>Not a test</p>",
        "id": 241148907,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640783
    },
    {
        "content": "<p>It's a perf benchmark</p>",
        "id": 241148910,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640787
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rustc-perf/tree/master/collector/benchmarks/deeply-nested-async\">https://github.com/rust-lang/rustc-perf/tree/master/collector/benchmarks/deeply-nested-async</a></p>",
        "id": 241148921,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640792
    },
    {
        "content": "<p>but the one you just quoted -- is that <code>hr-associated-type-bound-1.rs</code></p>",
        "id": 241148922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622640792
    },
    {
        "content": "<p><code>src/test/ui/associated-types/hr-associated-type-bound-2.rs</code></p>",
        "id": 241148971,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640813
    },
    {
        "content": "<p>I see</p>",
        "id": 241149171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622640901
    },
    {
        "content": "<p>depending on the \"implied bounds\" setup</p>",
        "id": 241149199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622640916
    },
    {
        "content": "<p>that test <em>could</em> be provable</p>",
        "id": 241149205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622640921
    },
    {
        "content": "<p>Right, I think the test 100% can be provable</p>",
        "id": 241149258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640942
    },
    {
        "content": "<p>I think we most certainly <em>should</em> be allowed to normalize <code>&lt;Self as X&lt;'b&gt;&gt;::U</code> when we're confirming <code>&lt;Self as X&lt;'b&gt;&gt;</code></p>",
        "id": 241149371,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622640983
    },
    {
        "content": "<p>The point, though, is I'm not sure it makes sense to do that <em>here</em></p>",
        "id": 241149543,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622641067
    },
    {
        "content": "<p>It's kind of orthogonal</p>",
        "id": 241149559,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622641077
    },
    {
        "content": "<p>agreed</p>",
        "id": 241149614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622641089
    },
    {
        "content": "<p>I'm thinking about the deeply-nested-async test</p>",
        "id": 241149635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622641096
    },
    {
        "content": "<p>I'm going to do a build of your branch</p>",
        "id": 241149967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622641223
    },
    {
        "content": "<p>Ok :)</p>",
        "id": 241150032,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622641248
    },
    {
        "content": "<p>Okay, so not folding in <code>Reveal::UserFacing</code> if there are only opaque types doesn't actually fix the perf regression</p>",
        "id": 241150794,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622641590
    },
    {
        "content": "<p>I guess this is actually a little more difficult, because if there <em>are</em> projection types within the substs, then the flags for <code>HAS_TY_PROJECTION</code> will be set to true</p>",
        "id": 241150905,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622641639
    },
    {
        "content": "<p>It's also completely possible this doesn't solve it anyways</p>",
        "id": 241151398,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622641850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thoughts?</p>",
        "id": 241153748,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622642843
    },
    {
        "content": "<p>not really</p>",
        "id": 241153775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622642859
    },
    {
        "content": "<p>I guess I have a build now</p>",
        "id": 241153825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622642880
    },
    {
        "content": "<p>I'm able to reproduce the problem</p>",
        "id": 241153926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622642925
    },
    {
        "content": "<p>so that's progress</p>",
        "id": 241153935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622642931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>, I'm curious, is there a good way to get a kind of \"running dump\" of what queries are completing and where time is being spent?</p>",
        "id": 241153968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622642957
    },
    {
        "content": "<p>I guess I can use perf for this</p>",
        "id": 241153973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622642960
    },
    {
        "content": "<p>oh I guess it finishes in \"reasonable\" time too</p>",
        "id": 241154261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622643108
    },
    {
        "content": "<p>What finishes?</p>",
        "id": 241158148,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622644748
    },
    {
        "content": "<p>deeply-nested-async?</p>",
        "id": 241158160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622644752
    },
    {
        "content": "<p>yes</p>",
        "id": 241296096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622656999
    },
    {
        "content": "<p>Yeah, it does. But it's still a massive regression</p>",
        "id": 241296268,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622657056
    },
    {
        "content": "<p>I guess we can dig a bit more in here?</p>",
        "id": 241389903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622726789
    },
    {
        "content": "<p>Sure</p>",
        "id": 241390163,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622726897
    },
    {
        "content": "<p>I was trying to look into what's different between my branch and master</p>",
        "id": 241390179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622726911
    },
    {
        "content": "<p>Definitely like a list of queries would be nice</p>",
        "id": 241390212,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622726926
    },
    {
        "content": "<p>So, I ran a subset of the deeply-nested-async benchmark, debug logging rustc_trait_selection,rustc_typeck,rustc_middle; both through my branch and master</p>",
        "id": 241390335,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622726982
    },
    {
        "content": "<p>Surprisingly, my branch actually has <em>fewer</em> lines</p>",
        "id": 241390356,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622726998
    },
    {
        "content": "<p>I ran it with <code>-Zself-profile</code></p>",
        "id": 241390484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622727047
    },
    {
        "content": "<p>but I haven't looked at the results</p>",
        "id": 241390495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622727050
    },
    {
        "content": "<p>Now, there's been a bunch of changes to logging (what functions, what is logged, etc.), so it's not a 1:1 comparison</p>",
        "id": 241390499,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622727051
    },
    {
        "content": "<p>I wanted to also check out the caching</p>",
        "id": 241390505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622727054
    },
    {
        "content": "<p>ooh</p>",
        "id": 241390507,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622727054
    },
    {
        "content": "<p>Are you able to upload that?</p>",
        "id": 241390615,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622727104
    },
    {
        "content": "<p>I could take a look at it</p>",
        "id": 241390624,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622727110
    },
    {
        "content": "<p>side note, I wish that there was a debug-enabled version of nightly somewhere</p>",
        "id": 241390745,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622727155
    },
    {
        "content": "<p>So I didn't have to rebuild master</p>",
        "id": 241390764,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622727169
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>athena. summarize summarize unknown-crate-21132.mm_profdata\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| Item                                            | Self time | % of total time | Time     | Item count |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| normalize_generic_arg_after_erasing_regions     | 39.98s    | 59.179          | 39.98s   | 420        |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| codegen_module                                  | 9.04s     | 13.385          | 23.01s   | 13         |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| LLVM_module_codegen_make_bitcode                | 4.65s     | 6.879           | 5.24s    | 13         |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n</code></pre></div>",
        "id": 241390798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622727196
    },
    {
        "content": "<p>That matches perf: <a href=\"https://perf.rust-lang.org/detailed-query.html?commit=ce300333714ca415579d146d0042b1adfa9809ab&amp;base_commit=657bc01888e6297257655585f9c475a0801db6d2&amp;benchmark=deeply-nested-async-opt&amp;run_name=full\">https://perf.rust-lang.org/detailed-query.html?commit=ce300333714ca415579d146d0042b1adfa9809ab&amp;base_commit=657bc01888e6297257655585f9c475a0801db6d2&amp;benchmark=deeply-nested-async-opt&amp;run_name=full</a></p>",
        "id": 241390969,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622727268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> <a href=\"https://smallcultfollowing.com/deeply-nested-async.mm_profdata\">download the data here</a></p>",
        "id": 241390974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622727271
    },
    {
        "content": "<p>I'm rnning with nightly too</p>",
        "id": 241391017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622727295
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>athena. summarize summarize unknown-crate-13599.mm_profdata\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| Item                                            | Self time | % of total time | Time     | Item count |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| codegen_module                                  | 1.01s     | 27.855          | 1.03s    | 13         |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| LLVM_module_codegen_make_bitcode                | 756.12ms  | 20.795          | 837.11ms | 13         |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n</code></pre></div>",
        "id": 241391075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622727319
    },
    {
        "content": "<p>clear difference :)</p>",
        "id": 241391085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622727323
    },
    {
        "content": "<p>also interesting that the \"self time\" of <code>codegen_module</code> is <em>significantly</em> higher</p>",
        "id": 241391135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622727350
    },
    {
        "content": "<p>but obviously <code>normalize_generic_arg_after_erasing_regions</code> is the big one</p>",
        "id": 241391159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622727361
    },
    {
        "content": "<p>Right</p>",
        "id": 241391208,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622727367
    },
    {
        "content": "<p>It's a bit interesting</p>",
        "id": 241391224,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622727376
    },
    {
        "content": "<p>bound vars aren't replaced with <code>ReErased</code> there right?</p>",
        "id": 241391246,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622727394
    },
    {
        "content": "<p>I'm poking at that</p>",
        "id": 241391368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622727467
    },
    {
        "content": "<p>Seems like no, since only <code>erase_regions</code> is called</p>",
        "id": 241391579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622727549
    },
    {
        "content": "<p>which only anonymizes bound vars, doesn't erase them</p>",
        "id": 241391605,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622727563
    },
    {
        "content": "<p>When do we need to erase regions but keep bound vars</p>",
        "id": 241392179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622727829
    },
    {
        "content": "<p>I really, really wish we had a nightly build with logs enabled</p>",
        "id": 241392477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622727978
    },
    {
        "content": "<p>Yep, same</p>",
        "id": 241392512,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622728000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> did you ever add the <code>-Zdisable-this-pr</code> switch?</p>",
        "id": 241392517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728002
    },
    {
        "content": "<p>I did, but then removed it</p>",
        "id": 241392540,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622728012
    },
    {
        "content": "<p>:grr:</p>",
        "id": 241392553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728018
    },
    {
        "content": "<p>ok :)</p>",
        "id": 241392557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728019
    },
    {
        "content": "<p>it'd be useful now</p>",
        "id": 241392561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728021
    },
    {
        "content": "<p>I used to just always keep a checkout of rust-lang/master</p>",
        "id": 241392597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728037
    },
    {
        "content": "<p>I should do that again</p>",
        "id": 241392600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728040
    },
    {
        "content": "<p>(so that I can build my own nightly with logs enabled)</p>",
        "id": 241392614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728047
    },
    {
        "content": "<p>yeah :/</p>",
        "id": 241392715,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622728084
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    /// N.B., currently, higher-ranked type bounds inhibit\n    /// normalization. Therefore, each time we erase them in\n    /// codegen, we need to normalize the contents.\n</code></pre></div>",
        "id": 241393119,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622728286
    },
    {
        "content": "<p>On <code>normalize_erasing_late_bound_regions</code></p>",
        "id": 241393127,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622728293
    },
    {
        "content": "<p>so</p>",
        "id": 241394189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728780
    },
    {
        "content": "<p>(a) yes, that's true, I wonder if we could remove that logic with this PR, presumably we could</p>",
        "id": 241394226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728799
    },
    {
        "content": "<p>that might make it a net perf win</p>",
        "id": 241394273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728804
    },
    {
        "content": "<p>but also</p>",
        "id": 241394275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728805
    },
    {
        "content": "<p>(b) the caching seems surprising here</p>",
        "id": 241394284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728809
    },
    {
        "content": "<p>i'm adding logs on this function</p>",
        "id": 241394297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728815
    },
    {
        "content": "<p>let me re-run wth <code>-Zverbose</code></p>",
        "id": 241394346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728843
    },
    {
        "content": "<p>e.g.</p>",
        "id": 241394363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728854
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_traits::normalize_erasing_regions normalize_generic_arg_after_erasing_regions(goal=ParamEnvAnd {\n    param_env: ParamEnv {\n        caller_bounds: [],\n        reveal: UserFacing,\n    },\n    value: &amp;mut impl std::future::Future,\n})\n</code></pre></div>",
        "id": 241394372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728858
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_traits::normalize_erasing_regions normalize_generic_arg_after_erasing_regions(goal=ParamEnvAnd {\n    param_env: ParamEnv {\n        caller_bounds: [],\n        reveal: UserFacing,\n    },\n    value: &amp;mut impl std::future::Future,\n})\n</code></pre></div>",
        "id": 241394385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728867
    },
    {
        "content": "<p>something is missing here</p>",
        "id": 241394415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728879
    },
    {
        "content": "<p>maybe -Zverbose will tell me the answer</p>",
        "id": 241394430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728884
    },
    {
        "content": "<p>They might be different <code>impl Future</code>s</p>",
        "id": 241394436,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622728890
    },
    {
        "content": "<p>oh, duh</p>",
        "id": 241394543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728934
    },
    {
        "content": "<p>of course :)</p>",
        "id": 241394549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622728936
    },
    {
        "content": "<p>Honestly, so far, I haven't seen anything <em>wrong</em> in terms of not caching when we should</p>",
        "id": 241394648,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622728980
    },
    {
        "content": "<p>I think the problem really is just that we're now normalizing when we weren't before</p>",
        "id": 241394714,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622729010
    },
    {
        "content": "<p>But it's a bit weird because I would just expect that we're normalizing <em>earlier</em> than we were before</p>",
        "id": 241394747,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622729030
    },
    {
        "content": "<p>right, this is why I turned a bit to caching</p>",
        "id": 241394768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622729042
    },
    {
        "content": "<p>because I was imagining maybe a better caching scheme might help there</p>",
        "id": 241394856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622729070
    },
    {
        "content": "<p>I was trying to look at where the types that we eventually normalize erasing regions come from</p>",
        "id": 241394890,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622729086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/241153968\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span>, I'm curious, is there a good way to get a kind of \"running dump\" of what queries are completing and where time is being spent?</p>\n</blockquote>\n<p>Not really unfortunately although eddyb has asked for this before <a href=\"https://github.com/rust-lang/rust/issues/53630\">https://github.com/rust-lang/rust/issues/53630</a></p>",
        "id": 241438859,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622747750
    },
    {
        "content": "<p>Oops just realized how old that message was. Sorry for the late reply!</p>",
        "id": 241438953,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622747780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/241394890\">said</a>:</p>\n<blockquote>\n<p>I was trying to look at where the types that we eventually normalize erasing regions come from</p>\n</blockquote>\n<p>did you ever make any progress here?</p>",
        "id": 241533811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813022
    },
    {
        "content": "<p>No :/</p>",
        "id": 241533841,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622813038
    },
    {
        "content": "<p>I'm super busy with work recently, so progress for me has been slow</p>",
        "id": 241533915,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622813055
    },
    {
        "content": "<p>that seems fair :)</p>",
        "id": 241534135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813155
    },
    {
        "content": "<p>let me pull up my vscode isntance</p>",
        "id": 241534147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/241533915\">said</a>:</p>\n<blockquote>\n<p>I'm super busy with work recently, so progress for me has been slow</p>\n</blockquote>\n<p>I feel the same way, which is ironic</p>",
        "id": 241534202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813169
    },
    {
        "content": "<p>re. GAT stabilization: my general thoughts on timeline and such are: 1) Finish this PR 2) Make GATs not an incomplete feature 3) Make a blog post announcing that and calling for testing 4) Review tests and whether we need an additional RFC (I don't think so; I think everything is covered under the previous, except maybe no object safety, but idk if that warrants an RFC) 5) After 1-2 months from blog post, write a stabilization report and stabilize (I can't imagine there will be any showstopping bugs, given how long the feature has been in limbo and the number of tests that have been added during)</p>",
        "id": 241534516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622813301
    },
    {
        "content": "<p>Makes sense.</p>",
        "id": 241534863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813467
    },
    {
        "content": "<p>I'm somewhat in the mood to produce some fresh RFCs just to help re-align the vision</p>",
        "id": 241534884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813479
    },
    {
        "content": "<p>This applies perhaps more to <code>impl Trait</code> than anything else</p>",
        "id": 241534903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813486
    },
    {
        "content": "<p>ok, I sort of remember what i was doing now</p>",
        "id": 241534921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813501
    },
    {
        "content": "<p>Oh, I can definitely see it being relevant to <code>impl Trait</code>, given that <em>has</em> been split out into <code>min_type_alias_impl_trait</code>, for example</p>",
        "id": 241535015,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622813535
    },
    {
        "content": "<p>right</p>",
        "id": 241535101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813591
    },
    {
        "content": "<p>and also that the development before was so spread out between rfc after rfc</p>",
        "id": 241535132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813610
    },
    {
        "content": "<p>so i\"m looking more at the logs</p>",
        "id": 241537402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814654
    },
    {
        "content": "<p>anything meaningful pop out to you?</p>",
        "id": 241537501,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622814697
    },
    {
        "content": "<p>the first thing I note is that master calls <code>normalize_generic_arg_after_erasing_regions</code> much more often</p>",
        "id": 241537526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814713
    },
    {
        "content": "<p>but seems to spend much less time in it</p>",
        "id": 241537542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814720
    },
    {
        "content": "<p>master:</p>",
        "id": 241537597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814726
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>| normalize_generic_arg_after_erasing_regions     | 39.40ms   | 1.084           | 39.49ms  | 703        |\n</code></pre></div>",
        "id": 241537604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814730
    },
    {
        "content": "<p>branch:</p>",
        "id": 241537617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814735
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>| normalize_generic_arg_after_erasing_regions     | 39.98s    | 59.179          | 39.98s   | 420        |\n</code></pre></div>",
        "id": 241537625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814738
    },
    {
        "content": "<p>and that is indeed the main thing that I'm seeing in the logs</p>",
        "id": 241537637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814745
    },
    {
        "content": "<p>I did some normalization</p>",
        "id": 241537643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814748
    },
    {
        "content": "<p>mostly the two branches are invoking the query on the same types, but then there will be big chunks of work that are only on master</p>",
        "id": 241537681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814766
    },
    {
        "content": "<p>certainly <code>fold_binder</code> is doing a lot more work now</p>",
        "id": 241537894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814846
    },
    {
        "content": "<p>(it makes you wonder, right... like if all we want are placeholders, we don't really need to do any folding :)</p>",
        "id": 241538014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814894
    },
    {
        "content": "<p>let me do a perf record</p>",
        "id": 241538039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/241538014\">said</a>:</p>\n<blockquote>\n<p>(it makes you wonder, right... like if all we want are placeholders, we don't really need to do any folding :)</p>\n</blockquote>\n<p>can you clarify</p>",
        "id": 241538077,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622814921
    },
    {
        "content": "<p>well</p>",
        "id": 241538180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814960
    },
    {
        "content": "<p>right now we eagerly fold and replace bound variables with placeholders</p>",
        "id": 241538272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814984
    },
    {
        "content": "<p>but we could instead just remember the universe that this particular binder mapped to</p>",
        "id": 241538298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622814995
    },
    {
        "content": "<p>and do the mapping between bound variable and placeholder lazilly, as we pull things out</p>",
        "id": 241538317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815005
    },
    {
        "content": "<p>I'm not, however, sure that's a significant part of the time regardless</p>",
        "id": 241538347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815017
    },
    {
        "content": "<p>I've always wanted to take a lazier approach though</p>",
        "id": 241538365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815024
    },
    {
        "content": "<p>we do it in the NLL code</p>",
        "id": 241538380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815029
    },
    {
        "content": "<p>Interesting. That actually might be really relevant for these deeply nested types</p>",
        "id": 241538459,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622815069
    },
    {
        "content": "<p>where recursing through them probably takes a significant amount of time</p>",
        "id": 241538522,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622815085
    },
    {
        "content": "<p>right</p>",
        "id": 241538536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815090
    },
    {
        "content": "<p>I do hate perf</p>",
        "id": 241538709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815171
    },
    {
        "content": "<p>I mean I love perf</p>",
        "id": 241538715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815174
    },
    {
        "content": "<p>it's just so painful to extract information from it sometimes</p>",
        "id": 241538728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815181
    },
    {
        "content": "<p>one thing I observe:</p>",
        "id": 241539097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815312
    },
    {
        "content": "<p>I really wish we had like a flamegraph approach</p>",
        "id": 241539108,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622815316
    },
    {
        "content": "<p>all the \"missing\" queries (queries that appear only in master) are <code>Reveal: All</code></p>",
        "id": 241539180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815327
    },
    {
        "content": "<p>isn't there a way to convert <code>-Zself-profile</code> into flamegraph? cc <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></p>",
        "id": 241539224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815346
    },
    {
        "content": "<p>or maybe <span class=\"user-mention\" data-user-id=\"124287\">@mw</span></p>",
        "id": 241539240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815352
    },
    {
        "content": "<p>Yeah</p>",
        "id": 241539247,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622815356
    },
    {
        "content": "<p>Oh, <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> is not subscribed here--- well he is now!</p>",
        "id": 241539266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815364
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/measureme/tree/master/flamegraph\">https://github.com/rust-lang/measureme/tree/master/flamegraph</a></p>",
        "id": 241539299,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622815376
    },
    {
        "content": "<p>trying that out now</p>",
        "id": 241539358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> is there a way to filter down the events to those with a given query</p>",
        "id": 241539400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815422
    },
    {
        "content": "<p>I think more helpful would be able to dig into things that aren't explicitly labeled, like replacing the bound vars with placeholders</p>",
        "id": 241539425,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622815432
    },
    {
        "content": "<p>I miss <code>perf-focus</code></p>",
        "id": 241539427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/241539425\">said</a>:</p>\n<blockquote>\n<p>I think more helpful would be able to dig into things that aren't explicitly labeled, like replacing the bound vars with placeholders</p>\n</blockquote>\n<p>we can label them, presumably</p>",
        "id": 241539501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815450
    },
    {
        "content": "<p>You mean queries with a specific query key? Or something else?</p>",
        "id": 241539516,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622815457
    },
    {
        "content": "<p>I only want to see stuff that involves a given query</p>",
        "id": 241539553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815474
    },
    {
        "content": "<p>I would <em>also</em> like to filter by details about the key</p>",
        "id": 241539574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815483
    },
    {
        "content": "<p>still, this flamegraph is pretty interesting</p>",
        "id": 241539719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> if the same query is invoked many times in the flamegraph, would each have their own distinct box?</p>",
        "id": 241539753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815553
    },
    {
        "content": "<p>No, we don't have any features like that.</p>",
        "id": 241539831,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622815570
    },
    {
        "content": "<p>flamegraph: <a href=\"http://smallcultfollowing.com/rustc.svg\">http://smallcultfollowing.com/rustc.svg</a></p>",
        "id": 241539844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> can I somehow dump out individual samples in more detail?</p>",
        "id": 241539902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815604
    },
    {
        "content": "<p>Not usually, you can think of flamegraphs as \"GROUP BY stack\" so multiple instances of the same query on the same stack level will be collapsed together.</p>",
        "id": 241539922,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622815612
    },
    {
        "content": "<p>oh, that's less useful</p>",
        "id": 241539955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815624
    },
    {
        "content": "<p>I want to know if there are a few expensive instances</p>",
        "id": 241539994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815641
    },
    {
        "content": "<p>or many cheap ones</p>",
        "id": 241540001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815645
    },
    {
        "content": "<p>I guess I have to clone the repo and start changing things</p>",
        "id": 241540019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815653
    },
    {
        "content": "<p>also it's so cool that we have this tooling :)</p>",
        "id": 241540178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815709
    },
    {
        "content": "<p>sorry if I seem like I'm carping</p>",
        "id": 241540192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815716
    },
    {
        "content": "<p>The fastest thing to do might be to change <a href=\"https://github.com/rust-lang/measureme/tree/master/mmview\">https://github.com/rust-lang/measureme/tree/master/mmview</a> to output JSON</p>",
        "id": 241540193,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622815716
    },
    {
        "content": "<p>what does mmview output now?</p>",
        "id": 241540244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815736
    },
    {
        "content": "<p>and then you can import that into whatever analysis tool you want that accepts JSON or use jq or something.</p>",
        "id": 241540272,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622815745
    },
    {
        "content": "<p>it kind of ... looks like json?</p>",
        "id": 241540301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815758
    },
    {
        "content": "<p>I guess not</p>",
        "id": 241540329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815769
    },
    {
        "content": "<p>Malformed json basically :)</p>",
        "id": 241540336,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622815772
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    println!(\n        r#&quot;{{\n    kind: {},\n    label: {},\n    additional_data: [{}],\n    timestamp: {},\n    thread_id: {},\n}}&quot;#,\n        event.event_kind, event.label, additional_data, timestamp, event.thread_id\n    );\n</code></pre></div>",
        "id": 241540348,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622815778
    },
    {
        "content": "<p>we should make a meta tool for all these tools</p>",
        "id": 241540352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815780
    },
    {
        "content": "<p>so you can do <code>measureme flamegraph</code> or whatever</p>",
        "id": 241540368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815786
    },
    {
        "content": "<p>anway that looks useful, I can probably get what I want from that + ripgrep</p>",
        "id": 241540456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622815809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so, I should try to make replacing bound vars &lt;=&gt; placeholders lazy</p>",
        "id": 241541694,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622816246
    },
    {
        "content": "<p>Any other thoughts on things I can try this weekend?</p>",
        "id": 241541855,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622816299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> still digging some</p>",
        "id": 241542577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816611
    },
    {
        "content": "<p>I've got some interesting data</p>",
        "id": 241542590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816620
    },
    {
        "content": "<p>in short, there are a few <em>really expensive</em> queries</p>",
        "id": 241542600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/241540352\">said</a>:</p>\n<blockquote>\n<p>we should make a meta tool for all these tools</p>\n</blockquote>\n<p><a href=\"https://internals.rust-lang.org/t/compiler-profiling-survey/10969/18\">I think so too</a></p>",
        "id": 241542740,
        "sender_full_name": "mw",
        "timestamp": 1622816667
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>. If you come up with a few things for me to do, I can work more this weekend</p>",
        "id": 241542829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622816709
    },
    {
        "content": "<p>I'm going to post a google drive spreadsheet</p>",
        "id": 241542901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816741
    },
    {
        "content": "<p>I did some ripgrep magic and threw some stuff into an excel spreadsheet</p>",
        "id": 241542920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816758
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>47391225    49118601    1727376 4.32%   30.83%\n35380955    37122967    1742012 4.36%   35.19%\n49118638    50862857    1744219 4.36%   39.55%\n16909761    18666769    1757008 4.39%   43.95%\n7970773 9754038 1783265 4.46%   48.41%\n1533853 3768334 2234481 5.59%   54.00%\n43889263    47391206    3501943 8.76%   62.75%\n20445464    24000777    3555313 8.89%   71.65%\n13346026    16909497    3563471 8.91%   80.56%\n24000839    27572418    3571579 8.93%   89.49%\n3768736 7970587 4201851 10.51%  100.00%\n</code></pre></div>",
        "id": 241542972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816765
    },
    {
        "content": "<p>that's the tail end of it</p>",
        "id": 241542995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816776
    },
    {
        "content": "<p>neat</p>",
        "id": 241543032,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622816794
    },
    {
        "content": "<p>ugh so annoying</p>",
        "id": 241543033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816794
    },
    {
        "content": "<p>anyway the first percentage -- e.g., 10.51% -- is \"percentage of total time spent in this query from this particular instance\"</p>",
        "id": 241543075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816813
    },
    {
        "content": "<p>and the second percentage is the running total</p>",
        "id": 241543085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816817
    },
    {
        "content": "<p>s/neat/annoying</p>",
        "id": 241543093,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622816819
    },
    {
        "content": "<p>so you can see that the trailing few are accounting for the vast majority of time</p>",
        "id": 241543124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816830
    },
    {
        "content": "<p>now the question is \"what are those queries', but you can bet they are some very big folders</p>",
        "id": 241543152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816846
    },
    {
        "content": "<p>if I had to guess</p>",
        "id": 241543159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816848
    },
    {
        "content": "<p>well it seems obvious doesn't it</p>",
        "id": 241543166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816853
    },
    {
        "content": "<p>I think the way we set this up, it will do O(n^2) work</p>",
        "id": 241543178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816860
    },
    {
        "content": "<p>for things with nested folders</p>",
        "id": 241543204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816872
    },
    {
        "content": "<p>so yes, being lazy would be a big win</p>",
        "id": 241543254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816883
    },
    {
        "content": "<p>we could probably handle that locally to this folder</p>",
        "id": 241543269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816889
    },
    {
        "content": "<p>I can point you at how the NLL code does it</p>",
        "id": 241543282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622816894
    },
    {
        "content": "<p>I think I've seen the NLL code</p>",
        "id": 241543390,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622816956
    },
    {
        "content": "<p>How O(n^2)?</p>",
        "id": 241543441,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622816980
    },
    {
        "content": "<p><a href=\"https://drive.google.com/file/d/1V1q252eyLo3uY2A7OEqGEDvsqSyylpTW/view?usp=sharing\">https://drive.google.com/file/d/1V1q252eyLo3uY2A7OEqGEDvsqSyylpTW/view?usp=sharing</a></p>",
        "id": 241543651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817051
    },
    {
        "content": "<p>in case you want to see the data</p>",
        "id": 241543679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/241543441\">said</a>:</p>\n<blockquote>\n<p>How O(n^2)?</p>\n</blockquote>\n<p>well, if we have nested fors</p>",
        "id": 241543789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817091
    },
    {
        "content": "<p>let's say <code>for&lt;'a&gt; ... for&lt;'b&gt; ... for&lt;'c&gt; ...</code></p>",
        "id": 241543811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817100
    },
    {
        "content": "<p>we are going to first replace <code>'a</code> with placeholders</p>",
        "id": 241543833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817106
    },
    {
        "content": "<p>yielding <code>... for&lt;'b&gt; ... for&lt;'c&gt; ...</code></p>",
        "id": 241543855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817113
    },
    {
        "content": "<p>then we will replace <code>'b</code></p>",
        "id": 241543900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817123
    },
    {
        "content": "<p>and then <code>'c</code></p>",
        "id": 241543919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817124
    },
    {
        "content": "<p>ah yeah</p>",
        "id": 241543928,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622817128
    },
    {
        "content": "<p>for each of those replacements, we traverse the type (O^n)..</p>",
        "id": 241543936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817132
    },
    {
        "content": "<p>...ok, you see it :)</p>",
        "id": 241543944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817135
    },
    {
        "content": "<p>so what I would do is instead to grow a vector with the universes</p>",
        "id": 241543975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817144
    },
    {
        "content": "<p>I guess technically O(n^k) where k is the level of nesting</p>",
        "id": 241543995,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622817152
    },
    {
        "content": "<p>and then at the last second, we walk the type we plan to actually normalize</p>",
        "id": 241544005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817155
    },
    {
        "content": "<p>which is even worse</p>",
        "id": 241544026,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622817162
    },
    {
        "content": "<p>yeah, true, good point</p>",
        "id": 241544038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817167
    },
    {
        "content": "<p>n^2 for 2 binders :)</p>",
        "id": 241544056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817174
    },
    {
        "content": "<p>Niko's school of O thought: you have O(n), and then you have \"too slow\"</p>",
        "id": 241544095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817188
    },
    {
        "content": "<p>anyway</p>",
        "id": 241544099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817188
    },
    {
        "content": "<p>Well, now that I see that, I realize how obvious it is</p>",
        "id": 241544161,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622817213
    },
    {
        "content": "<p>then at the last point we can replace each bound thing by indexing from the end of the list of universes to find the right universe</p>",
        "id": 241544195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817225
    },
    {
        "content": "<p>it's still going to be kind of painful</p>",
        "id": 241544219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817239
    },
    {
        "content": "<p>as we have to recursively substitute back</p>",
        "id": 241544272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817243
    },
    {
        "content": "<p>and that too is an expensive folding</p>",
        "id": 241544286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817249
    },
    {
        "content": "<p>which is why I was wondering whether we could represent bound types and placeholders literally the same, but that... well, that'd be harder</p>",
        "id": 241544347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817279
    },
    {
        "content": "<p>we used to do it in chalk, too, is was just kind of a pain</p>",
        "id": 241544367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817289
    },
    {
        "content": "<p>let's fix the first half and then worry about the second, I guess, it seems like something that could be optimized</p>",
        "id": 241544428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817317
    },
    {
        "content": "<p>e.g. maybe just checking for \"does this contain placeholders\" would work 99% of the time</p>",
        "id": 241544454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817330
    },
    {
        "content": "<p>substituting back shouldn't be as bad</p>",
        "id": 241544463,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622817336
    },
    {
        "content": "<p>Yeah, because unless there were placeholders to start, we don't have to work</p>",
        "id": 241544518,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622817357
    },
    {
        "content": "<p>But yeah, I can do this</p>",
        "id": 241544642,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622817390
    },
    {
        "content": "<p>Maybe this evening, maybe not until tomorrow</p>",
        "id": 241544662,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622817398
    },
    {
        "content": "<p>great!</p>",
        "id": 241545010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817536
    },
    {
        "content": "<p>productive morning time :)</p>",
        "id": 241545017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817539
    },
    {
        "content": "<p>and thanks to <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> and <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> for <code>-Zself-profile</code> :)</p>",
        "id": 241545033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622817551
    },
    {
        "content": "<p>Please do file issues as you come across things you wish the tools did. Most of the things in this thread are probably fairly easy to do, we just need to know what people want <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 241545729,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622817852
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>. You're always so helpful</p>",
        "id": 241546044,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622817970
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was thinking a bit more about this. I don't actually think we recurse all the way down the types in <code>fold_binder</code> (in this case), because I don't think any of the deep inner types reference the outermost bound vars</p>",
        "id": 241557345,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622822760
    },
    {
        "content": "<p>i.e. it's only a couple levels deep</p>",
        "id": 241557407,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622822772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> hmmm---could be--- it'd be good to identify which are the values that are taking so long</p>",
        "id": 241558312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> is there an easy way to have measureme dump out the times from each query as they happen, so I could correlate the logs?</p>",
        "id": 241558345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823210
    },
    {
        "content": "<p>Yeah. I mean, I think being more lazy will be better in general, but I'm less hopeful now that I thought about it</p>",
        "id": 241558352,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622823213
    },
    {
        "content": "<p>we can dig a bit deeper</p>",
        "id": 241558370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823223
    },
    {
        "content": "<p>there's something else I was wondering about</p>",
        "id": 241558390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823233
    },
    {
        "content": "<p>master:</p>",
        "id": 241558459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823247
    },
    {
        "content": "<p>| codegen_module                                  | 1.01s     | 27.855          | 1.03s    | 13         |</p>",
        "id": 241558462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823248
    },
    {
        "content": "<p>branch:</p>",
        "id": 241558495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823266
    },
    {
        "content": "<p>| codegen_module                                  | 9.04s     | 13.385          | 23.01s   | 13         |</p>",
        "id": 241558498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823267
    },
    {
        "content": "<p>9x!</p>",
        "id": 241558503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823270
    },
    {
        "content": "<p>what's going on <em>there</em>?</p>",
        "id": 241558513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823276
    },
    {
        "content": "<p>could we be normalizing though</p>",
        "id": 241558531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823288
    },
    {
        "content": "<p>I guess I should pull out perf focus</p>",
        "id": 241558572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823309
    },
    {
        "content": "<p>yeah, possibly that includes some erase-then-normalize calls</p>",
        "id": 241558732,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622823364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> There isn't but if you are recording query keys, that might be the easiest way to match up the output manually assuming your logs also have that data in them.</p>",
        "id": 241559066,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622823535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> how do you record query keys?</p>",
        "id": 241559263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823610
    },
    {
        "content": "<p><code>rustc -Zself-profile -Zself-profile-events=default,args</code></p>",
        "id": 241559316,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622823633
    },
    {
        "content": "<p>processing the perf data is taking <em>forever</em></p>",
        "id": 241559603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823764
    },
    {
        "content": "<p>oh I think I know why</p>",
        "id": 241559622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823771
    },
    {
        "content": "<p>well, let's try a lower <code>-F</code></p>",
        "id": 241559688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622823802
    },
    {
        "content": "<p>When profiling rustc, I usually have to use <code>perf report --no-inline</code> to generate report in a reasonable amount of time.</p>",
        "id": 241560363,
        "sender_full_name": "tm",
        "timestamp": 1622824096
    },
    {
        "content": "<p>So, it's a bit interesting. Even though the NLL code stores the scope, it's not \"fully\" as lazy at it could be, given that it does visit the entire type to start: <a href=\"https://github.com/rust-lang/rust/blob/9104c898eb323f9edd205acf87c2b2d6badeddd7/compiler/rustc_infer/src/infer/nll_relate/mod.rs#L189\">https://github.com/rust-lang/rust/blob/9104c898eb323f9edd205acf87c2b2d6badeddd7/compiler/rustc_infer/src/infer/nll_relate/mod.rs#L189</a></p>",
        "id": 241645341,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622911854
    },
    {
        "content": "<p>Ok the lazy replacement fixed the normalization regression. Now there's just the codegen perf regression. (For that benchmark, some others have up to a 10% regression)</p>",
        "id": 242350313,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623420637
    },
    {
        "content": "<p>So, trying to look into why there's a codegen regression.</p>",
        "id": 242402549,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623445243
    },
    {
        "content": "<p>And I'm a bit confused</p>",
        "id": 242402558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623445250
    },
    {
        "content": "<p>(still looking at the <code>deeply-nested-async</code>benchmark)</p>",
        "id": 242402651,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623445296
    },
    {
        "content": "<p>So, on master we end up calling <code>llvm_type</code> with a generator that has an <code>impl Future</code> as a subst...but since this is codegen time, I would expect that to normalize to <code>GenFuture</code></p>",
        "id": 242402776,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623445347
    },
    {
        "content": "<p>And obviously in the branch, we <em>do</em> normalize</p>",
        "id": 242402811,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623445366
    },
    {
        "content": "<p>which means it's just a <em>much</em> bigger type</p>",
        "id": 242402827,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623445378
    },
    {
        "content": "<p>It's interesting though, because we're in <code>Reveal::All</code> <em>and</em> we've \"erased\" regions (but not late-bound regions)</p>",
        "id": 242402873,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623445419
    },
    {
        "content": "<p>We could try using unnamed types once again in LLVM 13 (last attempt was reverted due to lack of support for overloading on unnamed types, but it was implemented in <a href=\"https://reviews.llvm.org/D91250\">https://reviews.llvm.org/D91250</a>), or use shorter less informative names now (the generator type names are especially verbose).</p>",
        "id": 242404681,
        "sender_full_name": "tm",
        "timestamp": 1623446327
    },
    {
        "content": "<p>The longest type name grows from 15MB to 61MB.</p>",
        "id": 242406703,
        "sender_full_name": "tm",
        "timestamp": 1623447431
    },
    {
        "content": "<p>Yeah, because the <code>impl Future</code> subst gets expanded, it gets very long</p>",
        "id": 242407380,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623447815
    },
    {
        "content": "<p>Okay so just <em>not</em> substituting opaque types when there are escaping bound vars fixes the codegen perf regression</p>",
        "id": 242430467,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623477910
    },
    {
        "content": "<p>So, the deeply nested async test gets as much as a 34% perf improvement in incr-unchanged and like 13% on full</p>",
        "id": 242430535,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623477970
    },
    {
        "content": "<p>Seems like there's a separate regression during typeck to look into though</p>",
        "id": 242430540,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623477989
    },
    {
        "content": "<p>About 10% max</p>",
        "id": 242430544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623477994
    },
    {
        "content": "<p>Actually, might not be a typeck regression. Looks also like a codegen regression (incr-unchanged has basically no diff)</p>",
        "id": 242430704,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623478178
    },
    {
        "content": "<p>Well, maybe that's not enough to say it's a codegen regression</p>",
        "id": 242430759,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623478232
    },
    {
        "content": "<p>Ok yeah, not codegen because check benches regress</p>",
        "id": 242430847,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623478393
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/rust-lang/rust/issues/86240\">#86240</a>,but I see you already resolved that aspect of perf regression.</p>",
        "id": 242435711,
        "sender_full_name": "tm",
        "timestamp": 1623485608
    },
    {
        "content": "<p>btw do we document anywhere that these types' pretty printing can have such a dramatic impact on codegen performance ? (albeit in uncommon/pathological cases of course, making them performance-sensitive on the happy path, instead of, say, just when pretty printing for displaying errors)</p>",
        "id": 242448465,
        "sender_full_name": "lqd",
        "timestamp": 1623501438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"335061\">@TM</span> this is okay, ideally I can revert the latest commit :)</p>",
        "id": 242452388,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623506761
    },
    {
        "content": "<p>So, I tried reproducing the perf regressions for the other benchmarks with ~10% max locally. And haven't really been able to. There might be an instruction count regression, but I don't think there's really much, if any, of a wall time regression</p>",
        "id": 242610040,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623682772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> could you maybe take a look if you find time? Specifically the inflate-check and keccak-check are big regressions</p>",
        "id": 242610197,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623682817
    },
    {
        "content": "<p>I <em>almost</em> just want to eat the regression, given that we also have like a  30% improvement for the deep-nested-async now</p>",
        "id": 242610572,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623682937
    },
    {
        "content": "<p>btw have you tried rerunning perf now that <a href=\"https://github.com/rust-lang/rust/issues/86240\">#86240</a> has landed (since it had a 50-70% improvement on some of the <code>deeply-nested-async</code> benchmarks) and its results looked complementary to your PR's results  ?</p>",
        "id": 242622386,
        "sender_full_name": "lqd",
        "timestamp": 1623687299
    },
    {
        "content": "<p>I have not, but yes, they should be complementary</p>",
        "id": 242626544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623689178
    },
    {
        "content": "<p>So, can anyone help me by doing profile for this branch (<a href=\"https://github.com/jackh726/rust/tree/assoc-type-norm-rebase\">https://github.com/jackh726/rust/tree/assoc-type-norm-rebase</a>) and its base (<a href=\"https://github.com/jackh726/rust/commit/df70463ea5d701489d6f53dc780a2c16294d6143\">https://github.com/jackh726/rust/commit/df70463ea5d701489d6f53dc780a2c16294d6143</a>) for the \"keccak-check\" benchmark? I can go through and compare, but not currently able to run perf locally</p>",
        "id": 242642394,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623696402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you get some time, would love some thoughts on this!</p>",
        "id": 242798023,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623790340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 243056750,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623952223
    },
    {
        "content": "<p>sort of</p>",
        "id": 243064402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623955276
    },
    {
        "content": "<p>I think I'm kind of stuck here</p>",
        "id": 243064593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623955364
    },
    {
        "content": "<p>yeah, sorry I've not given you any feedback yet</p>",
        "id": 243064631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623955382
    },
    {
        "content": "<p>keccak-check is the problem now?</p>",
        "id": 243064662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623955392
    },
    {
        "content": "<p>I've been trying to find out what exactly is causing the typeck perf regression in the branch</p>",
        "id": 243064670,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623955397
    },
    {
        "content": "<p>keccak-check or inflate-check</p>",
        "id": 243064683,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623955403
    },
    {
        "content": "<p>But these benchmarks are so big that logging things is kind of awful</p>",
        "id": 243064718,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623955419
    },
    {
        "content": "<p>yeah</p>",
        "id": 243068483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623957020
    },
    {
        "content": "<p>I'm still confused. So, outputting <code>project_type</code>, <code>normalize_with_depth_to</code>, and <code>query::normalize::normalize</code>, and diffing, the only difference is:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>35c35\n&lt; ┐rustc_trait_selection::traits::project::normalize_with_depth_to depth=0, value=Binder(([&amp;mut [u64; _]]; c_variadic: false)-&gt;(), [Region(BrAnon(0))])\n<span class=\"gd\">---</span>\n&gt; ┐rustc_trait_selection::traits::project::normalize_with_depth_to depth=0, value=([&amp;mut [u64; _]]; c_variadic: false)-&gt;()\n57,58d56\n&lt; ┘\n&lt; ┐rustc_trait_selection::traits::project::normalize_with_depth_to depth=0, value=Binder(([&amp;mut [u64; 25]]; c_variadic: false)-&gt;(), [Region(BrAnon(0))])\n</code></pre></div>",
        "id": 243103026,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623976136
    },
    {
        "content": "<p>So, whatever has changed in <code>typeck</code> isn't easily found</p>",
        "id": 243103161,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623976226
    },
    {
        "content": "<p>Even just logging <code>debug</code> for <code>rustc_typeck</code> outputs over three million lines, so kind of difficult to diff</p>",
        "id": 243103791,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623976673
    },
    {
        "content": "<p>Okay...so the number of calls logged for <code>rustc_typeck=debug</code> is the same</p>",
        "id": 243109955,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623982999
    },
    {
        "content": "<p>So...maybe we're not necessarily doing <em>more</em> work, just slower...</p>",
        "id": 243109965,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623983026
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, I think realistically the next step here is for you to do a real review of <a href=\"https://github.com/rust-lang/rust/issues/85499\">#85499</a></p>",
        "id": 244156972,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624892068
    },
    {
        "content": "<p>I queued a crater run for this. Seems significant enough that there could definitely be some corner cases</p>",
        "id": 244202821,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624913419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ok</p>",
        "id": 244295265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1624978785
    },
    {
        "content": "<p><a href=\"https://crater.rust-lang.org/ex/pr-85499\">https://crater.rust-lang.org/ex/pr-85499</a><br>\nEstimated end:  2 months<br>\nThat can't be right lol</p>",
        "id": 244312350,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624985586
    },
    {
        "content": "<p>we switched to a different run (it errored out and was retried)</p>",
        "id": 244312429,
        "sender_full_name": "simulacrum",
        "timestamp": 1624985618
    },
    {
        "content": "<p>it'll probably be done ~next monday, roughly</p>",
        "id": 244312444,
        "sender_full_name": "simulacrum",
        "timestamp": 1624985624
    },
    {
        "content": "<p>mmm okay</p>",
        "id": 244312470,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624985636
    },
    {
        "content": "<p>Tried to dig into the <code>Yokeable</code> bug. Fell down the leak check rabbit hole again</p>",
        "id": 244378129,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625029631
    },
    {
        "content": "<p>My brain still can't get comfortable with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 244378136,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625029655
    },
    {
        "content": "<p>Like I can understand that <code>fn(T)</code> and <code>for&lt;'a&gt; fn(&amp;'a T)</code> aren't the same. But like...it's weird</p>",
        "id": 244378203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625029697
    },
    {
        "content": "<p>Okay, so still haven't fully dug into it. But <code>'static</code> is coming because we're basically equating the closure signature with the expected function type. And we get something like <code>Yokeable&lt;{placeholder}&gt;</code> LUBed with <code>Yokeable&lt;ReFree&gt;</code>, which means <code>'static</code></p>",
        "id": 244440466,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625066451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 244460896,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625074633
    },
    {
        "content": "<p>Okay I have a MCVE of the regression: <a href=\"https://gist.github.com/jackh726/f8ed5202fbbfa2e65f9cc4723a89828f\">https://gist.github.com/jackh726/f8ed5202fbbfa2e65f9cc4723a89828f</a></p>",
        "id": 244595737,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625158215
    },
    {
        "content": "<p>builds in nightly, fails in <a href=\"https://github.com/rust-lang/rust/issues/85499\">#85499</a></p>",
        "id": 244595744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625158222
    },
    {
        "content": "<p>haven't completely confirmed this, but I think I have an idea of what's going on</p>",
        "id": 244595794,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625158249
    },
    {
        "content": "<p>in the closure, we have <code>|yt, _| yt</code></p>",
        "id": 244595829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625158270
    },
    {
        "content": "<p>The output of the closure gets assigned a type variable <code>_#4t</code></p>",
        "id": 244595899,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625158308
    },
    {
        "content": "<p>that gets generalized to <code>&amp;'_#6r ()</code></p>",
        "id": 244596043,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625158369
    },
    {
        "content": "<p>and then there's this Sub: <code>&amp;ReFree(DefId(0:19 ~ issue_85636[317d]::slice::{closure#0}), BrAnon(0)) () &lt;: &amp;'_#6r ()</code></p>",
        "id": 244596132,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625158417
    },
    {
        "content": "<p>We also want to pass that closure to <code>project</code></p>",
        "id": 244596223,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625158447
    },
    {
        "content": "<p>where the output expected is <code>&lt;P as Yokeable&lt;'a&gt;&gt;::Output</code></p>",
        "id": 244596258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625158462
    },
    {
        "content": "<p>eventually, <code>&amp;'_#6r ()</code> and <code>&amp;'a ()</code> get equated, somewhat. But that <code>'a</code> is a placeholder...</p>",
        "id": 244596522,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625158592
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>eq(&lt;&amp;&#39;_#9r () as Yokeable&lt;RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:17 ~ issue_85636[317d]::{impl#0}::project::&#39;a#1), &#39;a) })&gt;&gt; == &lt;&amp;ReStatic _#12t as Yokeable&lt;&#39;_#10r&gt;&gt;)\n</code></pre></div>",
        "id": 244596722,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625158696
    },
    {
        "content": "<p>I mean, technically <code>'_#10r</code> gets subbed with <code>'a</code> and equated with <code>'_#6r</code></p>",
        "id": 244596890,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625158776
    },
    {
        "content": "<p>But now they're chained and eventually we <code>LUB</code> a <code>ReFree</code> and <code>RePlaceholder</code> and get a <code>ReStatic</code></p>",
        "id": 244597040,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625158820
    },
    {
        "content": "<p>I'm kind of out of time atm to dig into this more. But I think I need to look into <code>'_#10r</code> a bit more. I.e. why is it getting equated and subbed on both sides. I think that connection is \"leaking\" out of the projection code.</p>",
        "id": 244597258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625158913
    },
    {
        "content": "<p>I wonder if this is a hint that these projections need to be happening in a new inference context</p>",
        "id": 244597606,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625159049
    },
    {
        "content": "<p>Oh <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>! I think this is the test case for the <code>Quantify</code> :)</p>",
        "id": 244607414,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625163787
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>ProjectionPredicate(ProjectionTy { substs: [_#2t, RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:17 ~ issue_85636[317d]::{impl#0}::project::&#39;a#1), &#39;a) })], item_def_id: DefId(0:5 ~ issue_85636[317d]::Yokeable::Output) }, _#4t)\n</code></pre></div>",
        "id": 244607421,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625163792
    },
    {
        "content": "<p>That predicate is \"escaping\" the projection code</p>",
        "id": 244607463,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625163809
    },
    {
        "content": "<p>well...</p>",
        "id": 244609002,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625164594
    },
    {
        "content": "<p>this is tricky</p>",
        "id": 244609023,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625164612
    },
    {
        "content": "<p>It's not <em>quite</em> the same as the <code>Generalize</code>/<code>Quantify</code> you were thinking. Since this is happening in the <em>predicates</em></p>",
        "id": 244610570,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625165364
    },
    {
        "content": "<p>I guess in this case, we probably want a new type <code>?X</code> that is the \"normalized_ty\" and then push a <code>Quantify(_#4t, ?X, !'a -&gt; 'a)</code></p>",
        "id": 244612075,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625166066
    },
    {
        "content": "<p>And that will probably fix it. And I am once again astonished by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s foresight</p>",
        "id": 244612468,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625166252
    },
    {
        "content": "<p>..happy to be of service...</p>",
        "id": 244612490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625166272
    },
    {
        "content": "<p>(Sorry I'm so out of it here)</p>",
        "id": 244612495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625166279
    },
    {
        "content": "<p>No problem. Pretty sure I figured it out</p>",
        "id": 244612590,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625166335
    },
    {
        "content": "<p>Ugh well guess this is going to be less straightforward than I expected</p>",
        "id": 244654483,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625194089
    },
    {
        "content": "<p>So, currently, when we see a <code>ty::Projection</code>, we basically take all escaping bound vars, replace them with placeholders,  project, then replace the placeholders with bound vars. (This is the happy path.) Importantly, we do the bound var replacement <em>lazily</em>, after we've already descended past the binders for them. The rationale for why this is okay is that it's more or less a <code>Binder::map</code>, where we don't create new bound vars</p>",
        "id": 244654630,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625194299
    },
    {
        "content": "<p>Well, now the not-so-happy path. If we see something like <code>&lt;?0 as Trait&gt;::Assoc</code>, then the projection bit fails. So, on mast, we make a new ty var <code>?1</code> and use <em>that</em> as the projected type. And the register the obligation <code>&lt;?0 as Trait&gt;::Assoc -&gt; ?1</code></p>",
        "id": 244654766,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625194492
    },
    {
        "content": "<p>This is where things get tricky</p>",
        "id": 244654771,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625194505
    },
    {
        "content": "<p>If instead we have something like <code>&lt;?0 as Trait&lt;'a&gt;&gt;::Assoc</code> where there is a <code>for&lt;'a&gt;</code> somewhere above us, then what is that obligation going to look like?</p>",
        "id": 244654828,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625194586
    },
    {
        "content": "<p><code>for&lt;'a&gt; &lt;?0 as Trait&lt;'a&gt;&gt;::Assoc -&gt; ?1</code>, right? Except, we're already beneath the binders.</p>",
        "id": 244654851,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625194640
    },
    {
        "content": "<p>Okay, that easy, just keep track of the binders as we descend</p>",
        "id": 244654853,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625194653
    },
    {
        "content": "<p>well, what about if we end up with something like <code>for&lt;'a&gt; for&lt;'b&gt; &lt;?0 as Trait&lt;'a, 'b&gt;&gt;::Assoc</code></p>",
        "id": 244654898,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625194687
    },
    {
        "content": "<p>Well, now that predicate has two levels of binders</p>",
        "id": 244654901,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625194707
    },
    {
        "content": "<p>Even better, we <em>really</em> want something like two new variables: <code>?1</code> and <code>?2</code> and then we register <em>two</em> predicates, <code>&lt;?0 as Trait&lt;'!a&gt;&gt;::Assoc -&gt; ?1</code> and <code>Quantify(?1, ?2, {'!a -&gt; 'a})</code>, where we return <code>?2</code></p>",
        "id": 244655030,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625194884
    },
    {
        "content": "<p>Importantly, this let's us ensure that we don't get things related to <code>?1</code> directly, since that will have the projected placeholders</p>",
        "id": 244655086,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625194940
    },
    {
        "content": "<p>We still have the same problem though, that <code>'a</code> (late bound version) appears in the <code>Quantify</code> predicate</p>",
        "id": 244655102,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625194986
    },
    {
        "content": "<p>So, same problem exists in that we've passed the binders and also could have multiple levels</p>",
        "id": 244655110,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625195012
    },
    {
        "content": "<p>Welp so <code>Quantify</code> seems to have an inherit flaw, at least in the current state: bound vars can't be related. So if we have <code>Quantify(?0, ?1, '!a -&gt; 'a)</code>, eventually we might be a type <code>X&lt;'!a&gt;</code> for <code>?0</code>, but then when we try to equate <code>X&lt;'a&gt;</code> and <code>?1</code>, it fails</p>",
        "id": 244866602,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625415775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I could really use some thoughts here</p>",
        "id": 245049838,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625583168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> the key point here being that <code>'a</code> is a bound variable... i.e., this is occurring within a <em>nested</em> binder?</p>",
        "id": 245088347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600118
    },
    {
        "content": "<p>Sorry, where?</p>",
        "id": 245088484,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/244866602\">said</a>:</p>\n<blockquote>\n<p>Welp so <code>Quantify</code> seems to have an inherit flaw, at least in the current state: bound vars can't be related. So if we have <code>Quantify(?0, ?1, '!a -&gt; 'a)</code>, eventually we might be a type <code>X&lt;'!a&gt;</code> for <code>?0</code>, but then when we try to equate <code>X&lt;'a&gt;</code> and <code>?1</code>, it fails</p>\n</blockquote>\n<p>here</p>",
        "id": 245088507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600202
    },
    {
        "content": "<p>so...I'm not sure what you're asking?</p>",
        "id": 245088646,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600268
    },
    {
        "content": "<p>Yes, <code>'a</code> is bound</p>",
        "id": 245088657,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600274
    },
    {
        "content": "<p>If I understood correctly, <code>Quantify</code> is supposed to delay replacing placeholders with bound vars from which they came until the type is sufficiently well known</p>",
        "id": 245088802,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600359
    },
    {
        "content": "<p>I'm trying to figure out how it fails</p>",
        "id": 245088847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600392
    },
    {
        "content": "<p>one sec, I'll get link</p>",
        "id": 245088958,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600436
    },
    {
        "content": "<p>I guess you're just saying: if we replace <code>'!a</code> with the <code>ReLateBound</code>  whence it came, we cannot use the existing unification logic</p>",
        "id": 245088960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600437
    },
    {
        "content": "<p>yes</p>",
        "id": 245088973,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600447
    },
    {
        "content": "<p>Yes, and this .. seems true. We could readily fix it, but I'm wondering if indeeeeed the scheme isn't a little broken</p>",
        "id": 245089218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600587
    },
    {
        "content": "<p>In particular, if you have <code>?1</code> and it <em>may eventually</em> reference bound regions</p>",
        "id": 245089248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600603
    },
    {
        "content": "<p>and you wind up with a type like <code>for&lt;'a&gt; fn(?1)</code></p>",
        "id": 245089259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600611
    },
    {
        "content": "<p>yeah, that's more or less where my mind was going</p>",
        "id": 245089284,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600627
    },
    {
        "content": "<p>we can't execute operations on that type until <code>?1</code> is known</p>",
        "id": 245089285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600627
    },
    {
        "content": "<p>err, maybe</p>",
        "id": 245089303,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600639
    },
    {
        "content": "<p>yeah, which is roughly why I always tried to avoid this in the past</p>",
        "id": 245089307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600643
    },
    {
        "content": "<p>for example we couldn't \"instantiate all the bound regions\" in that type</p>",
        "id": 245089391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600667
    },
    {
        "content": "<p>Even sort of continuing on this...the problems really start to show up when we fail to project something like <code>&lt;?0 as Trait&lt;'a&gt;&gt;::Assoc</code></p>",
        "id": 245089504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600732
    },
    {
        "content": "<p>But we return <code>?1</code></p>",
        "id": 245089512,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600736
    },
    {
        "content": "<p>And register <code>&lt;?0 as Trait&lt;'a&gt;&gt;::Assoc = ?1</code></p>",
        "id": 245089549,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600755
    },
    {
        "content": "<p>Because either <code>'a</code> is placeholder, or it's a bound var. But either way, eventually we're going to end up with something like <code>?1 = for&lt;'a&gt; ...</code></p>",
        "id": 245089678,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600811
    },
    {
        "content": "<p>which is a bit weird</p>",
        "id": 245089690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600819
    },
    {
        "content": "<p>I don't really understand your example</p>",
        "id": 245089760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600858
    },
    {
        "content": "<p>But maybe, sadly, this endeavor is flawed, and we have to backup a bit</p>",
        "id": 245089780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625600868
    },
    {
        "content": "<p>It's starting to feel it...</p>",
        "id": 245089808,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600882
    },
    {
        "content": "<p>I was thinking about...what if when we can't project...we just don't. We essentially keep the old behavior.</p>",
        "id": 245090074,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625600999
    },
    {
        "content": "<p>But I don't really like that</p>",
        "id": 245090096,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625601003
    },
    {
        "content": "<p>hmm</p>",
        "id": 245090154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625601023
    },
    {
        "content": "<p>kind of a \"best effort\"?</p>",
        "id": 245090156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625601025
    },
    {
        "content": "<p>I'm feeling a bit annoyed at myself for not seeing this problem (so much for foresight :P)</p>",
        "id": 245090173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625601040
    },
    {
        "content": "<p>but regardless</p>",
        "id": 245090186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625601046
    },
    {
        "content": "<p>what was the bug that started us down this path again?</p>",
        "id": 245090210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625601059
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/76407\">https://github.com/rust-lang/rust/issues/76407</a> ?</p>",
        "id": 245090235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625601073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20Bugs.20.2376826.2C.20.2376407/near/244595737\">said</a>:</p>\n<blockquote>\n<p>Okay I have a MCVE of the regression: <a href=\"https://gist.github.com/jackh726/f8ed5202fbbfa2e65f9cc4723a89828f\">https://gist.github.com/jackh726/f8ed5202fbbfa2e65f9cc4723a89828f</a></p>\n</blockquote>\n<p>this</p>",
        "id": 245090247,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625601083
    },
    {
        "content": "<p>oh wait</p>",
        "id": 245090266,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625601102
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/76826\">https://github.com/rust-lang/rust/issues/76826</a></p>",
        "id": 245090274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625601106
    },
    {
        "content": "<p>do you mean all the way back to GATs</p>",
        "id": 245090276,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625601108
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/76826\">#76826</a></p>",
        "id": 245090343,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625601132
    },
    {
        "content": "<p>But also somewhat <a href=\"https://github.com/rust-lang/rust/issues/76407\">#76407</a> too</p>",
        "id": 245090354,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625601143
    },
    {
        "content": "<p>My thoughts were something like \"this should be relatively easy to fix for GATs, because we should always actually be able to project the type assuming there aren't bound vars in the <em>trait path</em>\"</p>",
        "id": 245090438,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625601195
    },
    {
        "content": "<p>Kind of a subset of the current changes</p>",
        "id": 245090486,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625601224
    },
    {
        "content": "<p>Yes, so, that's .. plausible</p>",
        "id": 245091371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625601658
    }
]