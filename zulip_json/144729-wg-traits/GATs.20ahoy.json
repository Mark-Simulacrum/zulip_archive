[
    {
        "content": "<p>Btw, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, I'm around today, but would prefer to sync over Zulip</p>",
        "id": 247191770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627300135
    },
    {
        "content": "<p>(when the time comes)</p>",
        "id": 247191784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627300148
    },
    {
        "content": "<p>That worke for me</p>",
        "id": 247196349,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627303408
    },
    {
        "content": "<p>Gonna be a couple minutes late. In the meantime, can you look at the blog post?</p>",
        "id": 247198152,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627304390
    },
    {
        "content": "<p>Yep</p>",
        "id": 247198421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304490
    },
    {
        "content": "<p>Ok here</p>",
        "id": 247198801,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627304671
    },
    {
        "content": "<p>I am still reading blog post :)</p>",
        "id": 247198836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304689
    },
    {
        "content": "<p>No worries</p>",
        "id": 247199018,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627304770
    },
    {
        "content": "<p>I figure if you read through, there's no reason not to be able to publish today, I don't think.</p>",
        "id": 247199066,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627304800
    },
    {
        "content": "<p>I think it's good</p>",
        "id": 247199165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304854
    },
    {
        "content": "<p>I'm debating if we could do more to give the \"TL;DR' or why you should care about this</p>",
        "id": 247199198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304873
    },
    {
        "content": "<p>but I think we don't have to</p>",
        "id": 247199253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304886
    },
    {
        "content": "<p>given that it's still unstable etc etc I think we can hold off on devoting a lot of script to explaining how great it is</p>",
        "id": 247199298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304912
    },
    {
        "content": "<p>and the examples are really good</p>",
        "id": 247199308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304920
    },
    {
        "content": "<p>I'm thinking mostly of folks who dont know rust especially well, they may not be able to follow, but then they probably aren't the ones who are going to try it at this phase</p>",
        "id": 247199339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304936
    },
    {
        "content": "<p>Right</p>",
        "id": 247199382,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627304964
    },
    {
        "content": "<p>Okay, so I'll address the 3 review comments and change the date to today</p>",
        "id": 247199515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305025
    },
    {
        "content": "<p>Then you think it's good?</p>",
        "id": 247199518,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305028
    },
    {
        "content": "<p>I'm thinking</p>",
        "id": 247199701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305128
    },
    {
        "content": "<p>I was thinking about the \"lending iterator\" example</p>",
        "id": 247199719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305140
    },
    {
        "content": "<p>I wonder if we could just add a short paragraph up front like this:</p>",
        "id": 247199726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305146
    },
    {
        "content": "<p>Maybe it will never be short</p>",
        "id": 247199771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305175
    },
    {
        "content": "<p>--- yes, it's good :)</p>",
        "id": 247199822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305204
    },
    {
        "content": "<p>I'm looking up some old blog posts of mine</p>",
        "id": 247199842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305217
    },
    {
        "content": "<p>e.g. <a href=\"https://smallcultfollowing.com/babysteps/blog/2016/11/02/associated-type-constructors-part-1-basic-concepts-and-introduction/\">https://smallcultfollowing.com/babysteps/blog/2016/11/02/associated-type-constructors-part-1-basic-concepts-and-introduction/</a></p>",
        "id": 247199856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305224
    },
    {
        "content": "<p>we could maybe link to those posts, though we'd have to explain the shift in terminology</p>",
        "id": 247199939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305249
    },
    {
        "content": "<p>honestly i'm not sure how accessible they are anyway</p>",
        "id": 247199952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305259
    },
    {
        "content": "<p>Hmm</p>",
        "id": 247199981,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305280
    },
    {
        "content": "<p>there are several follow-up posts:</p>\n<ul>\n<li><a href=\"https://smallcultfollowing.com/babysteps/blog/2016/11/03/associated-type-constructors-part-2-family-traits/\">https://smallcultfollowing.com/babysteps/blog/2016/11/03/associated-type-constructors-part-2-family-traits/</a></li>\n<li><a href=\"https://smallcultfollowing.com/babysteps/blog/2016/11/04/associated-type-constructors-part-3-what-higher-kinded-types-might-look-like/\">https://smallcultfollowing.com/babysteps/blog/2016/11/04/associated-type-constructors-part-3-what-higher-kinded-types-might-look-like/</a></li>\n<li><a href=\"https://smallcultfollowing.com/babysteps/blog/2016/11/09/associated-type-constructors-part-4-unifying-atc-and-hkt/\">https://smallcultfollowing.com/babysteps/blog/2016/11/09/associated-type-constructors-part-4-unifying-atc-and-hkt/</a></li>\n</ul>",
        "id": 247200002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305294
    },
    {
        "content": "<p>I would say it's probably not worth it</p>",
        "id": 247200003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305294
    },
    {
        "content": "<p>I agree</p>",
        "id": 247200009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305299
    },
    {
        "content": "<p>better to just write some new posts</p>",
        "id": 247200021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305303
    },
    {
        "content": "<p>ok, ship it :)</p>",
        "id": 247200030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305306
    },
    {
        "content": "<p>Okay, I'll make the changes and cc core</p>",
        "id": 247200053,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305318
    },
    {
        "content": "<p>Okay, so</p>",
        "id": 247200089,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305338
    },
    {
        "content": "<p>For other things to discuss</p>",
        "id": 247200099,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305342
    },
    {
        "content": "<p>I've been working through GATs issues</p>",
        "id": 247200119,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305352
    },
    {
        "content": "<p>Already got one diagnostics PR merged (implicit static in trait objects in GATs)</p>",
        "id": 247200193,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305378
    },
    {
        "content": "<p>Nice</p>",
        "id": 247200211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305390
    },
    {
        "content": "<p>There's <a href=\"https://github.com/rust-lang/rust/issues/84931\">#84931</a></p>",
        "id": 247200218,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305395
    },
    {
        "content": "<p>Which basically just needs to just adding a <code>where</code> clause on GATs instead of a lifetime bound on the type param</p>",
        "id": 247200258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305419
    },
    {
        "content": "<p>that was pretty easy</p>",
        "id": 247200267,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305423
    },
    {
        "content": "<p>just have to PR it and get feedback</p>",
        "id": 247200278,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305428
    },
    {
        "content": "<p>(but the code is written)</p>",
        "id": 247200295,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20ahoy/near/247200218\">said</a>:</p>\n<blockquote>\n<p>There's <a href=\"https://github.com/rust-lang/rust/issues/84931\">#84931</a></p>\n</blockquote>\n<p>what happens, I wonder, if you're missing the <code>where Self: 'a</code> on the trait?</p>",
        "id": 247200303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305441
    },
    {
        "content": "<p>this is definitely going to be a common point of GAT confusion</p>",
        "id": 247200312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305450
    },
    {
        "content": "<p>(<em>so annoying</em> that it is necessary)</p>",
        "id": 247200328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305459
    },
    {
        "content": "<p>Good question, I'll make sure that test case is included</p>",
        "id": 247200360,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305482
    },
    {
        "content": "<p>the diagnostic I wrote <em>should</em> cover that</p>",
        "id": 247200415,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305494
    },
    {
        "content": "<p>and yes, this is going to be a bit confusing</p>",
        "id": 247200434,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305509
    },
    {
        "content": "<p>there's no PR attached to that issue</p>",
        "id": 247200438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305511
    },
    {
        "content": "<p>Let me just make the PR quickly then</p>",
        "id": 247200454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305525
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/87478\">#87478</a></p>",
        "id": 247200561,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305593
    },
    {
        "content": "<p>There might be a better way to do this</p>",
        "id": 247200630,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305611
    },
    {
        "content": "<p>OK</p>",
        "id": 247200668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305632
    },
    {
        "content": "<p>Apart from diagnostics, any other blocking issues you know of?</p>",
        "id": 247200686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305641
    },
    {
        "content": "<p>yes</p>",
        "id": 247200690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305645
    },
    {
        "content": "<p>Have you done a full sweep of triaged issues etc?</p>",
        "id": 247200697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305648
    },
    {
        "content": "<p>How up to date is the project board?</p>",
        "id": 247200705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305651
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/86787\">#86787</a></p>",
        "id": 247200707,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305651
    },
    {
        "content": "<p>I thought this was diagnostics (that's what it's labeled as)</p>",
        "id": 247200727,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305662
    },
    {
        "content": "<p>but it's not</p>",
        "id": 247200731,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305664
    },
    {
        "content": "<p>(project board: let me double check)</p>",
        "id": 247200761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20ahoy/near/247200731\">said</a>:</p>\n<blockquote>\n<p>but it's not</p>\n</blockquote>\n<p>what is it?</p>",
        "id": 247200796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305693
    },
    {
        "content": "<p>the problem is we give the help: \"consider adding an explicit lifetime bound <code>&lt;Left as HasChildrenOf&gt;::T: 'a</code>\"</p>",
        "id": 247200803,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305697
    },
    {
        "content": "<p>I do expect an error there, right?</p>",
        "id": 247200815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305703
    },
    {
        "content": "<p>but we have</p>",
        "id": 247200841,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305716
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">TRef</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">HasChildrenOf</span><span class=\"o\">&gt;</span>::<span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">Right</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">HasChildrenOf</span><span class=\"o\">&gt;</span>::<span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span>\n    <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Either</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Left</span>::<span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Right</span>::<span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247200848,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305719
    },
    {
        "content": "<p>I feel like we should <em>ideally</em> be saying \"this impl cannot add where clauses that the trait doesn't have\"</p>",
        "id": 247200856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305722
    },
    {
        "content": "<p>ohh</p>",
        "id": 247200904,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305729
    },
    {
        "content": "<p>maybe it is just diagnostics then</p>",
        "id": 247200934,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305741
    },
    {
        "content": "<p>What do we do for functions here?</p>",
        "id": 247200964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305753
    },
    {
        "content": "<p>That's a good question</p>",
        "id": 247201016,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305778
    },
    {
        "content": "<p>I only started looking at this last night</p>",
        "id": 247201039,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305789
    },
    {
        "content": "<p>didn't get very far</p>",
        "id": 247201047,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305792
    },
    {
        "content": "<p>But also, how <em>could</em> we do this, if the impl can't have additional where clauses?</p>",
        "id": 247201114,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305825
    },
    {
        "content": "<p>Because there is no <code>Left</code> or <code>Right</code> on the trait</p>",
        "id": 247201143,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305837
    },
    {
        "content": "<p>and <code>'a</code> is a lifetime on the associated type</p>",
        "id": 247201192,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305845
    },
    {
        "content": "<p>/me looks</p>",
        "id": 247201390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305938
    },
    {
        "content": "<p>I think that <code>where Self:  'a</code> suffices</p>",
        "id": 247201459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305963
    },
    {
        "content": "<p>Self: 'a =&gt; Left: 'a</p>",
        "id": 247201509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305971
    },
    {
        "content": "<p>Left: 'a =&gt; &lt;Left as HasChildrenOf&gt;::T: 'a</p>",
        "id": 247201522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305977
    },
    {
        "content": "<p>not sure if this is exactly what you meant, but <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2c3779dbd947a046c56ae8b40e2608fe\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2c3779dbd947a046c56ae8b40e2608fe</a> is what we output for fns with extra where clauses</p>",
        "id": 247201550,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305990
    },
    {
        "content": "<p>try for regions</p>",
        "id": 247201608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306014
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n --&gt; src/lib.rs:8:11\n  |\n4 |     fn foo&lt;&#39;a, T&gt;();\n  |           ------- lifetimes in impl do not match this method in trait\n...\n8 |     fn foo&lt;&#39;a, T&gt;() where T: &#39;a {}\n  |           ^^^^^^^ lifetimes do not match method in trait\n</code></pre></div>",
        "id": 247201662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306033
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=834f0a235d928e5dda6488d6ded970f3\">playground</a></p>",
        "id": 247201687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306043
    },
    {
        "content": "<p><code>where Self: 'a</code> works</p>",
        "id": 247201694,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306046
    },
    {
        "content": "<p>Ideally, want to give that as a diagnostic</p>",
        "id": 247201724,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306058
    },
    {
        "content": "<p>this sort of example is why those rules were setup that way</p>",
        "id": 247201734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306060
    },
    {
        "content": "<p>but oh boy not sure how</p>",
        "id": 247201747,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306066
    },
    {
        "content": "<p>(I'd still like to tweak them a bit...)</p>",
        "id": 247201753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306068
    },
    {
        "content": "<p>glad to see those tweaks paying off in practice :)</p>",
        "id": 247201841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306097
    },
    {
        "content": "<p>which rules?</p>",
        "id": 247201869,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306109
    },
    {
        "content": "<p>The <code>Self: 'a</code> and such</p>",
        "id": 247201880,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306113
    },
    {
        "content": "<p>?</p>",
        "id": 247201884,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306115
    },
    {
        "content": "<p>the rules that make those implications true</p>",
        "id": 247201919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306129
    },
    {
        "content": "<p>gotcha</p>",
        "id": 247201932,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306136
    },
    {
        "content": "<p>Ok, so I definitely have to think about how to output a good diagnostic here</p>",
        "id": 247201993,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306166
    },
    {
        "content": "<p>The correct code is a few steps removed and non-obvious</p>",
        "id": 247202037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306186
    },
    {
        "content": "<p>yeah</p>",
        "id": 247202059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306196
    },
    {
        "content": "<p>I do wonder how many GATs will <em>ever</em> exist that don't have a <code>where Self: 'a</code>-style clause :/</p>",
        "id": 247202141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306212
    },
    {
        "content": "<p>well, we'll worry about that for later</p>",
        "id": 247202174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306224
    },
    {
        "content": "<p>Also curious :)</p>",
        "id": 247202230,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306248
    },
    {
        "content": "<p>Would be interesting to think if we could somehow make that the default</p>",
        "id": 247202278,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306270
    },
    {
        "content": "<p>and allowing <em>opting out</em></p>",
        "id": 247202290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306277
    },
    {
        "content": "<p>yeah, I know</p>",
        "id": 247202295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306280
    },
    {
        "content": "<p>Something like <code>T: ?Sized</code></p>",
        "id": 247202301,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306283
    },
    {
        "content": "<p>it's a nasty pattern though</p>",
        "id": 247202303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306283
    },
    {
        "content": "<p>I might rather infer it from impls in the crate</p>",
        "id": 247202325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306293
    },
    {
        "content": "<p>but that's also nasty</p>",
        "id": 247202336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306297
    },
    {
        "content": "<p>I don't prefer that at all</p>",
        "id": 247202353,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306308
    },
    {
        "content": "<p>we have time to tweak those rules, in any case</p>",
        "id": 247202361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306314
    },
    {
        "content": "<p>even post stabilization, if we care to use an edition</p>",
        "id": 247202419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20ahoy/near/247202353\">said</a>:</p>\n<blockquote>\n<p>I don't prefer that at all</p>\n</blockquote>\n<p>yeah, I think I take it back</p>",
        "id": 247202468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306349
    },
    {
        "content": "<p>so, I wonder if this is something we should note in the blog post?</p>",
        "id": 247202481,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306356
    },
    {
        "content": "<p>inferring from impls is both complex and has that problem that when you move the impl out of the crate, behavior changes in subtle ways. bad.</p>",
        "id": 247202502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306366
    },
    {
        "content": "<p>I am pondering-- <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> asked about the where Self: 'a</p>",
        "id": 247202521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306378
    },
    {
        "content": "<p>I definitely think it's worth calling out</p>",
        "id": 247202536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306383
    },
    {
        "content": "<p>worth calling out</p>",
        "id": 247202565,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306396
    },
    {
        "content": "<p>and probably asking for examples where that isn't needed?</p>",
        "id": 247202580,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306407
    },
    {
        "content": "<p>on that note, having people catalog how they are using it</p>",
        "id": 247202589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306410
    },
    {
        "content": "<p>would be really useful</p>",
        "id": 247202592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306412
    },
    {
        "content": "<p>(or, specifically when you need that <em>not</em> there)</p>",
        "id": 247202609,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306422
    },
    {
        "content": "<p>we could default it from the trait declaration</p>",
        "id": 247202639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306436
    },
    {
        "content": "<p>the rule I had considered before was this:</p>",
        "id": 247202650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306442
    },
    {
        "content": "<ul>\n<li>look at all the method signatures in the trait</li>\n</ul>",
        "id": 247202709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306451
    },
    {
        "content": "<ul>\n<li>each place where <code>Self::Foo&lt;'a&gt;</code> is used, look at what type parameters <code>'a</code> is known to outlive from the method signatures</li>\n</ul>",
        "id": 247202738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306472
    },
    {
        "content": "<ul>\n<li>take the intersection and add them as default where clauses</li>\n</ul>",
        "id": 247202752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306479
    },
    {
        "content": "<p>so e.g. if you had</p>",
        "id": 247202762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306486
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">me</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">some_method</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inputs</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247202834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306527
    },
    {
        "content": "<p>we could infer both <code>Self: 'me</code> and <code>T: 'me</code></p>",
        "id": 247202853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306539
    },
    {
        "content": "<p>we should definitely think about this before we stabilize</p>",
        "id": 247202871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306554
    },
    {
        "content": "<p>hmm</p>",
        "id": 247202878,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306558
    },
    {
        "content": "<p>let's open an issue on it so we can do a proper write-up and direct people there</p>",
        "id": 247202891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306562
    },
    {
        "content": "<p>Okay. You or me?</p>",
        "id": 247202970,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306584
    },
    {
        "content": "<p>I suppose there are a few options</p>\n<ul>\n<li>Simple, limited default: if exactly one lifetime parameter <code>'x</code>, add <code>where Self: 'x</code></li>\n<li>Simple default: for every lifetime parameter <code>'x</code>, add <code>where Self: 'x</code></li>\n<li>Complex default: what Niko proposed</li>\n</ul>",
        "id": 247203032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306620
    },
    {
        "content": "<p>I think what we want is probably feedback from people: what kinds of annoying where clauses do they have to add in practice?</p>",
        "id": 247203103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306654
    },
    {
        "content": "<p>The reason I proposed my rule is this:</p>",
        "id": 247203113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306659
    },
    {
        "content": "<p>basically, in order to use the trait, those were rules you'd have to meet in any case</p>",
        "id": 247203197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306689
    },
    {
        "content": "<p>I'm trying to imagine a scenario where the outlives rule <em>doesn't</em> hold</p>",
        "id": 247203257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306726
    },
    {
        "content": "<p>Sorry to jump in there but I am planning to try out GAT on a partially closed source project but I anticipate I would <em>not</em> want <code>where Self: 'x</code> bounds in my case</p>",
        "id": 247203269,
        "sender_full_name": "marmeladema",
        "timestamp": 1627306730
    },
    {
        "content": "<p>that is, where adding <code>where Self: 'a</code> is harmful</p>",
        "id": 247203273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> great! what are you doing with it :)</p>",
        "id": 247203292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306746
    },
    {
        "content": "<p>most of the examples I can come up with involve kind of \"Dummy self types\" where it wouldn't hurt</p>",
        "id": 247203308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306756
    },
    {
        "content": "<p>e.g. because the self type has no references, so it <em>does</em> outlive <code>'a</code></p>",
        "id": 247203325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20ahoy/near/247202970\">said</a>:</p>\n<blockquote>\n<p>Okay. You or me?</p>\n</blockquote>\n<p>Either is fine with me :) but I think we will want to write up some text explaining the role of the default</p>",
        "id": 247203370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306798
    },
    {
        "content": "<p>I think the blog post would link to this issue and be like \"if you'd like to learn more about that clause -- such as why it is necessary, and how we might tweak the rules to make it not necessray -- see <a href=\"https://github.com/rust-lang/rust/issues/12345\">#12345</a>\"</p>",
        "id": 247203448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306823
    },
    {
        "content": "<p>Can you open an issue now?</p>",
        "id": 247203466,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306829
    },
    {
        "content": "<p>If not, I will</p>",
        "id": 247203490,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306845
    },
    {
        "content": "<p>But I think you would probably do a better job explaining</p>",
        "id": 247203510,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306857
    },
    {
        "content": "<p>I work in an interpreter that from an AST / ParseTree \"compiles\" those nodes into boxed closure and those boxed closures are taking a \"context\" as argument which has a lifetime. The \"compilation\" step is done through a <code>Compiler</code> trait that has default implementation for every AST nodes. And I wondered if I could make the \"context\" a GAT of that trait</p>",
        "id": 247203622,
        "sender_full_name": "marmeladema",
        "timestamp": 1627306921
    },
    {
        "content": "<p>I can</p>",
        "id": 247203683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> after I open the issue, it'd be helpful if you could make a kind of \"representative version\" of your use case</p>",
        "id": 247203727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306962
    },
    {
        "content": "<p>but the type that will implements the <code>Compiler</code> trait must not be tied to the actual lifetime of the context itself</p>",
        "id": 247203830,
        "sender_full_name": "marmeladema",
        "timestamp": 1627307007
    },
    {
        "content": "<p>I'm drafting up the issue, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, anything else to cover this morning?</p>",
        "id": 247203979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627307090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> that does sound like the sort of use case I was thinking of</p>",
        "id": 247204005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627307104
    },
    {
        "content": "<p>I think that's everything for GATs</p>",
        "id": 247204044,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627307124
    },
    {
        "content": "<p>One non-GATs thing to mention: <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> commented on <a href=\"https://github.com/rust-lang/rust/issues/84944\">#84944</a> re incremental</p>",
        "id": 247204083,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627307153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20ahoy/near/247203727\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> after I open the issue, it'd be helpful if you could make a kind of \"representative version\" of your use case</p>\n</blockquote>\n<p>I'll definitely write up something sharable with this work-group <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 247204236,
        "sender_full_name": "marmeladema",
        "timestamp": 1627307220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> still working on that issue?</p>",
        "id": 247205876,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627308030
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/87479\">https://github.com/rust-lang/rust/issues/87479</a></p>",
        "id": 247205887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 247205888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308042
    },
    {
        "content": "<p>I'm going to edit the OP to add a few notes though</p>",
        "id": 247205905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308050
    },
    {
        "content": "<p>Okay blog post PR has been updated</p>",
        "id": 247208148,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627309124
    },
    {
        "content": "<p>Great. I tweaked the issue a bit (e.g., adding the \"I have an opinion! What should I do?\"</p>",
        "id": 247210685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627310161
    }
]