[
    {
        "content": "<p>Btw, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, I'm around today, but would prefer to sync over Zulip</p>",
        "id": 247191770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627300135
    },
    {
        "content": "<p>(when the time comes)</p>",
        "id": 247191784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627300148
    },
    {
        "content": "<p>That worke for me</p>",
        "id": 247196349,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627303408
    },
    {
        "content": "<p>Gonna be a couple minutes late. In the meantime, can you look at the blog post?</p>",
        "id": 247198152,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627304390
    },
    {
        "content": "<p>Yep</p>",
        "id": 247198421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304490
    },
    {
        "content": "<p>Ok here</p>",
        "id": 247198801,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627304671
    },
    {
        "content": "<p>I am still reading blog post :)</p>",
        "id": 247198836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304689
    },
    {
        "content": "<p>No worries</p>",
        "id": 247199018,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627304770
    },
    {
        "content": "<p>I figure if you read through, there's no reason not to be able to publish today, I don't think.</p>",
        "id": 247199066,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627304800
    },
    {
        "content": "<p>I think it's good</p>",
        "id": 247199165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304854
    },
    {
        "content": "<p>I'm debating if we could do more to give the \"TL;DR' or why you should care about this</p>",
        "id": 247199198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304873
    },
    {
        "content": "<p>but I think we don't have to</p>",
        "id": 247199253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304886
    },
    {
        "content": "<p>given that it's still unstable etc etc I think we can hold off on devoting a lot of script to explaining how great it is</p>",
        "id": 247199298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304912
    },
    {
        "content": "<p>and the examples are really good</p>",
        "id": 247199308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304920
    },
    {
        "content": "<p>I'm thinking mostly of folks who dont know rust especially well, they may not be able to follow, but then they probably aren't the ones who are going to try it at this phase</p>",
        "id": 247199339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304936
    },
    {
        "content": "<p>Right</p>",
        "id": 247199382,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627304964
    },
    {
        "content": "<p>Okay, so I'll address the 3 review comments and change the date to today</p>",
        "id": 247199515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305025
    },
    {
        "content": "<p>Then you think it's good?</p>",
        "id": 247199518,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305028
    },
    {
        "content": "<p>I'm thinking</p>",
        "id": 247199701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305128
    },
    {
        "content": "<p>I was thinking about the \"lending iterator\" example</p>",
        "id": 247199719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305140
    },
    {
        "content": "<p>I wonder if we could just add a short paragraph up front like this:</p>",
        "id": 247199726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305146
    },
    {
        "content": "<p>Maybe it will never be short</p>",
        "id": 247199771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305175
    },
    {
        "content": "<p>--- yes, it's good :)</p>",
        "id": 247199822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305204
    },
    {
        "content": "<p>I'm looking up some old blog posts of mine</p>",
        "id": 247199842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305217
    },
    {
        "content": "<p>e.g. <a href=\"https://smallcultfollowing.com/babysteps/blog/2016/11/02/associated-type-constructors-part-1-basic-concepts-and-introduction/\">https://smallcultfollowing.com/babysteps/blog/2016/11/02/associated-type-constructors-part-1-basic-concepts-and-introduction/</a></p>",
        "id": 247199856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305224
    },
    {
        "content": "<p>we could maybe link to those posts, though we'd have to explain the shift in terminology</p>",
        "id": 247199939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305249
    },
    {
        "content": "<p>honestly i'm not sure how accessible they are anyway</p>",
        "id": 247199952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305259
    },
    {
        "content": "<p>Hmm</p>",
        "id": 247199981,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305280
    },
    {
        "content": "<p>there are several follow-up posts:</p>\n<ul>\n<li><a href=\"https://smallcultfollowing.com/babysteps/blog/2016/11/03/associated-type-constructors-part-2-family-traits/\">https://smallcultfollowing.com/babysteps/blog/2016/11/03/associated-type-constructors-part-2-family-traits/</a></li>\n<li><a href=\"https://smallcultfollowing.com/babysteps/blog/2016/11/04/associated-type-constructors-part-3-what-higher-kinded-types-might-look-like/\">https://smallcultfollowing.com/babysteps/blog/2016/11/04/associated-type-constructors-part-3-what-higher-kinded-types-might-look-like/</a></li>\n<li><a href=\"https://smallcultfollowing.com/babysteps/blog/2016/11/09/associated-type-constructors-part-4-unifying-atc-and-hkt/\">https://smallcultfollowing.com/babysteps/blog/2016/11/09/associated-type-constructors-part-4-unifying-atc-and-hkt/</a></li>\n</ul>",
        "id": 247200002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305294
    },
    {
        "content": "<p>I would say it's probably not worth it</p>",
        "id": 247200003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305294
    },
    {
        "content": "<p>I agree</p>",
        "id": 247200009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305299
    },
    {
        "content": "<p>better to just write some new posts</p>",
        "id": 247200021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305303
    },
    {
        "content": "<p>ok, ship it :)</p>",
        "id": 247200030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305306
    },
    {
        "content": "<p>Okay, I'll make the changes and cc core</p>",
        "id": 247200053,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305318
    },
    {
        "content": "<p>Okay, so</p>",
        "id": 247200089,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305338
    },
    {
        "content": "<p>For other things to discuss</p>",
        "id": 247200099,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305342
    },
    {
        "content": "<p>I've been working through GATs issues</p>",
        "id": 247200119,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305352
    },
    {
        "content": "<p>Already got one diagnostics PR merged (implicit static in trait objects in GATs)</p>",
        "id": 247200193,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305378
    },
    {
        "content": "<p>Nice</p>",
        "id": 247200211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305390
    },
    {
        "content": "<p>There's <a href=\"https://github.com/rust-lang/rust/issues/84931\">#84931</a></p>",
        "id": 247200218,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305395
    },
    {
        "content": "<p>Which basically just needs to just adding a <code>where</code> clause on GATs instead of a lifetime bound on the type param</p>",
        "id": 247200258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305419
    },
    {
        "content": "<p>that was pretty easy</p>",
        "id": 247200267,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305423
    },
    {
        "content": "<p>just have to PR it and get feedback</p>",
        "id": 247200278,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305428
    },
    {
        "content": "<p>(but the code is written)</p>",
        "id": 247200295,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20ahoy/near/247200218\">said</a>:</p>\n<blockquote>\n<p>There's <a href=\"https://github.com/rust-lang/rust/issues/84931\">#84931</a></p>\n</blockquote>\n<p>what happens, I wonder, if you're missing the <code>where Self: 'a</code> on the trait?</p>",
        "id": 247200303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305441
    },
    {
        "content": "<p>this is definitely going to be a common point of GAT confusion</p>",
        "id": 247200312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305450
    },
    {
        "content": "<p>(<em>so annoying</em> that it is necessary)</p>",
        "id": 247200328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305459
    },
    {
        "content": "<p>Good question, I'll make sure that test case is included</p>",
        "id": 247200360,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305482
    },
    {
        "content": "<p>the diagnostic I wrote <em>should</em> cover that</p>",
        "id": 247200415,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305494
    },
    {
        "content": "<p>and yes, this is going to be a bit confusing</p>",
        "id": 247200434,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305509
    },
    {
        "content": "<p>there's no PR attached to that issue</p>",
        "id": 247200438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305511
    },
    {
        "content": "<p>Let me just make the PR quickly then</p>",
        "id": 247200454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305525
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/87478\">#87478</a></p>",
        "id": 247200561,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305593
    },
    {
        "content": "<p>There might be a better way to do this</p>",
        "id": 247200630,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305611
    },
    {
        "content": "<p>OK</p>",
        "id": 247200668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305632
    },
    {
        "content": "<p>Apart from diagnostics, any other blocking issues you know of?</p>",
        "id": 247200686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305641
    },
    {
        "content": "<p>yes</p>",
        "id": 247200690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305645
    },
    {
        "content": "<p>Have you done a full sweep of triaged issues etc?</p>",
        "id": 247200697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305648
    },
    {
        "content": "<p>How up to date is the project board?</p>",
        "id": 247200705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305651
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/86787\">#86787</a></p>",
        "id": 247200707,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305651
    },
    {
        "content": "<p>I thought this was diagnostics (that's what it's labeled as)</p>",
        "id": 247200727,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305662
    },
    {
        "content": "<p>but it's not</p>",
        "id": 247200731,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305664
    },
    {
        "content": "<p>(project board: let me double check)</p>",
        "id": 247200761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20ahoy/near/247200731\">said</a>:</p>\n<blockquote>\n<p>but it's not</p>\n</blockquote>\n<p>what is it?</p>",
        "id": 247200796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305693
    },
    {
        "content": "<p>the problem is we give the help: \"consider adding an explicit lifetime bound <code>&lt;Left as HasChildrenOf&gt;::T: 'a</code>\"</p>",
        "id": 247200803,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305697
    },
    {
        "content": "<p>I do expect an error there, right?</p>",
        "id": 247200815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305703
    },
    {
        "content": "<p>but we have</p>",
        "id": 247200841,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305716
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">TRef</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">Left</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">HasChildrenOf</span><span class=\"o\">&gt;</span>::<span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">Right</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">HasChildrenOf</span><span class=\"o\">&gt;</span>::<span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span>\n    <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Either</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Left</span>::<span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Right</span>::<span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247200848,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305719
    },
    {
        "content": "<p>I feel like we should <em>ideally</em> be saying \"this impl cannot add where clauses that the trait doesn't have\"</p>",
        "id": 247200856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305722
    },
    {
        "content": "<p>ohh</p>",
        "id": 247200904,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305729
    },
    {
        "content": "<p>maybe it is just diagnostics then</p>",
        "id": 247200934,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305741
    },
    {
        "content": "<p>What do we do for functions here?</p>",
        "id": 247200964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305753
    },
    {
        "content": "<p>That's a good question</p>",
        "id": 247201016,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305778
    },
    {
        "content": "<p>I only started looking at this last night</p>",
        "id": 247201039,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305789
    },
    {
        "content": "<p>didn't get very far</p>",
        "id": 247201047,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305792
    },
    {
        "content": "<p>But also, how <em>could</em> we do this, if the impl can't have additional where clauses?</p>",
        "id": 247201114,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305825
    },
    {
        "content": "<p>Because there is no <code>Left</code> or <code>Right</code> on the trait</p>",
        "id": 247201143,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305837
    },
    {
        "content": "<p>and <code>'a</code> is a lifetime on the associated type</p>",
        "id": 247201192,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305845
    },
    {
        "content": "<p>/me looks</p>",
        "id": 247201390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305938
    },
    {
        "content": "<p>I think that <code>where Self:  'a</code> suffices</p>",
        "id": 247201459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305963
    },
    {
        "content": "<p>Self: 'a =&gt; Left: 'a</p>",
        "id": 247201509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305971
    },
    {
        "content": "<p>Left: 'a =&gt; &lt;Left as HasChildrenOf&gt;::T: 'a</p>",
        "id": 247201522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627305977
    },
    {
        "content": "<p>not sure if this is exactly what you meant, but <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2c3779dbd947a046c56ae8b40e2608fe\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2c3779dbd947a046c56ae8b40e2608fe</a> is what we output for fns with extra where clauses</p>",
        "id": 247201550,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627305990
    },
    {
        "content": "<p>try for regions</p>",
        "id": 247201608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306014
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n --&gt; src/lib.rs:8:11\n  |\n4 |     fn foo&lt;&#39;a, T&gt;();\n  |           ------- lifetimes in impl do not match this method in trait\n...\n8 |     fn foo&lt;&#39;a, T&gt;() where T: &#39;a {}\n  |           ^^^^^^^ lifetimes do not match method in trait\n</code></pre></div>",
        "id": 247201662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306033
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=834f0a235d928e5dda6488d6ded970f3\">playground</a></p>",
        "id": 247201687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306043
    },
    {
        "content": "<p><code>where Self: 'a</code> works</p>",
        "id": 247201694,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306046
    },
    {
        "content": "<p>Ideally, want to give that as a diagnostic</p>",
        "id": 247201724,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306058
    },
    {
        "content": "<p>this sort of example is why those rules were setup that way</p>",
        "id": 247201734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306060
    },
    {
        "content": "<p>but oh boy not sure how</p>",
        "id": 247201747,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306066
    },
    {
        "content": "<p>(I'd still like to tweak them a bit...)</p>",
        "id": 247201753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306068
    },
    {
        "content": "<p>glad to see those tweaks paying off in practice :)</p>",
        "id": 247201841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306097
    },
    {
        "content": "<p>which rules?</p>",
        "id": 247201869,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306109
    },
    {
        "content": "<p>The <code>Self: 'a</code> and such</p>",
        "id": 247201880,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306113
    },
    {
        "content": "<p>?</p>",
        "id": 247201884,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306115
    },
    {
        "content": "<p>the rules that make those implications true</p>",
        "id": 247201919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306129
    },
    {
        "content": "<p>gotcha</p>",
        "id": 247201932,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306136
    },
    {
        "content": "<p>Ok, so I definitely have to think about how to output a good diagnostic here</p>",
        "id": 247201993,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306166
    },
    {
        "content": "<p>The correct code is a few steps removed and non-obvious</p>",
        "id": 247202037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306186
    },
    {
        "content": "<p>yeah</p>",
        "id": 247202059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306196
    },
    {
        "content": "<p>I do wonder how many GATs will <em>ever</em> exist that don't have a <code>where Self: 'a</code>-style clause :/</p>",
        "id": 247202141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306212
    },
    {
        "content": "<p>well, we'll worry about that for later</p>",
        "id": 247202174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306224
    },
    {
        "content": "<p>Also curious :)</p>",
        "id": 247202230,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306248
    },
    {
        "content": "<p>Would be interesting to think if we could somehow make that the default</p>",
        "id": 247202278,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306270
    },
    {
        "content": "<p>and allowing <em>opting out</em></p>",
        "id": 247202290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306277
    },
    {
        "content": "<p>yeah, I know</p>",
        "id": 247202295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306280
    },
    {
        "content": "<p>Something like <code>T: ?Sized</code></p>",
        "id": 247202301,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306283
    },
    {
        "content": "<p>it's a nasty pattern though</p>",
        "id": 247202303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306283
    },
    {
        "content": "<p>I might rather infer it from impls in the crate</p>",
        "id": 247202325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306293
    },
    {
        "content": "<p>but that's also nasty</p>",
        "id": 247202336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306297
    },
    {
        "content": "<p>I don't prefer that at all</p>",
        "id": 247202353,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306308
    },
    {
        "content": "<p>we have time to tweak those rules, in any case</p>",
        "id": 247202361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306314
    },
    {
        "content": "<p>even post stabilization, if we care to use an edition</p>",
        "id": 247202419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20ahoy/near/247202353\">said</a>:</p>\n<blockquote>\n<p>I don't prefer that at all</p>\n</blockquote>\n<p>yeah, I think I take it back</p>",
        "id": 247202468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306349
    },
    {
        "content": "<p>so, I wonder if this is something we should note in the blog post?</p>",
        "id": 247202481,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306356
    },
    {
        "content": "<p>inferring from impls is both complex and has that problem that when you move the impl out of the crate, behavior changes in subtle ways. bad.</p>",
        "id": 247202502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306366
    },
    {
        "content": "<p>I am pondering-- <span class=\"user-mention\" data-user-id=\"224872\">@rylev</span> asked about the where Self: 'a</p>",
        "id": 247202521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306378
    },
    {
        "content": "<p>I definitely think it's worth calling out</p>",
        "id": 247202536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306383
    },
    {
        "content": "<p>worth calling out</p>",
        "id": 247202565,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306396
    },
    {
        "content": "<p>and probably asking for examples where that isn't needed?</p>",
        "id": 247202580,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306407
    },
    {
        "content": "<p>on that note, having people catalog how they are using it</p>",
        "id": 247202589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306410
    },
    {
        "content": "<p>would be really useful</p>",
        "id": 247202592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306412
    },
    {
        "content": "<p>(or, specifically when you need that <em>not</em> there)</p>",
        "id": 247202609,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306422
    },
    {
        "content": "<p>we could default it from the trait declaration</p>",
        "id": 247202639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306436
    },
    {
        "content": "<p>the rule I had considered before was this:</p>",
        "id": 247202650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306442
    },
    {
        "content": "<ul>\n<li>look at all the method signatures in the trait</li>\n</ul>",
        "id": 247202709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306451
    },
    {
        "content": "<ul>\n<li>each place where <code>Self::Foo&lt;'a&gt;</code> is used, look at what type parameters <code>'a</code> is known to outlive from the method signatures</li>\n</ul>",
        "id": 247202738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306472
    },
    {
        "content": "<ul>\n<li>take the intersection and add them as default where clauses</li>\n</ul>",
        "id": 247202752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306479
    },
    {
        "content": "<p>so e.g. if you had</p>",
        "id": 247202762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306486
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">me</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">some_method</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inputs</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247202834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306527
    },
    {
        "content": "<p>we could infer both <code>Self: 'me</code> and <code>T: 'me</code></p>",
        "id": 247202853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306539
    },
    {
        "content": "<p>we should definitely think about this before we stabilize</p>",
        "id": 247202871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306554
    },
    {
        "content": "<p>hmm</p>",
        "id": 247202878,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306558
    },
    {
        "content": "<p>let's open an issue on it so we can do a proper write-up and direct people there</p>",
        "id": 247202891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306562
    },
    {
        "content": "<p>Okay. You or me?</p>",
        "id": 247202970,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306584
    },
    {
        "content": "<p>I suppose there are a few options</p>\n<ul>\n<li>Simple, limited default: if exactly one lifetime parameter <code>'x</code>, add <code>where Self: 'x</code></li>\n<li>Simple default: for every lifetime parameter <code>'x</code>, add <code>where Self: 'x</code></li>\n<li>Complex default: what Niko proposed</li>\n</ul>",
        "id": 247203032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306620
    },
    {
        "content": "<p>I think what we want is probably feedback from people: what kinds of annoying where clauses do they have to add in practice?</p>",
        "id": 247203103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306654
    },
    {
        "content": "<p>The reason I proposed my rule is this:</p>",
        "id": 247203113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306659
    },
    {
        "content": "<p>basically, in order to use the trait, those were rules you'd have to meet in any case</p>",
        "id": 247203197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306689
    },
    {
        "content": "<p>I'm trying to imagine a scenario where the outlives rule <em>doesn't</em> hold</p>",
        "id": 247203257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306726
    },
    {
        "content": "<p>Sorry to jump in there but I am planning to try out GAT on a partially closed source project but I anticipate I would <em>not</em> want <code>where Self: 'x</code> bounds in my case</p>",
        "id": 247203269,
        "sender_full_name": "marmeladema",
        "timestamp": 1627306730
    },
    {
        "content": "<p>that is, where adding <code>where Self: 'a</code> is harmful</p>",
        "id": 247203273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> great! what are you doing with it :)</p>",
        "id": 247203292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306746
    },
    {
        "content": "<p>most of the examples I can come up with involve kind of \"Dummy self types\" where it wouldn't hurt</p>",
        "id": 247203308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306756
    },
    {
        "content": "<p>e.g. because the self type has no references, so it <em>does</em> outlive <code>'a</code></p>",
        "id": 247203325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20ahoy/near/247202970\">said</a>:</p>\n<blockquote>\n<p>Okay. You or me?</p>\n</blockquote>\n<p>Either is fine with me :) but I think we will want to write up some text explaining the role of the default</p>",
        "id": 247203370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306798
    },
    {
        "content": "<p>I think the blog post would link to this issue and be like \"if you'd like to learn more about that clause -- such as why it is necessary, and how we might tweak the rules to make it not necessray -- see <a href=\"https://github.com/rust-lang/rust/issues/12345\">#12345</a>\"</p>",
        "id": 247203448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306823
    },
    {
        "content": "<p>Can you open an issue now?</p>",
        "id": 247203466,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306829
    },
    {
        "content": "<p>If not, I will</p>",
        "id": 247203490,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306845
    },
    {
        "content": "<p>But I think you would probably do a better job explaining</p>",
        "id": 247203510,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627306857
    },
    {
        "content": "<p>I work in an interpreter that from an AST / ParseTree \"compiles\" those nodes into boxed closure and those boxed closures are taking a \"context\" as argument which has a lifetime. The \"compilation\" step is done through a <code>Compiler</code> trait that has default implementation for every AST nodes. And I wondered if I could make the \"context\" a GAT of that trait</p>",
        "id": 247203622,
        "sender_full_name": "marmeladema",
        "timestamp": 1627306921
    },
    {
        "content": "<p>I can</p>",
        "id": 247203683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> after I open the issue, it'd be helpful if you could make a kind of \"representative version\" of your use case</p>",
        "id": 247203727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627306962
    },
    {
        "content": "<p>but the type that will implements the <code>Compiler</code> trait must not be tied to the actual lifetime of the context itself</p>",
        "id": 247203830,
        "sender_full_name": "marmeladema",
        "timestamp": 1627307007
    },
    {
        "content": "<p>I'm drafting up the issue, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, anything else to cover this morning?</p>",
        "id": 247203979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627307090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> that does sound like the sort of use case I was thinking of</p>",
        "id": 247204005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627307104
    },
    {
        "content": "<p>I think that's everything for GATs</p>",
        "id": 247204044,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627307124
    },
    {
        "content": "<p>One non-GATs thing to mention: <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> commented on <a href=\"https://github.com/rust-lang/rust/issues/84944\">#84944</a> re incremental</p>",
        "id": 247204083,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627307153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20ahoy/near/247203727\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> after I open the issue, it'd be helpful if you could make a kind of \"representative version\" of your use case</p>\n</blockquote>\n<p>I'll definitely write up something sharable with this work-group <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 247204236,
        "sender_full_name": "marmeladema",
        "timestamp": 1627307220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> still working on that issue?</p>",
        "id": 247205876,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627308030
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/87479\">https://github.com/rust-lang/rust/issues/87479</a></p>",
        "id": 247205887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 247205888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308042
    },
    {
        "content": "<p>I'm going to edit the OP to add a few notes though</p>",
        "id": 247205905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308050
    },
    {
        "content": "<p>Okay blog post PR has been updated</p>",
        "id": 247208148,
        "sender_full_name": "Jack Huey",
        "timestamp": 1627309124
    },
    {
        "content": "<p>Great. I tweaked the issue a bit (e.g., adding the \"I have an opinion! What should I do?\"</p>",
        "id": 247210685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627310161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay, so it's not just <code>default</code>, it's also for types on the trait itself</p>",
        "id": 249593258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629122953
    },
    {
        "content": "<p>So we no longer error with this test: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/generic-associated-types/issue-74816.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/generic-associated-types/issue-74816.rs</a></p>",
        "id": 249593343,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629122995
    },
    {
        "content": "<p>But I guess this is only relevant for <code>associated_type_defaults</code></p>",
        "id": 249593909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629123257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ah, interesting</p>",
        "id": 249605181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629128248
    },
    {
        "content": "<p>that makes sense, that kind of \"desugars\" to a <code>default</code></p>",
        "id": 249605208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629128267
    },
    {
        "content": "<p>those are currently unstable too... hmmm.....</p>",
        "id": 249605228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629128279
    },
    {
        "content": "<p>This is less straightforward than I expected</p>",
        "id": 249605394,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629128358
    },
    {
        "content": "<p>Okay <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nRegarding <a href=\"https://github.com/rust-lang/rust/issues/87900\">#87900</a>, I contend that generating a predicate in the param_env like <code>for&lt;'a&gt; &lt;I32 as Family&gt;::Member&lt;'a&gt; -&gt; i32</code> will always be right here. We specifically are asking \"does the user specified type meet the bounds defined on the trait?\" Importantly, it doesn't really matter if the parameters we choose meet <em>their</em> obligations (and, in fact, these aren't checked currently here). Now, it might make sense to actually allow us to <em>assume</em> that the obligations on the parameters hold (and that might actually be a hole in the implementation in the PR, if some of the obligations are necessary to prove an impl)</p>",
        "id": 250016401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629393186
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I created this repository <a href=\"https://github.com/nikomatsakis/generic-associated-types-initiative/\">https://github.com/nikomatsakis/generic-associated-types-initiative/</a> and invited you. I'm going to transfer it to rust-lang soon I expect.</p>",
        "id": 250618115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897515
    },
    {
        "content": "<p>Awesome</p>",
        "id": 250618159,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629897535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 251225728,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630328669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 251225844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630328731
    },
    {
        "content": "<p>let me open the hackmd</p>",
        "id": 251225859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630328741
    },
    {
        "content": "<p>I'm filling out a couple things</p>",
        "id": 251225954,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630328774
    },
    {
        "content": "<p>looking</p>",
        "id": 251226057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630328838
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/88446\">https://github.com/rust-lang/rust/issues/88446</a></p>\n</blockquote>",
        "id": 251226101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630328860
    },
    {
        "content": "<p>I see it has an MCVE, that's nice</p>",
        "id": 251226197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630328892
    },
    {
        "content": "<p>Right, so</p>",
        "id": 251226217,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630328904
    },
    {
        "content": "<p>I hit this error</p>",
        "id": 251226222,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630328911
    },
    {
        "content": "<p>(though I think it was slightly different, but same origin)</p>",
        "id": 251226238,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630328923
    },
    {
        "content": "<p>When I was rebasing <a href=\"https://github.com/rust-lang/rust/issues/85499\">#85499</a></p>",
        "id": 251226262,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630328935
    },
    {
        "content": "<p>But when I <em>fully</em> rebased it went away</p>",
        "id": 251226279,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630328946
    },
    {
        "content": "<p>This assertion was added in the NLL diagnostics PR</p>",
        "id": 251226313,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630328962
    },
    {
        "content": "<p>(getting link)</p>",
        "id": 251226318,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630328966
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/86700\">#86700</a></p>",
        "id": 251226401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329003
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">create_next_universe</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ty</span>::<span class=\"n\">UniverseIndex</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">info_universe</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">borrowck_context</span><span class=\"p\">.</span><span class=\"n\">constraints</span><span class=\"p\">.</span><span class=\"n\">universe_causes</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">universe_info</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">universe</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">create_next_universe</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">info_universe</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">universe</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">universe</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 251226513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329063
    },
    {
        "content": "<p>is that the assertion which is failing?</p>",
        "id": 251226520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329066
    },
    {
        "content": "<p>YES</p>",
        "id": 251226525,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329071
    },
    {
        "content": "<p>heh, I thought you were very enthusiastic</p>",
        "id": 251226567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329100
    },
    {
        "content": "<p>oh, hold on</p>",
        "id": 251226585,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329113
    },
    {
        "content": "<p>there</p>",
        "id": 251226649,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329126
    },
    {
        "content": "<p>I can imagine how this assertion might fail with your code :)</p>",
        "id": 251226699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329151
    },
    {
        "content": "<p>I honestly, only briefly looked at this before. And only saw this issue this morning</p>",
        "id": 251226737,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329175
    },
    {
        "content": "<p>let me pull up <a href=\"https://github.com/rust-lang/rust/issues/85499\">#85499</a></p>",
        "id": 251226765,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329190
    },
    {
        "content": "<p>well, so you are going to be creating universes during normalization</p>",
        "id": 251226925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329258
    },
    {
        "content": "<p>we didn't do that before I guess</p>",
        "id": 251226941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329268
    },
    {
        "content": "<p>hmm</p>",
        "id": 251226990,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329295
    },
    {
        "content": "<p>I am trying to remember</p>",
        "id": 251227001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329300
    },
    {
        "content": "<p>right...</p>",
        "id": 251227007,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329300
    },
    {
        "content": "<p>whether the NLL checker <em>ever</em> does normalization etc outside of queries</p>",
        "id": 251227038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329311
    },
    {
        "content": "<p>this assertion sort of suggests no, but then ...</p>",
        "id": 251227102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329343
    },
    {
        "content": "<p>... then the assertion prob wouldn't fail</p>",
        "id": 251227120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329350
    },
    {
        "content": "<p>I suppose if GATs were more used, we might have seen a regression before</p>",
        "id": 251227126,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329352
    },
    {
        "content": "<p>I suppose so</p>",
        "id": 251227274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329411
    },
    {
        "content": "<p>Probably need to be doing something extra in <code>universe_for</code> in <code>BoundVarReplacer</code></p>",
        "id": 251227348,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329440
    },
    {
        "content": "<p>yes, maybe? I would try to narrow down when the universe is being created</p>",
        "id": 251227394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329463
    },
    {
        "content": "<p>and trace that back up to the NLL borrow checker</p>",
        "id": 251227410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329471
    },
    {
        "content": "<p>I am pondering the idea of having a less fragile setup</p>",
        "id": 251227490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329495
    },
    {
        "content": "<p>e.g., maybe we should make <code>create_universe</code> have you supply some info</p>",
        "id": 251227591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329544
    },
    {
        "content": "<p>but that might not work out because the borrow check tries to layer its own stuff on there</p>",
        "id": 251227633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329570
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/d5cd3205fd6c0817fd46c036d0f3194b7deaca93/compiler/rustc_mir/src/borrow_check/diagnostics/bound_region_errors.rs#L20-L32\">https://github.com/rust-lang/rust/blob/d5cd3205fd6c0817fd46c036d0f3194b7deaca93/compiler/rustc_mir/src/borrow_check/diagnostics/bound_region_errors.rs#L20-L32</a></p>",
        "id": 251227665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329583
    },
    {
        "content": "<p>yeah, I'm seeing that</p>",
        "id": 251227666,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329584
    },
    {
        "content": "<p>the other option</p>",
        "id": 251227694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329597
    },
    {
        "content": "<p>would be to change from a vector that must always be matched</p>",
        "id": 251227746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329604
    },
    {
        "content": "<p>to a hashmap</p>",
        "id": 251227755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329606
    },
    {
        "content": "<p>where \"not present\" == \"other\"</p>",
        "id": 251227766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329612
    },
    {
        "content": "<p>yeah, was also thinking that</p>",
        "id": 251227802,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329628
    },
    {
        "content": "<p>that will fix the ICE and is prob the best <em>short-term</em> fix</p>",
        "id": 251227821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329639
    },
    {
        "content": "<p>but it'd be nice to know how the universe is being created in relation to the type checker</p>",
        "id": 251227844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329650
    },
    {
        "content": "<p>Right</p>",
        "id": 251227863,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329662
    },
    {
        "content": "<p>Unsure if there' s \"better\" fix</p>",
        "id": 251227879,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329669
    },
    {
        "content": "<p>well, we might be missing an \"interception\" point</p>",
        "id": 251227896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329678
    },
    {
        "content": "<p>I do think that a hashmap is a less fragile data structure for this</p>",
        "id": 251227917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329688
    },
    {
        "content": "<p>or a vector where we will in the gaps</p>",
        "id": 251227941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329696
    },
    {
        "content": "<p>ok. seems like we can't do much more on this without investigation. should we discuss another issue?</p>",
        "id": 251228045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329730
    },
    {
        "content": "<p>Hmm, I mean, I assume that mir borrowck uses the <code>query/normalize</code> form?</p>",
        "id": 251228056,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329733
    },
    {
        "content": "<p>(do you have time to investigate?)</p>",
        "id": 251228065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20ahoy/near/251228056\">said</a>:</p>\n<blockquote>\n<p>Hmm, I mean, I assume that mir borrowck uses the <code>query/normalize</code> form?</p>\n</blockquote>\n<p>I would've thought so, that's why I would want to investigate</p>",
        "id": 251228085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329746
    },
    {
        "content": "<p>I will investigate this week</p>",
        "id": 251228091,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329749
    },
    {
        "content": "<p>Let's discuss <a href=\"https://github.com/rust-lang/rust/issues/88441\">#88441</a></p>",
        "id": 251228155,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329770
    },
    {
        "content": "<p>So, there are two related problems this solves</p>",
        "id": 251228224,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329806
    },
    {
        "content": "<p>Let's look at <code>src/test/ui/higher-rank-trait-bounds/normalize-under-binder/normalization-under-binders-1.rs</code> in that PR as an example</p>",
        "id": 251228346,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329857
    },
    {
        "content": "<p>ok</p>",
        "id": 251228415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329895
    },
    {
        "content": "<p>Let me bring back into cache</p>",
        "id": 251228465,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329921
    },
    {
        "content": "<p>So, first. During confirmation, we try to confirm a closure candidate</p>",
        "id": 251228535,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630329963
    },
    {
        "content": "<p>side note that using <code>'a</code> for every variable in this example makes it a bit harder to talk about :)</p>",
        "id": 251228581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329972
    },
    {
        "content": "<p>confirmation of the <code>FnOnce</code> where clause on <code>s</code>?</p>",
        "id": 251228618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630329987
    },
    {
        "content": "<p>And we generate something like <code>[closure]: FnOnce(&lt;TT as A&lt;'a&gt;&gt;::B)</code></p>",
        "id": 251228659,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330013
    },
    {
        "content": "<p>And we have to normalize that</p>",
        "id": 251228673,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330018
    },
    {
        "content": "<p>why isn't it normalized before that point</p>",
        "id": 251228714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330043
    },
    {
        "content": "<p>not exactly sure</p>",
        "id": 251228734,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330054
    },
    {
        "content": "<p>also, presumably it's <code>T</code></p>",
        "id": 251228743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330058
    },
    {
        "content": "<p>or perhaps <code>?TT</code> I guess</p>",
        "id": 251228763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330066
    },
    {
        "content": "<p>should be unified by then though</p>",
        "id": 251228771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330071
    },
    {
        "content": "<p>I think so</p>",
        "id": 251228823,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330084
    },
    {
        "content": "<p>ok so</p>",
        "id": 251228835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330090
    },
    {
        "content": "<p>that's probably why it's not normalized yet</p>",
        "id": 251228842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330094
    },
    {
        "content": "<p>when we first do the substitution, it is <code>?TT as A</code></p>",
        "id": 251228865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330104
    },
    {
        "content": "<p>and so we can't normalize it succesfully</p>",
        "id": 251228893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330115
    },
    {
        "content": "<p>then we start doing unifications</p>",
        "id": 251228904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330122
    },
    {
        "content": "<p>and <em>now</em> it is <code>&lt;T as A&lt;'a&gt;&gt;::B</code></p>",
        "id": 251228920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330131
    },
    {
        "content": "<p>which we <em>could</em> normalize</p>",
        "id": 251228926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330134
    },
    {
        "content": "<p>interesting problem</p>",
        "id": 251228961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330151
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 251228963,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330151
    },
    {
        "content": "<p>there's gonna be a slow trickle of things like this until we fix this code in some better way</p>",
        "id": 251228997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330172
    },
    {
        "content": "<p>the other issue is that the fn sig in closure substs isn't normalized</p>",
        "id": 251228999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20ahoy/near/251228997\">said</a>:</p>\n<blockquote>\n<p>there's gonna be a slow trickle of things like this until we fix this code in some better way</p>\n</blockquote>\n<p>Yeah...I think a better solution <em>might</em> be to try to normalize in <code>relate</code></p>",
        "id": 251229115,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330211
    },
    {
        "content": "<p>I mean that is basically lazy norm, no?</p>",
        "id": 251229163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330230
    },
    {
        "content": "<p>better \"longer-term\"</p>",
        "id": 251229167,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330233
    },
    {
        "content": "<p>which isn't to say it's the wrong thing to do</p>",
        "id": 251229184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330240
    },
    {
        "content": "<p>Well, maybe :)</p>",
        "id": 251229188,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330242
    },
    {
        "content": "<p>I guess I would imagine lazy norm as delaying normalization even past relating</p>",
        "id": 251229234,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330266
    },
    {
        "content": "<p>I think of it is as delaying normalization <em>until</em> relating</p>",
        "id": 251229290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330299
    },
    {
        "content": "<p>but I agree this is perhaps a new twist</p>",
        "id": 251229305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330305
    },
    {
        "content": "<p>or at least it's different from how chalk approaches it</p>",
        "id": 251229329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330316
    },
    {
        "content": "<p>though I'm not convinced chalk's approach is \"right\"</p>",
        "id": 251229344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330322
    },
    {
        "content": "<p>I still really want to spend some mental time and energy thinking about the chalk approach to normalization</p>",
        "id": 251229429,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330352
    },
    {
        "content": "<p>I've attempted a few times</p>",
        "id": 251229436,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330356
    },
    {
        "content": "<p><em>really</em> want to solve <a href=\"https://github.com/rust-lang/chalk/issues/234\">chalk#234</a></p>",
        "id": 251229483,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330383
    },
    {
        "content": "<p>I feel like the logic that stems from that will ultimately play a big role in what the \"correct\" approach that rustc ends up with</p>",
        "id": 251229533,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330419
    },
    {
        "content": "<p>but I digress</p>",
        "id": 251229570,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330436
    },
    {
        "content": "<p>I want to specifically talk about <code>src/test/ui/higher-rank-trait-bounds/normalize-under-binder/normalization-under-binders-2.rs</code></p>",
        "id": 251229668,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330473
    },
    {
        "content": "<p>ok</p>",
        "id": 251229726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330500
    },
    {
        "content": "<p>This test fails in migrate mode, but passes in NLL</p>",
        "id": 251229738,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330504
    },
    {
        "content": "<p>First, I'm not sure how to annotate that in a test</p>",
        "id": 251229778,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330520
    },
    {
        "content": "<p>Second, is that weird</p>",
        "id": 251229791,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330525
    },
    {
        "content": "<p>it is curious</p>",
        "id": 251229813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330531
    },
    {
        "content": "<p>Third, I hate that this error is duplicated 4 times, but I didn't look into it</p>",
        "id": 251229842,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330545
    },
    {
        "content": "<p>Ultimately, the error stems from this:</p>",
        "id": 251230001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330592
    },
    {
        "content": "<p>it's a curious one because <code>&lt;F1 as Parser&gt;::Output</code> doesn't have any bound regions in it</p>",
        "id": 251230042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330612
    },
    {
        "content": "<p><em>oh</em></p>",
        "id": 251230104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330639
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F1</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Parser</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F2</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;&lt;</span><span class=\"n\">F1</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Parser</span><span class=\"o\">&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span>\n\n<span class=\"nc\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Parser</span><span class=\"o\">&lt;'</span><span class=\"na\">s</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 251230111,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330641
    },
    {
        "content": "<p>it's <code>Parser&lt;'_&gt;</code></p>",
        "id": 251230118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330643
    },
    {
        "content": "<p>oh</p>",
        "id": 251230187,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330676
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 251230195,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330679
    },
    {
        "content": "<p>so in NLL mode this compiles?</p>",
        "id": 251230343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330748
    },
    {
        "content": "<p>yes</p>",
        "id": 251230353,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330751
    },
    {
        "content": "<p>(went to go check changing <code>Parser</code> to <code>Parser&lt;'a&gt;</code> in the playground, but forgot about this original bug)</p>",
        "id": 251230454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630330792
    },
    {
        "content": "<p>ok so -- in the <em>body</em> of the closure, I guess we liberate the bound regions</p>",
        "id": 251230455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330793
    },
    {
        "content": "<p>and renormalize</p>",
        "id": 251230509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330804
    },
    {
        "content": "<p>and hence the call to <code>s.len()</code> is able to type-check</p>",
        "id": 251230535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330810
    },
    {
        "content": "<p>I'm not sure where the errors come from or why it's different in NLL though</p>",
        "id": 251230837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330945
    },
    {
        "content": "<p>I'm thinking about it</p>",
        "id": 251230846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630330949
    },
    {
        "content": "<p>have you looked into it at all?</p>",
        "id": 251231245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331118
    },
    {
        "content": "<p>not really</p>",
        "id": 251231456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630331197
    },
    {
        "content": "<p>ok</p>",
        "id": 251231472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331204
    },
    {
        "content": "<p>I feel like I would want to</p>",
        "id": 251231477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331207
    },
    {
        "content": "<p>the actual diff <em>does</em> seem ok to me</p>",
        "id": 251231499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331220
    },
    {
        "content": "<p>Right, I don't think this weirdness stems from the diff</p>",
        "id": 251231527,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630331239
    },
    {
        "content": "<p>it's just fixing some missed normalizations</p>",
        "id": 251231545,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630331251
    },
    {
        "content": "<p>If you think this is <em>weird</em>, is it worth me filing an issue for followup?</p>",
        "id": 251231700,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630331301
    },
    {
        "content": "<p>yes---</p>",
        "id": 251231805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331357
    },
    {
        "content": "<p>it may be a missed normalization</p>",
        "id": 251231811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331360
    },
    {
        "content": "<p>it may also be some kind of difference between the lexical solver and the NLL one</p>",
        "id": 251231834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331368
    },
    {
        "content": "<p>that's why I'm a bit wary</p>",
        "id": 251231838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331370
    },
    {
        "content": "<p>one or the other could have a bug :)</p>",
        "id": 251231848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331374
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 251231886,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630331389
    },
    {
        "content": "<p>I wouldn't be surprised though if it comes from the NLL checker having more types up front</p>",
        "id": 251231930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331401
    },
    {
        "content": "<p>and that lets it go down some better path</p>",
        "id": 251231986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331408
    },
    {
        "content": "<p>Okay, do you think that this is PR is okay to merge with a followup issue for investigating the NLL difference?</p>",
        "id": 251232110,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630331472
    },
    {
        "content": "<p>I'm debating about it :)</p>",
        "id": 251232152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331492
    },
    {
        "content": "<p>I <em>think</em> so</p>",
        "id": 251232162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331495
    },
    {
        "content": "<p>It's hard to see how the PR gets us in deeper water than we are in already</p>",
        "id": 251232175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331504
    },
    {
        "content": "<p>especially because we get more errors in the early phase</p>",
        "id": 251232192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331511
    },
    {
        "content": "<p>so it's probably not a question of accepting code we ought not to accept, at least on stable</p>",
        "id": 251232273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331534
    },
    {
        "content": "<p>\"early phase\"?</p>",
        "id": 251232307,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630331552
    },
    {
        "content": "<p>I mean in the lexical check</p>",
        "id": 251232434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331610
    },
    {
        "content": "<p>i.e., the stable behavior is to get ane rror</p>",
        "id": 251232464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331623
    },
    {
        "content": "<p>so if it turns out the bug is that the NLL checker is missing some case</p>",
        "id": 251232479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331628
    },
    {
        "content": "<p>that's not <em>more exposed</em> as a result of this PR</p>",
        "id": 251232499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331636
    },
    {
        "content": "<p>at least...not in this example :)</p>",
        "id": 251232530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630331644
    },
    {
        "content": "<p>hmm okay</p>",
        "id": 251232588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630331658
    },
    {
        "content": "<p>Also, before we run out of time. Figured a general update on where GATs issues are at. We currently have 21 open issues. I've gone through \"triaged\" a lot of them, at least by looking at them and figuring out if they need action and \"block\" GATs.</p>\n<p>There's probably less than 10 that are true bugs that need to be fixed.</p>",
        "id": 251232992,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630331819
    },
    {
        "content": "<p>Others are a feature request, a couple related to <code>Sized</code> coinductiveness, a couple where a region is different between early/late whether you use the associated type or not, a couple are combined with TAITs</p>",
        "id": 251233193,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630331893
    },
    {
        "content": "<p>Of the ones that need to be fixed: a couple are diagnostics, 1 is decision (<code>Self: 'a</code>), (also need to file an issue for <code>where </code> location), a couple are overflow or cycle errors, a couple others</p>",
        "id": 251233397,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630331977
    },
    {
        "content": "<p>I wonder if it's worth adding something like a GATs-blocking label</p>",
        "id": 251233433,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630331996
    },
    {
        "content": "<p>sounds useful</p>",
        "id": 251233547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332022
    },
    {
        "content": "<p>you saw also the repo I created I guess</p>",
        "id": 251233556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332027
    },
    {
        "content": "<p>Yes</p>",
        "id": 251233587,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630332034
    },
    {
        "content": "<p>I have to spend a bit of time on those blocking design questions</p>",
        "id": 251233592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332036
    },
    {
        "content": "<p>do you have a write-up of those categorizations?</p>",
        "id": 251233621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332048
    },
    {
        "content": "<p>I do not</p>",
        "id": 251233639,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630332053
    },
    {
        "content": "<p>I've mostly been just picking an issue, running the repro locally, and working on a fix</p>",
        "id": 251233701,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630332081
    },
    {
        "content": "<p>ok, did you record the results of that triage anywhere?</p>",
        "id": 251233735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332098
    },
    {
        "content": "<p>Not really</p>",
        "id": 251233836,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630332130
    },
    {
        "content": "<p>Other than as comments on the issues themselves</p>",
        "id": 251233845,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630332136
    },
    {
        "content": "<p>I didn't aggregate them yet</p>",
        "id": 251233876,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630332144
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 251233922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332163
    },
    {
        "content": "<p>that's useful though :)</p>",
        "id": 251233932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332167
    },
    {
        "content": "<p>I have been less organized on this than I would like</p>",
        "id": 251233941,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630332173
    },
    {
        "content": "<p>I would say we can either create labels</p>",
        "id": 251233953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332178
    },
    {
        "content": "<p>or else a project board</p>",
        "id": 251233966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332183
    },
    {
        "content": "<p>maybe a good idea at minimum is a GAT-triaged label</p>",
        "id": 251233981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332188
    },
    {
        "content": "<p>so we can track new incoming issues easily</p>",
        "id": 251233986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332193
    },
    {
        "content": "<p>Do we have a project board for just GATs</p>",
        "id": 251234012,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630332208
    },
    {
        "content": "<p>if not, let's create that</p>",
        "id": 251234020,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630332212
    },
    {
        "content": "<p>and I'll make a GAT-triaged label</p>",
        "id": 251234049,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630332225
    },
    {
        "content": "<p>And categorize</p>",
        "id": 251234063,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630332230
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/wg-traits/projects/6\">https://github.com/rust-lang/wg-traits/projects/6</a></p>",
        "id": 251235348,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630332738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20ahoy/near/251234012\">said</a>:</p>\n<blockquote>\n<p>Do we have a project board for just GATs</p>\n</blockquote>\n<p>I think we should make it on <a href=\"https://github.com/rust-lang/generic-associated-types-initiative\">https://github.com/rust-lang/generic-associated-types-initiative</a></p>",
        "id": 251235808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332906
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♀️</p>",
        "id": 251236563,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630333180
    },
    {
        "content": "<p>Can this be transferred or do I just have to remake</p>",
        "id": 251236646,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630333204
    },
    {
        "content": "<p>don't know :)</p>",
        "id": 251240108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630334644
    },
    {
        "content": "<p>it doesn't matter</p>",
        "id": 251240140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630334650
    },
    {
        "content": "<p>leave it wherever, we'll link to it</p>",
        "id": 251240145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630334655
    },
    {
        "content": "<p>Mmm ok</p>",
        "id": 251240171,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630334670
    },
    {
        "content": "<p>that said</p>",
        "id": 251240181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630334674
    },
    {
        "content": "<p>it apears to be empty now :)</p>",
        "id": 251240191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630334677
    },
    {
        "content": "<p>so maybe make a new one?</p>",
        "id": 251240196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630334679
    },
    {
        "content": "<p>I don't care too much</p>",
        "id": 251240251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630334712
    },
    {
        "content": "<p>I'll make a new one later</p>",
        "id": 251240317,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630334750
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> --- not sure if you're around today--- I was going to schedule more time this week to catch up on GAT things, I didn't get to it last week for various reasons</p>",
        "id": 255044044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632747909
    },
    {
        "content": "<p>I'm around <em>right now</em>, but today is really busy for me and I can't actually meet</p>",
        "id": 255044199,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632747968
    },
    {
        "content": "<p>Take a look at <a href=\"https://github.com/rust-lang/rust/issues/89285\">#89285</a> though</p>",
        "id": 255044251,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632747992
    },
    {
        "content": "<p>Not really GATs</p>",
        "id": 255044283,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632748004
    },
    {
        "content": "<p>(In fact, I've essentially been working on regressions from <a href=\"https://github.com/rust-lang/rust/issues/85499\">#85499</a> for the last week - at least with the time I've had)</p>",
        "id": 255044401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632748044
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/88441\">#88441</a> and <a href=\"https://github.com/rust-lang/rust/issues/88382\">#88382</a> are important to look at</p>",
        "id": 255044579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632748104
    },
    {
        "content": "<p>OK</p>",
        "id": 255044868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632748218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I am wondering whether I ought to work on implementing the lint for <code>where</code> clauses I proposed. I think I'm of the mind now that I would be ok with making it a hard error to elide the <code>where Self: 'a</code> in those cases where it would've been inferred, and we can think about whether to make it the default later.</p>",
        "id": 255048833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632749806
    },
    {
        "content": "<p>Even though I still think we will eventually</p>",
        "id": 255048850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632749812
    },
    {
        "content": "<p>If you could work on the implementation for that, that would be tremendously helpful.</p>",
        "id": 255049169,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632749923
    },
    {
        "content": "<p>Wait...so, I'm confused what you want now</p>",
        "id": 255049270,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632749964
    },
    {
        "content": "<p>My wording was confusing</p>",
        "id": 255049296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632749978
    },
    {
        "content": "<p>An error if it's elided, but would have been inferred?</p>",
        "id": 255049319,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632749985
    },
    {
        "content": "<p>In the immediate term, I would like to implement the logic that I described for determining when <code>where Self: 'a</code> would be a good default</p>",
        "id": 255049417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632750013
    },
    {
        "content": "<p>But use it just to report an error</p>",
        "id": 255049446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632750024
    },
    {
        "content": "<p>If where Self: 'a is not present</p>",
        "id": 255049458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632750031
    },
    {
        "content": "<p>ah okay</p>",
        "id": 255049495,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632750052
    },
    {
        "content": "<p>This will give us an idea whether it does indeed trigger for realistic code patterns, and how often</p>",
        "id": 255049501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632750053
    },
    {
        "content": "<p>We can then choose whether to make it a default or whether to take some other approach</p>",
        "id": 255049549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632750076
    },
    {
        "content": "<p>So basically \"this where clause will be implied in the future, but for now you must add it\"</p>",
        "id": 255049574,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632750086
    },
    {
        "content": "<p>s/will be implied/may be implied/ but yes</p>",
        "id": 255049590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632750099
    },
    {
        "content": "<p>I was thinking about the <a href=\"https://rustacean-principles.netlify.app/how_to_rustacean/start_somewhere.html\">Start Somewhere</a> principle :)</p>",
        "id": 255049613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632750105
    },
    {
        "content": "<p>I think that's reasonable</p>",
        "id": 255049626,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632750111
    },
    {
        "content": "<p>this seems like the prudent way forward</p>",
        "id": 255049628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632750111
    },
    {
        "content": "<p>It's kind of counter to what we eventually want - requiring to write versus implying, but serves the same purpose: we dont end up with traits where you can't really use them because there isn't a where clause</p>",
        "id": 255072514,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632758186
    },
    {
        "content": "<p>The only thing I'm on the fence about is an error vs a deny by default warning</p>",
        "id": 255072592,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632758210
    },
    {
        "content": "<p>In the latter case, if we miss something, people can recover at least</p>",
        "id": 255072662,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632758237
    },
    {
        "content": "<p>At the risk of it's harder for us to find out about the cases we're wrong about, potentially</p>",
        "id": 255072787,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632758280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20ahoy/near/255072662\">said</a>:</p>\n<blockquote>\n<p>In the latter case, if we miss something, people can recover at least</p>\n</blockquote>\n<p>there is a workaround:</p>",
        "id": 255400071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632922666
    },
    {
        "content": "<p>separate into a separate trait</p>",
        "id": 255400079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632922669
    },
    {
        "content": "<p>I feel strongly it has to be an error, or else we haven't really reserved the ability for us to add the default later</p>",
        "id": 255400154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632922684
    },
    {
        "content": "<p>The way I am looking at is that this release of GATs is in many ways a kind of <em>trial</em> release: it exposes the capabilities, but we know the ergonomics and other things are still a \"WIP\"</p>",
        "id": 255400241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632922720
    },
    {
        "content": "<p>That's fair. I don't particularly like that workaround, but I guess you're right that its fully forwards compatible.</p>",
        "id": 255400393,
        "sender_full_name": "Jack Huey",
        "timestamp": 1632922786
    },
    {
        "content": "<p>Ok so it's probably super late, but I did write what I had in mind: <a href=\"https://gist.github.com/rust-play/0ff224dc91f62207678b52756d26ec03\">https://gist.github.com/rust-play/0ff224dc91f62207678b52756d26ec03</a></p>",
        "id": 273476234,
        "sender_full_name": "marmeladema",
        "timestamp": 1646047909
    },
    {
        "content": "<p>I'll try to write the non-gat equivalent of this, but last time I tried, it was super painful, maybe not impossible but definitely not pleasant</p>",
        "id": 273476563,
        "sender_full_name": "marmeladema",
        "timestamp": 1646048141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> Here’s a GAT-free (mostly) equivalent version <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=a050229041bd8924c1891ab4756827d7\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=a050229041bd8924c1891ab4756827d7</a></p>",
        "id": 273480455,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1646050610
    },
    {
        "content": "<p>Scrolling back up, this example came up for the discussion of <code>where Self: 'a</code> bounds; as far as I can tell, your code doesn’t even trigger the current heuristic, so maybe it’s not quite relevant here? However I could be wrong, I don’t have the time to read through the discussion to fully figure out what the question was and what this example was supposed to demonstrate.</p>",
        "id": 273480866,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1646050894
    },
    {
        "content": "<p>Yeah my example was because at some point in the discussion there was a desire to make the <code>where Self: 'a</code> clause mandatory for all GAT</p>",
        "id": 273481085,
        "sender_full_name": "marmeladema",
        "timestamp": 1646051028
    },
    {
        "content": "<p>I just wanted to share an example that doesn't require the Self: 'a bound</p>",
        "id": 273481279,
        "sender_full_name": "marmeladema",
        "timestamp": 1646051130
    },
    {
        "content": "<p>Thank you for your equivalent version <span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> ! I must say that even if it works it feels a bit over complicated. Not every one could come up with this layout, whereas the GAT version feels more \"natural\" to me</p>",
        "id": 273481383,
        "sender_full_name": "marmeladema",
        "timestamp": 1646051211
    },
    {
        "content": "<p>Also about the <code>// the 'e: 'e works around a compiler bug</code>, is there an issue for it? I actually ended up facing the bug but I wasn't aware of your trick to make it work.</p>",
        "id": 273481531,
        "sender_full_name": "marmeladema",
        "timestamp": 1646051306
    },
    {
        "content": "<p>I think there is a bug report, I’ll have to look it up.</p>",
        "id": 273481570,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1646051330
    },
    {
        "content": "<p>Right, e.g. <a href=\"https://github.com/rust-lang/rust/issues/47511\">#47511</a>, and related <a href=\"https://github.com/rust-lang/rust/issues/85533\">#85533</a></p>",
        "id": 273481965,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1646051511
    },
    {
        "content": "<p>Thanks! I'll share a link to the gist of your version as another example</p>",
        "id": 273482104,
        "sender_full_name": "marmeladema",
        "timestamp": 1646051603
    }
]