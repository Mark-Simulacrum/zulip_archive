[
    {
        "content": "<p><code>tracing</code>, as I've been pitching to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>:</p>\n<ul>\n<li>it's a drop-in replacement to <code>log</code>, but it can also function as a <code>log</code> message receiver.</li>\n<li>there aren't _that_ many crates an application needs to think about: maybe two at most. a library only needs to worry about the core <code>tracing</code> crate. I started on docs: <a href=\"https://github.com/tokio-rs/tracing/pull/496\" target=\"_blank\" title=\"https://github.com/tokio-rs/tracing/pull/496\">https://github.com/tokio-rs/tracing/pull/496</a></li>\n<li>it's meant to be _really_ modular and performant, which leads to most of the \"wow this is complex\" factors that some people might get. better docs could help. that being said, several public AWS services _are_ using tracing in their data planes (every customer request, all the time).</li>\n<li>tracing's <code>span</code>s track causality and temporality, which let you build up an execution graph of libraries and applications _without_ runtime support. with that information, you can replicate ra's hierarchical profiling feature, amongst others.</li>\n<li>a <code>span</code> should typically correspond to whatever you consider to be a semantically meaningful unit of work. in Chalk's case, you might want to attach a span to a strand, which would allow you to track that end-to-end. in ra's case, you might have a top-level span for each lsp query, with more fine grained spans as appropriate.</li>\n<li>chalk reminds me a bit of <code>tracing</code>: at a high level, both <code>tracing</code> and <code>chalk</code> run some sort of queries over large graphs.</li>\n</ul>",
        "id": 184515615,
        "sender_full_name": "David Barsky",
        "timestamp": 1577751240
    },
    {
        "content": "<p>here are some neat libraries atop of tracing, for what it's worth:</p>\n<ul>\n<li><a href=\"https://github.com/jonhoo/tracing-timing\" target=\"_blank\" title=\"https://github.com/jonhoo/tracing-timing\">https://github.com/jonhoo/tracing-timing</a></li>\n<li><a href=\"https://github.com/GregBowyer/tracing-coz\" target=\"_blank\" title=\"https://github.com/GregBowyer/tracing-coz\">https://github.com/GregBowyer/tracing-coz</a></li>\n<li><a href=\"https://github.com/jtescher/tracing-opentelemetry\" target=\"_blank\" title=\"https://github.com/jtescher/tracing-opentelemetry\">https://github.com/jtescher/tracing-opentelemetry</a></li>\n<li><a href=\"https://github.com/pkinsky/honeycomb-tracing\" target=\"_blank\" title=\"https://github.com/pkinsky/honeycomb-tracing\">https://github.com/pkinsky/honeycomb-tracing</a></li>\n</ul>",
        "id": 184515690,
        "sender_full_name": "David Barsky",
        "timestamp": 1577751351
    },
    {
        "content": "<p>now that i've pitched the benefits, feel free to explain your needs and i can tell you what's ready and what need a bit of work :)</p>",
        "id": 184515884,
        "sender_full_name": "David Barsky",
        "timestamp": 1577751623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> would you recommend switching rust-analyzer's hierarchical profiling from a hand-written thing to <code>tracing</code>?  The metrics I am interested most is the amount of code I need to maintain and compile times.</p>",
        "id": 184515970,
        "sender_full_name": "matklad",
        "timestamp": 1577751786
    },
    {
        "content": "<p>So right now, chalk doesn't make use of <code>log</code> I don't think. Instead it uses the <code>debug</code>, <code>debug_heading</code>, <code>info</code>, and <code>info_heading</code> macros in <code>chalk-macros</code> (I think)</p>",
        "id": 184520242,
        "sender_full_name": "Jack Huey",
        "timestamp": 1577759297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> It would be super awesome if you sent a PR introducing <code>tracing</code>. From what I can tell, that would be immediately helpful when looking at performance with <code>tracing-timing</code>, right?</p>",
        "id": 184520259,
        "sender_full_name": "Jack Huey",
        "timestamp": 1577759387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> if it’s _just_ the hierarchal profiling, _maybe_ not. if you’d like to start to replace other instrumentation systems, like logging or whatever, then i’m inclined to say yes. I’ve found tracing-like systems as a great way to onboard new engineers and debug complex systems at work, and that could be handy for rust-analyzer.</p>",
        "id": 184520775,
        "sender_full_name": "David Barsky",
        "timestamp": 1577760338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> gotcha, those macros look decently similar to log’s, i think. i think tracing could be used to replace those, but in terms of global performance overviews, you’ll need to instrument with the spans to note units of work. the <code>#[instrument]</code> macro helps.</p>",
        "id": 184520849,
        "sender_full_name": "David Barsky",
        "timestamp": 1577760464
    },
    {
        "content": "<p>i’m also on vacation so i’ll be a bit slow to respond, i’m sorry.</p>",
        "id": 184520853,
        "sender_full_name": "David Barsky",
        "timestamp": 1577760475
    },
    {
        "content": "<p>Really, the existing macros essentially just output with <code>eprintln</code> and also manage indentation too</p>",
        "id": 184523233,
        "sender_full_name": "Jack Huey",
        "timestamp": 1577764767
    },
    {
        "content": "<p>Haven't really looked at <code>tracing</code> much, only briefly. So really don't know how perf overviews could be checked</p>",
        "id": 184523268,
        "sender_full_name": "Jack Huey",
        "timestamp": 1577764803
    },
    {
        "content": "<p>Also on vacation, so I understand :)</p>",
        "id": 184523283,
        "sender_full_name": "Jack Huey",
        "timestamp": 1577764811
    },
    {
        "content": "<p>perf-related views would really be a thing once tracing has a sufficiently comprehensive view of a program’s execution graph, which is comes much more quickly than you’d expect.</p>",
        "id": 184523991,
        "sender_full_name": "David Barsky",
        "timestamp": 1577766220
    },
    {
        "content": "<p>you can think of spans as nodes in graph, but it’s up to you to you demarcate the different nodes. we’re trying to reduce the amount of effort needed to mark different sections. it’s less than say, metrics libraries, but more than what some folks might be used to.</p>",
        "id": 184524114,
        "sender_full_name": "David Barsky",
        "timestamp": 1577766441
    },
    {
        "content": "<p>for what it’s worth <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, i wanted something like the profiling tools you have in ra_prof to live in tracing (would be super handy for debugging/profiling services) but never got around it to writing that integration. too little time.</p>\n<p>the main win of having something like ra_prof in tracing is that existing annotations can be reused for the the style of profiling you have. i’m not sure compile times would really decrease, but i also think they won’t really increase in major ways. won’t increase, and you might end up owning less code.</p>",
        "id": 184524308,
        "sender_full_name": "David Barsky",
        "timestamp": 1577766830
    },
    {
        "content": "<p>anyways, i’ll dump the last few thoughts: if you need an incremental, graph-based instrumentation system, tracing’s a great fit. it’s great for debugging and understanding complex systems. if your current approach to instrumentation and debugging works well enough, tracing will still be there when you do start to need it. that being said, the benefits of tracing-like systems are surprisingly large, even early on &amp; when it might feel like overkill. i think it might be a formalization of what’s currently in chalk and ra_prof, but i can’t say if the formalization is right for you now.</p>\n<p>i’ll post a screenshot of the sort of data it can collect after i sleep (8-9 hours from now).</p>",
        "id": 184525688,
        "sender_full_name": "David Barsky",
        "timestamp": 1577769389
    },
    {
        "content": "<p>phew, last one for now: here's _one_ tracing output for the example in: <a href=\"https://github.com/tokio-rs/tracing/pull/496/\" target=\"_blank\" title=\"https://github.com/tokio-rs/tracing/pull/496/\">https://github.com/tokio-rs/tracing/pull/496/</a> <a href=\"/user_uploads/4715/EH0e0peYilxDGlOJVirNNHCF/Screen-Shot-2019-12-31-at-11.40.20-AM.png\" target=\"_blank\" title=\"Screen-Shot-2019-12-31-at-11.40.20-AM.png\">Screen-Shot-2019-12-31-at-11.40.20-AM.png</a>.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/EH0e0peYilxDGlOJVirNNHCF/Screen-Shot-2019-12-31-at-11.40.20-AM.png\" target=\"_blank\" title=\"Screen-Shot-2019-12-31-at-11.40.20-AM.png\"><img src=\"/user_uploads/4715/EH0e0peYilxDGlOJVirNNHCF/Screen-Shot-2019-12-31-at-11.40.20-AM.png\"></a></div>",
        "id": 184552954,
        "sender_full_name": "David Barsky",
        "timestamp": 1577810586
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/5-bWMxsEDN3BECuLiTTWWHTP/Screen-Shot-2020-01-06-at-8.29.42-PM.png\" target=\"_blank\" title=\"Screen-Shot-2020-01-06-at-8.29.42-PM.png\">Screen-Shot-2020-01-06-at-8.29.42-PM.png</a> a formatter that attempts to mimic ra-prof, but is also inspired by what <code>tracing</code> already has + slog</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/5-bWMxsEDN3BECuLiTTWWHTP/Screen-Shot-2020-01-06-at-8.29.42-PM.png\" target=\"_blank\" title=\"Screen-Shot-2020-01-06-at-8.29.42-PM.png\"><img src=\"/user_uploads/4715/5-bWMxsEDN3BECuLiTTWWHTP/Screen-Shot-2020-01-06-at-8.29.42-PM.png\"></a></div>",
        "id": 184974792,
        "sender_full_name": "David Barsky",
        "timestamp": 1578360777
    },
    {
        "content": "<p>Are these times the diff between current event and last? Or current event and last event or span?</p>",
        "id": 185144417,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578509669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> these times are the difference between the current event and the last event/span, whichever was the last one.</p>",
        "id": 185155726,
        "sender_full_name": "David Barsky",
        "timestamp": 1578516958
    },
    {
        "content": "<p>so the top-level span (\"server\") doesn't have an attached elapsed timer, because it lives for the lifetime of the program</p>",
        "id": 185155998,
        "sender_full_name": "David Barsky",
        "timestamp": 1578517102
    },
    {
        "content": "<p>so the 8.8.8.8 messaged received elapsed is to the beginning of the conn span, not to the previous disconnect?</p>",
        "id": 185156711,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578517583
    },
    {
        "content": "<p>yes, the beginning of the <code>conn</code> span</p>",
        "id": 185158272,
        "sender_full_name": "David Barsky",
        "timestamp": 1578518469
    },
    {
        "content": "<p>that <em>can</em> change easily</p>",
        "id": 185158283,
        "sender_full_name": "David Barsky",
        "timestamp": 1578518477
    },
    {
        "content": "<p>to be entirely honest, I'm not entirely sure how the \"elapsed\" time should be counted</p>",
        "id": 185158949,
        "sender_full_name": "David Barsky",
        "timestamp": 1578518923
    },
    {
        "content": "<p>I would say beginning of the span</p>",
        "id": 185159144,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578519070
    },
    {
        "content": "<p>so the current behavior?</p>",
        "id": 185161791,
        "sender_full_name": "David Barsky",
        "timestamp": 1578520920
    },
    {
        "content": "<p>Yea, current behavior seems most correct</p>",
        "id": 185167384,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578524648
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/rnl7w-ImqWq_U1Jg6U00wLHw/Screen-Shot-2020-02-02-at-4.57.19-PM.png\" target=\"_blank\" title=\"Screen-Shot-2020-02-02-at-4.57.19-PM.png\">Screen-Shot-2020-02-02-at-4.57.19-PM.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/rnl7w-ImqWq_U1Jg6U00wLHw/Screen-Shot-2020-02-02-at-4.57.19-PM.png\" target=\"_blank\" title=\"Screen-Shot-2020-02-02-at-4.57.19-PM.png\"><img src=\"/user_uploads/4715/rnl7w-ImqWq_U1Jg6U00wLHw/Screen-Shot-2020-02-02-at-4.57.19-PM.png\"></a></div><p>alright, so I said this would be done at some point, and now it is: <a href=\"https://github.com/davidbarsky/tracing-tree/\" target=\"_blank\" title=\"https://github.com/davidbarsky/tracing-tree/\">https://github.com/davidbarsky/tracing-tree/</a></p>",
        "id": 187221866,
        "sender_full_name": "David Barsky",
        "timestamp": 1580680764
    },
    {
        "content": "<p>This is not a feature request, but have you thought about the Chromium profiler as a target format? E.g. <a href=\"https://github.com/rust-lang/measureme/blob/master/crox/Readme.md\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/blob/master/crox/Readme.md\">https://github.com/rust-lang/measureme/blob/master/crox/Readme.md</a></p>",
        "id": 187247721,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580724216
    },
    {
        "content": "<p>I have! I mostly haven’t had the time—it’s a matter of prioritization. looking at <a href=\"https://github.com/rust-lang/measureme/blob/master/crox/src/main.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/measureme/blob/master/crox/src/main.rs\">https://github.com/rust-lang/measureme/blob/master/crox/src/main.rs</a>; it does seem to be too bad?</p>",
        "id": 187266415,
        "sender_full_name": "David Barsky",
        "timestamp": 1580740071
    },
    {
        "content": "<p>This is a somewhat uniformed question, but does Chrome's profiler or Firefox's profile support streaming in trace data, or can it only view a static file?</p>",
        "id": 187279729,
        "sender_full_name": "David Barsky",
        "timestamp": 1580748278
    },
    {
        "content": "<p>Excuse me: Chrome profiler support <em>doesn't</em> seem to be too difficult to add/support atop of `tracing.</p>",
        "id": 187280110,
        "sender_full_name": "David Barsky",
        "timestamp": 1580748434
    },
    {
        "content": "<blockquote>\n<p>This is a somewhat uniformed question, but does Chrome's profiler or Firefox's profile support streaming in trace data, or can it only view a static file?</p>\n</blockquote>\n<p>Only files AFAIK</p>",
        "id": 187300183,
        "sender_full_name": "Laurențiu",
        "timestamp": 1580761688
    },
    {
        "content": "<p>gotcha, thanks</p>",
        "id": 187307662,
        "sender_full_name": "David Barsky",
        "timestamp": 1580766109
    },
    {
        "content": "<p>looked a bit at strands in chalk-engine (cc: <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>). I think if I were place tracing _anywhere_ in chalk, it'd be in here, alongside the timestamp: <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/strand.rs#L13\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/strand.rs#L13\">https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/strand.rs#L13</a>. it'd be a bit similar to how <code>tracing-futures</code> work, minus the feature flags and annotations: <a href=\"https://github.com/tokio-rs/tracing/blob/master/tracing-futures/src/lib.rs#L223-L230\" target=\"_blank\" title=\"https://github.com/tokio-rs/tracing/blob/master/tracing-futures/src/lib.rs#L223-L230\">https://github.com/tokio-rs/tracing/blob/master/tracing-futures/src/lib.rs#L223-L230</a></p>",
        "id": 187686897,
        "sender_full_name": "David Barsky",
        "timestamp": 1581115096
    },
    {
        "content": "<p>I the \"entry\" of the span (for tracking work) could occur at strand activation here: <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/table.rs#L83\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/table.rs#L83\">https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/table.rs#L83</a></p>",
        "id": 187686966,
        "sender_full_name": "David Barsky",
        "timestamp": 1581115193
    },
    {
        "content": "<p>at least some closure would happen here: <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/table.rs#L120\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/table.rs#L120\">https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/table.rs#L120</a></p>",
        "id": 187687021,
        "sender_full_name": "David Barsky",
        "timestamp": 1581115225
    },
    {
        "content": "<p>Chalk engine is also more approachable than I thought! Kudos to whoever wrote the docs.</p>",
        "id": 187687302,
        "sender_full_name": "David Barsky",
        "timestamp": 1581115486
    },
    {
        "content": "<p>I think that mostly sounds good to me</p>",
        "id": 187688516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581116628
    },
    {
        "content": "<p>I think I would be the entry for a span here: <a href=\"https://github.com/rust-lang/chalk/blob/af48f302a1f571b3ca418f7c5aa639a144a34f75/chalk-engine/src/logic.rs#L173\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/af48f302a1f571b3ca418f7c5aa639a144a34f75/chalk-engine/src/logic.rs#L173\">https://github.com/rust-lang/chalk/blob/af48f302a1f571b3ca418f7c5aa639a144a34f75/chalk-engine/src/logic.rs#L173</a></p>",
        "id": 187688580,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581116661
    },
    {
        "content": "<p>But also curious what your thoughts are on have a <code>Table</code> having a span</p>",
        "id": 187688606,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581116699
    },
    {
        "content": "<p>(in addition to <code>Strand</code>)</p>",
        "id": 187688632,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581116714
    },
    {
        "content": "<blockquote>\n<p>Chalk engine is also more approachable than I thought! Kudos to whoever wrote the docs.</p>\n</blockquote>\n<p>The docs indeed have been quite solid, even since I first started with chalk. When I refactored to make it iterative, I made it a point to even more thoroughly document it. So I'm glad you found them helpful</p>",
        "id": 187688837,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581116899
    },
    {
        "content": "<p>I think table can have a span, there's a pattern where we have a \"server\" span in asynchronous servers</p>",
        "id": 187688969,
        "sender_full_name": "David Barsky",
        "timestamp": 1581117018
    },
    {
        "content": "<p>yeah, I think that's a good spot to put span entry.</p>",
        "id": 187689023,
        "sender_full_name": "David Barsky",
        "timestamp": 1581117113
    },
    {
        "content": "<p>now, if I wanted to _run_ chalk engine and emit this data, what would the best way to do that be?</p>",
        "id": 187689088,
        "sender_full_name": "David Barsky",
        "timestamp": 1581117157
    },
    {
        "content": "<p>lemme look, actually. i <strong>think</strong> some sort of tests would be a good start.</p>",
        "id": 187689203,
        "sender_full_name": "David Barsky",
        "timestamp": 1581117295
    },
    {
        "content": "<p>yeah, i think i can do something in the <code>test!</code> macro</p>",
        "id": 187689515,
        "sender_full_name": "David Barsky",
        "timestamp": 1581117608
    },
    {
        "content": "<blockquote>\n<p>yeah, i think i can do something in the <code>test!</code> macro</p>\n</blockquote>\n<p>Yeah, either the <code>test!</code> macro or the <code>chalk</code> REPL would be good places to start looking at how to run</p>",
        "id": 187692355,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581120661
    },
    {
        "content": "<p>(probably test)</p>",
        "id": 187692360,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581120666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> are you still planning/working on this? If so, would you consider it \"part of the current sprint\"? If not, that's cool too; just wondering because I created an issue</p>",
        "id": 189184241,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582774252
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/337\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/337\">https://github.com/rust-lang/chalk/issues/337</a></p>",
        "id": 189184248,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582774267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'd be happy to work on it, but if someone gets there first, they should do so.</p>",
        "id": 189221684,
        "sender_full_name": "David Barsky",
        "timestamp": 1582816144
    },
    {
        "content": "<p>let's say that it is part of the current sprint—i'll let you know soon (next week) if it won't be.</p>",
        "id": 189221698,
        "sender_full_name": "David Barsky",
        "timestamp": 1582816165
    },
    {
        "content": "<p>Ok, I'll mark it</p>",
        "id": 189221837,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582816255
    },
    {
        "content": "<p>is someone actively working on this?</p>",
        "id": 189908613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583511569
    },
    {
        "content": "<p>I'm adding it to the roadmap</p>",
        "id": 189908618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583511575
    },
    {
        "content": "<p>under a heading like \"improve debugability of chalk\"</p>",
        "id": 189908626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583511584
    },
    {
        "content": "<p>I can go ping David</p>",
        "id": 189908711,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583511624
    },
    {
        "content": "<p>Also if he doesn't get around to it I can do it ( also contributor to tracing)</p>",
        "id": 189908746,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583511646
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> monitors Zulip too</p>",
        "id": 189908759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583511654
    },
    {
        "content": "<p>Ack</p>",
        "id": 189908768,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583511663
    },
    {
        "content": "<p>David said he is working on it for the sprint</p>",
        "id": 189908887,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583511735
    },
    {
        "content": "<p>can we assign him to the issue?</p>",
        "id": 189908926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583511777
    },
    {
        "content": "<p>I wonder if rustbot is monitoring wg-traits, maybe <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> or <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> knows</p>",
        "id": 189908944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583511791
    },
    {
        "content": "<p>rustbot monitors all of rust-lang org, but may need to be enabled</p>",
        "id": 189908987,
        "sender_full_name": "simulacrum",
        "timestamp": 1583511823
    },
    {
        "content": "<p>i.e. add the triagebot.toml to the repository and enable specific features</p>",
        "id": 189909062,
        "sender_full_name": "simulacrum",
        "timestamp": 1583511857
    },
    {
        "content": "<p>That would be useful</p>",
        "id": 189909103,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583511887
    },
    {
        "content": "<p>See the wiki on the triagebot repo</p>",
        "id": 189909140,
        "sender_full_name": "simulacrum",
        "timestamp": 1583511909
    },
    {
        "content": "<p>yeah, i’m working on it. add it to the sprint; been handling a bit of paperwork this week.</p>",
        "id": 189909730,
        "sender_full_name": "David Barsky",
        "timestamp": 1583512227
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/0zz6i6yEYXR5WBsur0ReEb2t/Screen-Shot-2020-03-14-at-6.51.45-PM.png\" target=\"_blank\" title=\"Screen-Shot-2020-03-14-at-6.51.45-PM.png\">Screen-Shot-2020-03-14-at-6.51.45-PM.png</a> started noodling around by introducing tracing into chalk. no clue if this information is all useless!</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/0zz6i6yEYXR5WBsur0ReEb2t/Screen-Shot-2020-03-14-at-6.51.45-PM.png\" target=\"_blank\" title=\"Screen-Shot-2020-03-14-at-6.51.45-PM.png\"><img src=\"/user_uploads/4715/0zz6i6yEYXR5WBsur0ReEb2t/Screen-Shot-2020-03-14-at-6.51.45-PM.png\"></a></div>",
        "id": 190618258,
        "sender_full_name": "David Barsky",
        "timestamp": 1584226372
    },
    {
        "content": "<p>leaning towards saying yes :)</p>",
        "id": 190618264,
        "sender_full_name": "David Barsky",
        "timestamp": 1584226385
    },
    {
        "content": "<p>I don't think that's useless :)</p>",
        "id": 190747928,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584376682
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"n\">debug_heading</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">&quot;program_clauses_for_goal(goal={:?}, environment={:?})&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">goal</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">environment</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191672232,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585083934
    },
    {
        "content": "<p>wondering if these should be replaced with something like</p>",
        "id": 191672251,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585083942
    },
    {
        "content": "<p><code>#[instrument(skip(db))]</code></p>",
        "id": 191672266,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585083955
    },
    {
        "content": "<p>this looks like a locally scoped tracing span</p>",
        "id": 191672316,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585083970
    },
    {
        "content": "<p>Yeah, I think anywhere there is a <code>debug</code>, <code>debug_heading</code>, <code>info</code>, or <code>info_heading</code>, those should be replaced with tracing, <em>to start</em></p>",
        "id": 191672362,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084005
    },
    {
        "content": "<p>and we can get that infra landed</p>",
        "id": 191672381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084015
    },
    {
        "content": "<p>then, we can work on fine tuning what more/less needs to be added/removed</p>",
        "id": 191672408,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084032
    },
    {
        "content": "<p>_nod_</p>",
        "id": 191672423,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084043
    },
    {
        "content": "<p>the main difference with spans is that it will apply to all events logged within that span's scope</p>",
        "id": 191672446,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084060
    },
    {
        "content": "<p>so this debug_heading only applys to the log in the function</p>",
        "id": 191672464,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084070
    },
    {
        "content": "<p>well, sort of</p>",
        "id": 191672516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084083
    },
    {
        "content": "<p>but if we turned it into a span it would be prepended on every event in every function that that function calls and so on</p>",
        "id": 191672525,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084091
    },
    {
        "content": "<p>debug_heading \"indents\" the logging within a function</p>",
        "id": 191672558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084119
    },
    {
        "content": "<p>but you can have levels on spans so it would only show up if that log level is enabled</p>",
        "id": 191672560,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084122
    },
    {
        "content": "<p>so, function calls are also indented</p>",
        "id": 191672572,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084127
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 191672583,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084132
    },
    {
        "content": "<p>ooh it does apply to subfunction calls</p>",
        "id": 191672633,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084159
    },
    {
        "content": "<p>okay so cool its the same thing</p>",
        "id": 191672639,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084163
    },
    {
        "content": "<p>i tihnk theres a logger for tracing that indents events inside of spans</p>",
        "id": 191672655,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084172
    },
    {
        "content": "<p>so we should be able to preserve that functionality as well</p>",
        "id": 191672670,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084180
    },
    {
        "content": "<p>yea this seems like it will translate nicely</p>",
        "id": 191672691,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084197
    },
    {
        "content": "<p>coool</p>",
        "id": 191672697,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084199
    },
    {
        "content": "<p>yeah, it translates well as is</p>",
        "id": 191672793,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084238
    },
    {
        "content": "<p>but what we don't have currently is a way to only \"cover\" parts of the function</p>",
        "id": 191672813,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084256
    },
    {
        "content": "<p>(so like, a Strand being active)</p>",
        "id": 191672839,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084268
    },
    {
        "content": "<p>we can always extract sub-functions potentially</p>",
        "id": 191673022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084356
    },
    {
        "content": "<p>it woudl be so great, <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>, to have some procedural macro support so that it automatically \"dumps\" the arguments</p>",
        "id": 191673044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585084368
    },
    {
        "content": "<p>i dont think thats necessary</p>",
        "id": 191673048,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084369
    },
    {
        "content": "<p>yea tracing::instrument does that</p>",
        "id": 191673079,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084382
    },
    {
        "content": "<p>it creates a span for the given function and uses every arg as a field in the span it generates</p>",
        "id": 191673133,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084411
    },
    {
        "content": "<p>chalk doesnt use async right?</p>",
        "id": 191673148,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084421
    },
    {
        "content": "<p>no</p>",
        "id": 191673232,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084445
    },
    {
        "content": "<p>k cool cool</p>",
        "id": 191673252,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084454
    },
    {
        "content": "<p>re tracing in chalk + chalk perf I'm currently working on a tracing layer for generating flamegraphs from spans and I'd love to play with it + chalk</p>",
        "id": 191673550,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585084595
    },
    {
        "content": "<p>that would be fantastic</p>",
        "id": 191673579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> thinking about adding your tracing screenshot into the sprint blog post. Would you be opposed? Still not sure yet, but a little visual flair might not be terrible</p>",
        "id": 192065236,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585335691
    },
    {
        "content": "<p>not opposed!</p>",
        "id": 192067214,
        "sender_full_name": "David Barsky",
        "timestamp": 1585336621
    },
    {
        "content": "<p>go for it, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>. I can also push my very WIP branch</p>",
        "id": 192067299,
        "sender_full_name": "David Barsky",
        "timestamp": 1585336665
    },
    {
        "content": "<p>Please do :) Would love to work towards getting an initial PR in</p>",
        "id": 192067480,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585336727
    },
    {
        "content": "<p>so here's a question</p>",
        "id": 192067989,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585336950
    },
    {
        "content": "<p>yup</p>",
        "id": 192068001,
        "sender_full_name": "David Barsky",
        "timestamp": 1585336957
    },
    {
        "content": "<p>if tracing becomes normalized in chalk and chalk is getting integrated with rustc</p>",
        "id": 192068031,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585336966
    },
    {
        "content": "<p>does that mean tracing is on the table for rustc?</p>",
        "id": 192068039,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585336972
    },
    {
        "content": "<p>it might be, yes</p>",
        "id": 192068072,
        "sender_full_name": "David Barsky",
        "timestamp": 1585336990
    },
    {
        "content": "<p>I would personally like to see tracing used in rustc -- but it'd be good to tinker with it first in chalk</p>",
        "id": 192069333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585337623
    },
    {
        "content": "<p>where is the branch again? there's an open PR?</p>",
        "id": 192069390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585337646
    },
    {
        "content": "<p>No open PR yet, <span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> said he's going to</p>",
        "id": 192069725,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585337880
    },
    {
        "content": "<p>just gotta finish a doc, but I can push something _very_ wip rn</p>",
        "id": 192069805,
        "sender_full_name": "David Barsky",
        "timestamp": 1585337902
    },
    {
        "content": "<p>hold on</p>",
        "id": 192069810,
        "sender_full_name": "David Barsky",
        "timestamp": 1585337903
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/362\" title=\"https://github.com/rust-lang/chalk/pull/362\">https://github.com/rust-lang/chalk/pull/362</a></p>",
        "id": 192071610,
        "sender_full_name": "David Barsky",
        "timestamp": 1585338923
    },
    {
        "content": "<p>awesome</p>",
        "id": 192071794,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585339015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/tracing.20in.20chalk/near/192069333\" title=\"#narrow/stream/144729-wg-traits/topic/tracing.20in.20chalk/near/192069333\">said</a>:</p>\n<blockquote>\n<p>I would personally like to see tracing used in rustc -- but it'd be good to tinker with it first in chalk</p>\n</blockquote>\n<p>it's a drop-in replacement for <code>log</code> so we should just do it IMO</p>",
        "id": 192346912,
        "sender_full_name": "eddyb",
        "timestamp": 1585632765
    },
    {
        "content": "<p>but also last I checked <code>tracing</code> lacked something I consider crucial for it to be useful, on the presentation side: a proper nested view</p>",
        "id": 192346977,
        "sender_full_name": "eddyb",
        "timestamp": 1585632857
    },
    {
        "content": "<p>it would make it so much easier to see log messages nested by calls, and that's what I'd call \"tracing\"</p>",
        "id": 192346986,
        "sender_full_name": "eddyb",
        "timestamp": 1585632876
    },
    {
        "content": "<p>the context stuff is neat but harder to make use of</p>",
        "id": 192346994,
        "sender_full_name": "eddyb",
        "timestamp": 1585632894
    },
    {
        "content": "<p>especially in recursive parts of the codebase</p>",
        "id": 192347002,
        "sender_full_name": "eddyb",
        "timestamp": 1585632919
    },
    {
        "content": "<p>I had a thing in C++ back in the day, but I'm not sure where it is, maybe it's on my external HDD, let me check</p>",
        "id": 192347299,
        "sender_full_name": "eddyb",
        "timestamp": 1585633356
    },
    {
        "content": "<p>oh heh it was in a gist, I'd just forgotten how to search for it <a href=\"https://gist.github.com/eddyb/e727bcb2af8ffc2a32e6\" title=\"https://gist.github.com/eddyb/e727bcb2af8ffc2a32e6\">https://gist.github.com/eddyb/e727bcb2af8ffc2a32e6</a></p>",
        "id": 192352255,
        "sender_full_name": "eddyb",
        "timestamp": 1585639101
    },
    {
        "content": "<blockquote>\n<p><code>std::cout &lt;&lt; u8\"╞&gt;\" &lt;&lt; sFunc &lt;&lt; '(';</code></p>\n</blockquote>",
        "id": 192352292,
        "sender_full_name": "eddyb",
        "timestamp": 1585639167
    },
    {
        "content": "<p>I even have an example output in a gist, lol <a href=\"https://gist.githubusercontent.com/eddyb/bd193e8ababd144fb8b9/raw/d27d0a76657c1c7e75e0d9105a4f5f28ce856734/trace.cc\" title=\"https://gist.githubusercontent.com/eddyb/bd193e8ababd144fb8b9/raw/d27d0a76657c1c7e75e0d9105a4f5f28ce856734/trace.cc\">https://gist.githubusercontent.com/eddyb/bd193e8ababd144fb8b9/raw/d27d0a76657c1c7e75e0d9105a4f5f28ce856734/trace.cc</a></p>",
        "id": 192352432,
        "sender_full_name": "eddyb",
        "timestamp": 1585639282
    },
    {
        "content": "<p>so when I hear \"tracing\", this is what I expect :P</p>",
        "id": 192352669,
        "sender_full_name": "eddyb",
        "timestamp": 1585639460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^^ if you didn't see this</p>",
        "id": 192386766,
        "sender_full_name": "eddyb",
        "timestamp": 1585660367
    },
    {
        "content": "<p>I believe tracing has support for nested views, and that is indeed a major selling point that I was expecting. Perhaps <span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> or <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> can confirm though. Maybe I misunderstood. </p>\n<p>Chalk's logging has a notion of nesting, not sure if you've seen it, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>. It has a <code>debug_heading</code> vs <code>debug</code> (and <code>trace_heading</code> vs <code>trace</code>, for really detailed stuff), which right now just dumps to stderr with some spaces in front per heading. I'm assuming that translating this to tracing would imply some support for nesting but..</p>",
        "id": 192389287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585661480
    },
    {
        "content": "<p>s/nothing/nesting?</p>",
        "id": 192389455,
        "sender_full_name": "eddyb",
        "timestamp": 1585661539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> back when I talked to @mycoliza, in October last year, she said this:</p>\n<blockquote>\n<p>[9:45 PM] mycoliza: the tracing_fmt implementation is not really intended for printing every single stack frame to stdout</p>\n</blockquote>",
        "id": 192389634,
        "sender_full_name": "eddyb",
        "timestamp": 1585661602
    },
    {
        "content": "<p>oh but she also linked <a href=\"https://github.com/tokio-rs/console/\" title=\"https://github.com/tokio-rs/console/\">https://github.com/tokio-rs/console/</a></p>",
        "id": 192389702,
        "sender_full_name": "eddyb",
        "timestamp": 1585661631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm afraid the focus on (shallow) \"context\" is at the detriment of <em>actual</em> call tracing, which is the thing I want</p>",
        "id": 192389833,
        "sender_full_name": "eddyb",
        "timestamp": 1585661672
    },
    {
        "content": "<p>I have no idea where the \"tracing = logging with context\" association comes from, but also my C++ tracing code from almost a decade ago wasn't based on a pre-existing \"tracing\" notion, and I haven't seen anything mentioning \"tracing\" between that and the <code>tracing</code> crate :P</p>",
        "id": 192389974,
        "sender_full_name": "eddyb",
        "timestamp": 1585661747
    },
    {
        "content": "<p>That said, I think another useful thing would be able to assemble not just call tracing but things like \"show me all the stuff for DefId X, collected\"</p>",
        "id": 192390282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585661882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think that's actually already possible using <code>tracing</code></p>",
        "id": 192390362,
        "sender_full_name": "eddyb",
        "timestamp": 1585661910
    },
    {
        "content": "<p>more so than call tracing :P</p>",
        "id": 192390374,
        "sender_full_name": "eddyb",
        "timestamp": 1585661915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I wrote this nested/with context view a bit ago and I feel comfortable publishing an alpha: <a href=\"https://github.com/davidbarsky/tracing-tree/\" title=\"https://github.com/davidbarsky/tracing-tree/\">https://github.com/davidbarsky/tracing-tree/</a>. Docs can absolutely be improved, though!</p>",
        "id": 192417961,
        "sender_full_name": "David Barsky",
        "timestamp": 1585673798
    },
    {
        "content": "<p>YESSS</p>",
        "id": 192418040,
        "sender_full_name": "eddyb",
        "timestamp": 1585673838
    },
    {
        "content": "<p>that looks pretty good</p>",
        "id": 192418076,
        "sender_full_name": "eddyb",
        "timestamp": 1585673857
    },
    {
        "content": "<p>thanks! :)</p>",
        "id": 192418123,
        "sender_full_name": "David Barsky",
        "timestamp": 1585673876
    },
    {
        "content": "<p>doesn't have the unicode noisefest my C++ thing did, idk if that's a plus or a minus, but at least it does what rustc would need</p>",
        "id": 192418185,
        "sender_full_name": "eddyb",
        "timestamp": 1585673886
    },
    {
        "content": "<p>i'd like to get the unicode box drawing in as an option _at some point_, though</p>",
        "id": 192418215,
        "sender_full_name": "David Barsky",
        "timestamp": 1585673904
    },
    {
        "content": "<p>(see: <a href=\"https://github.com/davidbarsky/tracing-tree/issues/4\" title=\"https://github.com/davidbarsky/tracing-tree/issues/4\">https://github.com/davidbarsky/tracing-tree/issues/4</a>)</p>",
        "id": 192418265,
        "sender_full_name": "David Barsky",
        "timestamp": 1585673930
    },
    {
        "content": "<blockquote>\n<p>show me all the stuff for DefId X, collected</p>\n</blockquote>",
        "id": 192419904,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674672
    },
    {
        "content": "<p>are you envisioning queries against structured log data?</p>",
        "id": 192419968,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674698
    },
    {
        "content": "<p>i think all of this is possible but a lot of it isn't implemented, though right now I dont think theres any notion of filtering the logs that are actually output based on queries against the fields</p>",
        "id": 192420127,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674752
    },
    {
        "content": "<p>My understanding is that this would be closer  to filtering on fields</p>",
        "id": 192420134,
        "sender_full_name": "David Barsky",
        "timestamp": 1585674756
    },
    {
        "content": "<p>but it shouldn't be too hard to dump structured logs like json or something</p>",
        "id": 192420151,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674767
    },
    {
        "content": "<p>and then write a tool that reads them in and implements the filtering then re renders them as human readable formatted logs</p>",
        "id": 192420210,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674788
    },
    {
        "content": "<p>its something I've wanted to do for a while tbh</p>",
        "id": 192420221,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>  I wrote these docs: <a href=\"https://docs.rs/tracing-subscriber/0.2.3/tracing_subscriber/struct.EnvFilter.html\" title=\"https://docs.rs/tracing-subscriber/0.2.3/tracing_subscriber/struct.EnvFilter.html\">https://docs.rs/tracing-subscriber/0.2.3/tracing_subscriber/struct.EnvFilter.html</a> :)</p>",
        "id": 192420242,
        "sender_full_name": "David Barsky",
        "timestamp": 1585674806
    },
    {
        "content": "<p>oh shit</p>",
        "id": 192420294,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674829
    },
    {
        "content": "<p>we already have field filtering???</p>",
        "id": 192420315,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674839
    },
    {
        "content": "<p>yup</p>",
        "id": 192420376,
        "sender_full_name": "David Barsky",
        "timestamp": 1585674848
    },
    {
        "content": "<p>thats extremely dope</p>",
        "id": 192420385,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674856
    },
    {
        "content": "<p>holy crap</p>",
        "id": 192420388,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674857
    },
    {
        "content": "<p>I still think I want the two pass log viewing tho</p>",
        "id": 192420419,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674869
    },
    {
        "content": "<p>oh true, same</p>",
        "id": 192420439,
        "sender_full_name": "David Barsky",
        "timestamp": 1585674877
    },
    {
        "content": "<p>because for example</p>",
        "id": 192420449,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674881
    },
    {
        "content": "<p>with my cli tools I often dont know what thing I'm going ot need</p>",
        "id": 192420472,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674892
    },
    {
        "content": "<p>and they have tons of side effects so its not always possible to run the same cmd over and over</p>",
        "id": 192420519,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674907
    },
    {
        "content": "<p>so I've wanted to set it up to dump a verbose structured log into some dir where it rotates logs or something</p>",
        "id": 192420547,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674921
    },
    {
        "content": "<p>and then a tool to go back and dig into the logs later</p>",
        "id": 192420568,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674928
    },
    {
        "content": "<p>I want this for work more than anything tbh</p>",
        "id": 192420607,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674942
    },
    {
        "content": "<p>our logs are so painful <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 192420616,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674946
    },
    {
        "content": "<p>but that aint gonna happen</p>",
        "id": 192420639,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674955
    },
    {
        "content": "<p>thats an old C++ home made logging framework</p>",
        "id": 192420707,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585674969
    },
    {
        "content": "<p>we gotta get the per-layer filtering in, then</p>",
        "id": 192420924,
        "sender_full_name": "David Barsky",
        "timestamp": 1585675069
    },
    {
        "content": "<p>make it so numba one</p>",
        "id": 192421020,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585675100
    },
    {
        "content": "<p>i'm honored</p>",
        "id": 192421048,
        "sender_full_name": "David Barsky",
        "timestamp": 1585675112
    },
    {
        "content": "<p>lol</p>",
        "id": 192421066,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585675119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> did you see my ancient C++ code :P?</p>",
        "id": 192421842,
        "sender_full_name": "eddyb",
        "timestamp": 1585675531
    },
    {
        "content": "<p>no</p>",
        "id": 192421857,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585675541
    },
    {
        "content": "<p>are you going to make me sad</p>",
        "id": 192421867,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585675548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> yes <a href=\"https://gist.github.com/eddyb/e727bcb2af8ffc2a32e6\" title=\"https://gist.github.com/eddyb/e727bcb2af8ffc2a32e6\">https://gist.github.com/eddyb/e727bcb2af8ffc2a32e6</a></p>",
        "id": 192421931,
        "sender_full_name": "eddyb",
        "timestamp": 1585675572
    },
    {
        "content": "<p>it's from an uhhh something like a SAT solver</p>",
        "id": 192421995,
        "sender_full_name": "eddyb",
        "timestamp": 1585675600
    },
    {
        "content": "<p>before it was drilled into me that NP-complete is real and insurmountable</p>",
        "id": 192422026,
        "sender_full_name": "eddyb",
        "timestamp": 1585675616
    },
    {
        "content": "<p>lol</p>",
        "id": 192422118,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585675664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> okay posted examples of my unicode antics <a href=\"https://github.com/davidbarsky/tracing-tree/issues/4#issuecomment-606768738\" title=\"https://github.com/davidbarsky/tracing-tree/issues/4#issuecomment-606768738\">https://github.com/davidbarsky/tracing-tree/issues/4#issuecomment-606768738</a></p>",
        "id": 192422902,
        "sender_full_name": "eddyb",
        "timestamp": 1585675980
    },
    {
        "content": "<p>ooo, thats nice</p>",
        "id": 192423080,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676051
    },
    {
        "content": "<p>thanks for the deets! are you okay with this output being <em>completely</em> non-concurrent?</p>",
        "id": 192423124,
        "sender_full_name": "David Barsky",
        "timestamp": 1585676070
    },
    {
        "content": "<p>what does that mean :P?</p>",
        "id": 192423187,
        "sender_full_name": "eddyb",
        "timestamp": 1585676105
    },
    {
        "content": "<p>hmm</p>",
        "id": 192423227,
        "sender_full_name": "David Barsky",
        "timestamp": 1585676123
    },
    {
        "content": "<p>at the moment, you can't have two separate \"trees\" be printed for units of work that are occurring concurrently (e..g, on different threads or tasks)</p>",
        "id": 192423343,
        "sender_full_name": "David Barsky",
        "timestamp": 1585676170
    },
    {
        "content": "<p>shouldn't be a concern for <code>rustc</code>, or we could, idk, print a tread ID on every line, and then have a tool to untangle them</p>",
        "id": 192423435,
        "sender_full_name": "eddyb",
        "timestamp": 1585676222
    },
    {
        "content": "<p>(once we start doing parallelism more commonly. for now we can just turn it off when we want debug logs)</p>",
        "id": 192423534,
        "sender_full_name": "eddyb",
        "timestamp": 1585676282
    },
    {
        "content": "<p>I think the approach that's needed is:</p>\n<ol>\n<li>use the default tracing-subscriber <code>fmt</code> output that prints a \"trace\" on a per-line basis to narrow yourself down to a unit of work (a strand in chalk, for instance) that you're interested in</li>\n<li>reload the <code>tracing</code> config (at runtime!) to use the tracing-tree output</li>\n</ol>",
        "id": 192423595,
        "sender_full_name": "David Barsky",
        "timestamp": 1585676312
    },
    {
        "content": "<p>and that should work well with parallel rustc?</p>",
        "id": 192423612,
        "sender_full_name": "David Barsky",
        "timestamp": 1585676325
    },
    {
        "content": "<p>i still think it would be extremely cool to output json and then consume it to generate the untangled indented pretty shit we want</p>",
        "id": 192423613,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676326
    },
    {
        "content": "<p>that way you can deal with concurrency after the fact</p>",
        "id": 192423632,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676335
    },
    {
        "content": "<p>totally agreed</p>",
        "id": 192423637,
        "sender_full_name": "David Barsky",
        "timestamp": 1585676337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> literally what Cargo does because it runs multiple rustc's :P</p>",
        "id": 192423664,
        "sender_full_name": "eddyb",
        "timestamp": 1585676349
    },
    {
        "content": "<p>I think there used to be a time where errors from multiple <code>rustc</code>s could get interleaved</p>",
        "id": 192423686,
        "sender_full_name": "eddyb",
        "timestamp": 1585676365
    },
    {
        "content": "<p>there's a neat python library that does whose name i'm forgetting atm</p>",
        "id": 192423695,
        "sender_full_name": "David Barsky",
        "timestamp": 1585676373
    },
    {
        "content": "<p>even if each line was intact</p>",
        "id": 192423702,
        "sender_full_name": "eddyb",
        "timestamp": 1585676376
    },
    {
        "content": "<p>[nods]</p>",
        "id": 192423790,
        "sender_full_name": "David Barsky",
        "timestamp": 1585676407
    },
    {
        "content": "<p>I'm pretty sure what it does now is print the \"rendered\" field in the JSON output</p>",
        "id": 192423794,
        "sender_full_name": "eddyb",
        "timestamp": 1585676407
    },
    {
        "content": "<p>and it can act as an arbiter</p>",
        "id": 192423808,
        "sender_full_name": "eddyb",
        "timestamp": 1585676413
    },
    {
        "content": "<p>here it is! <a href=\"https://github.com/jonathanj/eliottree\" title=\"https://github.com/jonathanj/eliottree\">https://github.com/jonathanj/eliottree</a></p>",
        "id": 192423851,
        "sender_full_name": "David Barsky",
        "timestamp": 1585676428
    },
    {
        "content": "<p>but for tracing you'd have all the rendering done externally, so it's more like an IDE in that regard</p>",
        "id": 192423888,
        "sender_full_name": "eddyb",
        "timestamp": 1585676446
    },
    {
        "content": "<p>btw this is that example with proper two-space indents <a href=\"https://gist.githubusercontent.com/eddyb/05a9490eb50396754cee14967c485567/raw/6c75bf462bf66cc271bc6c4ab6b4ae6313c5a973/tracing-box-drawing-3\" title=\"https://gist.githubusercontent.com/eddyb/05a9490eb50396754cee14967c485567/raw/6c75bf462bf66cc271bc6c4ab6b4ae6313c5a973/tracing-box-drawing-3\">https://gist.githubusercontent.com/eddyb/05a9490eb50396754cee14967c485567/raw/6c75bf462bf66cc271bc6c4ab6b4ae6313c5a973/tracing-box-drawing-3</a></p>",
        "id": 192423943,
        "sender_full_name": "eddyb",
        "timestamp": 1585676468
    },
    {
        "content": "<p>that tracks</p>",
        "id": 192423949,
        "sender_full_name": "David Barsky",
        "timestamp": 1585676470
    },
    {
        "content": "<p>it's good to know cargo ran into this issue first so that we don't need to re-invent this stuff</p>",
        "id": 192424025,
        "sender_full_name": "David Barsky",
        "timestamp": 1585676508
    },
    {
        "content": "<p>bonus: we could give users just enough filters so there's not GBs of JSON, then inspect the parts we want, ourselves</p>",
        "id": 192424036,
        "sender_full_name": "eddyb",
        "timestamp": 1585676513
    },
    {
        "content": "<p>can borrow some of those ideas</p>",
        "id": 192424039,
        "sender_full_name": "David Barsky",
        "timestamp": 1585676516
    },
    {
        "content": "<p>sadly we don't have <code>debug_assertions</code> enabled in nightly Q_Q</p>",
        "id": 192424095,
        "sender_full_name": "eddyb",
        "timestamp": 1585676525
    },
    {
        "content": "<p>so the only logging you get is a couple <code>info!</code>s that are important enough</p>",
        "id": 192424148,
        "sender_full_name": "eddyb",
        "timestamp": 1585676548
    },
    {
        "content": "<p>(like the current <code>fn</code> being codegen'd)</p>",
        "id": 192424178,
        "sender_full_name": "eddyb",
        "timestamp": 1585676562
    },
    {
        "content": "<p>Okay, so this is a little bit unrelated, but I had a question for <span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> or maybe <span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span> (or anyone else): So, if I add <code>dbg!()</code> statements when also doing <code>CHALK_DEBUG=debug</code>, then the <code>dbg</code> statements are printed at the <em>end</em> of the logging. (Same for <code>println</code>). Any way to have these show up inline?</p>",
        "id": 205696174,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596312319
    },
    {
        "content": "<p>this is just a guess, but you might need to make tracing output to stderr?</p>",
        "id": 205696358,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596312619
    },
    {
        "content": "<p>ah if it's also happening for <code>println</code> that's probably not it</p>",
        "id": 205696366,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1596312649
    },
    {
        "content": "<p>yeah :/</p>",
        "id": 205696371,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596312673
    },
    {
        "content": "<p>Hmm that's weird, I can't reproduce it locally. They show up inline for me <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 205696799,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596313393
    },
    {
        "content": "<p>Are you just reading from console? Because I output to a file</p>",
        "id": 205696861,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596313488
    },
    {
        "content": "<p><code> &gt; target/log.txt 2&gt;&amp;1</code></p>",
        "id": 205696868,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596313508
    },
    {
        "content": "<p>huh no, even if I remove that it still prints at the end</p>",
        "id": 205696918,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596313566
    },
    {
        "content": "<p>Yeah they appear inline either way for me</p>",
        "id": 205697060,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596313863
    },
    {
        "content": "<p>bleh</p>",
        "id": 205697119,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596313926
    },
    {
        "content": "<p>Maybe it depends on the OS or shell?</p>",
        "id": 205697122,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596313931
    },
    {
        "content": "<p>bash</p>",
        "id": 205697129,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596313975
    },
    {
        "content": "<p>Ubuntu 16.04</p>",
        "id": 205697140,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596314019
    },
    {
        "content": "<p>ah found it</p>",
        "id": 205697194,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596314076
    },
    {
        "content": "<p><code>-- --nocapture</code> fixes it</p>",
        "id": 205697195,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596314082
    },
    {
        "content": "<p>ah, glad you figured it out. I was gonna suggest something related to stdout being locked, but i guess that wasn't it?</p>",
        "id": 205748769,
        "sender_full_name": "David Barsky",
        "timestamp": 1596411189
    }
]