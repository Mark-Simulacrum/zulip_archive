[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> -- it occurred to me that your changes to make \"impl trait\" act like an unbound ty-var actually line up reasonably well with Chalk's idea of <em>alias types</em>.</p>",
        "id": 250536825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629833714
    },
    {
        "content": "<p>An <em>alias</em> type basically being a type that can be unified with anything else, but we generate some obligations that will prove that it is true</p>",
        "id": 250536862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629833735
    },
    {
        "content": "<p>That might be a useful bit of terminology to introduce</p>",
        "id": 250536874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629833741
    },
    {
        "content": "<p>cool! gonna need to read up on chalk once I'm done with this</p>",
        "id": 250613243,
        "sender_full_name": "oli",
        "timestamp": 1629895028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> so <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> was asking me about this example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"></span>\n<span class=\"c1\">// Not allowed (error) under current setup</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo3</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250639928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629907137
    },
    {
        "content": "<p>and I got to thinking</p>",
        "id": 250639953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629907147
    },
    {
        "content": "<p><em>for the purposes of method dispatch</em>, if we have an unconstrained TAIT, or even a TAIT that is constrained to an unbound var, we could manage method dispatch by only considering the methods defined in the trait itself</p>",
        "id": 250640010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629907177
    },
    {
        "content": "<p>this might... mean that this example would actually work?</p>",
        "id": 250640020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629907184
    },
    {
        "content": "<p>I'm not sure what do you mean by work or not work :)</p>",
        "id": 250640440,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907338
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(type_alias_impl_trait)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Not allowed (error) under current setup</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo3</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo3</span><span class=\"p\">(</span><span class=\"s\">\"hi\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250640464,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907348
    },
    {
        "content": "<p>this doesn't compile</p>",
        "id": 250640475,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907352
    },
    {
        "content": "<p>but this</p>",
        "id": 250640516,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907375
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(type_alias_impl_trait)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Not allowed (error) under current setup</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo3</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250640524,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907378
    },
    {
        "content": "<p>kind of does</p>",
        "id": 250640534,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907381
    },
    {
        "content": "<p>I meant \"kind of\" because there's no defining use</p>",
        "id": 250640565,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907392
    },
    {
        "content": "<p>but if you add one like ...</p>",
        "id": 250640625,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907418
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(type_alias_impl_trait)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo1</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Not allowed (error) under current setup</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo3</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250640633,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907420
    },
    {
        "content": "<p>it compiles</p>",
        "id": 250640638,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907423
    },
    {
        "content": "<p>but I guess you would never be able to call <code>foo3</code> at least with the current status of things</p>",
        "id": 250640788,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907487
    },
    {
        "content": "<p>you would get things like <code>expected opaque type, found &amp;str</code></p>",
        "id": 250640860,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907525
    },
    {
        "content": "<p>we can also discuss about this in <a href=\"https://github.com/rust-lang/rust/issues/88332\">#88332</a></p>",
        "id": 250641635,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907909
    },
    {
        "content": "<p>Can you do <code>foo3(foo1())</code></p>",
        "id": 250641637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629907910
    },
    {
        "content": "<p>I guess nope</p>",
        "id": 250641711,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907933
    },
    {
        "content": "<p>let me try</p>",
        "id": 250641716,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907935
    },
    {
        "content": "<p>ohh you can</p>",
        "id": 250641759,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907954
    },
    {
        "content": "<p>makes sense</p>",
        "id": 250641767,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907958
    },
    {
        "content": "<p>then this works</p>",
        "id": 250641771,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907960
    },
    {
        "content": "<p>I would hope so</p>",
        "id": 250641773,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629907961
    },
    {
        "content": "<p>I meant, I said I guess nope, but it should work :)</p>",
        "id": 250641803,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907978
    },
    {
        "content": "<p>I thought this was going to fail also</p>",
        "id": 250641820,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629907986
    },
    {
        "content": "<p>so seems like almost everything works fine then, related to args</p>",
        "id": 250642044,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629908096
    },
    {
        "content": "<p>the weird thing I see is ...</p>",
        "id": 250642051,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629908100
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo1</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22_</span><span class=\"k\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR: mismatched types [E0308]</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250642068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629908107
    },
    {
        "content": "<p>I'm not sure what the RFC says about this case but <code>x = 22_u32</code> may be a defining use and given that it's the only one that exists in the current code it should work</p>",
        "id": 250642234,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629908165
    },
    {
        "content": "<p>if you invoke <code>foo1</code> using <code>u32</code> it should also work, unless at some point the provided type is different than <code>u32</code> or <code>x</code> is assigned to a different type</p>",
        "id": 250642357,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629908219
    },
    {
        "content": "<p>See, this doesn't make sense to me: in order for you to call <code>foo1</code>, you would have to have constructed a <code>Foo</code></p>",
        "id": 250642401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629908238
    },
    {
        "content": "<p>so, assigning a value to <code>x</code> can't \"define\" <code>Foo</code></p>",
        "id": 250642446,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629908262
    },
    {
        "content": "<p>well, that's true</p>",
        "id": 250642844,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629908404
    },
    {
        "content": "<p>anyway ... you could be assigning something that is of the right type</p>",
        "id": 250642883,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629908421
    },
    {
        "content": "<p>why is this complaining?</p>",
        "id": 250642893,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629908425
    },
    {
        "content": "<p>Well, the whole point of TAIT is they're \"opaque\". i.e. you can't know that <code>u32</code> is the \"right type\" for <code>Foo</code></p>",
        "id": 250642983,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629908471
    },
    {
        "content": "<p>well you're right</p>",
        "id": 250643252,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629908613
    },
    {
        "content": "<p>but in some sense in several places you expect an opaque and pass a concrete thing, because that's also the point</p>",
        "id": 250643484,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629908672
    },
    {
        "content": "<p>several places -&gt; defining use places</p>",
        "id": 250643540,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629908700
    },
    {
        "content": "<p>but yeah if assign is not a defining use then I think what you're saying is correct</p>",
        "id": 250643574,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629908722
    },
    {
        "content": "<p>I'm going to move part of the discussions we are having to <a class=\"stream-topic\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits/topic/Reconcile.20TAIT.20tests.20.2386727\">#wg-traits &gt; Reconcile TAIT tests #86727</a></p>",
        "id": 250644929,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629909414
    },
    {
        "content": "<p>if you are inside the scope of <code>Foo</code>, then the function can define what it is</p>",
        "id": 250658804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629915404
    },
    {
        "content": "<p>it's very artificial code in this case, but you can imagine for example</p>",
        "id": 250658853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629915428
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// outside the module, we just know this is a debug thing</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo1</span><span class=\"p\">(</span><span class=\"n\">cache</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">0_</span><span class=\"k\">u32</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// inside, we know it's an integer</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250658932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629915472
    },
    {
        "content": "<p>this could be called like <code>foo1(&amp;mut None)</code></p>",
        "id": 250659055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629915518
    },
    {
        "content": "<p>even from outside the module :)</p>",
        "id": 250659060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629915522
    },
    {
        "content": "<p>Hmm</p>",
        "id": 250661111,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629916393
    },
    {
        "content": "<p>Okay, makes sense</p>",
        "id": 250661137,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629916403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok, so then we need to change <a href=\"https://github.com/rust-lang/rust/pull/88332/files#diff-3cf983f3df591665271f8552280e1b735f155244002d65a97a37fcb6db8619d6R8\">https://github.com/rust-lang/rust/pull/88332/files#diff-3cf983f3df591665271f8552280e1b735f155244002d65a97a37fcb6db8619d6R8</a></p>",
        "id": 250694383,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629932224
    },
    {
        "content": "<p>and say maybe <code>// FIXME This should compile, but it currently doesn't</code></p>",
        "id": 250694420,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629932262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20refactorings/near/250640010\">said</a>:</p>\n<blockquote>\n<p><em>for the purposes of method dispatch</em>, if we have an unconstrained TAIT, or even a TAIT that is constrained to an unbound var, we could manage method dispatch by only considering the methods defined in the trait itself</p>\n</blockquote>\n<p>It feels a bit odd to me, that </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"></span>\n<span class=\"c1\">// Not allowed (error) under current setup</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo3</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42_</span><span class=\"k\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would not work, or... work depending on how typeck walks the function. If it walked backwards or had a more wholistic approach, this would suddenly change how it worked or not</p>",
        "id": 250754428,
        "sender_full_name": "oli",
        "timestamp": 1629975600
    },
    {
        "content": "<p>can we, instead of failing with a trait not implemented error, register an obligation and continue as if it had worked? Any further types (e.g. from method return types) could be projection types</p>",
        "id": 250754661,
        "sender_full_name": "oli",
        "timestamp": 1629975713
    },
    {
        "content": "<p>this would then delay such decisions until the entire function has been visited</p>",
        "id": 250754721,
        "sender_full_name": "oli",
        "timestamp": 1629975727
    },
    {
        "content": "<p>or... are we getting into chalky territory here?</p>",
        "id": 250754732,
        "sender_full_name": "oli",
        "timestamp": 1629975737
    }
]