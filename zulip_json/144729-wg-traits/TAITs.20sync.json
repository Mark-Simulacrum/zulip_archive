[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and (perhaps?) <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> ?</p>",
        "id": 245690083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626098572
    },
    {
        "content": "<p>TAIT sync now?</p>",
        "id": 245690101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626098578
    },
    {
        "content": "<p>(I'll be reading this thread soon after the meeting, I had only started looking into <a href=\"https://github.com/rust-lang/rust/issues/86411\">#86411</a> --- but wondered if the plan to fix this issue was somewhat <a href=\"https://github.com/rust-lang/rust/issues/86411#issuecomment-870918909\">close to what I imagined</a>, though I remember there's some other piece of visitor infra that caches types and visits and would be less naive than what this comment proposes of course)</p>",
        "id": 245690806,
        "sender_full_name": "lqd",
        "timestamp": 1626098947
    },
    {
        "content": "<p>(I only now realize it was a Zoom meeting)</p>",
        "id": 245707933,
        "sender_full_name": "lqd",
        "timestamp": 1626105918
    },
    {
        "content": "<p>lol, sorry</p>",
        "id": 245847937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626192559
    },
    {
        "content": "<p>we actually took some notes</p>",
        "id": 245847943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626192563
    },
    {
        "content": "<p><a href=\"https://hackmd.io/FNLjLrevQcSKoIDAsf9ivQ\">https://hackmd.io/FNLjLrevQcSKoIDAsf9ivQ</a></p>",
        "id": 245848004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626192590
    },
    {
        "content": "<p>We realied that more work might be required than originally anticipated :)</p>",
        "id": 245848080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626192609
    },
    {
        "content": "<p>again ?!</p>",
        "id": 245850772,
        "sender_full_name": "lqd",
        "timestamp": 1626193812
    },
    {
        "content": "<p>(I assume this was mostly the recent triage effort \"most MTAIT issues are still tracked with the full TAIT feature GH label\" :)</p>",
        "id": 245851058,
        "sender_full_name": "lqd",
        "timestamp": 1626193949
    },
    {
        "content": "<p>The problem is more that we realized the implementation should be chnged</p>",
        "id": 245867640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626201096
    },
    {
        "content": "<p>It's probably worth repeating it</p>",
        "id": 245867669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626201110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I'm curious btw how much work you've done towards removing \"impl trait in let bindings\"</p>",
        "id": 245867751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626201134
    },
    {
        "content": "<p>I've removed some parts already after a meeting I'm going to continue</p>",
        "id": 245867828,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626201178
    },
    {
        "content": "<p>so the plan would be something like this ? </p>\n<ul>\n<li>first remove the impl trait in let bindings support</li>\n<li>then change the implementation and defining uses as mentioned in the meeting notes</li>\n<li>while in parallel finishing triage to check issues applying to MTAIT only and assessing and completing the existing test coverage</li>\n</ul>",
        "id": 245896533,
        "sender_full_name": "lqd",
        "timestamp": 1626214473
    },
    {
        "content": "<p>Yes, but</p>",
        "id": 245968703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626273436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and I were talking about the implementation and thinking it over</p>",
        "id": 245968733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626273448
    },
    {
        "content": "<p>in particular I was looking at this example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">TAIT1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TheTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">TheType</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TheTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">TheType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TAIT1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">TheTrait</span><span class=\"o\">&gt;</span>::<span class=\"n\">TheType</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 245968762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626273467
    },
    {
        "content": "<p>I was thinking about what this would look like during lazy norm and so forth</p>",
        "id": 245970412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274252
    },
    {
        "content": "<p>And what's the best way to set this up</p>",
        "id": 245970421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274256
    },
    {
        "content": "<p>I had this MCP eariler that was proposing a different sort of approach, one where we left opaque bindings as \"themselves\"</p>",
        "id": 245970465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274277
    },
    {
        "content": "<p>But, in the <code>InferCtxt</code>, when we were asked to equate an opaque binding with another type, we would determine if it is \"in scope\" and -- if so -- accumulate a specific value for that type. Alternatively, if it is not in scope, we would treat it opaquely.</p>",
        "id": 245970578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274324
    },
    {
        "content": "<p>There were some challenges :)</p>",
        "id": 245970590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274326
    },
    {
        "content": "<p>But it would have the advantage of being a \"lazy norm\" like approach that doesn't require us to go ahead of time and <em>find</em> each place that a TAIT is used.</p>",
        "id": 245970647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274353
    },
    {
        "content": "<p>very interesting</p>",
        "id": 245970738,
        "sender_full_name": "lqd",
        "timestamp": 1626274392
    },
    {
        "content": "<p>I've been thiking about it a bit more</p>",
        "id": 245970787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274415
    },
    {
        "content": "<p>that does sound like \"more work than originally anticipated\" ^^</p>",
        "id": 245970815,
        "sender_full_name": "lqd",
        "timestamp": 1626274428
    },
    {
        "content": "<p>Some thoughts:</p>",
        "id": 245970868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274444
    },
    {
        "content": "<ul>\n<li>One approach would be, in the inference context, that we basically have a distinct \"hash table\" with the values for each opaque type.</li>\n</ul>",
        "id": 245971041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274518
    },
    {
        "content": "<p>Essentially a new kind of inference variable, a somewhat simpler one perhaps</p>",
        "id": 245971061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274530
    },
    {
        "content": "<p>It would probably be fairly straightforward to equip each infer ctxt with an <code>Option&lt;DefId&gt;</code> that corresponds to \"scope for TAITs\" and incorporate that logic. We could then make it so that when you do <code>resolve_if_possible</code> to resolve the values of inference variables, it also resolves the values of TAITs that are in-scope to their corresponding value (which may indeed be an inference variable). This kind of resolves the questions about how these interact with trait matching and other things.</p>",
        "id": 245971242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274599
    },
    {
        "content": "<p>It does mean that unification is a bit more complex, which chalk will eventually have to learn and model.</p>",
        "id": 245971262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274612
    },
    {
        "content": "<p>It also means that the <code>NEEDS_INFER</code> flag would have to be true for TAITs. We could potentially have \"resolve\" map opaque TAITs to an <em>opaque type</em> to help reduce that. I have no idea if this matters at all.</p>",
        "id": 245971362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274647
    },
    {
        "content": "<p>This actually seems like a fairly small edit, not all that painful.</p>",
        "id": 245971398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274660
    },
    {
        "content": "<p>if there are (somewhat accessible) tasks to do to that would help with this and the other steps in the plan, I'd be glad to take a look as well</p>",
        "id": 245972296,
        "sender_full_name": "lqd",
        "timestamp": 1626274894
    },
    {
        "content": "<p>I had some more thoughts but I'm trying to remember what they were</p>",
        "id": 245972452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274930
    },
    {
        "content": "<p>Well, in short, I kind of like this plan better than the other implementation strategies I've devised. I like that it takes away some of the \"clever setup\" logic and other things.</p>",
        "id": 245972564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626274967
    },
    {
        "content": "<p>It also provides a path to fixing this ergonomic annoyance:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">some_method_on_trait</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Here, the value of <code>x</code> is not known, but presumable we <em>do</em> know that it implements <code>Trait</code>. If the type of <code>x</code> is \"unresolved Opaque Type\", we could potentially permit that, though I think in the first version as I imagined it, we probably wouldn't. This would be because we would effectively resolve the opaque type to an inference variable and hence error out.</p>",
        "id": 245972801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626275069
    },
    {
        "content": "<p>we should add your explanations above to the hackmd <a href=\"https://hackmd.io/FNLjLrevQcSKoIDAsf9ivQ?view\">https://hackmd.io/FNLjLrevQcSKoIDAsf9ivQ?view</a></p>",
        "id": 245993921,
        "sender_full_name": "lqd",
        "timestamp": 1626284403
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and I just had a good cha</p>",
        "id": 246232446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626446722
    },
    {
        "content": "<p>we covered the design above</p>",
        "id": 246232451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626446725
    },
    {
        "content": "<p>I'm feeling pretty excited, actually</p>",
        "id": 246232462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626446732
    },
    {
        "content": "<p>on the minus side, this is a big refactoring</p>",
        "id": 246232472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626446736
    },
    {
        "content": "<p>on the plus side, it feels much clearner, and I think it means that we actually don't have to settle for \"minimal TAIT\"</p>",
        "id": 246232484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626446749
    },
    {
        "content": "<p>we instead just basically get TAIT</p>",
        "id": 246232497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626446754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> cool</p>",
        "id": 246236160,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626448185
    },
    {
        "content": "<p>did you guys took notes on the discussions? interesting in learning about what you come up with</p>",
        "id": 246236245,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626448211
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, TAITs sync?</p>",
        "id": 246458129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626703230
    },
    {
        "content": "<p>I fixed the calendar invite today so not sure if you saw that</p>",
        "id": 246458141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626703240
    }
]