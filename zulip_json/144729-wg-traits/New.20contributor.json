[
    {
        "content": "<p>Hello everyone! I am new to all of this but i've started contributing to the compiler recently and i'd like to discover chalk as well :) I looked at \"good first issue\" in github but there is only one issue not claimed about unwind safety.</p>",
        "id": 194564811,
        "sender_full_name": "marmeladema",
        "timestamp": 1587245778
    },
    {
        "content": "<p>Is there anything \"relatively\" easy that I could help you with?</p>",
        "id": 194564826,
        "sender_full_name": "marmeladema",
        "timestamp": 1587245840
    },
    {
        "content": "<p>Like a refactor issue or something where you can learn about the project while doing it</p>",
        "id": 194564986,
        "sender_full_name": "marmeladema",
        "timestamp": 1587246084
    },
    {
        "content": "<p>chalk/#260 is not that complicated, there also was a recent thread about issues</p>",
        "id": 194565200,
        "sender_full_name": "Areredify",
        "timestamp": 1587246422
    },
    {
        "content": "<p><a href=\"#narrow/stream/144729-wg-traits/topic/more.20issues\" title=\"#narrow/stream/144729-wg-traits/topic/more.20issues\">that</a> and <br>\n<a href=\"#narrow/stream/144729-wg-traits/topic/more.20sprint.20issues\" title=\"#narrow/stream/144729-wg-traits/topic/more.20sprint.20issues\">that</a></p>",
        "id": 194565266,
        "sender_full_name": "Areredify",
        "timestamp": 1587246525
    },
    {
        "content": "<p>haha so i don't understand how it happened, but first link points to <a href=\"http://this\" title=\"http://this\">http://this</a> and second to <a href=\"http://that\" title=\"http://that\">http://that</a> :D</p>",
        "id": 194565335,
        "sender_full_name": "marmeladema",
        "timestamp": 1587246604
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span></p>",
        "id": 194565721,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247196
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> said, <a href=\"https://github.com/rust-lang/chalk/issues/260\" title=\"https://github.com/rust-lang/chalk/issues/260\">rust-lang/chalk#260</a> is pretty easy to start with</p>",
        "id": 194565772,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247227
    },
    {
        "content": "<p>Hello!</p>",
        "id": 194565773,
        "sender_full_name": "marmeladema",
        "timestamp": 1587247231
    },
    {
        "content": "<p>(that reminds me that I should write some mentoring notes there)</p>",
        "id": 194565777,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247240
    },
    {
        "content": "<p>As far as other things, let me look :)</p>",
        "id": 194565802,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247258
    },
    {
        "content": "<p>I guess i can take at <a href=\"https://github.com/rust-lang/rust/issues/260\" title=\"https://github.com/rust-lang/rust/issues/260\">#260</a> but i would need some help/mentoring if thats ok</p>",
        "id": 194565811,
        "sender_full_name": "marmeladema",
        "timestamp": 1587247285
    },
    {
        "content": "<p>of course</p>",
        "id": 194565815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247299
    },
    {
        "content": "<p>I'll write some more detailed notes on the issue</p>",
        "id": 194565819,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247312
    },
    {
        "content": "<p>but tldr</p>",
        "id": 194565821,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247314
    },
    {
        "content": "<p>We should need an integration-like test in <code>chalk-engine</code> where one of the the functions from <code>Context</code> panics</p>",
        "id": 194565866,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247362
    },
    {
        "content": "<p>then need to check that you can still use that solver</p>",
        "id": 194565878,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247399
    },
    {
        "content": "<p>Another good thing that you could work is to get this PR landed: <a href=\"https://github.com/rust-lang/chalk/pull/362\" title=\"https://github.com/rust-lang/chalk/pull/362\">https://github.com/rust-lang/chalk/pull/362</a></p>",
        "id": 194565993,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247575
    },
    {
        "content": "<p>Which is adding tracing support</p>",
        "id": 194565996,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> got some infra in</p>",
        "id": 194565999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247597
    },
    {
        "content": "<p>but isn't going to be able to work on it for a bit</p>",
        "id": 194566001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247606
    },
    {
        "content": "<p>The nice thing about this issue would be that you're essentially touching all the debug/info points of chalk :)</p>",
        "id": 194566008,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247630
    },
    {
        "content": "<p>so you can get a sense of where things are</p>",
        "id": 194566010,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247639
    },
    {
        "content": "<p>And that also has some followup things to do too, if you're interested</p>",
        "id": 194566014,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247664
    },
    {
        "content": "<p>if <a href=\"https://github.com/rust-lang/rust/issues/260\" title=\"https://github.com/rust-lang/rust/issues/260\">#260</a> is quick enough them i'd lke to start with that and with the tracing stuff</p>",
        "id": 194566080,
        "sender_full_name": "marmeladema",
        "timestamp": 1587247783
    },
    {
        "content": "<p>in chalk-engine there are actually no tests, should I add it in <a href=\"http://context.rs\" title=\"http://context.rs\">context.rs</a>?</p>",
        "id": 194566127,
        "sender_full_name": "marmeladema",
        "timestamp": 1587247810
    },
    {
        "content": "<p>or more like a real integration tests in a <code>tests</code> directory?</p>",
        "id": 194566136,
        "sender_full_name": "marmeladema",
        "timestamp": 1587247831
    },
    {
        "content": "<p>Good question</p>",
        "id": 194566161,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247862
    },
    {
        "content": "<p>So, I'm thinking this test might be with the rest of the tests</p>",
        "id": 194566184,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247911
    },
    {
        "content": "<p>but maybe not</p>",
        "id": 194566188,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247918
    },
    {
        "content": "<p>let me look</p>",
        "id": 194566189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247920
    },
    {
        "content": "<p>(I'm referring to <a href=\"https://github.com/rust-lang/chalk/tree/master/tests\" title=\"https://github.com/rust-lang/chalk/tree/master/tests\">https://github.com/rust-lang/chalk/tree/master/tests</a>)</p>",
        "id": 194566229,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587247947
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 194566239,
        "sender_full_name": "marmeladema",
        "timestamp": 1587247987
    },
    {
        "content": "<p>Here's my thought process on this:</p>",
        "id": 194566255,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248025
    },
    {
        "content": "<p>It sort of makes sense to put tests here, because we can test panic safety not only of chalk-engine, but of the other crates too. And we don't have to mock/rewrite a <code>Context</code> (or <code>Interner</code> if we test more than the engine)</p>",
        "id": 194566300,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248078
    },
    {
        "content": "<p>Ok</p>",
        "id": 194566306,
        "sender_full_name": "marmeladema",
        "timestamp": 1587248094
    },
    {
        "content": "<p>But putting the test there means we have a lot of \"extra\" stuff to worry about</p>",
        "id": 194566314,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248106
    },
    {
        "content": "<p>And we would still have to add a way to force a panic somewhere</p>",
        "id": 194566324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248140
    },
    {
        "content": "<p>the current test framework is not really designed around being able to test this at all</p>",
        "id": 194566399,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248234
    },
    {
        "content": "<p>and we don't actually need to do any \"real\" solving to test panic safety</p>",
        "id": 194566465,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248327
    },
    {
        "content": "<p>Ok, so you might have to play around a bit with it</p>",
        "id": 194566537,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248443
    },
    {
        "content": "<p>But here's where I would start:</p>",
        "id": 194566539,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248449
    },
    {
        "content": "<p>Make a new directory here: <a href=\"https://github.com/rust-lang/chalk/tree/master/tests\" title=\"https://github.com/rust-lang/chalk/tree/master/tests\">https://github.com/rust-lang/chalk/tree/master/tests</a> for \"integration\" tests</p>",
        "id": 194566574,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248474
    },
    {
        "content": "<p>Ok</p>",
        "id": 194566640,
        "sender_full_name": "marmeladema",
        "timestamp": 1587248529
    },
    {
        "content": "<p>Should probably hook into chalk-solve, so you'll have to write a mock <code>RustIrDatabase</code> (here's where the current <code>chalk-integration</code> one is impled: <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-integration/src/db.rs#L85\" title=\"https://github.com/rust-lang/chalk/blob/master/chalk-integration/src/db.rs#L85\">https://github.com/rust-lang/chalk/blob/master/chalk-integration/src/db.rs#L85</a>)</p>",
        "id": 194566648,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248544
    },
    {
        "content": "<p><em>most</em> of those should be able to just stay <code>unimplemented!()</code></p>",
        "id": 194566660,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248574
    },
    {
        "content": "<p>then, you'll want the actual test to:</p>",
        "id": 194566669,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248594
    },
    {
        "content": "<p>1) Create a default solver <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/solve.rs#L236\" title=\"https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/solve.rs#L236\">https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/solve.rs#L236</a></p>",
        "id": 194566729,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248681
    },
    {
        "content": "<p>2) Solve (<a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/solve.rs#L272\" title=\"https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/solve.rs#L272\">https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/solve.rs#L272</a>) a super simple goal</p>",
        "id": 194566744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248726
    },
    {
        "content": "<p>Maybe something like</p>",
        "id": 194566745,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248731
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>trait Foo {}\nstruct Bar {}\ngoal {\n  Foo: Bar\n}\n</pre></div>",
        "id": 194566792,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248790
    },
    {
        "content": "<p>(Note, I'm writing this as if it would get parsed with <code>test!</code>, but you'll want to write the lowered code directly</p>",
        "id": 194566804,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248830
    },
    {
        "content": "<p>(Also note that this goal doesn't actually have a solution, that doesn't matter. Just trying to make the most minimal program possible)</p>",
        "id": 194566811,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248866
    },
    {
        "content": "<p>Ok thank you for all the advises!</p>",
        "id": 194566860,
        "sender_full_name": "marmeladema",
        "timestamp": 1587248912
    },
    {
        "content": "<p>Then the first time you call <code>solve</code>, panic somewhere in the <code>RustIrDatabase</code> functions. Catch the panic. Then call solve a second time without panicing</p>",
        "id": 194566863,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248921
    },
    {
        "content": "<p>Of course! Does this all make sense?</p>",
        "id": 194566874,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248946
    },
    {
        "content": "<p>I'll be around if you have questions</p>",
        "id": 194566876,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587248961
    },
    {
        "content": "<p>Yep! I guess i'll have more questions when actually doing it!</p>",
        "id": 194566877,
        "sender_full_name": "marmeladema",
        "timestamp": 1587248964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> so i have to implement a \"new\" solver?</p>",
        "id": 194568305,
        "sender_full_name": "marmeladema",
        "timestamp": 1587251302
    },
    {
        "content": "<p>Nope, you can use the SLG solver in chalk-solve</p>",
        "id": 194568318,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587251358
    },
    {
        "content": "<p>you <em>do</em> have to implement a new <code>RustIrDatabase</code></p>",
        "id": 194568321,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587251371
    },
    {
        "content": "<p>yep ok</p>",
        "id": 194568372,
        "sender_full_name": "marmeladema",
        "timestamp": 1587251433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> whats the difference between a \"program\" and a \"goal\"?</p>",
        "id": 194569989,
        "sender_full_name": "marmeladema",
        "timestamp": 1587254181
    },
    {
        "content": "<p>so, program only exists in chalk-integration iirc</p>",
        "id": 194570000,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587254210
    },
    {
        "content": "<p>and it essentially just stores the traits/structs/etc.</p>",
        "id": 194570010,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587254222
    },
    {
        "content": "<p>goal is a specific thing we want to prove. e..g. <code>Foo: Bar</code></p>",
        "id": 194570017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587254237
    },
    {
        "content": "<p>ok</p>",
        "id": 194570028,
        "sender_full_name": "marmeladema",
        "timestamp": 1587254258
    },
    {
        "content": "<p>So i don't know how to lower an entire goal yet. But i am trying to lower a \"program\" using a modified version of the lowering_success macro</p>",
        "id": 194570151,
        "sender_full_name": "marmeladema",
        "timestamp": 1587254426
    },
    {
        "content": "<p>the modified macro calls a <code>MockDatabase::with</code> which is copy pasted from <code>ChalkDatabase::with</code></p>",
        "id": 194570174,
        "sender_full_name": "marmeladema",
        "timestamp": 1587254464
    },
    {
        "content": "<p>but just the calls to <code>with</code> already go through a lot of the <code>unimplemented!()</code> method of my <code>MockDatabase</code>.</p>",
        "id": 194570538,
        "sender_full_name": "marmeladema",
        "timestamp": 1587255049
    },
    {
        "content": "<p>Am i doing it wrong? Or should I copy some methods from the <code>ChalkDatabase</code> to properly lower a program?</p>",
        "id": 194570554,
        "sender_full_name": "marmeladema",
        "timestamp": 1587255083
    },
    {
        "content": "<p>Hmm, I don't think you need to call into a program</p>",
        "id": 194570986,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587255746
    },
    {
        "content": "<p>well i am reading the solve_goal test function and it lowers a program then it lowers the goals then it solves the goal given a registered program in the db</p>",
        "id": 194571073,
        "sender_full_name": "marmeladema",
        "timestamp": 1587255861
    },
    {
        "content": "<p>I have to get some sleep now, but ill continue tomorrow! Thank you for all the explanations</p>",
        "id": 194571144,
        "sender_full_name": "marmeladema",
        "timestamp": 1587255974
    },
    {
        "content": "<p>right, but you should just be able to make the <code>UCanonicalGoalInEnvironment</code> directly</p>",
        "id": 194571203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587256120
    },
    {
        "content": "<p>I pushed my code to get some hep. Basically, i wanted to use convenience macro so that the tests kind of look like the others. But to make <code>checked_program</code> not panic, i had to provide an implementation of &lt;some&gt; methods of the database trait instead of just calling <code>unimplemented!()</code>: <a href=\"https://github.com/marmeladema/chalk/commit/a375b09e98be652662b472c672a2a200a746927f#diff-fd5ee0d09acd0abcbcae1874a9725e46R157\" title=\"https://github.com/marmeladema/chalk/commit/a375b09e98be652662b472c672a2a200a746927f#diff-fd5ee0d09acd0abcbcae1874a9725e46R157\">https://github.com/marmeladema/chalk/commit/a375b09e98be652662b472c672a2a200a746927f#diff-fd5ee0d09acd0abcbcae1874a9725e46R157</a></p>",
        "id": 194587918,
        "sender_full_name": "marmeladema",
        "timestamp": 1587288108
    },
    {
        "content": "<p>But later on, <code>.solve()</code> doesnt panic and i don't really know how to force it to panic.</p>",
        "id": 194587960,
        "sender_full_name": "marmeladema",
        "timestamp": 1587288129
    },
    {
        "content": "<p>I was thinking of adding a boolean flag into my mock database to enable/disable panic in some of the method. Would that do it?</p>",
        "id": 194588037,
        "sender_full_name": "marmeladema",
        "timestamp": 1587288253
    },
    {
        "content": "<p>Probably, depending on where it panics the first time</p>",
        "id": 194588793,
        "sender_full_name": "detrumi",
        "timestamp": 1587289478
    },
    {
        "content": "<p>So this kind of work, expect that locking the solver inside the catch_unwind and panicking poisoned the lock, as expected, thus, i cannot unlock to relock it in order to try to solve another goal.</p>",
        "id": 194591619,
        "sender_full_name": "marmeladema",
        "timestamp": 1587293989
    },
    {
        "content": "<p>to overcome that, i've locked outside of catch_unwind, but then i have to have <code>AssertUnwindSafe</code> and that kind of defeats the purpose of testing that the solver is unwind safe</p>",
        "id": 194591680,
        "sender_full_name": "marmeladema",
        "timestamp": 1587294029
    },
    {
        "content": "<p><a href=\"https://github.com/marmeladema/chalk/commit/37d79baa41fd8d3a35d67a39087691c0e0a7fe50#diff-fd5ee0d09acd0abcbcae1874a9725e46R175\" title=\"https://github.com/marmeladema/chalk/commit/37d79baa41fd8d3a35d67a39087691c0e0a7fe50#diff-fd5ee0d09acd0abcbcae1874a9725e46R175\">https://github.com/marmeladema/chalk/commit/37d79baa41fd8d3a35d67a39087691c0e0a7fe50#diff-fd5ee0d09acd0abcbcae1874a9725e46R175</a></p>",
        "id": 194591705,
        "sender_full_name": "marmeladema",
        "timestamp": 1587294083
    },
    {
        "content": "<p>(and by the way, i'll make <code>MockDatabase</code> a newtype over <code>ChalkIrDatabase</code> it makes more sense that just re-implementing one using copy paste)</p>",
        "id": 194592752,
        "sender_full_name": "marmeladema",
        "timestamp": 1587295456
    },
    {
        "content": "<p>I made a PR to discuss the issue i am facing: <a href=\"https://github.com/rust-lang/chalk/pull/407\" title=\"https://github.com/rust-lang/chalk/pull/407\">https://github.com/rust-lang/chalk/pull/407</a></p>",
        "id": 194596198,
        "sender_full_name": "marmeladema",
        "timestamp": 1587300636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> i'd like to discuss what are our options here, because of the mutex, i am not sure a solver is actually unwind safe</p>",
        "id": 194605059,
        "sender_full_name": "marmeladema",
        "timestamp": 1587312608
    },
    {
        "content": "<p>Just got on. Let me look at your commits</p>",
        "id": 194605227,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587312801
    },
    {
        "content": "<p>Ok <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> left some comments</p>",
        "id": 194605909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587313501
    },
    {
        "content": "<p>let me know if those make sense</p>",
        "id": 194605922,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587313509
    },
    {
        "content": "<p>or you need more details guidance</p>",
        "id": 194605926,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587313518
    },
    {
        "content": "<p>It's also 100% possible that the solver isn't unwind safe</p>",
        "id": 194606546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587314206
    },
    {
        "content": "<p>In which case a test with a fixme is a good start. But it means there would be followup work to actually close the issue (i.e. make it unwind safe)</p>",
        "id": 194606557,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587314240
    },
    {
        "content": "<p>I'll take a look at your comments, thanks!</p>",
        "id": 194606886,
        "sender_full_name": "marmeladema",
        "timestamp": 1587314579
    },
    {
        "content": "<p>Ok, so I understand what you mean in the comments, but i don't know at all how to hard code the program and the goal</p>",
        "id": 194607086,
        "sender_full_name": "marmeladema",
        "timestamp": 1587314790
    },
    {
        "content": "<p>And i have the feeling that it won't really help to solve the underlying problem, being that the solver is gated by a mutex and when you panic somewhere while its locked, then the mutex is poisoned and you can't use safely anymore.</p>",
        "id": 194607204,
        "sender_full_name": "marmeladema",
        "timestamp": 1587314916
    },
    {
        "content": "<p>Unless i don't even implement the <code>LoweringDatabase</code> trait</p>",
        "id": 194607457,
        "sender_full_name": "marmeladema",
        "timestamp": 1587315273
    },
    {
        "content": "<p>Right, we don't even have to implement <code>LoweringDatabase</code></p>",
        "id": 194608462,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587316528
    },
    {
        "content": "<p>in fact, we shouldn't touch any <code>chalk-integration</code> code at all</p>",
        "id": 194608472,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587316543
    },
    {
        "content": "<p>let me give an example of how to hard code the program and goal</p>",
        "id": 194608476,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587316559
    },
    {
        "content": "<p>I might have a solution also</p>",
        "id": 194608766,
        "sender_full_name": "marmeladema",
        "timestamp": 1587316970
    },
    {
        "content": "<p>But i feel like using a real underlying database is cleaner and more close to a real world example, especially in integration test, than mocking everything</p>",
        "id": 194608779,
        "sender_full_name": "marmeladema",
        "timestamp": 1587317005
    },
    {
        "content": "<p>Whatever the way i look at the problem, because the solve method takes a mutable reference to the solver, I am not sure it can be unwind safe</p>",
        "id": 194609509,
        "sender_full_name": "marmeladema",
        "timestamp": 1587318156
    },
    {
        "content": "<p>because you have to move the solver into the catch unwind closure and then you cannot get it back once it panicked</p>",
        "id": 194609542,
        "sender_full_name": "marmeladema",
        "timestamp": 1587318236
    },
    {
        "content": "<p>Well, everything in <code>chalk-integration</code> is just essentially a testing framework (and the cli)</p>",
        "id": 194609702,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587318476
    },
    {
        "content": "<p>It's not used when used as a library</p>",
        "id": 194609746,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587318493
    },
    {
        "content": "<p>So, we don't want to check if that is unwind safe or anything.</p>",
        "id": 194609766,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587318530
    },
    {
        "content": "<p>You should move the solver? It's just an <code>&amp;mut</code> ref</p>",
        "id": 194609793,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587318588
    },
    {
        "content": "<p>Yes but then you have lost it. Then you need to create new a one</p>",
        "id": 194609840,
        "sender_full_name": "marmeladema",
        "timestamp": 1587318615
    },
    {
        "content": "<p>Mmm no</p>",
        "id": 194609855,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587318642
    },
    {
        "content": "<p>you cannot just move the &amp;mut ref, its not unwind safe, you have to move the entire solver into the closure</p>",
        "id": 194609871,
        "sender_full_name": "marmeladema",
        "timestamp": 1587318679
    },
    {
        "content": "<p>Hmm</p>",
        "id": 194610042,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587318922
    },
    {
        "content": "<p>I mean <code>assert_unwind_safe</code>?</p>",
        "id": 194610095,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587318969
    },
    {
        "content": "<p>hu? I'ive never heard of <code>assert_unwind_safe</code> sorry :/ Only of <code>AssertUnwindSafe</code></p>",
        "id": 194610108,
        "sender_full_name": "marmeladema",
        "timestamp": 1587319011
    },
    {
        "content": "<p>that's it</p>",
        "id": 194610445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587319500
    },
    {
        "content": "<p>Well with <code>AssertUnwindSafe</code> you're telling the compiler that it should not care about unwind safety because you're telling that \"its fine\"</p>",
        "id": 194610534,
        "sender_full_name": "marmeladema",
        "timestamp": 1587319620
    },
    {
        "content": "<p>but it can be fine ... or not ..., you can do whatever you want</p>",
        "id": 194610547,
        "sender_full_name": "marmeladema",
        "timestamp": 1587319640
    },
    {
        "content": "<p>mmm</p>",
        "id": 194610548,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587319640
    },
    {
        "content": "<p>let me play around with this a bit</p>",
        "id": 194610554,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587319651
    },
    {
        "content": "<p>give me a couple minutes</p>",
        "id": 194610555,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587319654
    },
    {
        "content": "<p>Ok <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> my couple minutes are up</p>",
        "id": 194612114,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587321905
    },
    {
        "content": "<p>Here's what I've come up with: <a href=\"https://github.com/jackh726/chalk/commit/5f0c038ebaccfe3994a7aa98390cb841fdbbfee0\" title=\"https://github.com/jackh726/chalk/commit/5f0c038ebaccfe3994a7aa98390cb841fdbbfee0\">https://github.com/jackh726/chalk/commit/5f0c038ebaccfe3994a7aa98390cb841fdbbfee0</a></p>",
        "id": 194612116,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587321912
    },
    {
        "content": "<p>I think this is failing because the solver isn't unwind safe :)</p>",
        "id": 194612125,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587321939
    },
    {
        "content": "<p>(also btw it's @rustbot claim)</p>",
        "id": 194612183,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587321999
    },
    {
        "content": "<p>Well, it _cannot_ be unwind safe because the solver takes a &amp;mut ref for the solve method</p>",
        "id": 194612442,
        "sender_full_name": "marmeladema",
        "timestamp": 1587322420
    },
    {
        "content": "<p>You just bypassed the compiler using <code>AssertUnwindSafe</code></p>",
        "id": 194612446,
        "sender_full_name": "marmeladema",
        "timestamp": 1587322429
    },
    {
        "content": "<p>that's fine</p>",
        "id": 194612823,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587322893
    },
    {
        "content": "<p>We could just as easily use an <code>Arc</code> or something</p>",
        "id": 194612909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587322997
    },
    {
        "content": "<p>not really, because if you use interior mutability the compiler will notice it and won't let you do it :)</p>",
        "id": 194613589,
        "sender_full_name": "marmeladema",
        "timestamp": 1587323913
    },
    {
        "content": "<p>But anyway, you fixed the issue yourself, it seems :p i am fine trying another one later on</p>",
        "id": 194613657,
        "sender_full_name": "marmeladema",
        "timestamp": 1587324002
    },
    {
        "content": "<p>Well, not exactly</p>",
        "id": 194613697,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587324032
    },
    {
        "content": "<p>This is maybe enough to add as a failing test</p>",
        "id": 194613710,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587324066
    },
    {
        "content": "<p>but not enough to close the issue</p>",
        "id": 194613713,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587324072
    },
    {
        "content": "<p>because this fails</p>",
        "id": 194613714,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587324075
    },
    {
        "content": "<p>Yes because the solver failed to find a solution a believe</p>",
        "id": 194614223,
        "sender_full_name": "marmeladema",
        "timestamp": 1587324773
    },
    {
        "content": "<p>if you keep my patch version by just adding <code>AssertUnwindSafe</code> you'll see it works fine</p>",
        "id": 194614233,
        "sender_full_name": "marmeladema",
        "timestamp": 1587324793
    },
    {
        "content": "<p>or change your version with <code>is_none</code> instead of <code>is_some</code> at the end</p>",
        "id": 194614238,
        "sender_full_name": "marmeladema",
        "timestamp": 1587324812
    },
    {
        "content": "<p>hum no you are right it does not work</p>",
        "id": 194614883,
        "sender_full_name": "marmeladema",
        "timestamp": 1587325712
    },
    {
        "content": "<p>ah no i think i know why</p>",
        "id": 194614919,
        "sender_full_name": "marmeladema",
        "timestamp": 1587325768
    },
    {
        "content": "<p>Yeah, I mean, it <em>should</em> right now fail at an <code>unimplemented!()</code> call</p>",
        "id": 194615062,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587325972
    },
    {
        "content": "<p>I think it's failing because it's panic after the table is created, but before the strands have been added</p>",
        "id": 194615081,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587326010
    },
    {
        "content": "<p>thus, no strands :)</p>",
        "id": 194615085,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587326016
    },
    {
        "content": "<p>Hum ok, i'll look for what a strand is ^^</p>",
        "id": 194616315,
        "sender_full_name": "marmeladema",
        "timestamp": 1587327687
    },
    {
        "content": "<p>start here: <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/logic.rs#L260\" title=\"https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/logic.rs#L260\">https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/logic.rs#L260</a></p>",
        "id": 194616422,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587327871
    },
    {
        "content": "<p>or actually here: <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/logic.rs#L225\" title=\"https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/logic.rs#L225\">https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/logic.rs#L225</a></p>",
        "id": 194616436,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587327904
    },
    {
        "content": "<p>importantly, we insert a table <em>then</em> push the strands</p>",
        "id": 194616440,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587327949
    },
    {
        "content": "<p>I don't think I can make significant progress on this issue. I don't know enough of the internals of chalk to be really helpful :/</p>",
        "id": 195158975,
        "sender_full_name": "marmeladema",
        "timestamp": 1587717056
    },
    {
        "content": "<p>But if there is some mechanical change that need to be done elsewhere i can probably help. If there is an example PR to follow / reproduce / adapt that'd be even easier</p>",
        "id": 195159222,
        "sender_full_name": "marmeladema",
        "timestamp": 1587717242
    },
    {
        "content": "<p>Well, I wanted to do this myself, but it's probably a good beginner issue</p>",
        "id": 195184495,
        "sender_full_name": "Areredify",
        "timestamp": 1587733471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> with a recent pr landed, we now have scalar types and tuples, but <code>Sized</code>, <code>Copy</code> and <code>Clone</code> builtin impls were not extended to cover them. The relevant chalk code is in <code>chalk-solve\\builitin_traits.rs</code>. The relevant rustc code is in <code>librustc_trait_selection\\traits\\select.rs</code>.</p>",
        "id": 195185309,
        "sender_full_name": "Areredify",
        "timestamp": 1587733924
    },
    {
        "content": "<p>If you have any questions, ask me</p>",
        "id": 195185419,
        "sender_full_name": "Areredify",
        "timestamp": 1587733996
    },
    {
        "content": "<p>Yeah, that's a good issue to take on :)</p>",
        "id": 195214905,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587746854
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span></p>",
        "id": 195214913,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587746858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> Thanks for the work you did anyways :) I'll spend some time at some point to see if I can get the test passing, easily. Or if not, I'll just merge with a FIXME</p>",
        "id": 195215082,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587746943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> i tried something for the Sized trait: <a href=\"https://github.com/rust-lang/chalk/compare/master...marmeladema:sized-for-scalar-and-tuple?expand=1\" title=\"https://github.com/rust-lang/chalk/compare/master...marmeladema:sized-for-scalar-and-tuple?expand=1\">https://github.com/rust-lang/chalk/compare/master...marmeladema:sized-for-scalar-and-tuple?expand=1</a></p>",
        "id": 195280131,
        "sender_full_name": "marmeladema",
        "timestamp": 1587812885
    },
    {
        "content": "<p>I am not sure of what i am doing :D Basically, i just moved the code to handle struct type in a separate function for clarity and handled the scalar types by saying that scalar are always Sized</p>",
        "id": 195280141,
        "sender_full_name": "marmeladema",
        "timestamp": 1587812946
    },
    {
        "content": "<p>For tuple, i am not sure. I guess its Sized of all items are Sized, but it might not even be possible to have an unSized item actually so it might be always Sized also?</p>",
        "id": 195280148,
        "sender_full_name": "marmeladema",
        "timestamp": 1587812994
    },
    {
        "content": "<p>(and maybe everything I say does not mean anything ^^)</p>",
        "id": 195280194,
        "sender_full_name": "marmeladema",
        "timestamp": 1587813019
    },
    {
        "content": "<p>You are on the right track <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> . <a href=\"https://github.com/rust-lang/rust/blob/a58b1ed44f5e06976de2bdc4d7dc81c36a96934f/src/librustc_trait_selection/traits/select.rs#L2132\" title=\"https://github.com/rust-lang/rust/blob/a58b1ed44f5e06976de2bdc4d7dc81c36a96934f/src/librustc_trait_selection/traits/select.rs#L2132\">https://github.com/rust-lang/rust/blob/a58b1ed44f5e06976de2bdc4d7dc81c36a96934f/src/librustc_trait_selection/traits/select.rs#L2132</a> is the rustc implementation of the same thing. Basically, for structs (which are already implemented) and tuples you need the push the constraint on the last field, and for scalars you need to say that they are sized (which you did).</p>",
        "id": 195280835,
        "sender_full_name": "Areredify",
        "timestamp": 1587814027
    },
    {
        "content": "<p>Hmm, is my link too long</p>",
        "id": 195280845,
        "sender_full_name": "Areredify",
        "timestamp": 1587814060
    },
    {
        "content": "<p>Whatever</p>",
        "id": 195280846,
        "sender_full_name": "Areredify",
        "timestamp": 1587814069
    },
    {
        "content": "<p>Ok i am glad i understood well. I added tests for scalars and it works :D Fur tuples i am bit lost because it TypeName::Tuple hold a usize</p>",
        "id": 195280887,
        "sender_full_name": "marmeladema",
        "timestamp": 1587814094
    },
    {
        "content": "<p>I don't know how to look at the last field of the tuple</p>",
        "id": 195280891,
        "sender_full_name": "marmeladema",
        "timestamp": 1587814123
    },
    {
        "content": "<p>Yes, the types in a tuple are contained in the substitution</p>",
        "id": 195280893,
        "sender_full_name": "Areredify",
        "timestamp": 1587814129
    },
    {
        "content": "<p>so you need to get the last element of it to get the last field of the tuple</p>",
        "id": 195280907,
        "sender_full_name": "Areredify",
        "timestamp": 1587814183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> i am not sure how to write tests for tuples. I tried something like <code>type S&lt;T&gt; = (T, T);</code> but its not valid syntax</p>",
        "id": 195281543,
        "sender_full_name": "marmeladema",
        "timestamp": 1587815413
    },
    {
        "content": "<p>Should i use newtype struct syntax like <code>struct MyTuple&lt;T&gt;(T, T);</code>?</p>",
        "id": 195281547,
        "sender_full_name": "marmeladema",
        "timestamp": 1587815441
    },
    {
        "content": "<p>I am not sure type aliases are a thing?</p>",
        "id": 195281550,
        "sender_full_name": "Areredify",
        "timestamp": 1587815462
    },
    {
        "content": "<p>Not in items, that is</p>",
        "id": 195281610,
        "sender_full_name": "Areredify",
        "timestamp": 1587815552
    },
    {
        "content": "<p>What I would do is have a struct with a tuple field</p>",
        "id": 195281613,
        "sender_full_name": "Areredify",
        "timestamp": 1587815585
    },
    {
        "content": "<p>Ok that is what i was about to try!</p>",
        "id": 195281616,
        "sender_full_name": "marmeladema",
        "timestamp": 1587815615
    },
    {
        "content": "<p>I don't know what i am doing wrong whatever i try i get a <code>type declaration </code>S<code> does not meet well-formedness requirements</code> when I use a tuple field in a struct</p>",
        "id": 195282138,
        "sender_full_name": "marmeladema",
        "timestamp": 1587816524
    },
    {
        "content": "<p>even simple</p>\n<div class=\"codehilite\"><pre><span></span>struct S {\n                t: (u8, u8)\n            }\n</pre></div>",
        "id": 195282145,
        "sender_full_name": "marmeladema",
        "timestamp": 1587816542
    },
    {
        "content": "<p>Push the changes so I can see them</p>",
        "id": 195282387,
        "sender_full_name": "Areredify",
        "timestamp": 1587816847
    },
    {
        "content": "<p>i've updated the branch</p>",
        "id": 195282533,
        "sender_full_name": "marmeladema",
        "timestamp": 1587817127
    },
    {
        "content": "<p>my code for tuple is not even called</p>",
        "id": 195282539,
        "sender_full_name": "marmeladema",
        "timestamp": 1587817143
    },
    {
        "content": "<p>So <code>struct_sized_constraint</code> starts with </p>\n<div class=\"codehilite\"><pre><span></span>        if fields.len() &lt;= 1 {\n            return None;\n        }\n</pre></div>",
        "id": 195282847,
        "sender_full_name": "marmeladema",
        "timestamp": 1587817593
    },
    {
        "content": "<p>Its like struct with only one field can never be well formed?</p>",
        "id": 195282852,
        "sender_full_name": "marmeladema",
        "timestamp": 1587817625
    },
    {
        "content": "<p>No, it means that you don't need to prove it</p>",
        "id": 195282854,
        "sender_full_name": "Areredify",
        "timestamp": 1587817656
    },
    {
        "content": "<p>ok</p>",
        "id": 195282859,
        "sender_full_name": "marmeladema",
        "timestamp": 1587817677
    },
    {
        "content": "<p>It returns an optional goal to be proven for struct to be well-formed in terms of the trait, None means you don't need to prove anything</p>",
        "id": 195282907,
        "sender_full_name": "Areredify",
        "timestamp": 1587817718
    },
    {
        "content": "<p>It's counterpart is Some(CannotProve(())), which means it can't be well-formed</p>",
        "id": 195282914,
        "sender_full_name": "Areredify",
        "timestamp": 1587817757
    },
    {
        "content": "<p>ok! I thought that you always had to look at the last field of a struct to prove its Sized or not</p>",
        "id": 195282920,
        "sender_full_name": "marmeladema",
        "timestamp": 1587817772
    },
    {
        "content": "<p>(expect empty struct which is always Sized)</p>",
        "id": 195282925,
        "sender_full_name": "marmeladema",
        "timestamp": 1587817785
    },
    {
        "content": "<p>So for a strut with one field, you still had to prove that one field was sized</p>",
        "id": 195282972,
        "sender_full_name": "marmeladema",
        "timestamp": 1587817829
    },
    {
        "content": "<p>Yes</p>",
        "id": 195282973,
        "sender_full_name": "Areredify",
        "timestamp": 1587817838
    },
    {
        "content": "<p>The code in <code>struct_sized_constraint</code> is about the struct being well-formed, not proving Sized for it</p>",
        "id": 195282979,
        "sender_full_name": "Areredify",
        "timestamp": 1587817866
    },
    {
        "content": "<p>oh ok sorry</p>",
        "id": 195282981,
        "sender_full_name": "marmeladema",
        "timestamp": 1587817874
    },
    {
        "content": "<p>Ok so:</p>\n<div class=\"codehilite\"><pre><span></span>struct S {\n                t: u8\n            }\n</pre></div>\n\n\n<p>=&gt; well formed</p>\n<div class=\"codehilite\"><pre><span></span>struct S {\n                t: (u8, u8)\n            }\n</pre></div>\n\n\n<p>=&gt; not well formed</p>",
        "id": 195283055,
        "sender_full_name": "marmeladema",
        "timestamp": 1587818006
    },
    {
        "content": "<p>thats what is happening in my branch</p>",
        "id": 195283059,
        "sender_full_name": "marmeladema",
        "timestamp": 1587818026
    },
    {
        "content": "<p>Hmm</p>",
        "id": 195283285,
        "sender_full_name": "Areredify",
        "timestamp": 1587818408
    },
    {
        "content": "<p>I don't think any tuples are well-formed</p>",
        "id": 195283290,
        "sender_full_name": "Areredify",
        "timestamp": 1587818470
    },
    {
        "content": "<p>Which is a shame</p>",
        "id": 195283296,
        "sender_full_name": "Areredify",
        "timestamp": 1587818503
    },
    {
        "content": "<p>i've done some printing and<br>\n<code>toto: 2&lt;Uint(U8), Uint(U8)&gt; / WellFormed(2&lt;Uint(U8), Uint(U8)&gt;)</code></p>",
        "id": 195283340,
        "sender_full_name": "marmeladema",
        "timestamp": 1587818543
    },
    {
        "content": "<p>Ok, tuples are not well-formed</p>",
        "id": 195283423,
        "sender_full_name": "Areredify",
        "timestamp": 1587818674
    },
    {
        "content": "<p>Ok! I should probably work on that first then?</p>",
        "id": 195283446,
        "sender_full_name": "marmeladema",
        "timestamp": 1587818723
    },
    {
        "content": "<p>In that case, I would do </p>\n<div class=\"codehilite\"><pre><span></span>test! {\n        program {\n            #[lang(sized)]\n            trait Sized { }\n\n            trait Copy {}\n        }\n\n        goal {\n            (u8, dyn Copy): Sized\n        } yields {\n            &quot;No possible solution&quot;\n        }\n\n        goal {\n            (u8, u8): Sized\n        } yields {\n            &quot;Unique; substitution [], lifetime constraints []&quot;\n        }\n    }\n</pre></div>",
        "id": 195283450,
        "sender_full_name": "Areredify",
        "timestamp": 1587818730
    },
    {
        "content": "<p>No, tuple well-formedness is a design question and out of scope of this pr</p>",
        "id": 195283499,
        "sender_full_name": "Areredify",
        "timestamp": 1587818789
    },
    {
        "content": "<p>huhu ok</p>",
        "id": 195283503,
        "sender_full_name": "marmeladema",
        "timestamp": 1587818800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> so should I really only look at the last element of the tuple? or because tuples are not well-formed i should look at all elements?</p>",
        "id": 195283738,
        "sender_full_name": "marmeladema",
        "timestamp": 1587819203
    },
    {
        "content": "<p>You should only look at the last element</p>",
        "id": 195283746,
        "sender_full_name": "Areredify",
        "timestamp": 1587819230
    },
    {
        "content": "<p>Ok. So <code>(dyn Copy, u8): Sized</code> should yield <code>\"Unique; substitution [], lifetime constraints []\"</code></p>",
        "id": 195283800,
        "sender_full_name": "marmeladema",
        "timestamp": 1587819300
    },
    {
        "content": "<p>It should right now, but you shouldn't add a test like that <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 195283859,
        "sender_full_name": "Areredify",
        "timestamp": 1587819394
    },
    {
        "content": "<p>isnt is better to have a test with a comment that says maybe it should be looked at / fixed later than not having a test at all?</p>",
        "id": 195283930,
        "sender_full_name": "marmeladema",
        "timestamp": 1587819540
    },
    {
        "content": "<p>Anyway feel free to comment on <a href=\"https://github.com/rust-lang/chalk/pull/413\" title=\"https://github.com/rust-lang/chalk/pull/413\">https://github.com/rust-lang/chalk/pull/413</a></p>",
        "id": 195284166,
        "sender_full_name": "marmeladema",
        "timestamp": 1587819908
    },
    {
        "content": "<p>I don't know, I feel like it's going to get resolved anyway so the test is not really necessary, I guess we'll just ask niko :P</p>",
        "id": 195284243,
        "sender_full_name": "Areredify",
        "timestamp": 1587820072
    },
    {
        "content": "<p>I don't exactly know what are the rules for the chalk repo, shall i ask bors a review from niko?</p>",
        "id": 195284352,
        "sender_full_name": "marmeladema",
        "timestamp": 1587820204
    },
    {
        "content": "<p>Niko typically reviews all logic-related prs anyway</p>",
        "id": 195284420,
        "sender_full_name": "Areredify",
        "timestamp": 1587820348
    },
    {
        "content": "<p>Ok ok not touching anything then</p>",
        "id": 195284451,
        "sender_full_name": "marmeladema",
        "timestamp": 1587820386
    },
    {
        "content": "<p>Some days ago Niko commented, if I understood correctly, that tuples are well formed by definition, as they're externally provided (by rustc). I can't remember if that was in a chat with <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> or <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 195290174,
        "sender_full_name": "pachi",
        "timestamp": 1587829507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> ^^</p>",
        "id": 195290195,
        "sender_full_name": "pachi",
        "timestamp": 1587829540
    },
    {
        "content": "<p>That's what I remembered as well, but as of now, they are not implemented to be well-formed</p>",
        "id": 195290254,
        "sender_full_name": "Areredify",
        "timestamp": 1587829632
    },
    {
        "content": "<p>Then maybe it was you! :-(•‿•)</p>",
        "id": 195290468,
        "sender_full_name": "pachi",
        "timestamp": 1587829998
    },
    {
        "content": "<p>Tuples are always well formed</p>",
        "id": 195293507,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587834345
    },
    {
        "content": "<p>In master, this isn't the case</p>",
        "id": 195293511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587834356
    },
    {
        "content": "<p>I made a PR to fix this</p>",
        "id": 195293551,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587834364
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/411\" title=\"https://github.com/rust-lang/chalk/pull/411\">https://github.com/rust-lang/chalk/pull/411</a></p>",
        "id": 195293587,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587834409
    },
    {
        "content": "<p>But, the <code>Sized</code> question is a good one</p>",
        "id": 195293681,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587834526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> <a href=\"#narrow/stream/144729-wg-traits/topic/New.20contributor/near/195283800\" title=\"#narrow/stream/144729-wg-traits/topic/New.20contributor/near/195283800\">said</a>:</p>\n<blockquote>\n<p>Ok. So <code>(dyn Copy, u8): Sized</code> should yield <code>\"Unique; substitution [], lifetime constraints []\"</code></p>\n</blockquote>\n<p>Always feel free to add tests :)</p>",
        "id": 195293866,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587834816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> <a href=\"#narrow/stream/144729-wg-traits/topic/New.20contributor/near/195281543\" title=\"#narrow/stream/144729-wg-traits/topic/New.20contributor/near/195281543\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"251766\">Areredify</span> i am not sure how to write tests for tuples. I tried something like <code>type S&lt;T&gt; = (T, T);</code> but its not valid syntax</p>\n</blockquote>\n<p>There are opaque types now. See <a href=\"https://github.com/rust-lang/chalk/blob/master/tests/test/existential_types.rs#L12\" title=\"https://github.com/rust-lang/chalk/blob/master/tests/test/existential_types.rs#L12\">https://github.com/rust-lang/chalk/blob/master/tests/test/existential_types.rs#L12</a></p>",
        "id": 195294016,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587835051
    },
    {
        "content": "<p>The syntax is a bit different <code>opaque type S&lt;T&gt; = (T, T);</code></p>",
        "id": 195294023,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587835078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> in the PR i added tests that should not pass on purpose, so that they fail and we have to fix them when tuples will be well formed</p>",
        "id": 195295531,
        "sender_full_name": "marmeladema",
        "timestamp": 1587837339
    },
    {
        "content": "<p>Yes I figured :)</p>",
        "id": 195295589,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587837396
    },
    {
        "content": "<p>Oh ok I thought you wanted me to remove them, sorry, I misunderstood.</p>",
        "id": 195295634,
        "sender_full_name": "marmeladema",
        "timestamp": 1587837458
    },
    {
        "content": "<p>Sorry, I should have been a bit more clear. I think for now it's fine. But we need to get the WF for tuples fixed</p>",
        "id": 195295778,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587837666
    },
    {
        "content": "<p>I started to take a look at Copy and Clone but i have questions. Right now, every type that is copy is cloned in chalk (and only Function is copy as of today). I guess all scalars are copy? Even \"big\" one like u128?</p>",
        "id": 195295933,
        "sender_full_name": "marmeladema",
        "timestamp": 1587837922
    },
    {
        "content": "<p>But some types can be clone, but can't be copy because they are too big right?</p>",
        "id": 195295953,
        "sender_full_name": "marmeladema",
        "timestamp": 1587837957
    },
    {
        "content": "<p>Yes</p>",
        "id": 195296010,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587838008
    },
    {
        "content": "<p>Ok thanks and how would I check that size of such type? I mean can chalk _know_ the size of a type? Doesn't it depend on the compiler decision about layout etc?</p>",
        "id": 195296099,
        "sender_full_name": "marmeladema",
        "timestamp": 1587838141
    },
    {
        "content": "<p>Uh, we don't need to know the size</p>",
        "id": 195296171,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587838234
    },
    {
        "content": "<p>For reference, these were the Copy/Clone rules for the old chalk integration: <a href=\"https://github.com/rust-lang/rust/blob/21affdd00d52fba6388f1858a52c253b3f83a90d/src/librustc_traits/chalk_context/program_clauses/builtin.rs#L215\" title=\"https://github.com/rust-lang/rust/blob/21affdd00d52fba6388f1858a52c253b3f83a90d/src/librustc_traits/chalk_context/program_clauses/builtin.rs#L215\">https://github.com/rust-lang/rust/blob/21affdd00d52fba6388f1858a52c253b3f83a90d/src/librustc_traits/chalk_context/program_clauses/builtin.rs#L215</a></p>",
        "id": 195296188,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587838283
    },
    {
        "content": "<p>the same rules for the current solver can be found somewhere, I just don't remember where right now</p>",
        "id": 195296195,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587838299
    },
    {
        "content": "<p>I think its in librustc_trait_selection/traits/select.rs?</p>",
        "id": 195296318,
        "sender_full_name": "marmeladema",
        "timestamp": 1587838454
    },
    {
        "content": "<p>sounds right</p>",
        "id": 195296352,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587838532
    },
    {
        "content": "<p>For scalar its mentioned that <code>// Implementations provided in libcore</code>. But in chalk we should say all scalar are copy right? And tuples are copy if all elements are copy?</p>",
        "id": 195296414,
        "sender_full_name": "marmeladema",
        "timestamp": 1587838631
    },
    {
        "content": "<p>That's a good question for <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 195296523,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587838788
    },
    {
        "content": "<p>I <em>think</em> we want to say that, yes</p>",
        "id": 195296526,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587838798
    },
    {
        "content": "<p>I added another commit for copy/clone then</p>",
        "id": 195297322,
        "sender_full_name": "marmeladema",
        "timestamp": 1587840055
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 195297445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587840351
    },
    {
        "content": "<p>No, we don't need to provide impls for scalars, they are indeed provided explicitly</p>",
        "id": 195298319,
        "sender_full_name": "Areredify",
        "timestamp": 1587841720
    },
    {
        "content": "<p>I don't think we should make scalars copy in chalk, there is no reason Copy to be a special trait in that regard</p>",
        "id": 195298396,
        "sender_full_name": "Areredify",
        "timestamp": 1587841842
    },
    {
        "content": "<p>so only for tuple?</p>",
        "id": 195298855,
        "sender_full_name": "marmeladema",
        "timestamp": 1587842575
    },
    {
        "content": "<p>I think so for now then</p>",
        "id": 195298931,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587842693
    },
    {
        "content": "<p>Ok i've removed scalars :)</p>",
        "id": 195305903,
        "sender_full_name": "marmeladema",
        "timestamp": 1587854218
    },
    {
        "content": "<p>My first chalk PR has been merged <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 195634374,
        "sender_full_name": "marmeladema",
        "timestamp": 1588111812
    },
    {
        "content": "<p>Is there any \"easy\" task remaining about builtin traits?</p>",
        "id": 195634399,
        "sender_full_name": "marmeladema",
        "timestamp": 1588111839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> did you see the issue I wrote about documenting the behavior and status?</p>",
        "id": 195635872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588112631
    }
]