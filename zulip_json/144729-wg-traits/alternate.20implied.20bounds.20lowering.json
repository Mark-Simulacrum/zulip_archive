[
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, I am curious to get your thoughts about this alternate idea for implied bounds lowering.</p>\n<p>The idea is to introduce two things:</p>\n<ul>\n<li><code>Implemented(T: Trait)</code> -- produced by the trait, roughly equivalent to <code>WellFormed(T: Trait)</code> today</li>\n<li><code>Declared(T: Trait)</code> -- produced by an impl</li>\n</ul>\n<p>So for something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Ord</span>: <span class=\"nb\">Eq</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>you would produce</p>\n<div class=\"codehilite\"><pre><span></span>Implemented(T: Ord) :- Declared(T: Ord), Implemented(T: Eq).\nImplemented(T: Eq) :- Implemented(T: Ord).\n</pre></div>\n\n\n<p>and then if you have <code>impl Ord for Foo</code> that would produce</p>\n<div class=\"codehilite\"><pre><span></span>Declared(Foo: Ord).\n</pre></div>\n\n\n<p>along with the proof obligation that <code>Implemented(Foo: Ord)</code>.</p>\n<p>Without a <code>impl Eq for Foo</code> impl, though, this proof obligation cannot be satisfied. </p>\n<p>One nice property of this is that <code>fn foo&lt;T: Ord&gt;()</code> can simply convert <code>T: Ord</code> into <code>Implemented(T: Ord)</code> in all cases, we don't have this \"sometimes convert to <code>FromEnv</code>, sometimes to <code>Implemented</code>\" thing going on.</p>\n<p>I've not tried to go through all the examples though -- maybe it falls apart somewhere?</p>\n<p>I am particularly interested in coinduction. Presumably <code>Implemented</code>, like <code>WellFormed</code>, is coinductive (but <code>Declared</code> is not).</p>",
        "id": 147260506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541628823
    },
    {
        "content": "<p>To expand on the <code>fn foo&lt;T: Ord&gt;</code> thing, if the \"goal\" for <code>foo</code> to be well-formed is <code>G</code>, the idea is that we would produce a proof-obligation like</p>\n<div class=\"codehilite\"><pre><span></span>forall&lt;G&gt; { Implemented(T: Ord) =&gt; G }\n</pre></div>",
        "id": 147260605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541628920
    },
    {
        "content": "<p>and similarly if someone were to reference <code>foo::&lt;X&gt;</code>, we would produce a proof obligation like <code>Implemented(X: Ord)</code></p>",
        "id": 147260615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541628940
    },
    {
        "content": "<p>One <em>downside</em> is that you are \"re-proving\" <code>T: Eq</code> each time you prove <code>T: Ord</code> (via the impl, anyway). However, we should be caching, so probably that's ok.</p>",
        "id": 147260684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541628974
    },
    {
        "content": "<p>mmh, I'll try to test this setting on my usual battery of tricky examples</p>",
        "id": 147260813,
        "sender_full_name": "scalexm",
        "timestamp": 1541629086
    },
    {
        "content": "<p>at first sight, it seems similar to our setting where we only had <code>WellFormed</code> and <code>Implemented</code>, and used <code>WellFormed</code> for both well-formedness checks and implied bounds</p>",
        "id": 147260820,
        "sender_full_name": "scalexm",
        "timestamp": 1541629110
    },
    {
        "content": "<p>Indeed I <em>think</em> it is equivalent?</p>",
        "id": 147260841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541629143
    },
    {
        "content": "<p>It seems to be the same basic idea, but shifting the proof obligation from the <em>impl</em> to the <em>places that reference the impl</em></p>",
        "id": 147260856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541629158
    },
    {
        "content": "<p>we did not have the <code>Implemented(...)</code> in the same places so maybe not equivalent</p>",
        "id": 147260858,
        "sender_full_name": "scalexm",
        "timestamp": 1541629162
    },
    {
        "content": "<p>(although you also prove it at the impl)</p>",
        "id": 147260860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541629167
    },
    {
        "content": "<p>in our current scheme, we are basically saying that impl proves the transitive case once (<code>WellFormed</code>), and everybody else relies on that</p>",
        "id": 147260881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541629199
    },
    {
        "content": "<p>(I meant maybe not equivalent to the <code>WF/Implemented</code>-only setting)</p>",
        "id": 147260882,
        "sender_full_name": "scalexm",
        "timestamp": 1541629200
    },
    {
        "content": "<p>oh ok I see, yes, yes</p>",
        "id": 147260937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541629217
    },
    {
        "content": "<p>and I agree it felt very \"familiar\"</p>",
        "id": 147260946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541629226
    },
    {
        "content": "<p>so that was part of why I wanted to run it by you</p>",
        "id": 147260951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541629233
    },
    {
        "content": "<p>and see if we had rejected it already for some reason</p>",
        "id": 147260955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541629238
    },
    {
        "content": "<p>or if it differed in some particular</p>",
        "id": 147260960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541629242
    },
    {
        "content": "<p>yes at first sight I can't tell :) I'll look into it tomorrow morning, I'm going to sleep now :p</p>",
        "id": 147261003,
        "sender_full_name": "scalexm",
        "timestamp": 1541629281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> want to r+ if you're happy then? it will fail to go through in the case a test fails of course (which is unlikely given we've verified locally)</p>",
        "id": 147261127,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541629429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> thanks. and for the advice as well. good night :-)</p>",
        "id": 147261432,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541629739
    },
    {
        "content": "<p>Ok <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> some thoughts about this alternate encoding</p>",
        "id": 147292810,
        "sender_full_name": "scalexm",
        "timestamp": 1541676395
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// `Implemented(T: Foo) :- Declared(T: Foo), Implemented(&lt;T as Foo&gt;::Item: Foo).`</span>\n<span class=\"c1\">// `Implemented(&lt;T as Foo&gt;::Item: Foo) :- Implemented(T: Foo).`</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// `Declared(i32: Foo).`</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Prove `Implemented(i32: Foo)` --&gt; ok if `Implemented` is co-inductive</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 147292823,
        "sender_full_name": "scalexm",
        "timestamp": 1541676427
    },
    {
        "content": "<p>first, I think that because of this example, we need <code>Implemented</code> to be co-inductive, do you agree?</p>",
        "id": 147292838,
        "sender_full_name": "scalexm",
        "timestamp": 1541676470
    },
    {
        "content": "<p>I agree</p>",
        "id": 147309094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541692870
    },
    {
        "content": "<p>However, <code>Declared</code> would presumably not be (except for auto traits, perhaps)</p>",
        "id": 147309113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541692883
    },
    {
        "content": "<p>Yes but then I have an example that fails :p</p>",
        "id": 147309362,
        "sender_full_name": "scalexm",
        "timestamp": 1541693113
    },
    {
        "content": "<p>Iâ€™m on my phone right now, showing you in a few minutes</p>",
        "id": 147309373,
        "sender_full_name": "scalexm",
        "timestamp": 1541693132
    },
    {
        "content": "<p>I think this setup is basically equivalent to our first one <code>WF/Implemented</code>-only</p>",
        "id": 147309401,
        "sender_full_name": "scalexm",
        "timestamp": 1541693152
    },
    {
        "content": "<p>Either <code>WF</code> is inductive and you have to reject some useful impls, or it is unsound</p>",
        "id": 147309461,
        "sender_full_name": "scalexm",
        "timestamp": 1541693182
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, what do you think of this example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// `Implemented(T: Copy) :- Declared(T: Copy).`</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// `Implemented(T: Partial) :- Declared(T: Partial), Implemented(T: Copy).`</span>\n<span class=\"c1\">// `Implemented(T: Copy) :- Implemented(T: Partial).` (*)</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Partial</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Self</span>: <span class=\"nb\">Copy</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// `Declared(T: Partial)`.</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Partial</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Prove `Implemented(T: Partial)`:</span>\n<span class=\"w\">    </span><span class=\"c1\">//     true if `Declared(T: Partial)`, --&gt; ok</span>\n<span class=\"w\">    </span><span class=\"c1\">//             `Implemented(T: Copy)</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// Prove `Implemented(T: Copy)`:</span>\n<span class=\"w\">    </span><span class=\"c1\">//     true if `Implemented(T: Partial)` because of (*)</span>\n<span class=\"w\">    </span><span class=\"c1\">//     --&gt; co-inductive cycle</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 147312339,
        "sender_full_name": "scalexm",
        "timestamp": 1541695578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> hmm. So this is precisely the example I was thinking of. I'm trying to remember why I thought it would be ok. It may be that in relaying the idea I errored somewhere. </p>\n<p>The plan was that <code>trait Partial: Copy</code> lowes to this:</p>\n<div class=\"codehilite\"><pre><span></span>Implemented(T: Partial) iff Declared(T: Partial), Implemented(T: Copy).\n</pre></div>\n\n\n<p>which of course means that</p>\n<div class=\"codehilite\"><pre><span></span>Implemented(T: Partial) :- Declared(T: Partial), Implemented(T: Copy).\n</pre></div>\n\n\n<p>but I have to think about the reverse rule... honestly my brain does not seem to be functioning right now. It seems though that from this <code>iff</code> we <em>should</em> be able to conclude that <code>Implemented(T: Copy) =&gt; Implemented(T: Partial)</code>, as I wrote, right? I'll think about it when I'm a bit less worn out perhaps though (or look up the standard handling for <code>iff</code> :P)</p>",
        "id": 147382074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541780520
    },
    {
        "content": "<p>If this is an <code>iff</code>, there should definitely be two reverse rules<br>\n<code>Declared(T: Partial) :- Implemented(T: Partial)</code> and <code>Implemented(T: Copy) :- Implemented(T: Partial)</code></p>",
        "id": 147382279,
        "sender_full_name": "scalexm",
        "timestamp": 1541780693
    },
    {
        "content": "<p>Which in that case is exactly our very first setting</p>",
        "id": 147382321,
        "sender_full_name": "scalexm",
        "timestamp": 1541780722
    },
    {
        "content": "<p>Revisiting this, it's really a fascinating failure. =)</p>",
        "id": 156646223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548196365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> for me, the problem with this approach is that it is the same approach as our first one from summer 2017</p>",
        "id": 156672412,
        "sender_full_name": "scalexm",
        "timestamp": 1548232671
    },
    {
        "content": "<p>And we concluded that, we could not soundly handle cyclic things</p>",
        "id": 156672477,
        "sender_full_name": "scalexm",
        "timestamp": 1548232714
    },
    {
        "content": "<p>Basically, if <code>Implemented</code> in this setup is not co-inductive, you cannot handle decls like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Self</span>::<span class=\"n\">Item</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156672521,
        "sender_full_name": "scalexm",
        "timestamp": 1548232799
    },
    {
        "content": "<p>So I donâ€™t know</p>",
        "id": 156672595,
        "sender_full_name": "scalexm",
        "timestamp": 1548232883
    },
    {
        "content": "<p>yeah I mean I agree it's wrong, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, I'm just trying to kind of dig a bit into <em>why</em> it's wrong. The core problem I think is that the co-inductive <code>Implemented</code> predicate is used as more than a \"carrier\"</p>",
        "id": 156693100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548254105
    },
    {
        "content": "<p>and co-induction without some guarantee of \"productivity\" (I think this is the term, iirc) is problematic -- (basically, the existence of cycles without some \"step\" in between)</p>",
        "id": 156693283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548254246
    },
    {
        "content": "<p>anyway, I'm going to try and sketch some sort of \"diagram-like thing\" for the implied bounds to see if I can capture my intuition for what it was aiming at</p>",
        "id": 156693306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548254267
    },
    {
        "content": "<p>I have to revit that soundness failure from <code>WF(Type)</code> that you mentioned though</p>",
        "id": 156693319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548254278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> my own intuition for implied bounds is that they happen in two steps:</p>\n<ul>\n<li>\n<p>first we compute the full Â«Â graphÂ Â» of impls, this is where we translate all the impls into rules of the form <code>Implemented(...) :- Implemented(...)</code><br>\n** here we only have <code>Implemented</code> goals and no <code>WF</code> at all because we are just stating relations between impls</p>\n</li>\n<li>\n<p>only when the impls graph is built, we check that all impls are legal: this is where we do generate <code>WF</code> goals and try to prove them</p>\n</li>\n</ul>\n<p>Of course in practice these two steps happen in parallel, where we Â«Â discoverÂ Â» the impls graph lazily while checking legality: this works because <code>WellFormed(TraitRef)</code> is co-inductive and hence can handle cycles</p>",
        "id": 156703482,
        "sender_full_name": "scalexm",
        "timestamp": 1548261545
    },
    {
        "content": "<p>Then the difference between <code>FromEnv</code> and <code>WellFormed</code> is that <code>WellFormed</code> serves as a graph traversal; while <code>FromEnv</code> serves as finding a path in an oriented graph (going from one goal to prove to a possible clause in our environment)</p>",
        "id": 156703578,
        "sender_full_name": "scalexm",
        "timestamp": 1548261609
    },
    {
        "content": "<p>So this is why the two are somehow unrelated, and also why <code>WellFormed</code> should not have any reverse rules: it is somehow incompatible with its Â«Â graph traversalÂ Â» semantics</p>",
        "id": 156703612,
        "sender_full_name": "scalexm",
        "timestamp": 1548261647
    }
]