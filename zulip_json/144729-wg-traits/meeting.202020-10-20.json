[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span>, meeting in 5ish minutes</p>",
        "id": 213971324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603223696
    },
    {
        "content": "<p>I figured today we can discuss const evaluation, since we skipped meeting last week</p>",
        "id": 213971361,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603223717
    },
    {
        "content": "<p>(I also went through and started to list some of the in-progress items/PRs and we can quickly review)</p>",
        "id": 213971405,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603223750
    },
    {
        "content": "<p>I was trying to draw up a kind of \"to do\" list for the type library work</p>",
        "id": 213971731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603223915
    },
    {
        "content": "<p>but I didn't get too far yet</p>",
        "id": 213971736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603223919
    },
    {
        "content": "<p>(in response to the MCP discussion)</p>",
        "id": 213971743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603223924
    },
    {
        "content": "<p>I was thinking about what steps might make sense apart from <code>.data()</code></p>",
        "id": 213971762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603223932
    },
    {
        "content": "<p>yeah, that's probably worth discussing too</p>",
        "id": 213971868,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603223987
    },
    {
        "content": "<p>Ok, <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span>, meeting time</p>",
        "id": 213972024,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224051
    },
    {
        "content": "<p>(anyone around?)</p>",
        "id": 213972229,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224136
    },
    {
        "content": "<p>Howdy :)</p>",
        "id": 213972264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224151
    },
    {
        "content": "<p>Oh, there are people</p>",
        "id": 213972281,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224158
    },
    {
        "content": "<p>Alright, so \"on the agenda\" for today:</p>",
        "id": 213972322,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224176
    },
    {
        "content": "<ul>\n<li>const evaluation Chalk</li>\n</ul>",
        "id": 213972335,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224186
    },
    {
        "content": "<ul>\n<li>In-progress things (review)</li>\n</ul>",
        "id": 213972352,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224196
    },
    {
        "content": "<ul>\n<li>Type library items?</li>\n</ul>",
        "id": 213972365,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224204
    },
    {
        "content": "<p>But first! Announcements?</p>",
        "id": 213972379,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224214
    },
    {
        "content": "<p>Couple bug fixes got merged this week into Chalk</p>",
        "id": 213972513,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224280
    },
    {
        "content": "<p>And my PR to add <code>rebind</code> in rustc got merged</p>",
        "id": 213972535,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224292
    },
    {
        "content": "<p>Also still been working on tracking late-bound vars in rustc</p>",
        "id": 213972574,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224318
    },
    {
        "content": "<p>running into an issue locally I gotta figure out</p>",
        "id": 213972598,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224332
    },
    {
        "content": "<p>Anyone else done anything spectacular?</p>",
        "id": 213972699,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224372
    },
    {
        "content": "<p>Not I, sadly</p>",
        "id": 213972742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224398
    },
    {
        "content": "<p>Reviewing :)</p>",
        "id": 213972751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224401
    },
    {
        "content": "<p>I saw you reviewed the const eval PR, so looking forward to discussing that</p>",
        "id": 213972781,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224419
    },
    {
        "content": "<p>get a chance to look at the variance PR?</p>",
        "id": 213972788,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224425
    },
    {
        "content": "<p>I <em>think</em> I got things working</p>",
        "id": 213972802,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224436
    },
    {
        "content": "<p>I started reading it</p>",
        "id": 213972864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224464
    },
    {
        "content": "<p>Still some more tests to be added in regards to setting the variance of structs or function args</p>",
        "id": 213972868,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224466
    },
    {
        "content": "<p>it's a big PR, although I've read some of it before</p>",
        "id": 213972933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224487
    },
    {
        "content": "<p>I was wondering if it's maybe worth splitting up</p>",
        "id": 213972951,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224501
    },
    {
        "content": "<p>is there an obvious way to do that?</p>",
        "id": 213973000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224543
    },
    {
        "content": "<p>What I had pre-generalizer got us pretty far</p>",
        "id": 213973013,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224550
    },
    {
        "content": "<p>Sorry for the interruption, I was thinking that maybe I could help with some more refractors like</p>\n<blockquote>\n<p>Extend Rustc's folder trait to have a <code>Result</code> associated type</p>\n</blockquote>\n<p>or</p>\n<blockquote>\n<p>Extend Rustc's visit trait to not hard-code a boolean result?</p>\n</blockquote>",
        "id": 213973019,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1603224554
    },
    {
        "content": "<p>But I don't know if that is \"right\"</p>",
        "id": 213973030,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">LeSeulArtichaut</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-20/near/213973019\">said</a>:</p>\n<blockquote>\n<p>Sorry for the interruption, I was thinking that maybe I could help with some more refractors like</p>\n<blockquote>\n<p>Extend Rustc's folder trait to have a <code>Result</code> associated type</p>\n</blockquote>\n<p>or</p>\n<blockquote>\n<p>Extend Rustc's visit trait to not hard-code a boolean result?</p>\n</blockquote>\n</blockquote>\n<p>Interesting you brought that up</p>",
        "id": 213973082,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224579
    },
    {
        "content": "<p>since there was just a related MCP</p>",
        "id": 213973101,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224588
    },
    {
        "content": "<p>The one by <span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span>?</p>",
        "id": 213973141,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1603224602
    },
    {
        "content": "<p><a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/TypeVisitor.3A.20use.20ops.3A.3AControlFlow.20instead.E2.80.A6.20compiler-team.23374/near/213916879\">link</a></p>",
        "id": 213973188,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224609
    },
    {
        "content": "<p>ah, interesting, I saw that</p>",
        "id": 213973214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224632
    },
    {
        "content": "<p>but I failed to make the connection :)</p>",
        "id": 213973217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224636
    },
    {
        "content": "<p>So, that MCP basically just replaces the <code>bool</code> with <code>ControlFlow</code></p>",
        "id": 213973246,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-20/near/213973217\">said</a>:</p>\n<blockquote>\n<p>but I failed to make the connection :)</p>\n</blockquote>\n<p>I didn't either <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 213973251,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1603224657
    },
    {
        "content": "<p>Whereas <code>ControlFlow</code> is like the Chalk <code>ReturnEarly</code></p>",
        "id": 213973283,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224673
    },
    {
        "content": "<p>the visit trait in chalk is a bit more general, in particular I think I wanted to be able to \"count\" things</p>",
        "id": 213973289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224675
    },
    {
        "content": "<p>I'm not sure if we're really <em>using</em> that capability</p>",
        "id": 213973308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224686
    },
    {
        "content": "<p>There are currently only two <code>VisitResult</code>s</p>",
        "id": 213973330,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224702
    },
    {
        "content": "<p>I remember I had a reason to do it</p>",
        "id": 213973334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224705
    },
    {
        "content": "<p><code>ReturnEarly</code> and <code>FindAny</code></p>",
        "id": 213973337,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224708
    },
    {
        "content": "<p>ah yeah it had to do with sem-vs-syn-equality, in some cases I wanted to count references to escaping things or something like that, though maybe that's not needed anymore since we refactored how binders work to count binder levels and not individual variables</p>",
        "id": 213973432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224747
    },
    {
        "content": "<p>Okay, maybe I was wrong about <code>ReturnEarly</code></p>",
        "id": 213973541,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224823
    },
    {
        "content": "<p>thought I saw that...</p>",
        "id": 213973545,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224826
    },
    {
        "content": "<p>I guess that's <code>FindAny</code> anyways</p>",
        "id": 213973623,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224854
    },
    {
        "content": "<p>maybe only <code>FindAny</code>?</p>",
        "id": 213973627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224856
    },
    {
        "content": "<p>and <code>FindFreeVarsVisitor</code></p>",
        "id": 213973641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224867
    },
    {
        "content": "<p>oh, that yields a <code>FindAny</code></p>",
        "id": 213973669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224888
    },
    {
        "content": "<p>yeah</p>",
        "id": 213973676,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224893
    },
    {
        "content": "<p><code>()</code> also impls <code>VisitResult</code></p>",
        "id": 213973693,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224902
    },
    {
        "content": "<p>as a noop</p>",
        "id": 213973699,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224905
    },
    {
        "content": "<p>so...if we're only using <code>FindAny</code>, that is indeed basically the same as rustc's visitor</p>",
        "id": 213973719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224916
    },
    {
        "content": "<p>yes</p>",
        "id": 213973728,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224922
    },
    {
        "content": "<p>and I would be inclined to remove the traits and complexity</p>",
        "id": 213973737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224926
    },
    {
        "content": "<p>Somewhat related, I've been contemplating whether or not the target interner parameter in <code>Fold</code> pulls its weight (I lean towards no, we don't use it at all currently).</p>",
        "id": 213973745,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1603224931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> had ideas for that</p>",
        "id": 213973760,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603224944
    },
    {
        "content": "<p>I did, I had hoped to use it to separate out distinct \"phases\" of interning</p>",
        "id": 213973780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224956
    },
    {
        "content": "<p>e.g., to separate out \"semantic vs syntactic\" and guarantee that you transform from one to the other</p>",
        "id": 213973845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224974
    },
    {
        "content": "<p>Ooh, interesting</p>",
        "id": 213973868,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1603224985
    },
    {
        "content": "<p>Hadn't thought of that before</p>",
        "id": 213973889,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1603224994
    },
    {
        "content": "<p>ideally without actually requiring deep changes</p>",
        "id": 213973892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603224997
    },
    {
        "content": "<p>that is, you would have two generic interners, but they would wind up being the same interner when instantiated</p>",
        "id": 213973921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225011
    },
    {
        "content": "<p>we would probably want some optimizations there to account for \"no-op\" changes and not having to refold everything</p>",
        "id": 213973956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225032
    },
    {
        "content": "<p>there's no doubt that it adds complexity and it may not be worth it :)</p>",
        "id": 213973974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225038
    },
    {
        "content": "<p>but it is also a nice way to be sure you didn't overlook cases</p>",
        "id": 213973988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225046
    },
    {
        "content": "<p><em>anyways</em></p>",
        "id": 213974020,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225066
    },
    {
        "content": "<p>we're kind of getting off track</p>",
        "id": 213974033,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225072
    },
    {
        "content": "<p>yeah, we are, it's relevant to the shared type library discussion but that was last on the agenda :)</p>",
        "id": 213974093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225084
    },
    {
        "content": "<p>yes, we can get back to it</p>",
        "id": 213974116,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225097
    },
    {
        "content": "<p>Let's circle back and look at in progress things</p>",
        "id": 213974121,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225100
    },
    {
        "content": "<p>I made a list</p>",
        "id": 213974125,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225102
    },
    {
        "content": "<ul>\n<li>Binder refactor (<a href=\"https://github.com/rust-lang/rust/issues/76814\">rust#76814</a>)</li>\n<li>Binder <code>map_bound_ref</code> (<a href=\"https://github.com/rust-lang/rust/issues/77685\">rust#77685</a>)</li>\n<li><code>TyKind</code> -&gt; <code>TyData</code> (<a href=\"https://github.com/rust-lang/rust/issues/77768\">rust#77768</a>)</li>\n<li>Subtyping/variance (<a href=\"https://github.com/rust-lang-nursery/chalk/issues/609\">chalk#609</a>)</li>\n<li>Sem/syn equality (<a href=\"https://github.com/rust-lang-nursery/chalk/issues/589\">chalk#589</a>)</li>\n<li>Const evaluation (<a href=\"https://github.com/rust-lang-nursery/chalk/issues/596\">chalk#596</a>)</li>\n</ul>",
        "id": 213974135,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225109
    },
    {
        "content": "<p>Uh, that second one is merged</p>",
        "id": 213974141,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225118
    },
    {
        "content": "<p>Also why didn't it format correctly</p>",
        "id": 213974158,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225126
    },
    {
        "content": "<p>there we go</p>",
        "id": 213974189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225148
    },
    {
        "content": "<p>ugh formatting is so bad</p>",
        "id": 213974206,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225163
    },
    {
        "content": "<p>links are here: <a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\">https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both</a></p>",
        "id": 213974224,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225175
    },
    {
        "content": "<p>I think if you just remove the <code>[]</code> it will work ok in zulip but yeah annoying</p>",
        "id": 213974232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225182
    },
    {
        "content": "<p>Aright, so I've already mentioned the first two</p>",
        "id": 213974325,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225218
    },
    {
        "content": "<p>That's getting there</p>",
        "id": 213974330,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225222
    },
    {
        "content": "<p><code>TyKind</code> -&gt; <code>TyData</code> we can discussion irt. type library</p>",
        "id": 213974360,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225244
    },
    {
        "content": "<p>subtyping/variance, we've already discussed a bit too</p>",
        "id": 213974381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225258
    },
    {
        "content": "<p>I will leave it up to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> whether he thinks it's worth splitting out a subset</p>",
        "id": 213974410,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225275
    },
    {
        "content": "<p>(I'm less inclined now than I was at one point given that I think it works now)</p>",
        "id": 213974443,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225295
    },
    {
        "content": "<p>Sem/syn equality, I'm not sure</p>",
        "id": 213974458,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225305
    },
    {
        "content": "<p>what the state is</p>",
        "id": 213974488,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225316
    },
    {
        "content": "<p>(and I keep saying that)</p>",
        "id": 213974539,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225325
    },
    {
        "content": "<p>I pulled it locally to take a look</p>",
        "id": 213974558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225332
    },
    {
        "content": "<p>(I also thought about/played with <a href=\"https://github.com/rust-lang-nursery/chalk/issues/234\">chalk#234</a>, but that failed)</p>",
        "id": 213974596,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225352
    },
    {
        "content": "<p>And const eval we'll also talk about</p>",
        "id": 213974634,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225370
    },
    {
        "content": "<p>I <em>probably</em> missed things here</p>",
        "id": 213974653,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-20/near/213974410\">said</a>:</p>\n<blockquote>\n<p>I will leave it up to <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> whether he thinks it's worth splitting out a subset</p>\n</blockquote>\n<p>probably not, I probably just need to devote an hour or two to read it</p>",
        "id": 213974676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225392
    },
    {
        "content": "<p>I <em>mostly</em> just wanted to keep a list around of things in progress so we don't let things slip through</p>",
        "id": 213974722,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225421
    },
    {
        "content": "<p>shall we discuss <a href=\"https://github.com/rust-lang-nursery/chalk/issues/596\">chalk#596</a> const eval?</p>",
        "id": 213974828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225469
    },
    {
        "content": "<p>(Feel free to add things to the list if I missed)</p>",
        "id": 213974846,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225480
    },
    {
        "content": "<p>Yes, const eval</p>",
        "id": 213974852,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225483
    },
    {
        "content": "<p>So, I don't <em>really</em> know what the end vision is here</p>",
        "id": 213974877,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225500
    },
    {
        "content": "<p>Especially after reading <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s review, I feel like I know less</p>",
        "id": 213974903,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225515
    },
    {
        "content": "<p>Heh, I feel like I need to compare against rustc a bit and get things back in my head too, but...</p>",
        "id": 213974935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225543
    },
    {
        "content": "<p>I think of const eval as quite similar to associated type normalization</p>",
        "id": 213975000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225571
    },
    {
        "content": "<p>i.e., you have an expression that has to be evaluated</p>",
        "id": 213975020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225588
    },
    {
        "content": "<p>that expression can have generics in scope, because it might be like <code>fn foo&lt;const C: usize&gt;() -&gt; [u32; C + 1]</code></p>",
        "id": 213975039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225605
    },
    {
        "content": "<p>if you invoke <code>foo::&lt;22&gt;</code>, then you get back a return type like <code>[[C+1]]&lt;C=22&gt;</code> -- i.e., the expression <code>C+1</code> but with a substitution that specifies <code>C = 22</code></p>",
        "id": 213975102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225644
    },
    {
        "content": "<p>(this can lead to some cyclic complications)</p>",
        "id": 213975135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225668
    },
    {
        "content": "<p>I think that these substitutions are kind of missing from the PR</p>",
        "id": 213975146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225678
    },
    {
        "content": "<p>Well</p>",
        "id": 213975197,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225690
    },
    {
        "content": "<p>Hmm</p>",
        "id": 213975204,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225692
    },
    {
        "content": "<p>I mean, do consts (evaluated or unevaluated) carry substitutions themselves?</p>",
        "id": 213975245,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225716
    },
    {
        "content": "<p>yeah, well, only unevaluated consts do</p>",
        "id": 213975275,
        "sender_full_name": "lcnr",
        "timestamp": 1603225737
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.ConstKind.html#variant.Unevaluated\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.ConstKind.html#variant.Unevaluated</a></p>",
        "id": 213975302,
        "sender_full_name": "lcnr",
        "timestamp": 1603225760
    },
    {
        "content": "<p>right, an evaluated constant is basically some bits</p>",
        "id": 213975309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225762
    },
    {
        "content": "<p>ps, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>, I'm not sure what <code>WithOptConstParam&lt;&gt;</code> is...</p>",
        "id": 213975360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225793
    },
    {
        "content": "<p>it's a <code>DefId</code></p>",
        "id": 213975450,
        "sender_full_name": "lcnr",
        "timestamp": 1603225819
    },
    {
        "content": "<p>but basically in rustc you identify an expression like <code>[[C+1]]</code> with a <code>DefId</code> (and an optional <code>Promoted</code> index? not sure about that)</p>",
        "id": 213975455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225822
    },
    {
        "content": "<p>Right, okay I think I see</p>",
        "id": 213975484,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225848
    },
    {
        "content": "<p>except that we have to deal with query cycles by pairing them with a optional additional <code>DefId</code> for the corresponding generic param</p>",
        "id": 213975514,
        "sender_full_name": "lcnr",
        "timestamp": 1603225864
    },
    {
        "content": "<p>this is needed for </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">B</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">isize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">7</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213975645,
        "sender_full_name": "lcnr",
        "timestamp": 1603225927
    },
    {
        "content": "<p>I'm trying to understand that example :)</p>",
        "id": 213975686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225951
    },
    {
        "content": "<p>and kind of failing</p>",
        "id": 213975712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603225969
    },
    {
        "content": "<p>we don't know the expected type of <code>7</code> before typechecking <code>main</code> but have to know the value of <code>7</code> during typechecking</p>",
        "id": 213975720,
        "sender_full_name": "lcnr",
        "timestamp": 1603225974
    },
    {
        "content": "<p>So, I guess, if the PR needs non-trivial work, I'm not sure if the PR author is around. They haven't really been responsive. So, we either should 1) close the PR for now or 2) have someone here pick it up and finish it</p>",
        "id": 213975729,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603225979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> the <code>DefId</code> of <code>7</code> there includes ... the index <code>0</code> to say that it is the value for the 0th argument, is that the idea?</p>",
        "id": 213975840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226042
    },
    {
        "content": "<p>Considering that this is the second time <code>WithOptConstParam</code> caused some confusion it might be nice if you could help me out with improving the struct docs here <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.WithOptConstParam.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.WithOptConstParam.html</a></p>",
        "id": 213975872,
        "sender_full_name": "lcnr",
        "timestamp": 1603226049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> yeah, that makes sense. Maybe it'd be a good idea to try and write-up some instructions for how we imagine it working</p>",
        "id": 213975898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226059
    },
    {
        "content": "<p>The <code>DefId</code> of <code>7</code> is paired with the <code>DefId</code> of the parameter <code>N</code> here</p>",
        "id": 213975931,
        "sender_full_name": "lcnr",
        "timestamp": 1603226077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> feel like contributing to Chalk :D</p>",
        "id": 213975949,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I see. That is computed during type-checking I guess? i.e., we have to know which method is being invoked to figure that out</p>",
        "id": 213976017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226130
    },
    {
        "content": "<p>to what extent is rustc using a \"lazy norm\" approach for constants now</p>",
        "id": 213976170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226202
    },
    {
        "content": "<p>That's also something I thought about</p>",
        "id": 213976200,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226221
    },
    {
        "content": "<p>When you mentioned they are something like associated types</p>",
        "id": 213976217,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226228
    },
    {
        "content": "<p>It seems like the approach in the PR is very eager</p>",
        "id": 213976241,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226244
    },
    {
        "content": "<p>afaik we should mostly evaluate them during <code>fulfill</code> and <code>select</code> now</p>",
        "id": 213976277,
        "sender_full_name": "lcnr",
        "timestamp": 1603226267
    },
    {
        "content": "<p>with some exceptions like <code>structural_match</code> checking</p>",
        "id": 213976302,
        "sender_full_name": "lcnr",
        "timestamp": 1603226279
    },
    {
        "content": "<p>which happens outside of typeck</p>",
        "id": 213976357,
        "sender_full_name": "lcnr",
        "timestamp": 1603226292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-20/near/213976302\">said</a>:</p>\n<blockquote>\n<p>with some exceptions like <code>structural_match</code> checking</p>\n</blockquote>\n<p><code>[NotStructuralMatch; 0]</code> is structural match, which is why we have to evaluate that constant</p>",
        "id": 213976418,
        "sender_full_name": "lcnr",
        "timestamp": 1603226330
    },
    {
        "content": "<p>so if you unify two constants, that generates a goal to be resolved, right?</p>",
        "id": 213976492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-20/near/213975949\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> feel like contributing to Chalk :D</p>\n</blockquote>\n<p>maybe once rustc is finished <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 213976638,
        "sender_full_name": "lcnr",
        "timestamp": 1603226435
    },
    {
        "content": "<p>OK. So it does seem like we need to spell out how this should work. This would be really useful for me personally, I think.</p>",
        "id": 213976652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-20/near/213976638\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-20/near/213975949\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> feel like contributing to Chalk :D</p>\n</blockquote>\n<p>maybe once rustc is finished <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>\n</blockquote>\n<p>\"finished\"</p>",
        "id": 213976657,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226446
    },
    {
        "content": "<p>this reminds me <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> that we should setup that time to talk about \"min const generics\" tests</p>",
        "id": 213976693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-20/near/213976652\">said</a>:</p>\n<blockquote>\n<p>OK. So it does seem like we need to spell out how this should work. This would be really useful for me personally, I think.</p>\n</blockquote>\n<p>That's probably a good idea. And it sounds like we maybe should close the PR as-is</p>",
        "id": 213976710,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226477
    },
    {
        "content": "<p>yeah I think so</p>",
        "id": 213976721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226485
    },
    {
        "content": "<p>should we move to next topic?</p>",
        "id": 213976762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226513
    },
    {
        "content": "<p>/me eyes the time</p>",
        "id": 213976764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226515
    },
    {
        "content": "<p>That does make me sad, because I don't really want to see it fall through, <em>but</em> I don't anyone here has the bandwidth to update it</p>",
        "id": 213976765,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226515
    },
    {
        "content": "<p>Yeah</p>",
        "id": 213976775,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226520
    },
    {
        "content": "<p>well it can always be re-opened</p>",
        "id": 213976818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226527
    },
    {
        "content": "<p>We can talk about shared type library</p>",
        "id": 213976822,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226530
    },
    {
        "content": "<p>I was actually just starting to write up an issue about type flags and I realized that maybe what I said in the MCP thread was wrong</p>",
        "id": 213976845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226552
    },
    {
        "content": "<p>So, it sounds like maybe the <code>TyKind</code> -&gt; <code>TyData</code> rename is not the way to go for now</p>",
        "id": 213976859,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226562
    },
    {
        "content": "<p>How so?</p>",
        "id": 213976874,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226571
    },
    {
        "content": "<p>In particular we were discussing whether <code>ty.data()</code> should yield the enum directly or some sort of intermediate structure</p>",
        "id": 213976892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226584
    },
    {
        "content": "<p>I was expecting we would extend the <code>Interner</code> trait to carry the type flags along with the interned data</p>",
        "id": 213976926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226607
    },
    {
        "content": "<p>i.e. <code>ty_data</code> and <code>ty_flags</code>?</p>",
        "id": 213977018,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226658
    },
    {
        "content": "<p>so we'd have like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">intern_ty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"nc\">TyData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flags</span>: <span class=\"nc\">TyFlags</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">InternedType</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">ty_data</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">Self</span>::<span class=\"n\">InternedType</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">TyData</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">ty_flags</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">Self</span>::<span class=\"n\">InternedType</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TyFlags</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213977036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226670
    },
    {
        "content": "<p>and I guess we can do that</p>",
        "id": 213977042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226673
    },
    {
        "content": "<p>I guess when I started describing it, it seemed like it was pushing a bit more \"work\" onto the interner that could be de-duplicated</p>",
        "id": 213977109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226716
    },
    {
        "content": "<p>(the alternative being to make <code>TyData</code> a struct that carries a <code>TyKind</code> and a <code>TyFlags</code>)</p>",
        "id": 213977186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226761
    },
    {
        "content": "<p>yes</p>",
        "id": 213977245,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226776
    },
    {
        "content": "<p>like <code>TyS</code> in rustc</p>",
        "id": 213977253,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226780
    },
    {
        "content": "<p>it does seem a bit silly to write <code>match ty.data(interner).kind</code> in chalk, though I guess we could easily add a helper like <code>match ty.kind(interner) {</code> to make it equivalent to today</p>",
        "id": 213977299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226811
    },
    {
        "content": "<p>anyway I guess it might sidestep the big renaming debate :)</p>",
        "id": 213977337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226836
    },
    {
        "content": "<p>what does seem important is that the code to compute the flags needs to live in chalk, so it can be shared</p>",
        "id": 213977375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226862
    },
    {
        "content": "<p>Yes</p>",
        "id": 213977447,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226886
    },
    {
        "content": "<p>I am more leaning towards renaming Chalk's <code>TyData</code> to<code>TyKind</code></p>",
        "id": 213977527,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226939
    },
    {
        "content": "<p>so, apart from that, I think the other things to be done are reconciling the folder/visitor traits, and figuring out how to manage the different in rustc's types (with all its many variants) and chalk's types (with...not so many variants)</p>",
        "id": 213977544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226950
    },
    {
        "content": "<p>adding a <code>TyData</code> struct with data + flags</p>",
        "id": 213977549,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603226953
    },
    {
        "content": "<p>s/TyKind/TyData/?</p>",
        "id": 213977578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603226967
    },
    {
        "content": "<p>yes</p>",
        "id": 213977695,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227013
    },
    {
        "content": "<blockquote>\n<p>figuring out how to manage the different in rustc's types (with all its many variants) and chalk's types (with...not so many variants)</p>\n</blockquote>",
        "id": 213977719,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227035
    },
    {
        "content": "<p>So</p>",
        "id": 213977722,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227038
    },
    {
        "content": "<p>let's discuss this bit</p>",
        "id": 213977733,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227041
    },
    {
        "content": "<p>So, in general, I think I prefer Chalk's <code>Apply</code></p>",
        "id": 213977776,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227063
    },
    {
        "content": "<p><em>but</em></p>",
        "id": 213977785,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-20/near/213977527\">said</a>:</p>\n<blockquote>\n<p>I am more leaning towards renaming Chalk's <code>TyData</code> to<code>TyKind</code></p>\n</blockquote>\n<p>I think I agree, I see some value in saying \"the interner just interns a struct\" versus having it have to intern multiple values</p>",
        "id": 213977817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227082
    },
    {
        "content": "<p>it does make it slightly more dificult to \"unpack\" things, like if you know you have an <code>Array</code> type, and you want the type and const</p>",
        "id": 213977865,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227108
    },
    {
        "content": "<p>the chalk setup basically optimizes for \"generic\" code that doesn't care too much about the details of the types it's working with</p>",
        "id": 213977972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227151
    },
    {
        "content": "<p>right</p>",
        "id": 213977979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227158
    },
    {
        "content": "<p>I think this was the  right call for <em>chalk</em> but I have been wondering if it's the right call for <em>rustc</em></p>",
        "id": 213977984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227161
    },
    {
        "content": "<p>and I feel like that makes things cleaner in most places</p>",
        "id": 213977991,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227168
    },
    {
        "content": "<p>and even within <em>chalk</em>, some of the logic for generating program clauses might be improved by being more specific ? not sure.</p>",
        "id": 213978010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227181
    },
    {
        "content": "<p>The problem is, I don't have near enough experience on the rustc side to make a good judgement</p>",
        "id": 213978025,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-20/near/213978010\">said</a>:</p>\n<blockquote>\n<p>and even within <em>chalk</em>, some of the logic for generating program clauses might be improved by being more specific ? not sure.</p>\n</blockquote>\n<p>also possibly true</p>",
        "id": 213978050,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227210
    },
    {
        "content": "<p>yeah, I had thought about trying to actually generate some sort of data</p>",
        "id": 213978060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227217
    },
    {
        "content": "<p>but it was too annoying :)</p>",
        "id": 213978068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227220
    },
    {
        "content": "<p>e.g., trying to find out \"which variants are often grouped together into one match arm\"</p>",
        "id": 213978081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227229
    },
    {
        "content": "<p>there's quite a few places we first match on the type then immediately also on <code>name</code> for <code>Apply</code></p>",
        "id": 213978084,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227232
    },
    {
        "content": "<p>One thing that I <em>definitely</em> think we should move over from Chalk to rustc is <code>Scalar</code></p>",
        "id": 213978160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227265
    },
    {
        "content": "<p>heh funny I was thinking it would be good to start with that too</p>",
        "id": 213978170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227279
    },
    {
        "content": "<p>basically no reason to do it all or nothing</p>",
        "id": 213978178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227285
    },
    {
        "content": "<p>we can try to combine things a bit at a time and see how it feels</p>",
        "id": 213978191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227294
    },
    {
        "content": "<p>If nothing else, it's a good start</p>",
        "id": 213978232,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227312
    },
    {
        "content": "<p>And I'm down to move slowly and steadily rather than not at all</p>",
        "id": 213978258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227329
    },
    {
        "content": "<p>there <em>are</em> a lot of types in <a href=\"http://rust-lang.github.io/chalk/chalk_ir/enum.TypeName.html\"><code>TypeName</code></a> :)</p>",
        "id": 213978266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227335
    },
    {
        "content": "<p>It's <em>almost</em> as big as <code>TyKind</code></p>",
        "id": 213978283,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227351
    },
    {
        "content": "<p>;)</p>",
        "id": 213978291,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227355
    },
    {
        "content": "<p>although I'm not 100% sure that <code>Error</code> belongs there</p>",
        "id": 213978297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227361
    },
    {
        "content": "<p>yeah, I mean, that's why it's there, most types are \"kind of the same\"</p>",
        "id": 213978361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227376
    },
    {
        "content": "<p>yeah, exactly</p>",
        "id": 213978376,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227388
    },
    {
        "content": "<p>The other point of discussion is that I'm pretty sure Chalk's version will have a higher perf overhead</p>",
        "id": 213978399,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227408
    },
    {
        "content": "<p>because of the subst interning</p>",
        "id": 213978410,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227413
    },
    {
        "content": "<p>yeah and this may be the decisive factor</p>",
        "id": 213978438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227428
    },
    {
        "content": "<p>annoying but true :)</p>",
        "id": 213978442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227431
    },
    {
        "content": "<p>I think in general, while I do <em>like</em> Chalk's generic over substitution, I think rustc's approach is more pragmatic</p>",
        "id": 213978472,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227456
    },
    {
        "content": "<p>also I guess the need to sometimes match and then match again</p>",
        "id": 213978481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227460
    },
    {
        "content": "<p>I'm not sure who else that is Chalk-heavy is around</p>",
        "id": 213978574,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227502
    },
    {
        "content": "<p>well it's certainly easier to refactor chalk to match rustc than vice versa</p>",
        "id": 213978584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227507
    },
    {
        "content": "<p>I'd like some more opinions here</p>",
        "id": 213978585,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227509
    },
    {
        "content": "<p>Well, if <code>Scalar</code> is an enum we can use <code>match ty.kind() { ty::Scalar(ty::Scalar::Uint(..)) =&gt; .. }</code></p>",
        "id": 213978602,
        "sender_full_name": "lcnr",
        "timestamp": 1603227518
    },
    {
        "content": "<p>yeah, <code>Scalar</code> is an enum</p>",
        "id": 213978623,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227533
    },
    {
        "content": "<p>yeah it's just that the generated code will have more branches</p>",
        "id": 213978655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227557
    },
    {
        "content": "<p>this may or may not prove to be significant</p>",
        "id": 213978683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227564
    },
    {
        "content": "<p>for scalars I expect it would be fine</p>",
        "id": 213978705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227575
    },
    {
        "content": "<p>I mean, maybe? It might just be optimized out</p>",
        "id": 213978732,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227590
    },
    {
        "content": "<p>Okay, we're at the hour</p>",
        "id": 213978808,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227616
    },
    {
        "content": "<p>So, anybody want to add <code>Scalar</code> in rustc?</p>",
        "id": 213978834,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227633
    },
    {
        "content": "<p>Is this MCP territory?</p>",
        "id": 213978841,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227638
    },
    {
        "content": "<p>can't hurt, but I'd probably just second it right away</p>",
        "id": 213978866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227657
    },
    {
        "content": "<p>I don't know that it really <em>needs</em> an MCP</p>",
        "id": 213978883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227664
    },
    {
        "content": "<p>I feel like we should probably close <span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span>'s PR on <code>TyKind</code> rename</p>",
        "id": 213978888,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227667
    },
    {
        "content": "<p>yeah, probably</p>",
        "id": 213978903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227673
    },
    {
        "content": "<p>It's not mine btw</p>",
        "id": 213978908,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1603227675
    },
    {
        "content": "<p>sorry <span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> :)</p>",
        "id": 213978914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227678
    },
    {
        "content": "<p>oh</p>",
        "id": 213978917,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227679
    },
    {
        "content": "<p>a good next step would be introducing flags into chalk</p>",
        "id": 213978955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"323979\">@Bram van den Heuvel</span></p>",
        "id": 213978957,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227703
    },
    {
        "content": "<p>No worries</p>",
        "id": 213978959,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1603227704
    },
    {
        "content": "<p>Sorry :(</p>",
        "id": 213978962,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227706
    },
    {
        "content": "<p>Yes, so next steps:</p>",
        "id": 213978972,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227717
    },
    {
        "content": "<p>Add <code>Scalar</code> in rustc</p>",
        "id": 213979017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227723
    },
    {
        "content": "<p>Add <code>TyFlags</code> and <code>TyData</code> to Chalk</p>",
        "id": 213979033,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227734
    },
    {
        "content": "<p>And I'd like to see someone at least experiment with removing <code>TypeName</code> and merging into <code>TyKind</code>/<code>TyData</code></p>",
        "id": 213979074,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227768
    },
    {
        "content": "<p>I updated <a href=\"https://github.com/rust-lang/wg-traits/issues/16\">https://github.com/rust-lang/wg-traits/issues/16</a> and filed <a href=\"https://github.com/rust-lang/chalk/issues/627\">chalk#627</a></p>",
        "id": 213979075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-20/near/213979074\">said</a>:</p>\n<blockquote>\n<p>And I'd like to see someone at least experiment with removing <code>TypeName</code> and merging into <code>TyKind</code>/<code>TyData</code></p>\n</blockquote>\n<p>added that too</p>",
        "id": 213979121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227809
    },
    {
        "content": "<p>Alright, anyways, changes all for coming :)</p>",
        "id": 213979125,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227811
    },
    {
        "content": "<p>yeah, I  think i'm convinced</p>",
        "id": 213979133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227814
    },
    {
        "content": "<p>If anyone reads this and has opinions of <code>TypeName</code> removal, please share &lt;3</p>",
        "id": 213979164,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227838
    },
    {
        "content": "<p>also I feel like I'd like to push the chalk-rustc-type library integration over the finish line and, in part, mimicking rustc does feel like the path of least resistance :)</p>",
        "id": 213979168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603227841
    },
    {
        "content": "<p>I think we can also start moving some of rustc's types into it's own crate there</p>",
        "id": 213979252,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227880
    },
    {
        "content": "<p>even if it's not in 100% congruence with Chalk</p>",
        "id": 213979276,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227892
    },
    {
        "content": "<p>Just moving things that will eventually be shared</p>",
        "id": 213979305,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-20/near/213979164\">said</a>:</p>\n<blockquote>\n<p>If anyone reads this and has opinions of <code>TypeName</code> removal, please share <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>\n</blockquote>\n<p>Removing it sounds like a good idea to me</p>",
        "id": 213979307,
        "sender_full_name": "detrumi",
        "timestamp": 1603227913
    },
    {
        "content": "<p>Just getting it <em>out</em> of <code>rustc_middle</code></p>",
        "id": 213979323,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603227933
    },
    {
        "content": "<p>my internet just died :/</p>\n<p>how does scalar deal with inference vars</p>",
        "id": 213979432,
        "sender_full_name": "lcnr",
        "timestamp": 1603227984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-20/near/213979432\">said</a>:</p>\n<blockquote>\n<p>my internet just died :/</p>\n<p>how does scalar deal with inference vars</p>\n</blockquote>\n<p>what do you mean</p>",
        "id": 213979470,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603228011
    },
    {
        "content": "<p>see <a href=\"http://rust-lang.github.io/chalk/chalk_ir/enum.TypeName.html\">http://rust-lang.github.io/chalk/chalk_ir/enum.TypeName.html</a></p>",
        "id": 213979548,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603228053
    },
    {
        "content": "<p>nothing, I was confused for a second. It's <code>ty::Infer(IntVar(...))</code> not <code>ty::Int(InferVar(..))</code></p>",
        "id": 213979551,
        "sender_full_name": "lcnr",
        "timestamp": 1603228054
    },
    {
        "content": "<p>and <a href=\"http://rust-lang.github.io/chalk/chalk_ir/enum.Scalar.html\">http://rust-lang.github.io/chalk/chalk_ir/enum.Scalar.html</a></p>",
        "id": 213979568,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603228062
    },
    {
        "content": "<p>oh, yes</p>",
        "id": 213979575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603228067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-10-20/near/213979164\">said</a>:</p>\n<blockquote>\n<p>If anyone reads this and has opinions of <code>TypeName</code> removal, please share &lt;3</p>\n</blockquote>\n<p>I'm on board with removing it too – it's easier to change chalk than rustc, plus it can be a bit cumbersome to get what you want from the nested structure</p>",
        "id": 213984597,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1603231023
    }
]