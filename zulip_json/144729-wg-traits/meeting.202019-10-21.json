[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> -- </p>\n<p>So do we want to have a design meeting today? It hasn't been long since our last one, and I was traveling much of that time, so I didn't have time to \"prepare\" anything. However, here are some things I think we could talk about:</p>\n<ul>\n<li>rustc: lazy normalization for associated constants. I've been toying with a scheme and what that might mean.</li>\n<li>rustc: upcasting. We could talk over the work <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> has been doing and (perhaps) what else needs to be done to round out that effort.</li>\n<li>chalk: specialization. Trying to get synched back up on the work we were doing here (sorry <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span>!) and figure out concrete steps.</li>\n<li>region constraints in chalk / polonius: I have thoughts about how these should work, albeit mildly out of cache</li>\n<li>other topics? I'm open to proposals.</li>\n</ul>\n<p>I'm going to go for a bit but I'll see what people think when I get back =)</p>",
        "id": 178672663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571675506
    },
    {
        "content": "<p>Sounds fair</p>",
        "id": 178673289,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571675885
    },
    {
        "content": "<p>I can make tonight for once!</p>",
        "id": 178673302,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571675894
    },
    {
        "content": "<p>I will probably be in another meeting today at 2 pm, but yes very excited to start on specialization again!</p>",
        "id": 178673692,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1571676162
    },
    {
        "content": "<p>Some other possible topics I thought of later:</p>\n<ul>\n<li>talking over the strategy on <code>dyn Trait</code> and chalk integration (cc <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span>)</li>\n<li>the soundness hole around coherence and <code>dyn Trait</code> values (cc <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span>)</li>\n</ul>",
        "id": 178678770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571679580
    },
    {
        "content": "<p>or maybe:</p>\n<ul>\n<li>meta-meeting to discuss planning and chart out some topics for the next few meetings :)</li>\n</ul>",
        "id": 178678858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571679617
    },
    {
        "content": "<p>OK, <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> hello =)</p>",
        "id": 178681356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681052
    },
    {
        "content": "<p>So as I wrote above, I'm not 100% sure what to talk about today, but open to suggestions. I mostly just want us to keep talking more than anything. =)</p>",
        "id": 178681500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681150
    },
    {
        "content": "<p>I guess it depends a bit on who's around</p>",
        "id": 178681555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681164
    },
    {
        "content": "<p>I think I would probably narrow down to 2 things that seem best to me:</p>\n<ul>\n<li>discussing the strategy around <code>dyn Trait</code> integration into chalk that <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> is working on (I see they're here)</li>\n<li>talking about lazy norm and assoc constants a bit</li>\n</ul>\n<p>All the topics above seem imp't, but I think I'd rather do the \"planning\" part a bit separately.</p>",
        "id": 178681720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681286
    },
    {
        "content": "<p>OK, let's just start in on the first one a bit</p>",
        "id": 178681835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681358
    },
    {
        "content": "<p>The basic problem is that Chalk doesn't understand anything about <code>dyn Trait</code> -- or didn't</p>",
        "id": 178681888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> added a new sort of type for that (<a href=\"https://github.com/rust-lang/chalk/blob/8abd14e1f0bb65dc95fdbbb87c12a95cc0063da1/chalk-ir/src/lib.rs#L238-L245\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/8abd14e1f0bb65dc95fdbbb87c12a95cc0063da1/chalk-ir/src/lib.rs#L238-L245\">link</a>)</p>",
        "id": 178682020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681445
    },
    {
        "content": "<p>It looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"sd\">/// A &quot;dyn&quot; type is a trait object type created via the &quot;dyn Trait&quot; syntax.</span>\n<span class=\"w\">    </span><span class=\"sd\">/// In the chalk parser, the traits that the object represents is parsed as</span>\n<span class=\"w\">    </span><span class=\"sd\">/// a QuantifiedInlineBound, and is then changed to a list of where clauses</span>\n<span class=\"w\">    </span><span class=\"sd\">/// during lowering.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// See the `Opaque` variant for a discussion about the use of</span>\n<span class=\"w\">    </span><span class=\"sd\">/// binders here.</span>\n<span class=\"w\">    </span><span class=\"n\">Dyn</span><span class=\"p\">(</span><span class=\"n\">Binders</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">QuantifiedWhereClause</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178682035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681457
    },
    {
        "content": "<p>(I'm going to skip past <code>impl trait</code> for a section, but we can loop back to that)</p>",
        "id": 178682053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681471
    },
    {
        "content": "<p>This type definition is sort of interesting I think because it looks very different from other types; it embeds \"where clauses\"</p>",
        "id": 178682099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681500
    },
    {
        "content": "<p>this comes back to the idea of <code>dyn Trait</code> being a kind of \"existential type\" -- i.e., shorthand for a type like <code>exists&lt;T&gt; { T: Trait }</code>. i.e., \"some type that implements <code>Trait</code>\"</p>",
        "id": 178682207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681553
    },
    {
        "content": "<p>(make sense so far?)</p>",
        "id": 178682225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681571
    },
    {
        "content": "<p>I thought that was a bit odd, but guess it makes sense if you do <code>Self: Trait</code></p>",
        "id": 178682284,
        "sender_full_name": "tmandry",
        "timestamp": 1571681604
    },
    {
        "content": "<p>(my internet is flaking so sorry if this comes out of order)</p>",
        "id": 178682389,
        "sender_full_name": "tmandry",
        "timestamp": 1571681657
    },
    {
        "content": "<p>Not sure about the <code>Self</code>, but the <code>exists</code> makes sense</p>",
        "id": 178682479,
        "sender_full_name": "detrumi",
        "timestamp": 1571681722
    },
    {
        "content": "<p>(er, sorry! afk for 2 minutes)</p>",
        "id": 178682491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681734
    },
    {
        "content": "<p>yeah nevermind, the <code>Self</code> part doesn't seem right</p>",
        "id": 178682569,
        "sender_full_name": "tmandry",
        "timestamp": 1571681778
    },
    {
        "content": "<p>I sent that before niko's better explanation ;)</p>",
        "id": 178682599,
        "sender_full_name": "tmandry",
        "timestamp": 1571681800
    },
    {
        "content": "<p>ok, back</p>",
        "id": 178682863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681952
    },
    {
        "content": "<p>I'm not sure what you meant by <code>Self</code> but</p>",
        "id": 178682884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681965
    },
    {
        "content": "<p>I guess that worked out :)</p>",
        "id": 178682893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681970
    },
    {
        "content": "<p>in any case, I think the binders etc there are interesting</p>",
        "id": 178682899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681973
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">Binders</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">QuantifiedWhereClause</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>kind of expands to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">Binders</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Binders</span><span class=\"o\">&lt;</span><span class=\"n\">WhereClause</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178682940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571681998
    },
    {
        "content": "<p>the notation <code>exists&lt;T&gt; { T: Trait }</code> -- that <code>exists</code> is the first round of <code>Binders</code></p>",
        "id": 178683015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682021
    },
    {
        "content": "<p>the second round is to allow for things like</p>",
        "id": 178683038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682039
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178683070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682059
    },
    {
        "content": "<p>which would correspond to a type like</p>\n<div class=\"codehilite\"><pre><span></span>exists&lt;T&gt; { forall&lt;&#39;a&gt; { T: FnOnce&lt;(&amp;&#39;a u8,)&gt; } }\nexists&lt;T&gt; { forall&lt;&#39;a&gt; { T: Trait&lt;&#39;a&gt; } }\n</pre></div>",
        "id": 178683122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682089
    },
    {
        "content": "<p>you can see now where the \"inner binders\" comes from, maybe</p>",
        "id": 178683142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682101
    },
    {
        "content": "<p>ok, any questions on that? (I was pausing, but didn't say so)</p>",
        "id": 178683300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682208
    },
    {
        "content": "<p>ok so besides the type def'n</p>",
        "id": 178683314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682223
    },
    {
        "content": "<p>how do we integrate these \"dyn Trait\" types into trait solving?</p>",
        "id": 178683319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682231
    },
    {
        "content": "<p>there is an imp't caveat here, which is that we're wrestling with these rules in rustc proper</p>",
        "id": 178683387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682257
    },
    {
        "content": "<p>but I'm going to give the simple version to start</p>",
        "id": 178683424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682293
    },
    {
        "content": "<p>the basic rule that we want is that <code>dyn Foo: Foo</code> for any <code>Foo</code></p>",
        "id": 178683449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682313
    },
    {
        "content": "<p>Hmm, that reminds me, solving for impl Trait is different from dyn Trait</p>",
        "id": 178683475,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1571682332
    },
    {
        "content": "<p>this is an implication of a trait being \"dyn safe\" (which we don't presently choose to model)</p>",
        "id": 178683478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682334
    },
    {
        "content": "<blockquote>\n<p>Hmm, that reminds me, solving for impl Trait is different from dyn Trait</p>\n</blockquote>\n<p>hmm, I'm not 100% sure what yo mean but let's come back to that</p>",
        "id": 178683504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682356
    },
    {
        "content": "<blockquote>\n<p>ok, any questions on that? (I was pausing, but didn't say so)</p>\n</blockquote>\n<p>it's been awhile since I worked in chalk, but I thought <code>Binders</code> only corresponded to <code>forall</code> quantifiers</p>",
        "id": 178683514,
        "sender_full_name": "tmandry",
        "timestamp": 1571682362
    },
    {
        "content": "<p>no, Binders correspond to any sort of quantifier; whether it is forall or exists comes from the surrounding context</p>",
        "id": 178683568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682377
    },
    {
        "content": "<p>Maybe only one of them was used initially in Chalk?</p>",
        "id": 178683596,
        "sender_full_name": "detrumi",
        "timestamp": 1571682407
    },
    {
        "content": "<p>okay, I find the docs confusing in that case</p>",
        "id": 178683604,
        "sender_full_name": "tmandry",
        "timestamp": 1571682411
    },
    {
        "content": "<blockquote>\n<p>Maybe only one of them was used initially in Chalk?</p>\n</blockquote>\n<p>nope</p>",
        "id": 178683610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682421
    },
    {
        "content": "<p>but forall is far more common</p>",
        "id": 178683624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682429
    },
    {
        "content": "<p>see e.g. <a href=\"https://github.com/rust-lang/chalk/blob/8abd14e1f0bb65dc95fdbbb87c12a95cc0063da1/chalk-ir/src/lib.rs#L958\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/8abd14e1f0bb65dc95fdbbb87c12a95cc0063da1/chalk-ir/src/lib.rs#L958\">this part of the <code>Goal</code> definition</a></p>",
        "id": 178683650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682440
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">   </span><span class=\"n\">Quantified</span><span class=\"p\">(</span><span class=\"n\">QuantifierKind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Binders</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178683663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682452
    },
    {
        "content": "<p>that encodes both <code>forall&lt;T&gt; { .. }</code> and <code>exists&lt;T&gt; { ... }</code> goals</p>",
        "id": 178683676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682462
    },
    {
        "content": "<p>I think the best way to thikn about <code>Binders</code> is as the <code>&lt;T&gt; { .. }</code> part</p>",
        "id": 178683681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682468
    },
    {
        "content": "<p>without the <code>forall</code> or <code>exists</code></p>",
        "id": 178683692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682476
    },
    {
        "content": "<p>for completeness, <a href=\"https://github.com/rust-lang/chalk/blob/8abd14e1f0bb65dc95fdbbb87c12a95cc0063da1/chalk-ir/src/lib.rs#L1020-L1023\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/8abd14e1f0bb65dc95fdbbb87c12a95cc0063da1/chalk-ir/src/lib.rs#L1020-L1023\"><code>QuantifiedKind</code></a> is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">QuantifierKind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ForAll</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Exists</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178683760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682506
    },
    {
        "content": "<blockquote>\n<p>okay, I find the docs confusing in that case</p>\n</blockquote>\n<p>that...seems quite likely</p>",
        "id": 178683785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682526
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/chalk/chalk_ir/struct.Binders.html\" target=\"_blank\" title=\"https://rust-lang.github.io/chalk/chalk_ir/struct.Binders.html\">docs for Binders</a></p>",
        "id": 178683796,
        "sender_full_name": "tmandry",
        "timestamp": 1571682538
    },
    {
        "content": "<p>Hmm, why not something like <code>Quantified(QuantifierKind, Binders, Box&lt;Goal&gt;)</code> then?</p>",
        "id": 178683815,
        "sender_full_name": "detrumi",
        "timestamp": 1571682555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> the <code>Binders&lt;T&gt;</code> encloses the value that is bound</p>",
        "id": 178683827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682569
    },
    {
        "content": "<p>this is useful because you often want to have operations like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">instantiate</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Binders</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178683850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682588
    },
    {
        "content": "<p>that will take all the bound variables and replace them with inference variables, returning the <code>T</code> inside</p>",
        "id": 178683863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682601
    },
    {
        "content": "<p>it is also useful because it's kind of a bug to access the <code>T</code> inside without considering the new binders</p>",
        "id": 178683928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682625
    },
    {
        "content": "<p>so it makes sense for it to be \"owned\"</p>",
        "id": 178683939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682632
    },
    {
        "content": "<p>rustc is actually stricter on this point than chalk is, which is something I think we should improve</p>",
        "id": 178683947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682641
    },
    {
        "content": "<p>well, I can't remember, actually</p>",
        "id": 178683951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682645
    },
    {
        "content": "<p>at some point in rustc I had a branch that made the \"value\" of a <code>Binders</code> private</p>",
        "id": 178683966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682654
    },
    {
        "content": "<p>so that all accesses to it had to go through some suitable API</p>",
        "id": 178683976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682661
    },
    {
        "content": "<p>which made for easier auditing</p>",
        "id": 178683982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682664
    },
    {
        "content": "<p>should prob do the same with chalk eventually</p>",
        "id": 178683993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682671
    },
    {
        "content": "<p>ok, move on?</p>",
        "id": 178684048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682713
    },
    {
        "content": "<blockquote>\n<p>at some point in rustc I had a branch that made the \"value\" of a <code>Binders</code> private</p>\n</blockquote>\n<p>I remember doing that refactor in rustc, I believe it's still the case =)</p>",
        "id": 178684055,
        "sender_full_name": "tmandry",
        "timestamp": 1571682718
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://rust-lang.github.io/chalk/chalk_ir/struct.Binders.html\" target=\"_blank\" title=\"https://rust-lang.github.io/chalk/chalk_ir/struct.Binders.html\">docs for Binders</a></p>\n</blockquote>\n<p>\"Indicates that the value is universally quantified over N parameters of the given kinds, where N == self.binders.len(). A variable with depth i &lt; N refers to the value at self.binders[i]. Variables with depth &gt;= N are free.\"</p>",
        "id": 178684099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682725
    },
    {
        "content": "<p>yeah, that's just wrong</p>",
        "id": 178684105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682729
    },
    {
        "content": "<p>heh, awesome</p>",
        "id": 178684114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682738
    },
    {
        "content": "<p>yeah I think I did a branch for it and then it bitrotted</p>",
        "id": 178684121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682746
    },
    {
        "content": "<p>and then I made you do it :P</p>",
        "id": 178684123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682748
    },
    {
        "content": "<blockquote>\n<p>the basic rule that we want is that <code>dyn Foo: Foo</code> for any <code>Foo</code></p>\n</blockquote>\n<p>so this rule</p>",
        "id": 178684195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682785
    },
    {
        "content": "<p>the question is, how do we handle this?</p>",
        "id": 178684202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682790
    },
    {
        "content": "<blockquote>\n<p>at some point in rustc I had a branch that made the \"value\" of a <code>Binders</code> private</p>\n</blockquote>\n<p>good thing you are restricting that for chalk now, otherwise i really would've just used that field to do computation upon</p>",
        "id": 178684212,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1571682798
    },
    {
        "content": "<p>in \"old school chalk\", we had a premise that we lowered all the impls/traits to a fixed set of program clauses</p>",
        "id": 178684218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682802
    },
    {
        "content": "<p>but this doesn't work well for <code>dyn</code> and <code>impl</code> trait types</p>",
        "id": 178684251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682831
    },
    {
        "content": "<p>because the set of rules is kind of open ended and huge</p>",
        "id": 178684255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682833
    },
    {
        "content": "<p>especially once you consider things like <code>dyn Write + Send</code></p>",
        "id": 178684305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682846
    },
    {
        "content": "<p>there we want two rules:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">)</span>: <span class=\"nc\">Write</span><span class=\"w\"></span>\n<span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">)</span>: <span class=\"nb\">Send</span>\n</pre></div>",
        "id": 178684324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682862
    },
    {
        "content": "<p>(note that chalk rules work with equality, not subtyping, so you can't just say <code>dyn Write: Write</code> -- and anyway <code>dyn (Write + Send)</code> is not a subtype of <code>dyn Write</code> in Rust)</p>",
        "id": 178684353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682892
    },
    {
        "content": "<p>(which touches on the upcasting work that <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> has been pursuing :)</p>",
        "id": 178684372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682905
    },
    {
        "content": "<p>however, the good thing is that chalk has been moving towards this more \"on demand\" model anyway</p>",
        "id": 178684429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682958
    },
    {
        "content": "<p>which fits better with rust-analyzer, rustc, incremental, etc</p>",
        "id": 178684457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682963
    },
    {
        "content": "<p>so basically there is this callback for the core engine where it says: </p>\n<p>I have to prove the goal G, what are the relevant program clauses?</p>",
        "id": 178684488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> will remember this, as they did a lot of the core refactoring work here :)</p>",
        "id": 178684499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571682994
    },
    {
        "content": "<p>i'm a bit lost here, does a <code>QuantifiedWhereClause</code> have a corresponding <code>Goal</code>  definition associated with it?</p>",
        "id": 178684547,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1571683044
    },
    {
        "content": "<p>a \"where clause\" corresponds to a Rust where clause -- it is neither a goal nor a \"clause\"</p>",
        "id": 178684598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Speaking off which, how should we proceed with codegen?</p>",
        "id": 178684599,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571683079
    },
    {
        "content": "<blockquote>\n<p>a \"where clause\" corresponds to a Rust where clause -- it is neither a goal nor a \"clause\"</p>\n</blockquote>\n<p>let me glossary those:</p>",
        "id": 178684670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683097
    },
    {
        "content": "<ul>\n<li>goal -- something we are trying to prove</li>\n<li>\"clause\" or \"program clause\" -- something we are assuming is true</li>\n<li>where-clause (confusing!) -- bit of Rust syntax that sometimes has to be proven (and hence becomes a goal) and sometimes is assumed to be true (and hence a clause)</li>\n</ul>",
        "id": 178684719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683126
    },
    {
        "content": "<p>there is a collision of terminology here, which I hadn't fully realized, in that goal/clause come from prolog solvers</p>",
        "id": 178684740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683140
    },
    {
        "content": "<p>and 'where clause' is just some thing I invented for <a href=\"https://rust-lang.github.io/rfcs/0135-where.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rfcs/0135-where.html\">RFC 135</a></p>",
        "id": 178684775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683176
    },
    {
        "content": "<p><del>whichever one it was that introducd where clauses ;)</del> found it :)</p>",
        "id": 178684798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683196
    },
    {
        "content": "<p>in particular though where clauses are a subset of goals etc</p>",
        "id": 178684931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683272
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> -- let's discuss that later)</p>",
        "id": 178684935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683278
    },
    {
        "content": "<p>Okay</p>",
        "id": 178684950,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571683287
    },
    {
        "content": "<blockquote>\n<p>i'm a bit lost here, does a <code>QuantifiedWhereClause</code> have a corresponding <code>Goal</code>  definition associated with it?</p>\n</blockquote>\n<p>that is, you can convert a WC to a goal</p>",
        "id": 178684957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683292
    },
    {
        "content": "<p>sorry, I feel like I'm rambling, not sure if I'm really answering your question <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span></p>",
        "id": 178684986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683312
    },
    {
        "content": "<p>(bikeshed: we could start calling them \"where bounds\" -- as opposed to \"inline bounds\"? but I don't want to derail further)</p>",
        "id": 178685050,
        "sender_full_name": "tmandry",
        "timestamp": 1571683329
    },
    {
        "content": "<p>i'm just wondering if a where-clause is a goal -- something that we want to prove</p>",
        "id": 178685100,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1571683365
    },
    {
        "content": "<blockquote>\n<p>(bikeshed: we could start calling them \"where bounds\" -- as opposed to \"inline bounds\"? but I don't want to derail further)</p>\n</blockquote>\n<p>yeah, maybe</p>",
        "id": 178685111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683372
    },
    {
        "content": "<p>I usually say \"bound\" to mean the thing on the right-hand side of a <code>:</code></p>",
        "id": 178685129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683383
    },
    {
        "content": "<p>e.g., the <code>Debug</code> in <code>T: Foo</code> -- it's kind of a where-clause without the \"self\" part</p>",
        "id": 178685142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683392
    },
    {
        "content": "<blockquote>\n<p>i'm just wondering if a where-clause is a goal -- something that we want to prove</p>\n</blockquote>\n<p>ok -- well, the answer is \"sometimes\"</p>",
        "id": 178685152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683401
    },
    {
        "content": "<p>e.g., </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Send</span> <span class=\"p\">{</span><span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178685159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683410
    },
    {
        "content": "<p>when you call <code>foo</code>, you have to prove that <code>T: Send</code> for whichever value of <code>T</code> you chose (so it's a goal)</p>",
        "id": 178685177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683420
    },
    {
        "content": "<p>but you type-check the <em>body</em> of <code>Foo</code>, you get to assume <code>T: Foo</code> for some placeholder <code>T</code> (so it's a \"clause\")</p>",
        "id": 178685186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683431
    },
    {
        "content": "<blockquote>\n<p>that is, you can convert a WC to a goal</p>\n</blockquote>\n<p>Isn't a WC context sensitive? Because it's just part of a type</p>",
        "id": 178685258,
        "sender_full_name": "detrumi",
        "timestamp": 1571683457
    },
    {
        "content": "<p>in the case of <code>dyn Send</code>, the same is true -- when you <em>create</em> an instance of a <code>dyn Send</code> type, you have to prove that <code>T: Send</code></p>",
        "id": 178685267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683464
    },
    {
        "content": "<p>(but that sort of happens outside the purview of chalk)</p>",
        "id": 178685299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683482
    },
    {
        "content": "<p>but when we are trying to prove <code>dyn Send: Send</code>, we get to assume things</p>",
        "id": 178685316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683497
    },
    {
        "content": "<p>anyway let's talk through that exact mechanism a bit? maybe it becomes clearer?</p>",
        "id": 178685343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683511
    },
    {
        "content": "<p>I'm trying to find the dang callback right now</p>",
        "id": 178685410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683562
    },
    {
        "content": "<p>ok well there is this function:</p>",
        "id": 178685501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683604
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">program_clauses_for_goal</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;db</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">db</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;db</span><span class=\"w\"> </span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">RustIrDatabase</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">environment</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">Environment</span><span class=\"o\">&lt;</span><span class=\"n\">ChalkIr</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">goal</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">DomainGoal</span><span class=\"o\">&lt;</span><span class=\"n\">ChalkIr</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">ProgramClause</span><span class=\"o\">&lt;</span><span class=\"n\">ChalkIr</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178685506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683610
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/8abd14e1f0bb65dc95fdbbb87c12a95cc0063da1/chalk-solve/src/clauses.rs#L104-L113\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/8abd14e1f0bb65dc95fdbbb87c12a95cc0063da1/chalk-solve/src/clauses.rs#L104-L113\">from clauses.rs</a></p>",
        "id": 178685535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683633
    },
    {
        "content": "<p>so what's happening here is that the solver is saying \"I have to prove <code>goal</code>, what are the 'program clauses' I might use to do it\"</p>",
        "id": 178685563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683651
    },
    {
        "content": "<p>a program clause is just a clause that's globally true and widely know; perhaps a meaningless piece of jargon we should remove</p>",
        "id": 178685584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683668
    },
    {
        "content": "<p>( it comes from prolog -- i.e., it's the clauses you wrote in your prolog program. )</p>",
        "id": 178685643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571683687
    },
    {
        "content": "<p>Huh, didn't know it was that simple</p>",
        "id": 178685831,
        "sender_full_name": "detrumi",
        "timestamp": 1571683835
    },
    {
        "content": "<p>anyway so the point is, suppose we are trying to prove something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"nc\">XXX</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178686194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684055
    },
    {
        "content": "<p>or rather</p>",
        "id": 178686211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684070
    },
    {
        "content": "<p>well, yes</p>",
        "id": 178686217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684073
    },
    {
        "content": "<p>we are going to synthesize rules of the form <code>dyn Foo: Foo</code></p>",
        "id": 178686230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684080
    },
    {
        "content": "<p>as possible clauses</p>",
        "id": 178686248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684094
    },
    {
        "content": "<p>we are actually rather inefficient about this</p>",
        "id": 178686257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684099
    },
    {
        "content": "<p>this is because we don't consider what the <code>XXX</code> is</p>",
        "id": 178686271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684113
    },
    {
        "content": "<p>we just say \"ah, you are trying to prove something of the form <code>dyn XXX: YYY</code>? I will make some rules like <code>dyn XXX: XXX</code> -- if it so happens that <code>XXX = YYY</code>, that would be useful to you; otherwise, it's not\"</p>",
        "id": 178686308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684146
    },
    {
        "content": "<p>this is ok because the callback is basically allowed to return \"extra\" rules that don't really apply to the goal at hand</p>",
        "id": 178686321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684161
    },
    {
        "content": "<p>it should perhaps be improved at some point, but not imp't</p>",
        "id": 178686374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684175
    },
    {
        "content": "<p>so where does that happen, you ask?</p>",
        "id": 178686399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684196
    },
    {
        "content": "<p>in the function <a href=\"https://github.com/rust-lang/chalk/blob/8abd14e1f0bb65dc95fdbbb87c12a95cc0063da1/chalk-solve/src/clauses.rs#L135-L140\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/8abd14e1f0bb65dc95fdbbb87c12a95cc0063da1/chalk-solve/src/clauses.rs#L135-L140\"><code>program_clauses_that_could_match</code></a></p>",
        "id": 178686418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684213
    },
    {
        "content": "<p>first we check if the thing you are trying to prove is <code>Implemented(TraitRef)</code> for some <code>TraitRef</code> (<a href=\"https://github.com/rust-lang/chalk/blob/8abd14e1f0bb65dc95fdbbb87c12a95cc0063da1/chalk-solve/src/clauses.rs#L142\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/8abd14e1f0bb65dc95fdbbb87c12a95cc0063da1/chalk-solve/src/clauses.rs#L142\">here</a>)</p>",
        "id": 178686443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684233
    },
    {
        "content": "<p>in there <a href=\"https://github.com/rust-lang/chalk/blob/8abd14e1f0bb65dc95fdbbb87c12a95cc0063da1/chalk-solve/src/clauses.rs#L170-L183\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/8abd14e1f0bb65dc95fdbbb87c12a95cc0063da1/chalk-solve/src/clauses.rs#L170-L183\">we check if the self-type is <code>dyn Foo</code></a></p>",
        "id": 178686462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684249
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">trait_ref</span><span class=\"p\">.</span><span class=\"n\">self_type_parameter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Ty</span>::<span class=\"n\">Opaque</span><span class=\"p\">(</span><span class=\"n\">qwc</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Ty</span>::<span class=\"n\">Dyn</span><span class=\"p\">(</span><span class=\"n\">qwc</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178686487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684275
    },
    {
        "content": "<p>here the <code>qwc</code> are those \"quantified where clauses\" we talked about before, so they have the type <code>Binder&lt;Vec&lt;Binder&lt;WhereClause&gt;&gt;&gt;</code></p>",
        "id": 178686559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684302
    },
    {
        "content": "<p>really they are kind of \"qqwc\" -- quantified twice :)</p>",
        "id": 178686565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684308
    },
    {
        "content": "<p>so if our goal were <code>dyn (Write + Send): Send</code> (say)</p>",
        "id": 178686591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684335
    },
    {
        "content": "<p>then the self-type would be <code>dyn (Write + Send)</code>, and hence <code>qwc</code> would be something like</p>\n<div class=\"codehilite\"><pre><span></span>exists&lt;T&gt; { forall&lt;&gt; { T: Write }, forall&lt;&gt; { T: Send } }\n</pre></div>",
        "id": 178686627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684363
    },
    {
        "content": "<p>(where the <code>forall&lt;&gt;</code> indicates \"empty\" binders)</p>",
        "id": 178686635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684372
    },
    {
        "content": "<p>what we want to produce are two program clauses:</p>\n<div class=\"codehilite\"><pre><span></span>dyn (Write + Send): Write\ndyn (Write + Send): Send\n</pre></div>",
        "id": 178686718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684409
    },
    {
        "content": "<p>as it happens, only the second one will be useful for the goal at hand, but as I said, we don't consider that</p>",
        "id": 178686729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684423
    },
    {
        "content": "<p>so we basically take the <code>qwc</code> and we substitute <code>dyn (Write + Send)</code> for that \"self-type\" <code>T</code></p>",
        "id": 178686760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684444
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">self_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">trait_ref</span><span class=\"p\">.</span><span class=\"n\">self_type_parameter</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// This cannot be None</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">qwc</span><span class=\"p\">.</span><span class=\"n\">substitute</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">self_ty</span><span class=\"p\">.</span><span class=\"n\">cast</span><span class=\"p\">()]);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178686769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684454
    },
    {
        "content": "<p>this gives us a value <code>wc</code> -- slightly misnamed, as these are actually still quantified where clauses</p>",
        "id": 178686782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684465
    },
    {
        "content": "<p>so <code>wc</code> would be</p>\n<div class=\"codehilite\"><pre><span></span> vec![\n    forall&lt;&gt; { (dyn Write + Send): Write },\n    forall&lt;&gt; { dyn (Write + Send): Send }\n]\n</pre></div>",
        "id": 178686814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684499
    },
    {
        "content": "<p>on the final line we convert those into program clauses by using the <code>cast()</code> function</p>",
        "id": 178686874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684537
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                    </span><span class=\"n\">clauses</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">wc</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">casted</span><span class=\"p\">());</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178686881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684547
    },
    {
        "content": "<p>argh, I ust realized it's 3pm ..</p>",
        "id": 178686888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684553
    },
    {
        "content": "<p>sorry, I gotta run to another mtg :)</p>",
        "id": 178686891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684556
    },
    {
        "content": "<p>sorry for the occasional delay today, I had some \"local\" interruptions</p>",
        "id": 178686909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684574
    },
    {
        "content": "<p>anyway, I'll try to answer questions async, hope that was helpful so far to explain what <span class=\"user-mention\" data-user-id=\"116108\">@Keith Yeung</span> did :)</p>",
        "id": 178686918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571684585
    },
    {
        "content": "<p>I thought it was helpful, thanks</p>",
        "id": 178687047,
        "sender_full_name": "tmandry",
        "timestamp": 1571684648
    },
    {
        "content": "<p>also, it might be worth taking your \"more general\" example here and adding it as a comment in the implementation</p>",
        "id": 178687080,
        "sender_full_name": "tmandry",
        "timestamp": 1571684677
    },
    {
        "content": "<p>as a reminder of why we're working with a vec of clauses, for instance</p>",
        "id": 178687244,
        "sender_full_name": "tmandry",
        "timestamp": 1571684796
    },
    {
        "content": "<p>Ooh, so we're substituting the <code>T</code>, and that removes the <code>exists&lt;T&gt;</code>, leaving us with a vec instead. Was wondering where the vec came from</p>",
        "id": 178687455,
        "sender_full_name": "detrumi",
        "timestamp": 1571684957
    },
    {
        "content": "<p>(I would make the docs/comments changes myself but I also have to run)</p>",
        "id": 178687561,
        "sender_full_name": "tmandry",
        "timestamp": 1571685008
    },
    {
        "content": "<p>That's a lot of implicit steps</p>",
        "id": 178687562,
        "sender_full_name": "detrumi",
        "timestamp": 1571685008
    },
    {
        "content": "<blockquote>\n<p>(I would make the docs/comments changes myself but I also have to run)</p>\n</blockquote>\n<p>yep I was thinking the same</p>",
        "id": 178694866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571689528
    },
    {
        "content": "<p>I'll open a small PR</p>",
        "id": 178694869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571689532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was thinking that trait solving for <code>dyn Trait</code> is not the same as <code>impl Trait</code></p>",
        "id": 178705339,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1571697003
    },
    {
        "content": "<p>they seem to have different rules as I understand it</p>",
        "id": 178705357,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1571697019
    },
    {
        "content": "<p>namely, <code>dyn Trait</code> doesn't <em>just</em> mean <code>exists&lt;T&gt; { forall&lt;&gt; { T: Trait } }</code>, it also carries an assumption that the T is behind a pointer</p>",
        "id": 178705479,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1571697140
    },
    {
        "content": "<p>although on second thought, that doesn't seem to be a concern, since all chalk needs to do is to generate another goal to prove that <code>dyn Trait: Pointee</code> or something</p>",
        "id": 178705609,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1571697255
    },
    {
        "content": "<blockquote>\n<p>namely, <code>dyn Trait</code> doesn't <em>just</em> mean <code>exists&lt;T&gt; { forall&lt;&gt; { T: Trait } }</code>, it also carries an assumption that the T is behind a pointer</p>\n</blockquote>\n<p>indeed I don't think this is really chalk's concern; there <em>are</em> some interactions with the <code>Sized</code> trait</p>",
        "id": 178712540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571704215
    }
]