[
    {
        "content": "<p>figured I'd make a stream for this</p>",
        "id": 191134647,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584633735
    },
    {
        "content": "<p>So, what's going to be somewhat useful here is how rustc used to handle builtin traits for the old chalk integration: <a href=\"https://github.com/rust-lang/rust/blob/21affdd00d52fba6388f1858a52c253b3f83a90d/src/librustc_traits/chalk_context/program_clauses/builtin.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/21affdd00d52fba6388f1858a52c253b3f83a90d/src/librustc_traits/chalk_context/program_clauses/builtin.rs\">https://github.com/rust-lang/rust/blob/21affdd00d52fba6388f1858a52c253b3f83a90d/src/librustc_traits/chalk_context/program_clauses/builtin.rs</a></p>",
        "id": 191135710,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584634134
    },
    {
        "content": "<p>I do say somewhat because I feel like our implementation will end up looking quite different</p>",
        "id": 191136030,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584634311
    },
    {
        "content": "<p>okay</p>",
        "id": 191136119,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634344
    },
    {
        "content": "<p>ill read that a bit</p>",
        "id": 191136124,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634347
    },
    {
        "content": "<p>right off the bat see fun syntax</p>",
        "id": 191136198,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634383
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"n\">goal</span>: <span class=\"nc\">ty</span>::<span class=\"n\">TraitPredicate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">trait_ref</span>: <span class=\"nc\">ty</span>::<span class=\"n\">TraitRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">def_id</span>: <span class=\"nc\">trait_def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"nc\">tcx</span><span class=\"p\">.</span><span class=\"n\">mk_substs_trait</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191136219,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634393
    },
    {
        "content": "<p>is this valid in stable / nightly?</p>",
        "id": 191136229,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634398
    },
    {
        "content": "<p>or is this the type asscription feature</p>",
        "id": 191136243,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634406
    },
    {
        "content": "<p>ooh duh</p>",
        "id": 191136297,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634430
    },
    {
        "content": "<p>its in a constructor</p>",
        "id": 191136305,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634433
    },
    {
        "content": "<p>IGNORE ME</p>",
        "id": 191136307,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634434
    },
    {
        "content": "<p>i blame github syntax hightlighting for being different from my local stuff and brains being dumb with pattern matching</p>",
        "id": 191136391,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634463
    },
    {
        "content": "<p><em>whistles innocently</em></p>",
        "id": 191136400,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634468
    },
    {
        "content": "<p>why you no have documentation explaining what you mean!? <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.TraitPredicate.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.TraitPredicate.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.TraitPredicate.html</a></p>",
        "id": 191136559,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634550
    },
    {
        "content": "<p>so this first one is just representing a fact in chalk</p>",
        "id": 191136929,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634716
    },
    {
        "content": "<p>the goals represent the first half of the statement before the <code>:-</code></p>",
        "id": 191136965,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634731
    },
    {
        "content": "<p>and then the hypothesis is the rhs</p>",
        "id": 191136984,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634740
    },
    {
        "content": "<p>and this is basically just saying</p>",
        "id": 191136998,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634747
    },
    {
        "content": "<p>if all of the nested generic args impl that trait then this type implements the trait</p>",
        "id": 191137026,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584634768
    },
    {
        "content": "<p>right</p>",
        "id": 191137427,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584634952
    },
    {
        "content": "<p>I'm not completely sure how helpful this will <em>actually</em> be</p>",
        "id": 191137592,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584635017
    },
    {
        "content": "<p>but I figured I would paste it</p>",
        "id": 191137602,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584635023
    },
    {
        "content": "<p>The other piece of code that is also going to be somewhat relevant to this (probably) is: <a href=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L46\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L46\">https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L46</a></p>",
        "id": 191138037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584635165
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> it's probably best to start with a specific builtin trait</p>",
        "id": 191531017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584994908
    },
    {
        "content": "<p>I guess that <code>Sized</code> is the most common one</p>",
        "id": 191531087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584994927
    },
    {
        "content": "<p>I'm not sure, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, did we land any code for <code>Sized</code>?</p>",
        "id": 191531101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584994939
    },
    {
        "content": "<p>In general, the rule for <code>Sized</code> is that the <em>builtin</em> types are sized, but for structs with fields we look at the last field, and the struct is sized iff that last field is Sized (the WF rules forbid fields other than the last field from being potentially unsized).</p>",
        "id": 191533052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584995971
    },
    {
        "content": "<p>WF rules?</p>",
        "id": 191533168,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584996006
    },
    {
        "content": "<p>\"well formed\" rules, meaning the checks that are required to declare a struct definition as valid</p>",
        "id": 191533426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996143
    },
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>, I'm not sure how well you understand the overall chalk \"pipeline\"&lt; but the idea here is that there is a callback that gets invoked that has the job of basically translated Rust declarations into logical predicates.</p>",
        "id": 191533854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996359
    },
    {
        "content": "<p>Specifically, it gets invokved when the solver is saying \"I have to check if <code>T: Foo</code> is true (\"prove\" it), and I need to know all the ways to do that\"</p>",
        "id": 191533921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996377
    },
    {
        "content": "<p>normally we do that by turning around asking the <code>RustIrDatabase</code> something like \"give me all the impls of <code>Foo</code>\" and then translating those impls into logical rules</p>",
        "id": 191533977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996406
    },
    {
        "content": "<p>but the idea here is that we look at the trait <code>Foo</code> and -- if we see that it is <code>Sized</code> -- we can insert some built-in responses</p>",
        "id": 191534007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996424
    },
    {
        "content": "<p>also, really, we can usually do better than \"all impls\" -- i.e., we might look for impls that could possibly match the type <code>T</code></p>",
        "id": 191534037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996442
    },
    {
        "content": "<p>I see</p>",
        "id": 191534735,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584996759
    },
    {
        "content": "<p>I don't know the chalk pipeline much at all, other than the general ideas from a talk sunjay gave on orphan rules + chalk almost 2 years ago</p>",
        "id": 191534809,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584996796
    },
    {
        "content": "<p>so this is all good info</p>",
        "id": 191534855,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584996817
    },
    {
        "content": "<p>Well, for one thing, a lot of this didn't exist  -- at least not in its current form -- when <span class=\"user-mention silent\" data-user-id=\"117350\">Sunjay Varma</span> was working on chalk, but also this stuff needs to get cleaned up and better document</p>",
        "id": 191535112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/191531101\" title=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/191531101\">said</a>:</p>\n<blockquote>\n<p>I'm not sure, <span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span>, did we land any code for <code>Sized</code>?</p>\n</blockquote>\n<p>We have not</p>",
        "id": 191537073,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584997866
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> <code>Sized</code> is probably a good place to start</p>",
        "id": 191539448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999039
    },
    {
        "content": "<p>in case you're trying to read into the code, <a href=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L104-L113\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L104-L113\">this is the callback</a> that I was talking about -- it is supposed to return \"program clauses\" (logical rules) that could be used to prove the given goal in the given environment</p>",
        "id": 191539551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999102
    },
    {
        "content": "<p>you can see that it invokes <a href=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L132-L141\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L132-L141\"><code>program_clauses_that_could_match</code></a>, which has the job of inspecting the goal and the rust-ir</p>",
        "id": 191539659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999143
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L153-L158\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L153-L158\">this for example is the code that iterates over applicable impls</a></p>",
        "id": 191539687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999162
    },
    {
        "content": "<p>and, in the case of an auto trait like <code>Send</code>, <a href=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L160-L175\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L160-L175\">this code</a> generates the \"automatic impls\"</p>",
        "id": 191539720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999183
    },
    {
        "content": "<p>so we are going to want to add some code into that match arm -- <a href=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L239\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L239\">right here, where the FIXME is</a></p>",
        "id": 191539750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999204
    },
    {
        "content": "<p>probably we should make a <code>clauses/builtin_traits.rs</code> module or something</p>",
        "id": 191539767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999218
    },
    {
        "content": "<p>I guess that's already the <em>very first</em> thing we need to do -- add the concept of a \"built-in trait\"</p>",
        "id": 191539786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999236
    },
    {
        "content": "<p>I think what I would do is to extend <a href=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-rust-ir/src/lib.rs#L89-L102\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-rust-ir/src/lib.rs#L89-L102\"><code>TraitDatum</code></a> (or maybe <code>TraitFlags</code>..?) with another field like <code>well_known_trait: Option&lt;WellKnownTrait&gt;</code></p>",
        "id": 191539918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999297
    },
    {
        "content": "<p>where we have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">WellKnownTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">SizedTrait</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">CloneTrait</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">CopyTrait</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>(we can start with just <code>Sized</code>)</p>",
        "id": 191539965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999321
    },
    {
        "content": "<p>we would probably want to extend the parser to permit <code>#[sized] trait Sized { }</code> declarations that have <code>well_known_trait</code> set to <code>Some(SizedTrait)</code></p>",
        "id": 191540023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999358
    },
    {
        "content": "<p>if we want to be lazy, we can add <code>bool</code> fields to <code>TraitFlags</code> for each trait and just follow the model of something like <code>#[marker]</code> (e.g., <a href=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-parse/src/parser.lalrpop#L41\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-parse/src/parser.lalrpop#L41\">here is some of the parser code</a>, and here is where the <a href=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-integration/src/lowering.rs#L896-L907\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-integration/src/lowering.rs#L896-L907\">parser's flags get convered to builtin chalk flags</a>)</p>",
        "id": 191540146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999418
    },
    {
        "content": "<p>but I guss nah it'd be better to do</p>",
        "id": 191540225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999479
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>WellKnownTrait: WellKnownTrait = {\n     &quot;#&quot; &quot;[&quot; &quot;lang&quot; &quot;(&quot; &quot;sized&quot; &quot;)&quot; &quot;]&quot; =&gt; WellKnownTrait::Sized,\n};\n</pre></div>\n\n\n<p>and then add a <code>&lt;well_known:WellKnownTrait?&gt;</code> into the <a href=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-parse/src/parser.lalrpop#L61\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-parse/src/parser.lalrpop#L61\"><code>TraitDefn</code></a> code</p>",
        "id": 191540396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999594
    },
    {
        "content": "<p>here i'm using rustc-style \"lang item\" annotations, <code>#[lang(sized)]</code> or whatever</p>",
        "id": 191540454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999607
    },
    {
        "content": "<p>created <a href=\"https://github.com/rust-lang/chalk/issues/356\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/356\">https://github.com/rust-lang/chalk/issues/356</a> for this first work item</p>",
        "id": 191540954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999907
    },
    {
        "content": "<p>I'm leaving doc comments with my initials for things that I'd like an explanation on</p>",
        "id": 191674578,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585085092
    },
    {
        "content": "<p>with the idea being that you can reply to them in the PR when I open it and I can take those explanation and add them back as doc comments</p>",
        "id": 191674610,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585085110
    },
    {
        "content": "<p>wonderful</p>",
        "id": 191674863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085255
    },
    {
        "content": "<p>first steps <a href=\"https://github.com/rust-lang/chalk/pull/359/files\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/359/files\">https://github.com/rust-lang/chalk/pull/359/files</a></p>",
        "id": 191675421,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585085543
    },
    {
        "content": "<p>moving onto parser code next I think, then im gonna look at where you said the FIXME is with the hope that that is where I set well_known to Some(WellKnownTrait::SizedTrait) or something</p>",
        "id": 191675503,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585085610
    },
    {
        "content": "<p>oh does the lalrpop code construct the TraidDatum?</p>",
        "id": 191675906,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585085844
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">name</span>: <span class=\"nc\">n</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">parameter_kinds</span>: <span class=\"nc\">p</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">where_clauses</span>: <span class=\"nc\">w</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assoc_ty_defns</span>: <span class=\"nc\">a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">flags</span>: <span class=\"nc\">TraitFlags</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">auto</span>: <span class=\"nc\">auto</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">marker</span>: <span class=\"nc\">marker</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">upstream</span>: <span class=\"nc\">upstream</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">fundamental</span>: <span class=\"nc\">fundamental</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">non_enumerable</span>: <span class=\"nc\">non_enumerable</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">coinductive</span>: <span class=\"nc\">coinductive</span><span class=\"p\">.</span><span class=\"n\">is_some</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191675926,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585085854
    },
    {
        "content": "<p>sure looks familiar</p>",
        "id": 191675929,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585085857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/191675906\" title=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/191675906\">said</a>:</p>\n<blockquote>\n<p>oh does the lalrpop code construct the TraidDatum?</p>\n</blockquote>\n<p>the LALRPOP code constructs the <em>AST</em></p>",
        "id": 191676056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085923
    },
    {
        "content": "<p>which is then converted by lowering into the <code>chalk_rust_ir</code> types</p>",
        "id": 191676071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085937
    },
    {
        "content": "<p>and TraitDatum is a node in the AST?</p>",
        "id": 191676097,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585085954
    },
    {
        "content": "<p>or whatever the noun is that represents a piece of it</p>",
        "id": 191676110,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585085962
    },
    {
        "content": "<p>ooh</p>",
        "id": 191676145,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585085988
    },
    {
        "content": "<p>I'm not sure :)</p>",
        "id": 191676152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085994
    },
    {
        "content": "<p>wait confused</p>",
        "id": 191676153,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585085995
    },
    {
        "content": "<p>I think not</p>",
        "id": 191676155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085995
    },
    {
        "content": "<p>so <a href=\"http://rust-lang.github.io/chalk/chalk_parse/ast/index.html\" target=\"_blank\" title=\"http://rust-lang.github.io/chalk/chalk_parse/ast/index.html\">these are the AST types</a> that the parser constructs</p>",
        "id": 191676238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086028
    },
    {
        "content": "<p>e.g., <a href=\"http://rust-lang.github.io/chalk/chalk_parse/ast/struct.TraitDefn.html\" target=\"_blank\" title=\"http://rust-lang.github.io/chalk/chalk_parse/ast/struct.TraitDefn.html\"><code>TraitDefn</code></a></p>",
        "id": 191676252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086038
    },
    {
        "content": "<p><a href=\"http://rust-lang.github.io/chalk/chalk_rust_ir/index.html\" target=\"_blank\" title=\"http://rust-lang.github.io/chalk/chalk_rust_ir/index.html\">these are the datum types</a></p>",
        "id": 191676282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086056
    },
    {
        "content": "<p>ooo</p>",
        "id": 191676331,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086087
    },
    {
        "content": "<p>so I need to add the well_known field to TraitDefn in ast as well as TraitDatum in chalk_rust_ir</p>",
        "id": 191676601,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086225
    },
    {
        "content": "<p>and then presumably I get the well_known field from the Defn and pass it to the Datum in lowering</p>",
        "id": 191676682,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086246
    },
    {
        "content": "<p>and maybe \"lower\" it whatever that means</p>",
        "id": 191676689,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086252
    },
    {
        "content": "<p>my current guess/understanding of what lowering means is converting from some richer representation to a simpler one that only has the info you care about, lmk if this is wildly incorrect</p>",
        "id": 191676806,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086320
    },
    {
        "content": "<p><em>wishing I took a course on compiler/pl design in college</em></p>",
        "id": 191676857,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/191676689\" title=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/191676689\">said</a>:</p>\n<blockquote>\n<p>and maybe \"lower\" it whatever that means</p>\n</blockquote>\n<p>\"lower\" means to convert between two representations of the same thing, in some sense,</p>",
        "id": 191676974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086408
    },
    {
        "content": "<p>usually convering from one layer of abstraction to another</p>",
        "id": 191676986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086414
    },
    {
        "content": "<p>usually getting farther from the \"surface syntax\" to something lower level</p>",
        "id": 191677005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/191676806\" title=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/191676806\">said</a>:</p>\n<blockquote>\n<p>my current guess/understanding of what lowering means is converting from some richer representation to a simpler one that only has the info you care about, lmk if this is wildly incorrect</p>\n</blockquote>\n<p>er, yes, roughly this</p>",
        "id": 191677023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086439
    },
    {
        "content": "<p>cool</p>",
        "id": 191677070,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086466
    },
    {
        "content": "<p>should this be an Option&lt;WellKnownTrait&gt;?</p>",
        "id": 191677158,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086500
    },
    {
        "content": "<p>all the other ones are Vecs</p>",
        "id": 191677161,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086504
    },
    {
        "content": "<p>seems like something could be Sized and Clone for example</p>",
        "id": 191677193,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086522
    },
    {
        "content": "<p>I think <code>Option</code> would be better</p>",
        "id": 191677735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086777
    },
    {
        "content": "<p>ack</p>",
        "id": 191677741,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086781
    },
    {
        "content": "<p>seems strange to have one trait that is \"both\" the Sized and Clone trait</p>",
        "id": 191677744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086784
    },
    {
        "content": "<p>oh is that the current plan?</p>",
        "id": 191677775,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086800
    },
    {
        "content": "<p>to have an SizedCloneTrait, variant?</p>",
        "id": 191677786,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086808
    },
    {
        "content": "<p>and so on</p>",
        "id": 191677788,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/191677193\" title=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/191677193\">said</a>:</p>\n<blockquote>\n<p>seems like something could be Sized and Clone for example</p>\n</blockquote>\n<p>this is what it would mean</p>",
        "id": 191677790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/191677775\" title=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/191677775\">said</a>:</p>\n<blockquote>\n<p>oh is that the current plan?</p>\n</blockquote>\n<p>no :)</p>",
        "id": 191677814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086819
    },
    {
        "content": "<p>I'm saying, this attribute we are adding is a way to say to chalk</p>",
        "id": 191677824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086828
    },
    {
        "content": "<p>\"this trait is a special trait that you know\"</p>",
        "id": 191677834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086833
    },
    {
        "content": "<p>oooooh</p>",
        "id": 191677840,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086839
    },
    {
        "content": "<p>i misunderstood</p>",
        "id": 191677867,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086842
    },
    {
        "content": "<p>so it's weird for one trait to be multiple of those</p>",
        "id": 191677880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086843
    },
    {
        "content": "<p>i was thinking this was for bounds on other traits</p>",
        "id": 191677890,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086847
    },
    {
        "content": "<p>not for THE sized trait</p>",
        "id": 191677894,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086851
    },
    {
        "content": "<p>like I thought we were trying to have some way to tie info to <code>trait Foo: Sized + Clone</code></p>",
        "id": 191677920,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086880
    },
    {
        "content": "<p>okay, slowly catching up</p>",
        "id": 191677946,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086896
    },
    {
        "content": "<p>reading lalrpop guide now</p>",
        "id": 191677959,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585086905
    },
    {
        "content": "<p>Okay i think im at the point where im ready for review / further guidance</p>",
        "id": 191700031,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585109706
    },
    {
        "content": "<p>not really clear on what I'm supposed to do wrt Sized in this code <a href=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L239\" title=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L239\">https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-solve/src/clauses.rs#L239</a></p>",
        "id": 191700038,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585109722
    },
    {
        "content": "<p>or if the changes here are meant to be part of this first issue</p>",
        "id": 191700039,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585109732
    },
    {
        "content": "<p>also not sure if I should still be adding the <a href=\"http://buildin_traits.rs\" title=\"http://buildin_traits.rs\">buildin_traits.rs</a> file since we added the well_known field to TraitDatum</p>",
        "id": 191700044,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585109752
    },
    {
        "content": "<p>that TODO there I don't is particularly meaninful</p>",
        "id": 191700801,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585110887
    },
    {
        "content": "<p>for this first version, I would just replace that <code>FIXME</code> with something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">well_known</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">trait_defn</span><span class=\"p\">.</span><span class=\"n\">well_known</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builtin_traits</span>::<span class=\"n\">add_builtin_program_clauses</span><span class=\"p\">(</span><span class=\"n\">well_known</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trait_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>where</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">add_builtin_program_clauses</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">well_known</span>: <span class=\"nc\">WellKnown</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">well_known</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* TODO */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191807518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168483
    },
    {
        "content": "<p>i.e., we're not actually adding any new behavior, just leaving the place where it should be</p>",
        "id": 191807527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168494
    },
    {
        "content": "<p>I would still create the module file, but it's only role is to exist so that later diffs are cleaner I guess :)</p>",
        "id": 191807569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 191807579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168517
    },
    {
        "content": "<p>okay</p>",
        "id": 191811991,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585170882
    },
    {
        "content": "<p>I was thinking as I wrote up <a href=\"https://github.com/rust-lang/chalk/issues/363\" title=\"https://github.com/rust-lang/chalk/issues/363\">https://github.com/rust-lang/chalk/issues/363</a> ...</p>",
        "id": 192075610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585340985
    },
    {
        "content": "<p>for traits like the <code>Copy</code> trait</p>",
        "id": 192075617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585340992
    },
    {
        "content": "<p>I think rustc currently has builtin impls for types like <code>u32</code>..?</p>",
        "id": 192075677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585341011
    },
    {
        "content": "<p>I guess I'm not sure, we should check</p>",
        "id": 192075687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585341015
    },
    {
        "content": "<p>ack</p>",
        "id": 192076404,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585341454
    },
    {
        "content": "<p>im finishing up the stuff that we've talked about sofar and updating docs based on your review comments</p>",
        "id": 192076430,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585341467
    },
    {
        "content": "<p>should have a new push in a few minutes</p>",
        "id": 192076435,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585341471
    },
    {
        "content": "<p>anyway the point is</p>",
        "id": 192076527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585341502
    },
    {
        "content": "<p>some of this work will probably be blocked on extending a bit how chalk handles \"application types\"</p>",
        "id": 192076554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585341516
    },
    {
        "content": "<p>right now we just kind of call everything a \"struct\"</p>",
        "id": 192076566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585341524
    },
    {
        "content": "<p>but I think eventually we're going to want to extend the \"type name\" to include all the variants from rustc (e.g., i32, u32, etc)</p>",
        "id": 192076619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585341543
    },
    {
        "content": "<p>this shouldn't be hard, just an interaction</p>",
        "id": 192076625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585341547
    },
    {
        "content": "<p>okay</p>",
        "id": 192079614,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585342885
    },
    {
        "content": "<p>I'm reading the issue now</p>",
        "id": 192079630,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585342890
    },
    {
        "content": "<p>my push is up if you have time and want to review it</p>",
        "id": 192079646,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585342897
    },
    {
        "content": "<p>but my main question now is what do I put <a href=\"https://github.com/rust-lang/chalk/pull/359/files#diff-90daf0f72783279f47a20ba00551459dR11\" title=\"https://github.com/rust-lang/chalk/pull/359/files#diff-90daf0f72783279f47a20ba00551459dR11\">here</a></p>",
        "id": 192080379,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585343229
    },
    {
        "content": "<p>I'm looking at <code>program_clauses_that_could_match</code> to try to figure out what its doing</p>",
        "id": 192080441,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585343261
    },
    {
        "content": "<p>im guessing it will be something like the implementation for <code>push_auto_trait_impls</code></p>",
        "id": 192080540,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585343298
    },
    {
        "content": "<p>so :)</p>",
        "id": 192081372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585343695
    },
    {
        "content": "<p>the unsatisfying answer is \"nothing in this PR\"</p>",
        "id": 192081382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585343702
    },
    {
        "content": "<p>but I guess you're asking for the <em>next</em> one</p>",
        "id": 192081391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585343708
    },
    {
        "content": "<p>how much do you get about what this code is doing?</p>",
        "id": 192081631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585343833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/192080540\" title=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/192080540\">said</a>:</p>\n<blockquote>\n<p>im guessing it will be something like the implementation for <code>push_auto_trait_impls</code></p>\n</blockquote>\n<p>something like that, and this would be a tolerable \"starting point\", though it isn't really doing the right rule overall</p>",
        "id": 192081657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585343856
    },
    {
        "content": "<p>I guess I should leave some notes in <a href=\"https://github.com/rust-lang/chalk/issues/261\" title=\"https://github.com/rust-lang/chalk/issues/261\">https://github.com/rust-lang/chalk/issues/261</a></p>",
        "id": 192081670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585343864
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/261#issuecomment-605321853\" title=\"https://github.com/rust-lang/chalk/issues/261#issuecomment-605321853\">left some high-level notes here</a></p>",
        "id": 192082454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585344352
    },
    {
        "content": "<p>i am getting more of an understanding of what this is doing, but for example, I dont know exactly when and how often program_clauses_that_could_match would be called, or what it would be trying to prove. I see that the part that we're focusing on is inside of the arm <code>DomainGoal::Holds(WhereClause::Implemented(trait_ref)) =&gt; {</code>, which I'm guessing means that we're trying to assert that some trait is implemented, probably because we're passing in some type to some function with a trait bound and we want to verify that the type implement's the trait, but it seems odd to me that we'd generate impls for <code>Sized</code> / other well known traits every time</p>",
        "id": 192082531,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585344381
    },
    {
        "content": "<p>so I guess I think I dont quite understand what we're adding to the program clauses or how they represent the builtin traits</p>",
        "id": 192082568,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585344413
    },
    {
        "content": "<p>but like I said im reading this stuff all rn</p>",
        "id": 192082581,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585344422
    },
    {
        "content": "<p>reading high lvel notes now</p>",
        "id": 192082595,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585344433
    },
    {
        "content": "<p>looking to do more work on <a href=\"https://github.com/rust-lang/chalk/issues/261\" title=\"https://github.com/rust-lang/chalk/issues/261\">https://github.com/rust-lang/chalk/issues/261</a> today</p>",
        "id": 192423153,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> here's something I've done locally to move work on rustc integration forward: <a href=\"https://github.com/jackh726/chalk/commit/6e206ec2f27d561016ece3f66b1c7d41d74ba7bb\" title=\"https://github.com/jackh726/chalk/commit/6e206ec2f27d561016ece3f66b1c7d41d74ba7bb\">https://github.com/jackh726/chalk/commit/6e206ec2f27d561016ece3f66b1c7d41d74ba7bb</a></p>",
        "id": 192423476,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676254
    },
    {
        "content": "<p>It works quite well</p>",
        "id": 192423496,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676267
    },
    {
        "content": "<p>I didn't get a reply from <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about whether or not this is something we might want to do in the interim until we have correct rules</p>",
        "id": 192423617,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676328
    },
    {
        "content": "<p>okay</p>",
        "id": 192424089,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676523
    },
    {
        "content": "<p>noob question but</p>",
        "id": 192424118,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676536
    },
    {
        "content": "<p>can you explain this to me?</p>",
        "id": 192424124,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676539
    },
    {
        "content": "<p><code>builder.push_fact(trait_ref.clone());</code></p>",
        "id": 192424129,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676541
    },
    {
        "content": "<p>/me I feel like i should read the chalk dev guide</p>",
        "id": 192424147,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676548
    },
    {
        "content": "<p>so the trait_ref is a fact?</p>",
        "id": 192424179,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676563
    },
    {
        "content": "<p>This is just adding the clause <code>Struct: Trait&lt;...&gt;</code></p>",
        "id": 192424245,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676596
    },
    {
        "content": "<p>it's a maybe a bit confusing</p>",
        "id": 192424299,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676620
    },
    {
        "content": "<p>because of the <code>CastTo</code>s</p>",
        "id": 192424308,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676626
    },
    {
        "content": "<p>Yeah, the trait_ref thing confused me too before</p>",
        "id": 192424385,
        "sender_full_name": "detrumi",
        "timestamp": 1585676647
    },
    {
        "content": "<p>because <code>TraitRef</code> casts to <code>WhereClause</code> which casts to <code>DomainGoal::Holds(WhereClause)</code></p>",
        "id": 192424458,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676690
    },
    {
        "content": "<p>more generally though</p>",
        "id": 192424506,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676709
    },
    {
        "content": "<p>a <code>TraitRef</code> contains a <code>Trait</code> and a <code>Substituion</code></p>",
        "id": 192424557,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676733
    },
    {
        "content": "<p>I think in <em>most</em> (can't say for all for sure), the <strong>first</strong> parameter is the <code>Self</code> type</p>",
        "id": 192424653,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676767
    },
    {
        "content": "<p>So, e.g., say we had <code>Foo: Bar&lt;Baz&gt;</code></p>",
        "id": 192424751,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676810
    },
    {
        "content": "<p>whats a substitution?</p>",
        "id": 192424786,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676825
    },
    {
        "content": "<p>```/// A mapping of inference variables to instantiations thereof.</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 192424810,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676837
    },
    {
        "content": "<p>blasdlfaksh</p>",
        "id": 192424813,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676839
    },
    {
        "content": "<p>regardless of formatting &gt;:[</p>",
        "id": 192424825,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676846
    },
    {
        "content": "<p>this doesn't explain much to me</p>",
        "id": 192424832,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676850
    },
    {
        "content": "<p>the <code>TraitRef</code> would look like <code>{ trait_id: Bar, substitution: [Foo, Baz] }</code></p>",
        "id": 192424846,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676857
    },
    {
        "content": "<p>are Foo / Baz types that impl Bar?</p>",
        "id": 192424894,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585676880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/192424751\" title=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/192424751\">said</a>:</p>\n<blockquote>\n<p>So, e.g., say we had <code>Foo: Bar&lt;Baz&gt;</code></p>\n</blockquote>\n<p>Foo is a struct, Baz is a different struct, used as a generic for Bar</p>",
        "id": 192425029,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676919
    },
    {
        "content": "<p>(so you would have <code>struct Foo; struct Baz; trait Bar&lt;T&gt; {}</code></p>",
        "id": 192425109,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676952
    },
    {
        "content": "<p>a substitution is essentially just a list of types and lifetimes</p>",
        "id": 192425167,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585676979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> IMO substitutions should be printed not like an array but something more uhhh</p>",
        "id": 192426517,
        "sender_full_name": "eddyb",
        "timestamp": 1585677578
    },
    {
        "content": "<p><code>[#0 -&gt; Foo, #1 -&gt; Baz]</code></p>",
        "id": 192426544,
        "sender_full_name": "eddyb",
        "timestamp": 1585677589
    },
    {
        "content": "<p>they're replacements for parameters</p>",
        "id": 192426614,
        "sender_full_name": "eddyb",
        "timestamp": 1585677604
    },
    {
        "content": "<p>yeah, this is how they're normally printed</p>",
        "id": 192426676,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585677633
    },
    {
        "content": "<p><code>[Self -&gt; Foo, T -&gt; Baz]</code> would be even clearer but that requires extra information</p>",
        "id": 192426679,
        "sender_full_name": "eddyb",
        "timestamp": 1585677635
    },
    {
        "content": "<p>or you can just print <code>Foo: Bar&lt;Baz&gt;</code></p>",
        "id": 192426721,
        "sender_full_name": "eddyb",
        "timestamp": 1585677656
    },
    {
        "content": "<p>also substitution saying \"inference\"... different \"substitution\"?</p>",
        "id": 192426769,
        "sender_full_name": "eddyb",
        "timestamp": 1585677683
    },
    {
        "content": "<p>idk if Chalk calls \"generic args\" something other than \"substitution\"</p>",
        "id": 192426789,
        "sender_full_name": "eddyb",
        "timestamp": 1585677698
    },
    {
        "content": "<p>that doc comment is wrong I think</p>",
        "id": 192426815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585677711
    },
    {
        "content": "<p>because we use <code>Substitution</code> for more then were there are inferences variables</p>",
        "id": 192426924,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585677755
    },
    {
        "content": "<p>so the substitutions are the mappings of generic params (inference variables) to concrete types (instantiations thereof)</p>",
        "id": 192427206,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677885
    },
    {
        "content": "<p>yeah</p>",
        "id": 192427264,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585677916
    },
    {
        "content": "<p>so a <code>TraitRef</code> is a partially (completely?) resolved trait bound?</p>",
        "id": 192427403,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677964
    },
    {
        "content": "<p>Um, no not resolved</p>",
        "id": 192427464,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585677996
    },
    {
        "content": "<p>So, it would be <code>?0: Bar&lt;Baz&gt;</code></p>",
        "id": 192427505,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585678017
    },
    {
        "content": "<p>I know <code>!</code> means placeholder</p>",
        "id": 192427610,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678075
    },
    {
        "content": "<p>what does <code>?</code> mean in chalk logic lang syntax?</p>",
        "id": 192427661,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678083
    },
    {
        "content": "<p>inference variable</p>",
        "id": 192427779,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585678145
    },
    {
        "content": "<p><code>!0_0</code> is placeholder<br>\n<code>?0</code> is inference variable<br>\n<code>^0_0</code> is bound variable</p>",
        "id": 192427831,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585678173
    },
    {
        "content": "<p>okay</p>",
        "id": 192428066,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678273
    },
    {
        "content": "<p>is all of this covered in the chalk book?</p>",
        "id": 192428076,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678278
    },
    {
        "content": "<p>I think today I shall read the chalk book</p>",
        "id": 192428192,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678325
    },
    {
        "content": "<p>uh, I think</p>",
        "id": 192428273,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585678367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/192424810\" title=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/192424810\">said</a>:</p>\n<blockquote>\n<p>A mapping of inference variables to instantiations thereof.</p>\n</blockquote>\n<p>hmm that's a pretty bad comment.</p>",
        "id": 192428320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678385
    },
    {
        "content": "<p>:/</p>",
        "id": 192428517,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678459
    },
    {
        "content": "<p>and theres nothing on <code>TraitRef</code></p>",
        "id": 192428524,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678465
    },
    {
        "content": "<p>I think a better one might something like:</p>\n<ul>\n<li>A set of values for the generic type arguments declared on something. For example, given a struct like <code>struct Foo&lt;T, U&gt; { }</code> and some reference to that type <code>Foo&lt;u32, i32&gt;</code>, the <em>substitution</em> for <code>T</code> would be <code>[u32, i32]</code>.</li>\n</ul>",
        "id": 192428585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678495
    },
    {
        "content": "<ul>\n<li>A \"trait ref\" is a reference to a trait plus its associated substitution -- so something like <code>u32: Iterator</code> or maybe <code>u32: PartialEq&lt;u32&gt;</code></li>\n</ul>",
        "id": 192428663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678530
    },
    {
        "content": "<p>err, <code>[T, U]</code> right?</p>",
        "id": 192428667,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585678532
    },
    {
        "content": "<p>no</p>",
        "id": 192428677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678537
    },
    {
        "content": "<p>a substitution is the <em>values provided for the generic parameters</em></p>",
        "id": 192428704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678548
    },
    {
        "content": "<p>so, u32, i32</p>",
        "id": 192428711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678554
    },
    {
        "content": "<p>T, U are the generic parameters</p>",
        "id": 192428720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678559
    },
    {
        "content": "<p>right, but the substitution is <code>T =&gt; u32, U =&gt; i32</code></p>",
        "id": 192428768,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585678567
    },
    {
        "content": "<p>well, the T, U are \"implicit\" in the ordering</p>",
        "id": 192428788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678576
    },
    {
        "content": "<p>but yes sometimes people write the notation <code>[T =&gt; u32, U =&gt; i32]</code></p>",
        "id": 192428800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678587
    },
    {
        "content": "<p>I avoided it because we don't store names in chalk, and just use the position</p>",
        "id": 192428821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/192428585\" title=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/192428585\">said</a>:</p>\n<blockquote>\n<p>I think a better one might something like:</p>\n<ul>\n<li>A set of values for the generic type arguments declared on something. For example, given a struct like <code>struct Foo&lt;T, U&gt; { }</code> and some reference to that type <code>Foo&lt;u32, i32&gt;</code>, <strong>the <em>substitution</em> for <code>T</code> would be <code>[u32, i32]</code></strong>.</li>\n</ul>\n</blockquote>\n<p>this bit here</p>",
        "id": 192428824,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585678602
    },
    {
        "content": "<p>ah sorry ;)</p>",
        "id": 192428837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678611
    },
    {
        "content": "<p>editing fail!</p>",
        "id": 192428844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/192428585\" title=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/192428585\">said</a>:</p>\n<blockquote>\n<ul>\n<li>A set of values for the generic type arguments declared on something. For example, given a struct like <code>struct Foo&lt;T, U&gt; { }</code> and some reference to that type <code>Foo&lt;u32, i32&gt;</code>, the <em>substitution</em> for <code>Foo&lt;u32, i32&gt;</code> would be <code>[u32, i32]</code>.</li>\n</ul>\n</blockquote>",
        "id": 192428881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678633
    },
    {
        "content": "<p>there we go</p>",
        "id": 192428907,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585678646
    },
    {
        "content": "<p>thanks <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 192428939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678660
    },
    {
        "content": "<p>I'd write out the <code>[T =&gt; u32, U =&gt; i32]</code> then mention that it's <em>represented</em> as just <code>[u32, i32]</code></p>",
        "id": 192429046,
        "sender_full_name": "eddyb",
        "timestamp": 1585678708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> do those definitions help?</p>",
        "id": 192429052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678710
    },
    {
        "content": "<p>the think about \"trait references\" is that they don't have \"semantics\" themselves, they appear in a lot of things</p>",
        "id": 192429081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678722
    },
    {
        "content": "<p>e.g., <code>where Foo: PartialEq&lt;u32&gt;</code>, is a where-clause that contains a trait-ref</p>",
        "id": 192429103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678735
    },
    {
        "content": "<p>yea, at least the first ones, i haven't read the last few messages between you and jack yet since your bullets above</p>",
        "id": 192429111,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678738
    },
    {
        "content": "<p>was busy copying what you said into the doccomment for Substitution and TraitRef</p>",
        "id": 192429137,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678751
    },
    {
        "content": "<p>and we have goals like <code>Implemented(Foo: PartialEq&lt;u32&gt;)</code>, where you are trying to prove that a trait-ref is implemented</p>",
        "id": 192429149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678756
    },
    {
        "content": "<p>and abstracting your example into an actual rust code snippet</p>",
        "id": 192429160,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/192429046\" title=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/192429046\">said</a>:</p>\n<blockquote>\n<p>I'd write out the <code>[T =&gt; u32, U =&gt; i32]</code> then mention that it's <em>represented</em> as just <code>[u32, i32]</code></p>\n</blockquote>\n<p>this is probably the right thing for the doc-comment</p>",
        "id": 192429176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678773
    },
    {
        "content": "<p>especially for traits, it'd be good to have the <code>[Self =&gt; ..., T =&gt; ...]</code> explicit, even if only in a doc comment</p>",
        "id": 192429198,
        "sender_full_name": "eddyb",
        "timestamp": 1585678777
    },
    {
        "content": "<p>yeah, that's the other thing, that we often use the notation <code>P0: Trait&lt;P1..Pn&gt;</code> for trait references, to look more  like Rust</p>",
        "id": 192429308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678807
    },
    {
        "content": "<p>but internally it's kind of more like <code>Trait&lt;P0..Pn&gt;</code></p>",
        "id": 192429332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678820
    },
    {
        "content": "<p>where the <code>Self</code> type is \"parameter 0\"</p>",
        "id": 192429338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678824
    },
    {
        "content": "<p>there are some places in the AST where we have just <code>Trait&lt;P1..Pn&gt;</code> (without a self type) -- I call those <em>bounds</em></p>",
        "id": 192429376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678847
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"sd\">/// A set of values for the generic type arguments declared on something.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// # Example</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// ```rust</span>\n<span class=\"sd\">/// // Given a struct</span>\n<span class=\"sd\">/// struct Foo&lt;T, U&gt; { }</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// // And a reference to that like</span>\n<span class=\"sd\">/// type Bar = Foo&lt;u32, i32&gt;;</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// // The substitution for T would be `[u32, i32]`</span>\n<span class=\"sd\">/// ```</span>\n</pre></div>",
        "id": 192429391,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678855
    },
    {
        "content": "<blockquote>\n<p>but internally it's kind of more like <code>Trait&lt;P0..Pn&gt;</code></p>\n</blockquote>\n<p>in other words, there's just a substitution with a \"flat list\" of parameters, the self type is not special in any way apart from notation</p>",
        "id": 192429424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678874
    },
    {
        "content": "<p>is this accurate?</p>",
        "id": 192429428,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> note the editing fail (that <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> later resolved)</p>",
        "id": 192429441,
        "sender_full_name": "eddyb",
        "timestamp": 1585678882
    },
    {
        "content": "<p>almost -- change \"substitution for T\" to \"substitution for Bar\" perhaps</p>",
        "id": 192429476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678897
    },
    {
        "content": "<p>which is what <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> is referring to</p>",
        "id": 192429492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678905
    },
    {
        "content": "<p>ack</p>",
        "id": 192429508,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678912
    },
    {
        "content": "<blockquote>\n<p>u32: Iterator or maybe u32: PartialEq&lt;u32&gt;</p>\n</blockquote>",
        "id": 192429667,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678975
    },
    {
        "content": "<p>I dont understand this</p>",
        "id": 192429677,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678978
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"sd\">/// A set of values for the generic type arguments declared on something.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// # Example</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// Given a struct</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// ```rust</span>\n<span class=\"sd\">/// struct Foo&lt;T, U&gt; { }</span>\n<span class=\"sd\">/// ```</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// then the substitution for a type like `Foo&lt;u32, i32&gt;` would be `[T =&gt; u32, U =&gt; i32]`.</span>\n<span class=\"sd\">/// However, in chalk we don&#39;t store the names T, U and instead just represent</span>\n<span class=\"sd\">/// everything positionally, so we would simply store `[u32, i32]`.</span>\n</pre></div>",
        "id": 192429678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678980
    },
    {
        "content": "<p>is this saying a u32 that represents an iterator?</p>",
        "id": 192429688,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> maybe that <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 192429690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/192429688\" title=\"#narrow/stream/144729-wg-traits/topic/builtin.20traits/near/192429688\">said</a>:</p>\n<blockquote>\n<p>is this saying a u32 that represents an iterator?</p>\n</blockquote>\n<p>no</p>",
        "id": 192429707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585678996
    },
    {
        "content": "<p>u32 is just \"some type\" in that example</p>",
        "id": 192429733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679005
    },
    {
        "content": "<p>the point is, a trait-ref is:</p>\n<ul>\n<li>the name of a trait plus a substitution providing values for all of its generic arguments</li>\n</ul>",
        "id": 192429758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679023
    },
    {
        "content": "<p>maybe use a different trait :P</p>",
        "id": 192429810,
        "sender_full_name": "eddyb",
        "timestamp": 1585679042
    },
    {
        "content": "<p>we use the notation <code>P0: Trait&lt;P1..Pn&gt;</code></p>",
        "id": 192429829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679046
    },
    {
        "content": "<p><code>u32: TryInto&lt;i32&gt;</code></p>",
        "id": 192429831,
        "sender_full_name": "eddyb",
        "timestamp": 1585679048
    },
    {
        "content": "<p>which takes the first (Self) parameter, <code>P0</code>, and writes it in a different spot</p>",
        "id": 192429871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679072
    },
    {
        "content": "<p>but that's just a convention based on Rust surface syntax</p>",
        "id": 192429881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679078
    },
    {
        "content": "<p>side note that I like calling it <code>P0</code> because of the <em>positional</em> nature of a substitution: i.e., it is the 0th parameter in the substitution</p>",
        "id": 192429943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679109
    },
    {
        "content": "<p>so for <code>u32: TryInto&lt;i32&gt;</code> the TraitRef would be</p>",
        "id": 192430005,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679149
    },
    {
        "content": "<p>this is all making me think, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, that we should add some \"chalk book\" goals to our sprint</p>",
        "id": 192430013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679153
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">TraitRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 192430016,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679155
    },
    {
        "content": "<p>I feel like there's still a lack of \"overview\"</p>",
        "id": 192430026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679159
    },
    {
        "content": "<p>mfkingererlkjkj</p>",
        "id": 192430028,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah, that would be good</p>",
        "id": 192430164,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585679207
    },
    {
        "content": "<p>I took at look at that <code>GLOSSARY.md</code></p>",
        "id": 192430194,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585679227
    },
    {
        "content": "<p>I'm not sure 90% of that is useful</p>",
        "id": 192430214,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585679238
    },
    {
        "content": "<p>but there is a chunk that is</p>",
        "id": 192430221,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585679243
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"sd\">/// A &quot;trait ref&quot; is the name of a trait (trait_id) plus a substitution</span>\n<span class=\"sd\">/// providing values for all of its generic arguments</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// # Example</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// So for an ??? like `u32: TryInto&lt;i32&gt;` the TraitRef would look like:</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// ```rust</span>\n<span class=\"sd\">/// TraitRef {</span>\n<span class=\"sd\">///     trait_id: &lt;id_of_TryInto&gt;,</span>\n<span class=\"sd\">///     substitution: Substitution {</span>\n<span class=\"sd\">///         parameters: [Self =&gt; u32, T =&gt; i32],</span>\n<span class=\"sd\">///     }</span>\n<span class=\"sd\">/// }</span>\n<span class=\"sd\">/// ```</span>\n</pre></div>",
        "id": 192430341,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679293
    },
    {
        "content": "<p>Yes, that is correct.</p>",
        "id": 192430446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679349
    },
    {
        "content": "<p>I would just say \"for a trait reference like <code>u32: TryInto&lt;i32&gt;</code>\"</p>",
        "id": 192430463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679359
    },
    {
        "content": "<p>the idea of the name \"trait reference\" is that it's a <em>reference to a trait</em></p>",
        "id": 192430494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679375
    },
    {
        "content": "<p>i.e., we're referring to a trait, and when we do so, we have to also give values for its generic arguments</p>",
        "id": 192430520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679385
    },
    {
        "content": "<p>but maybe we can find a better name? :)</p>",
        "id": 192430525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679389
    },
    {
        "content": "<p>maybe even <code>TraitSubstitution</code> or something...?</p>",
        "id": 192430621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585679411
    },
    {
        "content": "<p>where are trait references used</p>",
        "id": 192430760,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679468
    },
    {
        "content": "<p>they're used when type checking if inputs to functions and structs are valid right?</p>",
        "id": 192430778,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679478
    },
    {
        "content": "<p>yea i feel like \"TraitRef\" is a bit abstract</p>",
        "id": 192430829,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679507
    },
    {
        "content": "<p>but i guess its also just an abstract thing</p>",
        "id": 192430838,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679512
    },
    {
        "content": "<p>but that does make it harder to understand</p>",
        "id": 192430848,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679516
    },
    {
        "content": "<p><code>TraitUse</code> might be slightly better, hmm. or just <code>Trait</code>, if you dare :P</p>",
        "id": 192430960,
        "sender_full_name": "eddyb",
        "timestamp": 1585679549
    },
    {
        "content": "<p>TraitSubstitution makes sense</p>",
        "id": 192430966,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679553
    },
    {
        "content": "<p>TraitUse sounds okay too</p>",
        "id": 192430980,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679561
    },
    {
        "content": "<p>presumably they're used in bounds</p>",
        "id": 192430993,
        "sender_full_name": "eddyb",
        "timestamp": 1585679566
    },
    {
        "content": "<p>TraitBound?</p>",
        "id": 192431003,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679575
    },
    {
        "content": "<p>but its not just a bound right</p>",
        "id": 192431013,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679581
    },
    {
        "content": "<p>its a bound + the inputs that might or might not satisfy it, right?</p>",
        "id": 192431029,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679593
    },
    {
        "content": "<p>no, it's just the bound part</p>",
        "id": 192431075,
        "sender_full_name": "eddyb",
        "timestamp": 1585679616
    },
    {
        "content": "<p>like if you write <code>T: Into&lt;String&gt;</code> in Rust, that's <code>TraitBound(TraitRef { trait: Into, substs: [T, String] })</code></p>",
        "id": 192431206,
        "sender_full_name": "eddyb",
        "timestamp": 1585679660
    },
    {
        "content": "<p>and if this is on a function and you want to check users of that function, you end up substituting the <code>T</code> there with whatever type from the callsite, and that's the only way a trait bound is... idk, \"changed\"?</p>",
        "id": 192431382,
        "sender_full_name": "eddyb",
        "timestamp": 1585679752
    },
    {
        "content": "<p>I see</p>",
        "id": 192431467,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679776
    },
    {
        "content": "<p>tbh \"generic args\" might be more straight-forward terminology than \"substitutions\"</p>",
        "id": 192431479,
        "sender_full_name": "eddyb",
        "timestamp": 1585679783
    },
    {
        "content": "<p>it's only the operation of applying them that might still need to be call \"substitute\"</p>",
        "id": 192431530,
        "sender_full_name": "eddyb",
        "timestamp": 1585679810
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"sd\">/// A &quot;trait ref&quot; is the name of a trait (trait_id) plus a substitution</span>\n<span class=\"sd\">/// providing values for all of its generic arguments</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// # Example</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// So for an trait substitution like `U: TryInto&lt;i32&gt;` the TraitRef would look</span>\n<span class=\"sd\">/// like:</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// ```rust</span>\n<span class=\"sd\">/// TraitRef {</span>\n<span class=\"sd\">///     trait_id: &lt;id_of_TryInto&gt;,</span>\n<span class=\"sd\">///     substitution: Substitution {</span>\n<span class=\"sd\">///         parameters: [Self =&gt; U, T =&gt; i32],</span>\n<span class=\"sd\">///     }</span>\n<span class=\"sd\">/// }</span>\n<span class=\"sd\">/// ```</span>\n</pre></div>",
        "id": 192431579,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> also you <em>really</em> want to solve the problem of generic \"domains\" or w/e, terminology/documentation-wise :P</p>",
        "id": 192431617,
        "sender_full_name": "eddyb",
        "timestamp": 1585679862
    },
    {
        "content": "<p>GenericSubstitutions</p>",
        "id": 192431623,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we struggled to come up with our own to describe what miri does</p>",
        "id": 192431702,
        "sender_full_name": "eddyb",
        "timestamp": 1585679892
    },
    {
        "content": "<p>because miri has a stack of functions but it monomorphizes stuff from each function's body to one \"domain\", which matches the <code>ParamEnv</code> of the whole miri execution</p>",
        "id": 192431788,
        "sender_full_name": "eddyb",
        "timestamp": 1585679936
    },
    {
        "content": "<p>and it took a while before we got everything right, and now a bunch of methods have comments on them trying to describe the relationships, but since there's no official terminology...</p>",
        "id": 192431857,
        "sender_full_name": "eddyb",
        "timestamp": 1585679980
    },
    {
        "content": "<p>I am interested in bikeshedding a lot of this stuff -- I was wanting to go and compare the names rustc / chalk are using and make up a list</p>",
        "id": 192435942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585681973
    },
    {
        "content": "<p>my intuition is that the right set of names can make a big difference for people new to the code</p>",
        "id": 192435973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585681990
    },
    {
        "content": "<p>my intution is <em>also</em> that  names based on PL jargon are often pretty confusing (perhaps \"substitution\" is an example)</p>",
        "id": 192436006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585682008
    },
    {
        "content": "<p>I know rustc is using the term <code>GenericArg</code>, for example, whereas chalk uses <code>Parameter</code> --</p>",
        "id": 192436046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585682033
    },
    {
        "content": "<p>I remember the discussion and I think that indeed <code>GenericArg</code> feels \"more correct\" to me, since I tend to think of \"arguments\" as \"the values provided for parameters\"</p>",
        "id": 192436115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585682054
    },
    {
        "content": "<p>also I like the term \"domain\", <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, if I understand what you're using it for</p>",
        "id": 192436157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585682075
    },
    {
        "content": "<p>I usually think of it as a \"generic context\" or something but domain is maybe nice</p>",
        "id": 192436186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585682092
    },
    {
        "content": "<p>happy to be the confused guide to what names could use improvement</p>",
        "id": 192437600,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585682708
    },
    {
        "content": "<p>lol</p>",
        "id": 192437606,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585682709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> well, if it helps, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> got the <code>Substs</code>/<code>ParamEnv</code> treatment in miri wrong until we sat down and unpacked the desired semantics :P</p>",
        "id": 192438276,
        "sender_full_name": "eddyb",
        "timestamp": 1585683016
    },
    {
        "content": "<p>reasoning about how types fit and when/where they make sense can get pretty bad rn, that's why I want a better terminology etc.</p>",
        "id": 192438356,
        "sender_full_name": "eddyb",
        "timestamp": 1585683061
    }
]