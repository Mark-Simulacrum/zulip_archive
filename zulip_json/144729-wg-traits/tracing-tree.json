[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span>, I've been playing around with using <code>tracing-tree</code> in chalk, and it's been working pretty well!<br>\nI just have a couple bits of feedback:</p>\n<ul>\n<li>A release on <a href=\"http://crates.io\">crates.io</a> would be good, if you're comfortable with publishing it</li>\n<li>It would be nice to have an option to enable/disable ANSI color codes (they get garbled when piping output to a file), I submitted a <a href=\"https://github.com/davidbarsky/tracing-tree/pull/6\">quick PR to make the change</a></li>\n<li>Sometimes it's more readable to have <a href=\"https://github.com/rust-lang/chalk/blob/a27bfd0213689e2e372215ff98c47e15526b6fe1/chalk-engine/src/logic.rs#L443-L445\">values pretty-printed</a>, but the pretty-printed output isn't indented properly because indents are only printed in front of the beginning of a span/event</li>\n</ul>\n<p>I'm not really sure of a good solution for the last point, so I wondered if you had any ideas on that?</p>",
        "id": 201164668,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1592410668
    },
    {
        "content": "<p>For context, here's a picture illustrating the indentation issue:<br>\n<a href=\"/user_uploads/4715/8Dj9hiEALROX_pbjPVClQkL1/Screen-Shot-2020-06-16-at-5.06.16-PM.png\">Screen-Shot-2020-06-16-at-5.06.16-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/8Dj9hiEALROX_pbjPVClQkL1/Screen-Shot-2020-06-16-at-5.06.16-PM.png\" title=\"Screen-Shot-2020-06-16-at-5.06.16-PM.png\"><img src=\"/user_uploads/4715/8Dj9hiEALROX_pbjPVClQkL1/Screen-Shot-2020-06-16-at-5.06.16-PM.png\"></a></div>",
        "id": 201164847,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1592410747
    },
    {
        "content": "<p>I can do a release, I already thought I did...</p>",
        "id": 201165028,
        "sender_full_name": "David Barsky",
        "timestamp": 1592410827
    },
    {
        "content": "<p>(but i'm glad this is working for you.)</p>",
        "id": 201165056,
        "sender_full_name": "David Barsky",
        "timestamp": 1592410845
    },
    {
        "content": "<p>I'll take a look at the PR to remove the ansi colors. I can do a release shortly after that?</p>",
        "id": 201165114,
        "sender_full_name": "David Barsky",
        "timestamp": 1592410867
    },
    {
        "content": "<p>hmm, that's a good question. the pretty-printing would need to preserve the indentation already there across _all_ lines.</p>",
        "id": 201165182,
        "sender_full_name": "David Barsky",
        "timestamp": 1592410906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span> okay, squash and merged.</p>",
        "id": 201165322,
        "sender_full_name": "David Barsky",
        "timestamp": 1592410963
    },
    {
        "content": "<p>By the way, should this issue be closed <a href=\"https://github.com/rust-lang/chalk/issues/337\">https://github.com/rust-lang/chalk/issues/337</a>? It seems that tracing has landed, am i right?</p>",
        "id": 201196787,
        "sender_full_name": "marmeladema",
        "timestamp": 1592426063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span>: published <a href=\"https://crates.io/crates/tracing-tree\">https://crates.io/crates/tracing-tree</a>.</p>",
        "id": 201624810,
        "sender_full_name": "David Barsky",
        "timestamp": 1592841616
    },
    {
        "content": "<p>I thought I did earlier... guess not.</p>",
        "id": 201624824,
        "sender_full_name": "David Barsky",
        "timestamp": 1592841625
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 201632028,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1592844909
    },
    {
        "content": "<p>Should tracing be an optional feature? It seems moderately hefty and some users might want to disable it.</p>",
        "id": 202540840,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593590480
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span></p>",
        "id": 202541257,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593590749
    },
    {
        "content": "<p>Yeah, the various tty deps definitely look like something that shouldn't end up in the final binary</p>",
        "id": 202541778,
        "sender_full_name": "matklad",
        "timestamp": 1593591157
    },
    {
        "content": "<p>we do need a way of debugging Chalk in RA though</p>",
        "id": 202544591,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1593593356
    },
    {
        "content": "<p>currently (without tracing-tree), the Chalk logs are pretty hard to read</p>",
        "id": 202544622,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1593593381
    },
    {
        "content": "<p>(and actually, currently you can't actually get the Chalk logs in RA, I have some code locally that adds a tracing listener but haven't merged it yet)</p>",
        "id": 202544724,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1593593434
    },
    {
        "content": "<p>Well, we recently finished the prototype for dumping <code>.chalk</code> files for a program, so we should integrate that into rust-analyzer at some point</p>",
        "id": 202544913,
        "sender_full_name": "detrumi",
        "timestamp": 1593593538
    },
    {
        "content": "<p>well yeah, but that's not a replacement for logs</p>",
        "id": 202544924,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1593593554
    },
    {
        "content": "<p>Then I'm not sure what you mean with debugging Chalk in RA, if both of these options aren't it</p>",
        "id": 202545075,
        "sender_full_name": "detrumi",
        "timestamp": 1593593661
    },
    {
        "content": "<p>the tracing logs are what I mean, I meant that we can't just disable tracing in Chalk from rust-analyzer since we need it</p>",
        "id": 202545157,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1593593714
    },
    {
        "content": "<p>I think chalk could remove the subscriber and rust-analyzer would be just fine</p>",
        "id": 202568099,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1593609915
    },
    {
        "content": "<p>the instrumentation would still be there via the tracing dep even if you don't compile tracing-tree</p>",
        "id": 202568151,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1593609939
    },
    {
        "content": "<p>and then rust-analyzer's tracing-tree dep would still work with chalks instrumentation</p>",
        "id": 202568248,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1593609963
    },
    {
        "content": "<p>I'm a bit worried about the compile times. It's pretty much an uphill battle and I've tried to trim out the heavier dependencies, especially proc macros.</p>",
        "id": 202568354,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593610031
    },
    {
        "content": "<p>About that, <code>chalk</code> still depends on an old <code>salsa</code> with a pre-1.0 <code>syn</code>, I should file a PR..</p>",
        "id": 202568382,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593610051
    },
    {
        "content": "<p>unless Chalk just undoes the move to tracing, I don't think we can avoid using it</p>",
        "id": 202568422,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1593610070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> but that's only <code>chalk</code>, right, not the crates we actually depend on?</p>",
        "id": 202568503,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1593610093
    },
    {
        "content": "<p>I think updating salsa in chalk isn't completely trivial, there's an issue for it</p>",
        "id": 202568546,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1593610116
    },
    {
        "content": "<p>Yeah</p>",
        "id": 202568562,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593610119
    },
    {
        "content": "<p>(hi, tracing-subscriber co-author) tracing-subscriber should only really be used by applications/binaries; <code>tracing</code> and <code>tracing-core</code> are pretty lightweight; they're comparable to <code>log</code>.</p>",
        "id": 202584168,
        "sender_full_name": "David Barsky",
        "timestamp": 1593617946
    },
    {
        "content": "<p>that being said, <code>tracing-subscriber</code> _does_ have a lot of optional dependencies (including tty's; chrono, etc.) that you can disable: <a href=\"https://github.com/tokio-rs/tracing/blob/master/tracing-subscriber/Cargo.toml#L26\">https://github.com/tokio-rs/tracing/blob/master/tracing-subscriber/Cargo.toml#L26</a></p>",
        "id": 202584330,
        "sender_full_name": "David Barsky",
        "timestamp": 1593618022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> not sure which portions you'd like disabled, but I can try helping you with that?</p>",
        "id": 202584418,
        "sender_full_name": "David Barsky",
        "timestamp": 1593618086
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span> I noticed that it seemed to print to stdout; is that configurable somehow? (I didn't really investigate)</p>",
        "id": 202584551,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1593618147
    },
    {
        "content": "<p>It might have changed after <a href=\"https://github.com/rust-lang-nursery/chalk/issues/544\">chalk#544</a>, but <code>tracing-subscriber</code> does show up in rust-analyzer, taking some 15s to compile (plus extra 25s for <code>tracing-attributes</code>): <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1987#issuecomment-652202248\">https://github.com/rust-analyzer/rust-analyzer/issues/1987#issuecomment-652202248</a></p>",
        "id": 202584623,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593618194
    },
    {
        "content": "<p>I was thinking that the <code>#[instrument]</code> attributes could be disabled (as in <code>#[cfg_attr]</code>), but maybe that's too much of a hassle</p>",
        "id": 202584753,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593618263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> yeah, pretty configurable. <code>tracing-tree</code>, my quick hack that's used in chalk, writes to stdout by default, but it can be really easy to change tracing-subscriber to write to, for instance, a file or stderr, or anything that fits <a href=\"https://docs.rs/tracing-subscriber/0.2.6/tracing_subscriber/fmt/trait.MakeWriter.html\">https://docs.rs/tracing-subscriber/0.2.6/tracing_subscriber/fmt/trait.MakeWriter.html</a></p>",
        "id": 202585050,
        "sender_full_name": "David Barsky",
        "timestamp": 1593618357
    },
    {
        "content": "<p>attributes can be disabled in<code>tracing</code>, fwiw: <a href=\"https://docs.rs/tracing/0.1.15/tracing/#crate-feature-flags\">https://docs.rs/tracing/0.1.15/tracing/#crate-feature-flags</a></p>",
        "id": 202585214,
        "sender_full_name": "David Barsky",
        "timestamp": 1593618399
    },
    {
        "content": "<p>But they're used in <code>chalk</code>, so..</p>",
        "id": 202585287,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593618437
    },
    {
        "content": "<p>ah, hrm.</p>",
        "id": 202585300,
        "sender_full_name": "David Barsky",
        "timestamp": 1593618445
    },
    {
        "content": "<p>I guess we should take a look at <a href=\"https://github.com/dtolnay/watt\">https://github.com/dtolnay/watt</a>, huh</p>",
        "id": 202585535,
        "sender_full_name": "David Barsky",
        "timestamp": 1593618561
    },
    {
        "content": "<p>We already bring in <code>syn</code> for <code>serde</code>. We have some <code>opt-level = 0</code> for proc macro crates in <code>Cargo.toml</code>, maybe we should add <code>tracing-attributes</code> there</p>",
        "id": 202585677,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593618640
    },
    {
        "content": "<p>In the meanwhile, there are worse things in that build profile I linked :-(</p>",
        "id": 202585706,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593618664
    },
    {
        "content": "<p>might be a good idea adding tracing-attributes to <code>opt-level = 0</code>, then. lemme know if I can help in any way, and i'm sorry about the inconvenience this caused y'all.</p>",
        "id": 202586688,
        "sender_full_name": "David Barsky",
        "timestamp": 1593619030
    },
    {
        "content": "<p><code>tracing-tree</code> is kinda kinda similar to ra-prof; i'd be happy to try to get parity between the two so you can maybe cut down on some stuff?</p>",
        "id": 202586783,
        "sender_full_name": "David Barsky",
        "timestamp": 1593619079
    },
    {
        "content": "<p>(if that's what you want, that is.)</p>",
        "id": 202586849,
        "sender_full_name": "David Barsky",
        "timestamp": 1593619089
    },
    {
        "content": "<p>I'll try to look into feature-gating <code>chalk</code>'s use of <code>tracing</code></p>",
        "id": 202587564,
        "sender_full_name": "Laurențiu",
        "timestamp": 1593619347
    },
    {
        "content": "<p>So it shouldn't be <em>too</em> hard to feature-gate <code>tracing-subscriber</code>, <code>tracing-tree</code>,  and the tracing attributes, but feature gating <code>tracing</code> itself would be a bit harder.</p>",
        "id": 202588428,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1593619696
    },
    {
        "content": "<p>i'm also not sure that gating <code>tracing</code> is worthwhile in the grand scheme of things; it _should_ have a comparable weight as <code>log</code></p>",
        "id": 202589655,
        "sender_full_name": "David Barsky",
        "timestamp": 1593620282
    },
    {
        "content": "<p>anyways, if the rust-analyzer folks would be interested in getting <code>tracing</code> in rust-analyzer, i'm sure Eliza and I would be happy to help.</p>",
        "id": 202589998,
        "sender_full_name": "David Barsky",
        "timestamp": 1593620469
    },
    {
        "content": "<p>Just <a href=\"https://github.com/rust-lang/chalk/pull/549\">opened a PR</a> to feature gate the use of <code>tracing-subscriber</code>, <code>tracing-tree</code>, and <code>tracing-attributes</code> in chalk.</p>",
        "id": 202594364,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1593622509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span> sorry for the delay in reviewing <a href=\"https://github.com/davidbarsky/tracing-tree/pull/8#pullrequestreview-441062979\">https://github.com/davidbarsky/tracing-tree/pull/8#pullrequestreview-441062979</a>. It's approved, but do you have any thoughts?</p>",
        "id": 202598170,
        "sender_full_name": "David Barsky",
        "timestamp": 1593624455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> to be clear, the motivation is both selfish and a desire to have something like ra-prof in <code>tracing</code> :). no pressure, obviously!</p>",
        "id": 202598939,
        "sender_full_name": "David Barsky",
        "timestamp": 1593624804
    },
    {
        "content": "<p>I also am somewhat skeptical about gating on <code>tracing</code>. I can totally understand the sentiment of compile times, runtime performance, and binary size. I think I'm okay with gating basically the <code>with_tracing_logs</code> part of things. But I don't think we should be doing anything special for <code>instrument</code></p>",
        "id": 202614603,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593632327
    },
    {
        "content": "<p>I <em>would</em> like to see some sort of \"cost\" (performance, compile time, binary size) analysis of the dependencies</p>",
        "id": 202614672,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593632373
    },
    {
        "content": "<p>I also wonder how much \"extra\" it would be to have a very simple log to catch <code>CHALK_DEBUG</code> in place of the full <code>tracing-tree</code> if <code>tracing-full</code> feature is inactive</p>",
        "id": 202614981,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593632512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198819\">David Barsky</span> <a href=\"#narrow/stream/144729-wg-traits/topic/tracing-tree/near/202598170\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"230601\">Nathan Whitaker</span> sorry for the delay in reviewing <a href=\"https://github.com/davidbarsky/tracing-tree/pull/8#pullrequestreview-441062979\">https://github.com/davidbarsky/tracing-tree/pull/8#pullrequestreview-441062979</a>. It's approved, but do you have any thoughts?</p>\n</blockquote>\n<p>No worries! Left some thoughts on the PR</p>",
        "id": 202716152,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1593709501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span> I've invited you as a collaborator to the <code>tracing-tree</code> repo and added you as an author to the Cargo.toml author field. I've also published <code>tracing-tree 0.1.2</code>, which introduces your lines feature.</p>",
        "id": 202825328,
        "sender_full_name": "David Barsky",
        "timestamp": 1593798089
    },
    {
        "content": "<p>I don't know your <a href=\"http://crates.io\">crates.io</a> account, but feel free to DM it/mention it here.</p>",
        "id": 202825391,
        "sender_full_name": "David Barsky",
        "timestamp": 1593798129
    },
    {
        "content": "<p>I am looking at <code>cargo llmv-lines</code> right now, and looks like tracing instrumentaion does add a amount of stuff, which sounds like it could be trimmed-down/removed:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Lines</span><span class=\"w\">           </span><span class=\"n\">Copies</span><span class=\"w\">        </span><span class=\"n\">Function</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-----</span><span class=\"w\">           </span><span class=\"o\">------</span><span class=\"w\">        </span><span class=\"o\">-------------</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">1687120</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"mi\">52706</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">TOTAL</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">59685</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">3.5</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">    </span><span class=\"mi\">115</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">alloc</span>::<span class=\"n\">raw_vec</span>::<span class=\"n\">RawVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">A</span><span class=\"o\">&gt;</span>::<span class=\"n\">grow</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">55452</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">3.3</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">    </span><span class=\"mi\">474</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.9</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">tracing_core</span>::<span class=\"n\">dispatcher</span>::<span class=\"n\">get_default</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"o\">&lt;*</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">41932</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.5</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">    </span><span class=\"mi\">333</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.6</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">core</span>::<span class=\"n\">iter</span>::<span class=\"n\">traits</span>::<span class=\"n\">iterator</span>::<span class=\"nb\">Iterator</span>::<span class=\"n\">try_fold</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">40148</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.4</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">   </span><span class=\"mi\">3971</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">7.5</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">drop_in_place</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">38954</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.3</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">    </span><span class=\"mi\">553</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">core</span>::<span class=\"n\">option</span>::<span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">map</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">33309</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">    </span><span class=\"mi\">483</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.9</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">core</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">E</span><span class=\"o\">&gt;</span>::<span class=\"n\">map_err</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">33232</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"mi\">22</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">salsa</span>::<span class=\"n\">derived</span>::<span class=\"n\">slot</span>::<span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">Q</span><span class=\"p\">,</span><span class=\"n\">MP</span><span class=\"o\">&gt;</span>::<span class=\"n\">read_upgrade</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">31552</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.9</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">salsa</span>::<span class=\"n\">derived</span>::<span class=\"n\">slot</span>::<span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">Q</span><span class=\"p\">,</span><span class=\"n\">MP</span><span class=\"o\">&gt;</span>::<span class=\"n\">probe</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">29611</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.8</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">    </span><span class=\"mi\">508</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">core</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">E</span><span class=\"o\">&gt;</span>::<span class=\"n\">unwrap_or_else</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">21912</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.3</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">     </span><span class=\"mi\">22</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">salsa</span>::<span class=\"n\">derived</span>::<span class=\"n\">slot</span>::<span class=\"n\">Slot</span><span class=\"o\">&lt;</span><span class=\"n\">Q</span><span class=\"p\">,</span><span class=\"n\">MP</span><span class=\"o\">&gt;</span>::<span class=\"n\">maybe_changed_since</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">20914</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">    </span><span class=\"mi\">427</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.8</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">swap_nonoverlapping_one</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">20740</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">    </span><span class=\"mi\">207</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">alloc</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">extend_desugared</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">20114</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">    </span><span class=\"mi\">155</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"o\">&lt;</span><span class=\"n\">alloc</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">vec</span>::<span class=\"n\">SpecExtend</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">from_iter</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">19138</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.1</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">    </span><span class=\"mi\">264</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">std</span>::<span class=\"n\">thread</span>::<span class=\"n\">local</span>::<span class=\"n\">LocalKey</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">try_with</span><span class=\"w\"> </span><span class=\"o\">???</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">14632</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.9</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">    </span><span class=\"mi\">236</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once</span><span class=\"w\">  </span><span class=\"o\">???</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203092502,
        "sender_full_name": "matklad",
        "timestamp": 1594122684
    },
    {
        "content": "<p>Raised upstream as: <a href=\"https://github.com/tokio-rs/tracing/issues/783\">https://github.com/tokio-rs/tracing/issues/783</a></p>\n<p>I haven't followed this discussion to closely, but my rough thoughts are:</p>\n<ul>\n<li>we definitely need <em>some</em> form of obserbability/instrumentation</li>\n<li>tracing crate definitely covers all the features we need, but I am concerned about compile times (like, it seems to be that it has a bit too many features)</li>\n<li>I think, in principle, tracing API needn't be costly in terms of compile time, but we probably should nudge maintainers into realizing this potential more :)</li>\n</ul>",
        "id": 203092945,
        "sender_full_name": "matklad",
        "timestamp": 1594123019
    },
    {
        "content": "<blockquote>\n<p>tracing crate definitely covers all the features we need, but I am concerned about compile times (like, it seems to be that it has a bit too many features)</p>\n</blockquote>\n<p>we're generally happy to introduce feature flags to cut down on compile times as needed; for instance:</p>\n<ul>\n<li><a href=\"https://docs.rs/tracing/0.1.15/tracing/#crate-feature-flags\">https://docs.rs/tracing/0.1.15/tracing/#crate-feature-flags</a></li>\n<li><a href=\"https://docs.rs/tracing-subscriber/0.2.7/tracing_subscriber/#feature-flags\">https://docs.rs/tracing-subscriber/0.2.7/tracing_subscriber/#feature-flags</a></li>\n</ul>\n<p>it's something we _do_ care a lot about rather deeply, but feedback is always appreciated</p>",
        "id": 203108785,
        "sender_full_name": "David Barsky",
        "timestamp": 1594131806
    },
    {
        "content": "<p>as for <a href=\"https://docs.rs/tracing-core/0.1.10/tracing_core/dispatcher/fn.get_default.html\">https://docs.rs/tracing-core/0.1.10/tracing_core/dispatcher/fn.get_default.html</a>, I <em>believe</em> this is coming from the macro invocations—lemme doublecheck.</p>",
        "id": 203108896,
        "sender_full_name": "David Barsky",
        "timestamp": 1594131846
    },
    {
        "content": "<p>two possible candidates of the source of the monomorphized <code>get_default</code>:</p>\n<ul>\n<li>in the macros that determine whether a span/event is enabled/disabled: <a href=\"https://github.com/tokio-rs/tracing/blob/971a46b46d5057daaa11bf8d9081f10ba69935d6/tracing/src/macros.rs#L1863\">https://github.com/tokio-rs/tracing/blob/971a46b46d5057daaa11bf8d9081f10ba69935d6/tracing/src/macros.rs#L1863</a></li>\n<li>in tracing-log's compatibility layer: <a href=\"https://github.com/tokio-rs/tracing/blob/a1387482e9bd114fa572a9152fd458ef65742a47/tracing-log/src/lib.rs#L159\">https://github.com/tokio-rs/tracing/blob/a1387482e9bd114fa572a9152fd458ef65742a47/tracing-log/src/lib.rs#L159</a></li>\n</ul>",
        "id": 203109299,
        "sender_full_name": "David Barsky",
        "timestamp": 1594132032
    },
    {
        "content": "<p>I opened an MCP for adding tracing to rustc: <a href=\"https://github.com/rust-lang/compiler-team/issues/331\">https://github.com/rust-lang/compiler-team/issues/331</a></p>",
        "id": 203584976,
        "sender_full_name": "oli",
        "timestamp": 1594451900
    },
    {
        "content": "<p>Nice :)</p>",
        "id": 203605486,
        "sender_full_name": "Jack Huey",
        "timestamp": 1594488110
    }
]