[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> â€” so first thing I wanted to ask is what's on your mind. Topics I associate with you include: =)</p>\n<ul>\n<li>traits alias PR, </li>\n<li>your pending PR,</li>\n<li>trait objects,</li>\n<li><code>impl trait</code> in let bindings</li>\n</ul>",
        "id": 155096209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547483656
    },
    {
        "content": "<p>yep</p>",
        "id": 155096245,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547483698
    },
    {
        "content": "<p>definitely those</p>",
        "id": 155096255,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547483704
    },
    {
        "content": "<p>i'm game to talk about any of those but maybe the trait alias PR would be good to start just because it'd be good to see that finished up</p>",
        "id": 155096269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547483709
    },
    {
        "content": "<p>also, associated_types_in_bindings briefly</p>",
        "id": 155096272,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547483711
    },
    {
        "content": "<p>in particular the remaining bit had to do with trait objects</p>",
        "id": 155096277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547483714
    },
    {
        "content": "<p>and possibly impl Trait lifetime constraints if we have time</p>",
        "id": 155096289,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547483721
    },
    {
        "content": "<p>(and trait aliases)</p>",
        "id": 155096292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547483722
    },
    {
        "content": "<p>okay</p>",
        "id": 155096295,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547483724
    },
    {
        "content": "<p>mind if I jump in?</p>",
        "id": 155096302,
        "sender_full_name": "centril",
        "timestamp": 1547483739
    },
    {
        "content": "<p>my rebase PR landed, so the cross-crate stuff landed</p>",
        "id": 155096307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547483743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> maybe?</p>",
        "id": 155096313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547483750
    },
    {
        "content": "<p>depends what you want to say :P</p>",
        "id": 155096316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547483756
    },
    {
        "content": "<p>:P</p>",
        "id": 155096368,
        "sender_full_name": "centril",
        "timestamp": 1547483776
    },
    {
        "content": "<p>(go ahead)</p>",
        "id": 155096380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547483786
    },
    {
        "content": "<p>(I'd just like to make sure we stay focused, is all)</p>",
        "id": 155096384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547483790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I saw, that's good. you're still working on rebasing the duplicate non-auto trait detection though right? e.g. <code>TraitAliasExpander</code>, etc.?</p>",
        "id": 155096385,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547483790
    },
    {
        "content": "<p>but if it's germane to the topic, go for it :)</p>",
        "id": 155096409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547483821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> sure, although maybe semi-passively, just because I have limited time with Niko? ;-)</p>",
        "id": 155096410,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547483821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> yeah, the trait alias expander itself seems fine and rebases easily enough, the question is more the code that <em>applies</em> it and how to work on <em>that</em></p>",
        "id": 155096411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547483821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> what was on your mind?</p>",
        "id": 155096420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547483829
    },
    {
        "content": "<p>I would said in terms of prioritization of work, trait aliases are not the best thing to work on if you want to ship</p>",
        "id": 155096421,
        "sender_full_name": "centril",
        "timestamp": 1547483829
    },
    {
        "content": "<p>re. <code>associated_type_bounds</code>, I'm going to write up some tests for <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span></p>",
        "id": 155096444,
        "sender_full_name": "centril",
        "timestamp": 1547483854
    },
    {
        "content": "<p>I didn't look at arielby's PR that removed principal traits to be honest.</p>",
        "id": 155096445,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547483855
    },
    {
        "content": "<p>but I've been swamped, but I'll get to it (I promise)</p>",
        "id": 155096453,
        "sender_full_name": "centril",
        "timestamp": 1547483866
    },
    {
        "content": "<blockquote>\n<p>I would said in terms of prioritization of work, trait aliases are not the best thing to work on if you want to ship</p>\n</blockquote>\n<p>Because of some pending concerns re: stabilization? I am mostly concerned with having broken, inconsistent stuff in nightly. I'd like to get some variant of the work that <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> already did landed.</p>",
        "id": 155096506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547483894
    },
    {
        "content": "<p>sure</p>",
        "id": 155096507,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547483894
    },
    {
        "content": "<p><code>associated_types_in_bindings</code> &lt;-- which one was this?</p>",
        "id": 155096510,
        "sender_full_name": "centril",
        "timestamp": 1547483897
    },
    {
        "content": "<p>That said, the problem is tricky, it might make sense to hold off if we want</p>",
        "id": 155096522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547483907
    },
    {
        "content": "<blockquote>\n<p>Because of some pending concerns re: stabilization?</p>\n</blockquote>\n<p>Right, if the purpose is to ship, then energy is better spent elsewhere.</p>\n<blockquote>\n<p>I am mostly concerned with having broken, inconsistent stuff in nightly. I'd like to get some variant of the work that @Alexander Regueiro already did landed.</p>\n</blockquote>\n<p>If the purpose is this, fire on all engines away! =)</p>",
        "id": 155096558,
        "sender_full_name": "centril",
        "timestamp": 1547483943
    },
    {
        "content": "<p>to be fair, trait aliases are working nicely right now, they just unfortunately permit multiple-trait objects, which is bad</p>",
        "id": 155096565,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547483949
    },
    {
        "content": "<p>I leave stabilisation concerns to others to be honest (even if I sometimes do stabilisation PRs). I'm more worried about getting things working on nightly.</p>",
        "id": 155096590,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547483987
    },
    {
        "content": "<p>So, what <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span>'s PR did is not that important</p>",
        "id": 155096651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484016
    },
    {
        "content": "<p>That is, I don't think it creates the challenge</p>",
        "id": 155096654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484022
    },
    {
        "content": "<p>okay good</p>",
        "id": 155096658,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484035
    },
    {
        "content": "<p>The basic idea was that a trait object can have <strong>no principal</strong></p>",
        "id": 155096671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484050
    },
    {
        "content": "<p>which is great</p>",
        "id": 155096683,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484069
    },
    {
        "content": "<p>kind of segues into multi-trait objects eh?</p>",
        "id": 155096702,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484093
    },
    {
        "content": "<p>And auto traits are never principal</p>",
        "id": 155096708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484097
    },
    {
        "content": "<p>right</p>",
        "id": 155096709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484097
    },
    {
        "content": "<p>So, what I was a bit unsure about</p>",
        "id": 155096710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484097
    },
    {
        "content": "<p>Yes</p>",
        "id": 155096711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484097
    },
    {
        "content": "<p><del>So if you have <code>dyn Send + Sync</code> that has no principal trait</del></p>",
        "id": 155096712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484098
    },
    {
        "content": "<p>So that is one ordering question</p>",
        "id": 155096717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484103
    },
    {
        "content": "<p>In particular we may find it makes sense to pursue multi-trait objects a bit first</p>",
        "id": 155096756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484124
    },
    {
        "content": "<p>(zulip is having sync problems on my end)</p>",
        "id": 155096763,
        "sender_full_name": "centril",
        "timestamp": 1547484124
    },
    {
        "content": "<p>(delays)</p>",
        "id": 155096785,
        "sender_full_name": "centril",
        "timestamp": 1547484128
    },
    {
        "content": "<p>yes, which is solved by arielyby's PR I think</p>",
        "id": 155096791,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484134
    },
    {
        "content": "<blockquote>\n<p>In particular we may find it makes sense to pursue multi-trait objects a bit first</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f4af\" title=\"100\">:100:</span></p>",
        "id": 155096801,
        "sender_full_name": "centril",
        "timestamp": 1547484153
    },
    {
        "content": "<p>What is solved?</p>",
        "id": 155096802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484154
    },
    {
        "content": "<p>ordering of auto traits</p>",
        "id": 155096803,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484160
    },
    {
        "content": "<p>Ah</p>",
        "id": 155096806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484163
    },
    {
        "content": "<p>Yes</p>",
        "id": 155096808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484164
    },
    {
        "content": "<p>at least, once it becomes a hard error, it is</p>",
        "id": 155096812,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484166
    },
    {
        "content": "<p>which I think it can in the next cycle</p>",
        "id": 155096817,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484170
    },
    {
        "content": "<p>Well, the whole problem was that sometimes we would consider an auto trait to be principal</p>",
        "id": 155096820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484172
    },
    {
        "content": "<p>and we only detected conflicts within the auto traits</p>",
        "id": 155096826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484182
    },
    {
        "content": "<p>Actually I think it is a hard erorr now</p>",
        "id": 155096838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484190
    },
    {
        "content": "<p>we really want to remove the concept of principal traits entirely... but that will probably only be done with multi-trait objects</p>",
        "id": 155096840,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484193
    },
    {
        "content": "<p>but we special-cased the coherence conflict</p>",
        "id": 155096842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484195
    },
    {
        "content": "<p>yes that's what I mean.</p>",
        "id": 155096849,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484204
    },
    {
        "content": "<p>and <em>that</em> we can make a hard error at our liesure</p>",
        "id": 155096852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484207
    },
    {
        "content": "<p>mhm</p>",
        "id": 155096854,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484212
    },
    {
        "content": "<p>So, the tricky bit that I was trying to think through.</p>",
        "id": 155096864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484229
    },
    {
        "content": "<p>The current logic takes the first thing in the list and processes it. This processes produces both a trait reference and a list of \"associated type bindings\"</p>",
        "id": 155096914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484246
    },
    {
        "content": "<p>right</p>",
        "id": 155096951,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484281
    },
    {
        "content": "<p>It then processes the remaining items: the list of associated type bindings is thrown away, and we check that each of those remaining items are only auto traits. If that is true, it implies that there were no associated type bindings (or there is a separate  error)</p>",
        "id": 155096955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484284
    },
    {
        "content": "<p>i.e. projections</p>",
        "id": 155096957,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484288
    },
    {
        "content": "<p>Right</p>",
        "id": 155096961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484293
    },
    {
        "content": "<blockquote>\n<p>If that is true, it implies that there were no associated type bindings (or there is a separate  error)</p>\n</blockquote>\n<p>(because auto traits cannot have associated types)</p>",
        "id": 155096988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484312
    },
    {
        "content": "<p>yeah... the way I did this in my former PR was to expand trait aliases <em>before</em> checking for extra non-auto traits.</p>",
        "id": 155097005,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484338
    },
    {
        "content": "<p>but I was still taking the future (unexpanded) trait as principal</p>",
        "id": 155097016,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484345
    },
    {
        "content": "<p>Right, but that gets a bit tricky now around the associated type bindings</p>",
        "id": 155097020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484349
    },
    {
        "content": "<p>which may be non-ideal</p>",
        "id": 155097023,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484350
    },
    {
        "content": "<p>yes...</p>",
        "id": 155097067,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484364
    },
    {
        "content": "<p>so I was debating a few options</p>",
        "id": 155097074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484369
    },
    {
        "content": "<p>I'm actually not sure how tricky said bindings are</p>",
        "id": 155097082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484378
    },
    {
        "content": "<p>that is, we could just expand all the things</p>",
        "id": 155097090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484386
    },
    {
        "content": "<p>although I think we already handle associated type bindings from trait aliases correctly?</p>",
        "id": 155097093,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484387
    },
    {
        "content": "<p>sort if out</p>",
        "id": 155097096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484389
    },
    {
        "content": "<p>I remember fretting over that and got it working in the end</p>",
        "id": 155097101,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484395
    },
    {
        "content": "<p>there should be at most one non-auto trait</p>",
        "id": 155097103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484396
    },
    {
        "content": "<p>and then any number of auto traits</p>",
        "id": 155097105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484399
    },
    {
        "content": "<p>and all the bindings must therefore (by the same logic) come from that non-auto-trait</p>",
        "id": 155097113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484408
    },
    {
        "content": "<blockquote>\n<p>I remember fretting over that and got it working in the end</p>\n</blockquote>\n<p>I think it should work, yes.</p>",
        "id": 155097134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484424
    },
    {
        "content": "<p>That is, I think it should just fall out from the existing supertrait handling</p>",
        "id": 155097142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484435
    },
    {
        "content": "<p>Hm maybe this is not so tricky</p>",
        "id": 155097156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484447
    },
    {
        "content": "<p>yes</p>",
        "id": 155097159,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484450
    },
    {
        "content": "<p>It doesn't seem to me that there is much reason to special case that \"first predicate\"</p>",
        "id": 155097174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484461
    },
    {
        "content": "<p>no indeed</p>",
        "id": 155097184,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484467
    },
    {
        "content": "<p>you could basically just concatenate them <em>all</em></p>",
        "id": 155097188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484469
    },
    {
        "content": "<p>(and all the resulting bindings too)</p>",
        "id": 155097198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484477
    },
    {
        "content": "<p>(there are some special-case diagnostics that may want to be careful about)</p>",
        "id": 155097249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484487
    },
    {
        "content": "<p>I think that's the way to go actually.</p>",
        "id": 155097252,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484489
    },
    {
        "content": "<p>yes</p>",
        "id": 155097254,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484490
    },
    {
        "content": "<p>I agree</p>",
        "id": 155097257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484492
    },
    {
        "content": "<p>for duplicate bindings</p>",
        "id": 155097259,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484493
    },
    {
        "content": "<p>we want proper error messages</p>",
        "id": 155097262,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484497
    },
    {
        "content": "<p>no silent overridings</p>",
        "id": 155097274,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484511
    },
    {
        "content": "<p>let me see what errors I was thinking of</p>",
        "id": 155097276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484513
    },
    {
        "content": "<p>should we move on though? I'm kind of worried about time heh.</p>",
        "id": 155097294,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484533
    },
    {
        "content": "<p>(sorry)</p>",
        "id": 155097296,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484536
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/d10680818b2a0aabb76e6a07098e031b31707fcc/src/librustc_typeck/astconv.rs#L1074-L1084\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/d10680818b2a0aabb76e6a07098e031b31707fcc/src/librustc_typeck/astconv.rs#L1074-L1084\">this stuff</a></p>",
        "id": 155097338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484575
    },
    {
        "content": "<p>we can move on. The question that remains for me is whether you want to implement this particular change or if you'd prefer for me to finish that rebase. If you're just sick of it I can do so =)</p>",
        "id": 155097423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484607
    },
    {
        "content": "<p>What would you like to discuss next? :)</p>",
        "id": 155097451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484633
    },
    {
        "content": "<p>they're both pretty closely related no? you could do them in the same PR? unless I'm thinking of something else</p>",
        "id": 155097458,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484647
    },
    {
        "content": "<p>maybe briefly associated_type_bindings...</p>",
        "id": 155097465,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484652
    },
    {
        "content": "<p>OK</p>",
        "id": 155097491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484665
    },
    {
        "content": "<p>Remind me the PR?</p>",
        "id": 155097494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484668
    },
    {
        "content": "<p>so, I get a cyclic dependency error</p>",
        "id": 155097571,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484725
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/57428\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57428\">https://github.com/rust-lang/rust/pull/57428</a></p>",
        "id": 155097572,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484726
    },
    {
        "content": "<p>I've done a lot more debugging since</p>",
        "id": 155097586,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484740
    },
    {
        "content": "<p>(is the current state of the PR still \"up to date\"?)</p>",
        "id": 155097606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484765
    },
    {
        "content": "<p>i.e., if I were to pull it and build it</p>",
        "id": 155097611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484769
    },
    {
        "content": "<p>yeah I think so</p>",
        "id": 155097649,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484808
    },
    {
        "content": "<p>or very nearly</p>",
        "id": 155097653,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484809
    },
    {
        "content": "<p><a href=\"https://gist.github.com/b7f24166722b4e6a32f4aecf1cd4e6dc\" target=\"_blank\" title=\"https://gist.github.com/b7f24166722b4e6a32f4aecf1cd4e6dc\">https://gist.github.com/b7f24166722b4e6a32f4aecf1cd4e6dc</a></p>",
        "id": 155097658,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484816
    },
    {
        "content": "<p>so, I thought this was due to just debug statements initially</p>",
        "id": 155097663,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484822
    },
    {
        "content": "<p>it still may be...</p>",
        "id": 155097668,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484824
    },
    {
        "content": "<p>hmm OK</p>",
        "id": 155097747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484874
    },
    {
        "content": "<p>but fundamentally I've determined the problem is <code>find_existential_constraints</code> isn't be called on the generated <code>existential type</code> HIR item</p>",
        "id": 155097758,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484891
    },
    {
        "content": "<p>because <code>convert_item</code> isn't even being called on it</p>",
        "id": 155097770,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484899
    },
    {
        "content": "<p>I'm not sure if the issue is really because we the type definition for the generated <code>existential type</code> gets embedded in the user-written one.</p>",
        "id": 155097820,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484936
    },
    {
        "content": "<p>or if that can be worked around.</p>",
        "id": 155097836,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484944
    },
    {
        "content": "<p>the problem may be:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"c1\">// Desugared from `impl Trait`, so visited by the function&#39;s return type.</span>\n<span class=\"w\">        </span><span class=\"n\">hir</span>::<span class=\"n\">ItemKind</span>::<span class=\"n\">Existential</span><span class=\"p\">(</span><span class=\"n\">hir</span>::<span class=\"n\">ExistTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">impl_trait_fn</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">..</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 155097928,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547484989
    },
    {
        "content": "<p>is this somehow specific to <code>existential type</code>?</p>",
        "id": 155097935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547484993
    },
    {
        "content": "<p>that I'm reusing this functionality for something other than RPIT</p>",
        "id": 155097954,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485005
    },
    {
        "content": "<p>(RPIT = return position impl trait)</p>",
        "id": 155097972,
        "sender_full_name": "centril",
        "timestamp": 1547485023
    },
    {
        "content": "<p>i.e. you don't just get this when desugaring from RPIT</p>",
        "id": 155097978,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485026
    },
    {
        "content": "<p>(for those who don't have Varkor Initialism Syndrome...)</p>",
        "id": 155098005,
        "sender_full_name": "centril",
        "timestamp": 1547485048
    },
    {
        "content": "<p>Yes, OK, I'm seeing now</p>",
        "id": 155098008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485050
    },
    {
        "content": "<p>If you write it as <code>Foo = impl Trait</code>, though, it works?</p>",
        "id": 155098095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485085
    },
    {
        "content": "<p>but maybe not? since <code>impl_trait_fn</code> should be <code>None</code> there... hmm</p>",
        "id": 155098099,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485088
    },
    {
        "content": "<p>let me see</p>",
        "id": 155098108,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485096
    },
    {
        "content": "<p>Also, which is the example that is failing?</p>",
        "id": 155098119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485107
    },
    {
        "content": "<p><code>existential type Bar: Debug + TraitB&lt;AssocB = impl Send&gt;;</code> or equivalently <code>existential type Bar: Debug + TraitB&lt;AssocB: Send&gt;;</code></p>",
        "id": 155098138,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485129
    },
    {
        "content": "<p>do you have a test case committed?</p>",
        "id": 155098193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485190
    },
    {
        "content": "<p>if not, can you do so?</p>",
        "id": 155098200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485200
    },
    {
        "content": "<p>also, does this feature work in some other context?</p>",
        "id": 155098237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485203
    },
    {
        "content": "<p>e.g., does this example from the RFC work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">print_all</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span>: <span class=\"nc\">Display</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">printables</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">printables</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 155098278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485232
    },
    {
        "content": "<p>yeah, kind of... but it's only vaguely related (since this desugars to APIT, not RPIT):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">print_all</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span>: <span class=\"nc\">Display</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">printables</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">printables</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 155098300,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485247
    },
    {
        "content": "<p>^^</p>",
        "id": 155098321,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485263
    },
    {
        "content": "<p>that works yep</p>",
        "id": 155098332,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485271
    },
    {
        "content": "<p>and something like <code>fn get_items() -&gt; impl IntoIterator&lt;Item: Display&gt;</code> ?</p>",
        "id": 155098338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485285
    },
    {
        "content": "<p>incidentally my attempts to build the branch fail:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0425]: cannot find value `DUMMY_SP` in this scope\n    --&gt; src/librustc/hir/lowering.rs:1126:21\n     |\n1126 |                     DUMMY_SP);\n     |                     ^^^^^^^^ not found in this scope\nhelp: possible candidates are found in other modules, you can import them into scope\n     |\n33   | use syntax::ext::quote::rt::DUMMY_SP;\n     |\n33   | use syntax::source_map::DUMMY_SP;\n     |\n33   | use syntax_pos::DUMMY_SP;\n</pre></div>",
        "id": 155098366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485319
    },
    {
        "content": "<p>hmm</p>",
        "id": 155098414,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485334
    },
    {
        "content": "<p>probably a bad rebase sorry</p>",
        "id": 155098424,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485344
    },
    {
        "content": "<p>(obviously I can fix that particular problem)</p>",
        "id": 155098432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485353
    },
    {
        "content": "<p>just missing the import I suspect</p>",
        "id": 155098435,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485356
    },
    {
        "content": "<p>right, I already added it</p>",
        "id": 155098440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485363
    },
    {
        "content": "<p>I was just saying in case there are missing commits :)</p>",
        "id": 155098445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485374
    },
    {
        "content": "<p>sure :-)</p>",
        "id": 155098474,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485413
    },
    {
        "content": "<p>OK, so, I have to do another call now, but I've got a build going, and I'll get back to you in a bit</p>",
        "id": 155098555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485452
    },
    {
        "content": "<p>=)</p>",
        "id": 155098556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485452
    },
    {
        "content": "<p>next problem:</p>\n<div class=\"codehilite\"><pre><span></span>error: unused variable: `owner`\n    --&gt; src/librustc/hir/lowering.rs:1356:13\n     |\n1356 |         let owner = explicit_owner.unwrap_or(exist_ty_node_id);\n     |             ^^^^^ help: consider using `_owner` instead\n     |\n     = note: `-D unused-variables` implied by `-D warnings`\n</pre></div>",
        "id": 155098557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485452
    },
    {
        "content": "<p>okay no problem</p>",
        "id": 155098569,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can I ping you later with some other things?</p>",
        "id": 155098581,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485473
    },
    {
        "content": "<p>of course</p>",
        "id": 155098598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547485490
    },
    {
        "content": "<p>ta</p>",
        "id": 155098602,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> multi-trait objects can wait, but I'd really like to set up a meeting with you, dhardy, and the other guy who expressed an interest in them on GH (I forget who)</p>",
        "id": 155098636,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I will get back to work on impl-trait-in-bindings when I can too, but obviously once you get around to collating all your notes from all over the place, that will be super helpful.</p>",
        "id": 155098702,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485563
    },
    {
        "content": "<p>anyway, thanks for your time.</p>",
        "id": 155098918,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547485730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> slightly unrelated... one thing I discussed recently with Taylor was that we might want to require a set of tests upfront for lang RFCs</p>",
        "id": 155099538,
        "sender_full_name": "centril",
        "timestamp": 1547486207
    },
    {
        "content": "<p>so it is clearer what the semantics are for the team and for implementors</p>",
        "id": 155099562,
        "sender_full_name": "centril",
        "timestamp": 1547486226
    },
    {
        "content": "<p>for now, I'll try to write up some tests today; I'm also working on the associated type defaults RFC and simplifying it</p>",
        "id": 155099590,
        "sender_full_name": "centril",
        "timestamp": 1547486266
    },
    {
        "content": "<p>So, I think that embedding the generated type with the binding for the existing existential  type is going to always lead to problems... unless I'm mistaken?</p>",
        "id": 155103147,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547489186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 155104847,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547490646
    },
    {
        "content": "<p>alternatively, I generate the type elsewhere in the HIR tree, and refer to it by Path</p>",
        "id": 155104871,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547490663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> there seems to be an error <em>before</em> defining uses are checked, in fact: <a href=\"https://gist.github.com/6549d576e7dc98c4520bf519f32e6a9e\" target=\"_blank\" title=\"https://gist.github.com/6549d576e7dc98c4520bf519f32e6a9e\">https://gist.github.com/6549d576e7dc98c4520bf519f32e6a9e</a></p>",
        "id": 155105710,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547491298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> around now by chance?</p>",
        "id": 155354647,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547747557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> hi</p>",
        "id": 156547045,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548088426
    },
    {
        "content": "<p>you there?</p>",
        "id": 156547640,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548088952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay, this will have to be another time!</p>",
        "id": 156548184,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548089561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> It's a holiday in the US (MLK day)</p>",
        "id": 156555698,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1548097646
    },
    {
        "content": "<p>sorry <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> was AFK yeah</p>",
        "id": 156622738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548178425
    },
    {
        "content": "<p>should have mentioned it to you</p>",
        "id": 156622743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548178432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> BTW, let's find time soon (first half of next week if possible?) to go over.<br>\n1. banning multi-trait objects via trait aliases, which is already implemented in my PR, but you were going to factor out...<br>\n2. extending the import system to get make methods on trait aliases and enum type aliases available. (feel free to point me to another compiler team member for this, if they're better-suited.)<br>\n3. talk about the existential lifetime issues and how to fix them (I may have a go at that anyway over the weekend if I have time, but definitely worth a chat).</p>",
        "id": 160325721,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552079222
    },
    {
        "content": "<p>4. collate notes/plans on impl-trait-in-bindings (but this can wait a bit still)</p>",
        "id": 160334083,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552085648
    }
]