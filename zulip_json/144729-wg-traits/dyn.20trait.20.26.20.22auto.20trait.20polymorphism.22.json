[
    {
        "content": "<p>So, when i was reading the docs of <code>AsyncIterator</code>(formly <code>Stream</code>), it mentioned the removal of <code>next</code> method (<a href=\"https://github.com/rust-lang/rust/pull/79023/commits/a1b11321fb2d6ce00af9c8957c98df76432b1b78\">in this commit</a>).</p>\n<p>The removed code is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">AsyncIterator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Next</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Next</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">async_iter</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Notice the usage of I as generic parameter of <code>Next</code> type above, the sole purpose of this parameter is passing the \"auto trait combination\" through.  Otherwise, it can simply be defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Next</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">async_iter_data</span>: <span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">async_iter_metadata</span>: <span class=\"nc\">DynMetadata</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">AsyncIterator</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">phantom_data</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This definition almost works, modulo that sometimes, the metadata should be <code>DynMetadata&lt;dyn AsyncIterator + Send&gt;</code>, <code>DynMetadata&lt;dyn AsyncIterator + Send + Sync&gt;</code> etc. Also, the chosen auto trait combination should be applied to the <code>Next</code> type itself somehow.</p>",
        "id": 270681941,
        "sender_full_name": "Charles Lew",
        "timestamp": 1643963091
    },
    {
        "content": "<p>This is not a high priority issue, since we're currently moving towards associated-type-alias-based solution, but i feel there's something lacking here.</p>",
        "id": 270682037,
        "sender_full_name": "Charles Lew",
        "timestamp": 1643963160
    }
]