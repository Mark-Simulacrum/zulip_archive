[
    {
        "content": "<p>In the <a href=\"#narrow/stream/144729-wg-traits/topic/weekly.20meeting.202019-01-21\" title=\"#narrow/stream/144729-wg-traits/topic/weekly.20meeting.202019-01-21\">weekly meeting discussion today</a>, we talked about the current rules are using the phrase \"well formed\" in 3 distinct ways:</p>\n<ul>\n<li>well-formed declarations, like impls and traits, are basically declarations that do not have errors<br>\n    - we more or less decided to call this being <em>legal</em></li>\n<li>well-formed trait references <code>T: Trait</code>, which means that <code>T: Trait</code> is implemented and so are all of its where clauses</li>\n<li>well-formed types <code>Foo&lt;T&gt;</code>, which means that all the where clauses on the type <code>Foo</code> are implemented</li>\n</ul>\n<p>It seems like the latter two names should be altered, but not clear precisely to what.</p>",
        "id": 156634358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187135
    },
    {
        "content": "<blockquote>\n<ul>\n<li>we more or less decided to call this being legal</li>\n</ul>\n</blockquote>\n<p>As I said before... this seems more confusing than helpful; now you have to explain the distinction between \"legal\" and \"well-formed\" when these two are actually more or less synonyms in natural language.</p>\n<p>I think it would be better to state what sort of WF-ness it is; e.g. <code>WFTrait(...)</code>, <code>WFImpl(..)</code> and whatnot...<br>\nThis reduces \"reasoning footprint\" and ambiguity in the rules</p>",
        "id": 156634680,
        "sender_full_name": "centril",
        "timestamp": 1548187398
    },
    {
        "content": "<p>If you think \"legal\" is better... write <code>LegalXyz(...)</code> ;)</p>",
        "id": 156634805,
        "sender_full_name": "centril",
        "timestamp": 1548187484
    },
    {
        "content": "<p>I don't see why we would have to explain this distinction</p>",
        "id": 156634821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187502
    },
    {
        "content": "<p>those two things are not comparable</p>",
        "id": 156634831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187505
    },
    {
        "content": "<p>that is, we don't have a notion of \"well formed\" that applies to (e.g.) an impl declaration</p>",
        "id": 156634851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187524
    },
    {
        "content": "<p>(if we choose to call it \"legal\", that is)</p>",
        "id": 156634877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187550
    },
    {
        "content": "<p>regarding this:</p>\n<blockquote>\n<p>well-formed trait references <code>T: Trait</code>, which means that <code>T: Trait</code> is implemented and so are all of its where clauses</p>\n</blockquote>\n<p>I like \"fully implemented\" for this, though it's maybe not <em>perfect</em>. But it gives me a much stronger intuition than \"well-formed\" ever did. =)</p>",
        "id": 156634967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> all I'm saying is that \"legal\" and \"wf\" are synonyms; imo you gain nothing my having two words for it... just more confusion -- if you want to distinguish, talk about what sort of legality it is in the name</p>",
        "id": 156635115,
        "sender_full_name": "centril",
        "timestamp": 1548187716
    },
    {
        "content": "<p>the reason I like \"legal\" is that it is a term people use ordinarily</p>",
        "id": 156635342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187912
    },
    {
        "content": "<p>i.e., if I were explaining Rust rules to some lay person, I would say \"the impl is legal if blah blah blah is true\"</p>",
        "id": 156635406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187928
    },
    {
        "content": "<p>I would never say to them \"that impl is not well-formed\"</p>",
        "id": 156635419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187941
    },
    {
        "content": "<p>my point is not to debate which is more correct or better wrt. legal or WF...<br>\nusing \"legal\" is fine, but then use it everywhere and drop WF entirely</p>",
        "id": 156635452,
        "sender_full_name": "centril",
        "timestamp": 1548187980
    },
    {
        "content": "<p>its just as fine to say \"Vec&lt;u8&gt; is a legal type\"</p>",
        "id": 156635479,
        "sender_full_name": "centril",
        "timestamp": 1548188002
    },
    {
        "content": "<p>e.g. <code>LegalType(Vec&lt;u8&gt;)</code> or <code>LegalTraitRef(...)</code></p>",
        "id": 156635568,
        "sender_full_name": "centril",
        "timestamp": 1548188059
    },
    {
        "content": "<p>Ah, I see. I think these are distinct concepts</p>",
        "id": 156636833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548189111
    },
    {
        "content": "<p>that is, I don't know that I would use the term \"legal\" to describe the other two places we use \"well-formed\" presently</p>",
        "id": 156636903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548189134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  so I haven't looked at the chalk docs in a while in the rustc guide... what are all the contexts WellFormed is for used currently?</p>",
        "id": 156636959,
        "sender_full_name": "centril",
        "timestamp": 1548189185
    },
    {
        "content": "<p>Basically the first context is sort of \"visible to end users\" -- it describes the conditions that must be met or else a user error is reported. The other two contexts are more internal.</p>",
        "id": 156637244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548189381
    },
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>, I believe that well-formed is used traditionally to basically mean \"all names are in scope\". I reviewed briefly the Wadler paper to double check that intuition, and it seems to match (let me know if you think I am mistaken). It's a very simple guarantee. For historical reasons (read: my fault), I somehow started using the term in a more expansive way in rustc.</p>\n<p>The conditions I am describing via \"legal\" is sort of analogous to what the <code>OK</code> judgements in <a href=\"https://www.cis.upenn.edu/~bcpierce/papers/fj-toplas.pdf\" target=\"_blank\" title=\"https://www.cis.upenn.edu/~bcpierce/papers/fj-toplas.pdf\">Featherweight Java</a> (see Fig 7). I prefer legal to \"OK\" =)</p>",
        "id": 156641159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192427
    },
    {
        "content": "<p>(Incidentally, FJ also uses well-formed to mean \"names are in scope\")</p>",
        "id": 156641182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192453
    },
    {
        "content": "<p>well, wait</p>",
        "id": 156641248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192485
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/1F9n9fpsbzmW3zdKwH4P2Aj7/Screen-Shot-2019-01-22-at-4.28.18-PM.png\" target=\"_blank\" title=\"Screen-Shot-2019-01-22-at-4.28.18-PM.png\">Screen-Shot-2019-01-22-at-4.28.18-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/1F9n9fpsbzmW3zdKwH4P2Aj7/Screen-Shot-2019-01-22-at-4.28.18-PM.png\" target=\"_blank\" title=\"Screen-Shot-2019-01-22-at-4.28.18-PM.png\"><img src=\"/user_uploads/4715/1F9n9fpsbzmW3zdKwH4P2Aj7/Screen-Shot-2019-01-22-at-4.28.18-PM.png\"></a></div>",
        "id": 156641267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192510
    },
    {
        "content": "<p>I take that back; in FJ, a \"well-formed\" type means something very similar to what we are using it to mean</p>",
        "id": 156641300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192541
    },
    {
        "content": "<p>\"ok\"  == WF :P</p>",
        "id": 156641320,
        "sender_full_name": "centril",
        "timestamp": 1548192552
    },
    {
        "content": "<p>e.g., <code>Foo&lt;Bar&gt;</code> is only well-formed if <code>Bar</code> is a subtype of the bounds declared in the class</p>",
        "id": 156641322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192554
    },
    {
        "content": "<p>e.g. \"in Delta, T-bar is well-formed/ok\"</p>",
        "id": 156641345,
        "sender_full_name": "centril",
        "timestamp": 1548192582
    },
    {
        "content": "<p>I am presently leaning towards the following terms, in any case:</p>\n<ul>\n<li>declarations are <em>legal</em> if the required goals can be proven</li>\n<li>trait references are <em>fully implemented</em> or maybe <em>deeply implemented</em> if all of their where clauses are satisfied</li>\n<li>types are <em>well formed</em></li>\n</ul>",
        "id": 156641430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192612
    },
    {
        "content": "<p>what's the distinction btw fully and not?</p>",
        "id": 156641462,
        "sender_full_name": "centril",
        "timestamp": 1548192643
    },
    {
        "content": "<p>Implemented means that we know there is an impl of the trait, but perhaps not for all the where clauses</p>",
        "id": 156641488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192669
    },
    {
        "content": "<p>so an <code>impl</code> provides a rule for <code>Implemented</code> but does not (in and of itself) prove <code>DeeplyImplemented</code></p>",
        "id": 156641504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192685
    },
    {
        "content": "<p>hmm... perhaps <code>Satisfied(Foo: Bar)</code> ?</p>",
        "id": 156641537,
        "sender_full_name": "centril",
        "timestamp": 1548192715
    },
    {
        "content": "<p>I don't feel that captures the essential difference :)</p>",
        "id": 156641587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192736
    },
    {
        "content": "<p>nor is it a Rust term</p>",
        "id": 156641593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192741
    },
    {
        "content": "<p>put another way, \"implemented\" and \"satisfied\" feel sort of like synonyms to me</p>",
        "id": 156641640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192787
    },
    {
        "content": "<p>hah =P</p>",
        "id": 156641649,
        "sender_full_name": "centril",
        "timestamp": 1548192794
    },
    {
        "content": "<p>fair</p>",
        "id": 156641665,
        "sender_full_name": "centril",
        "timestamp": 1548192807
    },
    {
        "content": "<p>that said, it may not be worth bikeshedding <em>too much</em> on the name of the wf-trait-ref,</p>",
        "id": 156641800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192904
    },
    {
        "content": "<p>because I think it might make sense to do a deeper discussion of implied bounds</p>",
        "id": 156641809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192913
    },
    {
        "content": "<p>make sure the setup feels right</p>",
        "id": 156641813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192917
    },
    {
        "content": "<p>talk through what the things mean</p>",
        "id": 156641814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192920
    },
    {
        "content": "<p>and in the process maybe better names arise :)</p>",
        "id": 156641816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192924
    },
    {
        "content": "<p>I'm also pondering the <a href=\"#narrow/stream/144729-wg-traits/topic/alternate.20implied.20bounds.20lowering\" title=\"#narrow/stream/144729-wg-traits/topic/alternate.20implied.20bounds.20lowering\">alternative implied bounds formulation</a> I described a bit back, I want to make sure I have a good gut feeling for what's wrong there</p>",
        "id": 156641896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548192980
    },
    {
        "content": "<p>yea I agree with agreeing about semantics before agreeing to labels; that might be what's missing</p>",
        "id": 156641935,
        "sender_full_name": "centril",
        "timestamp": 1548193015
    },
    {
        "content": "<p>e.g. it would be useful (for me) to see all the rules \"in one place\" and how they relate in a dense form</p>",
        "id": 156641982,
        "sender_full_name": "centril",
        "timestamp": 1548193059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I (maybe naively) believe that this is what the chapter in the rustc-guide is for</p>",
        "id": 156673193,
        "sender_full_name": "scalexm",
        "timestamp": 1548233416
    },
    {
        "content": "<p>there are two chapters in the rustc-guide:</p>\n<ul>\n<li>a more <a href=\"https://rust-lang.github.io/rustc-guide/traits/implied-bounds.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/traits/implied-bounds.html\">\"tutorial-like\" into to implied bounds</a></li>\n<li>and a more <a href=\"https://rust-lang.github.io/rustc-guide/traits/lowering-rules.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/traits/lowering-rules.html\">compact, reference-like set of rules</a></li>\n</ul>",
        "id": 156693210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548254168
    }
]