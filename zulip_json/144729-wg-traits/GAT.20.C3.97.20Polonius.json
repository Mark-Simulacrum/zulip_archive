[
    {
        "content": "<p>I worry that focusing on <code>LendingIterator</code> as a tentpole feature of GATs is going to cause a small but noticeable uptick in people running into limitations of the current borrow checker (hopefully solved by Polonius):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(generic_associated_types)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">LendingIterator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">i</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">LendingIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"Trying again\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error[E0499]: cannot borrow `*i` as mutable more than once at a time\n  --&gt; src/lib.rs:16:13\n   |\n11 | fn example&lt;&#39;a&gt;(i: &amp;&#39;a mut impl LendingIterator&lt;Item&lt;&#39;a&gt; = &amp;&#39;a str&gt;) -&gt; &amp;&#39;a str {\n   |            -- lifetime `&#39;a` defined here\n12 |     match i.next() {\n   |           --------\n   |           |\n   |           first mutable borrow occurs here\n   |           argument requires that `*i` is borrowed for `&#39;a`\n...\n16 |             i.next().unwrap()\n   |             ^ second mutable borrow occurs here\n</code></pre></div>",
        "id": 248843492,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1628514713
    },
    {
        "content": "<p>I wonder if it's worth either (a) picking a different headline example or (b) adding some notes to the <code>LendingIterator</code> example that indicate it won't solve all the problems in Rust.</p>",
        "id": 248843721,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1628514801
    },
    {
        "content": "<p>unrelated, but why do we allow lifetime shadowing in GATs like that?</p>",
        "id": 248851724,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1628518310
    },
    {
        "content": "<p>was that a conscious decision by the lang team?</p>",
        "id": 248851795,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1628518330
    },
    {
        "content": "<p>I thought that was saying that <code>Item&lt;'a&gt; = &amp;'a str</code> not <code>for&lt;'b&gt; Item&lt;'b&gt; = &amp;'b str</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 248851867,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1628518358
    },
    {
        "content": "<p><code>Item&lt;'a&gt;</code> also brings a new lifetime into scope, right?</p>",
        "id": 248852125,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1628518444
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-lang/rust/issues/87884\">https://github.com/rust-lang/rust/issues/87884</a></p>",
        "id": 248853685,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1628519029
    },
    {
        "content": "<p>It's not a new lifetime</p>",
        "id": 248854331,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1628519293
    },
    {
        "content": "<p><code>Item&lt;'a&gt;</code> brings a new lifetime into scope as much as <code>fn foo&lt;'a&gt;() {}</code> does: only for the item</p>",
        "id": 248855323,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628519743
    },
    {
        "content": "<p>If y'all are talking about </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">i</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">LendingIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span>\n</code></pre></div>\n<p>then it may be worth noting that I originally typed</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">i</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">LendingIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span>\n</code></pre></div>\n<p>but got told to add it:</p>\n<div class=\"codehilite\" data-code-language=\"none\"><pre><span></span><code>error[E0107]: missing generics for associated type `LendingIterator::Item`\n  --&gt; src/lib.rs:11:48\n   |\n11 | fn example&lt;'a&gt;(i: &amp;'a mut impl LendingIterator&lt;Item = &amp;'a str&gt;) -&gt; &amp;'a str {\n   |                                                ^^^^ expected 1 lifetime argument\n   |\nnote: associated type defined here, with 1 lifetime parameter: `'a`\n  --&gt; src/lib.rs:4:10\n   |\n4  |     type Item&lt;'a&gt;\n   |          ^^^^ --\nhelp: add missing lifetime argument\n   |\n11 | fn example&lt;'a&gt;(i: &amp;'a mut impl LendingIterator&lt;Item&lt;'a&gt; = &amp;'a str&gt;) -&gt; &amp;'a str {\n   |                                                ^^^^^^^^\n</code></pre></div>",
        "id": 248855780,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1628519940
    },
    {
        "content": "<p>huh, okay, that makes sense</p>",
        "id": 248856136,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1628520101
    }
]