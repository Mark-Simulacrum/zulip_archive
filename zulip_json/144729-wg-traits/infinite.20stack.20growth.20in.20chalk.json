[
    {
        "content": "<p>I've got <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/2052\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/2052\">a bug</a> report today about rust-analyzer using 200 gigabytes of ram (sic!).</p>\n<p>I've tried to catch some stack-traces when this happens, and they seem to point at chalk: <a href=\"https://gist.github.com/matklad/c6320c19b08afc8e6d8ca8612354d5b8\" target=\"_blank\" title=\"https://gist.github.com/matklad/c6320c19b08afc8e6d8ca8612354d5b8\">https://gist.github.com/matklad/c6320c19b08afc8e6d8ca8612354d5b8</a></p>",
        "id": 178932108,
        "sender_full_name": "matklad",
        "timestamp": 1571906859
    },
    {
        "content": "<p>I haven't dived into this yet, but I wonder if anyone with a better chalk understanding can think of a reason for such behavior? cc <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span></p>",
        "id": 178932204,
        "sender_full_name": "matklad",
        "timestamp": 1571906935
    },
    {
        "content": "<p>Note that I don't think this is a recent chalk regression: we updated chalk 14 days ago, and the issues seems much fresher. My hypothesis is that we just started to run chalk even more aggresively recently (due to find usages), and it hit some nasty code somewhere. Specifically, I can reproduce this problem if I try to find usages of <code>Iterator::next</code></p>",
        "id": 178932490,
        "sender_full_name": "matklad",
        "timestamp": 1571907174
    },
    {
        "content": "<p>One interesting bit here is that the stacktrace, if I read it right, looks like basically a tight loop which does stacker allocation. This is strange: I would expect more stuff to happen in between calls to <code>stacker::maybe_grow</code></p>",
        "id": 178932729,
        "sender_full_name": "matklad",
        "timestamp": 1571907373
    },
    {
        "content": "<p>Looks like the <code>stack_protection</code> feature toggle is on, so somehow the <code>stacker</code> crate doesn't work correctly here</p>",
        "id": 178932861,
        "sender_full_name": "detrumi",
        "timestamp": 1571907504
    },
    {
        "content": "<p>Oh nvm, the 200gb is on the heap, so that's not the issue</p>",
        "id": 178933026,
        "sender_full_name": "detrumi",
        "timestamp": 1571907640
    },
    {
        "content": "<p>I am almost sure it is the stacker allocated stack</p>",
        "id": 178933076,
        "sender_full_name": "matklad",
        "timestamp": 1571907694
    },
    {
        "content": "<p>Or maybe not? The stacktrace looks like it's basically allocatiing in a tight loop, but maybe not each <code>maybe_grow_stack</code> is an allocation?</p>",
        "id": 178933201,
        "sender_full_name": "matklad",
        "timestamp": 1571907824
    },
    {
        "content": "<p>Isn't it growing the stack and storing parts of the stack on the heap when it gets too big?</p>",
        "id": 178933305,
        "sender_full_name": "detrumi",
        "timestamp": 1571907927
    },
    {
        "content": "<p>But looking at those 3 line numbers in <code>logic.rs</code>, it seems like it's recursively looking at the same (sub)goal in a loop</p>",
        "id": 178933414,
        "sender_full_name": "detrumi",
        "timestamp": 1571908006
    },
    {
        "content": "<p>It's weird that the issue started in the last 14 days, though. The only relevant change in Chalk seems to be adding support for <code>Ty::Dyn</code>/<code>Ty::Opaque</code>, which rust-analyzer isn't using yet</p>",
        "id": 178933898,
        "sender_full_name": "detrumi",
        "timestamp": 1571908443
    },
    {
        "content": "<p>I think the reason why we are seeing this is that we've started to exercise chalk more, via find usages, which happned yesterday</p>",
        "id": 178934265,
        "sender_full_name": "matklad",
        "timestamp": 1571908815
    },
    {
        "content": "<p>Ah, <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1892\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1892\">this one</a></p>",
        "id": 178934447,
        "sender_full_name": "detrumi",
        "timestamp": 1571909002
    },
    {
        "content": "<blockquote>\n<p>Ah, <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1892\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1892\">this one</a></p>\n</blockquote>\n<p>what are you highlighting here, <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> ?</p>",
        "id": 178936210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571910615
    },
    {
        "content": "<p>(ps this would be a <em>perfect</em> case where it'd be so cool if we had a facility to dump out chalk-ir into a format we can reproduce)</p>",
        "id": 178936254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571910659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> -- do you have a few more details? like, what are you analyzing?</p>",
        "id": 178936299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571910714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just created a non-minimized reproduction:</p>\n<div class=\"codehilite\"><pre><span></span>cargo run --release -p ra_cli -- analysis-stats --with-deps .\n</pre></div>",
        "id": 178936415,
        "sender_full_name": "matklad",
        "timestamp": 1571910813
    },
    {
        "content": "<p>(<code>--with-deps</code> flag was added moments ago)</p>",
        "id": 178936428,
        "sender_full_name": "matklad",
        "timestamp": 1571910825
    },
    {
        "content": "<p>ok</p>",
        "id": 178936435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571910832
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/dzSxD5gMed5IZ9HlU4ck3Aai/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/dzSxD5gMed5IZ9HlU4ck3Aai/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/dzSxD5gMed5IZ9HlU4ck3Aai/pasted_image.png\"></a></div>",
        "id": 178936488,
        "sender_full_name": "matklad",
        "timestamp": 1571910849
    },
    {
        "content": "<blockquote>\n<p>what are you highlighting here, <span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> ?</p>\n</blockquote>\n<p>Just the 'find usages' PR that <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> was talking about, I didn't highlight any code</p>",
        "id": 178936501,
        "sender_full_name": "detrumi",
        "timestamp": 1571910861
    },
    {
        "content": "<p>It says <code>try_reduce_with</code> is a problem, it should be somewhere almong stdlib or analyzer's deps</p>",
        "id": 178936513,
        "sender_full_name": "matklad",
        "timestamp": 1571910884
    },
    {
        "content": "<p>So, it's try_reduce_with from rayon</p>",
        "id": 178936623,
        "sender_full_name": "matklad",
        "timestamp": 1571910965
    },
    {
        "content": "<p><a href=\"https://github.com/rayon-rs/rayon/blob/fc69e50f298b2f5fa2ce9be27827a0850f3bc8f2/src/iter/try_reduce_with.rs#L7-L19\" target=\"_blank\" title=\"https://github.com/rayon-rs/rayon/blob/fc69e50f298b2f5fa2ce9be27827a0850f3bc8f2/src/iter/try_reduce_with.rs#L7-L19\">https://github.com/rayon-rs/rayon/blob/fc69e50f298b2f5fa2ce9be27827a0850f3bc8f2/src/iter/try_reduce_with.rs#L7-L19</a></p>",
        "id": 178936659,
        "sender_full_name": "matklad",
        "timestamp": 1571910991
    },
    {
        "content": "<p>hmm</p>",
        "id": 178936722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571911053
    },
    {
        "content": "<p>I have to run now to get breakfast etc ready for the day, but I guess the obvious thing to do is to try and make a minmal test case from </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">try_reduce_with</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OP</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">op</span>: <span class=\"nc\">OP</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">OP</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Self</span>::<span class=\"n\">Item</span>: <span class=\"nc\">Try</span><span class=\"o\">&lt;</span><span class=\"nb\">Ok</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">try_reduce_with</span>::<span class=\"n\">try_reduce_with</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I'm wondering if it's something to do with the <code>Self::Item</code> normalization stuff</p>",
        "id": 178936840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571911124
    },
    {
        "content": "<p>er, sorry, wrong <code>try_reduce_with</code> I guess?</p>",
        "id": 178936860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571911143
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">try_reduce_with</span><span class=\"o\">&lt;</span><span class=\"n\">PI</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">pi</span>: <span class=\"nc\">PI</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">reduce_op</span>: <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">PI</span>: <span class=\"nc\">ParallelIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">R</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"nb\">Ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"nb\">Ok</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Try</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">full</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AtomicBool</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">consumer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TryReduceWithConsumer</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">reduce_op</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">reduce_op</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">full</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">full</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pi</span><span class=\"p\">.</span><span class=\"n\">drive_unindexed</span><span class=\"p\">(</span><span class=\"n\">consumer</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178936879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571911155
    },
    {
        "content": "<p>Are more minimal reproduction is </p>\n<div class=\"codehilite\"><pre><span></span>cargo run --release -p ra_cli -- analysis-stats --only &quot;try_reduce_with&quot; ~/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.2.0\n</pre></div>",
        "id": 178936910,
        "sender_full_name": "matklad",
        "timestamp": 1571911194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> there's an <code>analysis-stats</code> missing there, right</p>",
        "id": 178937022,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1571911285
    },
    {
        "content": "<p>yup, fixed</p>",
        "id": 178937036,
        "sender_full_name": "matklad",
        "timestamp": 1571911311
    },
    {
        "content": "<p>I must say, I love how useful <code>analysis_stats</code> is for pin-pointing an offending function: we didn't have quite as good infra in IntelliJ Rust</p>",
        "id": 178937170,
        "sender_full_name": "matklad",
        "timestamp": 1571911412
    },
    {
        "content": "<p>minimized example: <a href=\"https://gist.github.com/matklad/612f7c6142e0b27030711e6047cb55fc\" target=\"_blank\" title=\"https://gist.github.com/matklad/612f7c6142e0b27030711e6047cb55fc\">https://gist.github.com/matklad/612f7c6142e0b27030711e6047cb55fc</a> to a single file</p>",
        "id": 178944497,
        "sender_full_name": "matklad",
        "timestamp": 1571918527
    },
    {
        "content": "<p>it doesn't compile for various reasons, but still throws chalk into an allocating loop</p>",
        "id": 178944516,
        "sender_full_name": "matklad",
        "timestamp": 1571918556
    },
    {
        "content": "<p>So, the repro looks strange:</p>\n<ul>\n<li>it doesn't define any impls, only traits</li>\n<li>It needs std to actually work, if I disable sysroot loading, it is analysed instantly</li>\n</ul>",
        "id": 178945263,
        "sender_full_name": "matklad",
        "timestamp": 1571919285
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> , minimized to a rust-analyzer unit-test: <a href=\"https://github.com/matklad/rust-analyzer/commit/d907b00f440ca0a127e6975994a54391ce5a976d\" target=\"_blank\" title=\"https://github.com/matklad/rust-analyzer/commit/d907b00f440ca0a127e6975994a54391ce5a976d\">https://github.com/matklad/rust-analyzer/commit/d907b00f440ca0a127e6975994a54391ce5a976d</a></p>",
        "id": 178945948,
        "sender_full_name": "matklad",
        "timestamp": 1571919847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> would you like to look at it closer at some point? I feel you'll be much more effective than me there. On the rust-analyzer side, I've fixed the semi-unrelated bug in find-usages which was the primary trigger for this issue, so it's not urgent anymore</p>",
        "id": 178946165,
        "sender_full_name": "matklad",
        "timestamp": 1571920039
    },
    {
        "content": "<p>I wonder if we should spend some time building a c-reduce-like infra, which can go from <code>analysis-stats --with-deps .</code> to a single-small-file test automatically?</p>",
        "id": 178946412,
        "sender_full_name": "matklad",
        "timestamp": 1571920233
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> would you like to look at it closer at some point?</p>\n</blockquote>\n<p>sure, I can probably take a look on the weekend</p>",
        "id": 178947815,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1571921285
    },
    {
        "content": "<p>(the first thing to check here would be the logs from <code>CHALK_DEBUG=1</code>, btw)</p>",
        "id": 178948766,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1571921965
    },
    {
        "content": "<p>I'm going to try to run the unit test</p>",
        "id": 178948862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571922007
    },
    {
        "content": "<p>definitely <em>related</em> to associated types</p>",
        "id": 178949430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571922364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> I see a number of things like</p>\n<div class=\"codehilite\"><pre><span></span>ProjectionEq((TypeId(2))&lt;!0_1, StructId(0)&lt;(TypeId(0))&lt;!0_2&gt;, (TypeId(0))&lt;!0_2&gt;&gt;&gt; = !0_18446744073709551615)\n</pre></div>\n\n\n<p>are those gigantic indices normal for rust-analyzer?</p>",
        "id": 178949445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571922387
    },
    {
        "content": "<p>I'm referring to <code>!0_18446744073709551615</code></p>",
        "id": 178949453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571922397
    },
    {
        "content": "<p>I'm guessing that is some kind of internal id</p>",
        "id": 178949509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571922444
    },
    {
        "content": "<p>something else I see:</p>\n<p>It seems like we're seeing duplicate program clauses, leading us to have duplicate strands. Kind of wasteful. </p>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span>     62:: | program clause = for&lt;type&gt; Implemented(^0: TraitId(1)) :- Compatible, DownstreamType(^0), ¯\\_(ツ)_/¯\n     95:: | program clause = for&lt;type&gt; Implemented(^0: TraitId(1)) :- FromEnv(^0 as TraitId(1))\n    116:: | program clause = for&lt;type&gt; Implemented(^0: TraitId(1)) :- Compatible, DownstreamType(^0), ¯\\_(ツ)_/¯\n    149:: | program clause = for&lt;type&gt; Implemented(^0: TraitId(1)) :- FromEnv(^0 as TraitId(1))\n</pre></div>",
        "id": 178949651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571922555
    },
    {
        "content": "<p>not sure what gives rise to that</p>",
        "id": 178949655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571922558
    },
    {
        "content": "<blockquote>\n<p>I'm referring to <code>!0_18446744073709551615</code></p>\n</blockquote>\n<p>yeah, that's our representative for \"Unknown\" <span aria-label=\"neutral\" class=\"emoji emoji-1f610\" role=\"img\" title=\"neutral\">:neutral:</span></p>",
        "id": 178950182,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1571923002
    },
    {
        "content": "<p>we use a placeholder type with max index for that currently</p>",
        "id": 178950217,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1571923034
    },
    {
        "content": "<p>maybe you have a better idea how to represent that? ideally of course, we'd like to have an <code>Error</code> type on Chalk side</p>",
        "id": 178950244,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1571923055
    },
    {
        "content": "<blockquote>\n<p>maybe you have a better idea how to represent that? ideally of course, we'd like to have an <code>Error</code> type on Chalk side</p>\n</blockquote>\n<p>yeah maybe we should just add that</p>",
        "id": 178950267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571923077
    },
    {
        "content": "<p>OK, I think I know what the problem is</p>",
        "id": 178950593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571923291
    },
    {
        "content": "<p>let me see if I can make a minimized repro for now</p>",
        "id": 178950612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571923308
    },
    {
        "content": "<blockquote>\n<p>yeah maybe we should just add that</p>\n</blockquote>\n<p>I could try doing that, if we are agreed that it should be added <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 178952525,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1571924592
    },
    {
        "content": "<p>(distracted, but I think it has something to do with processing of answers causing new projection-eq subgoals)</p>",
        "id": 178952648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571924675
    },
    {
        "content": "<p>I thought we avoided doing that, but something's going wrong</p>",
        "id": 178952654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571924681
    },
    {
        "content": "<blockquote>\n<p>I could try doing that, if we are agreed that it should be added <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>\n</blockquote>\n<p>I think it makes sense, yeah</p>",
        "id": 178952674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571924695
    },
    {
        "content": "<p>I looked a bit more into this test this morning</p>",
        "id": 179333999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572359464
    },
    {
        "content": "<p>I haven't yet produced the \"chalk example\" that I want to</p>",
        "id": 179334010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572359471
    },
    {
        "content": "<p>but if you change <code>try_reduce_with</code> to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">try_reduce_with</span><span class=\"o\">&lt;</span><span class=\"n\">PI</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">pi</span>: <span class=\"nc\">PI</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">reduce_op</span>: <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">PI</span>: <span class=\"nc\">ParallelIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">R</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"nb\">Ok</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- changed this line from FnOnce(T::Ok, T::Ok)</span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Try</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pi</span><span class=\"p\">.</span><span class=\"n\">drive_unindexed</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>it seems like everything works more like I expect</p>",
        "id": 179334067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572359517
    },
    {
        "content": "<p>I think the next obvious step would be to put a bit of energy into making the standalone chalk test, which shouldn't be that hard</p>",
        "id": 179334130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572359538
    },
    {
        "content": "<p>although some of the things that rust-analyzer are doing</p>",
        "id": 179334235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572359600
    },
    {
        "content": "<p>are not <em>trivial</em> for us to do in a test</p>",
        "id": 179334244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572359611
    },
    {
        "content": "<p>and may or may not play an important role</p>",
        "id": 179334254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572359615
    },
    {
        "content": "<p>in particular rust-analyzer is inserting \"normalized\" associated types into the environment (for <code>T::Ok</code>), which I don't think chalk's testing infrastructure alows us to do right now</p>",
        "id": 179334324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572359644
    },
    {
        "content": "<p>maybe worth making a syntax for that</p>",
        "id": 179334332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572359651
    },
    {
        "content": "<p>it may be key; my naive attempt to recreate the problem failed -- <a href=\"https://github.com/nikomatsakis/chalk-ndm/blob/rust-anayzer-infinite-growth/src/test/projection.rs#L680\" target=\"_blank\" title=\"https://github.com/nikomatsakis/chalk-ndm/blob/rust-anayzer-infinite-growth/src/test/projection.rs#L680\">this test passes</a></p>",
        "id": 179335508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572360291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let's create an inssue on the chalk repo about this, lest it slips through the cracks. I can do that if you like.</p>",
        "id": 180276073,
        "sender_full_name": "matklad",
        "timestamp": 1573249865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> thanks. I had indeed forgotten about it</p>",
        "id": 180276099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249880
    },
    {
        "content": "<p>I remember being close to understanding the problem at     some point</p>",
        "id": 180276108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249890
    },
    {
        "content": "<p>I'll have to look back in the history...</p>",
        "id": 180276126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249907
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/chalk/issues/280\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/280\">https://github.com/rust-lang/chalk/issues/280</a></p>",
        "id": 180305947,
        "sender_full_name": "matklad",
        "timestamp": 1573293696
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 180313089,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573305916
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 180313093,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573305925
    },
    {
        "content": "<p>Whoops wrong thread</p>",
        "id": 180313113,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573305940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> or <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> : remind me how I redirect to use chalk from a local directory?</p>",
        "id": 180456671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573503663
    },
    {
        "content": "<p>There’s commented out patch section in the root cargo.toml</p>",
        "id": 180456947,
        "sender_full_name": "matklad",
        "timestamp": 1573503889
    },
    {
        "content": "<p>Smth like this should work: <a href=\"https://github.com/rust-analyzer/rust-analyzer/commit/54f77ad68dc47ca8d99a12f1467bebe8e5441d7e#diff-80398c5faae3c069e4e6aa2ed11b28c0\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/commit/54f77ad68dc47ca8d99a12f1467bebe8e5441d7e#diff-80398c5faae3c069e4e6aa2ed11b28c0\">https://github.com/rust-analyzer/rust-analyzer/commit/54f77ad68dc47ca8d99a12f1467bebe8e5441d7e#diff-80398c5faae3c069e4e6aa2ed11b28c0</a></p>",
        "id": 180457036,
        "sender_full_name": "matklad",
        "timestamp": 1573503967
    },
    {
        "content": "<p>(We should just keep commended out salsa and chalk replacements there I think)</p>",
        "id": 180457046,
        "sender_full_name": "matklad",
        "timestamp": 1573503989
    },
    {
        "content": "<p>OK, so the another relevant factor is that rust-analyzer sets the max-size to 4</p>",
        "id": 180458661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573505320
    },
    {
        "content": "<p>I still haven't reproduced this, but if I se the max-size to 10, it goes away</p>",
        "id": 180458666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573505329
    },
    {
        "content": "<p>ok, I reproduced the problem <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 180460077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573506591
    },
    {
        "content": "<blockquote>\n<p>OK, so the another relevant factor is that rust-analyzer sets the max-size to 4</p>\n</blockquote>\n<p>I set that so low because of the performance problems, it might not be necessary anymore with floundering</p>",
        "id": 180465293,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1573510875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> well it caught a useful edge case :)</p>",
        "id": 180469334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573515568
    },
    {
        "content": "<p>We continue to get bug reports which I think bottom out in this issue</p>",
        "id": 181119639,
        "sender_full_name": "matklad",
        "timestamp": 1574176103
    },
    {
        "content": "<p>(as in, this seems like a nice bug to fix :) )</p>",
        "id": 181119661,
        "sender_full_name": "matklad",
        "timestamp": 1574176116
    },
    {
        "content": "<p>/me hits this while hacking on rust-analyzer itself :)</p>",
        "id": 181138842,
        "sender_full_name": "matklad",
        "timestamp": 1574187301
    },
    {
        "content": "<p>I have a fix for this here: <a href=\"https://github.com/rust-lang/chalk/pull/294\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/294\">https://github.com/rust-lang/chalk/pull/294</a></p>",
        "id": 181672757,
        "sender_full_name": "Jack Huey",
        "timestamp": 1574453290
    },
    {
        "content": "<p>However, it might not be the <em>most correct</em> fix</p>",
        "id": 181672762,
        "sender_full_name": "Jack Huey",
        "timestamp": 1574453301
    },
    {
        "content": "<p>hmm</p>",
        "id": 181673735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454053
    },
    {
        "content": "<p>I had a fix in a branch too</p>",
        "id": 181673741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454057
    },
    {
        "content": "<p>I guess I forgot to open it?</p>",
        "id": 181673744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454062
    },
    {
        "content": "<p>well I was basically changing how unification works</p>",
        "id": 181673768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454094
    },
    {
        "content": "<p>to let an inference variable get unified with a projection</p>",
        "id": 181673781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454112
    },
    {
        "content": "<p>that said, I think <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>'s PR is probbaly also ok, and I think it will fix the issue as well, sinceI think this scenario can only arise from the environment</p>",
        "id": 181673827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I would still be interested to see your fix. I'm wondering if it would have any effect on <a href=\"https://github.com/rust-lang/rust/issues/111\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/111\">#111</a> or <a href=\"https://github.com/rust-lang/rust/issues/234\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/234\">#234</a></p>",
        "id": 181691185,
        "sender_full_name": "Jack Huey",
        "timestamp": 1574469712
    }
]