[
    {
        "content": "<p>Okay, can someone help me figure out why <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/generic-associated-types/issue-74684-1.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/generic-associated-types/issue-74684-1.rs</a> should error (it does), or if this is a bug</p>",
        "id": 248872043,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628526479
    },
    {
        "content": "<p>wait nvm</p>",
        "id": 248872126,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628526502
    },
    {
        "content": "<p>I missed the \"lifetime <code>'a</code> defined here\"</p>",
        "id": 248872294,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628526598
    },
    {
        "content": "<p>and of course, it wasn't until <em>right after</em> I post that I see it</p>",
        "id": 248872369,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628526617
    },
    {
        "content": "<p>So, I'm like 70% sure that <a href=\"https://github.com/rust-lang/rust/issues/87429\">#87429</a> is an issue that is highlighting something \"incomplete\" about our handling of GATs</p>",
        "id": 248884906,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532271
    },
    {
        "content": "<p>So, at some point we need to prove</p>\n<div class=\"codehilite\"><pre><span></span><code>TraitPredicate(&lt;&lt;I32 as Family&gt;::Member&lt;ReEarlyBound(0, &#39;a)&gt; as std::cmp::PartialEq&lt;&lt;I32 as Family&gt;::Member&lt;ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:6 ~ issue_87429[d218]::Family::Member::&#39;b), &#39;b) })&gt;&gt;&gt;)\n</code></pre></div>",
        "id": 248884973,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532319
    },
    {
        "content": "<p>So, we first try to normalize that</p>",
        "id": 248885061,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532370
    },
    {
        "content": "<p>First, we get to <code>&lt;I32 as Family&gt;::Member&lt;ReEarlyBound(0, 'a)&gt;</code> and normalize to <code>i32</code> fine</p>",
        "id": 248885099,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532394
    },
    {
        "content": "<p>Then we get to <code>&lt;I32 as Family&gt;::Member&lt;ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:6 ~ issue_87429[d218]::Family::Member::'b), 'b) })&gt;</code> and we run into problems, but probably not because of why you might think</p>",
        "id": 248885162,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532434
    },
    {
        "content": "<p>(we do actually try the late bound lifetime here correctly, so that's not it)</p>",
        "id": 248885334,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532513
    },
    {
        "content": "<p>So, we eventually try to <code>opt_normalize</code> <code>ProjectionTy { substs: [I32, RePlaceholder(Placeholder { universe: U1, name: BrNamed(DefId(0:6 ~ issue_87429[d218]::Family::Member::'b), 'b) })], item_def_id: DefId(0:4 ~ issue_87429[d218]::Family::Member) }</code></p>",
        "id": 248885403,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532554
    },
    {
        "content": "<p>This is fine: we've replaced late bound vars by placeholders, that's right</p>",
        "id": 248885431,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532576
    },
    {
        "content": "<p>There's a predicate in the <code>param_env</code> that we can use to project this:</p>\n<div class=\"codehilite\"><pre><span></span><code>Binder(ProjectionPredicate(ProjectionTy { substs: [I32, ReEarlyBound(0, &#39;a)], item_def_id: DefId(0:4 ~ issue_87429[d218]::Family::Member) }, i32), [])\n</code></pre></div>",
        "id": 248885566,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532627
    },
    {
        "content": "<p>Well, using this, we eventually end up with the region constraints <code>ReEarlyBound('a) == RePlaceholder('b)</code></p>",
        "id": 248885701,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532691
    },
    {
        "content": "<p>That eventually fails</p>",
        "id": 248885713,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532697
    },
    {
        "content": "<p>Well...this is wrong.</p>",
        "id": 248885728,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532704
    },
    {
        "content": "<p>That param_env predicate <em>should</em> be <code>for&lt;'a&gt; &lt;I32 as Family&gt;::Member&lt;'a&gt; == i32</code></p>",
        "id": 248885830,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532742
    },
    {
        "content": "<p>Pay attention to the use of bound vars instead of an early bound region</p>",
        "id": 248885861,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532763
    },
    {
        "content": "<p>But, I'm unsure if just \"fixing\" that will work. I think this is a deeper issue</p>",
        "id": 248885950,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628532819
    }
]