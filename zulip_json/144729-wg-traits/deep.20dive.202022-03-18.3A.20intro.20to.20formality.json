[
    {
        "content": "<p>Howdy folks</p>",
        "id": 275798501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608429
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 275798515,
        "sender_full_name": "lcnr",
        "timestamp": 1647608439
    },
    {
        "content": "<p>I've like 99.5% finished writing up the material I wanted to :)</p>",
        "id": 275798532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608444
    },
    {
        "content": "<p>as usual, I got a bit ambitious</p>",
        "id": 275798536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608447
    },
    {
        "content": "<p>hiya!</p>",
        "id": 275798539,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1647608448
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 275798593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647608469
    },
    {
        "content": "<p>Hey all :) I'm excited</p>",
        "id": 275798610,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647608479
    },
    {
        "content": "<p>I'm trying to decide how to run this-- I was thinking of the following:</p>",
        "id": 275798617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608482
    },
    {
        "content": "<ul>\n<li>Here is a link to the document, <a href=\"https://hackmd.io/@nikomatsakis/H1E6PVTZ9\">a MIR Formality, goals and the reality</a></li>\n</ul>",
        "id": 275798661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608504
    },
    {
        "content": "<p>It's quite long</p>",
        "id": 275798671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608510
    },
    {
        "content": "<p>so maybe...</p>",
        "id": 275798676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608513
    },
    {
        "content": "<ul>\n<li>Folks can read and ask questions as they go?</li>\n</ul>",
        "id": 275798684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608518
    },
    {
        "content": "<p>Or we could proceed section by section?</p>",
        "id": 275798689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608522
    },
    {
        "content": "<p>Or I can copy and paste text :P</p>",
        "id": 275798740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608530
    },
    {
        "content": "<p>if this were amazon, we would all turn off our cameras and read for 30 minutes, leaving comments and then asking questions</p>",
        "id": 275798757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608542
    },
    {
        "content": "<p>but if this were amazon, the doc prob wouldn't be so long :)</p>",
        "id": 275798774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608550
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/02z0nqVV67A5kkmtBZk7l0kJ/Screenshot-from-2022-03-18-14-02-19.png\">Screenshot-from-2022-03-18-14-02-19.png</a>  the link seems wrong ^^</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/02z0nqVV67A5kkmtBZk7l0kJ/Screenshot-from-2022-03-18-14-02-19.png\" title=\"Screenshot-from-2022-03-18-14-02-19.png\"><img src=\"/user_uploads/4715/02z0nqVV67A5kkmtBZk7l0kJ/Screenshot-from-2022-03-18-14-02-19.png\"></a></div>",
        "id": 275798782,
        "sender_full_name": "lcnr",
        "timestamp": 1647608552
    },
    {
        "content": "<p><a href=\"https://hackmd.io/@nikomatsakis/H1E6PVTZ9\">https://hackmd.io/@nikomatsakis/H1E6PVTZ9</a></p>",
        "id": 275798796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608564
    },
    {
        "content": "<p>fixed</p>",
        "id": 275798810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608575
    },
    {
        "content": "<p>How about a 10-15 minute skim to start?</p>",
        "id": 275798812,
        "sender_full_name": "pierwill",
        "timestamp": 1647608575
    },
    {
        "content": "<p>ok, how about this</p>",
        "id": 275798847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608596
    },
    {
        "content": "<p>I will go put on a fresh pot of coffee :P</p>",
        "id": 275798855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608599
    },
    {
        "content": "<p>y'all read and i'll be back soon :)</p>",
        "id": 275798871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608605
    },
    {
        "content": "<p>actually maybe i'll briefly fill in the lsat two sections :)</p>",
        "id": 275798909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647608629
    },
    {
        "content": "<p>Okay, react with <span aria-label=\"book\" class=\"emoji emoji-1f4d6\" role=\"img\" title=\"book\">:book:</span>when you start <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> when you're done</p>",
        "id": 275798982,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647608651
    },
    {
        "content": "<p>Do we want to add questions/comments somewhere on the document?</p>",
        "id": 275799143,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647608745
    },
    {
        "content": "<p>I guess using hackmd comments is fine</p>",
        "id": 275800025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647609134
    },
    {
        "content": "<p>I have a procedure question. If T-ypes owns a mir formality, and the obvious idea is to keep it up to date with the language, how are we going to make sure that we do keep up to date? Hard blocker for all new feature stabilizations to have formality tests?</p>",
        "id": 275800400,
        "sender_full_name": "oli",
        "timestamp": 1647609353
    },
    {
        "content": "<p>I think so, yes. Imo that's the right thing to do.</p>",
        "id": 275800597,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647609461
    },
    {
        "content": "<p>Yes</p>",
        "id": 275800600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647609463
    },
    {
        "content": "<p>That would be my plan, anyway. Similar to rust reference.</p>",
        "id": 275800619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647609475
    },
    {
        "content": "<p>That said, for now, it only covers MIR and \"back\"</p>",
        "id": 275800668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647609488
    },
    {
        "content": "<p>so that requirement is easy to satisfy for things that are purely front-end</p>",
        "id": 275800695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647609504
    },
    {
        "content": "<p>At what point should we start blocking features on a formality test?</p>",
        "id": 275800697,
        "sender_full_name": "bjorn3",
        "timestamp": 1647609505
    },
    {
        "content": "<p>Once formality is complete or somewhere before that point?</p>",
        "id": 275800739,
        "sender_full_name": "bjorn3",
        "timestamp": 1647609521
    },
    {
        "content": "<p>I guess all tracking issues get a 4th checkbox: \"formality adjusted\"</p>",
        "id": 275800779,
        "sender_full_name": "oli",
        "timestamp": 1647609546
    },
    {
        "content": "<p>that's a good question, worth discussing. Clearly \"not yet\"-- but it probably doesn't require waiting until it's complete. There's probably some middle-ground where we block things on \"types team signoff\", which might include adding the feature to a \"to do\" list</p>",
        "id": 275800797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647609556
    },
    {
        "content": "<p>if it requires some details that haven't been done yet</p>",
        "id": 275800828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647609568
    },
    {
        "content": "<p>that check box we could add immediately, though I did want to create an RFC for the types team. I should prob just do that. I was waiting until we got things a bit more \"up and going\"</p>",
        "id": 275800861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647609588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275800779\">said</a>:</p>\n<blockquote>\n<p>I guess all tracking issues get a 4th checkbox: \"formality adjusted\"</p>\n</blockquote>\n<p>probably open an issue on the formality repo and link it from the tracking issue?</p>",
        "id": 275800955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647609621
    },
    {
        "content": "<p>there's a more interesting question, I think</p>",
        "id": 275800987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647609639
    },
    {
        "content": "<p>which is how to model \"feature gates\" :)</p>",
        "id": 275800994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647609644
    },
    {
        "content": "<p>I've thought a bit about it but not too much. It'd be nice to be able to land \"in progress\" features without disturbing the whole. We might be able to use the \"define-extended-language\" features of PLT Redex for that, that's precisely what they're designed for</p>",
        "id": 275801032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647609676
    },
    {
        "content": "<p>though I think it may require a bit of macro hackery to get just the behavior we want</p>",
        "id": 275801051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647609692
    },
    {
        "content": "<p>Great stuff in this doc, Niko!</p>",
        "id": 275801150,
        "sender_full_name": "pierwill",
        "timestamp": 1647609737
    },
    {
        "content": "<p>I know folks are still reading... So i'll draft up my high-level Question and post it in a couple minutes</p>",
        "id": 275801232,
        "sender_full_name": "pierwill",
        "timestamp": 1647609785
    },
    {
        "content": "<p>my coffee is probably finished brewing</p>",
        "id": 275801318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647609838
    },
    {
        "content": "<p>don’t know how y’all read so fast <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 275801323,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1647609842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275800797\">said</a>:</p>\n<blockquote>\n<p>that's a good question, worth discussing. Clearly \"not yet\"-- but it probably doesn't require waiting until it's complete. There's probably some middle-ground where we block things on \"types team signoff\", which might include adding the feature to a \"to do\" list</p>\n</blockquote>\n<p>Yes, I really like this. It's something I've been doing in the back of my mind for some newer features (how could we implement this in Chalk)</p>",
        "id": 275801403,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647609864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"426609\">Michael Goulet (compiler-errors)</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275801323\">said</a>:</p>\n<blockquote>\n<p>don’t know how y’all read so fast <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>It took several minutes for my printer to just PRINT the doc</p>",
        "id": 275801408,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1647609868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"426609\">Michael Goulet (compiler-errors)</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275801323\">said</a>:</p>\n<blockquote>\n<p>don’t know how y’all read so fast <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>what's left to me poor bad english speaker?</p>",
        "id": 275801415,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647609872
    },
    {
        "content": "<p>Everyone take their time</p>",
        "id": 275801433,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647609885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275801318\">said</a>:</p>\n<blockquote>\n<p>my coffee is probably finished brewing</p>\n</blockquote>\n<p>brew more <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 275801507,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647609922
    },
    {
        "content": "<p>Question about implementation framework: it seems that coq is the most popular at POPL etc.  How well do you think the framework you're using will integrate into other PL tools/efforts?</p>",
        "id": 275801560,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1647609959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"324174\">Daniel Schwartz-Narbonne</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275801560\">said</a>:</p>\n<blockquote>\n<p>Question about implementation framework: it seems that coq is the most popular at POPL etc.  How well do you think the framework you're using will integrate into other PL tools/efforts?</p>\n</blockquote>\n<p>I've been meaning to follow up with Robby Findler about this. As you can see, the notation is quite high-level, so if nothing else I think it would be easy to manually transcribe things. But I would assume people have made efforts to \"export\" rules and things from PLT Redex to other formats.</p>",
        "id": 275801659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610000
    },
    {
        "content": "<p>I'm going to add a section at the bottom for questions</p>",
        "id": 275801683,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647610018
    },
    {
        "content": "<p>sounds good</p>",
        "id": 275801723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610040
    },
    {
        "content": "<p>We can always move them to a separate doc later if that makes sense</p>",
        "id": 275801726,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647610040
    },
    {
        "content": "<p>I was thinking that I would like to make an mdbook for formality and this doc would be the \"start of it\". (Actually, <span class=\"user-mention\" data-user-id=\"316352\">@pierwill</span>, I was thinking of asking if you'd like to help with that)</p>",
        "id": 275801780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610068
    },
    {
        "content": "<p>Very definitely yes</p>",
        "id": 275801796,
        "sender_full_name": "pierwill",
        "timestamp": 1647610080
    },
    {
        "content": "<p>So when it comes to formalizing Rust, what I know most is the Oxide presentation, which aims to model the borrow checker, calling it \"the essence of Rust\". In this doc you say mir-formality will be </p>\n<blockquote>\n<p>the “primary source” for “what Rust means”</p>\n</blockquote>\n<p>Maybe this is still to be covered in the operational semantics part, but my question, I guess, is what does \"what Rust means\" mean? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 275802235,
        "sender_full_name": "pierwill",
        "timestamp": 1647610268
    },
    {
        "content": "<p>\"what Rust programs are legal and -- if I execute a Rust program -- what should happen\"</p>",
        "id": 275802318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610316
    },
    {
        "content": "<p>Cool</p>",
        "id": 275802368,
        "sender_full_name": "pierwill",
        "timestamp": 1647610325
    },
    {
        "content": "<p>this requires defining a model of the machine executing the Rust program</p>",
        "id": 275802380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610329
    },
    {
        "content": "<p>miri has kind of already done that</p>",
        "id": 275802393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610332
    },
    {
        "content": "<p>miri and the rust compiler are both other answers to that question :)</p>",
        "id": 275802415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610343
    },
    {
        "content": "<p>Will this cover concurrency?</p>",
        "id": 275802421,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1647610345
    },
    {
        "content": "<p>I expect so, but that's... hard too :)</p>",
        "id": 275802447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275802447\">said</a>:</p>\n<blockquote>\n<p>I expect so, but that's... hard too :)</p>\n</blockquote>\n<p>That's what makes concurrency fun, for certain definitions of fun</p>",
        "id": 275802505,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1647610385
    },
    {
        "content": "<p>I'm going to add some of these questions to the doc</p>",
        "id": 275802677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610457
    },
    {
        "content": "<p>and maybe put a few of my own :)</p>",
        "id": 275802685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610463
    },
    {
        "content": "<p>The looming question i have is how this is different than a \"specification\" <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 275802798,
        "sender_full_name": "pierwill",
        "timestamp": 1647610534
    },
    {
        "content": "<p>Okay, so looks like nearly everyone has finished reading</p>",
        "id": 275802830,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647610554
    },
    {
        "content": "<p>How do we want to move forward? Everyone add questions at the end of the doc and go through them individually?</p>",
        "id": 275802917,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647610585
    },
    {
        "content": "<p>Or maybe Niko wants to \"moderate\" in some way and talk about specific ones</p>",
        "id": 275802941,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647610602
    },
    {
        "content": "<blockquote>\n<p>The looming question i have is how this is different than a \"specification\" <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>\n</blockquote>\n<p>I though it was an executable spec?</p>",
        "id": 275802950,
        "sender_full_name": "oli",
        "timestamp": 1647610609
    },
    {
        "content": "<p>I also see comments :)</p>",
        "id": 275802977,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647610623
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/1RcvjcXhDBEHZtUquN7TT5_G/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/1RcvjcXhDBEHZtUquN7TT5_G/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/1RcvjcXhDBEHZtUquN7TT5_G/image.png\"></a></div>",
        "id": 275803022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610651
    },
    {
        "content": "<p>s/bruno/specification/</p>",
        "id": 275803032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610655
    },
    {
        "content": "<p>We have more people done than started.</p>",
        "id": 275803050,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1647610663
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/dRIBHHo2-p1ykEv-ck99hBRk/Screen-Shot-2022-03-18-at-9.37.54-AM.png\">Screen-Shot-2022-03-18-at-9.37.54-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/dRIBHHo2-p1ykEv-ck99hBRk/Screen-Shot-2022-03-18-at-9.37.54-AM.png\" title=\"Screen-Shot-2022-03-18-at-9.37.54-AM.png\"><img src=\"/user_uploads/4715/dRIBHHo2-p1ykEv-ck99hBRk/Screen-Shot-2022-03-18-at-9.37.54-AM.png\"></a></div>",
        "id": 275803085,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1647610681
    },
    {
        "content": "<p>but in all seriousness, it is a kind of specification: it only covers MIR and back, obviously, and it's incomplete and all the things.</p>",
        "id": 275803086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610681
    },
    {
        "content": "<p>and back... to Rust syntax, yes?</p>",
        "id": 275803174,
        "sender_full_name": "pierwill",
        "timestamp": 1647610715
    },
    {
        "content": "<p>I also think a \"full spec\" would wind up including other details we'll maybe never get to</p>",
        "id": 275803178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610717
    },
    {
        "content": "<p>no, it doesn't include rust syntax right now</p>",
        "id": 275803191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610724
    },
    {
        "content": "<p>it starts at MIR</p>",
        "id": 275803201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610729
    },
    {
        "content": "<p>and goes \"back\" to ... well, not LLVM exactly, but miri</p>",
        "id": 275803209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610738
    },
    {
        "content": "<p>How do object layouts fit into this spec?</p>",
        "id": 275803228,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1647610747
    },
    {
        "content": "<p>let's throw that one in the doc</p>",
        "id": 275803245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610757
    },
    {
        "content": "<p>I guess, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, I can pick some items for discussion :)</p>",
        "id": 275803294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610781
    },
    {
        "content": "<p>I think I answered all the inline questions</p>",
        "id": 275803326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610792
    },
    {
        "content": "<p>I guess maybe this is a good one, it's a question from <em>me</em> :)</p>",
        "id": 275803414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610821
    },
    {
        "content": "<h2>If this is a complete model, isn't that just an implementation?</h2>",
        "id": 275803419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610822
    },
    {
        "content": "<p>so far I wrote</p>",
        "id": 275803430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610828
    },
    {
        "content": "<p>Not really. It leaves out a ton of stuff:</p>\n<ul>\n<li>diagnostics</li>\n<li>low-level ABI details</li>\n<li>parser and concrete rust syntax</li>\n</ul>",
        "id": 275803432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610829
    },
    {
        "content": "<p>I'm imagining the mdbook for this eventually including a mini Redex intro tailored to understand this codebase itself.</p>",
        "id": 275803439,
        "sender_full_name": "pierwill",
        "timestamp": 1647610832
    },
    {
        "content": "<p>however, I would also say</p>",
        "id": 275803454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610840
    },
    {
        "content": "<p>if it turns out that my ambitions are too high, and it's not practical to model as much as I want, that we would optimize for \"understanding and deciding if new lang features are sound\"</p>",
        "id": 275803484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610856
    },
    {
        "content": "<p>and I kind of feel like--- we have to be able to model enough to do that</p>",
        "id": 275803520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610870
    },
    {
        "content": "<p>or we are in serious trouble :)</p>",
        "id": 275803527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610873
    },
    {
        "content": "<p>if that means we can leave out some details of Rust's type system ... ok</p>",
        "id": 275803565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610891
    },
    {
        "content": "<p>I really <em>like</em> the incremental nature of the project.</p>",
        "id": 275803577,
        "sender_full_name": "pierwill",
        "timestamp": 1647610897
    },
    {
        "content": "<p>So, what kind of performance are you expecting here?</p>",
        "id": 275803579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647610897
    },
    {
        "content": "<p>but it is not obvious to me how we'd be able to do that</p>",
        "id": 275803584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275803579\">said</a>:</p>\n<blockquote>\n<p>So, what kind of performance are you expecting here?</p>\n</blockquote>\n<p>toy programs work</p>",
        "id": 275803608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610911
    },
    {
        "content": "<p>Is this something we can reasonably lower+test the entire Rust test suuite on?</p>",
        "id": 275803623,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647610916
    },
    {
        "content": "<p>What about Chalk tests?</p>",
        "id": 275803642,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647610922
    },
    {
        "content": "<p>probably taht, yes</p>",
        "id": 275803661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610923
    },
    {
        "content": "<p>chalk tests too</p>",
        "id": 275803690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610927
    },
    {
        "content": "<p>well, maybe</p>",
        "id": 275803706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610936
    },
    {
        "content": "<p>libstd might be hard :)</p>",
        "id": 275803710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610939
    },
    {
        "content": "<p>I could think we could have something that extracts a \"subset\" of Rust tests</p>",
        "id": 275803752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610957
    },
    {
        "content": "<p>maybe if we do more like the chalk model, where things are \"lowered as needed\"</p>",
        "id": 275803770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610964
    },
    {
        "content": "<p>I think we'll want to be clear about what this model <em>doesn't cover</em>: both what it doesn't cover _yet_ and what it never aims to cover</p>",
        "id": 275803795,
        "sender_full_name": "pierwill",
        "timestamp": 1647610973
    },
    {
        "content": "<p>yes, I think it makes sense to define a \"first goal\", and then evaluate whether to bring other things in</p>",
        "id": 275803848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647610995
    },
    {
        "content": "<p>to loop back to <span class=\"user-mention\" data-user-id=\"324174\">@Daniel Schwartz-Narbonne</span>'s question about layouts, I am expecting to exclude operational semantics from that first goal</p>",
        "id": 275803872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611008
    },
    {
        "content": "<p>well</p>",
        "id": 275803889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611014
    },
    {
        "content": "<p>not sure :) depends how many people want to contribute!</p>",
        "id": 275803901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611020
    },
    {
        "content": "<p>but I think that layouts become quite relevant at that point</p>",
        "id": 275803920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611030
    },
    {
        "content": "<p>I mean, layouts are already import for <em>some</em> trait solving</p>",
        "id": 275804029,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647611066
    },
    {
        "content": "<p>right?</p>",
        "id": 275804033,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647611068
    },
    {
        "content": "<p>(Is it <code>DispatchFromDyn</code>?)</p>",
        "id": 275804041,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647611078
    },
    {
        "content": "<p>sigh</p>",
        "id": 275804044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611081
    },
    {
        "content": "<p>yes, probably</p>",
        "id": 275804052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611086
    },
    {
        "content": "<p>What's an example of something op semantics covers in this context? <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span>  ( Might not be a well-formed Q)</p>",
        "id": 275804056,
        "sender_full_name": "pierwill",
        "timestamp": 1647611087
    },
    {
        "content": "<p>so we'll have to handle enough of that</p>",
        "id": 275804059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316352\">@pierwill</span> the idea of operational semantics is this</p>",
        "id": 275804071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611098
    },
    {
        "content": "<p>what I've shown so far is basically a definition for a program P</p>",
        "id": 275804121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611104
    },
    {
        "content": "<p>operational semantics adds in a machine state M</p>",
        "id": 275804133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611111
    },
    {
        "content": "<p>think of it is \"all the RAM, registers, etc\"</p>",
        "id": 275804146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611115
    },
    {
        "content": "<p>then it defines a function <code>step((M, P)) -&gt; (M, P)</code></p>",
        "id": 275804163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611125
    },
    {
        "content": "<p>i.e., given a program P and some machine M that is executing the program, take one step</p>",
        "id": 275804206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611145
    },
    {
        "content": "<p>(there are different ways to do it, this is the \"small step\" style, and it's what I would expect to do)</p>",
        "id": 275804215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611152
    },
    {
        "content": "<p>So it's the reduction rules? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 275804277,
        "sender_full_name": "pierwill",
        "timestamp": 1647611167
    },
    {
        "content": "<p>yes</p>",
        "id": 275804282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611172
    },
    {
        "content": "<p>but layouts are clearly important here because we want to model unsafe code -- roughly at the level miri does</p>",
        "id": 275804342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611203
    },
    {
        "content": "<p>so you could have type punning</p>",
        "id": 275804371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611213
    },
    {
        "content": "<p>[memory] layouts ?</p>",
        "id": 275804387,
        "sender_full_name": "pierwill",
        "timestamp": 1647611222
    },
    {
        "content": "<p>right</p>",
        "id": 275804398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611227
    },
    {
        "content": "<p>so e.g. you could have some block of memory that was written with a <code>u32</code> and then you union it with a <code>[u8; 4]</code> and read from that array... etc</p>",
        "id": 275804435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611250
    },
    {
        "content": "<p>I expect we could have a higher level view of the operational semantics? Depending on the goals (I mean the steps would be the same, but you don't need layouts etc for soundness proofs, I think?)</p>",
        "id": 275804440,
        "sender_full_name": "Nick Cameron",
        "timestamp": 1647611254
    },
    {
        "content": "<p>if we wanted to exclude unsafe code</p>",
        "id": 275804478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611272
    },
    {
        "content": "<p>I imagine yes?</p>",
        "id": 275804482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611276
    },
    {
        "content": "<p>might be a good first step :)</p>",
        "id": 275804543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611288
    },
    {
        "content": "<p>but I feel like miri has already done the hard work there</p>",
        "id": 275804548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611294
    },
    {
        "content": "<p>actually I wonder</p>",
        "id": 275804557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611298
    },
    {
        "content": "<p>we might want to take layouts as <em>inputs</em> to the semantics</p>",
        "id": 275804566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611303
    },
    {
        "content": "<p>that is probably one of those \"platform specific\" things we want to exclude from this model</p>",
        "id": 275804581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611314
    },
    {
        "content": "<p>I'm basically happy to add inputs for things we don't feel like modeling right now-- another example might be \"variance inference\"</p>",
        "id": 275804638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611344
    },
    {
        "content": "<p>(that's not too hard to do, just tedious)</p>",
        "id": 275804649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611350
    },
    {
        "content": "<p>obviously \"rust surface syntax -&gt; MIR\" is the big one :)</p>",
        "id": 275804679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611367
    },
    {
        "content": "<p>eventually I would like to model name resolution and stuff</p>",
        "id": 275804693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611377
    },
    {
        "content": "<p>(Back to your question, <span class=\"user-mention\" data-user-id=\"316352\">@pierwill</span>, of how this differs from a true \"Rust specification\")</p>",
        "id": 275804737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611400
    },
    {
        "content": "<p>(though I wouldn't object if people wanted to toy with modeling that already, it's not part of my first set of goals nor needed for most of the questions I consider most pressing)</p>",
        "id": 275804831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611434
    },
    {
        "content": "<p>arguably hygiene is pressing I guess :)</p>",
        "id": 275804839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611438
    },
    {
        "content": "<p>ok, next question?</p>",
        "id": 275804891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611465
    },
    {
        "content": "<h2>Are there any fundamental differences to Chalk, so far?</h2>\n<blockquote>\n<p>Yes. Chalk does not have the concept of invariants and handles implied bounds in a different way (<code>FromEnv</code> goals). Chalk also has one structural setup that has to be ported to formality -- it generates program clauses \"on demand\". This is required because actually the set of program clauses for a Rust program is potentially infinite (think of e.g. auto traits). I've been debating the best way to model this with PLT Redex and in particular whether it's important to preserve the various layers I've shown here, it might be easier if we merged everything into one.</p>\n</blockquote>",
        "id": 275804905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611474
    },
    {
        "content": "<p>At one point should we adjust Chalk?</p>",
        "id": 275804951,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647611498
    },
    {
        "content": "<p>(I guess that bleeds into my other question)</p>",
        "id": 275804971,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647611510
    },
    {
        "content": "<p>maybe we jump to that?</p>",
        "id": 275804987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611521
    },
    {
        "content": "<h2>Is this an \"ideal\" Rust model, or a \"practical\" one?</h2>\n<ul>\n<li>Current Rust semantics, or the one we want</li>\n</ul>\n<blockquote>\n<p>You're asking the right question, and it's something I wanted to discuss. Right now it's the \"ideal\" model in the sense that I am using it to show how some extensions to Rust would work, but I think it's important that it be the \"practical\" one too. It's not hard to disable the implied bounds (actually, limit them to supertraits) and remove support for cycles. What's a bit more interesting, and I'm not sure about it, is the best way to have \"feature gates\" so that we can show the \"diff required\" to support a new feature.</p>\n</blockquote>",
        "id": 275804989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611521
    },
    {
        "content": "<p>this comes back to that \"feature gate\" thing</p>",
        "id": 275805079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611551
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> that I wouldn't adjust chalk <em>now</em></p>",
        "id": 275805097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611558
    },
    {
        "content": "<p>I'd like to write an RFC for those new features</p>",
        "id": 275805103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611563
    },
    {
        "content": "<p>that said, one of the next things I want to tackle is modeling associated type equality and a different approach to inference</p>",
        "id": 275805126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611575
    },
    {
        "content": "<p>and <em>that</em> I would want to port to chalk once we validate that it works</p>",
        "id": 275805138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275805103\">said</a>:</p>\n<blockquote>\n<p>I'd like to write an RFC for those new features</p>\n</blockquote>\n<p>implied bounds had an RFC, but I think it should be \"refreshed\"</p>",
        "id": 275805166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611603
    },
    {
        "content": "<p>You're thinking some Racket wizardry might be needed in order to not maintain a bunch of different branches or something? Making it easy to turn on/off different parts of the model?</p>",
        "id": 275805194,
        "sender_full_name": "pierwill",
        "timestamp": 1647611625
    },
    {
        "content": "<p>yes--</p>",
        "id": 275805212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611634
    },
    {
        "content": "<p>not super deep wizardry</p>",
        "id": 275805240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611643
    },
    {
        "content": "<p>That is... a little concerning i must admit.</p>",
        "id": 275805271,
        "sender_full_name": "pierwill",
        "timestamp": 1647611648
    },
    {
        "content": "<p>Okay</p>",
        "id": 275805278,
        "sender_full_name": "pierwill",
        "timestamp": 1647611650
    },
    {
        "content": "<p>basically just macros</p>",
        "id": 275805288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275805126\">said</a>:</p>\n<blockquote>\n<p>that said, one of the next things I want to tackle is modeling associated type equality and a different approach to inference</p>\n</blockquote>\n<p>what inference?</p>",
        "id": 275805300,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647611665
    },
    {
        "content": "<p>type variable inference</p>",
        "id": 275805318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611671
    },
    {
        "content": "<p>(and region)</p>",
        "id": 275805336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611679
    },
    {
        "content": "<p>Is this the set thing</p>",
        "id": 275805373,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647611696
    },
    {
        "content": "<p>I forget the name :)</p>",
        "id": 275805381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647611700
    },
    {
        "content": "<p>it's not row typing, though I still want to work through that to see if it's useful; I think not</p>",
        "id": 275805411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611712
    },
    {
        "content": "<p>I've been working through the \"simple essence of algebraic subtyping\" paper</p>",
        "id": 275805451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611728
    },
    {
        "content": "<p>I actually reimplemented it</p>",
        "id": 275805455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611732
    },
    {
        "content": "<p>and I think that <em>is</em> relevant :)</p>",
        "id": 275805464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611738
    },
    {
        "content": "<p><a href=\"https://icfp20.sigplan.org/details/icfp-2020-papers/37/The-Simple-Essence-of-Algebraic-Subtyping-Principal-Type-Inference-with-Subtyping-Ma\">https://icfp20.sigplan.org/details/icfp-2020-papers/37/The-Simple-Essence-of-Algebraic-Subtyping-Principal-Type-Inference-with-Subtyping-Ma</a></p>",
        "id": 275805512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611762
    },
    {
        "content": "<p>that's a good topci for a separate meeting</p>",
        "id": 275805628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611804
    },
    {
        "content": "<p>How much does racket help here? i.e. how much further could we go past chalk into the \"executable semantics\"  territory while writing everything in Rust?</p>",
        "id": 275805636,
        "sender_full_name": "lcnr",
        "timestamp": 1647611811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275805455\">said</a>:</p>\n<blockquote>\n<p>I actually reimplemented it</p>\n</blockquote>\n<p><a href=\"https://github.com/nikomatsakis/great-pl-papers/tree/main/simple-sub\">in PLT redex of course</a>, lol</p>",
        "id": 275805652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611819
    },
    {
        "content": "<p>There's a youtube video for that :)</p>",
        "id": 275805672,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647611828
    },
    {
        "content": "<p>That's helpful</p>",
        "id": 275805678,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647611831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275805512\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://icfp20.sigplan.org/details/icfp-2020-papers/37/The-Simple-Essence-of-Algebraic-Subtyping-Principal-Type-Inference-with-Subtyping-Ma\">https://icfp20.sigplan.org/details/icfp-2020-papers/37/The-Simple-Essence-of-Algebraic-Subtyping-Principal-Type-Inference-with-Subtyping-Ma</a></p>\n</blockquote>\n<p>\"in particular, no abstract algebra is inflicted on readers\" <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 275805759,
        "sender_full_name": "Jake",
        "timestamp": 1647611873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275805636\">said</a>:</p>\n<blockquote>\n<p>How much does racket help here? i.e. how much further could we go past chalk into the \"executable semantics\"  territory while writing everything in Rust?</p>\n</blockquote>\n<p>I imagine at some point we could port PLT Redex to Rust, but I've found racket/PLT Redex very helpful in a few ways:</p>\n<ul>\n<li>the racket pattern matching is super useful, no need to worry about parsers (at the cost of a lot of parentheses)</li>\n<li>PLT redex lets us write code in a very high-level style, very close to what you would read in a paper</li>\n</ul>",
        "id": 275805844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275805672\">said</a>:</p>\n<blockquote>\n<p>There's a youtube video for that :)</p>\n</blockquote>\n<p>link?</p>",
        "id": 275805856,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1647611900
    },
    {
        "content": "<p>I think I would basically want to reimplement this scheme, and I don't see the point in that</p>",
        "id": 275805872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611906
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=d10q-b8jNKg\">https://www.youtube.com/watch?v=d10q-b8jNKg</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"d10q-b8jNKg\" href=\"https://www.youtube.com/watch?v=d10q-b8jNKg\"><img src=\"https://uploads.zulipusercontent.net/a48aee76a848cc89b37ce60c62bc853a36a657d6/68747470733a2f2f692e7974696d672e636f6d2f76692f643130712d62386a4e4b672f64656661756c742e6a7067\"></a></div>",
        "id": 275805973,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647611955
    },
    {
        "content": "<p>it seems like questions are tapering off--</p>",
        "id": 275805990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611968
    },
    {
        "content": "<p>are there things people wanted to ask that didn't get answered?</p>",
        "id": 275806021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611982
    },
    {
        "content": "<p>should we talk about next steps?</p>",
        "id": 275806025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647611984
    },
    {
        "content": "<p>I added a new question</p>",
        "id": 275806042,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647611991
    },
    {
        "content": "<p>ah:</p>\n<h2>How/where does coercion fit in?</h2>",
        "id": 275806063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612000
    },
    {
        "content": "<p>that's one of those things we don't have to model yet :)</p>",
        "id": 275806138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612010
    },
    {
        "content": "<p>because it's \"already done\" by the time we get to MIR</p>",
        "id": 275806181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612020
    },
    {
        "content": "<p><em>but</em>, if we wanted to</p>",
        "id": 275806202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612025
    },
    {
        "content": "<p>What will the process be for verifying the specification itself. e.g. making sure that it doesn't allow infering unsound behaviour?</p>",
        "id": 275806209,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1647612027
    },
    {
        "content": "<p>ah, that's a good one. So PLT Redex includes a builtin fuzzer.</p>",
        "id": 275806237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612040
    },
    {
        "content": "<p>I've not tried it yet but</p>",
        "id": 275806254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612046
    },
    {
        "content": "<p>I would expect to use it, and one of my projects was going to be using it to test the scheme I talked about for implied bounds</p>",
        "id": 275806303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612068
    },
    {
        "content": "<p>(e.g., to show that we can't generate rust programs that both (a) pass the various conditions and (b) allow you to prove <code>Implemented(T: Foo)</code> when there is no impl)</p>",
        "id": 275806333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612086
    },
    {
        "content": "<p>more than that, I guess it bottoms out in the \"what about coq\" question --</p>",
        "id": 275806363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612103
    },
    {
        "content": "<p>we can of course to do some \"paper and pen\" proofs or argumentation</p>",
        "id": 275806386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275806181\">said</a>:</p>\n<blockquote>\n<p>because it's \"already done\" by the time we get to MIR</p>\n</blockquote>\n<p>so, it's a little embarassing, but is the <code>rustc_middle::ty::sty</code> representation <code>MIR</code>?</p>",
        "id": 275806398,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647612119
    },
    {
        "content": "<p>I kind of want to leave the proofs to the academics :P</p>",
        "id": 275806399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275804566\">said</a>:</p>\n<blockquote>\n<p>we might want to take layouts as <em>inputs</em> to the semantics</p>\n</blockquote>\n<p>I wanted to ask about what this means. What do we lose by doing this? I assume we miss some potential unsoundness, is that just if the layout algorithm is wrong, or something more general?</p>",
        "id": 275806501,
        "sender_full_name": "Jake",
        "timestamp": 1647612154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275806398\">said</a>:</p>\n<blockquote>\n<p>so, it's a little embarassing, but is the <code>rustc_middle::ty::sty</code> representation <code>MIR</code>?</p>\n</blockquote>\n<p>in my mind, yes</p>",
        "id": 275806522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612167
    },
    {
        "content": "<p>because MIR embeds references to <code>Ty&lt;'tcx&gt;</code></p>",
        "id": 275806545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310518\">Jake</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275806501\">said</a>:</p>\n<blockquote>\n<p>I wanted to ask about what this means. What do we lose by doing this? I assume we miss some potential unsoundness, is that just if the layout algorithm is wrong, or something more general?</p>\n</blockquote>\n<p>right. it basically means we take the layout of a struct to be an \"axiom\" -- if it's bogus, or doesn't match what the compiler actually does, we will reach wrong conclusions</p>",
        "id": 275806653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612241
    },
    {
        "content": "<p>Then we definitely do coercions there</p>",
        "id": 275806695,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647612244
    },
    {
        "content": "<p>how so?</p>",
        "id": 275806711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612255
    },
    {
        "content": "<p>coercions are introduced by the HIR-based type checker</p>",
        "id": 275806723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612263
    },
    {
        "content": "<p>but in MIR, they are represented as explicit operations</p>",
        "id": 275806736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612270
    },
    {
        "content": "<p>we probably do have to represent unsizing coercions and some other things</p>",
        "id": 275806771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612287
    },
    {
        "content": "<p>so <code>MIR</code> is <code>rustc_middle::ty</code> + the <code>mir::Body</code> (completely ignoring <code>hir</code> typeck)</p>",
        "id": 275806788,
        "sender_full_name": "lcnr",
        "timestamp": 1647612295
    },
    {
        "content": "<p>(which does touch on layout, too)</p>",
        "id": 275806794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612298
    },
    {
        "content": "<p>that said, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, I'd like to try and model coercions</p>",
        "id": 275807008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612408
    },
    {
        "content": "<p>I think we can do some \"higher-level experiments\" that are outside the model proper</p>",
        "id": 275807032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612423
    },
    {
        "content": "<p>I guess that brings us to next steps</p>",
        "id": 275807070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612448
    },
    {
        "content": "<p>unless there's anything else?</p>",
        "id": 275807085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612454
    },
    {
        "content": "<p>(Side note, if folks think my answers don't make sense, I trust you'll tell me...)</p>",
        "id": 275807130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275806653\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310518\">Jake</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275806501\">said</a>:</p>\n<blockquote>\n<p>I wanted to ask about what this means. What do we lose by doing this? I assume we miss some potential unsoundness, is that just if the layout algorithm is wrong, or something more general?</p>\n</blockquote>\n<p>right. it basically means we take the layout of a struct to be an \"axiom\" -- if it's bogus, or doesn't match what the compiler actually does, we will reach wrong conclusions</p>\n</blockquote>\n<p>Ah, I see. Is there a possible road here where we can do something similar to <code>-Z randomize-layout</code>, ie fuzzing the layout as part of an input to the model? (I don't have any particular reason to think this is a good idea or necessary, I'm just trying to understand the implications)</p>",
        "id": 275807143,
        "sender_full_name": "Jake",
        "timestamp": 1647612479
    },
    {
        "content": "<p>yes</p>",
        "id": 275807184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612485
    },
    {
        "content": "<p>I actually think that could be a very good idea</p>",
        "id": 275807200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612493
    },
    {
        "content": "<p>in particular, I think you might want to show that your code is resilient to different layouts</p>",
        "id": 275807219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612504
    },
    {
        "content": "<p>you probably don't want an arbitrary fuzzer, but doing things like</p>",
        "id": 275807234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612513
    },
    {
        "content": "<p>reordering struct fields to every permutation</p>",
        "id": 275807242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612517
    },
    {
        "content": "<p>or adding random padding in strange places</p>",
        "id": 275807267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612535
    },
    {
        "content": "<p>\\<em>chanting</em>\\ next steps, next steps <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span></p>",
        "id": 275807338,
        "sender_full_name": "pierwill",
        "timestamp": 1647612583
    },
    {
        "content": "<h1>next steps</h1>",
        "id": 275807339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612584
    },
    {
        "content": "<p>So, Niko, do you have a TODO list for a-mir-formality?</p>",
        "id": 275807415,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647612610
    },
    {
        "content": "<p>well, I guess there are two questions</p>\n<ul>\n<li>does this endeavor make sense? (I think yes)</li>\n<li>how to get more people involved? are folks wanting to try and hack on it? should it stay a \"nikomatsakis blunt\" for a bit longer?</li>\n</ul>",
        "id": 275807424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612617
    },
    {
        "content": "<p>In other words, if someone wanted to help out, would they have a place to start</p>",
        "id": 275807461,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647612637
    },
    {
        "content": "<p>I have a to-do list in my head</p>",
        "id": 275807462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612637
    },
    {
        "content": "<p>but I could start opening issues</p>",
        "id": 275807484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612642
    },
    {
        "content": "<p>and doing a bit of scaffolding there</p>",
        "id": 275807510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612648
    },
    {
        "content": "<p>if people wanted to start closing them :)</p>",
        "id": 275807526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612654
    },
    {
        "content": "<blockquote>\n<p>does this endeavor make sense? (I think yes)</p>\n</blockquote>",
        "id": 275807549,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647612669
    },
    {
        "content": "<p>I think there's a number of things that would make sense</p>",
        "id": 275807551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612670
    },
    {
        "content": "<p>yes</p>",
        "id": 275807554,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647612672
    },
    {
        "content": "<p>Issues would be good. It'll be crucial to get people playing with Redex</p>",
        "id": 275807562,
        "sender_full_name": "pierwill",
        "timestamp": 1647612675
    },
    {
        "content": "<p>I have to think about good incremental extensions</p>",
        "id": 275807586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612685
    },
    {
        "content": "<p>there are still a few \"fundamentals\" to work out, that's a bigger task</p>",
        "id": 275807604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612692
    },
    {
        "content": "<p>Ill probably keep those on my plate for the time being until we get more people conversant with redex, but if somebody wants to try a bigger job, that's cool too</p>",
        "id": 275807632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612705
    },
    {
        "content": "<p>I've got one in particular in mind :)</p>",
        "id": 275807663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612719
    },
    {
        "content": "<p>which is adjusting how we handle hypotheses to be \"bottom-up\"</p>",
        "id": 275807737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612735
    },
    {
        "content": "<p>Maybe there's work to do writing example programs and explaining them like the ones in the doc you shared? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 275807742,
        "sender_full_name": "pierwill",
        "timestamp": 1647612738
    },
    {
        "content": "<blockquote>\n<p>how to get more people involved? are folks wanting to try and hack on it? should it stay a \"nikomatsakis blunt\" for a bit longer?</p>\n</blockquote>\n<p>The thing I like about PLT Redex in, in theory, it's good for \"prototyping designs\"</p>",
        "id": 275807744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647612739
    },
    {
        "content": "<p>one other thing:</p>",
        "id": 275807746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275807742\">said</a>:</p>\n<blockquote>\n<p>Maybe there's work to do writing example programs and explaining them like the ones in the doc you shared? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>yes--- and also maybe trying to get the fuzzer up and going</p>",
        "id": 275807773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612754
    },
    {
        "content": "<p>But that assumes you're proficient enough to <em>write</em> it</p>",
        "id": 275807782,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647612759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275807746\">said</a>:</p>\n<blockquote>\n<p>one other thing:</p>\n</blockquote>\n<p>the other thing is that I plan to present this at the upcoming workshop in ETAPS 2020</p>",
        "id": 275807794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612767
    },
    {
        "content": "<p>probably roughly this same document</p>",
        "id": 275807801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275807782\">said</a>:</p>\n<blockquote>\n<p>But that assumes you're proficient enough to <em>write</em> it</p>\n</blockquote>\n<p>yes, my assumption is, the types team will get conversant,and we'll help others get going</p>",
        "id": 275807822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612782
    },
    {
        "content": "<p>it is pretty accessible, though it's quite the contrast from Rust</p>",
        "id": 275807837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612793
    },
    {
        "content": "<p>no static checking :)</p>",
        "id": 275807844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612795
    },
    {
        "content": "<p>but lots of contracts, which can be quite useful in narrowing down problems</p>",
        "id": 275807858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612806
    },
    {
        "content": "<p>Writing programs that are valid in the model should be significantly easier than writing the model</p>",
        "id": 275807866,
        "sender_full_name": "pierwill",
        "timestamp": 1647612814
    },
    {
        "content": "<p>Oh gosh it's a heavy constrast</p>",
        "id": 275807870,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647612817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275807866\">said</a>:</p>\n<blockquote>\n<p>Writing programs that are valid in the model should be significantly easier than writing the model</p>\n</blockquote>\n<p>ironically I find this one of the hardest asks-- there's a style to it I can show you</p>",
        "id": 275807899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612833
    },
    {
        "content": "<p>the problem is that you have to get all the parentheses right :)</p>",
        "id": 275807916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612841
    },
    {
        "content": "<p>Ah interesting</p>",
        "id": 275807967,
        "sender_full_name": "pierwill",
        "timestamp": 1647612851
    },
    {
        "content": "<p>if you try to write too big of a program, you just get an error like 'that's not a program\"</p>",
        "id": 275807969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612853
    },
    {
        "content": "<p>but no clue as to <em>why</em></p>",
        "id": 275807982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612858
    },
    {
        "content": "<p>so you have to break it into smaller pieces</p>",
        "id": 275807993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612864
    },
    {
        "content": "<p>actually, another nice bit of work:</p>",
        "id": 275808023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612881
    },
    {
        "content": "<p>a <code>-Z</code> flag for rustc to emit programs :)</p>",
        "id": 275808028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612886
    },
    {
        "content": "<p>We should also consider when is an appropriate time to start incorporating the model into e.g. Chalk</p>",
        "id": 275808032,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647612888
    },
    {
        "content": "<p>i.e. what are the \"requirements\"</p>",
        "id": 275808051,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647612901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , could we schedule a live hacking session where you do a show and tell?</p>",
        "id": 275808092,
        "sender_full_name": "pierwill",
        "timestamp": 1647612924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275807993\">said</a>:</p>\n<blockquote>\n<p>so you have to break it into smaller pieces</p>\n</blockquote>\n<p>you can <a href=\"https://github.com/nikomatsakis/a-mir-formality/blob/47eceea34b5f56a55d781acc73dca86c996b15c5/src/decl/tests/coinductive/magic-issue-xxx.rkt#L15-L34\">see that here</a></p>",
        "id": 275808094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612925
    },
    {
        "content": "<p>yeah, we could do that</p>",
        "id": 275808112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275808092\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> , could we schedule a live hacking session where you do a show and tell?</p>\n</blockquote>\n<p>I'd be a big fan of this</p>",
        "id": 275808123,
        "sender_full_name": "Jake",
        "timestamp": 1647612936
    },
    {
        "content": "<p>that would be fun</p>",
        "id": 275808127,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647612938
    },
    {
        "content": "<p>I didn't really try to do a whole \"intro to redex\"</p>",
        "id": 275808134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612943
    },
    {
        "content": "<p>it'd be good to have that recorded</p>",
        "id": 275808146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612949
    },
    {
        "content": "<p>and maybe some docs about it</p>",
        "id": 275808149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612952
    },
    {
        "content": "<p>One way or another, this will be a big learning challenge for the teams.</p>",
        "id": 275808205,
        "sender_full_name": "pierwill",
        "timestamp": 1647612967
    },
    {
        "content": "<p>e.g. what might not be obvious here</p>\n<div class=\"codehilite\" data-code-language=\"Scheme\"><pre><span></span><code><span class=\"c1\">; struct Foo { counter: i32 }</span>\n     <span class=\"nv\">AdtDecl_Foo</span> <span class=\"p\">(</span><span class=\"nf\">term</span> <span class=\"p\">(</span><span class=\"nf\">Foo</span> <span class=\"p\">(</span><span class=\"nf\">struct</span> <span class=\"p\">()</span> <span class=\"p\">()</span> <span class=\"p\">((</span><span class=\"nf\">struct-variant</span> <span class=\"p\">((</span><span class=\"nf\">counter</span> <span class=\"p\">(</span><span class=\"nf\">scalar-ty</span> <span class=\"nv\">i32</span><span class=\"p\">)))))))))</span>\n</code></pre></div>",
        "id": 275808207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612968
    },
    {
        "content": "<p>is that <code>AdtDecl_</code>, that part has to refer to something from the grammar</p>",
        "id": 275808218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612976
    },
    {
        "content": "<p>and it is checked that it matches the pattern</p>",
        "id": 275808224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647612980
    },
    {
        "content": "<p>(what comes after the <code>_</code> is the \"name\" of the variable, what comes before is effectively its type)</p>",
        "id": 275808276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613008
    },
    {
        "content": "<p>And this is just a simple <code>struct</code>, huh</p>",
        "id": 275808280,
        "sender_full_name": "pierwill",
        "timestamp": 1647613012
    },
    {
        "content": "<p>yes, you see why I mentioned it'd be nice to have an automated testing harness</p>",
        "id": 275808304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613030
    },
    {
        "content": "<p>that said, we could also write more macros and scaffolding there</p>",
        "id": 275808316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613038
    },
    {
        "content": "<p>I really am going to have to get one of those IDE extensions for color code parentheses</p>",
        "id": 275808352,
        "sender_full_name": "Jake",
        "timestamp": 1647613052
    },
    {
        "content": "<p>oh, yes, you want that :P</p>",
        "id": 275808371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613061
    },
    {
        "content": "<p>Dr. Racket is a fairly nice IDE</p>",
        "id": 275808390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613073
    },
    {
        "content": "<p>though I've been using vscode with magic-racket</p>",
        "id": 275808394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613078
    },
    {
        "content": "<p>because I like to run over ssh</p>",
        "id": 275808403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613081
    },
    {
        "content": "<p>this bug is annoying <a href=\"https://github.com/Eugleo/magic-racket/issues/74\">https://github.com/Eugleo/magic-racket/issues/74</a></p>",
        "id": 275808458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613091
    },
    {
        "content": "<p>I was going to ask if you were using DrRacket...</p>",
        "id": 275808465,
        "sender_full_name": "pierwill",
        "timestamp": 1647613094
    },
    {
        "content": "<p>I'm going to complain everywhere about it</p>",
        "id": 275808468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613097
    },
    {
        "content": "<p>including here where there is zero chance it will help it to get fixed</p>",
        "id": 275808480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275808465\">said</a>:</p>\n<blockquote>\n<p>I was going to ask if you were using DrRacket...</p>\n</blockquote>\n<p>I did for a long time.</p>",
        "id": 275808515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613127
    },
    {
        "content": "<p>It'll be interesting to see what the first real code issue that someone other than Niko works on produces :)</p>",
        "id": 275808605,
        "sender_full_name": "pierwill",
        "timestamp": 1647613172
    },
    {
        "content": "<p>I \"use\" magic-racket</p>",
        "id": 275808616,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613177
    },
    {
        "content": "<p>OK, well, I guess we're about at time-- meta point:</p>",
        "id": 275808618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613178
    },
    {
        "content": "<p>this was our first \"Deep dive\"</p>",
        "id": 275808631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613183
    },
    {
        "content": "<p>brief discussion about the format?</p>",
        "id": 275808646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613191
    },
    {
        "content": "<p>By that, I mean I have it installed for when I tried looking at this</p>",
        "id": 275808648,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613193
    },
    {
        "content": "<p>I was happy with the zulip chat</p>",
        "id": 275808652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613195
    },
    {
        "content": "<p>I think Zulip chat worked for this</p>",
        "id": 275808714,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613207
    },
    {
        "content": "<p>I'm not sure if we had another topic in mind, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, I forget :) but we should pick one for next week, if we're going to do another</p>",
        "id": 275808746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613219
    },
    {
        "content": "<p>I was going to make a poll with topics...and didn't...</p>",
        "id": 275808771,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613237
    },
    {
        "content": "<p><em>but</em></p>",
        "id": 275808776,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613241
    },
    {
        "content": "<p>I have a few ideas</p>",
        "id": 275808784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613245
    },
    {
        "content": "<p>though I've forgotten what they are</p>",
        "id": 275808795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613253
    },
    {
        "content": "<p>how would folks feel like going over the variance docs PR?</p>",
        "id": 275808802,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613255
    },
    {
        "content": "<p>that was one of them</p>",
        "id": 275808821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613264
    },
    {
        "content": "<p>I can lead that</p>",
        "id": 275808827,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613267
    },
    {
        "content": "<p>I think the other was the rustc-guide chapter for <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s PR</p>",
        "id": 275808844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613276
    },
    {
        "content": "<p>But it would be kind of nice in \"testing\" out the the different deep-dive \"kinds\"</p>",
        "id": 275808864,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613291
    },
    {
        "content": "<p>and/or the writeup I did trying to document the semantiics of lazy tait</p>",
        "id": 275808872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613294
    },
    {
        "content": "<p>Another thing I could lead would be a GATs related deep-dive</p>",
        "id": 275808904,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613315
    },
    {
        "content": "<p>I also like that it's getting the types team engaged in different ways, e.g., I'd like us to be giving more feedback and shaping rust reference too</p>",
        "id": 275808907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613318
    },
    {
        "content": "<p>Is the team being launched soon?</p>",
        "id": 275809035,
        "sender_full_name": "pierwill",
        "timestamp": 1647613357
    },
    {
        "content": "<p>From the sounds of things, there's no plan to do UCG related stuff in connection with T-ypes in the near future?</p>",
        "id": 275809066,
        "sender_full_name": "Jake",
        "timestamp": 1647613368
    },
    {
        "content": "<p>Need an RFC first before launching the team</p>",
        "id": 275809068,
        "sender_full_name": "oli",
        "timestamp": 1647613369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310518\">Jake</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275809066\">said</a>:</p>\n<blockquote>\n<p>From the sounds of things, there's no plan to do UCG related stuff in connection with T-ypes in the near future?</p>\n</blockquote>\n<p>I think not yet, we have to walk before we can run, but I do see this team as being well-equipped to assist with that effort</p>",
        "id": 275809150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613413
    },
    {
        "content": "<p>that said</p>",
        "id": 275809160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613420
    },
    {
        "content": "<p>I think that unsafe code can't exist without an undersatnding of the <em>safe</em> foundation it builds on</p>",
        "id": 275809177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613430
    },
    {
        "content": "<p>so I figure modeling that is getting us in the right direction</p>",
        "id": 275809201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613441
    },
    {
        "content": "<p>side note, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> wasn't here, I wonder what he thinks of all this :) I know he has some plans for an operational semantics document</p>",
        "id": 275809274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613464
    },
    {
        "content": "<p>Any other ideas for deep dives for next week?</p>",
        "id": 275809324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613498
    },
    {
        "content": "<p>(or really, things people would really like to see sooner rather than later)</p>",
        "id": 275809355,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613512
    },
    {
        "content": "<p>thanks to everyone for coming <span aria-label=\"purple heart\" class=\"emoji emoji-1f49c\" role=\"img\" title=\"purple heart\">:purple_heart:</span> !</p>",
        "id": 275809428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613557
    },
    {
        "content": "<p>I'll post a poll today or this weekend (I promise?)</p>",
        "id": 275809497,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613572
    },
    {
        "content": "<p>For a couple topics that I could realistically lead next week</p>",
        "id": 275809518,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613586
    },
    {
        "content": "<p>But this was awesome :)</p>",
        "id": 275809537,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275809068\">said</a>:</p>\n<blockquote>\n<p>Need an RFC first before launching the team</p>\n</blockquote>\n<p>not very clear, for subteams, but I figure I'll write one anyway :) I like RFCs...</p>",
        "id": 275809547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613608
    },
    {
        "content": "<p>Thank you all for attending and participating. It's really great.</p>",
        "id": 275809578,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275809547\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275809068\">said</a>:</p>\n<blockquote>\n<p>Need an RFC first before launching the team</p>\n</blockquote>\n<p>not very clear, for subteams, but I figure I'll write one anyway :) I like RFCs...</p>\n</blockquote>\n<p>I think this is a \"precedent setting\" milestone and is a strong candidate for RFC</p>",
        "id": 275809665,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647613667
    },
    {
        "content": "<p>yes, I also think this is a bit more independent than most subteams</p>",
        "id": 275809761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613694
    },
    {
        "content": "<p>in general I think establishing something intended to be \"permanent\" (and that is a distinguishing feature of a team...) ought to have an RFC</p>",
        "id": 275809802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647613718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275809274\">said</a>:</p>\n<blockquote>\n<p>side note, <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> wasn't here, I wonder what he thinks of all this :) I know he has some plans for an operational semantics document</p>\n</blockquote>\n<p>yeah I do. :D I was going to use pseudo-Rust for the \"precise\" parts of it, but that might just be due to my unfamiliarity with Racket (and because Rust is the one syntax we can actually expect people to understand)</p>",
        "id": 275846896,
        "sender_full_name": "RalfJ",
        "timestamp": 1647629466
    },
    {
        "content": "<p>I'd also be interested in working on formalizing the trait system and proving things about it (or rather, having a PhD student do that :D ), seeing as how many soundness issues are coming from that corner of the compiler. However I haven't even started looking into what that would take.</p>",
        "id": 275847024,
        "sender_full_name": "RalfJ",
        "timestamp": 1647629525
    },
    {
        "content": "<p>One way to potentially bridge the gap between racket and rust syntax while retaining the advantages of PLT redex checking / evaluation / fuzzing stuff is to have a \"pseudo-Rust\" <em>pretty printer</em> for the project</p>",
        "id": 275862879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647637671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/deep.20dive.202022-03-18.3A.20intro.20to.20formality/near/275808652\">said</a>:</p>\n<blockquote>\n<p>I was happy with the zulip chat</p>\n</blockquote>\n<p>Fwiw, being able to read back the entire chat log afterwards is really helpful for people trying to catch up :)</p>",
        "id": 276775128,
        "sender_full_name": "Stefan Zabka",
        "timestamp": 1648369407
    }
]