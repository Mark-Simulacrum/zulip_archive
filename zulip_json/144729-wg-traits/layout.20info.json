[
    {
        "content": "<p>To implement <code>DispatchFromDyn</code> wf checks we need two things not present in chalk: repr info (namely <code>#[repr(C)]</code> and <code>#[repr(packed)]</code>) and layout info (namely <code>is_zst</code> check and alignment).</p>",
        "id": 200529294,
        "sender_full_name": "Areredify",
        "timestamp": 1591873196
    },
    {
        "content": "<p>the first one is not that bad, we can make callbacks specifically for those two things and address the whole repr story when pushing for the shared type library</p>",
        "id": 200529578,
        "sender_full_name": "Areredify",
        "timestamp": 1591873380
    },
    {
        "content": "<p>Is there, or should there be, an tracking issue for this on the chalk repo?</p>",
        "id": 200529849,
        "sender_full_name": "mental",
        "timestamp": 1591873585
    },
    {
        "content": "<p>I was hoping to do a quick triage here</p>",
        "id": 200529918,
        "sender_full_name": "Areredify",
        "timestamp": 1591873636
    },
    {
        "content": "<p>And then decide how to structure the issue</p>",
        "id": 200529965,
        "sender_full_name": "Areredify",
        "timestamp": 1591873672
    },
    {
        "content": "<p>Ah gotcha, I started with chalk a couple days ago so I'm new with the workflow.</p>",
        "id": 200530075,
        "sender_full_name": "mental",
        "timestamp": 1591873747
    },
    {
        "content": "<p>So, the second one is worse, because it requires to compute layouts based on the environment and I am not sure how much of that is work for chalk (doesn't feel like it at least)</p>",
        "id": 200530095,
        "sender_full_name": "Areredify",
        "timestamp": 1591873759
    },
    {
        "content": "<p>Or is it?</p>",
        "id": 200530314,
        "sender_full_name": "Areredify",
        "timestamp": 1591873930
    },
    {
        "content": "<p>I guess it'd depend on the environment, if chalk is responsible for rendering it directly more than rustc then I feel like the ball would be in Chalks court</p>",
        "id": 200530355,
        "sender_full_name": "mental",
        "timestamp": 1591873959
    },
    {
        "content": "<p>I'm not sure when/how the layout is computed within rustc but could it not be queried by chalk when needed like other information (via the RustIRDatabase?)</p>",
        "id": 200530579,
        "sender_full_name": "mental",
        "timestamp": 1591874130
    },
    {
        "content": "<p>That would require to map chalk environment to rustc environment</p>",
        "id": 200530667,
        "sender_full_name": "Areredify",
        "timestamp": 1591874171
    },
    {
        "content": "<p>Which is uhh not sure if that's possible</p>",
        "id": 200530696,
        "sender_full_name": "Areredify",
        "timestamp": 1591874200
    },
    {
        "content": "<p>At least easily</p>",
        "id": 200530701,
        "sender_full_name": "Areredify",
        "timestamp": 1591874207
    },
    {
        "content": "<p><code>DispatchFromDyn</code> is an unstable obscure trait with not that much implementors, I haven't done extensive research but I feel like we can just tighten it's requirements so we won't have to compute the layout, at least for now</p>",
        "id": 200530807,
        "sender_full_name": "Areredify",
        "timestamp": 1591874302
    },
    {
        "content": "<p>For example, instead of zst we can require <code>PhantomData</code></p>",
        "id": 200530957,
        "sender_full_name": "Areredify",
        "timestamp": 1591874413
    },
    {
        "content": "<p>Like <code>CoerceUnsized</code> does</p>",
        "id": 200530977,
        "sender_full_name": "Areredify",
        "timestamp": 1591874429
    },
    {
        "content": "<p>ugh I <em>almost</em> want to say \"can't we just delegate the <code>DispatchFromDyn</code> check to rustc\"</p>",
        "id": 200580885,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591897817
    },
    {
        "content": "<p>ikr</p>",
        "id": 200580911,
        "sender_full_name": "Areredify",
        "timestamp": 1591897829
    },
    {
        "content": "<p>I don't <em>really</em> want to start thinking about layout and repr in Chalk</p>",
        "id": 200580936,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591897841
    },
    {
        "content": "<p>Can someone explain more of what it's for exactly?</p>",
        "id": 200581252,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591897972
    },
    {
        "content": "<p>It's needed to quote \"Checks the method's receiver (the <code>self</code> argument) can be dispatched on when <code>Self</code> is a trait object.\"</p>",
        "id": 200581755,
        "sender_full_name": "Areredify",
        "timestamp": 1591898181
    },
    {
        "content": "<p>See <code>librstc_trait_selection::traits::object_safety::receiver_is_dispatchable</code></p>",
        "id": 200581876,
        "sender_full_name": "Areredify",
        "timestamp": 1591898235
    },
    {
        "content": "<p>bleh</p>",
        "id": 200582816,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591898640
    },
    {
        "content": "<p>Fun fact it was previously called <code>CoerceSized</code></p>",
        "id": 200583193,
        "sender_full_name": "Areredify",
        "timestamp": 1591898779
    },
    {
        "content": "<p>Don't know if that's a <em>fun</em> fact</p>",
        "id": 200583372,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591898859
    },
    {
        "content": "<p>Deep rust lore</p>",
        "id": 200583407,
        "sender_full_name": "Areredify",
        "timestamp": 1591898878
    },
    {
        "content": "<p>I want out</p>",
        "id": 200583781,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591899022
    },
    {
        "content": "<p>This is another \"rust-call\" situtation</p>",
        "id": 200583809,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591899034
    },
    {
        "content": "<p>So</p>",
        "id": 200585933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900002
    },
    {
        "content": "<p>I think that (a) layout should not be chalk's job</p>",
        "id": 200585951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900016
    },
    {
        "content": "<p>(b) mapping chalk -&gt; rust environments should be trivial</p>",
        "id": 200585958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900022
    },
    {
        "content": "<p>I hope that they will, indeed, be the <em>same environments</em></p>",
        "id": 200585982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900033
    },
    {
        "content": "<p>Huh, really, ok</p>",
        "id": 200585985,
        "sender_full_name": "Areredify",
        "timestamp": 1591900034
    },
    {
        "content": "<p>that is the goal of the whole \"extract shared type library\"</p>",
        "id": 200586008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900043
    },
    {
        "content": "<p>now, mind you, this is not the case <em>now</em></p>",
        "id": 200586015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900048
    },
    {
        "content": "<p>so there is a bit of a mismatch there</p>",
        "id": 200586026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900056
    },
    {
        "content": "<p>but I think we should define the callbacks to give a chalk environment</p>",
        "id": 200586057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900070
    },
    {
        "content": "<p>and we can try to bridge it in some way ;)</p>",
        "id": 200586069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900080
    },
    {
        "content": "<p>I suppose if we included a def-id in the chalk environment we could recreate the corresponding environment on the rustc side or something</p>",
        "id": 200586141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900097
    },
    {
        "content": "<p>wait, what environment is this</p>",
        "id": 200586163,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591900103
    },
    {
        "content": "<p><code>ParamEnv</code></p>",
        "id": 200586190,
        "sender_full_name": "Areredify",
        "timestamp": 1591900112
    },
    {
        "content": "<p>Why is it needed?</p>",
        "id": 200586206,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591900119
    },
    {
        "content": "<p>To compute the layout of generic types, if possible</p>",
        "id": 200586240,
        "sender_full_name": "Areredify",
        "timestamp": 1591900135
    },
    {
        "content": "<p>Or, I should say</p>",
        "id": 200586244,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591900136
    },
    {
        "content": "<p>because layout might do trait solving, is why</p>",
        "id": 200586263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900142
    },
    {
        "content": "<p>and resolve associated type</p>",
        "id": 200586275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900145
    },
    {
        "content": "<p>so <em>really</em> it's going to come back to chalk :)</p>",
        "id": 200586283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900149
    },
    {
        "content": "<p>well, when would we need it that we don't already have it?</p>",
        "id": 200586341,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591900169
    },
    {
        "content": "<p>maybe I don't know what all is actually in the <code>ParamEnv</code></p>",
        "id": 200586372,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591900184
    },
    {
        "content": "<p>I can't parse the question</p>",
        "id": 200586507,
        "sender_full_name": "Areredify",
        "timestamp": 1591900219
    },
    {
        "content": "<p>So, I mean when we solve a goal, that's in an <code>Environment</code></p>",
        "id": 200586547,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591900240
    },
    {
        "content": "<p>So the proposed solution (at least for now) is to add a callback that, given some environment, computes relevant for chalk layout parameters?</p>",
        "id": 200587087,
        "sender_full_name": "Areredify",
        "timestamp": 1591900474
    },
    {
        "content": "<p>Sounds good enough</p>",
        "id": 200587112,
        "sender_full_name": "Areredify",
        "timestamp": 1591900489
    },
    {
        "content": "<p>As for <code>repr</code> I presume we add a callback that returns repr data?</p>",
        "id": 200587640,
        "sender_full_name": "Areredify",
        "timestamp": 1591900743
    },
    {
        "content": "<p>(As opposed to making it into adt flags)</p>",
        "id": 200587691,
        "sender_full_name": "Areredify",
        "timestamp": 1591900779
    },
    {
        "content": "<p>I think we should be moving towards callbacks probably</p>",
        "id": 200588057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900957
    },
    {
        "content": "<p>rather than constructing complex data types</p>",
        "id": 200588067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900962
    },
    {
        "content": "<p>I'll make issues for them then, they seem like good first issues for all the people who joined recently</p>",
        "id": 200588172,
        "sender_full_name": "Areredify",
        "timestamp": 1591901034
    },
    {
        "content": "<p>wait so why bother adding the repr and layout complexity at all</p>",
        "id": 200590015,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591901993
    },
    {
        "content": "<p>I guess let's start with: what <em>exactly</em> are the goals we are getting for these that we need to solve</p>",
        "id": 200590208,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591902073
    },
    {
        "content": "<p>So, <a href=\"https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src/librustc_typeck/coherence/builtin.rs#L146\">this</a> is the wf check for <code>DispatchFromDyn</code></p>",
        "id": 200590468,
        "sender_full_name": "Areredify",
        "timestamp": 1591902206
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src/librustc_typeck/coherence/builtin.rs#L195\">Here</a> It checks struct repr</p>",
        "id": 200590521,
        "sender_full_name": "Areredify",
        "timestamp": 1591902236
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src/librustc_typeck/coherence/builtin.rs#L212\">Here</a> is layout check</p>",
        "id": 200590604,
        "sender_full_name": "Areredify",
        "timestamp": 1591902258
    },
    {
        "content": "<p>So, repr c and repr packed structs can't implement <code>DispatchedFromDyn</code></p>",
        "id": 200590699,
        "sender_full_name": "Areredify",
        "timestamp": 1591902321
    },
    {
        "content": "<p>And we need to check that there is exactly 1 field where two structs differ, ignoring zst fields with alignment=1 (i.e. fields that do not affect struct layout)</p>",
        "id": 200591063,
        "sender_full_name": "Areredify",
        "timestamp": 1591902502
    },
    {
        "content": "<p>By two structs I mean \"coercion source and target instances of the same struct\"</p>",
        "id": 200591265,
        "sender_full_name": "Areredify",
        "timestamp": 1591902614
    },
    {
        "content": "<p>Why not just add a callback in RustIrDatabase <code>is_dyn_dispatchable</code></p>",
        "id": 200594878,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591904316
    },
    {
        "content": "<p>Which, is not great</p>",
        "id": 200594899,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591904330
    },
    {
        "content": "<p>but potentially better than adding a lot of extra complexity in the form of reprs and layouts</p>",
        "id": 200594943,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591904359
    },
    {
        "content": "<p>(even if we don't <em>compute</em> it)</p>",
        "id": 200594956,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591904366
    },
    {
        "content": "<p>Hmm, it is possible</p>",
        "id": 200596577,
        "sender_full_name": "Areredify",
        "timestamp": 1591905063
    },
    {
        "content": "<p>I don't know, umm</p>",
        "id": 200597294,
        "sender_full_name": "Areredify",
        "timestamp": 1591905330
    },
    {
        "content": "<p>So we won't have benefits of lazy normalization in that specific case</p>",
        "id": 200597794,
        "sender_full_name": "Areredify",
        "timestamp": 1591905546
    },
    {
        "content": "<p>I feel like considering that it's the last piece of well known trait logic, it's a relatively small price to keep everything nice and tidy</p>",
        "id": 200597957,
        "sender_full_name": "Areredify",
        "timestamp": 1591905622
    },
    {
        "content": "<p>you're probably right</p>",
        "id": 200599351,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591906258
    },
    {
        "content": "<p>filed</p>",
        "id": 200607479,
        "sender_full_name": "Areredify",
        "timestamp": 1591910217
    }
]