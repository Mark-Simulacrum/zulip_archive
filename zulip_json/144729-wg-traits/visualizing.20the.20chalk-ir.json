[
    {
        "content": "<p>Hey, so in the last meeting I was talking about trying to document the \"intended plan\" for chalk-ir. I started playing with a <a href=\"https://www.lucidchart.com/invitations/accept/27cc17ba-09f2-46bd-a56e-1b9e8fca2436\" target=\"_blank\" title=\"https://www.lucidchart.com/invitations/accept/27cc17ba-09f2-46bd-a56e-1b9e8fca2436\">diagram</a> that shows the various types of chalk-ir and their relation to the <code>TF</code> trait. It's not complete and it's also including a few changes beyond what the code currently does, but I'd be curious to see what folks think! That link should let you view and comment.</p>",
        "id": 183673952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576605871
    },
    {
        "content": "<p>/me makes a mental note that rust-analyzer should learn to draw such diagrams one day...</p>",
        "id": 183691747,
        "sender_full_name": "matklad",
        "timestamp": 1576616867
    },
    {
        "content": "<p>heh I was wondering about that</p>",
        "id": 183693817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618173
    },
    {
        "content": "<p>did it make any sense to you, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> :)</p>",
        "id": 183693825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618180
    },
    {
        "content": "<p>woah, I can see your mouse cursor</p>",
        "id": 183693911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618214
    },
    {
        "content": "<p>I'm not sure I'd expect it to make sense all by itself</p>",
        "id": 183693923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618230
    },
    {
        "content": "<p>but it's meant to show the way chalk categorizes types (the yellow stuff) and the points where the representation can be customized (the green stuff)</p>",
        "id": 183693964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618264
    },
    {
        "content": "<p>I'd like to have each type be a link to the rustdoc (probably?) that would explain a bit the \"rust syntax\" it corresponds to</p>",
        "id": 183693982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618293
    },
    {
        "content": "<p>though i'm not sure if I can link</p>",
        "id": 183694000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618309
    },
    {
        "content": "<p>tbh, it doesn't make sense to me, but I haven't looked closely at the <code>Ty</code>s after TF PR</p>",
        "id": 183694051,
        "sender_full_name": "matklad",
        "timestamp": 1576618324
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I'd like to have each type be a link to the rustdoc (probably?)</p>\n</blockquote>\n</blockquote>\n<p>Maybe just write all the interface bits in a single source file, such that imenu gives a nice overview?</p>",
        "id": 183694150,
        "sender_full_name": "matklad",
        "timestamp": 1576618425
    },
    {
        "content": "<p>(they are in a single file now)</p>",
        "id": 183694218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618447
    },
    {
        "content": "<p>One thing that especiially doesn't make sense to me is separate <code>TF::TypeName</code> and <code>TF::DefId</code></p>",
        "id": 183694279,
        "sender_full_name": "matklad",
        "timestamp": 1576618515
    },
    {
        "content": "<p>a <code>TypeName</code> <em>could</em> be a def-id, but it could encode add'l info as well</p>",
        "id": 183694437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618609
    },
    {
        "content": "<p>e.g., <code>u32</code></p>",
        "id": 183694449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618616
    },
    {
        "content": "<p>would be a <code>TypeName</code></p>",
        "id": 183694456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618622
    },
    {
        "content": "<p>as would a built-in like <code>Tuple</code></p>",
        "id": 183694467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618626
    },
    {
        "content": "<p>(at least in a rustc mapping)</p>",
        "id": 183694491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618646
    },
    {
        "content": "<p>there is of course no <em>requirement</em> that a given instantiation distinguish the two</p>",
        "id": 183694511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618655
    },
    {
        "content": "<p>Aha, that makes sense. On the diagram <code>DefId</code> is only used to encode associated_type_id (which I think is <code>X</code> in <code>trait Foo { type X;}</code>). If that's the case, I wonder if we can replace DefId with something simpler</p>",
        "id": 183694712,
        "sender_full_name": "matklad",
        "timestamp": 1576618799
    },
    {
        "content": "<p>simpler in what sense?</p>",
        "id": 183694777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618821
    },
    {
        "content": "<p>it is used for other things when we get to some of the other layers I've not included yet, I think</p>",
        "id": 183694796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618839
    },
    {
        "content": "<p>that said, I'm not sure that <code>DefId</code> is the right point to 'customize'</p>",
        "id": 183694810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618858
    },
    {
        "content": "<p>we have a lot of kinds of ids -- <code>TraitId</code>, <code>StructId</code>, etc</p>",
        "id": 183694821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618865
    },
    {
        "content": "<p>For assoc types, I think we can maybe use an relative index? Like, nth associated type</p>",
        "id": 183694827,
        "sender_full_name": "matklad",
        "timestamp": 1576618874
    },
    {
        "content": "<p>right now they are defined as \"newtype'd\" <code>DefId</code>, but it might be that they themselves should be associated types</p>",
        "id": 183694829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618877
    },
    {
        "content": "<blockquote>\n<p>For assoc types, I think we can maybe use an relative index? Like, nth associated type</p>\n</blockquote>\n<p>ah. no thanks :)</p>",
        "id": 183694834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618881
    },
    {
        "content": "<p>I mean you <em>could</em></p>",
        "id": 183694841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618887
    },
    {
        "content": "<p>but then you would still need a <code>DefId</code> for the trait</p>",
        "id": 183694847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618892
    },
    {
        "content": "<p>but also it's kind of a core simplification to GATs</p>",
        "id": 183694859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618913
    },
    {
        "content": "<p>that is, I think it's really best to think of the \"items\" in traits as things with their own IDs</p>",
        "id": 183694906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618927
    },
    {
        "content": "<p>I think that's what rust-analyzer is doing, no?</p>",
        "id": 183694915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618939
    },
    {
        "content": "<p>(from an incremental POV, this can also mean that when you reorder things, there is not necessarily an effect, but that's not the main motivation)</p>",
        "id": 183694949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618973
    },
    {
        "content": "<p>mainly, from chalk's POV, things get simpler if you can just think of associated types as being items with their own set of substitutions</p>",
        "id": 183694966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576618989
    },
    {
        "content": "<p>well, I guess it doesn't matter <em>that</em> much, it's basically an opaque identifier, so we could make it <code>TF::AssocTypeId</code> for example</p>",
        "id": 183694991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576619010
    },
    {
        "content": "<p>(and it could be mapped to whatever by the other side)</p>",
        "id": 183695005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576619021
    },
    {
        "content": "<p>Yeah, at the momet assoc items have global ids</p>",
        "id": 183695021,
        "sender_full_name": "matklad",
        "timestamp": 1576619034
    },
    {
        "content": "<p>(in contrast to say, enum variants, which do have local ids)</p>",
        "id": 183695079,
        "sender_full_name": "matklad",
        "timestamp": 1576619047
    },
    {
        "content": "<p>yeah, though perhaps that should change too</p>",
        "id": 183695092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576619057
    },
    {
        "content": "<p>i.e., if we ever make types for enum variants you might want them to have their own ids</p>",
        "id": 183695105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576619068
    },
    {
        "content": "<p>but really I think that that the <code>TF::DefId</code> should prbably be replaced with <code>TF::FooId</code></p>",
        "id": 183695124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576619080
    },
    {
        "content": "<p>I remember that I had this in mind as a next step but I'd forgotten</p>",
        "id": 183695137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576619095
    },
    {
        "content": "<p>this is partly why I started the chart</p>",
        "id": 183695140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576619098
    },
    {
        "content": "<p>I want to iterate to what I think the \"desired end state\" should be a bit</p>",
        "id": 183695151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576619105
    },
    {
        "content": "<p><code>TF::FooId</code> rasies an interesting question of what is <code>struct Foo(u32);</code></p>",
        "id": 183695191,
        "sender_full_name": "matklad",
        "timestamp": 1576619139
    },
    {
        "content": "<p>Like, it's simultaneously a struct and a function</p>",
        "id": 183695208,
        "sender_full_name": "matklad",
        "timestamp": 1576619153
    },
    {
        "content": "<p>yes, rustc assigns two distinct def-ids for this I think</p>",
        "id": 183695227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576619163
    },
    {
        "content": "<p>we didn't always, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> did a bunch of work here, they'd remember best how it's setup probably :P</p>",
        "id": 183695280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576619189
    },
    {
        "content": "<p>rust-analyzer uses one at the moment, but that maybe a bug in ra's design</p>",
        "id": 183695310,
        "sender_full_name": "matklad",
        "timestamp": 1576619219
    },
    {
        "content": "<p>anyway I'd have to check what the right set of ids are, I suspect it's something like</p>\n<ul>\n<li><code>TypeId</code></li>\n<li><code>AssocTypeId</code></li>\n<li><code>TypeName</code></li>\n<li>and a few more, I forget</li>\n</ul>\n<p>the question is how much we try to cast between them (very little, I think, except maybe at the more upper layers)</p>",
        "id": 183695347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576619248
    },
    {
        "content": "<blockquote>\n<p>rust-analyzer uses one at the moment, but that maybe a bug in ra's design</p>\n</blockquote>\n<p>I can't remember if we refactored it so that they share an id or not :)</p>",
        "id": 183695367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576619260
    },
    {
        "content": "<p>I think <em>not</em> because it was useful for the non-exhaustive feature</p>",
        "id": 183695378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576619266
    },
    {
        "content": "<blockquote>\n<p>rust-analyzer uses one at the moment, but that maybe a bug in ra's design</p>\n</blockquote>\n<p>I think we actually used to distinguish it, but simplified it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 183697308,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576620783
    },
    {
        "content": "<p>I started a write-up of the chalk-ir setup here:</p>\n<p><a href=\"https://gist.github.com/nikomatsakis/a1e17c7d8f8647d7124cfdf9fec5b3bc\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/a1e17c7d8f8647d7124cfdf9fec5b3bc\">https://gist.github.com/nikomatsakis/a1e17c7d8f8647d7124cfdf9fec5b3bc</a></p>\n<p>I plan to keep updating that gist with more details.</p>",
        "id": 183926154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576839656
    },
    {
        "content": "<p>It's only got the highest level view right now, since I got distracted by other things this morning... :)</p>",
        "id": 183926179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576839685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this is super helpful imo</p>",
        "id": 183956958,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576863988
    },
    {
        "content": "<blockquote>\n<p>What to name the TypeFamily? Since instances of it must be passed around, I've been considering TypeContext, as well, and to call those instances tcx: TypeContext, like in the compiler...?</p>\n</blockquote>\n<p>So, as someone who hasn't really worked on the compiler: I <em>like</em> <code>TypeFamily</code>, since it's a \"family of types\", but <code>TypeContext</code> sort of matches the <code>Context</code> from chalk-engine</p>",
        "id": 183957369,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576864319
    },
    {
        "content": "<p>to me, <code>TypeFamily</code> sounds more... type theoretic than it actually is, so I like <code>TypeContext</code> more</p>",
        "id": 183957777,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576864676
    },
    {
        "content": "<p>one wrinkle is that, in the compiler at least, we've been talking about renaming to \"query context\"</p>",
        "id": 183960426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576866667
    },
    {
        "content": "<p>But I think the name <code>TypeContext</code> is pretty reasonable</p>",
        "id": 183960470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576866694
    },
    {
        "content": "<p>My 2 buckets of paint:</p>\n<ul>\n<li><code>Context</code>, because inside chalk it's clear what context it is, and, outside, it is <code>chalk::Context</code></li>\n<li><code>Repr</code>, because it's a customization point for the representation of types</li>\n</ul>",
        "id": 183963438,
        "sender_full_name": "matklad",
        "timestamp": 1576868883
    },
    {
        "content": "<p>yeah <code>Repr</code> is actually kind of interesting</p>",
        "id": 183963513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576868929
    },
    {
        "content": "<p>note however</p>",
        "id": 183963529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576868942
    },
    {
        "content": "<p>that I do expect to be passing around values (i.e., of type <code>repr: &amp;Repr</code>)</p>",
        "id": 183963545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576868954
    },
    {
        "content": "<p>I'm a bit unsure about just <code>Context</code> as there are a few other notions of <code>Context</code></p>",
        "id": 183963562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576868973
    },
    {
        "content": "<p>although I wonder if they can maybe be removed or at least better qualified</p>",
        "id": 183963594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576868996
    },
    {
        "content": "<p>now I'm debating how to represent this document -- I can keep growing the gist, but maybe better to make an mdbook on wg-traits repo or something :) or just use the chalk book to draft it</p>",
        "id": 183964175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576869403
    },
    {
        "content": "<p>This seems like it definitely would be good for chalk book</p>",
        "id": 183986862,
        "sender_full_name": "Jack Huey",
        "timestamp": 1576888160
    },
    {
        "content": "<p>I created <a href=\"https://github.com/rust-lang/chalk/pull/312\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/312\">https://github.com/rust-lang/chalk/pull/312</a></p>",
        "id": 184007858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576928902
    },
    {
        "content": "<p>This contains an expanded version of the gist, but added to the chalk-book</p>",
        "id": 184007863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576928919
    }
]