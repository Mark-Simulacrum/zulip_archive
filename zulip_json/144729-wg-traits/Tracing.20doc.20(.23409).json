[
    {
        "content": "<p>What do you actually mean by \"the next thing to do is just write docs so we know how to use it\"? How to use tracing to log in place of regular log crate? I was using tracing before, so maybe I can do this, but I am not exactly sure what do you expect here. I just see some PR which is not even merged (and cannot be because of conflicts) and I am not exactly sure where to start with this (or maybe I should take a look at something else?).</p>",
        "id": 198445403,
        "sender_full_name": "Bart≈Çomiej Kuras",
        "timestamp": 1590156591
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/409#pullrequestreview-401362042\">This comment</a> in that PR describes it better:</p>\n<ul>\n<li>How can you enable/view/configure tracing when running chalk (normally, but also when running tests)</li>\n<li>How to write code using <code>debug</code>/<code>#[instrument]</code></li>\n</ul>",
        "id": 198446242,
        "sender_full_name": "detrumi",
        "timestamp": 1590156959
    },
    {
        "content": "<p>And yeah, updating the book with this info will have to wait until that PR is merged</p>",
        "id": 198446340,
        "sender_full_name": "detrumi",
        "timestamp": 1590156995
    },
    {
        "content": "<p>Actually, the PR isn't merged yet mostly because it's not documented yet (alongside the question of whether tracing can be disabled when chalk is used as library)</p>",
        "id": 198446712,
        "sender_full_name": "detrumi",
        "timestamp": 1590157190
    },
    {
        "content": "<blockquote>\n<p>Actually, the PR isn't merged yet mostly because it's not documented yet (alongside the question of whether tracing can be disabled when chalk is used as library)</p>\n</blockquote>\n<p>Depends on what you mean. If the concern is that <code>tracing</code> ends up in rustc's dependency graph, then you're not really using features that are already available in log. if you're okay with <code>tracing</code> ending up in rustc's dependency graph, then tracing can pretend to be <code>log</code> to log-using consumers</p>",
        "id": 198447060,
        "sender_full_name": "David Barsky",
        "timestamp": 1590157348
    },
    {
        "content": "<p>(e.g., I'm not sure how you can replicate spans with log. if you're not using spans, a big value proposition of <code>tracing</code> is gone)</p>",
        "id": 198447296,
        "sender_full_name": "David Barsky",
        "timestamp": 1590157429
    },
    {
        "content": "<p>The first concern, that it ends up in rustc's dep graph</p>",
        "id": 198447305,
        "sender_full_name": "detrumi",
        "timestamp": 1590157439
    },
    {
        "content": "<p>hrm</p>",
        "id": 198447359,
        "sender_full_name": "David Barsky",
        "timestamp": 1590157448
    },
    {
        "content": "<p>I'm guessing it's not simple to call to functions that switch between the old logging and tracing, since then you can't really use the attributes and such without creating an extra layer</p>",
        "id": 198447526,
        "sender_full_name": "detrumi",
        "timestamp": 1590157549
    },
    {
        "content": "<p>no, and you're really just rebuilding <code>tracing</code></p>",
        "id": 198447581,
        "sender_full_name": "David Barsky",
        "timestamp": 1590157564
    },
    {
        "content": "<p>not sure that's a good use of effort</p>",
        "id": 198447587,
        "sender_full_name": "David Barsky",
        "timestamp": 1590157572
    },
    {
        "content": "<p>I guess I should bring up this value proposition that isn't documented well: if a binary/application (like rustc or something that is run through a <code>main</code> function) is using <code>tracing</code> subscribers and it _disables_ a tracing-enabled module/dependency, we've found that the performance of the resulting binary is non-trivially faster</p>",
        "id": 198447667,
        "sender_full_name": "David Barsky",
        "timestamp": 1590157630
    },
    {
        "content": "<p>e.g., Eliza switched h2 and hyper to use <code>tracing</code> and observed that the p99 latancies in linker2-proxy dropped by 2ms, from 3ms to 1ms.</p>",
        "id": 198447778,
        "sender_full_name": "David Barsky",
        "timestamp": 1590157696
    },
    {
        "content": "<p>I think it might be a good idea to _try_ a perf run where <code>log</code> is replaced with <code>tracing</code> in rustc</p>",
        "id": 198447884,
        "sender_full_name": "David Barsky",
        "timestamp": 1590157787
    },
    {
        "content": "<p>(i'm assuming rustc uses <code>log</code>)</p>",
        "id": 198447962,
        "sender_full_name": "David Barsky",
        "timestamp": 1590157815
    },
    {
        "content": "<p>I'm guessing this will require an MCP <em>anyways</em>, but i'd be good to get that data to inform <em>this</em></p>",
        "id": 198448245,
        "sender_full_name": "David Barsky",
        "timestamp": 1590157982
    },
    {
        "content": "<p>Looking at the <code>Cargo.lock</code>, looks like it uses <code>log</code> and <code>log_settings</code></p>",
        "id": 198448278,
        "sender_full_name": "detrumi",
        "timestamp": 1590158003
    },
    {
        "content": "<p>Yeah, adding a dependency to rustc will probably need a MCP</p>",
        "id": 198448643,
        "sender_full_name": "detrumi",
        "timestamp": 1590158173
    },
    {
        "content": "<p>hmm</p>",
        "id": 198448688,
        "sender_full_name": "David Barsky",
        "timestamp": 1590158217
    },
    {
        "content": "<p>I suppose I can hack up a PR and get ask to get a perf run going</p>",
        "id": 198449088,
        "sender_full_name": "David Barsky",
        "timestamp": 1590158439
    },
    {
        "content": "<p>So I guess we have a few options:</p>\n<ul>\n<li>Start a MCP to introduce tracing in rustc (possibly doing a perf run beforehand)</li>\n<li>Try to get rustc to accept tracing as a dependency (might require a MCP as well, but would be a smaller change)</li>\n<li>Find a way to make tracing an optional dependency of chalk (which might take more work on our end, but makes it easier to integrate with rustc)</li>\n</ul>",
        "id": 198455482,
        "sender_full_name": "detrumi",
        "timestamp": 1590161656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thoughts?</p>",
        "id": 198455499,
        "sender_full_name": "detrumi",
        "timestamp": 1590161667
    },
    {
        "content": "<p>What's tracing's compile time like?</p>",
        "id": 198462845,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590164877
    },
    {
        "content": "<p>It might not be super controversial to add tracing as a transitive dependency</p>",
        "id": 198463064,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590164973
    },
    {
        "content": "<p>Actually though, with that crate cleanup, if we can avoid any logging in chalk-ir itself (and also not depend on chalk-engine, which has logging), then we could probably avoid having tracing as a transitive dependency of <code>librustc_middle</code>, which is <em>really</em> the only questionable rustc crate</p>",
        "id": 198463219,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590165047
    },
    {
        "content": "<p>Yeah, there are currently no calls to info! or debug! in chalk-ir (so I don't think any calls to tracing got added in the PR, but I haven't checked)</p>",
        "id": 198463663,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590165259
    },
    {
        "content": "<p>the compile times should be at parity with <code>log</code>.</p>",
        "id": 198482136,
        "sender_full_name": "David Barsky",
        "timestamp": 1590174410
    },
    {
        "content": "<p>I don't know that it's a particularly big deal to have tracing as a transitive dep</p>",
        "id": 198483508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590175185
    },
    {
        "content": "<p>it's more that I think eventually we want chalk and rustc to use the same basic logging infra</p>",
        "id": 198483525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590175193
    },
    {
        "content": "<p>we do generally try to avoid adding random deps though</p>",
        "id": 198483595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590175210
    },
    {
        "content": "<p>how hard would it be for chalk to use a feature or something to pick between <code>log!</code> and tracing?</p>",
        "id": 198483621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590175225
    },
    {
        "content": "<p>I guess kind of hard</p>",
        "id": 198483627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590175231
    },
    {
        "content": "<p>if we want to leverage the various macros</p>",
        "id": 198483650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590175240
    },
    {
        "content": "<p>If you have it as a drop-in replacement, not hard at all. I've opened this PR on Hyper: <a href=\"https://github.com/hyperium/hyper/pull/2204\">https://github.com/hyperium/hyper/pull/2204</a>.</p>\n<p>I'm just not sure you're getting much out of tracing if you're not using spans to correlate events.</p>",
        "id": 198485231,
        "sender_full_name": "David Barsky",
        "timestamp": 1590176027
    },
    {
        "content": "<p>the ideal would be that we get spans if using tracing</p>",
        "id": 198485812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590176378
    },
    {
        "content": "<p>and not otherwise :)</p>",
        "id": 198485815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590176380
    },
    {
        "content": "<p>but yeah I mean I think we probably just .. want spans</p>",
        "id": 198485829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590176387
    },
    {
        "content": "<p>seems worth creating an MCP or at least opening a topic in <a class=\"stream\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler\">#t-compiler</a> to see what folks thing</p>",
        "id": 198485941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590176414
    },
    {
        "content": "<p>hmm, I guess the spans could be put behind _another_ macro, such that if <code>tracing</code> is disabled, the span annotations would be a no-op.</p>",
        "id": 198486778,
        "sender_full_name": "David Barsky",
        "timestamp": 1590176853
    },
    {
        "content": "<p>I'll start a topic there and ask about what people would prefer/are willing to tolerate. I'll note the performance boost I've occasionally observed, if it sweetens the deal.</p>",
        "id": 198486903,
        "sender_full_name": "David Barsky",
        "timestamp": 1590176913
    },
    {
        "content": "<p>Ok, then, for now, I think I would just finish the chalk book itself, and go through the PR. I think that hiding tracing behind a feature flag cannot be a bad idea, so I will do some additional changes to PR myself. After that I would think about updating rust book - maybe until then, there would be better consensus on how to process that in terms of rustc integration. At least unless there is something more important I can help with (but I think that for more important stuff I should finish the book anyway).</p>",
        "id": 198529608,
        "sender_full_name": "Bart≈Çomiej Kuras",
        "timestamp": 1590230553
    },
    {
        "content": "<p>I've opened a discussion in <a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/Tracing.20in.20rustc\">#t-compiler &gt; Tracing in rustc</a> .</p>",
        "id": 198545822,
        "sender_full_name": "David Barsky",
        "timestamp": 1590257453
    }
]