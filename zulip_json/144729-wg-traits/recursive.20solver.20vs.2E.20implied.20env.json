[
    {
        "content": "<p>I've been looking into <a href=\"https://github.com/rust-lang/chalk/issues/727\">chalk#727</a> and related examples (<a href=\"https://github.com/rust-lang/chalk/issues/750\">chalk#750</a>), and I think maybe the implied env rules are too hard for the recursive solver to deal with. I think these rules are not implemented by the current rustc trait solver, or am I wrong? If that's the case, my suggestion would be to make them toggleable by the database, so that we can turn them off in rust-analyzer and in some tests for now. We can then add those test cases to the Chalk test suite as well to make sure we don't forget about them.</p>",
        "id": 273403647,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645968598
    },
    {
        "content": "<p>I think we should consider what these implied env rules get us; i.e. do we <em>need</em> them for anything</p>",
        "id": 273405354,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645970528
    },
    {
        "content": "<p>oh hmm well actually simple things like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Super</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Sub</span>: <span class=\"nc\">Super</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Sub</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>also come from the implied env rules, don't they?</p>",
        "id": 273408964,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645975445
    },
    {
        "content": "<p>I think so</p>",
        "id": 273409044,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645975590
    },
    {
        "content": "<p>and even the rule for that leads to problems in <a href=\"https://github.com/rust-lang/chalk/issues/727\">chalk#727</a></p>",
        "id": 273409063,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645975641
    },
    {
        "content": "<p>now I wonder whether we can find an example where we have to apply the implied env rule legitimately in a way that the recursive solver can't deal with</p>",
        "id": 273409109,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645975688
    },
    {
        "content": "<p>yeah <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">implied_env_ambig</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">disable_coherence</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Super</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Sub</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"nc\">Super</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">FromEnv</span><span class=\"p\">(</span><span class=\"n\">T</span>: <span class=\"nc\">Sub</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">FromEnv</span><span class=\"p\">(</span><span class=\"n\">T</span>: <span class=\"nc\">Sub</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">T</span>: <span class=\"nc\">Super</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"cm\">/*yields[SolverChoice::slg_default()] {</span>\n<span class=\"cm\">            expect![[\"Unique\"]]</span>\n<span class=\"cm\">        }*/</span><span class=\"w\"> </span><span class=\"n\">yields</span><span class=\"p\">[</span><span class=\"n\">SolverChoice</span>::<span class=\"n\">recursive_default</span><span class=\"p\">()]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// fails: \"Ambiguous; no inference guidance\"</span>\n<span class=\"w\">            </span><span class=\"n\">expect</span><span class=\"o\">!</span><span class=\"p\">[[</span><span class=\"s\">\"Unique\"</span><span class=\"p\">]]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>fails, and rustc can handle that</p>",
        "id": 273409330,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645975867
    },
    {
        "content": "<p>Hmm so this is a problem</p>",
        "id": 273409453,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645976036
    },
    {
        "content": "<p>I was going to ask if removing the non-enumerability fixes this, but maybe not</p>",
        "id": 273409544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645976126
    },
    {
        "content": "<p>not in this case, yeah. In some cases it helps, but only by making another subgoal fail completely which gets rid of the ambiguity</p>",
        "id": 273409595,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645976173
    },
    {
        "content": "<p>Does SLG not solve the case above</p>",
        "id": 273409615,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645976218
    },
    {
        "content": "<p>it probably does</p>",
        "id": 273409622,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645976227
    },
    {
        "content": "<p>I would be surprised if it didn't</p>",
        "id": 273409631,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645976243
    },
    {
        "content": "<p>yeah, it does</p>",
        "id": 273409650,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645976264
    },
    {
        "content": "<p>Oh good</p>",
        "id": 273409659,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645976273
    },
    {
        "content": "<p>I think it handles all of these, except the ones involving associated types</p>",
        "id": 273409709,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645976302
    },
    {
        "content": "<p>I have some vague ideas about changing how the recursive solver deals with ambiguous results -- like, in some sense, when the <code>FromEnv(T: Sub&lt;?0&gt;)</code> subgoal returns ambiguous it should treat that as a success, since it doesn't care about specific values for <code>?0</code></p>",
        "id": 273409717,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645976322
    },
    {
        "content": "<p>Hmm</p>",
        "id": 273409747,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645976380
    },
    {
        "content": "<p>solving <a href=\"https://github.com/rust-lang/chalk/issues/234\">chalk#234</a> would of course be another avenue <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 273409822,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645976438
    },
    {
        "content": "<blockquote>\n<p>because of the impl IntoIterator for I where I: Iterator, we consider whether we can solve &lt;A as Iterator&gt;::Item = ?0 (this makes sense)</p>\n</blockquote>\n<p>Is this true? Should we be considering <code>Iterator::Item</code>? Seems like we should only be considering <code>IntoIterator::Item</code> (since <code>Item</code> is \"shadowed\")</p>",
        "id": 273409836,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645976469
    },
    {
        "content": "<p>Or is just because of the <code>type Item = &lt;I as Iterator&gt;::Item;</code></p>",
        "id": 273409897,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645976527
    },
    {
        "content": "<p>yes, because of that</p>",
        "id": 273409908,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645976543
    },
    {
        "content": "<p>of course that whole subtree is kind of pointless in that example, because <code>A</code> doesn't implement <code>Iterator</code>, just <code>IntoIterator</code></p>",
        "id": 273410027,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645976708
    },
    {
        "content": "<p>but because it gives an ambiguous result instead of failing as it should, it makes the whole thing ambiguous</p>",
        "id": 273410040,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645976727
    },
    {
        "content": "<p>Ok, I think I've actually woken up fully and wrapped my head around what's happening</p>",
        "id": 273410274,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645977017
    },
    {
        "content": "<p>Not really sure how to fix this</p>",
        "id": 273410469,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645977361
    },
    {
        "content": "<p>it feels wrong that a query without variables (like in the test above) can give an ambiguous result at all</p>",
        "id": 273410595,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645977526
    },
    {
        "content": "<p>and I guess in the SLG solver it can't</p>",
        "id": 273410611,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645977574
    },
    {
        "content": "<p>Not sure for the above case how we end up being ambiguous</p>",
        "id": 273410834,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645977632
    },
    {
        "content": "<p>I guess because there are multiple answers for <code>T: Sub&lt;?0&gt;</code></p>",
        "id": 273410870,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645977689
    },
    {
        "content": "<p>trying to prove <code>FromEnv(T: Super)</code> -&gt; using implied env rule, trying to prove <code>FromEnv(T: Sub&lt;?0&gt;)</code> for any <code>?0</code> -&gt; that goal has two answers, so it's ambiguous</p>",
        "id": 273410875,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645977695
    },
    {
        "content": "<p>yeah</p>",
        "id": 273410877,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645977697
    },
    {
        "content": "<p>It's kind of a similar problem in rustc</p>",
        "id": 273410921,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645977731
    },
    {
        "content": "<p>But I guess it's a bit different</p>",
        "id": 273410931,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645977750
    },
    {
        "content": "<p>how does rustc solve this case?</p>",
        "id": 273410935,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645977756
    },
    {
        "content": "<p>Because we elaborate the super bounds</p>",
        "id": 273410937,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645977762
    },
    {
        "content": "<p>So we don't \"pick\" a <code>?0</code></p>",
        "id": 273410951,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645977792
    },
    {
        "content": "<p>aah so it just elaborates both bounds to <code>T: Super</code></p>",
        "id": 273410952,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645977794
    },
    {
        "content": "<p>Yes</p>",
        "id": 273410953,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645977799
    },
    {
        "content": "<p>I'm guessing the clause is <code>for&lt;T, U&gt; FromEnv(T: Super) :- FromEnv(T: Sub&lt;U&gt;)</code></p>",
        "id": 273411103,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645977962
    },
    {
        "content": "<p>yeah</p>",
        "id": 273411157,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645978049
    },
    {
        "content": "<p>Should it be <code>for&lt;T&gt; { FromEnv(T: Super) :- exists&lt;U&gt; { FromEnv(T: Sub&lt;U&gt;) } }</code></p>",
        "id": 273411225,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645978131
    },
    {
        "content": "<p>I'm trying to think if you can...generalize that</p>",
        "id": 273411385,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645978365
    },
    {
        "content": "<p>hmm would that make a difference?</p>",
        "id": 273411396,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645978391
    },
    {
        "content": "<p>maybe</p>",
        "id": 273411492,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645978547
    },
    {
        "content": "<p><code>for&lt;T&gt; exists&lt;U&gt; FromEnv(T: Sub&lt;U&gt;)</code> would be true for T = !T in all cases of <code>U</code> (<code>u32</code> and <code>usize</code>)</p>",
        "id": 273411560,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645978642
    },
    {
        "content": "<p>yeah, but I think the recursive solver can only prove that if it's smarter about ambiguous results than it currently is</p>",
        "id": 273411633,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645978730
    },
    {
        "content": "<p>The problem is once you add a type parameter to <code>Super</code> it becomes a bit more complicated:</p>\n<div class=\"codehilite\"><pre><span></span><code>trait Super&lt;T&gt; {}\ntrait Sub&lt;T&gt; where Self: Super&lt;T&gt; {}\n`for&lt;X, T&gt; FromEnv(X: Super&lt;T&gt;) :- FromEnv(X: Sub&lt;T&gt;)`\n</code></pre></div>",
        "id": 273411638,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645978738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/144729-wg-traits/topic/recursive.20solver.20vs.2E.20implied.20env/near/273411633\">said</a>:</p>\n<blockquote>\n<p>yeah, but I think the recursive solver can only prove that if it's smarter about ambiguous results than it currently is</p>\n</blockquote>\n<p>hmm</p>",
        "id": 273411711,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645978804
    },
    {
        "content": "<p>I guess it runs into the same problem</p>",
        "id": 273411726,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645978865
    },
    {
        "content": "<p>another idea might be returning more information with the ambiguous result, like \"variable ?0 has multiple possible solutions\", so the next level up can make a smarter decision. extending <code>Guidance</code> basically</p>",
        "id": 273411785,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1645978954
    },
    {
        "content": "<p>Hmm</p>",
        "id": 273411952,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645979250
    },
    {
        "content": "<p>sounds a bit like the SLG \"strands\"</p>",
        "id": 273412018,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645979306
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> has some input here</p>",
        "id": 273497319,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1646058759
    },
    {
        "content": "<p>reading now :)</p>",
        "id": 274767361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646868061
    },
    {
        "content": "<p>sorry for the delay!</p>",
        "id": 274767368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646868063
    },
    {
        "content": "<p>I do have some thoughts</p>",
        "id": 274767371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646868065
    },
    {
        "content": "<p>but I have to experiment a bit first</p>",
        "id": 274767376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646868069
    },
    {
        "content": "<p>I'm poking a bit at this, but can I just say <strong>how !@$!@$ cool it is</strong> that rust-analyzer can reduce test cases like this?!</p>",
        "id": 274767783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646868356
    },
    {
        "content": "<p>though it looks like the automated tool didn't <em>quite</em> pull through here</p>",
        "id": 274767833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646868367
    },
    {
        "content": "<p>but debugging this with a reduced test case in chalk is so much nicer than digging through tons of unrelated rustc output</p>",
        "id": 274767857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646868389
    },
    {
        "content": "<p>tl;dr library-ification ftw</p>",
        "id": 274767872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646868407
    },
    {
        "content": "<p>ok, so I can reproduce the problem. I will poke a bit more at this later-- I feel like the recursive solver should be able to handle this <em>particular</em> case, though I agree that this is close to the class of problem in which it hits its limits</p>",
        "id": 274768348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646868735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> um so how do I enable debug logs? :)</p>",
        "id": 274775359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646873422
    },
    {
        "content": "<p><code>CHALK_DEBUG=debug</code></p>",
        "id": 274775401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646873456
    },
    {
        "content": "<p>thanks!</p>",
        "id": 274846356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646924430
    },
    {
        "content": "<p>fix -- or at least partial fix -- here <a href=\"https://github.com/rust-lang/chalk/issues/727#issuecomment-1064522393\">https://github.com/rust-lang/chalk/issues/727#issuecomment-1064522393</a></p>",
        "id": 274898383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646948290
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> are there more tests beyond the ones I see in <a href=\"https://github.com/rust-lang/chalk/issues/727\">rust-lang/chalk#727</a> ?</p>",
        "id": 274898402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646948300
    },
    {
        "content": "<p>there's one further up in this thread</p>",
        "id": 274898497,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1646948347
    },
    {
        "content": "<p>or generally <a href=\"https://github.com/rust-lang/chalk/issues/750\">chalk#750</a></p>",
        "id": 274898554,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1646948383
    },
    {
        "content": "<p>ok, that seems to be the case I didn't solve yet, I think it's solve<em>able</em></p>",
        "id": 274904972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1646951357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/recursive.20solver.20vs.2E.20implied.20env/near/274898383\">said</a>:</p>\n<blockquote>\n<p>fix -- or at least partial fix -- here <a href=\"https://github.com/rust-lang/chalk/issues/727#issuecomment-1064522393\">https://github.com/rust-lang/chalk/issues/727#issuecomment-1064522393</a></p>\n</blockquote>\n<p>hmm yeah that's something I was also looking into doing <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 274912775,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1646956287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'd really like to get <a href=\"https://github.com/rust-lang/chalk/issues/754\">chalk#754</a> merged, let me know if I can help</p>",
        "id": 275406796,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1647365168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> ok great! I'm not sure what is missing now? I'll check it in a bit</p>",
        "id": 275406865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647365200
    },
    {
        "content": "<p>I've been thinking about some further follow-ups</p>",
        "id": 275406883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647365208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> pushed some changes</p>",
        "id": 275454356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647390674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I left some questions</p>",
        "id": 275458126,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647394614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> posted answers and a kinda 80% fix to SLG solver</p>",
        "id": 275858998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647635464
    },
    {
        "content": "<p>seems ready to be merged</p>",
        "id": 275859032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647635484
    },
    {
        "content": "<p>looking</p>",
        "id": 275859202,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647635574
    },
    {
        "content": "<p>looks like CI is running into the nightly ICE</p>",
        "id": 275859334,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647635650
    },
    {
        "content": "<p>oh, dear</p>",
        "id": 275859340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647635656
    },
    {
        "content": "<p>that ICE should be fixed on next nightly, just barely didn't make it into yesterday's :/</p>",
        "id": 275859377,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1647635686
    },
    {
        "content": "<p>(if you're talking about that debuginfo ICE, that is)</p>",
        "id": 275859390,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1647635700
    },
    {
        "content": "<p>yes, I know it will be</p>",
        "id": 275859584,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647635800
    },
    {
        "content": "<p>Now I more understand why we got so many duplicates</p>",
        "id": 275859603,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647635814
    },
    {
        "content": "<p>I think that issue probably should have been left pinned until the nightly hit</p>",
        "id": 275859630,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647635833
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 275859777,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647635902
    },
    {
        "content": "<p>There is still more to do here, right? This is only a partial fix?</p>",
        "id": 275859803,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647635921
    },
    {
        "content": "<p>I left a kind of FIXME</p>",
        "id": 275860005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636054
    },
    {
        "content": "<p>depends what you mean</p>",
        "id": 275860014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636059
    },
    {
        "content": "<p>there's a lot more to do in multiple dimensions</p>",
        "id": 275860020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636063
    },
    {
        "content": "<p>e.g. this is just handling the most obvious case of one answer subsuming another</p>",
        "id": 275860053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636085
    },
    {
        "content": "<p>but for the SLG case <em>in particular</em> I'm not sure if <em>even this</em> case is fully handled</p>",
        "id": 275860065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636097
    },
    {
        "content": "<p>I guess tests need blessing :) So some of my comments might be wrong</p>",
        "id": 275860334,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647636262
    },
    {
        "content": "<p>oh</p>",
        "id": 275860340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636274
    },
    {
        "content": "<p>By partial fix, I was meaning one of the 727 tests still has a FIXME with wrong output</p>",
        "id": 275860367,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647636294
    },
    {
        "content": "<p>let me take a look</p>",
        "id": 275860381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636303
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 275860388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636308
    },
    {
        "content": "<p>yes, it's still partial in other ways too</p>",
        "id": 275860392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636311
    },
    {
        "content": "<p>interestingly the mir-formality stuff is relevant there</p>",
        "id": 275860417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636331
    },
    {
        "content": "<p>how do I update expect again...?</p>",
        "id": 275860496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636376
    },
    {
        "content": "<p>oh, I guess I can't</p>",
        "id": 275860510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636393
    },
    {
        "content": "<p>there are a lot of tests that SLG solves now that recursive doesn't</p>",
        "id": 275860557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636430
    },
    {
        "content": "<p>bother</p>",
        "id": 275860559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636431
    },
    {
        "content": "<p>oof</p>",
        "id": 275860575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647636448
    },
    {
        "content": "<p>tempted to leave the SLG part for a follow-up PR</p>",
        "id": 275860602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636463
    },
    {
        "content": "<p>I want to double check I didn't mess something up :)</p>",
        "id": 275860611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647636470
    },
    {
        "content": "<p>Also fine with that</p>",
        "id": 275860757,
        "sender_full_name": "Jack Huey",
        "timestamp": 1647636536
    }
]