[
    {
        "content": "<p>Is there any semantic difference between <code>impl Trait</code> and <code>&lt;T: Trait&gt; T</code>?</p>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"n\">reader</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">io</span>::<span class=\"n\">Read</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// vs.</span>\n<span class=\"k\">fn</span> <span class=\"nf\">read</span><span class=\"o\">&lt;</span><span class=\"n\">R</span>: <span class=\"nc\">io</span>::<span class=\"n\">Read</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">reader</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// vs. (though I think this is the same as &lt;R: io::Read&gt;)</span>\n<span class=\"k\">fn</span> <span class=\"nf\">read</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">reader</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">R</span>: <span class=\"nc\">io</span>::<span class=\"n\">Read</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217696229,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606173356
    },
    {
        "content": "<p>2 and 3 are the same afaik</p>",
        "id": 217696874,
        "sender_full_name": "lcnr",
        "timestamp": 1606173785
    },
    {
        "content": "<p>there are some subtle differences between 1 and 2 though</p>",
        "id": 217696892,
        "sender_full_name": "lcnr",
        "timestamp": 1606173803
    },
    {
        "content": "<p>you can't name <code>R</code> for <code>impl io::Read</code>, so <code>read::&lt;SpecificReader&gt;(...)</code> does not work for 1</p>",
        "id": 217696976,
        "sender_full_name": "lcnr",
        "timestamp": 1606173847
    },
    {
        "content": "<p>other than that we should just lower argument position <code>impl Trait</code> to a param. I am not completely sure about that though</p>",
        "id": 217697046,
        "sender_full_name": "lcnr",
        "timestamp": 1606173911
    },
    {
        "content": "<p>Thanks! What happens to return position <code>impl Trait</code> that's different from argument position?</p>",
        "id": 217697200,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606174034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/impl.20trait.20vs.20explicit.20trait.20bounds/near/217696976\">said</a>:</p>\n<blockquote>\n<p>you can't name <code>R</code> for <code>impl io::Read</code>, so <code>read::&lt;SpecificReader&gt;(...)</code> does not work for 1</p>\n</blockquote>\n<p>Though you could probably accomplish the same with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">reader</span>: <span class=\"nc\">SpecificReader</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>right?</p>",
        "id": 217697237,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606174079
    },
    {
        "content": "<p>Using <code>impl Trait</code> in argument position also prevent callers from explicitly specifying <em>any</em> explicit type parameters</p>",
        "id": 217697628,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606174371
    },
    {
        "content": "<p>return position impl trait is a different language feature (an \"existential type\" determined by the function declaring it, not the caller)</p>",
        "id": 217697673,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606174413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/144729-wg-traits/topic/impl.20trait.20vs.20explicit.20trait.20bounds/near/217697628\">said</a>:</p>\n<blockquote>\n<p>Using <code>impl Trait</code> in argument position also prevent callers from explicitly specifying <em>any</em> explicit type parameters</p>\n</blockquote>\n<p>this is not really intended as a long-term solution though</p>",
        "id": 217923592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606329813
    },
    {
        "content": "<p>I'm a bit confused with the syntax here, I have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Handler</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Error</span>: <span class=\"nc\">crate</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Msg</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">handle_err</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Self</span>::<span class=\"n\">Error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when I <code>impl Handler for X</code>, replacing the input argument <code>impl Msg</code> by a struct that implements Msg trait,  I get <code>method handle has 0 type parameters but its trait declaration has 1 type parameter</code></p>",
        "id": 245964267,
        "sender_full_name": "zkao",
        "timestamp": 1626271631
    },
    {
        "content": "<p><code>impl Msg</code> as a function arg means something like <code>T: Msg</code>, without naming <code>T</code></p>",
        "id": 245964593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626271746
    },
    {
        "content": "<p>what do I have to do when implementing the handle fn of this trait?</p>",
        "id": 245964895,
        "sender_full_name": "zkao",
        "timestamp": 1626271856
    },
    {
        "content": "<p>how should i pass the type parameter?</p>",
        "id": 245965140,
        "sender_full_name": "zkao",
        "timestamp": 1626271944
    },
    {
        "content": "<p>as i said, i was passing a struct that impl Msg, but that doesnt work</p>",
        "id": 245965192,
        "sender_full_name": "zkao",
        "timestamp": 1626271970
    },
    {
        "content": "<p>I mean, what exactly is your intention? Do you want handle to be able to take any Msg for a given impl, and <em>all</em> messages for a given impl</p>",
        "id": 245965263,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626272005
    },
    {
        "content": "<p><code>error    E0049  method </code>handle<code> has 0 type parameters but its trait declaration has 1 type parameter\n found 0 type parameters, expected 1 (lsp)</code></p>",
        "id": 245965264,
        "sender_full_name": "zkao",
        "timestamp": 1626272005
    },
    {
        "content": "<p>The intention of the implementer of the trait is to hard-code a type</p>",
        "id": 245965462,
        "sender_full_name": "zkao",
        "timestamp": 1626272071
    },
    {
        "content": "<p>If it's the former, the signature of the function stays the same in simple. (Alternatively, you could change the function to use a generic)</p>",
        "id": 245965463,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626272071
    },
    {
        "content": "<p>If it's the latter, you want a new associated type <code>MyMsg: Msg</code> and the function signature would then take a <code>Self::MyMsg</code></p>",
        "id": 245965593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626272132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/impl.20trait.20vs.20explicit.20trait.20bounds/near/245965263\">said</a>:</p>\n<blockquote>\n<p>I mean, what exactly is your intention? Do you want handle to be able to take any Msg for a given impl, and <em>all</em> messages for a given impl</p>\n</blockquote>\n<p>former meaning -&gt; take any Msg for a given impl</p>\n<p>latter -&gt; <em>all</em> messages for a given impl</p>\n<p>Im afraid I dont clearly see the difference here<br>\n<span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 245966367,
        "sender_full_name": "zkao",
        "timestamp": 1626272447
    },
    {
        "content": "<p>Ah sorry, typo. I meant a single given message for the latter</p>",
        "id": 245966524,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626272508
    },
    {
        "content": "<p>my intention was the Handler trait definition to allow for anything implementing Msg, thus former. </p>\n<p>So if I'm understanding this right, the impl of the trait Handler must have a <code>impl Msg</code> as input argument type, and not pass any concrete type, is that correct?</p>",
        "id": 245967511,
        "sender_full_name": "zkao",
        "timestamp": 1626272906
    },
    {
        "content": "<p>Well, it would have <code>impl Msg</code> as an arg, but you definitely can pass a concrete type (because of monomorphization)</p>",
        "id": 245967653,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626272982
    },
    {
        "content": "<p>but the function signature must contain <code>impl Msg</code></p>",
        "id": 245967837,
        "sender_full_name": "zkao",
        "timestamp": 1626273053
    },
    {
        "content": "<p>Yes</p>",
        "id": 245967860,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626273063
    },
    {
        "content": "<p>got it now, thank you so much <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 245967897,
        "sender_full_name": "zkao",
        "timestamp": 1626273079
    },
    {
        "content": "<p>Of course!</p>",
        "id": 245967938,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626273101
    }
]