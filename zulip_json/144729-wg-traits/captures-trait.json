[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Have you seen <a href=\"https://github.com/rust-lang/rust/pull/56047\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56047\">https://github.com/rust-lang/rust/pull/56047</a> yet BTW? I was hoping to get some clarification on <a href=\"https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999\">https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999</a> from you if that's alright.</p>",
        "id": 148060451,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542741342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I had not seen that -- I do actually think we should try to solve this at the language level</p>",
        "id": 148066267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542746301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh I see</p>",
        "id": 148075495,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542755396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what do you think the approach should be then?</p>",
        "id": 148075549,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542755410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> hey, around by chance?</p>",
        "id": 148123639,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542819835
    },
    {
        "content": "<p>sort of</p>",
        "id": 148124047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542820174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> what's up</p>",
        "id": 148124989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> wanted to get your thoughts on the lifetime capturing issue if you have a minute</p>",
        "id": 148125007,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542821092
    },
    {
        "content": "<p>ah</p>",
        "id": 148125014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821101
    },
    {
        "content": "<p>re that comment of yours, from a while back</p>",
        "id": 148125015,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542821102
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999\">https://github.com/rust-lang/rust/issues/34511#issuecomment-373423999</a></p>",
        "id": 148125025,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542821114
    },
    {
        "content": "<p>left a <a href=\"https://github.com/rust-lang/rust/pull/56047#issuecomment-440748053\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56047#issuecomment-440748053\">quick comment on the RFC</a></p>",
        "id": 148125114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821238
    },
    {
        "content": "<p>the tl;dr is that <code>Captures</code> is not something I want users to have to think about :)</p>",
        "id": 148125128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821262
    },
    {
        "content": "<p>but I'm not sure what is the best way to fix</p>",
        "id": 148125131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821268
    },
    {
        "content": "<p>or to <em>think</em> about the fix, that is</p>",
        "id": 148125133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821274
    },
    {
        "content": "<p>we could certainly make the compiler accept the code</p>",
        "id": 148125181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821301
    },
    {
        "content": "<p>I am...like 99.5% sure that would be fine :) but I'm nervous about accepting a bit too much</p>",
        "id": 148125187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah...</p>",
        "id": 148125389,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542821535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> \"The key thing here is that TyCtxt is invariant w/r/t 'tcx and 'gcx, so they must appear in the return type.\" -- could you clarify why they <em>must</em> appear in the return type because they're invariant?</p>",
        "id": 148125397,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542821559
    },
    {
        "content": "<p>but generally, behaviour akin to <code>dyn Trait</code> sounds sensible to me</p>",
        "id": 148125495,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542821696
    },
    {
        "content": "<p>well</p>",
        "id": 148125496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821699
    },
    {
        "content": "<p>let's say the type was <code>&amp;'a T</code></p>",
        "id": 148125506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821715
    },
    {
        "content": "<p>in that case, there is a subtyping relationship: <code>&amp;'a T &lt;:  &amp;'b T</code> if <code>'a: 'b</code></p>",
        "id": 148125509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821736
    },
    {
        "content": "<p>in other words, you can view a <code>&amp;'a T</code> as an <code>&amp;'b T</code> where <code>'b</code> is some shorter lifetime</p>",
        "id": 148125514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821744
    },
    {
        "content": "<p>however, you cannot view a <code>TyCtxt&lt;.., 'gcx, 'tcx&gt;</code> as a <code>TyCtxt&lt;.., 'gcx1, 'tcx1&gt;</code> where <code>'[gt]cx1</code> are shorter</p>",
        "id": 148125569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821774
    },
    {
        "content": "<p>this is because we have shared, mutable state in the <code>TyCtxt</code> (e.g., <code>RefCell&lt;HashMap&lt;..&gt;&gt;</code>)</p>",
        "id": 148125577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821793
    },
    {
        "content": "<p>if you were to just approximate the <code>'tcx</code> lifetime, you could store some random stuff from your stack into one of those hashmaps</p>",
        "id": 148125590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821812
    },
    {
        "content": "<p>point is, if we are trying to view a <code>&amp;'a T</code> as a <code>Foo&lt;'b&gt;</code> where the hidden type is <code>&amp;'b u32</code>, that's ok</p>",
        "id": 148125618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821843
    },
    {
        "content": "<p>since everything of type <code>&amp;'a T</code> is <em>also</em> of type <code>&amp;'b T</code> (so long as <code>'b</code> is shorter)</p>",
        "id": 148125628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821856
    },
    {
        "content": "<p>(if it helps, think of Java: basically, if the hidden type were Object, it'd be ok to put a String in there)</p>",
        "id": 148125695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821892
    },
    {
        "content": "<p>(because a String <em>is</em> an Object)</p>",
        "id": 148125698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542821897
    },
    {
        "content": "<p>hmmm</p>",
        "id": 148125765,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542821990
    },
    {
        "content": "<p>I know what invariant means, but why <em>must</em> they appear in the return type <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 148125834,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542822029
    },
    {
        "content": "<p>point is: the return type is some supertype of <code>TyCtxt&lt;'tcx&gt;</code> (ignoring the others for now since they don't matter)</p>",
        "id": 148126105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542822293
    },
    {
        "content": "<p>but all such supertypes still talk about <code>'tcx</code></p>",
        "id": 148126112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542822301
    },
    {
        "content": "<p>or <code>'gcx</code>, whichever one we are trying to hide</p>",
        "id": 148126123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542822308
    },
    {
        "content": "<p>so, the hidden type will always include <code>'gcx</code></p>",
        "id": 148126125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542822315
    },
    {
        "content": "<p>makes sense <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>.  but then why are we allowed to do it with <code>dyn Trait</code>, which is also a supertype, surely?</p>",
        "id": 148126205,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542822382
    },
    {
        "content": "<p>it is not a supertype</p>",
        "id": 148128845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542824977
    },
    {
        "content": "<p>you can construct a <code>dyn (Trait + 'b)</code> from any type <code>T</code> where (a) <code>T: Trait</code> and <code>T: 'b</code> (there is always a bound <code>'b</code>, though it often defaults to <code>'static</code>)</p>",
        "id": 148128923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542825017
    },
    {
        "content": "<p>in other words, converting into a <code>dyn Trait</code> loses static type information</p>",
        "id": 148128932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542825032
    },
    {
        "content": "<p>we don't know exactly which lifetimes are contained within</p>",
        "id": 148128938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542825041
    },
    {
        "content": "<p>this is not true for <code>impl Trait</code>, actually, at least not <em>presently</em></p>",
        "id": 148128949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542825057
    },
    {
        "content": "<p>I think the \"proper\" way to view this is that we would have some kind of \"exists&lt;'gcx: 'tcx&gt; T` operator that lets you hide a lifetime from any type</p>",
        "id": 148128980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542825078
    },
    {
        "content": "<p>yeah, I discussed that with @centril before briefly. I think we could even reuse <code>for&lt;&gt;</code>?</p>",
        "id": 148131766,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542828079
    },
    {
        "content": "<p>and good point about it not being a supertype</p>",
        "id": 148131777,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542828097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> some prior discussion I just remembered, if you're interested. ^</p>",
        "id": 156400638,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1547846510
    }
]