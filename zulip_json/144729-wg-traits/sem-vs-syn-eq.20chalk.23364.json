[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what's the right place to insert sem-syn lowering? My guess is \"in <code>ClauseBuilder</code>'s <code>push_clause_with_priority</code>\", am I right?</p>",
        "id": 194328280,
        "sender_full_name": "Areredify",
        "timestamp": 1587053167
    },
    {
        "content": "<p>Whats the difference between an <code>AliasTy</code> and a <code>TyData::Apply</code> with an <code>AssociatedType</code> name?</p>",
        "id": 194344928,
        "sender_full_name": "Areredify",
        "timestamp": 1587060501
    },
    {
        "content": "<p>The <code>TypeName::AssociatedType</code> is a placeholder, just the <code>AssocTypeId</code></p>",
        "id": 194346536,
        "sender_full_name": "detrumi",
        "timestamp": 1587061229
    },
    {
        "content": "<p>Yeah, but <code>TyData::Apply</code> has a substitution in it</p>",
        "id": 194346801,
        "sender_full_name": "Areredify",
        "timestamp": 1587061345
    },
    {
        "content": "<p>That makes a difference in the generated clauses</p>",
        "id": 194347484,
        "sender_full_name": "detrumi",
        "timestamp": 1587061654
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/clauses/program_clauses.rs#L590\" title=\"https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/clauses/program_clauses.rs#L590\">here</a>:</p>",
        "id": 194347591,
        "sender_full_name": "detrumi",
        "timestamp": 1587061686
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>-- Rule AliasEq-Placeholder\nforall&lt;Self, &#39;a, T&gt; {\n    AliasEq(&lt;Self as Foo&gt;::Assoc&lt;&#39;a, T&gt; = (Foo::Assoc&lt;&#39;a, T&gt;)&lt;Self&gt;).\n }\n</pre></div>",
        "id": 194347621,
        "sender_full_name": "detrumi",
        "timestamp": 1587061701
    },
    {
        "content": "<p><code>&lt;Self as Foo&gt;::Assoc&lt;'a, T&gt;</code> is the <code>AliasTy</code>, and <code>(Foo::Assoc&lt;'a, T&gt;)&lt;Self&gt;</code> is the <code>TyData::Apply</code></p>",
        "id": 194347731,
        "sender_full_name": "detrumi",
        "timestamp": 1587061756
    },
    {
        "content": "<p>I find the syntax distinction here a bit confusing, for opaque types it's more clear that <code>!T</code> is the placeholder and <code>T</code> the actual opaque type</p>",
        "id": 194347882,
        "sender_full_name": "detrumi",
        "timestamp": 1587061813
    },
    {
        "content": "<p>What's the semantic difference? One of the two is opaque or something?</p>",
        "id": 194348093,
        "sender_full_name": "Areredify",
        "timestamp": 1587061921
    },
    {
        "content": "<p>Yes, you don't always know the exact type when referring to it</p>",
        "id": 194348191,
        "sender_full_name": "detrumi",
        "timestamp": 1587061960
    },
    {
        "content": "<p>I don't get it</p>",
        "id": 194354036,
        "sender_full_name": "Areredify",
        "timestamp": 1587064597
    },
    {
        "content": "<p>Nevermind, I think I get it</p>",
        "id": 194354685,
        "sender_full_name": "Areredify",
        "timestamp": 1587064918
    },
    {
        "content": "<p>Hmm, I did syn eq for alias types, and the only problem I encountered is (I assume) coinductive check (only <code>cyclic_wf_requirements</code> is not green)</p>",
        "id": 194359166,
        "sender_full_name": "Areredify",
        "timestamp": 1587067174
    },
    {
        "content": "<p>I pushed a draft implementation</p>",
        "id": 194367045,
        "sender_full_name": "Areredify",
        "timestamp": 1587070899
    },
    {
        "content": "<p>You can push off reviewing syn-eq pr, if you don't have time, and I'll investigate the coinductive thing myself. I just thought you might have an easy insight</p>",
        "id": 194422556,
        "sender_full_name": "Areredify",
        "timestamp": 1587120297
    },
    {
        "content": "<p>We'll see, I have a few things to take care of today, I'm not sure how much time i'll get for reviewing</p>",
        "id": 194446264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587132950
    },
    {
        "content": "<p>but yes please tell me the order <em>you</em> would prefer, that's helpful :)</p>",
        "id": 194446332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587132964
    },
    {
        "content": "<p>Also, I'm not even sure what you mean by \"the coinductive thing\" (maybe I've not yet seen a GH notification or something)</p>",
        "id": 194446355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587132977
    },
    {
        "content": "<p>So I implemented sem-to-syn for aliases, the only test that is failing is <code>cyclic_wf_requirements</code>:</p>\n<div class=\"codehilite\"><pre><span></span>            trait Foo where &lt;Self as Foo&gt;::Value: Foo {\n                type Value;\n            }\n\n            struct Unit { }\n            impl Foo for Unit {\n                type Value = Unit;\n            }\n</pre></div>",
        "id": 194447886,
        "sender_full_name": "Areredify",
        "timestamp": 1587133584
    },
    {
        "content": "<p>Which, I assume, is about coinductive reasoning for <code>WellFormed</code></p>",
        "id": 194448030,
        "sender_full_name": "Areredify",
        "timestamp": 1587133641
    },
    {
        "content": "<p>ps <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> I branched off the comments you've made on this topic here</p>",
        "id": 194455569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587136362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> what are the options to debug the proving process? I can't understand why this isn't provable: </p>\n<div class=\"codehilite\"><pre><span></span><code>trait Foo where &lt;Self as Foo&gt;::Value: Foo {\n      type Value;\n}\nstruct Unit { }\nimpl Foo for Unit {\ntype Value = Unit;\n----\nclauses:\nfor&lt;type, type&gt; AliasEq(&lt;^0.0 as Foo&gt;::Value = ^0.1) :- Normalize(&lt;^0.0 as Foo&gt;::Value -&gt; ^0.1),\nfor&lt;type&gt; WellFormed(^0.0: Foo) :- ForAll&lt;&gt; { Exists&lt;type&gt; { all(WellFormed(^0.0: Foo), AliasEq(&lt;^2.0 as Foo&gt;::Value = ^0.0)) } }, Implemented(^0.0: Foo),\nImplemented(Unit: Foo),\nNormalize(&lt;Unit as Foo&gt;::Value -&gt; Unit),\n(other clauses omitted)\n-----\ngoal {\n      WellFormed(Unit: Foo)\n}\n</code></pre></div>\n\n\n<p>It should be provable, right? I feel like im going crazy, I've been staring at CHALK_DEBUG=2 for two days now</p>",
        "id": 196117824,
        "sender_full_name": "Areredify",
        "timestamp": 1588533105
    },
    {
        "content": "<p>I generally just stare at CHALK_DEBUG=2. let me take a look</p>",
        "id": 196117904,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588533217
    },
    {
        "content": "<p>I pushed latest changes, if you need the code. The test is <code>cyclic_wf_requirements</code></p>",
        "id": 196118185,
        "sender_full_name": "Areredify",
        "timestamp": 1588533648
    },
    {
        "content": "<p>There are several failing tests?</p>",
        "id": 196118560,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588534262
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>lowering::assoc_tys\ntest::coherence::nonoverlapping_assoc_types\ntest::implied_bounds::implied_from_env\ntest::projection::gat_unify_with_implied_wc\ntest::projection::rust_analyzer_regression\ntest::wf_lowering::cyclic_wf_requirements\n</code></pre></div>",
        "id": 196118563,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588534263
    },
    {
        "content": "<p>Yeah that's fine, they should be failing</p>",
        "id": 196118578,
        "sender_full_name": "Areredify",
        "timestamp": 1588534276
    },
    {
        "content": "<p>Okay</p>",
        "id": 196118590,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588534290
    },
    {
        "content": "<p>So, another thing that is helpful is to diff the <code>CHALK_DEBUG</code> log pre vs post PR</p>",
        "id": 196120098,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588536057
    },
    {
        "content": "<p>do you want me to try it or you already did that?</p>",
        "id": 196120567,
        "sender_full_name": "Areredify",
        "timestamp": 1588536711
    },
    {
        "content": "<p>I have it</p>",
        "id": 196120635,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588536798
    },
    {
        "content": "<p><a href=\"https://www.diffchecker.com/BlBbGNmW\" title=\"https://www.diffchecker.com/BlBbGNmW\">https://www.diffchecker.com/BlBbGNmW</a></p>",
        "id": 196120637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588536801
    },
    {
        "content": "<p>looking through it</p>",
        "id": 196120641,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588536810
    },
    {
        "content": "<p>wow that is helpful</p>",
        "id": 196120826,
        "sender_full_name": "Areredify",
        "timestamp": 1588537048
    },
    {
        "content": "<p>indeed</p>",
        "id": 196120840,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537081
    },
    {
        "content": "<p>Specifically, look at line 4613 in source</p>",
        "id": 196121100,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537357
    },
    {
        "content": "<p>Yeah, I noticed that</p>",
        "id": 196121204,
        "sender_full_name": "Areredify",
        "timestamp": 1588537482
    },
    {
        "content": "<p>Specifically,<code>WellFormed</code> goals are coinductive</p>",
        "id": 196121276,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537563
    },
    {
        "content": "<p>but, <code>AliasEq</code> is not</p>",
        "id": 196121278,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537569
    },
    {
        "content": "<p>Why does it say \"no new answers\" shortly after? We have  <code>AliasEq(&lt;Unit as Foo&gt;::Value = ?0)</code> which we can prove to get <code>?0</code>, right?</p>",
        "id": 196121292,
        "sender_full_name": "Areredify",
        "timestamp": 1588537600
    },
    {
        "content": "<p>Because the strand results in a non-coinductive cycle</p>",
        "id": 196121322,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537652
    },
    {
        "content": "<p>and is discarded</p>",
        "id": 196121324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537656
    },
    {
        "content": "<p>Non-coinductive cycle meaning there is at least one non-coinductive goal in the cycle to prove?</p>",
        "id": 196121392,
        "sender_full_name": "Areredify",
        "timestamp": 1588537728
    },
    {
        "content": "<p>right</p>",
        "id": 196121409,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537751
    },
    {
        "content": "<p>so</p>",
        "id": 196121412,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537752
    },
    {
        "content": "<p>one sec</p>",
        "id": 196121498,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537827
    },
    {
        "content": "<p>table 8 has the goal <code>WellFormed(^0.0: Foo)</code></p>",
        "id": 196121516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537865
    },
    {
        "content": "<p>one of the strands has the subgoals:</p>",
        "id": 196121522,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537879
    },
    {
        "content": "<p><code>ForAll&lt;&gt; { Exists&lt;type&gt; { all(WellFormed(^0.0: Foo), AliasEq(&lt;?0 as Foo&gt;::Value = ^0.0)) } }</code></p>",
        "id": 196121527,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537887
    },
    {
        "content": "<p>and <code>Implemented(?0: Foo)</code></p>",
        "id": 196121536,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537895
    },
    {
        "content": "<p>Aye</p>",
        "id": 196121596,
        "sender_full_name": "Areredify",
        "timestamp": 1588537931
    },
    {
        "content": "<p>And <code>WellFormed(?0: Foo)</code> is a subgoal for table 7</p>",
        "id": 196121622,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537970
    },
    {
        "content": "<p>which has a goal <code>ForAll&lt;&gt; { Exists&lt;type&gt; { all(WellFormed(^0.0: Foo), AliasEq(&lt;Unit as Foo&gt;::Value = ^0.0)) } }</code></p>",
        "id": 196121629,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588537980
    },
    {
        "content": "<p>And <code>ForAll&lt;&gt; { Exists&lt;type&gt; { all(WellFormed(^0.0: Foo), AliasEq(&lt;Unit as Foo&gt;::Value = ^0.0)) } }</code> is a subgoal for table 1</p>",
        "id": 196121706,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588538068
    },
    {
        "content": "<p>I think I wrote those down right</p>",
        "id": 196121716,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588538088
    },
    {
        "content": "<p>maybe</p>",
        "id": 196121720,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588538090
    },
    {
        "content": "<p>(side note that I think tracing support will make finding the table stack easier)</p>",
        "id": 196121820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588538221
    },
    {
        "content": "<p>I certainly hope so</p>",
        "id": 196121838,
        "sender_full_name": "Areredify",
        "timestamp": 1588538255
    },
    {
        "content": "<p>The other tough part of going through the chalk debug output is trying to filter out bits of the program that you've already seen to be proven</p>",
        "id": 196122215,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588538664
    },
    {
        "content": "<p>Yeah we really need some tool to visualize the process or something, we will inevitably hit a bug with a convoluted set of clauses, it will be a nightmare to debug</p>",
        "id": 196122471,
        "sender_full_name": "Areredify",
        "timestamp": 1588538995
    },
    {
        "content": "<p>So I've been thinking through this a bit</p>",
        "id": 196126274,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588544752
    },
    {
        "content": "<p>And not really getting very far</p>",
        "id": 196126313,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588544766
    },
    {
        "content": "<p>(in regards to what the proper solution is here)</p>",
        "id": 196126315,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588544776
    },
    {
        "content": "<p>I'm thinking that the <code>WellFormed</code> goal should <em>not</em> be \"lowered\"</p>",
        "id": 196126319,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588544816
    },
    {
        "content": "<p>But I'm not sure if that's the most elegant solution here</p>",
        "id": 196126327,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588544841
    },
    {
        "content": "<p>We should probably put it on the agenda</p>",
        "id": 196126386,
        "sender_full_name": "Areredify",
        "timestamp": 1588544971
    },
    {
        "content": "<p>Good idea :)</p>",
        "id": 196126389,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588544998
    },
    {
        "content": "<p>The other thing that's potentially weird</p>",
        "id": 196126432,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588545026
    },
    {
        "content": "<p>I'm trying to gather the info into a coherent post</p>",
        "id": 196126438,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588545053
    },
    {
        "content": "<p>But essentially, using a bound var for the new type is causing problems because it get's canonicalized to an inference variable</p>",
        "id": 196126468,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588545101
    },
    {
        "content": "<p>And we lose that we are in a coinductive <code>WellFormed(?0: Foo)</code> cycle</p>",
        "id": 196126508,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588545136
    },
    {
        "content": "<p>hmm</p>",
        "id": 196233215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588622737
    },
    {
        "content": "<p>Does <code>WellFormed</code> flounder if it's input type is an inference variable?</p>",
        "id": 196233482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588622838
    },
    {
        "content": "<p>Mmm, no</p>",
        "id": 196233756,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588622971
    },
    {
        "content": "<p>I wonder if that would help here</p>",
        "id": 196233809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588622999
    },
    {
        "content": "<p>I would think so</p>",
        "id": 196233838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588623002
    },
    {
        "content": "<p>because we want to process the <code>AliasEq</code> first</p>",
        "id": 196233888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588623016
    },
    {
        "content": "<p>Well ... hmm</p>",
        "id": 196233959,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588623049
    },
    {
        "content": "<p>Maybe that would work</p>",
        "id": 196233984,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588623063
    },
    {
        "content": "<p>I'll try that then</p>",
        "id": 196234435,
        "sender_full_name": "Areredify",
        "timestamp": 1588623282
    },
    {
        "content": "<p>The test is still red, assuming I did it correctly</p>",
        "id": 196234899,
        "sender_full_name": "Areredify",
        "timestamp": 1588623564
    },
    {
        "content": "<p>It worked for me</p>",
        "id": 196234932,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588623592
    },
    {
        "content": "<p>err wait</p>",
        "id": 196234997,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588623608
    },
    {
        "content": "<p>I'm on master</p>",
        "id": 196235001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588623611
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♀️</p>",
        "id": 196235015,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588623621
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DomainGoal::WellFormed(WellFormed::Trait(trait_ref)) =&gt; {\n            if trait_ref.self_type_parameter(interner).is_var(interner) {\n                return Err(Floundered);\n            }\n            db.trait_datum(trait_ref.trait_id)\n                .to_program_clauses(builder);\n        }\n</code></pre></div>",
        "id": 196235041,
        "sender_full_name": "Areredify",
        "timestamp": 1588623638
    },
    {
        "content": "<p>Do we substitute out the inference variable once we find a solution on the other subgoal? I don't remember</p>",
        "id": 196235447,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588623899
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 196235485,
        "sender_full_name": "Areredify",
        "timestamp": 1588623931
    },
    {
        "content": "<p>then this should always cause the strand to flounder still</p>",
        "id": 196235776,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588624113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> is your PR up to date with the changes from the branch?</p>",
        "id": 196237949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588625234
    },
    {
        "content": "<p>yes</p>",
        "id": 196237979,
        "sender_full_name": "Areredify",
        "timestamp": 1588625247
    },
    {
        "content": "<p>Note that it doesn't respect internal binders and some other stuff</p>",
        "id": 196238239,
        "sender_full_name": "Areredify",
        "timestamp": 1588625361
    },
    {
        "content": "<p>IIRC the PR looked incomplete when I last looked at it</p>",
        "id": 196238288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588625389
    },
    {
        "content": "<p>I'm trying to remember why :)</p>",
        "id": 196238409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588625436
    },
    {
        "content": "<p>That's because it is :)</p>",
        "id": 196238419,
        "sender_full_name": "Areredify",
        "timestamp": 1588625445
    },
    {
        "content": "<p>for one thing, maybe, it didn't lower goals? (maybe it does now?)</p>",
        "id": 196238425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588625450
    },
    {
        "content": "<p>It does now</p>",
        "id": 196238438,
        "sender_full_name": "Areredify",
        "timestamp": 1588625457
    },
    {
        "content": "<p>But it only handles projection aliases</p>",
        "id": 196238461,
        "sender_full_name": "Areredify",
        "timestamp": 1588625468
    },
    {
        "content": "<p>And doesn't respect internal binders</p>",
        "id": 196238727,
        "sender_full_name": "Areredify",
        "timestamp": 1588625607
    },
    {
        "content": "<p>That test was driving me crazy so I didn't finish it <span aria-label=\"crying cat\" class=\"emoji emoji-1f63f\" role=\"img\" title=\"crying cat\">:crying_cat:</span></p>",
        "id": 196238773,
        "sender_full_name": "Areredify",
        "timestamp": 1588625633
    },
    {
        "content": "<p>which test is it exactly?</p>",
        "id": 196238829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588625644
    },
    {
        "content": "<p>I've got it building locally now</p>",
        "id": 196238840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588625648
    },
    {
        "content": "<p>cyclic_wf_requirements</p>",
        "id": 196238858,
        "sender_full_name": "Areredify",
        "timestamp": 1588625658
    },
    {
        "content": "<p>I have pre-lowering/past-lowering clauses saved, if you don't want to generate them yourself</p>",
        "id": 196238965,
        "sender_full_name": "Areredify",
        "timestamp": 1588625723
    },
    {
        "content": "<p>so</p>",
        "id": 196239876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588626225
    },
    {
        "content": "<p>I added in the floundring change and some debug output</p>",
        "id": 196239885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588626231
    },
    {
        "content": "<p>and I see this:</p>",
        "id": 196239888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588626233
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>: <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">top_of_stack_is_coinductive_from</span><span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"n\">StackIndex</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n: : <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">StackIndex</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">UCanonical</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">canonical</span>: <span class=\"nc\">Canonical</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">InEnvironment</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">environment</span>: <span class=\"nc\">Env</span><span class=\"p\">([</span><span class=\"n\">FromEnv</span><span class=\"p\">(</span><span class=\"n\">Unit</span><span class=\"p\">)]),</span><span class=\"w\"> </span><span class=\"n\">goal</span>: <span class=\"nc\">WellFormed</span><span class=\"p\">(</span><span class=\"n\">Unit</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">binders</span>: <span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">universes</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n: : <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">StackIndex</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">UCanonical</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">canonical</span>: <span class=\"nc\">Canonical</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">InEnvironment</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">environment</span>: <span class=\"nc\">Env</span><span class=\"p\">([</span><span class=\"n\">FromEnv</span><span class=\"p\">(</span><span class=\"n\">Unit</span><span class=\"p\">)]),</span><span class=\"w\"> </span><span class=\"n\">goal</span>: <span class=\"nc\">ForAll</span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Exists</span><span class=\"o\">&lt;</span><span class=\"k\">type</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">WellFormed</span><span class=\"p\">(</span><span class=\"o\">^</span><span class=\"mf\">0.0</span>: <span class=\"nc\">Foo</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">AliasEq</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"mf\">0.0</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">binders</span>: <span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">universes</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n: <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196239893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588626236
    },
    {
        "content": "<p>Extracting out the interesting bits, we get this cycle:</p>\n<ul>\n<li><code>WellFormed(Unit: Foo)</code></li>\n<li><code>ForAll&lt;&gt; { Exists&lt;type&gt; { all(WellFormed(^0.0: Foo), AliasEq(&lt;Unit as Foo&gt;::Value = ^0.0)) } } }</code></li>\n<li><code>WellFormed(Unit: Foo)</code> &lt;-- this is the thing we are now trying to prove, again</li>\n</ul>",
        "id": 196239997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588626279
    },
    {
        "content": "<p>I think this is a kind of pre-existing bug that has been exposed in the notion of a coinductive cycle</p>",
        "id": 196240025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588626293
    },
    {
        "content": "<p>These combinators, like <code>ForAll</code>, <code>Exists</code>, <code>all</code>... I guess that they should be considered coinductive...probably?</p>",
        "id": 196240193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588626385
    },
    {
        "content": "<p>ok, I see we have this logic:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">GoalData</span>::<span class=\"n\">Quantified</span><span class=\"p\">(</span><span class=\"n\">QuantifierKind</span>::<span class=\"n\">ForAll</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">goal</span><span class=\"p\">.</span><span class=\"n\">skip_binders</span><span class=\"p\">().</span><span class=\"n\">is_coinductive</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196240438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588626522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> so i'm going to push a WIP commit that makes it pass, but I'm not yet sure about all of the changes :)</p>",
        "id": 196240602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588626641
    },
    {
        "content": "<p>I am not qualified to talk about coinductivness, guess I'll have to fill in the blanks</p>",
        "id": 196240783,
        "sender_full_name": "Areredify",
        "timestamp": 1588626757
    },
    {
        "content": "<p>I don't see why those changes would be wrong</p>",
        "id": 196240801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588626776
    },
    {
        "content": "<p>Which literature piece is about it? SLG solver paper?</p>",
        "id": 196240837,
        "sender_full_name": "Areredify",
        "timestamp": 1588626791
    },
    {
        "content": "<p>no, the best is probably <a href=\"https://link.springer.com/chapter/10.1007/11799573_25\" title=\"https://link.springer.com/chapter/10.1007/11799573_25\">Coinductive Logic Programming</a>, or better yet Luke Simon's thesis</p>",
        "id": 196240906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588626840
    },
    {
        "content": "<p>with those changes I get these errors:</p>",
        "id": 196240976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588626864
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>lowering::assoc_tys\ntest::coherence::nonoverlapping_assoc_types\ntest::implied_bounds::implied_from_env\ntest::projection::gat_unify_with_implied_wc\ntest::projection::rust_analyzer_regression\n</code></pre></div>",
        "id": 196240988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588626871
    },
    {
        "content": "<p>That is expected</p>",
        "id": 196241002,
        "sender_full_name": "Areredify",
        "timestamp": 1588626883
    },
    {
        "content": "<p>Thank you, you are a lifesaver</p>",
        "id": 196241014,
        "sender_full_name": "Areredify",
        "timestamp": 1588626900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/sem-vs-syn-eq.20chalk.23364/near/196240906\" title=\"#narrow/stream/144729-wg-traits/topic/sem-vs-syn-eq.20chalk.23364/near/196240906\">said</a>:</p>\n<blockquote>\n<p>no, the best is probably <a href=\"https://link.springer.com/chapter/10.1007/11799573_25\" title=\"https://link.springer.com/chapter/10.1007/11799573_25\">Coinductive Logic Programming</a>, or better yet Luke Simon's thesis</p>\n</blockquote>\n<p>Do I need to read both or the thesis would be sufficient?</p>",
        "id": 196241058,
        "sender_full_name": "Areredify",
        "timestamp": 1588626932
    },
    {
        "content": "<p>the thesis suffices, it's just an expanded version of that paper</p>",
        "id": 196241079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588626948
    },
    {
        "content": "<p>I'll at least push an expanded comment with my reasoning</p>",
        "id": 196241222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588627031
    },
    {
        "content": "<p>done</p>",
        "id": 196241840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588627420
    },
    {
        "content": "<p>pretty much convinced myself that <code>ForAll</code>, <code>Exists</code>, and <code>All</code> could all be considered coinductive all the time and it would be fine.</p>",
        "id": 196241937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588627472
    },
    {
        "content": "<p>I need convincing</p>",
        "id": 196241961,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588627495
    },
    {
        "content": "<p>Consider this comment:</p>\n<div class=\"codehilite\"><pre><span></span><code>            // The &quot;All(...)&quot; quantifier is considered coinductive. This could\n            // be somewhat surprising as you might have `All(Gc, Gi)` where `Gc`\n            // is coinductive and `Gi` is inductive. This however is really no\n            // different than defining a fresh coinductive goal like\n            //\n            // ```notrust\n            // Gx :- Gc, Gi\n            // ```\n            //\n            // and requiring `Gx` in place of `All(Gc, Gi)`, and that would be\n            // perfectly reasonable.\n</code></pre></div>",
        "id": 196242008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588627531
    },
    {
        "content": "<p>but in a more operational vein, if you ever have a cycle that involves an inductive participant, it will .. well .. show up in the cycle.</p>",
        "id": 196242131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588627596
    },
    {
        "content": "<p>i.e., if you had <code>Gi :- Gx</code>, in that example above, it would not be provable</p>",
        "id": 196242149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588627609
    },
    {
        "content": "<p>Hmm</p>",
        "id": 196242289,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588627700
    },
    {
        "content": "<p>So</p>",
        "id": 196242694,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588627987
    },
    {
        "content": "<p>I don't think think <code>All(Gc, Gi)</code> being coinductive is the same as <code>Gx</code> being coinductive</p>",
        "id": 196242725,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588628022
    },
    {
        "content": "<p>I'm trying to put this into words and convince myself one way or the other</p>",
        "id": 196242828,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588628063
    },
    {
        "content": "<p>specifically, I'm trying to think of a counter example</p>",
        "id": 196242845,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588628087
    },
    {
        "content": "<p>Is <code>All(Gi)</code> coinductive, but <code>Gi</code> is not?</p>",
        "id": 196242850,
        "sender_full_name": "Areredify",
        "timestamp": 1588628090
    },
    {
        "content": "<p>That is really surprising</p>",
        "id": 196242899,
        "sender_full_name": "Areredify",
        "timestamp": 1588628125
    },
    {
        "content": "<p>It is surprising, but I think it is correct.</p>",
        "id": 196243052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628212
    },
    {
        "content": "<p>Is <code>All(Gi) :- All(Gi)</code> a trivial cycle?</p>",
        "id": 196243116,
        "sender_full_name": "Areredify",
        "timestamp": 1588628248
    },
    {
        "content": "<p>i.e,. I don't think it allows you to prove anything surprising :)</p>",
        "id": 196243129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628251
    },
    {
        "content": "<p>Sure, if you have this rule, but we don't</p>",
        "id": 196243138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628259
    },
    {
        "content": "<p>That rule would be wrong regardless</p>",
        "id": 196243153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628271
    },
    {
        "content": "<p>like, it wouldn't capture the semantics of \"all\" that we expect</p>",
        "id": 196243164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628279
    },
    {
        "content": "<p>Oh <code>all</code> is not a domain goal</p>",
        "id": 196243223,
        "sender_full_name": "Areredify",
        "timestamp": 1588628297
    },
    {
        "content": "<p>right</p>",
        "id": 196243227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628304
    },
    {
        "content": "<p>it's built-in to the solver</p>",
        "id": 196243239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628310
    },
    {
        "content": "<p>in fact, in some sense, the fact that it's on the stack <em>at all</em> is an impl artifact I think</p>",
        "id": 196243292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628345
    },
    {
        "content": "<p>Hmm?</p>",
        "id": 196243420,
        "sender_full_name": "Areredify",
        "timestamp": 1588628414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/sem-vs-syn-eq.20chalk.23364/near/196243292\" title=\"#narrow/stream/144729-wg-traits/topic/sem-vs-syn-eq.20chalk.23364/near/196243292\">said</a>:</p>\n<blockquote>\n<p>in fact, in some sense, the fact that it's on the stack <em>at all</em> is an impl artifact I think</p>\n</blockquote>\n<p>I think <em>this</em> is more of the \"correct\" solution here</p>",
        "id": 196243676,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588628569
    },
    {
        "content": "<p>well, removing that artifact, that is</p>",
        "id": 196243707,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588628592
    },
    {
        "content": "<p>If that's possible</p>",
        "id": 196243717,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588628610
    },
    {
        "content": "<p>I...don't <em>dis</em>agree, but I also don't fully <em>agree</em></p>",
        "id": 196243738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628638
    },
    {
        "content": "<p>yeah, I'm thinking about what I just said</p>",
        "id": 196243794,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588628653
    },
    {
        "content": "<p>that is, I agree it's more \"correct\" but I'm not sure it's what we want to do</p>",
        "id": 196243795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628654
    },
    {
        "content": "<p>and considering if I regret it</p>",
        "id": 196243799,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588628658
    },
    {
        "content": "<p>I'm very sure it's not what we want to do <em>right now</em></p>",
        "id": 196243812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628676
    },
    {
        "content": "<p>I think I agree with you that <code>All</code> is coinductive</p>",
        "id": 196243886,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588628727
    },
    {
        "content": "<p>I think that this \"Gx\" rule is pretty convincing -- if it makes any sense to combine inductive and coinductive predicates, then the <code>Gx</code> example ought to be valid and prove what one expects (i.e., it holds if <code>Gi</code> and <code>Gc</code> are true, etc)</p>",
        "id": 196243893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588628735
    },
    {
        "content": "<p>Hm, so I'll work on this after finishing the generic arg work</p>",
        "id": 197337457,
        "sender_full_name": "Areredify",
        "timestamp": 1589316665
    },
    {
        "content": "<p>yeah, seems good</p>",
        "id": 197337568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589316717
    },
    {
        "content": "<p>Okay, reviving this a little bit. (Now PR <a href=\"https://github.com/rust-lang/rust/issues/589\">#589</a>)</p>",
        "id": 213473720,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602789061
    },
    {
        "content": "<p>I looked at this a bit</p>",
        "id": 213473735,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602789066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span></p>",
        "id": 213473743,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602789071
    },
    {
        "content": "<p>So, you have in a comment that:</p>\n<div class=\"codehilite\" data-code-language=\"notrust\"><pre><span></span><code> forall&lt;X&gt; {\n     Implemented(&lt;X as Iterator&gt;::Item&gt;: Debug) :-\n         Implemented(X: Debug)\n }\n</code></pre></div>\n\n<p>would lower this into:</p>\n<div class=\"codehilite\" data-code-language=\"notrust\"><pre><span></span><code> forall&lt;X, Y&gt; {\n     Implemented(Y: Debug) :-\n         AliasEq(&lt;X as Iterator&gt;::Item&gt;, Y),\n         Implemented(X: Debug)\n }\n</code></pre></div>",
        "id": 213473816,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602789106
    },
    {
        "content": "<p>oh that is ugly..</p>",
        "id": 213473831,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602789112
    },
    {
        "content": "<p>okay better</p>",
        "id": 213474022,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602789194
    },
    {
        "content": "<p>anyways, that looks right</p>",
        "id": 213474028,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602789202
    },
    {
        "content": "<p>But, the code actually doesn't do that</p>",
        "id": 213474036,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602789207
    },
    {
        "content": "<p>Instead of an <code>AliasEq</code>, it actually lowers into an <code>EqGoal</code></p>",
        "id": 213474075,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602789228
    },
    {
        "content": "<p>I changed it to <code>AliasEq</code> locally and only two tests fail!</p>",
        "id": 213474144,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602789251
    },
    {
        "content": "<p>(implied_bounds::implied_from_env and projection::gat_unify_with_implied_wc)</p>",
        "id": 213474478,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602789407
    },
    {
        "content": "<p>Didn't get to look much into exactly why yet, but something we should discuss</p>",
        "id": 213474514,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602789424
    },
    {
        "content": "<p>Ah right I forgot about that. So when I wrote that comment we <em>were</em> emitting an <code>AliasEq</code> instead, but as you noticed it caused some test failures.</p>",
        "id": 213476373,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1602790313
    },
    {
        "content": "<p>The reason is that our current environment elaboration isn't super smart. Basically it visits the program clauses currently in the env and in doing so it only <a href=\"https://github.com/rust-lang/chalk/blob/d7c75db36d4c08f283a8ead2160efe3e9542ea32/chalk-solve/src/clauses/env_elaborator.rs#L85\">recursively visits <code>FromEnv</code> domain goals</a>.</p>",
        "id": 213476867,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1602790543
    },
    {
        "content": "<p>So my initial fix was to change the elaborator to also recurse on <code>AliasEq</code> domain goals, which seemed non-ideal</p>",
        "id": 213476963,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1602790577
    },
    {
        "content": "<p>Then as I added the lowering for function types as well, I wanted to clean up the lowering code and so I tried emitting an <code>EqGoal</code> for both , because it eventually becomes an <code>AliasEq</code> goal anyway, and realized that also fixed the issue because <code>EqGoal</code> is a top level goal and so the elaborator recurses into it already.</p>",
        "id": 213477189,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1602790698
    },
    {
        "content": "<p>So I figured I'd kill two birds with one stone (cleaning up lowering + fixing the tests) and emit the <code>EqGoal</code>, while not having to change the elaboration code</p>",
        "id": 213477294,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1602790756
    },
    {
        "content": "<p>TLDR: It's intentional, I just forgot to update the comment</p>",
        "id": 213477380,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1602790803
    },
    {
        "content": "<p>huh, yeah I forgot that <code>EqGoal</code> does just end up pushing an <code>AliasEq</code> goal</p>",
        "id": 213477643,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602790934
    },
    {
        "content": "<p>Sounds like the elaboration maybe does need cleanup though</p>",
        "id": 213477776,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602791023
    },
    {
        "content": "<p>uh... <a href=\"https://github.com/rust-lang/chalk/blob/d7c75db36d4c08f283a8ead2160efe3e9542ea32/tests/lowering/mod.rs#L147\">https://github.com/rust-lang/chalk/blob/d7c75db36d4c08f283a8ead2160efe3e9542ea32/tests/lowering/mod.rs#L147</a></p>",
        "id": 213517504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602822019
    },
    {
        "content": "<p>That's not valid, right?</p>",
        "id": 213517508,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602822034
    },
    {
        "content": "<p>Like, you can't impl a trait for an associated type?</p>",
        "id": 213517513,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602822044
    },
    {
        "content": "<p>Hmm well you can impl a trait for the associated type of a concrete type, but not a generic type (at least currently)</p>",
        "id": 213520863,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1602826837
    },
    {
        "content": "<p>But I'm not sure if we eventually want to accept that or not <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 213520879,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1602826884
    },
    {
        "content": "<p>That impl is not allowed (X is unconstrained), but this is allowed</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"nb\">Iterator</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213524445,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602831667
    }
]