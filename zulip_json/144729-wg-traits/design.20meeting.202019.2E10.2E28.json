[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 179258087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572285866
    },
    {
        "content": "<p>Hi</p>",
        "id": 179258160,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572285923
    },
    {
        "content": "<p>so .. what to discuss today :)</p>",
        "id": 179258166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572285928
    },
    {
        "content": "<p>Some thoughts:</p>",
        "id": 179258263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572285969
    },
    {
        "content": "<p>we've been talking a lot about chalk, we could discuss a bit something in/around rustc?</p>",
        "id": 179258291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572285999
    },
    {
        "content": "<p>I haven't quite gotten the stride here of preparing on Friday with some idea of what to dive into :)</p>",
        "id": 179258357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286059
    },
    {
        "content": "<p>my hope was that we can use this meeting (in general) to talk out tricky design questions</p>",
        "id": 179258437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286085
    },
    {
        "content": "<p>and not just kind of \"lecture\" on stuff that's semi already known -- but I guess that'll come in time</p>",
        "id": 179258477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286109
    },
    {
        "content": "<p>in any case, around rustc, the things that <em>I</em> have on my mind</p>\n<ul>\n<li>there is the pending universes PR that I opened up but haven't had a chance to return to, so we could talk through that a bit</li>\n<li>we could talk about lazy normalization for constants -- I did some investigation there and had formed some kind of plan, though it's mildly out of cache</li>\n<li>we could speculate on what it would take to support GATs :)</li>\n</ul>",
        "id": 179258577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286187
    },
    {
        "content": "<ul>\n<li>trait upcasting? I'm not sure what's next there but hacking right now, but maybe it's useful to talk out what <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> was doing (but I'd prefer to have given them some warning ;)</li>\n</ul>",
        "id": 179258691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286245
    },
    {
        "content": "<p>it's okay, I can give updates.</p>",
        "id": 179258739,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286281
    },
    {
        "content": "<p>ok, why don't we discuss upcast a bit?</p>",
        "id": 179258759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286301
    },
    {
        "content": "<p>mind doing it sooner rather than later, as I have to leave soon? sorry. if not I can just leave my notes here though...</p>",
        "id": 179258779,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286310
    },
    {
        "content": "<p>now is good :)</p>",
        "id": 179258785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286315
    },
    {
        "content": "<p>As context, <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> has been working on a PR to enable us to \"upcast\" from <code>&amp;dyn Foo</code> to <code>&amp;dyn Bar</code> is <code>Foo: Bar</code></p>",
        "id": 179258985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286435
    },
    {
        "content": "<p>cheers</p>",
        "id": 179259059,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286457
    },
    {
        "content": "<p>yep</p>",
        "id": 179259061,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286460
    },
    {
        "content": "<p>The general strategy is that we make the vtable for a trait <code>Foo</code> also embed the vtables for all of its supertraits</p>",
        "id": 179259064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286460
    },
    {
        "content": "<p>I was just rebasing all my work today BTW</p>",
        "id": 179259079,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286472
    },
    {
        "content": "<p>yep, so right now the vtable is single (non-auto) trait, and looks like:<br>\nD S A M_1 M_2 ...</p>",
        "id": 179259101,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286492
    },
    {
        "content": "<p>We encountered some challenges in/around the codegen and decided we might as well try to land the \"frontend\" changes first</p>",
        "id": 179259102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286492
    },
    {
        "content": "<p>where D S A are drop, size, align info</p>",
        "id": 179259108,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286500
    },
    {
        "content": "<p>and M_i are the method pointers</p>",
        "id": 179259120,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286505
    },
    {
        "content": "<blockquote>\n<p>yep, so right now the vtable is single (non-auto) trait, and looks like:<br>\nD S A M_1 M_2 ...</p>\n</blockquote>\n<p>i.e., before your PR</p>",
        "id": 179259128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286508
    },
    {
        "content": "<p>yep</p>",
        "id": 179259139,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286516
    },
    {
        "content": "<p>now (post-PR) it's D S A M_1 M_2 ... D S A N_1 N_2 ... D S A O_1 O_2 ...<br>\nwhere N_i and O_i are pointers to the methods for supertraits</p>",
        "id": 179259237,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286562
    },
    {
        "content": "<p>so the idea is we can just offset into the base vtable when upcasting</p>",
        "id": 179259266,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286570
    },
    {
        "content": "<p>but yeah, we had troubles with codegen like Niko said</p>",
        "id": 179259288,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286580
    },
    {
        "content": "<p>all the other parts (mainly trait &amp; MIR-related) are done.</p>",
        "id": 179259315,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286596
    },
    {
        "content": "<p>so --</p>",
        "id": 179259386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> eddyb hasn't replied to our msgs here still, but he did actually made some changes to the relevant codegen sections of code, which I want to test to see if they helped things... who knows. he also left a new FIXME note.</p>",
        "id": 179259394,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286640
    },
    {
        "content": "<p>(he pushed to your branch?)</p>",
        "id": 179259406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286654
    },
    {
        "content": "<p>if not, we'll probably want to merge it minus the codegen stuff, obviously under a feature gate, and probably with a warning</p>",
        "id": 179259408,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286656
    },
    {
        "content": "<p>no, just a PR that got merged. I noticed it during my rebase today though</p>",
        "id": 179259417,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286668
    },
    {
        "content": "<p>OK.</p>",
        "id": 179259545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286733
    },
    {
        "content": "<p>testing right now in fact :-)</p>",
        "id": 179259591,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286765
    },
    {
        "content": "<p>We could talk a bit about what changes you wound up doing to enable this --</p>",
        "id": 179259720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286827
    },
    {
        "content": "<p>sure</p>",
        "id": 179259783,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286874
    },
    {
        "content": "<p>the key thing being that when we coerce a value to a dyn type (e.g., <code>&amp;dyn Foo</code>), we generate a <code>CoerceUnsized</code> obligation that must be proven</p>",
        "id": 179259797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286882
    },
    {
        "content": "<p>(this was already true)</p>",
        "id": 179259817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572286895
    },
    {
        "content": "<p>yes</p>",
        "id": 179259911,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572286934
    },
    {
        "content": "<p>so sooner or later we wind up in <a href=\"https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src/librustc/traits/select.rs#L3446-L3449\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src/librustc/traits/select.rs#L3446-L3449\"><code>confirm_builtin_unsizing_candidate</code></a></p>",
        "id": 179259999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287007
    },
    {
        "content": "<p>and in the cast of upcasting we go in <a href=\"https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src/librustc/traits/select.rs#L3472\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src/librustc/traits/select.rs#L3472\">this arm</a> in particular</p>",
        "id": 179260012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287020
    },
    {
        "content": "<p>so we've basically generalized that to handle not just the case of lifetime bounds but also changing the principle traits</p>",
        "id": 179260128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287072
    },
    {
        "content": "<p>I guess, apart from that, the only other thing that really has to be changed is codegen?</p>",
        "id": 179260156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287093
    },
    {
        "content": "<p>(and there has to be some logic for computing the offsets into the vtable)</p>",
        "id": 179260181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287110
    },
    {
        "content": "<p>yep I think so</p>",
        "id": 179260206,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572287130
    },
    {
        "content": "<p>which I've already done</p>",
        "id": 179260212,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572287135
    },
    {
        "content": "<p>and I think is correct.. it's not too complex</p>",
        "id": 179260224,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572287142
    },
    {
        "content": "<p>ok, seems good, let me know when the PR is rebased and I will re-review I guess :)</p>",
        "id": 179260336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287197
    },
    {
        "content": "<p>Not <em>that</em> surprisingly, doesn't seem like there's a lot of unknowns to dig into here, maybe turn to another topic? not sure if anybody else has questions.</p>",
        "id": 179260363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287218
    },
    {
        "content": "<p>I'm trying to find my doc on lazy const normalization</p>",
        "id": 179260554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287332
    },
    {
        "content": "<p>I guess this was it: <a href=\"https://hackmd.io/S8cE-e-ORtCqjJzyOU5cLQ\" target=\"_blank\" title=\"https://hackmd.io/S8cE-e-ORtCqjJzyOU5cLQ\">https://hackmd.io/S8cE-e-ORtCqjJzyOU5cLQ</a></p>",
        "id": 179260609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287355
    },
    {
        "content": "<p>maybe I'll talk a bit about that</p>",
        "id": 179260634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287373
    },
    {
        "content": "<p>re trait upcasts, will diamond inheritance be handled (just wondering since it wasn't mentioned, just ignore me otherwise)?</p>",
        "id": 179260637,
        "sender_full_name": "Laurențiu",
        "timestamp": 1572287374
    },
    {
        "content": "<p>good question, I think it works, but we should make sure to test it -- I presume this will mean that the vtable includes two copies of \"shared\" ancestor methods though</p>",
        "id": 179260764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287435
    },
    {
        "content": "<p>yeah sounds fair</p>",
        "id": 179260766,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572287436
    },
    {
        "content": "<p>thanks for addressing that at least</p>",
        "id": 179260777,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572287445
    },
    {
        "content": "<p>oh yes...</p>",
        "id": 179260782,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572287446
    },
    {
        "content": "<p>fair point that</p>",
        "id": 179260793,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572287456
    },
    {
        "content": "<p>do we want to have two copies?</p>",
        "id": 179260828,
        "sender_full_name": "Laurențiu",
        "timestamp": 1572287470
    },
    {
        "content": "<p>I believe it works too, as a consequence of how the <code>supertraits</code> query works, but we'll need a test!</p>",
        "id": 179260830,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572287472
    },
    {
        "content": "<blockquote>\n<p>do we want to have two copies?</p>\n</blockquote>\n<p>seems ok, it's just a table of pointers</p>",
        "id": 179260847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287483
    },
    {
        "content": "<p>I guess so, it's not as bad as in C++ :)</p>",
        "id": 179260878,
        "sender_full_name": "Laurențiu",
        "timestamp": 1572287509
    },
    {
        "content": "<p>there are alternative vtable layouts we could explore</p>",
        "id": 179260879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287509
    },
    {
        "content": "<p>yeah, note that the real conundrum from diamond inheritance is typically what happens to the <em>state</em></p>",
        "id": 179260951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287526
    },
    {
        "content": "<p>and also separate compilation of method bodies</p>",
        "id": 179260963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287533
    },
    {
        "content": "<p>i.e., you want to be able to compile access to a field like <code>this-&gt;f</code>, but that requires knowing the offset of <code>f</code> -- the same is true for method calls (in the vtable), but those are read-only, so we can duplicate</p>",
        "id": 179261040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287578
    },
    {
        "content": "<p>the bigger question for me (which is orthogonal from upcasting, really) will be how we want to support things like <code>&amp;dyn (Foo + Bar)</code></p>",
        "id": 179261268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287696
    },
    {
        "content": "<blockquote>\n<p>I'm trying to find my doc on lazy const normalization</p>\n</blockquote>\n<p>ok, circling back to this</p>",
        "id": 179261294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287709
    },
    {
        "content": "<p>it's kind of interesting, because in a way the work we've been doing on chalk is actually moving <em>away</em> from this lazy norm strategy</p>",
        "id": 179261316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287730
    },
    {
        "content": "<p>oh, I was under the impression you've been actively working on lazy norm, Niko?</p>",
        "id": 179261426,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572287786
    },
    {
        "content": "<p>the idea in general here is that you a constant can be an expression that needs to be evaluated</p>",
        "id": 179261427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287786
    },
    {
        "content": "<p>e.g., maybe you have <code>[u32; {1 + 2}]</code> and <code>[u32; 3]</code>, and you want to know if those are the same types</p>",
        "id": 179261453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287802
    },
    {
        "content": "<p>(sorry, got distracted look for another write-up, but I can't find it)</p>",
        "id": 179261597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287885
    },
    {
        "content": "<p>this is kind of a pain around where clauses</p>",
        "id": 179261605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287891
    },
    {
        "content": "<p>well anyway let's leave aside the root causes, the idea is that we want to do something where we wait to evaluate <code>{1+2}</code> until we are forced to do so (beacuse e.g. we are equating it with <code>3</code>)</p>",
        "id": 179261656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287925
    },
    {
        "content": "<p>this is quite related to the problem of normalizing associated types like <code>&lt;Vec&lt;u32&gt; as IntoIterator&gt;::Item</code> (which normalizes to <code>u32</code>)</p>",
        "id": 179261697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287948
    },
    {
        "content": "<p>both of them are kind of \"evaluating\"</p>",
        "id": 179261703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287951
    },
    {
        "content": "<p>but even though they are conceptually identical, we don't necessarily <em>have</em> to handle them in 100% the same way, though I think we would eventually like to</p>",
        "id": 179261727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287973
    },
    {
        "content": "<blockquote>\n<p>oh, I was under the impression you've been actively working on lazy norm, Niko?</p>\n</blockquote>\n<p>I have been, under various guises</p>",
        "id": 179261741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287980
    },
    {
        "content": "<p>the thing is that I've been modifying chalk so that unification logic <em>doesn't</em> have to handle normalization</p>",
        "id": 179261765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572287996
    },
    {
        "content": "<p>and instead we handle it earlier on, by translating associated types into something different</p>",
        "id": 179261828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288013
    },
    {
        "content": "<p>but in rustc we have no such translation step to fall back on</p>",
        "id": 179261848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288024
    },
    {
        "content": "<p>so the idea would be roughly that when we are equating types, if we come across two constants, we'll generate an obligation as a result that \"equates\" them</p>",
        "id": 179261868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288044
    },
    {
        "content": "<p>(we have the machinery to do this, in general, which we plumbed at various points for various reasons, mostly lazy norm of assoc types)</p>",
        "id": 179261890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288063
    },
    {
        "content": "<p>so if you were relating</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">}]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179261923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288088
    },
    {
        "content": "<p>we would wind up with a result that is like</p>\n<ul>\n<li>Yes, if <code>ConstEquate(1+2, 3)</code></li>\n</ul>",
        "id": 179261935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288101
    },
    {
        "content": "<p>here <code>{1+2}</code> is presumably, in the compiler, an \"unevaluated\" constant,</p>",
        "id": 179261989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288122
    },
    {
        "content": "<p>which is stored as the pair of a <code>DefId</code> (to identify the MIR for <code>1+2</code> in this case) plus some substitutions</p>",
        "id": 179262020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288135
    },
    {
        "content": "<p>anyway, the <code>ConstEquate</code> obligation will get added to the fulfillment context as normal and evaluated when we are able to do so</p>",
        "id": 179262051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288163
    },
    {
        "content": "<p>there are a few complications though</p>",
        "id": 179262068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288173
    },
    {
        "content": "<p>one has to do with higher-ranked regions, and the \"leak check\" code we currently use to handle them</p>",
        "id": 179262121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288211
    },
    {
        "content": "<p>the other has to do with type inference variables</p>",
        "id": 179262152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288240
    },
    {
        "content": "<p>(make sense so far?)</p>",
        "id": 179262200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288251
    },
    {
        "content": "<p>I don't know if it would be helpful for this discussion, but I'm trying to remember why lazy norm was so important for const eval in the first place :)</p>",
        "id": 179262284,
        "sender_full_name": "tmandry",
        "timestamp": 1572288309
    },
    {
        "content": "<p>heh, that was the thing I skipped over</p>",
        "id": 179262296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288318
    },
    {
        "content": "<p>let me see if I can reconstruct the example</p>",
        "id": 179262306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288328
    },
    {
        "content": "<p>I'm annoyed I didn't put notes on it in the doc</p>",
        "id": 179262323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288341
    },
    {
        "content": "<p>because it took me some time to get it back in cache</p>",
        "id": 179262329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288345
    },
    {
        "content": "<p>it's ok if you need to skip for now</p>",
        "id": 179262389,
        "sender_full_name": "tmandry",
        "timestamp": 1572288366
    },
    {
        "content": "<p>ok I think I found it</p>",
        "id": 179262464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288428
    },
    {
        "content": "<p>from some notes of mine</p>\n<blockquote>\n<p>it's basically this: to evaluate {foo}, you must type-check it; to type-check it, you need its environment; so if {foo} appears in a where-clause, and the other where-clauses are ins cope, etc etc?</p>\n</blockquote>",
        "id": 179262472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288436
    },
    {
        "content": "<p>let me expand on that ;)</p>",
        "id": 179262489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288444
    },
    {
        "content": "<p>so the question is, how do we evaluate <code>{1+2}</code>?</p>",
        "id": 179262498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288451
    },
    {
        "content": "<p>To do that, we need the MIR. To create the MIR, we need to type-check it.</p>",
        "id": 179262514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288463
    },
    {
        "content": "<p>Now imagine that we have</p>",
        "id": 179262526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288475
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">SomeTrait</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179262587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288492
    },
    {
        "content": "<p>this is assuming <code>trait SomeTrait&lt;const C&gt;</code>, i.e., a const-generic future</p>",
        "id": 179262600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288507
    },
    {
        "content": "<p>ok so we have to type-check <code>{1+2}</code> -- but that is a mini-function body, and part of type-checking requires figuring out which where clauses are in scope</p>",
        "id": 179262624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288531
    },
    {
        "content": "<p>this is not relevant for an expression like <code>{1+2}</code></p>",
        "id": 179262635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288536
    },
    {
        "content": "<p>but you could have</p>",
        "id": 179262640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ah, interesting. this will solve the apparent need for lazy normalisation in type alias bounds though?</p>",
        "id": 179262651,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572288545
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">G</span>: <span class=\"nc\">SomeTrait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">SIZE</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179262672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288560
    },
    {
        "content": "<p>(where <code>SIZE</code> is an associated constant)</p>",
        "id": 179262693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288575
    },
    {
        "content": "<p>etc etc</p>",
        "id": 179262701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288578
    },
    {
        "content": "<p>so now the problem is: </p>\n<ul>\n<li>with <strong>eager</strong> normalization, we cna't get the predicates without normalizing -- i.e., evaluating those constants</li>\n<li>but we can't <strong>evaluate</strong> without type-checking, and for that we need the predicates</li>\n</ul>",
        "id": 179262789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288610
    },
    {
        "content": "<p>we actually have a similar problem with associated types</p>",
        "id": 179262797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288617
    },
    {
        "content": "<p>but we kind of \"cheat\" by normalizing with the unevaluated versions in scope</p>",
        "id": 179262821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288638
    },
    {
        "content": "<p>that is, </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">X</span>: <span class=\"nc\">Blah</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>we would normalize <code>T::Item</code> with <code>X: Blah&lt;T::Item&gt;</code> in scope</p>",
        "id": 179262867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288669
    },
    {
        "content": "<p>er, let me make that a better example</p>",
        "id": 179262883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288677
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">X</span>: <span class=\"nc\">Blah</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>here, when we normalize <code>T::Item</code>, we would have <code>X: Blah&lt;T::Item&gt;</code> in scope, not <code>X: Blah&lt;u32&gt;</code></p>",
        "id": 179262926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288711
    },
    {
        "content": "<p>we could conceivably do something similar around constants</p>",
        "id": 179262989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288730
    },
    {
        "content": "<blockquote>\n<p>ah, interesting. this will solve the apparent need for lazy normalisation in type alias bounds though?</p>\n</blockquote>\n<p>not 100% sure what you're referring to here, <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span></p>",
        "id": 179263016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288756
    },
    {
        "content": "<p>the issue with type alias bounds not working required lazy norm, people deemed</p>",
        "id": 179263065,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572288790
    },
    {
        "content": "<p>do you mean stuff like <code>type Foo&lt;X: Iterator&gt; = ...</code>?</p>",
        "id": 179263124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288811
    },
    {
        "content": "<p>yes that</p>",
        "id": 179263140,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572288824
    },
    {
        "content": "<p>ok ok -- well, yes, to handle that the way I would like to probably would want something like lazy norm too -- at the moment I'm just focused on constants, though. But there's definitely a relationship -- the user types <code>Foo&lt;T&gt;</code>, and it gets <em>normalized</em> to the <code>...</code></p>",
        "id": 179263287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288899
    },
    {
        "content": "<p>(but one of the things I was planning is to prototype these pathways for constants only)</p>",
        "id": 179263324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288916
    },
    {
        "content": "<blockquote>\n<p>I don't know if it would be helpful for this discussion, but I'm trying to remember why lazy norm was so important for const eval in the first place :)</p>\n</blockquote>\n<p>did that answer your question, <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> ?</p>",
        "id": 179263351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288930
    },
    {
        "content": "<blockquote>\n<p>we could conceivably do something similar around constants</p>\n</blockquote>\n<p>what we would do here is presumably to type-check constants with an <em>unnormalized</em> set of where-clauses. This would probably get us .. somewhat far.</p>",
        "id": 179263395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288956
    },
    {
        "content": "<p>but it's not really the right answer longer term</p>",
        "id": 179263442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288967
    },
    {
        "content": "<p>(or at least type-check constants that appear in where-clauses)</p>",
        "id": 179263451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572288977
    },
    {
        "content": "<blockquote>\n<p>but we kind of \"cheat\" by normalizing with the unevaluated versions in scope</p>\n</blockquote>\n<p>I'm trying to find the code where this happens</p>",
        "id": 179263483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572289003
    },
    {
        "content": "<p>it's <a href=\"https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src/librustc/traits/mod.rs#L839-L844\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src/librustc/traits/mod.rs#L839-L844\"><code>normalize_param_env_or_error</code></a></p>",
        "id": 179263537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572289042
    },
    {
        "content": "<p>you can see <a href=\"https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src/librustc/traits/mod.rs#L876\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8d78bf6b273848d17da8f5c92162c6a6b9b10dfd/src/librustc/traits/mod.rs#L876\">this comment here</a></p>",
        "id": 179263582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572289066
    },
    {
        "content": "<p>anyway, I guess that at least laid the groundwork on normalization :)</p>",
        "id": 179263665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572289097
    },
    {
        "content": "<p>let's plan a bit for next time :)</p>",
        "id": 179263684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572289107
    },
    {
        "content": "<p>I'm thinking we'll continue, in a sense, from where this left off, and talk about the universes + regions PR and -- maybe if we have time -- I'll talk a bit about my thoughts on how to handle regions more generally</p>",
        "id": 179263731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572289140
    },
    {
        "content": "<p>(seem good?)</p>",
        "id": 179263762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572289153
    }
]