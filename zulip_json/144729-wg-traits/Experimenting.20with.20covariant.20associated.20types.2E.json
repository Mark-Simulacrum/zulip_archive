[
    {
        "content": "<p>If I wanted to experiment with adding a way to make associated types covariant would the appropriate method be via  a<code>#[covariant]</code> attribute on trait and GAT parameters?</p>\n<p>Would this require support from chalk?</p>",
        "id": 216827738,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605494515
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 216876776,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605536483
    },
    {
        "content": "<p>eventually</p>",
        "id": 216877519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536841
    },
    {
        "content": "<p>we'd want to check that lifetime parametrs are used in the right places</p>",
        "id": 216877538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536851
    },
    {
        "content": "<p>and it would affect the subtyping logic</p>",
        "id": 216877558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536860
    },
    {
        "content": "<p>When using this hypothetical attribute would the planned type equality constraint be covariant?<br>\nIf  not could <code>for&lt;#[covariant] 'a&gt; Self::Bar&lt;'a&gt; == Self</code>suffice?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Inject</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Life</span><span class=\"o\">&lt;</span><span class=\"cp\">#[covariant]</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">l</span><span class=\"o\">&gt;</span>: <span class=\"o\">'</span><span class=\"na\">l</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Inject</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Life</span><span class=\"o\">&lt;'</span><span class=\"na\">l</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">l</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Thanks</p>",
        "id": 216964914,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605586351
    },
    {
        "content": "<p>Oops made typo there. <code>Self::Bar</code> should have been <code>Self::Life</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Inject</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Life</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Life</span><span class=\"o\">&lt;</span><span class=\"cp\">#[covariant]</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">l</span><span class=\"o\">&gt;</span>: <span class=\"o\">'</span><span class=\"na\">l</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Inject</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Life</span><span class=\"o\">&lt;'</span><span class=\"na\">l</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">l</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216976624,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605601748
    },
    {
        "content": "<p>Would one of these prove <code>T == T::Life&lt;'_&gt;</code> ?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Inject</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Life</span><span class=\"o\">&lt;</span><span class=\"cp\">#[covariant]</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">l</span><span class=\"o\">&gt;</span>: <span class=\"o\">'</span><span class=\"na\">l</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"cp\">#[covariant]</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Inject</span><span class=\"o\">&lt;</span><span class=\"n\">Life</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Inject</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Life</span><span class=\"o\">&lt;</span><span class=\"cp\">#[covariant]</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">l</span><span class=\"o\">&gt;</span>: <span class=\"o\">'</span><span class=\"na\">l</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Inject</span><span class=\"o\">&lt;</span><span class=\"n\">Life</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Inject</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Life</span><span class=\"o\">&lt;'</span><span class=\"na\">l</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">l</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216977207,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605602271
    }
]