[
    {
        "content": "<p>I'm looking at <a href=\"https://github.com/rust-lang/rust/issues/83915\">#83915</a>, cc <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> and <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 235421351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618955003
    },
    {
        "content": "<p>I'm trying to decide where I think this code should live</p>",
        "id": 235421362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618955014
    },
    {
        "content": "<p>It's a bit complicated and it interacts with my old nemesis, <a href=\"https://github.com/rust-lang/rust/issues/25860\">https://github.com/rust-lang/rust/issues/25860</a></p>",
        "id": 235421395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618955042
    },
    {
        "content": "<p>in particular, we don't normally enforce WF bounds on fn arguments or return types</p>",
        "id": 235421475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618955078
    },
    {
        "content": "<p>It's been a while. I remember trying 5 other approaches and for some reason or another they were either overly restrictive or weren't properly picked up</p>",
        "id": 235421498,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1618955091
    },
    {
        "content": "<p>yeah, it's ok</p>",
        "id": 235421547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618955116
    },
    {
        "content": "<p>what I landed at there was the place were I got it to work as expected :)</p>",
        "id": 235421552,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1618955119
    },
    {
        "content": "<p>it's a lot more subtle than I thought at first</p>",
        "id": 235421563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618955123
    },
    {
        "content": "<p>I appreciate why you found it so challenging</p>",
        "id": 235421585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618955133
    },
    {
        "content": "<p>I <em>think</em> the right place to enforce this, to be maximally consistent, is at the point where we evaluate <code>F::Output</code></p>",
        "id": 235421715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618955193
    },
    {
        "content": "<p>I guess let me dig a bit into how the code works here</p>",
        "id": 235421756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618955219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> stupid question -- how do you check if a type references <code>Err</code> again?</p>",
        "id": 235422364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618955566
    },
    {
        "content": "<p>IIRC <code>ty.references_error()</code>, checking</p>",
        "id": 235422388,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1618955588
    },
    {
        "content": "<p>yeah, that's it</p>",
        "id": 235422408,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1618955603
    },
    {
        "content": "<p>thanks</p>",
        "id": 235422411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618955605
    },
    {
        "content": "<p>so.. I have an alternate fix I think I like better</p>",
        "id": 235423821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618956406
    },
    {
        "content": "<p>I'm listening</p>",
        "id": 235424251,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1618956663
    },
    {
        "content": "<p>though my diff is a bit rough</p>",
        "id": 235424268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618956675
    },
    {
        "content": "<p>basically the idea is that we only make it legal to project <code>Output</code> if the return type is sized</p>",
        "id": 235424328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618956715
    },
    {
        "content": "<p>the way that fn pointers work now--</p>",
        "id": 235424375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618956725
    },
    {
        "content": "<p>we check that the types of the fn arguments and return type are WF only at the point where we've instantiated all of its higher-ranked lifetimes</p>",
        "id": 235424425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618956748
    },
    {
        "content": "<p>I'm not sure if this is 100% the right fix</p>",
        "id": 235424441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618956760
    },
    {
        "content": "<p>the other option would be to enforce it in the select place, which I think is closer to what you wrote already</p>",
        "id": 235424475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618956796
    },
    {
        "content": "<p>let me take another look at that</p>",
        "id": 235424569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618956849
    },
    {
        "content": "<p>the reason I chose the projection point is that it is precisely the point where all late-bound lifetimes are to have been instantiated</p>",
        "id": 235424652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618956910
    },
    {
        "content": "<p>but do we need lifetimes to be instantiated at all for <code>Sized</code>ness checks?</p>",
        "id": 235424723,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1618956949
    },
    {
        "content": "<p>no, not really</p>",
        "id": 235424943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957075
    },
    {
        "content": "<p>I think I'm deciding I don't like this fix</p>",
        "id": 235424948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957078
    },
    {
        "content": "<p>what should be happening is roughly this</p>",
        "id": 235425003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957091
    },
    {
        "content": "<p>for every <code>fn</code> type, such as (say) <code>for&lt;'a&gt; fn(&amp;'a u32) -&gt; &amp;'a u32</code></p>",
        "id": 235425038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957115
    },
    {
        "content": "<p>there is effectively a synthesized impl like</p>",
        "id": 235425050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957122
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235425074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957141
    },
    {
        "content": "<p>note the interesting implication here:</p>",
        "id": 235425086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957147
    },
    {
        "content": "<p>there is no impl where the binder is <em>on the <code>fn</code> type</em></p>",
        "id": 235425095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957157
    },
    {
        "content": "<p>the binder moves to the impl</p>",
        "id": 235425096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957159
    },
    {
        "content": "<p>I don't think the code totally gets this right</p>",
        "id": 235425123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957189
    },
    {
        "content": "<p>maybe it does</p>",
        "id": 235425136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957197
    },
    {
        "content": "<p>in any case, normally, if we had an explicit impl like that, we would check at that point that <code>Output: Sized</code></p>",
        "id": 235425201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957219
    },
    {
        "content": "<p>but there is no explicit impl</p>",
        "id": 235425207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957225
    },
    {
        "content": "<p>if we add this into the select code</p>",
        "id": 235425250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957254
    },
    {
        "content": "<p>we've effectively got an impl like</p>",
        "id": 235425259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957258
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235425294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957267
    },
    {
        "content": "<p>the other option though is to add this into the WF conditions for a <code>fn</code> type; I was hesitating here, because of the binder questions</p>",
        "id": 235425315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957285
    },
    {
        "content": "<p>I guess my concern is stuff like this</p>",
        "id": 235425357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957317
    },
    {
        "content": "<p><code>for&lt;'a, 'b&gt; fn(...) -&gt; &amp;'a &amp;'b u32</code></p>",
        "id": 235425421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957336
    },
    {
        "content": "<p>here, this should really require that we know somehow that <code>'b: 'a</code></p>",
        "id": 235425428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957345
    },
    {
        "content": "<p>but this isn't really relevant to being Sized</p>",
        "id": 235425447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957359
    },
    {
        "content": "<p>(this is precisely where the connection to <a href=\"https://github.com/rust-lang/rust/issues/25860\">#25860</a> comes from)</p>",
        "id": 235425464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957376
    },
    {
        "content": "<p>it feels like there is some missing logic here to check for well-formedness more generally</p>",
        "id": 235425515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957414
    },
    {
        "content": "<p>but probably fixing all this could wait for chalk,</p>",
        "id": 235425532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957438
    },
    {
        "content": "<p>and we could <em>just</em> check the <code>Sized</code> constraint without things going too bonkers</p>",
        "id": 235425595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957458
    },
    {
        "content": "<p>I think the assumption was that the _other_ existing WF checks when calling it would cause this to be unusable</p>",
        "id": 235425597,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1618957458
    },
    {
        "content": "<p>making this not need a WF check</p>",
        "id": 235425602,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1618957465
    },
    {
        "content": "<p>also, I wonder if WF is what we want to check here for, thinking about the fact that adding such a check to <code>type</code> is backwards incompatible</p>",
        "id": 235425646,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1618957504
    },
    {
        "content": "<p>right, the assumption was basically that the checks occur at the point of fully instantiating the higher-ranked parameters, but that doesn't work well with generic code</p>",
        "id": 235425654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957509
    },
    {
        "content": "<p>unless we move the checks into the select logic</p>",
        "id": 235425670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957519
    },
    {
        "content": "<p>right</p>",
        "id": 235425671,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1618957521
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rfcs/1214-projections-lifetimes-and-wf.html\">RFC 1214</a> writes:</p>",
        "id": 235425999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957735
    },
    {
        "content": "<blockquote>\n<p>Several points in the list above made use of implied bounds based on assuming that various types were WF. We have to ensure that those bounds are checked on the reciprocal side, as follows:</p>\n<p>Fns being called. Before calling a fn, we check that its argument and return types are WF. This check takes place after all higher-ranked lifetimes have been instantiated. Checking the argument types ensures that the implied bounds due to argument types are correct. Checking the return type ensures that the resulting type of the call is WF.</p>\n<p>Method calls, \"UFCS\" notation for fns and constants. These are the two ways to project a value out of a trait reference. A method call or UFCS resolution will require that the trait reference is WF according to the rules given above.</p>\n<p>Normalizing associated type references. Whenever a projection type like T::Foo is normalized, we will require that the trait reference is WF.</p>\n</blockquote>",
        "id": 235426009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957741
    },
    {
        "content": "<p>But I think there's a kind of problem with this</p>",
        "id": 235426039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957765
    },
    {
        "content": "<p>which seems obvious in retrospect</p>",
        "id": 235426052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957781
    },
    {
        "content": "<p>it's always the same problem with any kind of rule like this, I should know by now to be suspicious of it</p>",
        "id": 235426064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957794
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">F</span>::<span class=\"n\">Output</span>::<span class=\"n\">a</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235426163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957829
    },
    {
        "content": "<p><code>foo</code> gets to assume that <code>F::Output: Sized</code></p>",
        "id": 235426187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957841
    },
    {
        "content": "<p>but the caller never has to prove it</p>",
        "id": 235426201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957846
    },
    {
        "content": "<p>I'm not sure how readily one can weaponize this</p>",
        "id": 235426278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618957887
    },
    {
        "content": "<p>and of course there are examples like this</p>",
        "id": 235426598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618958052
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">weird_situation</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"if this is reachable, there’s a function type with unsized Output type `str`\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">weird_situation</span>::<span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235426614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618958054
    },
    {
        "content": "<p>my fix, however, fixes all the sort of <em>known</em> problems-- definitely all the problems on <em>stable</em></p>",
        "id": 235426653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618958091
    },
    {
        "content": "<p>pushed to issue-82633-sized-return-types on my fork</p>",
        "id": 235427021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618958296
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/rust/tree/issue-82633-sized-return-types\">https://github.com/nikomatsakis/rust/tree/issue-82633-sized-return-types</a></p>",
        "id": 235427063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618958331
    },
    {
        "content": "<p>have to run for now but i'm going to think about this</p>",
        "id": 235427180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618958410
    },
    {
        "content": "<p>sorry for the long delay, <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> !</p>",
        "id": 235427185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618958416
    },
    {
        "content": "<p>no problem, thanks for taking a look at it</p>",
        "id": 235427274,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1618958473
    },
    {
        "content": "<p>Looking at the diff, I feel like I tried something very similar, but it's been long enough that I don't remember where I might have diverged (because for some reason or another it didn't work as expected for me)</p>",
        "id": 235427407,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1618958564
    },
    {
        "content": "<p>I might want to make it more selective</p>",
        "id": 235431365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618961087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> are you around by any chance?</p>",
        "id": 240537327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622152534
    },
    {
        "content": "<p>Yes, 'sup?</p>",
        "id": 240537375,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1622152561
    },
    {
        "content": "<p>I was looking at your PR -- I'm going to try and get a build going with fewer knobs that fails and see why</p>",
        "id": 240539432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622153995
    },
    {
        "content": "<p>but I got distracted :)</p>",
        "id": 240539437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622153998
    },
    {
        "content": "<p>No problem. Anything I can help with in that front?</p>",
        "id": 240540446,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1622154808
    },
    {
        "content": "<p>to preempt work on your side?</p>",
        "id": 240540460,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1622154819
    }
]