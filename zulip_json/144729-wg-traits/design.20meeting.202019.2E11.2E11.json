[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> -- so for today's design meeting I was thinking we could talk over the work that <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> has been doing around handling co-induction in the chalk engine (it's currently unsound; rustc used to be unsound in the same way but we fixed it, albeit in a rather inefficient fashion). We've got a <a href=\"https://hackmd.io/OJRi5OM6Twunw8ZmuLxfRA\" target=\"_blank\" title=\"https://hackmd.io/OJRi5OM6Twunw8ZmuLxfRA\">kind of writeup</a> here summarizing some of the problems and a proposed solution.</p>",
        "id": 180448354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573497732
    },
    {
        "content": "<p>Anyway that starts in ~20 minutes</p>",
        "id": 180448359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573497741
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> -- design meeting start?</p>",
        "id": 180449875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573498873
    },
    {
        "content": "<p>So yeah  as I wrote above I thought we'd focus for today on this coinduction problem</p>",
        "id": 180449989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573498937
    },
    {
        "content": "<p>But maybe it's worth giving a bit of context :)</p>",
        "id": 180449997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573498944
    },
    {
        "content": "<p>Not sure who's around today</p>",
        "id": 180450002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573498951
    },
    {
        "content": "<p>So let me ask this -- while I run to get a glass of water -- please <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> if you feel you want me to cover what the heck coinduction has to do with trait solving and/or auto traits</p>",
        "id": 180450052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573498998
    },
    {
        "content": "<p>I think I mostly understand it at this point?</p>",
        "id": 180450167,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573499080
    },
    {
        "content": "<p>(not sure if anyone else is around)</p>",
        "id": 180450179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573499089
    },
    {
        "content": "<p>I see a few waves above :)</p>",
        "id": 180450186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499095
    },
    {
        "content": "<p>OK, well, the TL;DR is that coinductive solving is \"trait solving where cycles are ok\", and we use it for auto traits :)</p>",
        "id": 180450250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499162
    },
    {
        "content": "<p>but at some point I realized that the existing chalk solver has a bug here</p>",
        "id": 180450303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499176
    },
    {
        "content": "<p>actually the bug cropped up first in rustc, which had the same bug</p>",
        "id": 180450322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499185
    },
    {
        "content": "<p>this is <a href=\"https://github.com/rust-lang-nursery/chalk/issues/248\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/248\">chalk#248</a></p>",
        "id": 180450333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499194
    },
    {
        "content": "<p>the example being</p>\n<div class=\"codehilite\"><pre><span></span>C1 :- C2, C3.\nC2 :- C1.\n</pre></div>",
        "id": 180450346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499205
    },
    {
        "content": "<p>you can think of <code>C1</code> as \"co-inductive\" goal, like maybe <code>Foo: Send</code></p>",
        "id": 180450374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499231
    },
    {
        "content": "<p>or maybe better, just think of it as short for <code>Implemented(C1: Send)</code></p>",
        "id": 180450400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499255
    },
    {
        "content": "<p>anyway, the problem here is that <code>C1</code> and <code>C2</code> should not be provable, as there is no rule to prove <code>C3</code></p>",
        "id": 180450472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499290
    },
    {
        "content": "<p>unfortunately, if you execute things in the wrong order, our existing solver would conclude that <code>C2</code> is true</p>",
        "id": 180450492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499317
    },
    {
        "content": "<p>the reason is because of caching, in short</p>",
        "id": 180450537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499352
    },
    {
        "content": "<p>basically we would start to prove <code>C1</code>...</p>",
        "id": 180450552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499365
    },
    {
        "content": "<p>...and then try to prove <code>C2</code>...</p>",
        "id": 180450558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499372
    },
    {
        "content": "<p>proving <code>C2</code> recursively requires proving <code>C1</code>, but this is coinductive, so \"cycles are ok\", and hence we conclude that <code>C2</code> holds (and we cache this)</p>",
        "id": 180450577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499390
    },
    {
        "content": "<p>...then we continue trying to prove <code>C1</code> and we encounter <code>C3</code> -- but <code>C3</code> cannot be proven (no rules for that), so we conclude that <code>C1</code> is not true</p>",
        "id": 180450647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499409
    },
    {
        "content": "<p>but we still have a cached result saying that <code>C2</code> is true</p>",
        "id": 180450665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499418
    },
    {
        "content": "<p>our sol'n in rustc was basically just not to cache anything if a cycle occurs, but sometimes this can lead to us doing a lot of extra work</p>",
        "id": 180450688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499438
    },
    {
        "content": "<p>the underlying problem here is that it is a simplification to say that \"cycles are ok\"</p>",
        "id": 180450705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499452
    },
    {
        "content": "<p>coinduction is really about everything being \"internally consistent\", so to speak. \"True until proven false\" might be a good intuition :)</p>",
        "id": 180450769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499508
    },
    {
        "content": "<p>So here C2 was true, assuming C1 was true; but C1 wasn't.</p>",
        "id": 180450834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499536
    },
    {
        "content": "<p>(Make sense?)</p>",
        "id": 180450840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499543
    },
    {
        "content": "<p>OK, so I guess I'll outline briefly the fix that I had in mind, but I'm curious to hear <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>'s latest thoughts as well</p>",
        "id": 180450940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499636
    },
    {
        "content": "<p>trying to decide where to begin in the explanation :)</p>",
        "id": 180451064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499706
    },
    {
        "content": "<p>I'll real fast loop back</p>",
        "id": 180451073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499712
    },
    {
        "content": "<p>the solver has this notion of \"tables\" -- basically, when you're trying to prove some goal like <code>C1</code>, it creates a table for that goal, and within each goal it has a number of strands --</p>",
        "id": 180451093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499735
    },
    {
        "content": "<p>each strand is like \"some viable way prove that goal\"</p>",
        "id": 180451096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499743
    },
    {
        "content": "<p>the strand has two bits of state, a substitution (values for any inference variables in the goal) and a set of subgoals (things left to prove)</p>",
        "id": 180451154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499765
    },
    {
        "content": "<p>so when we start to prove <code>C1</code>, we would make a table for that goal, and then look for any rules we can use to prove it</p>",
        "id": 180451165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499778
    },
    {
        "content": "<p>in this case, there is just one, <code>C1 :- C2, C3</code></p>",
        "id": 180451170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499784
    },
    {
        "content": "<p>so we would create a strand with an empty substitution (no inference variables in this simple example) and two subgoals (<code>[C2, C3])</code></p>",
        "id": 180451193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499798
    },
    {
        "content": "<p>this is called an <code>ExClause</code> in the code</p>",
        "id": 180451212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499817
    },
    {
        "content": "<p>that comes from some papers I was reading, which called it an <code>X-clause</code></p>",
        "id": 180451224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499827
    },
    {
        "content": "<p>anyway, the idea here is to extend that list of subgoals with a list of <em>delayed subgoals</em> -- basically, things we had to assume were true due to a coinductive cycle, but they are not fully proven yet</p>",
        "id": 180451271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499867
    },
    {
        "content": "<p>(maybe delayed isn't the best name, I'm somewhat adopting terminology the papers were using for handling other things, but the concept seems very similar to me)</p>",
        "id": 180451344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499890
    },
    {
        "content": "<p>so in particular when we go to solve <code>C2</code>, and we encounter the subgoal of proving <code>C1</code>, we would find there is a cycle;</p>",
        "id": 180451369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499911
    },
    {
        "content": "<p>I think delayed works. Or <code>coinductive</code></p>",
        "id": 180451370,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573499912
    },
    {
        "content": "<p>but instead of just considering it <em>true</em></p>",
        "id": 180451374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499914
    },
    {
        "content": "<p>we would make it <em>delayed</em></p>",
        "id": 180451381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499924
    },
    {
        "content": "<p>the notation I used in the hackmd for an <code>ExClause</code> is <code>Goal :- DelayedSubgoals | Subgoals</code></p>",
        "id": 180451419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499950
    },
    {
        "content": "<p>which...is kind of arcane</p>",
        "id": 180451427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499955
    },
    {
        "content": "<p>but I guess I'll run with it</p>",
        "id": 180451433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499959
    },
    {
        "content": "<p>so if we had <code>C2 :- | C1</code> (no delayed goals, just one subgoal)</p>",
        "id": 180451460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499974
    },
    {
        "content": "<p>we would convert it to <code>C2 :- C1 |</code> (now <code>C1</code> is delayed)</p>",
        "id": 180451473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573499983
    },
    {
        "content": "<p>maybe better to use a notation like <code>{ substitition: [], delayed: [C1], subgoals: [] }</code> :)</p>",
        "id": 180451540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500006
    },
    {
        "content": "<p>well anyway the point is that this delay list can propagate into the answer</p>",
        "id": 180451560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500023
    },
    {
        "content": "<p>so where the thing we cache as the \"answer\" for <code>C2</code> used to just be \"true\", it's now (effectively) \"true if C1 is true\"</p>",
        "id": 180451590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500044
    },
    {
        "content": "<p>note that this remains valid even if C1 turns out to be false</p>",
        "id": 180451597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500052
    },
    {
        "content": "<p>so where an \"answer\" used to be <code>{ substitution, region_constraints }</code> (we can ignore region constraints here), it is now <code>{ substitution, delayed, region_constriants }</code></p>",
        "id": 180451680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500109
    },
    {
        "content": "<p>and when we incorporate an answer, we have to add those delayed goals to our own subgoal list</p>",
        "id": 180451691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500120
    },
    {
        "content": "<p>so the strand for C1 starts as</p>",
        "id": 180451760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500140
    },
    {
        "content": "<p>Well, also an answer can be ambiguous too</p>",
        "id": 180451770,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573500148
    },
    {
        "content": "<ul>\n<li><code>{ subgoals: [C2, C3] }</code></li>\n</ul>",
        "id": 180451780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500155
    },
    {
        "content": "<p>(yeah, I'm ignoring things that aren't too relevant)</p>",
        "id": 180451789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500164
    },
    {
        "content": "<ul>\n<li>it then gets an answer <code>{ delayed: [C1] }</code> from the <code>C2</code> table</li>\n</ul>",
        "id": 180451806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500181
    },
    {
        "content": "<ul>\n<li>so it converts its state to <code>{ subgoals: [C3, C1] }</code> -- i.e., it removed <code>C2</code> (which was proven) but added the delayed subgoal</li>\n</ul>",
        "id": 180451841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500198
    },
    {
        "content": "<ul>\n<li>at that point, it will fail to prove C3</li>\n</ul>",
        "id": 180451852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500205
    },
    {
        "content": "<p>and so it just gets an error</p>",
        "id": 180451856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500211
    },
    {
        "content": "<p>but then later if we try to use the answer from C2 in some other context, it too will fail to prove C1</p>",
        "id": 180451880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500227
    },
    {
        "content": "<p>so everything works out ok</p>",
        "id": 180451884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500231
    },
    {
        "content": "<p>(at least that's the idea :)</p>",
        "id": 180451895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500237
    },
    {
        "content": "<p>(make sense so far?)</p>",
        "id": 180451945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500248
    },
    {
        "content": "<p>one thing worth mentioning: if <code>C3</code> <em>were</em> provable, then the <code>C1</code> strand would have gone to a state like <code>{ subgoals: [C1] }</code>.</p>",
        "id": 180452215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500396
    },
    {
        "content": "<p>the key point is that here we a <em>trivial</em> coinductive cycle -- basically <code>C1</code> is true if `C1 is true -- and <em>that</em> we can just ignore as clearly true</p>",
        "id": 180452250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500422
    },
    {
        "content": "<p>we don't have the caching concerns because C1 is exactly the thing we are now proving, so if we fail, no answer is produced, and if we succeed, then the answer is valid</p>",
        "id": 180452286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500443
    },
    {
        "content": "<p>anyway, ok, that's the high-level idea, but there are a few tricky bits --</p>",
        "id": 180452328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500469
    },
    {
        "content": "<p>I'll stop here for the moment, though. I want to leave room for questions, but also check in with <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 180452416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500501
    },
    {
        "content": "<p>I saw you mentioned that you had some of the impl work on this strategy</p>",
        "id": 180452451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500518
    },
    {
        "content": "<p>I think everything makes sense so conceptually</p>",
        "id": 180452454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573500522
    },
    {
        "content": "<p>Yeah, I have the key idea implemented</p>",
        "id": 180452469,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573500533
    },
    {
        "content": "<p>I'm not doing something correctly in terms of canonicalization I think</p>",
        "id": 180452511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573500562
    },
    {
        "content": "<p>Basically though, implementation wise it's pretty similar to how you imagined it</p>",
        "id": 180452607,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573500604
    },
    {
        "content": "<p>OK</p>",
        "id": 180452642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500635
    },
    {
        "content": "<p>the delayed subgoals I have on <code>Answer</code> though, instead of <code>CanonicalConstrainedSubst</code></p>",
        "id": 180452652,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573500644
    },
    {
        "content": "<p>Ok, yes. I think that's wrong :)</p>",
        "id": 180452665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500653
    },
    {
        "content": "<blockquote>\n<p>I'm not doing something correctly in terms of canonicalization I think</p>\n</blockquote>\n<p>and probably related to this</p>",
        "id": 180452673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500661
    },
    {
        "content": "<p>in particular, I think the delayed subgoals and the substitution must be canonicalized together</p>",
        "id": 180452691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500672
    },
    {
        "content": "<p>hmm</p>",
        "id": 180452701,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573500677
    },
    {
        "content": "<p>(because they share inference variables)</p>",
        "id": 180452711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500683
    },
    {
        "content": "<p>that makes sense I think</p>",
        "id": 180452740,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573500701
    },
    {
        "content": "<p>just means that now we will need to pass a <code>Context</code> type through a lot more</p>",
        "id": 180452793,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573500722
    },
    {
        "content": "<p>Since a <code>Literal</code> is over <code>C::GoalInEnvironment</code></p>",
        "id": 180452855,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573500760
    },
    {
        "content": "<p>if you imagine a rule like</p>\n<div class=\"codehilite\"><pre><span></span>C1(X, Y) :- C2(X, Y)\nC2(X, Y) :- C1(Y, X)\n</pre></div>\n\n\n<p>then the result for <code>C2</code> will be something like</p>\n<div class=\"codehilite\"><pre><span></span>{ substitution: [^0, ^1], delayed: C1(^1, ^0) }\n</pre></div>",
        "id": 180452878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500774
    },
    {
        "content": "<p>which also got me thinking: in what cases (if ever) would we have a delayed subgoal on a negative literal?</p>",
        "id": 180452900,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573500791
    },
    {
        "content": "<p>never, I think</p>",
        "id": 180452921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500821
    },
    {
        "content": "<p>since we only delay on fully coinductive cycles, and I don't think those should include negation</p>",
        "id": 180452989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500848
    },
    {
        "content": "<p>It doesn't pop up in any current tests</p>",
        "id": 180453015,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573500874
    },
    {
        "content": "<p>which is why I asked</p>",
        "id": 180453020,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573500878
    },
    {
        "content": "<p>so certainly when proving <code>not { G }</code>, we should never encounter a cycle on <code>G</code>, I think we already kind of assert this, right?</p>",
        "id": 180453090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500933
    },
    {
        "content": "<p>Right, that would be a <code>NegativeCycle</code></p>",
        "id": 180453151,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573500964
    },
    {
        "content": "<p>but it is plausible to have something like <code>not { C2 }</code> (to build on our example), where the answer would have delayed subgoals</p>",
        "id": 180453165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573500985
    },
    {
        "content": "<p>but I think those should be \"refinable\" (i.e., as in our example, we could then go and prove <code>C1</code>)</p>",
        "id": 180453200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501031
    },
    {
        "content": "<p>the only reason that would fail is if there is a cycle that includes the negative edge</p>",
        "id": 180453207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501044
    },
    {
        "content": "<p>and I think we want to assert that this doesn't happen by construction</p>",
        "id": 180453218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501053
    },
    {
        "content": "<blockquote>\n<p>but I think those should be \"refinable\" (i.e., as in our example, we could then go and prove <code>C1</code>)</p>\n</blockquote>\n<p>this comes back to that note I had about how <code>ensure_root_answer</code> can do refining, but it's really not \"special\" in this regard</p>",
        "id": 180453297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501086
    },
    {
        "content": "<p>but of course we're way in the weeds here, I doubt anyone else has any idea what I'm talking about</p>",
        "id": 180453319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501110
    },
    {
        "content": "<p>(though I'm not clear if anyone else is here today...)</p>",
        "id": 180453327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501119
    },
    {
        "content": "<p>(does that make any sense, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>?)</p>",
        "id": 180453374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501171
    },
    {
        "content": "<p>I think so</p>",
        "id": 180453380,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573501182
    },
    {
        "content": "<p>I have to think about it a bit more</p>",
        "id": 180453389,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573501187
    },
    {
        "content": "<p>Probably worth a test, either for panic or pass</p>",
        "id": 180453472,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573501234
    },
    {
        "content": "<p>I guess an example which we do NOT want would be</p>\n<div class=\"codehilite\"><pre><span></span>C1 :- not { C2 }\nC2 :- C1\n</pre></div>",
        "id": 180453473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501234
    },
    {
        "content": "<p>this would be a case where pursuing the <code>not { C2 }</code> literal would yield an answer with a delayed subgoal for something still on the stack</p>",
        "id": 180453536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501312
    },
    {
        "content": "<p>I'm pondering how can detect that :)</p>",
        "id": 180453601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501345
    },
    {
        "content": "<p>it might be that for now we can just assert that negative literals never have delayed subgoals</p>",
        "id": 180453613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501359
    },
    {
        "content": "<p>I guess I have to check where we use them</p>",
        "id": 180453626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501370
    },
    {
        "content": "<p>but I think they are never for coinductive goals</p>",
        "id": 180453629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501374
    },
    {
        "content": "<blockquote>\n<p>I'm pondering how can detect that :)</p>\n</blockquote>\n<p>more specifically, what I would like is that <code>ensure_answer</code> can guarantee that answers it gives back only have delayed literals if those things are on the stack -- the idea being that (e.g.) the first time you invoke <code>C2</code>, from within the context of <code>C1</code>, you might get back <code>C2 :- C1 |</code>, but if you invoke it from some other context, we'd refine the answer</p>",
        "id": 180453757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501457
    },
    {
        "content": "<p>but I'm not sure the best way to detect that situation.. it feels like we should be able to use the stack minimums or something..?</p>",
        "id": 180453815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501510
    },
    {
        "content": "<p>So I think I've seen a related problem? maybe</p>",
        "id": 180453856,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573501543
    },
    {
        "content": "<p>But maybe not</p>",
        "id": 180453868,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573501561
    },
    {
        "content": "<p>(this negative thing seems relevant, but also kind of a \"user error\" situation, so I think for now it probably suffices to panic)</p>",
        "id": 180453919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501574
    },
    {
        "content": "<p>(that is, panic if we are pursuing a negative goal and we get back delayed literals)</p>",
        "id": 180453938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501594
    },
    {
        "content": "<p>(well, maybe:P)</p>",
        "id": 180453952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501610
    },
    {
        "content": "<blockquote>\n<p>So I think I've seen a related problem? maybe</p>\n</blockquote>\n<p>what's that?</p>",
        "id": 180453956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501614
    },
    {
        "content": "<p>So with your </p>\n<div class=\"codehilite\"><pre><span></span>C1 :- C2, C3.\nC2 :- C1.\n</pre></div>\n\n\n<p>example</p>",
        "id": 180453978,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573501640
    },
    {
        "content": "<p>When it gets to <code>C1 :- | C3</code> (the delayed subgoal isn't incorporated since it's a trivial cycle)</p>",
        "id": 180454076,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573501705
    },
    {
        "content": "<blockquote>\n<p>(well, maybe:P)</p>\n</blockquote>\n<p>ok no I think this is true, so long as <code>not</code> is not used with co-inductive goals. The reasoning is that the answer for any inductive goal cannot have delayed things in it. This is true because anything higher on the stack will not be considered a coinductive cycle and hence would just be handled as we typically handle cycles</p>",
        "id": 180454080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501708
    },
    {
        "content": "<p>It's returning <code>C1 :- C3</code></p>",
        "id": 180454107,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573501731
    },
    {
        "content": "<p>returning?</p>",
        "id": 180454113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501739
    },
    {
        "content": "<p>So <code>ensure_root_answer</code> needs to check that</p>",
        "id": 180454119,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573501743
    },
    {
        "content": "<p>from <code>ensure_answer_recursively</code></p>",
        "id": 180454132,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573501754
    },
    {
        "content": "<p>no, it's not</p>",
        "id": 180454135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501757
    },
    {
        "content": "<p>that's not an answer, as it has pending subgoals still</p>",
        "id": 180454141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501763
    },
    {
        "content": "<p>it would rather try to prove <code>C3</code> (and fail, because there are no rules that can be used to do so)</p>",
        "id": 180454167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501793
    },
    {
        "content": "<p>err right, the \"answer\" that <code>ensure_root_answer</code> is on the table when <code>ensure_answer_recursively</code> returns back to <code>ensure_root_answer</code> is <code>C1 :- C3 | </code></p>",
        "id": 180454288,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573501850
    },
    {
        "content": "<p>it will never get that answer in my example though</p>",
        "id": 180454339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501881
    },
    {
        "content": "<p>that would only occur if solving <code>C3</code> resulted in a coinductive cycle</p>",
        "id": 180454350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501891
    },
    {
        "content": "<p>Yeah, I'm not sure. I'll have to look again</p>",
        "id": 180454366,
        "sender_full_name": "Jack Huey",
        "timestamp": 1573501907
    },
    {
        "content": "<p>if the example were</p>\n<div class=\"codehilite\"><pre><span></span>C3 :- C1.\nC1 :- C2, C3.\nC2 :- C1.\n</pre></div>\n\n\n<p>and we started by proving <em>C3</em>, that could happen</p>",
        "id": 180454384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501920
    },
    {
        "content": "<p>(that's maybe a good example to walk through, actually)</p>",
        "id": 180454466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501952
    },
    {
        "content": "<p>i.e., we would start by proving <code>C3</code></p>",
        "id": 180454494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501978
    },
    {
        "content": "<ul>\n<li>strand for <code>C3</code> is <code>{ subgoals: [C1] }</code></li>\n</ul>",
        "id": 180454539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573502014
    },
    {
        "content": "<ul>\n<li>we start to prove <code>C1</code> with strand <code>{ subgoals: [C2, C3] }</code></li>\n</ul>",
        "id": 180454551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573502025
    },
    {
        "content": "<ul>\n<li>we prove <code>C2</code> with answer <code>{ delayed: [C1] }</code></li>\n</ul>",
        "id": 180454563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573502035
    },
    {
        "content": "<ul>\n<li>we incorporate that into our strand for <code>C1</code>, yielding <code>{ subgoals: [C3, C1] }</code> (well, maybe the <code>C1</code> is screened out earlier, but that's not too imp't)</li>\n</ul>",
        "id": 180454619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573502060
    },
    {
        "content": "<ul>\n<li>then we go to prove <code>C3</code> but we get a cycle, so the strand for <code>C1</code> is <code>{ delayed: [C3], subgoals: [C1] }</code></li>\n</ul>",
        "id": 180454644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573502077
    },
    {
        "content": "<ul>\n<li>the next subgoal is a trivial cycle, resulting in an answer for <code>C1</code> of <code>{ delayed: [C3] }</code></li>\n</ul>",
        "id": 180454656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573502090
    },
    {
        "content": "<ul>\n<li>that is incorporated into the strand for <code>C3</code>, yielding <code>{ subgoals: [C3] }</code></li>\n</ul>",
        "id": 180454669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573502106
    },
    {
        "content": "<ul>\n<li>which is eventually reduced to an answer <code>{}</code> (i.e., true)</li>\n</ul>",
        "id": 180454675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573502115
    },
    {
        "content": "<p>anyway</p>",
        "id": 180454850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573502251
    }
]