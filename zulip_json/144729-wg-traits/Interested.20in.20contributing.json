[
    {
        "content": "<p>Hello, I'm interested in helping contribute to Chalk in whatever way I can. Looking at the github issues, would adding TypeFlag information be a good way to start? I'm not totally sure what that entails / where I would be looking in code to do that, so I figured I'd ask.</p>",
        "id": 214397740,
        "sender_full_name": "Christian Fontenot",
        "timestamp": 1603496627
    },
    {
        "content": "<p>Hi! Yes, adding <code>TypeFlags</code> would be a good place to start :)</p>",
        "id": 214398429,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603497394
    },
    {
        "content": "<p>Let's me get you some links</p>",
        "id": 214398434,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603497404
    },
    {
        "content": "<p>To get you started</p>",
        "id": 214398435,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603497410
    },
    {
        "content": "<p>So, the computation of <code>TypeFlags</code> in rustc is <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/ty/flags.rs\">here</a></p>",
        "id": 214398456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603497462
    },
    {
        "content": "<p>And they're stored in <code>TyS</code> <a href=\"https://github.com/rust-lang/rust/blob/7bade6ef730cff83f3591479a98916920f66decd/compiler/rustc_middle/src/ty/mod.rs#L588\">here</a></p>",
        "id": 214398509,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603497493
    },
    {
        "content": "<p>In Chalk, that would be <code>TyData</code></p>",
        "id": 214398516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603497504
    },
    {
        "content": "<p>Then, probably compute the flags in <code>Ty::new</code></p>",
        "id": 214398742,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603497768
    },
    {
        "content": "<p>I'll be around if you have any questions or anything :)</p>",
        "id": 214398807,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603497848
    },
    {
        "content": "<p>Ok, so now that I've started working on this, a couple questions: for the TypeFlags struct itself, is there anything different we want in chalk's, or do we want it to be identical to the one in rustc? My other question is with the computations done to get TypeFlags, do we also want to have the same ones as in rustc? If so, what actually is FlagComputation (the rustc struct) actually doing, in general? <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 214402687,
        "sender_full_name": "Christian Fontenot",
        "timestamp": 1603503176
    },
    {
        "content": "<p>Let me look, but I think the answer is <em>yes</em> we want the same flags as in rustc</p>",
        "id": 214403761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603504739
    },
    {
        "content": "<p>the <code>FlagComputation</code> struct from what I can tell is just the state used when computing flags</p>",
        "id": 214403771,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603504766
    },
    {
        "content": "<p>So I'm starting to understand how rustc computes these flags, to an extent, and something I'm not sure of is how Substitution&lt;I&gt; works in Chalk (it seems to be defined by a macro, but I'm not really sure how to get anything out of it). I think with that knowledge, I can get most of the work with flags handled hopefully quickly, as it seems that a lot of paths in the flag computation involve getting flags from these. Also, I'm not sure how ConstKinds and regions in rustc_middle relate to types in Chalk, if you have any insight there. <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 214453998,
        "sender_full_name": "Christian Fontenot",
        "timestamp": 1603579807
    },
    {
        "content": "<p>So</p>",
        "id": 214454632,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603580719
    },
    {
        "content": "<p>A <code>Substitution</code> basically a list of <code>GenericArg</code>s (one of Ty,Lifetime, or Const)</p>",
        "id": 214454644,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603580750
    },
    {
        "content": "<p><code>Region</code>s in rustc are <code>Lifetime</code>s in Chalk</p>",
        "id": 214454685,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603580780
    },
    {
        "content": "<p><code>Const</code> in rustc is <code>Const</code> in Chalk, but <code>ConstKind</code> in rustc (which is what variant of const, bound, infer, etc.) is <code>ConstValue</code> in Chalk</p>",
        "id": 214454716,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603580851
    },
    {
        "content": "<p>So, with that I've been able to get a lot of the cases covered, but for a couple, I'm still not entirely sure how they should be handled. In particular, I'm not sure what to do with the Binders on DynTy, BoundVar itself, and for InferenceVar, is there anything we can get out of the TyVariableKind, or does that part of it not really matter? A bit more generally with the flags: in rustc_middle, the flags that end in _PARAM get set when the TyKind matches Param, but chalk doesn't have a Param type. My first guess would be that it involves Adt, but _PARAM flags seem like they can be in lots of places,  so I'm not sure generally where those fall. I also noticed that for FnSig, and Generator and Closure types, rustc_middle calls some additional function on the Substitutions,  (like as_closure()), but Chalk doesn't seem to have an equivalent to that, so what can we do with closure or generator types, besides just iterating over the Substitution list and setting those flags?</p>",
        "id": 214469681,
        "sender_full_name": "Christian Fontenot",
        "timestamp": 1603602945
    },
    {
        "content": "<p>The binders in dyn ty should be treated like and other binder (which I guess means compute the flags for the value inside if we're not tracking escaping variables yet).</p>",
        "id": 214471736,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1603605963
    },
    {
        "content": "<p>BoundVar doesn't add any flags. _PARAM isn't added for any chalk type.</p>",
        "id": 214471944,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1603606217
    },
    {
        "content": "<p>For FnSig you can add the subst directly</p>",
        "id": 214471985,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1603606309
    },
    {
        "content": "<p>So I've handled all of the cases that arise from a TyKind now, including handling all the Substitutions, lifetimes, etc, and now my questions are more about other things I need to do for the PR. TypeFlags in rustc_middle has a couple of flags relating to lifetime that FlagComputation in rustc doesn't set, so I haven't done anything with those. Are there cases in chalk where we want to set these (HAS_FREE_REGIONS, HAS_FREE_LOCAL_REGIONS, HAS_RE_LATE_BOUNDS, HAS_ERASED), or do we not need these? </p>\n<p>Besides that, how should I go about testing that the computation of flags works as intended? I looked at a couple unit tests, but couldn't figure out how to write some that would handle creating a <code>Ty</code>, as the unit tests I looked at seemed to be related to parsing and lowering, and I'm not sure what pieces I need in a unit test to be able to construct a few <code>Ty</code>s and see if the flags set are what I expect.  The other thing I wanted to check was code formatting, since I know rustc itself uses ./x.py for this, according to the rustc book, but chalk's repo and book don't really say anything.</p>",
        "id": 214504951,
        "sender_full_name": "Christian Fontenot",
        "timestamp": 1603650910
    },
    {
        "content": "<p>I guess that they should be set to match rustc as closely as possible, although a lot of them won't be used by chalk</p>",
        "id": 214506298,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1603652580
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/3eab21e22d080562dbe85ef440309c03c07becba/compiler/rustc_middle/src/ty/sty.rs#L1689-L1726\">https://github.com/rust-lang/rust/blob/3eab21e22d080562dbe85ef440309c03c07becba/compiler/rustc_middle/src/ty/sty.rs#L1689-L1726</a> is the rustc code for lifetimes.</p>",
        "id": 214506324,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1603652627
    },
    {
        "content": "<p>Of those, <code>HAS_RE_ERASED</code> and <code>HAS_RE_PARAM</code> won't be used</p>",
        "id": 214508925,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603655941
    },
    {
        "content": "<p>Well <code>HAS_RE_ERASED</code> will be used eventually.</p>",
        "id": 214508951,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1603655973
    },
    {
        "content": "<p>Ok, so I've made a pullrequest (639) for this. Some things that I'm not sure of would be the couple RE flags that weren't decided on previously (they're there for now, can be removed if needed), and maybe having more tests.</p>",
        "id": 214919657,
        "sender_full_name": "Christian Fontenot",
        "timestamp": 1603938038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"357063\">@Christian Fontenot</span> I'll take a look at it tomorrow :)</p>",
        "id": 214921672,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603940473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"357063\">@Christian Fontenot</span> nice!</p>",
        "id": 215122768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604077409
    }
]