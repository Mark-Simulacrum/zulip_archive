[
    {
        "content": "<p>Recently, I was looking into the proposed 'storages' API. I wrote up a crate designed more for release than the PoC from a while ago, and during that noticed a significant limitation of <code>CoerceUnsized</code>: You can't coerce an item only storing metadata. I have a <code>Handle(&lt;T as Pointee&gt;::Metadata)</code>, and I'd like it to be possible to coerce this to <code>Handle(&lt;U as Pointee&gt;::Metadata)</code>. This should be possible, as it's just a subset of the normal pointer-to-pointer conversion, but I'm not sure how practical it is to implement.</p>",
        "id": 255780722,
        "sender_full_name": "CraftSpider",
        "timestamp": 1633109809
    },
    {
        "content": "<p>In the future if we every get custom dst's it is possible that unsize coercions do need access to the full pointer. A custom dst T could store it's len in the data referenced by it's pointer and coerce to [U] which stores it in the metadata part of the pointer I would guess.</p>",
        "id": 255794062,
        "sender_full_name": "bjorn3",
        "timestamp": 1633115807
    },
    {
        "content": "<p>Hmm, yeah I see how that could be an issue. I've... even also wanted something like that, with C interop on types where that is true. The pain of wanting two conflicting conveniences :P</p>",
        "id": 255810953,
        "sender_full_name": "CraftSpider",
        "timestamp": 1633124221
    },
    {
        "content": "<p>Well. I guess not conflicting, the custom unsizing logic you just described would work to allow unsizing the thing _using_ the handle, even if the handle couldn't implement it itself. It needs the context of the owner, but the owner has both parts of the pointer and so could just put them together and unsize.</p>",
        "id": 255811383,
        "sender_full_name": "CraftSpider",
        "timestamp": 1633124483
    }
]