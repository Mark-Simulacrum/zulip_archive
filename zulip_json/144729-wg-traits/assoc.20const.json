[
    {
        "content": "<p>I'm working on adding associated consts to Chalk (draft PR: <a href=\"https://github.com/rust-lang/chalk/issues/689\">chalk#689</a>). So far I've been mirroring the associated type stuff, so you get things like <code>AssociatedConstDatum</code>, <code>AssociatedConstValueIds</code> etc.<br>\nFollowing through with that approach, we'd end up with something like <code>AliasTy::ConstProjectionTy</code> (naming tbd). Does that make sense? <code>ProjectionTy</code> so far has been specific to associated types, and associated consts are different enough to warrant splitting them instead of trying to group things together.</p>",
        "id": 228069197,
        "sender_full_name": "detrumi",
        "timestamp": 1614444612
    },
    {
        "content": "<p>what would a <code>ConstProjectionTy</code> be? wouldn't you have a <code>ConstValue::Projection</code> instead? or am I misunderstanding?</p>",
        "id": 228072663,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614448354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> It would be a new struct, just like how <a href=\"https://github.com/rust-lang/chalk/blob/a925337c2239821e04fb37c92fdfcc8ebe493907/chalk-ir/src/lib.rs#L1640\">ProjectionTy</a> currently represents a type projection. But then with <code>AssocConstId</code> instead of <code>AssocTyId</code></p>",
        "id": 228074860,
        "sender_full_name": "detrumi",
        "timestamp": 1614450820
    },
    {
        "content": "<p>So in the current <code>AliasTy</code> enum:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub enum AliasTy&lt;I: Interner&gt; {\n    /// An associated type projection.\n    Projection(ProjectionTy&lt;I&gt;),\n    /// An opaque type.\n    Opaque(OpaqueTy&lt;I&gt;),\n}\n</code></pre></div>\n<p>We have the choice of either adding another variant for const projections, or generalizing <code>ProjectionTy</code> to  also represent const projections as well</p>",
        "id": 228074995,
        "sender_full_name": "detrumi",
        "timestamp": 1614450962
    },
    {
        "content": "<p>yes, but what I mean is, const projections aren't types, right? so I would expect a new variant to be added to <code>ConstValue</code>, not <code>AliasTy</code></p>",
        "id": 228075594,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614451620
    },
    {
        "content": "<p>Ah. <code>ProjectionTy</code> is the type <code>&lt;P0 as TraitName&lt;P1..Pn&gt;&gt;::AssocItem&lt;Pn+1..Pm&gt;</code>,  and <code>ConstProjectionTy</code> (or whatever name we use) would be something like <code>&lt;P0 as TraitName&lt;P1..Pn&gt;&gt;::AssocConst</code></p>",
        "id": 228075682,
        "sender_full_name": "detrumi",
        "timestamp": 1614451708
    },
    {
        "content": "<p>yeah, and that's a value, not a type</p>",
        "id": 228075711,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1614451754
    },
    {
        "content": "<p>Pretty sure that's a type. <code>TyKind::Alias(AliasTy)</code> which has <code>AliasTy::Projection(ProjectionTy)</code></p>",
        "id": 228075796,
        "sender_full_name": "detrumi",
        "timestamp": 1614451839
    },
    {
        "content": "<p>ah wait, but for const it's not, is what you're saying</p>",
        "id": 228075819,
        "sender_full_name": "detrumi",
        "timestamp": 1614451869
    },
    {
        "content": "<p>yeah you're right</p>",
        "id": 228075885,
        "sender_full_name": "detrumi",
        "timestamp": 1614451950
    },
    {
        "content": "<p>The chalk parser wouldn't be able to see the difference between <code>GenericArg::Ty(Ty::Projection(..))</code> and <code>GenericArg::Const(Const::ProjectionConst(..))</code>, so I guess we should keep those the same in chalk ast, and pick one during lowering</p>",
        "id": 230028505,
        "sender_full_name": "detrumi",
        "timestamp": 1615555955
    },
    {
        "content": "<p>Some goal examples:</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;T as Iterator&gt;::Item = &lt;T as Iterator&gt;::Item // ProjectionTy\nexists&lt;const D&gt; {\n    &lt;Foo as Trait&gt;::C = D // ProjectionConst\n}\n</code></pre></div>",
        "id": 230028783,
        "sender_full_name": "detrumi",
        "timestamp": 1615556073
    },
    {
        "content": "<p>The downside is that it could lower to the wrong thing if the name is both in scope as assoc type and assoc const, but that's not too important for chalk's internal ast I think, since it's only used for testing</p>",
        "id": 230030180,
        "sender_full_name": "detrumi",
        "timestamp": 1615556710
    }
]