[
    {
        "content": "<p>So...maybe I'm missing something. But I have no idea what the \"occurs check\" is</p>",
        "id": 202200057,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593284296
    },
    {
        "content": "<p>And googling it gives like no info</p>",
        "id": 202200061,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593284317
    },
    {
        "content": "<p>Can someone explain to me what this is?</p>",
        "id": 202200088,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593284383
    },
    {
        "content": "<p>(Also, we should add some documentation. Both in the chalk book (or rustc dev guide) and to the <code>OccursCheck</code> struct in chalk-solve)</p>",
        "id": 202200146,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593284425
    },
    {
        "content": "<p>It's supposed to prevent the unification of <code>T</code> with <code>Foo&lt;T&gt;</code> because it would lead to infinite recursion.</p>",
        "id": 202200327,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1593284644
    },
    {
        "content": "<p>Hmm</p>",
        "id": 202204893,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593291820
    },
    {
        "content": "<p>As I understand it, basically during unification when you're trying to unify say an inference variable <code>?X</code> with some <code>T</code> ,  you can just instantiate <code>?X</code> to be <code>T</code> but to avoid the case where <code>T</code> contains <code>?X</code> (say you have <code>T = Vec&lt;?X&gt;</code>), which would create an infinitely recursive type, you check to make sure that <code>?X</code> is not in the set of free variables of <code>T</code></p>",
        "id": 202206184,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1593294021
    },
    {
        "content": "<p>So pretty much you're trying to check that the variable does not occur in the type before unifying the variable with the type, hence \"occurs check\"</p>",
        "id": 202206209,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1593294113
    },
    {
        "content": "<p>Hope that makes sense, this is all kind of new for me as well :)</p>",
        "id": 202206258,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1593294135
    },
    {
        "content": "<p>Yeah, that makes sense</p>",
        "id": 202206346,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593294362
    },
    {
        "content": "<p>It's a little weird that it's not really documented anywhere</p>",
        "id": 202206386,
        "sender_full_name": "Jack Huey",
        "timestamp": 1593294372
    },
    {
        "content": "<p><a href=\"http://www.cs.union.edu/~striegnk/learn-prolog-now/html/node18.html\">http://www.cs.union.edu/~striegnk/learn-prolog-now/html/node18.html</a><br>\n<a href=\"https://www.swi-prolog.org/pldoc/man?predicate=unify_with_occurs_check%2f2\">https://www.swi-prolog.org/pldoc/man?predicate=unify_with_occurs_check%2f2</a></p>",
        "id": 202219969,
        "sender_full_name": "Charles Lew",
        "timestamp": 1593320076
    },
    {
        "content": "<p>Adding a <code>prolog</code> keyword when searching helps.</p>",
        "id": 202219980,
        "sender_full_name": "Charles Lew",
        "timestamp": 1593320130
    },
    {
        "content": "<p>Or Haskell, where the term is used in compiler errors</p>",
        "id": 202224199,
        "sender_full_name": "detrumi",
        "timestamp": 1593328847
    },
    {
        "content": "<p>Directly from niko himself: <a href=\"http://smallcultfollowing.com/babysteps/blog/2017/03/25/unification-in-chalk-part-1/#the-occurs-check-preventing-infinite-types\">http://smallcultfollowing.com/babysteps/blog/2017/03/25/unification-in-chalk-part-1/#the-occurs-check-preventing-infinite-types</a></p>",
        "id": 202239174,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1593354858
    },
    {
        "content": "<p>You'll find it in most coverage of unification algorithms</p>",
        "id": 202369526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593465603
    }
]