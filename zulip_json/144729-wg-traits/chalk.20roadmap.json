[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I spent some time this morning <a href=\"https://paper.dropbox.com/doc/rustc-chalk-integration--Abw0sWJiCdNGvdbQw~kVR~zTAg-QSp9zIk3MS4jzyRpEzWv6\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/rustc-chalk-integration--Abw0sWJiCdNGvdbQw~kVR~zTAg-QSp9zIk3MS4jzyRpEzWv6\">organizing a dropbox paper</a> with a kind of \"brain dump\" of all the things that I think <strong>chalk specifically</strong> needs. It's probably not complete and some items continue to need elaboration. Feel free to add more items or comments.</p>",
        "id": 163993290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556028792
    },
    {
        "content": "<p>const generics should probably be on there too</p>",
        "id": 163997293,
        "sender_full_name": "varkor",
        "timestamp": 1556031462
    },
    {
        "content": "<p>(re. \"complete the chalk lowering\")</p>",
        "id": 163997365,
        "sender_full_name": "varkor",
        "timestamp": 1556031491
    },
    {
        "content": "<p>what definition of \"intersection type\" are you using?</p>",
        "id": 163997384,
        "sender_full_name": "varkor",
        "timestamp": 1556031510
    },
    {
        "content": "<p>the concept of intersection type doesn't seem to be very well-defined in general</p>",
        "id": 163997416,
        "sender_full_name": "varkor",
        "timestamp": 1556031540
    },
    {
        "content": "<p>should it be different from a product of the two types?</p>",
        "id": 163997454,
        "sender_full_name": "varkor",
        "timestamp": 1556031564
    },
    {
        "content": "<p>well, this is <em>something</em> of a home-brew definition, but I think it fits fairly well the standard usage</p>",
        "id": 164003197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035354
    },
    {
        "content": "<p>it is quite distinct from a product type, yes</p>",
        "id": 164003200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035360
    },
    {
        "content": "<p>the idea is \"some value is both T1 and T2 simultaneously\"</p>",
        "id": 164003209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035371
    },
    {
        "content": "<blockquote>\n<p>const generics should probably be on there too</p>\n</blockquote>\n<p>hmm. yes, I agree, though I wonder how much work there is here. some, at least, but likely minimal</p>",
        "id": 164003308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035441
    },
    {
        "content": "<p>i.e., this is basically a new kind of unifiable thing (in addition to types/lifetimes)</p>",
        "id": 164003378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035462
    },
    {
        "content": "<p>well, it'd be good to answer that question</p>",
        "id": 164003389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035479
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> you around?)</p>",
        "id": 164003559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035584
    },
    {
        "content": "<p>(I'm skimming over the comments you left in the paper doc right now)</p>",
        "id": 164003659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035659
    },
    {
        "content": "<p>Let's ask an interesting question</p>",
        "id": 164003728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035686
    },
    {
        "content": "<p>It seems like we're moving in a direction in which the <code>chalk-solve</code> crate should be able to handle all of Rust</p>",
        "id": 164003768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035718
    },
    {
        "content": "<p>Presently, chalk elides some things -- like arbitrary arity tuples, as you pointed out</p>",
        "id": 164003791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035738
    },
    {
        "content": "<p>but also things like <code>Sized</code> trait</p>",
        "id": 164003814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035756
    },
    {
        "content": "<p>and other builtin traits</p>",
        "id": 164003819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035762
    },
    {
        "content": "<p>but trying to setup the crates from <a href=\"https://github.com/rust-lang-nursery/chalk/issues/214\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/214\">chalk#214</a>, it seems like a number of those details become relevant precisely around this \"give me the program clauses for the goal X\" callback</p>",
        "id": 164003915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035821
    },
    {
        "content": "<p>and...that is probably a good thing?</p>",
        "id": 164003926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035829
    },
    {
        "content": "<p>that said, maybe we should talk through the doc a bit systematically? One of the things I was curious to start with was the set of <strong>goals</strong> I outlined. I am particularly interested in trying to get more specific about what it means to <strong>validate</strong> the chalk approach -- i.e., what things are we worried about?</p>",
        "id": 164003989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> true, this callback is I think the only one having interactions with those arbitrary arity + builtin bounds etc questions</p>",
        "id": 164003998,
        "sender_full_name": "scalexm",
        "timestamp": 1556035911
    },
    {
        "content": "<blockquote>\n<p>true, this callback is I think the only one having interactions with those arbitrary arity + builtin bounds etc questions</p>\n</blockquote>\n<p>yeah -- but it seems kind of \"right\" to me for that logic to ultimately live within the chalk crate</p>",
        "id": 164004068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035939
    },
    {
        "content": "<p>I guess I am thinking now of the chalk-solve crate as being the \"adapter\" between <em>rust syntax</em> and <em>logical predciates</em></p>",
        "id": 164004121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556035973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what worries me the most is whether we'll be able to implement a good solution for region constraints</p>",
        "id": 164004126,
        "sender_full_name": "scalexm",
        "timestamp": 1556035977
    },
    {
        "content": "<p>I guess that connects to my top worry</p>",
        "id": 164004175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036017
    },
    {
        "content": "<p>also eventually regarding perfs, I think we still don't know if the chalk approach will be as efficient as the existing solver</p>",
        "id": 164004195,
        "sender_full_name": "scalexm",
        "timestamp": 1556036032
    },
    {
        "content": "<p>also we presume it will be more efficient</p>",
        "id": 164004203,
        "sender_full_name": "scalexm",
        "timestamp": 1556036040
    },
    {
        "content": "<p>I am worried in general about managing the performance -- in particular, I am worried the solver might get \"lost\" exploring fruitless parts of the search space</p>",
        "id": 164004204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036040
    },
    {
        "content": "<p>yes</p>",
        "id": 164004255,
        "sender_full_name": "scalexm",
        "timestamp": 1556036048
    },
    {
        "content": "<p>But one of the reasons it could do so, I think</p>",
        "id": 164004270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036061
    },
    {
        "content": "<p>is if it is attempting to enumerate out the possible region constraints more fully</p>",
        "id": 164004286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036079
    },
    {
        "content": "<p>but ok so -- our two concerns so far are</p>\n<ul>\n<li>ensuring we can integrate region constraints in a nice way</li>\n<li>perf tuning</li>\n</ul>",
        "id": 164004323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036112
    },
    {
        "content": "<p>are there other parts of \"supporting Rust\" that we are concerned about?</p>",
        "id": 164004334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036123
    },
    {
        "content": "<p>mostly the things i've listed feel like \"just work\" to me</p>",
        "id": 164004338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036134
    },
    {
        "content": "<p>not trivial by any means</p>",
        "id": 164004343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036142
    },
    {
        "content": "<p>I don't think there are any other concerns</p>",
        "id": 164004399,
        "sender_full_name": "scalexm",
        "timestamp": 1556036163
    },
    {
        "content": "<p>I'm looking at specialization, primarily. I guess there is some doubt as to what it'll take to make lazy norm work in practice, how many surprises we might hit there</p>",
        "id": 164004404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036165
    },
    {
        "content": "<p>OK, so let's talk out region inference a little bit perhaps</p>",
        "id": 164004456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036208
    },
    {
        "content": "<p>I have a vague plan</p>",
        "id": 164004516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036249
    },
    {
        "content": "<p>Not sure how much we've talked about it before, I forget</p>",
        "id": 164004519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036256
    },
    {
        "content": "<p>roughly speaking what I would like to do</p>",
        "id": 164004614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036307
    },
    {
        "content": "<p>is to distinguish the \"base region predicates\" that polonius curently understands -- basically <code>'a: 'b</code></p>",
        "id": 164004647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036326
    },
    {
        "content": "<p>from the more complex <a href=\"http://smallcultfollowing.com/babysteps/blog/2019/01/21/hereditary-harrop-region-constraints/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2019/01/21/hereditary-harrop-region-constraints/\">\"hereditary harrop predicates\"</a> that we sometimes produce (e.g., <code>for&lt;'a&gt; ('a: 'b)</code> and so on)</p>",
        "id": 164004655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036341
    },
    {
        "content": "<p>I think it should be chalk's job to lowering from the HH predicates to the base predicates -- but not the base predicates we have today, which are very simple</p>",
        "id": 164004716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036386
    },
    {
        "content": "<p>today, we have </p>\n<div class=\"codehilite\"><pre><span></span>RC = &#39;a: &#39;b | RC &amp;&amp; RC\n</pre></div>",
        "id": 164004758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036402
    },
    {
        "content": "<p>I would want to add</p>",
        "id": 164004784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036405
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>RC = &#39;a: &#39;b | RC &amp;&amp; RC | RC || RC\n</pre></div>",
        "id": 164004802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036419
    },
    {
        "content": "<p>which is of course kinda' a big deal</p>",
        "id": 164004814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036430
    },
    {
        "content": "<blockquote>\n<p>today, we have </p>\n</blockquote>\n<p>let me clarify -- I don't really mean in <em>chalk</em> today, but more like <em>polonius</em> today</p>",
        "id": 164004836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036448
    },
    {
        "content": "<blockquote>\n<p>I would want to add</p>\n</blockquote>\n<p>specifically, I want to add \"or\" constraints</p>",
        "id": 164004858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036462
    },
    {
        "content": "<p>yes, I remember that we talked about that</p>",
        "id": 164004890,
        "sender_full_name": "scalexm",
        "timestamp": 1556036477
    },
    {
        "content": "<p>if you have something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 164004917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036496
    },
    {
        "content": "<p>it seems like you kind of <em>have</em> to be able to say that <code>T: Trait&lt;'c&gt; if 'c == 'a || 'c == 'b</code></p>",
        "id": 164004937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036510
    },
    {
        "content": "<p>or else to try and treat regions <em>just</em> like types--</p>",
        "id": 164005057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036557
    },
    {
        "content": "<p>and return an ambiguous result until we infer what region we want</p>",
        "id": 164005075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036568
    },
    {
        "content": "<p>which..may actually be plausible</p>",
        "id": 164005128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036596
    },
    {
        "content": "<p>( it'd be a big mental shift )</p>",
        "id": 164005156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036615
    },
    {
        "content": "<p>in any case, let's run with the \"or\" constraints for a moment</p>",
        "id": 164005282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036681
    },
    {
        "content": "<blockquote>\n<p>I think it should be chalk's job to lowering from the HH predicates to the base predicates -- but not the base predicates we have today, which are very simple</p>\n</blockquote>\n<p>so I explored what this would look like</p>",
        "id": 164005304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036701
    },
    {
        "content": "<p>it looks like I didn't commit that code anywhere, I guess it's on my old mac</p>",
        "id": 164005331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036712
    },
    {
        "content": "<p>I should push it somewhere but the tl;dr was that I was messed about with lambda prolog</p>",
        "id": 164005345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036725
    },
    {
        "content": "<p>there are really just a few rules, basically</p>",
        "id": 164005358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036734
    },
    {
        "content": "<p>I think I had a relation like <code>lower(HHRC, RC)</code> where the input was the hereditary harrop region constraint (HHRC) and the output was a list of flat constraints RC; this would of course have multiple solutions sometimes</p>",
        "id": 164005494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036802
    },
    {
        "content": "<p>but let me go look :)</p>",
        "id": 164005544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556036829
    },
    {
        "content": "<p>Ah, <a href=\"https://github.com/nikomatsakis/teyjus-rust-region-solver\" target=\"_blank\" title=\"https://github.com/nikomatsakis/teyjus-rust-region-solver\">here it is</a></p>",
        "id": 164005900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> mmh ok, lambda prolog syntax does not speak much to me :p</p>",
        "id": 164006091,
        "sender_full_name": "scalexm",
        "timestamp": 1556037172
    },
    {
        "content": "<p>yeah, it's more for my own memory I guess</p>",
        "id": 164006097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037180
    },
    {
        "content": "<p>anyway it doesn't matter</p>",
        "id": 164006115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037191
    },
    {
        "content": "<p>I think the basic rule was just something like</p>\n<p><code>forall&lt;x&gt; { 'static: 'x }</code></p>",
        "id": 164006302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037338
    },
    {
        "content": "<p>and then a rule that said <code>forall&lt;'a, 'b&gt; { ('a: 'b) :- root('a), root('b) }</code></p>",
        "id": 164006341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037362
    },
    {
        "content": "<p>where \"root\" means that they exist in the \"root universe\"</p>",
        "id": 164006380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037368
    },
    {
        "content": "<p>the problem iirc was that you would get more answers than you might like</p>",
        "id": 164006582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037542
    },
    {
        "content": "<p>e.g., you might get <code>'a: 'b</code> as one possible constraint but also <code>'a: 'static</code></p>",
        "id": 164006601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037557
    },
    {
        "content": "<p>so it seemed like we needed some kind of \"entailment\" step to try and simplify things</p>",
        "id": 164006616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037585
    },
    {
        "content": "<p>I never did explore further</p>",
        "id": 164006619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037588
    },
    {
        "content": "<p>anyway, idk, there's definitely exploration to be done here</p>",
        "id": 164006626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037601
    },
    {
        "content": "<p>let's try to get out of this rathole, I went deeper than I perhaps intended</p>",
        "id": 164006693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037613
    },
    {
        "content": "<p>maybe the question is:</p>\n<p>what should be the steps for the next 6 weeks once this sprint is over</p>",
        "id": 164006709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037630
    },
    {
        "content": "<blockquote>\n<p>anyway, idk, there's definitely exploration to be done here</p>\n</blockquote>\n<p>and, I suppose, it's relevant to talk about how to do this exploration</p>",
        "id": 164006740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I saw that <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> was working on adding more builtin bounds in rustc, which is cool</p>",
        "id": 164006758,
        "sender_full_name": "scalexm",
        "timestamp": 1556037669
    },
    {
        "content": "<p>yes. and some of that logic will need to move to chalk-solve</p>",
        "id": 164006769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037682
    },
    {
        "content": "<p>yes</p>",
        "id": 164006775,
        "sender_full_name": "scalexm",
        "timestamp": 1556037687
    },
    {
        "content": "<p>I feel like we should probably make some part of our focus be</p>",
        "id": 164006783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037698
    },
    {
        "content": "<p>modeling the builtin-traits</p>",
        "id": 164006789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037701
    },
    {
        "content": "<p>and handling \"unenumerable\" things</p>",
        "id": 164006793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037706
    },
    {
        "content": "<p>which are highly related</p>",
        "id": 164006794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037709
    },
    {
        "content": "<p>do you know what I mean by \"unenumerable\"?</p>",
        "id": 164006797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037714
    },
    {
        "content": "<p>I guess I wrote “non-enumerable” in the paper doc</p>",
        "id": 164006851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037729
    },
    {
        "content": "<p>yeah at least I understand what you mean, and the solution you proposed</p>",
        "id": 164006852,
        "sender_full_name": "scalexm",
        "timestamp": 1556037731
    },
    {
        "content": "<p>in particular</p>",
        "id": 164006854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037739
    },
    {
        "content": "<p>those feel like an obvious area where the solver could get \"lost\"</p>",
        "id": 164006857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037749
    },
    {
        "content": "<p>I guess I would nominate <strong>Smart predicate order selection</strong> as an obvious sprint goal because it feels..well.. kinda easy to do</p>",
        "id": 164006891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037792
    },
    {
        "content": "<p>certainly adding the <em>hook</em> is easy</p>",
        "id": 164006897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037800
    },
    {
        "content": "<p>and it could be used to temporarily side-step some of the non-enumerable problems</p>",
        "id": 164006903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037811
    },
    {
        "content": "<p>yes</p>",
        "id": 164006910,
        "sender_full_name": "scalexm",
        "timestamp": 1556037821
    },
    {
        "content": "<p>longer term, I would like to have some heuristics</p>",
        "id": 164006919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037831
    },
    {
        "content": "<p>that look at the impls for a given trait</p>",
        "id": 164006920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037834
    },
    {
        "content": "<p>and sort of categorize it into \"lots of impls\" or \"few impls\"</p>",
        "id": 164006947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037843
    },
    {
        "content": "<p>or something</p>",
        "id": 164006981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037856
    },
    {
        "content": "<p>but that's another story</p>",
        "id": 164006995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037867
    },
    {
        "content": "<p>I feel like that would have to be a data-driven effort</p>",
        "id": 164007012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037873
    },
    {
        "content": "<p>once we have the smart predicate order selection, we may be able to replace the artificial ambiguity hack in <code>program_clauses_for</code> for <code>?T: Sized</code> goals with just a <code>CannotProve</code> result, right? Because these goals will actually never be hit with <code>?T</code> unresolved, unless the goal is indeed totally unconstrained</p>",
        "id": 164007057,
        "sender_full_name": "scalexm",
        "timestamp": 1556037921
    },
    {
        "content": "<p>well, not quite</p>",
        "id": 164007072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037940
    },
    {
        "content": "<p>I mean you could</p>",
        "id": 164007075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037944
    },
    {
        "content": "<p>but I think are cases that won't work right</p>",
        "id": 164007088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037957
    },
    {
        "content": "<p>in particular</p>",
        "id": 164007182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038004
    },
    {
        "content": "<p>if you had one goal like <code>P(X) :- Q(X), R(X)</code>, perhaps <code>Q(X)</code> requires that <code>X: Sized</code> but <code>R(X)</code> would have specified was <code>X</code> is</p>",
        "id": 164007207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038026
    },
    {
        "content": "<p>but if we start processing <code>Q(X)</code> first</p>",
        "id": 164007217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038033
    },
    {
        "content": "<p>we would propagate a <code>CannotProve</code></p>",
        "id": 164007223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038038
    },
    {
        "content": "<p>that then infects <code>R</code></p>",
        "id": 164007229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038045
    },
    {
        "content": "<p>but if we had started first with <code>R</code>, it would be ok</p>",
        "id": 164007230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038049
    },
    {
        "content": "<p>the goal of the \"bubble up\" option I was proposing was that we wouldn't propagate a do-not-prove result, but more like a conditional answer (which is what a \"delayed goal\" is, really, but also a region constraint)</p>",
        "id": 164007273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038082
    },
    {
        "content": "<p>ok</p>",
        "id": 164007286,
        "sender_full_name": "scalexm",
        "timestamp": 1556038083
    },
    {
        "content": "<p>so we really need that un-enumerable result</p>",
        "id": 164007296,
        "sender_full_name": "scalexm",
        "timestamp": 1556038095
    },
    {
        "content": "<p>so once <code>R(X)</code> completed (and <code>X</code> is known) we could process it</p>",
        "id": 164007299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038098
    },
    {
        "content": "<blockquote>\n<p>so we really need that un-enumerable result</p>\n</blockquote>\n<p>yes, I think so, but also</p>",
        "id": 164007308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038109
    },
    {
        "content": "<p>it seems like, just from a practical POV, that having impls which accept any type <code>T</code> so long as <code>T: Sized</code>  is likely to be common</p>",
        "id": 164007327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038139
    },
    {
        "content": "<p>though I imagine .. maybe more general than that even?</p>",
        "id": 164007338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038147
    },
    {
        "content": "<p>i.e., this may not be entirely specific to sized</p>",
        "id": 164007343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038153
    },
    {
        "content": "<p>well, ignore what I'm saying, it's not that relevant</p>",
        "id": 164007347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038165
    },
    {
        "content": "<p>I guess what I'm saying is -- it may be useful regardless to have the option of \"breaking down\" a top-level goal into \"mid-level goals\". This is what the trait solver does today.</p>",
        "id": 164007359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038191
    },
    {
        "content": "<p>Admittedly, it is what I am trying to get away from :)</p>",
        "id": 164007361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038196
    },
    {
        "content": "<p>but it seems like it's useful <em>at least</em> for <code>?T: Sized</code></p>",
        "id": 164007406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038203
    },
    {
        "content": "<p>maybe we would want it other times for various reasons (primarily efficiency, I imagine)</p>",
        "id": 164007420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038219
    },
    {
        "content": "<blockquote>\n<p>I guess what I'm saying is -- it may be useful regardless to have the option of \"breaking down\" a top-level goal into \"mid-level goals\". This is what the trait solver does today.</p>\n</blockquote>\n<p>not sure if you know what I mean by this</p>",
        "id": 164007428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038237
    },
    {
        "content": "<p>I guess I'm imagining something like <code>impl&lt;H: Hasher&gt; Hash&lt;H&gt; for Foo</code></p>",
        "id": 164007438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038252
    },
    {
        "content": "<p>presently if you were asked <code>Foo: Hash&lt;?H&gt;</code>, the answer is ambiguous -- maybe we might find we would like to \"convert\" this into a <code>?H: Hasher</code>  constraint?</p>",
        "id": 164007458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038282
    },
    {
        "content": "<p>(Of course, we don't <em>have</em> to, because once <code>?H</code> is \"more precisely known\", we'll have a different canonical query, which was the original plan)</p>",
        "id": 164007472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038305
    },
    {
        "content": "<blockquote>\n<p>so we really need that un-enumerable result</p>\n</blockquote>\n<p>to circle back to this: I feel like implementing this idea isn't that complex</p>",
        "id": 164007535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038330
    },
    {
        "content": "<p>maybe i'm overlooking things</p>",
        "id": 164007537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038335
    },
    {
        "content": "<p>so the question is, maybe that is a candidate for a sprint goal, I guess</p>",
        "id": 164007716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038491
    },
    {
        "content": "<blockquote>\n<p>presently if you were asked <code>Foo: Hash&lt;?H&gt;</code>, the answer is ambiguous -- maybe we might find we would like to \"convert\" this into a <code>?H: Hasher</code>  constraint?</p>\n</blockquote>\n<p>ah ok I see</p>",
        "id": 164007736,
        "sender_full_name": "scalexm",
        "timestamp": 1556038505
    },
    {
        "content": "<p>I suppose it will ultimately depend on how many people there are who have time</p>",
        "id": 164007743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038507
    },
    {
        "content": "<p>yes, that does not seem overly complex to me either</p>",
        "id": 164007769,
        "sender_full_name": "scalexm",
        "timestamp": 1556038525
    },
    {
        "content": "<p>so, if our goal is to \"validate\" chalk more</p>",
        "id": 164007812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038559
    },
    {
        "content": "<p>but it probably requires a bit of knowledge of how the SLG solver works</p>",
        "id": 164007842,
        "sender_full_name": "scalexm",
        "timestamp": 1556038563
    },
    {
        "content": "<p>yes. I <em>think</em> it's probably a good mentoring task</p>",
        "id": 164007868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038574
    },
    {
        "content": "<p>so it would be maybe a \"more advanced\" issue</p>",
        "id": 164007871,
        "sender_full_name": "scalexm",
        "timestamp": 1556038576
    },
    {
        "content": "<p>but \"active mentoring\"</p>",
        "id": 164007873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038578
    },
    {
        "content": "<p>or \"intermediate level mentoring\"</p>",
        "id": 164007889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038593
    },
    {
        "content": "<p>i.e., it's not trivial, for sure</p>",
        "id": 164007898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038599
    },
    {
        "content": "<p>but it'd be a good way to learn how the solver works :)</p>",
        "id": 164007905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038606
    },
    {
        "content": "<blockquote>\n<p>so, if our goal is to \"validate\" chalk more</p>\n</blockquote>\n<p>I was going to say:  there are two options here. Option 1 of course is to pursue more integration with rustc itself</p>",
        "id": 164007945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038639
    },
    {
        "content": "<p>Option 2 is to pursue more with RLS</p>",
        "id": 164007953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038646
    },
    {
        "content": "<p>I am inclined to do a bit of both ;)</p>",
        "id": 164007956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038650
    },
    {
        "content": "<p>yes lol</p>",
        "id": 164007970,
        "sender_full_name": "scalexm",
        "timestamp": 1556038660
    },
    {
        "content": "<p>But I'm wondering, what are the big blockers? i.e., what would it mean to \"validate\". I feel like we want to be able to run tests</p>",
        "id": 164007973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038663
    },
    {
        "content": "<p>and see where chalk gets stuck</p>",
        "id": 164007978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038668
    },
    {
        "content": "<p>region constraints are obviously a big blocker here</p>",
        "id": 164007982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038673
    },
    {
        "content": "<p>I am wondering, though</p>",
        "id": 164007986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038679
    },
    {
        "content": "<p>like, ignoring them is viable for time being in some sense</p>",
        "id": 164008042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038688
    },
    {
        "content": "<p>rustc integration is already advanced enough to run tests</p>",
        "id": 164008064,
        "sender_full_name": "scalexm",
        "timestamp": 1556038710
    },
    {
        "content": "<p>I know</p>",
        "id": 164008066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038714
    },
    {
        "content": "<p>right now, it kind of ignores region constraints, right? I guess.. this is probably \"ok\"</p>",
        "id": 164008073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038729
    },
    {
        "content": "<p>last thing I recall is that it was having troubles with inferring type variables in some cases, I didn't know why</p>",
        "id": 164008078,
        "sender_full_name": "scalexm",
        "timestamp": 1556038733
    },
    {
        "content": "<p>i.e., it doesn't lead to spurious compilation failures for the most part?</p>",
        "id": 164008083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038738
    },
    {
        "content": "<p>it only ignores region constraints coming from unification</p>",
        "id": 164008093,
        "sender_full_name": "scalexm",
        "timestamp": 1556038743
    },
    {
        "content": "<p>region constraints like in <code>struct S&lt;T&gt; where T: 'static</code> are propagated</p>",
        "id": 164008116,
        "sender_full_name": "scalexm",
        "timestamp": 1556038758
    },
    {
        "content": "<p>I think</p>",
        "id": 164008119,
        "sender_full_name": "scalexm",
        "timestamp": 1556038762
    },
    {
        "content": "<p>ok</p>",
        "id": 164008120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038765
    },
    {
        "content": "<p>sounds plausible</p>",
        "id": 164008122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038767
    },
    {
        "content": "<blockquote>\n<p>last thing I recall is that it was having troubles with inferring type variables in some cases, I didn't know why</p>\n</blockquote>\n<p>so one plausible thing would be to set a goal of running the test suite</p>",
        "id": 164008138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038787
    },
    {
        "content": "<p>or some fraction of it</p>",
        "id": 164008139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038789
    },
    {
        "content": "<p>not sure how much runs now :)</p>",
        "id": 164008144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038791
    },
    {
        "content": "<p>or perhaps another way of saying it would be</p>",
        "id": 164008159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038802
    },
    {
        "content": "<p>running the test suite  might help us to determine some goals</p>",
        "id": 164008227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038814
    },
    {
        "content": "<p>I gotta run for some other meetings etc, this was useful so far -- I guess running the test suite isn't too hard though</p>",
        "id": 164008289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038869
    },
    {
        "content": "<p>I gotta run too</p>",
        "id": 164008532,
        "sender_full_name": "scalexm",
        "timestamp": 1556039059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I don't know if you saw, I had a question for you on my PR: <a href=\"https://github.com/rust-lang/rust/pull/60183#discussion_r277843999\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60183#discussion_r277843999\">https://github.com/rust-lang/rust/pull/60183#discussion_r277843999</a></p>",
        "id": 164125201,
        "sender_full_name": "tmandry",
        "timestamp": 1556144647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> replied, hope that makes sense</p>",
        "id": 164126409,
        "sender_full_name": "scalexm",
        "timestamp": 1556145862
    },
    {
        "content": "<p>Btw eventually we won’t need this « ambiguity trick » anymore, as soon as we implement <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>’s « non-enumerable » solution</p>",
        "id": 164126460,
        "sender_full_name": "scalexm",
        "timestamp": 1556145952
    },
    {
        "content": "<p>Yeah that does make sense, thanks!</p>",
        "id": 164126685,
        "sender_full_name": "tmandry",
        "timestamp": 1556146168
    },
    {
        "content": "<p>Hey folks. How's lifetime support in Chalk coming along lately? Will we get to see a usable version in nightly any time soon? :-)</p>",
        "id": 167767727,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1560179761
    }
]