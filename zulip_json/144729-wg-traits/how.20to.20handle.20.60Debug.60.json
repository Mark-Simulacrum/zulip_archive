[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> I'm going to break this out into a separate Zulip topic.</p>",
        "id": 191523973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584991661
    },
    {
        "content": "<p>I wonder if at this point we should just stop using <code>Debug</code></p>",
        "id": 191524003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584991669
    },
    {
        "content": "<p>Rather than lean so heavily on TLS</p>",
        "id": 191524076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584991683
    },
    {
        "content": "<p>Specifically, would definitely add a <code>DebugWithInterner</code> trait</p>",
        "id": 191524108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584991699
    },
    {
        "content": "<p>and write out own derive for it</p>",
        "id": 191524120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584991704
    },
    {
        "content": "<p>and then modify code from doing <code>debug!(\"{:?}\", foo)</code> to <code>debug!(\"{:?}\", foo.debug(interner))</code></p>",
        "id": 191524158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584991726
    },
    {
        "content": "<p>That said, this would definitely be something we have to \"negotiate\" eventually with rustc, which uses TLS extensively here.</p>",
        "id": 191524261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584991774
    },
    {
        "content": "<p>Probably the code you have in the PR is a good start for now, and this can be something we revisit over time</p>",
        "id": 191524281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584991786
    },
    {
        "content": "<p>I personally think the debug(interner) style doesn't work too well, though maybe in something like rustc it would -- the problem is that you need special impls for every type in the world (Vec, HashMap, etc.). But maybe that's a relatively low cost to pay...</p>",
        "id": 191524631,
        "sender_full_name": "simulacrum",
        "timestamp": 1584991923
    },
    {
        "content": "<p>(in an application like rustc at least where we have \"total control\" in some sense over our data structures etc)</p>",
        "id": 191524711,
        "sender_full_name": "simulacrum",
        "timestamp": 1584991955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/144729-wg-traits/topic/how.20to.20handle.20.60Debug.60/near/191524631\" title=\"#narrow/stream/144729-wg-traits/topic/how.20to.20handle.20.60Debug.60/near/191524631\">said</a>:</p>\n<blockquote>\n<p>I personally think the debug(interner) style doesn't work too well, though maybe in something like rustc it would -- the problem is that you need special impls for every type in the world (Vec, HashMap, etc.). But maybe that's a relatively low cost to pay...</p>\n</blockquote>\n<p>yeah, that's part of it</p>",
        "id": 191525421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584992316
    },
    {
        "content": "<p>although I don't think that's too bad personally</p>",
        "id": 191525436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584992326
    },
    {
        "content": "<p>it's not too bad, certainly</p>",
        "id": 191525467,
        "sender_full_name": "simulacrum",
        "timestamp": 1584992347
    },
    {
        "content": "<p>in Lark I was exploring a different option</p>",
        "id": 191525487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584992355
    },
    {
        "content": "<p>where you had a <code>debug_with</code> trait but, depending on what context you gave, you might get more or less detail or different output</p>",
        "id": 191525522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584992377
    },
    {
        "content": "<p>that was based on specialization</p>",
        "id": 191525536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584992387
    },
    {
        "content": "<p>might've been overkill; I wanted a way to have e.g. inference variables that were bound be automatically resolved and things like that</p>",
        "id": 191525609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584992408
    },
    {
        "content": "<p>one note is that if you do go down the debug(interner) route it seems like it might be good to have something like <code>format_with!(interner, \"...{:?} as {:?} with {:?}.\", foo, bar, baz)</code></p>",
        "id": 191525618,
        "sender_full_name": "simulacrum",
        "timestamp": 1584992413
    },
    {
        "content": "<p>it's based on the observation that, depending on context, I sometimes want different \"level of detail\" in the output</p>",
        "id": 191525630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584992421
    },
    {
        "content": "<p>(One crazy idea is that we can technically just embed this into std; the <code>Formatter</code> type already caries state and could fairly easily get a dyn Any in there, I suspect. Though that might conflict with interners (which are frequently non-static, I suspect)</p>",
        "id": 191525735,
        "sender_full_name": "simulacrum",
        "timestamp": 1584992490
    },
    {
        "content": "<p>ok~ If modifications to the PR are needed, or there's something more that needs to be done, just leave me a message :)</p>",
        "id": 191586669,
        "sender_full_name": "Charles Lew",
        "timestamp": 1585043685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> I think it can be merged \"as is\" for now</p>",
        "id": 191664507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080036
    },
    {
        "content": "<p>will do</p>",
        "id": 191664509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585080037
    }
]