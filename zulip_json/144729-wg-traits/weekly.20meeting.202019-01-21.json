[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-compiler-traits</span>:</p>\n<p>I just realized that this Monday is a holiday here in the US -- not sure if I can make the meeting or not. I could probably make it to the same time but on Tuesday. Should we consider rescheduling? </p>\n<p>(<span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> was going to talk about how to handle trait objects in chalk)</p>",
        "id": 156461743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547950795
    },
    {
        "content": "<p>I think Tuesday same time is fine for me</p>",
        "id": 156473929,
        "sender_full_name": "scalexm",
        "timestamp": 1547975139
    },
    {
        "content": "<p>I won't be able to attend, but feel free to go on without me. My update is that I'm currently at a conference with Manish. Manish is leaving on Wednesday after which I will start work on specialization in chalk.</p>",
        "id": 156483100,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1547993549
    },
    {
        "content": "<p>That works for me</p>",
        "id": 156485302,
        "sender_full_name": "tmandry",
        "timestamp": 1547997811
    },
    {
        "content": "<p>So will we do the meeting today, <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-compiler-traits</span>? In ~90 minutes, I suppose.</p>",
        "id": 156622724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548178407
    },
    {
        "content": "<p>Any thoughts on how we should do this? :)</p>",
        "id": 156629458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183570
    },
    {
        "content": "<p>I'm trying to pull together my thoughts from reading <a href=\"https://github.com/rust-lang-nursery/chalk/issues/203\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/203\">https://github.com/rust-lang-nursery/chalk/issues/203</a></p>",
        "id": 156629486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183588
    },
    {
        "content": "<p>I'm not sure if we had planned to do a chat over video or just stick with Zulip</p>",
        "id": 156629558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183605
    },
    {
        "content": "<p>I feel like we talked about it but I forget the answer :)</p>",
        "id": 156629575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just Zulip is a bit easier for me this evening, also I could do video</p>",
        "id": 156629757,
        "sender_full_name": "scalexm",
        "timestamp": 1548183741
    },
    {
        "content": "<p>ok that works for me</p>",
        "id": 156629764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183750
    },
    {
        "content": "<p>I answered on the issue about the RFC you cited</p>",
        "id": 156629765,
        "sender_full_name": "scalexm",
        "timestamp": 1548183750
    },
    {
        "content": "<p>I see that, yes, I was thinking something similar</p>",
        "id": 156629784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183768
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-compiler-traits</span> — guess we'll get started</p>",
        "id": 156629823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183813
    },
    {
        "content": "<p>mmh no actually that wouldn't work because we also require <code>WellFormed(dyn  Foo) :- WellFormed(dyn Foo: Foo)</code></p>",
        "id": 156629825,
        "sender_full_name": "scalexm",
        "timestamp": 1548183814
    },
    {
        "content": "<p>and we somehow need this to prevent the possibility of naming types like <code>dyn Foo&lt;&amp;'a i32&gt;</code> where <code>trait Foo&lt;X&gt;: 'static</code></p>",
        "id": 156629901,
        "sender_full_name": "scalexm",
        "timestamp": 1548183853
    },
    {
        "content": "<p>something else to file for follow-up: we should discuss associatd item projection (e.g., <code>dyn Foo&lt;T = Bar&gt;</code>)</p>",
        "id": 156629910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183862
    },
    {
        "content": "<p>so, the RFC, I was wondering if we want some in between</p>",
        "id": 156629945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183891
    },
    {
        "content": "<p>i.e., if the trait is not object safe, maybe we permit the <code>dyn</code> type, but we don't add all the \"implied bounds\" rules</p>",
        "id": 156629975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183909
    },
    {
        "content": "<p>er, I guess I mean the impls</p>",
        "id": 156629998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183924
    },
    {
        "content": "<p>but I think we are getting ahead of ourselves</p>",
        "id": 156630005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think <code>dyn Foo&lt;T = Bar&gt;</code> would just add some <code>Normalize</code> rules</p>",
        "id": 156630092,
        "sender_full_name": "scalexm",
        "timestamp": 1548183967
    },
    {
        "content": "<p>well basically in what I call the \"generated impls\", we would forward the specified associated type values</p>",
        "id": 156630127,
        "sender_full_name": "scalexm",
        "timestamp": 1548184006
    },
    {
        "content": "<p>the heart of your proposal is this rule, basically:</p>\n<div class=\"codehilite\"><pre><span></span>impl&lt;T1...Tk&gt; SuperTrait&lt;...&gt; for dyn Foo&lt;T1...Tk&gt; where SuperWC1[...], ..., SuperWCr[...]\n{\n}\n</pre></div>",
        "id": 156630160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184024
    },
    {
        "content": "<p>and I guess the WF rule:</p>\n<div class=\"codehilite\"><pre><span></span>WellFormed(dyn Foo&lt;X1...Xk&gt;) :-\n    ObjectSafe(Foo),\n    WellFormed(dyn Foo&lt;X1...Xk&gt;: Foo&lt;X1...Xk&gt;).\n</pre></div>",
        "id": 156630188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> right, but actually I believe the where clauses are not even needed (at least under an implied bounds setting), the real heart is the WF rule</p>",
        "id": 156630196,
        "sender_full_name": "scalexm",
        "timestamp": 1548184055
    },
    {
        "content": "<p>it's an interesting rule</p>",
        "id": 156630266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184087
    },
    {
        "content": "<p>so you'll have to refresh my memory</p>",
        "id": 156630271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184092
    },
    {
        "content": "<p>when we prove that <code>WF(T: Trait)</code>, does that assume that <code>WF(T)</code> is true?</p>",
        "id": 156630284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184101
    },
    {
        "content": "<p>I know we talked about various different approaches to where to put the \"recursion\"</p>",
        "id": 156630292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes kind of, basically <code>WF(T: Trait)</code> does not care at all about the well-formedness of types</p>",
        "id": 156630301,
        "sender_full_name": "scalexm",
        "timestamp": 1548184134
    },
    {
        "content": "<p>(meta-question: who else is around? Is it just <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> and I?)</p>",
        "id": 156630336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184181
    },
    {
        "content": "<p>/me is reading</p>",
        "id": 156630353,
        "sender_full_name": "centril",
        "timestamp": 1548184192
    },
    {
        "content": "<p>I'm around briefly</p>",
        "id": 156630360,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548184198
    },
    {
        "content": "<p>me</p>",
        "id": 156630419,
        "sender_full_name": "tmandry",
        "timestamp": 1548184210
    },
    {
        "content": "<p>cool :)</p>",
        "id": 156630445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184232
    },
    {
        "content": "<p>I am feeling a desire to briefly reiterate how the WF rules work again <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> =)</p>",
        "id": 156630453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184242
    },
    {
        "content": "<p>that's a very curious typing rule... which should never terminate unless <code>WF(T: Trait)</code> doesn't require <code>WF(T)</code>... right?</p>",
        "id": 156630469,
        "sender_full_name": "centril",
        "timestamp": 1548184261
    },
    {
        "content": "<p>correct, <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>, that's partly why I was asking</p>",
        "id": 156630495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span>  <code>WF(T: Trait)</code> does not assume anything</p>",
        "id": 156630500,
        "sender_full_name": "scalexm",
        "timestamp": 1548184278
    },
    {
        "content": "<p>and it does not try to prove any <code>WF(T)</code> either</p>",
        "id": 156630511,
        "sender_full_name": "scalexm",
        "timestamp": 1548184287
    },
    {
        "content": "<p>well-formedness for types comes from \"outside\", that is when the type checker see some type <code>Type</code> named somewhere, it will try to prove <code>WF(Type)</code></p>",
        "id": 156630547,
        "sender_full_name": "scalexm",
        "timestamp": 1548184318
    },
    {
        "content": "<p>what does well-formedness even mean?</p>",
        "id": 156630593,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548184325
    },
    {
        "content": "<p>seems like a kind of vague term</p>",
        "id": 156630595,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548184329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> is the rustc-guide up to date, do you now? (e.g., <a href=\"https://rust-lang.github.io/rustc-guide/traits/wf.html#trait-definitions\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/traits/wf.html#trait-definitions\">this section</a>)</p>",
        "id": 156630606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184332
    },
    {
        "content": "<blockquote>\n<p>what does well-formedness even mean?</p>\n</blockquote>\n<p>it means what we say it means :)</p>",
        "id": 156630628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the rustc-guide is up to date, except for the slight flaw I discovered</p>",
        "id": 156630642,
        "sender_full_name": "scalexm",
        "timestamp": 1548184367
    },
    {
        "content": "<p>yeah, ok</p>",
        "id": 156630653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184375
    },
    {
        "content": "<p>(which btw I discovered by studying well-formedness for trait objects since you have some weird rule like <code>struct S&lt;T&gt; where S&lt;T&gt;: Trait</code>)</p>",
        "id": 156630692,
        "sender_full_name": "scalexm",
        "timestamp": 1548184418
    },
    {
        "content": "<p>except I linked to the wrong part</p>",
        "id": 156630710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184435
    },
    {
        "content": "<p>the wf rules for traits are <a href=\"https://rust-lang.github.io/rustc-guide/traits/lowering-rules.html#implied-bounds\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/traits/lowering-rules.html#implied-bounds\">here, in the lowering section</a></p>",
        "id": 156630759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184454
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// Rule WellFormed-TraitRef\nforall&lt;Self, P1..Pn&gt; {\n  WellFormed(Self: Trait&lt;P1..Pn&gt;) :-\n    Implemented(Self: Trait&lt;P1..Pn&gt;) &amp;&amp;\n    WellFormed(WC)\n}\n</pre></div>",
        "id": 156630770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184463
    },
    {
        "content": "<p>right</p>",
        "id": 156630784,
        "sender_full_name": "scalexm",
        "timestamp": 1548184470
    },
    {
        "content": "<p>so basically <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> saying that <code>T: Trait</code> is \"well-formed\" says that (a) it is implemented and (b) all the where clauses on the trait are satisfied</p>",
        "id": 156630826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184510
    },
    {
        "content": "<p>(the prolog form of stating things feels so backwards stating the premises before the result... as compared to gentzen style...)</p>",
        "id": 156630844,
        "sender_full_name": "centril",
        "timestamp": 1548184530
    },
    {
        "content": "<p>okay. that means something totally different to logic hah. I thought it was some type-theoretical notion which had a correspondence to logic.</p>",
        "id": 156630855,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548184541
    },
    {
        "content": "<p>ok, so to bring that back to the trait object rule:</p>\n<div class=\"codehilite\"><pre><span></span>WellFormed(dyn Foo&lt;X1...Xk&gt;) :-\n    ObjectSafe(Foo),\n    WellFormed(dyn Foo&lt;X1...Xk&gt;: Foo&lt;X1...Xk&gt;).\n</pre></div>\n\n\n<p>it certainly relies on the <code>Implemented</code> rule that we generate</p>",
        "id": 156630857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184545
    },
    {
        "content": "<p>and what does \"implemented\" mean here?</p>",
        "id": 156630925,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548184567
    },
    {
        "content": "<p>you mean the trait bound is satisfied?</p>",
        "id": 156630948,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548184580
    },
    {
        "content": "<p>more or less. It means that we believe an impl exists (it may come from an in-scope where-clause, in some contexts)</p>",
        "id": 156630960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184595
    },
    {
        "content": "<p>(or \"witness\" in type theory)</p>",
        "id": 156630980,
        "sender_full_name": "centril",
        "timestamp": 1548184617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes: thanks to the <code>Implemented</code> rules we generate, only the where clauses that talk about lifetimes or type parameters may turn out to be false, all the other where clauses of the form <code>where Self: Trait&lt;...&gt;</code> are somehow \"assumed\" to be true because of the generated impls</p>",
        "id": 156631015,
        "sender_full_name": "scalexm",
        "timestamp": 1548184644
    },
    {
        "content": "<p>(perhaps it's worth mentioning trivial-where-clauses, where some of this breaks down)</p>",
        "id": 156631057,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1548184677
    },
    {
        "content": "<p>the impl rule we generate being as follows, I think?</p>\n<div class=\"codehilite\"><pre><span></span>forall&lt;T1..Tk&gt; {\n  Implemented(dyn Foo&lt;T1..Tk&gt;: SuperTrait&lt;..&gt;) :-\n    Implemented(SuperWC1[...]), ..., Implemented(SuperWCr[...])\n}\n</pre></div>\n\n\n<p>ah, so, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, to what extent are we relying on things being acyclic here..?</p>",
        "id": 156631148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184726
    },
    {
        "content": "<p>since it allows assuming some things that aren't true globally-- but ignore me if I'm just distracting</p>",
        "id": 156631153,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1548184728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> I believe trivial-where-clauses are naturally handled in the new-style trait solving, basically we just always assume all where clauses to be true, we never check for \"inconsistent\" where clauses</p>",
        "id": 156631157,
        "sender_full_name": "scalexm",
        "timestamp": 1548184731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes this is what we generate</p>",
        "id": 156631216,
        "sender_full_name": "scalexm",
        "timestamp": 1548184761
    },
    {
        "content": "<p>mmh I think cyclic traits are handled correctly, provided that we can get all the super-traits via some fixed point algorithm</p>",
        "id": 156631317,
        "sender_full_name": "scalexm",
        "timestamp": 1548184808
    },
    {
        "content": "<p>so e.g. if we have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>today, that's an error, but I'd like to remove that requirement.</p>",
        "id": 156631320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184810
    },
    {
        "content": "<p>but as I noted this must be done outside of the logic</p>",
        "id": 156631330,
        "sender_full_name": "scalexm",
        "timestamp": 1548184818
    },
    {
        "content": "<p>I mean we must have some code in rustc that retrieves all the super-traits and generate the impls</p>",
        "id": 156631355,
        "sender_full_name": "scalexm",
        "timestamp": 1548184838
    },
    {
        "content": "<p>so let's walk through that example, maybe? just for my edification :)</p>",
        "id": 156631380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184852
    },
    {
        "content": "<p>basically we would make two rules, lke so, right?</p>\n<div class=\"codehilite\"><pre><span></span>Implemented(dyn Foo: Foo) :- Implemented(dyn Foo: Bar).\nImplemented(dyn Foo: Bar) :- Implemented(dyn Foo: Foo).\n</pre></div>",
        "id": 156631417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184889
    },
    {
        "content": "<p>er, I guess we would also have </p>\n<div class=\"codehilite\"><pre><span></span>Implemented(dyn Bar: Foo) :- Implemented(dyn Bar: Bar).\nImplemented(dyn Bar: Bar) :- Implemented(dyn Bar: Foo).\n</pre></div>\n\n\n<p>coming from the <code>trait Bar</code> declaration</p>",
        "id": 156631488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> so if <code>WF(T: Trait) :- WF(T), ...</code> doesn't hold, then won't that make <code>[u8; \"hello\"]</code> legal and other such nonsense...? or do you check <code>WF(T)</code> later for <code>[u8; \"hello\"]</code> ?</p>",
        "id": 156631492,
        "sender_full_name": "centril",
        "timestamp": 1548184931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah ok it seems like it would not work with the where clauses on the generated impls</p>",
        "id": 156631499,
        "sender_full_name": "scalexm",
        "timestamp": 1548184936
    },
    {
        "content": "<p><em>however</em>, as I said, I think they are not necessary especially in the implied bounds setting</p>",
        "id": 156631517,
        "sender_full_name": "scalexm",
        "timestamp": 1548184955
    },
    {
        "content": "<p>ok, yeah, maybe we can drill into <em>that</em> a bit</p>",
        "id": 156631525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184966
    },
    {
        "content": "<p>@centril cool. that's in terminology I'm familiar with</p>",
        "id": 156631530,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548184977
    },
    {
        "content": "<p>basically I've written these where clauses at first so that these synthetic impls are well-formed (well-formedness of impls defined in the rustc-guide)</p>",
        "id": 156631531,
        "sender_full_name": "scalexm",
        "timestamp": 1548184979
    },
    {
        "content": "<p>(I kind of can't answer the question of what role they play exactly, I think)</p>",
        "id": 156631557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548184999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> but with the reverse rules <code>FromEnv(dyn Foo: Foo) :- FromEnv(dyn Foo)</code> and since we do <code>impl Trait for dyn Foo</code>, we have <code>dyn Foo</code> in our env</p>",
        "id": 156631565,
        "sender_full_name": "scalexm",
        "timestamp": 1548185007
    },
    {
        "content": "<p>OK.</p>",
        "id": 156631639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> all types appearing in, say, a function are WF-checked in a separate pass indeed</p>",
        "id": 156631656,
        "sender_full_name": "scalexm",
        "timestamp": 1548185064
    },
    {
        "content": "<p>makes sense</p>",
        "id": 156631730,
        "sender_full_name": "centril",
        "timestamp": 1548185127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> but basically the sentence I wrote on the issue:</p>\n<blockquote>\n<p>Note that, in the rules described earlier, we added where clauses from the super traits on every generated impl only so that the impl is well-formed even without implied bounds, I am not sure they are strictly needed.</p>\n</blockquote>\n<p>sums up the idea</p>",
        "id": 156631737,
        "sender_full_name": "scalexm",
        "timestamp": 1548185133
    },
    {
        "content": "<p>(ps, maybe we should find another name for <code>WellFormed(T: Trait)</code> -- even <code>WellFormedImpl</code> might be more obvious)</p>",
        "id": 156631744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185142
    },
    {
        "content": "<p>(actually not sure that's more obvious ;)</p>",
        "id": 156631810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185164
    },
    {
        "content": "<p>yeah bike-shedding is welcome :)</p>",
        "id": 156631815,
        "sender_full_name": "scalexm",
        "timestamp": 1548185165
    },
    {
        "content": "<p>can we come up with better terminology than well-formed, btw? it doesn't really give an intuitive idea of what it means... unless it's standard terminology, I guess. \"witnessed\" sounds good.</p>",
        "id": 156631842,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185192
    },
    {
        "content": "<p>oh</p>",
        "id": 156631856,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185203
    },
    {
        "content": "<p>heh</p>",
        "id": 156631857,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185204
    },
    {
        "content": "<p>just saw your message</p>",
        "id": 156631859,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> <code>WellFormed</code> for types has been a terminology floating around in the compiler for some time, and we just basically reused it for traits without thinking too much about it :p</p>",
        "id": 156631878,
        "sender_full_name": "scalexm",
        "timestamp": 1548185229
    },
    {
        "content": "<p>it's standard terminology</p>",
        "id": 156631889,
        "sender_full_name": "centril",
        "timestamp": 1548185243
    },
    {
        "content": "<p>(in particular, the goals of the \"well-formedness checking\" section are different from the \"well formed\" predicate)</p>",
        "id": 156631893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185248
    },
    {
        "content": "<p>recent developments on implied bounds etc have basically been niko, <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> and myself</p>",
        "id": 156631898,
        "sender_full_name": "scalexm",
        "timestamp": 1548185252
    },
    {
        "content": "<p>maybe <code>FullyImplemented</code> or something...</p>",
        "id": 156631948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185282
    },
    {
        "content": "<p>yeah. god knows how it became standard though. \"well-formed\" has syntactical connotations (both to the intuitive mind, and in formal logic)</p>",
        "id": 156631963,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185283
    },
    {
        "content": "<p>which is why I dislike it.</p>",
        "id": 156631975,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185292
    },
    {
        "content": "<p>FullyImplemented kind of works</p>",
        "id": 156631988,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185304
    },
    {
        "content": "<blockquote>\n<p>(in particular, the goals of the \"well-formedness checking\" section are different from the \"well formed\" predicate)</p>\n</blockquote>\n<p>I remember this being confusing for sure</p>",
        "id": 156631998,
        "sender_full_name": "tmandry",
        "timestamp": 1548185316
    },
    {
        "content": "<p>the latter section might also be called \"legality\" or something</p>",
        "id": 156632011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185328
    },
    {
        "content": "<p>i.e., it's the rules that make an impl <em>legal</em></p>",
        "id": 156632016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185335
    },
    {
        "content": "<p>\"legality\" is good I think</p>",
        "id": 156632018,
        "sender_full_name": "scalexm",
        "timestamp": 1548185338
    },
    {
        "content": "<p>and other forms of declarations</p>",
        "id": 156632021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185340
    },
    {
        "content": "<p>can we stick to standard terminology (especially that used by <em>Philip Wadler</em>)...? :P</p>",
        "id": 156632045,
        "sender_full_name": "centril",
        "timestamp": 1548185365
    },
    {
        "content": "<p>no, because it's shit? ;-)</p>",
        "id": 156632050,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185372
    },
    {
        "content": "<p>in gentzen style you might say:</p>\n<div class=\"codehilite\"><pre><span></span>Γ ⊢ σ type\nΓ ⊢ x: usize\n------------------\nΓ ⊢ [σ; x] type\n</pre></div>",
        "id": 156632176,
        "sender_full_name": "centril",
        "timestamp": 1548185428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I'm not even sure we're really using <code>WellFormed(Type)</code> according to the standard terminology signification, do we?</p>",
        "id": 156632189,
        "sender_full_name": "scalexm",
        "timestamp": 1548185437
    },
    {
        "content": "<p>^^</p>",
        "id": 156632197,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> not sure either... but I can read a wadler paper and... ;)</p>",
        "id": 156632225,
        "sender_full_name": "centril",
        "timestamp": 1548185471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> that's not what we're talking about here though I think</p>",
        "id": 156632230,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185473
    },
    {
        "content": "<p><code>σ type</code> meaning \"σ is well-formed\"</p>",
        "id": 156632241,
        "sender_full_name": "centril",
        "timestamp": 1548185484
    },
    {
        "content": "<p>basically WF rules are something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Debug</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>WellFormed(S&lt;T&gt;) :- Implemented(T: Debug)\n</pre></div>",
        "id": 156632242,
        "sender_full_name": "scalexm",
        "timestamp": 1548185488
    },
    {
        "content": "<p>so I don't even know if there is a connection to type theory or whatever (not my field of knowledge at all lol)</p>",
        "id": 156632265,
        "sender_full_name": "scalexm",
        "timestamp": 1548185519
    },
    {
        "content": "<p>I recommend reading <a href=\"https://homepages.inf.ed.ac.uk/wadler/papers/quantcc/quantcc.pdf\" target=\"_blank\" title=\"https://homepages.inf.ed.ac.uk/wadler/papers/quantcc/quantcc.pdf\">https://homepages.inf.ed.ac.uk/wadler/papers/quantcc/quantcc.pdf</a></p>",
        "id": 156632316,
        "sender_full_name": "centril",
        "timestamp": 1548185531
    },
    {
        "content": "<p>I would say \"the type S&lt;T&gt; has a witness\"</p>",
        "id": 156632323,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185541
    },
    {
        "content": "<p>or \"has a type instance\", maybe better</p>",
        "id": 156632371,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185587
    },
    {
        "content": "<p>FWIW I find \"legal\" fairly intuitive</p>",
        "id": 156632372,
        "sender_full_name": "tmandry",
        "timestamp": 1548185587
    },
    {
        "content": "<p>\"legal\" doesn't work for me, because it looks legal at first sight, it just happens not to have an instance.</p>",
        "id": 156632403,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185617
    },
    {
        "content": "<p>i.e. it's empty</p>",
        "id": 156632407,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> I think \"legal\" for type/trait/impl declarations is good indeed</p>",
        "id": 156632411,
        "sender_full_name": "scalexm",
        "timestamp": 1548185622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> we're talking about declarations here, e.g. \"is this <code>impl</code> block I wrote legal\"</p>",
        "id": 156632430,
        "sender_full_name": "scalexm",
        "timestamp": 1548185641
    },
    {
        "content": "<p>so maybe <code>NonEmpty</code> works, unless I'm misunderstanding?</p>",
        "id": 156632472,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185645
    },
    {
        "content": "<p>legal is a synonym for well-formed... you haven't changed anything ;)</p>",
        "id": 156632480,
        "sender_full_name": "centril",
        "timestamp": 1548185651
    },
    {
        "content": "<p>I think <strong>legal</strong> is good for the goals that declare whether a declaration is accepted or whether an error is reported.</p>",
        "id": 156632485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> concrete example?</p>",
        "id": 156632503,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185684
    },
    {
        "content": "<p>that's not what I was talking about</p>",
        "id": 156632509,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"nb\">Copy</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"c1\">// This impl is not legal</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156632540,
        "sender_full_name": "scalexm",
        "timestamp": 1548185711
    },
    {
        "content": "<p>today we say \"this impl is not WF\", which I agree is confusing :p</p>",
        "id": 156632550,
        "sender_full_name": "scalexm",
        "timestamp": 1548185722
    },
    {
        "content": "<p>because we already use <code>WellFormed</code> for so many things</p>",
        "id": 156632559,
        "sender_full_name": "scalexm",
        "timestamp": 1548185733
    },
    {
        "content": "<p>ohh that's something else entirely</p>",
        "id": 156632562,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185739
    },
    {
        "content": "<p>I think we're talking about two different things here</p>",
        "id": 156632568,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185744
    },
    {
        "content": "<p>and not just me</p>",
        "id": 156632570,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185747
    },
    {
        "content": "<p>yes, that's the point :)</p>",
        "id": 156632577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185751
    },
    {
        "content": "<p>sorry guys</p>",
        "id": 156632628,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185769
    },
    {
        "content": "<p>I agree \"legal\" is good for that case :-)</p>",
        "id": 156632636,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185777
    },
    {
        "content": "<p>better than \"well-formed\"</p>",
        "id": 156632637,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185780
    },
    {
        "content": "<p>heh, not just you that is confused, never fear =)</p>",
        "id": 156632643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> that's ok, at least we now see how confusing all these <code>WellFormed</code> everywhere are lol</p>",
        "id": 156632655,
        "sender_full_name": "scalexm",
        "timestamp": 1548185794
    },
    {
        "content": "<p>yep!</p>",
        "id": 156632661,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185803
    },
    {
        "content": "<p>so, to bring it back a bit to trait objects:</p>\n<ul>\n<li>we had these where-clauses on the impl because we wanted to ensure that it would meet the <strong>legality</strong> requirements (yay! new terminology)</li>\n<li>but actually they follow from the implied bounds</li>\n</ul>",
        "id": 156632675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185817
    },
    {
        "content": "<p>so my vote is \"witnessed\" or \"instantiated\" for the first meaning, and \"legal\" for that meaning... but do we have a consensus already?</p>",
        "id": 156632694,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185828
    },
    {
        "content": "<p>I do not like either witnessed or instantiated :)</p>",
        "id": 156632707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185837
    },
    {
        "content": "<p>okay</p>",
        "id": 156632727,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185844
    },
    {
        "content": "<p>but I'd rather we discuss that particular bikeshed later :)</p>",
        "id": 156632728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185844
    },
    {
        "content": "<p>I also don't like well-formed, mind you :)</p>",
        "id": 156632733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185854
    },
    {
        "content": "<blockquote>\n<p>In addition to checking the well-formedness of the method type,we ensure that the class context(C1,...,Cn)is also well-formed,extending the environment with the local variablea. In turn, thisimplies thatfv(Ci)⊆ {a}, in line with the Haskell standard.</p>\n<p>Type &amp; Constraint Well-ScopednessThe judgments for well-scopeness of types, constraints and axiom sets are denotedΓ⊢tyσ,Γ⊢ctCandΓ⊢axArespectively. Their definitions are straightforwardand can be found in Appendix A.</p>\n<p>We check the well-formedness of the instance contextAun-der the extended typing environment, and that each superclassconstraintCiis entailed by the instance context.</p>\n</blockquote>",
        "id": 156632737,
        "sender_full_name": "centril",
        "timestamp": 1548185858
    },
    {
        "content": "<p>fair. we'll leave that later</p>",
        "id": 156632742,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185861
    },
    {
        "content": "<p>so... well-formed is standard.</p>",
        "id": 156632746,
        "sender_full_name": "centril",
        "timestamp": 1548185864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> Wadler isn't the oracle though, you know. ;-)</p>",
        "id": 156632755,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185869
    },
    {
        "content": "<p>He is, he invented this stuff we are talking about... =P</p>",
        "id": 156632817,
        "sender_full_name": "centril",
        "timestamp": 1548185891
    },
    {
        "content": "<p>and standard doesn't mean good... though it does mean standard. anyway, we should weigh that against the fact most people who work on the compiler aren't type theorists</p>",
        "id": 156632822,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185894
    },
    {
        "content": "<p>(anyways...)</p>",
        "id": 156632831,
        "sender_full_name": "centril",
        "timestamp": 1548185896
    },
    {
        "content": "<p>I sincerely doubt it. This stuff has been around forever.</p>",
        "id": 156632848,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185906
    },
    {
        "content": "<p>ok, off topic :)</p>",
        "id": 156632874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185921
    },
    {
        "content": "<p>yep</p>",
        "id": 156632879,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185924
    },
    {
        "content": "<p>back to Niko... next topic?</p>",
        "id": 156632913,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548185948
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> it seems like the \"trait object implied bounds\" is another key part</p>",
        "id": 156632919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185952
    },
    {
        "content": "<p>I think the confusion arises from not being clear about what WF is with respect to... e.g. WF type, WF environment, WF super-trait constrants, ...</p>",
        "id": 156632933,
        "sender_full_name": "centril",
        "timestamp": 1548185965
    },
    {
        "content": "<p>but if I'm not mistaken, I don't see the <code>FromEnv</code> rules in your writeup... I must have missed them</p>",
        "id": 156632957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548185997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it's one very small paragraph I think</p>",
        "id": 156633018,
        "sender_full_name": "scalexm",
        "timestamp": 1548186012
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 156633061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548186043
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>FromEnv(dyn Foo&lt;T1...Tk&gt;: Foo&lt;T1...Tk&gt;) :- FromEnv(dyn Foo&lt;T1...Tk&gt;)\n</pre></div>",
        "id": 156633094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548186081
    },
    {
        "content": "<p>(btw if someone wants to know what <code>FromEnv</code> means and basically how implied bounds are supposed to work in the new style trait solver, I wrote a lot of things in the rustc guide, feedback on the understandability of what I wrote is welcome)</p>",
        "id": 156633244,
        "sender_full_name": "scalexm",
        "timestamp": 1548186198
    },
    {
        "content": "<p>I was just re-reading some of that indeed</p>",
        "id": 156633329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548186254
    },
    {
        "content": "<p>to bring it back in cache</p>",
        "id": 156633337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548186260
    },
    {
        "content": "<p>if I read that literally... then it says \"if from the environment, we can assume dyn Foo&lt;T1...Tk&gt; is ????, we can prove that dyn Foo&lt;T1...Tk&gt;: Foo&lt;T1...Tk&gt; is ????\"</p>",
        "id": 156633425,
        "sender_full_name": "centril",
        "timestamp": 1548186340
    },
    {
        "content": "<p>???? = legal?</p>",
        "id": 156633501,
        "sender_full_name": "tmandry",
        "timestamp": 1548186382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> seems like that yeah</p>",
        "id": 156633511,
        "sender_full_name": "scalexm",
        "timestamp": 1548186393
    },
    {
        "content": "<p>valid = WF ?</p>",
        "id": 156633520,
        "sender_full_name": "centril",
        "timestamp": 1548186405
    },
    {
        "content": "<p>oh gosh sorry</p>",
        "id": 156633531,
        "sender_full_name": "tmandry",
        "timestamp": 1548186418
    },
    {
        "content": "<p>I meant \"legal\"</p>",
        "id": 156633545,
        "sender_full_name": "tmandry",
        "timestamp": 1548186428
    },
    {
        "content": "<p>to summarize, I guess:</p>\n<ul>\n<li><code>WellFormed(Ty)</code> -- indicates that a type is \"valid\", meaning that all the where clauses etc on the type are met.</li>\n<li><code>WellFormed(T0: Trait&lt;T1..Tn&gt;)</code> -- indicates that a trait-ref is valid, meaning that it and all of its transitive where clauses are implemented. I'll call this <em>fully implemented</em> for now to distinguish it.</li>\n</ul>\n<p>Applied to this particular case, we are saying that <code>dyn Foo</code> has sort of implied \"where clauses\":</p>\n<ul>\n<li>the trait must be object safe</li>\n<li>the trait reference <code>dyn Foo: Foo</code> must be \"fully implemented\"</li>\n</ul>",
        "id": 156633644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548186523
    },
    {
        "content": "<p>actually, when we do WF checking in chalk (where we produce and check WF goals), is that meaning of WF also covered by \"legal\"?</p>",
        "id": 156633685,
        "sender_full_name": "tmandry",
        "timestamp": 1548186589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> in chalk, <code>src/rules/wf.rs</code> is where we check if trait/type/impl declarations are legal</p>",
        "id": 156633770,
        "sender_full_name": "scalexm",
        "timestamp": 1548186644
    },
    {
        "content": "<p>I am thinking about a few things:</p>\n<ul>\n<li>We should discuss a bit what happens with <code>dyn Foo + Bar</code></li>\n<li>Earlier, I was mentioning that it might be nice to think of extending instead with a true existential type and talking about how we would deal with that in a more \"first-class\" way. I want to try and map that back and forth a bit between these rules still</li>\n</ul>",
        "id": 156633785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548186662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>  and proving that something is legal ends up generating <code>WellFormed(...)</code> goals :)</p>",
        "id": 156633799,
        "sender_full_name": "scalexm",
        "timestamp": 1548186674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> ok. so to clarify, have we decided to rename the <code>WellFormed(...)</code> goal, or not?</p>",
        "id": 156633909,
        "sender_full_name": "tmandry",
        "timestamp": 1548186757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> not yet</p>",
        "id": 156633920,
        "sender_full_name": "scalexm",
        "timestamp": 1548186765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> but we may decide to rename to \"legality checking\" the process that is happening in e.g. <code>src/rules/wf.rs</code> in chalk</p>",
        "id": 156633949,
        "sender_full_name": "scalexm",
        "timestamp": 1548186791
    },
    {
        "content": "<p>okay, thanks, makes sense now.</p>",
        "id": 156633967,
        "sender_full_name": "tmandry",
        "timestamp": 1548186810
    },
    {
        "content": "<blockquote>\n<p>ok. so to clarify, have we decided to rename the <code>WellFormed(...)</code> goal, or not?</p>\n</blockquote>\n<p>I think we have decided to rename it, but not what to rename it <em>to</em></p>",
        "id": 156633981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548186829
    },
    {
        "content": "<p>also, there are really two distinct goals (<code>WellFormed(Ty)</code> and <code>WellFormed(TraitReference)</code>) and likely they should not have the same name</p>",
        "id": 156634033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548186847
    },
    {
        "content": "<p>I'd write <code>WFType(...)</code>, <code>WFConstraint(...)</code>, <code>WFOtherThing(...)</code></p>",
        "id": 156634039,
        "sender_full_name": "centril",
        "timestamp": 1548186854
    },
    {
        "content": "<p>to make it clear what sort of well-formedness we're talking about</p>",
        "id": 156634056,
        "sender_full_name": "centril",
        "timestamp": 1548186874
    },
    {
        "content": "<p>(sure)</p>",
        "id": 156634069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548186888
    },
    {
        "content": "<p>we can spin-off a new channel for bike-shedding</p>",
        "id": 156634082,
        "sender_full_name": "scalexm",
        "timestamp": 1548186903
    },
    {
        "content": "<p>I'm feeling a desire <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> to try and draw up a kind of diagram for implied bounds</p>",
        "id": 156634093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548186906
    },
    {
        "content": "<p>(and object types, to some extent)</p>",
        "id": 156634105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548186925
    },
    {
        "content": "<p>trying to show \"this thing can be assumed to be true\" because \"so and so proves it here\"</p>",
        "id": 156634113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548186934
    },
    {
        "content": "<p>anyway, I probably gotta go, but this was definitely helpful. Re: naming, a separate topic sounds like a good idea</p>",
        "id": 156634209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548186991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I see</p>",
        "id": 156634233,
        "sender_full_name": "scalexm",
        "timestamp": 1548187024
    },
    {
        "content": "<p>that may help indeed, although I'm not sure what said diagram would look like</p>",
        "id": 156634271,
        "sender_full_name": "scalexm",
        "timestamp": 1548187073
    },
    {
        "content": "<p>me either :)</p>",
        "id": 156634360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187139
    },
    {
        "content": "<p>it may prove hard to do</p>",
        "id": 156634363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187142
    },
    {
        "content": "<p>I spun out the <a href=\"#narrow/stream/144729-wg-traits/topic/bikeshedding.20.22well.20formed.22\" title=\"#narrow/stream/144729-wg-traits/topic/bikeshedding.20.22well.20formed.22\">\"bikeshedding well formed\"</a> topic btw</p>",
        "id": 156634380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> just to check, the <a href=\"https://rust-lang.github.io/rustc-guide/traits/lowering-rules.html#lowering-type-definitions\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/traits/lowering-rules.html#lowering-type-definitions\">writeup in the rustc guide</a> suggests that when lowering a struct declaration like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Eq</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>we would make a rule:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">WellFormed</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>:<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Implemented</span><span class=\"p\">(</span><span class=\"n\">T</span>: <span class=\"nb\">Eq</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but actually it's a <em>tad</em> unclear to me, because we write <code>WellFormed(Type&lt;P1..Pn&gt;) :- WC</code> (I guess that here when we \"paste in\" WC we map to <code>Implemented</code>, right?)</p>",
        "id": 156634518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187267
    },
    {
        "content": "<p>(in particular I was wondering if we needed the stronger <code>WellFormed(T: Eq)</code>)</p>",
        "id": 156634546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we need it</p>",
        "id": 156634631,
        "sender_full_name": "scalexm",
        "timestamp": 1548187358
    },
    {
        "content": "<p>Because of the flaw indeed</p>",
        "id": 156634649,
        "sender_full_name": "scalexm",
        "timestamp": 1548187373
    },
    {
        "content": "<p>yes ok I see</p>",
        "id": 156634652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187377
    },
    {
        "content": "<p>well that is mildly gratifying, in that my \"intuition\" was that we likely wanted it, but I can't honestly say why :)</p>",
        "id": 156634705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187413
    },
    {
        "content": "<p>It was just an « optimization » at first, but turns out it was wrong</p>",
        "id": 156634779,
        "sender_full_name": "scalexm",
        "timestamp": 1548187449
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> for the writeup btw =) <span class=\"emoji emoji-2764\" title=\"heart\">:heart:</span></p>",
        "id": 156635008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548187655
    }
]