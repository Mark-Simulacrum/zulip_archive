[
    {
        "content": "<p>So I've been talking to <span class=\"user-mention\" data-user-id=\"362503\">@Yulia Startsev</span> about doing some follow-up work on negative impls. As a starting point, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>, we were discussing reviving <a href=\"https://github.com/rust-lang/rust/pull/74648/\">https://github.com/rust-lang/rust/pull/74648/</a></p>",
        "id": 216876895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536532
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 216876958,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605536567
    },
    {
        "content": "<p>So...</p>",
        "id": 216877098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536643
    },
    {
        "content": "<p>reviewing the PR...</p>",
        "id": 216877145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536650
    },
    {
        "content": "<p>the main idea of <em>this PR</em> was to basically prevent us from adding the kinds of negative impls that the current trait checker doesn't really handle (and which we may never want to support, that's debatable perhaps)</p>",
        "id": 216877216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536695
    },
    {
        "content": "<p>there is some debate about how negative impls + auto traits <em>ought</em> to interact</p>",
        "id": 216877258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536714
    },
    {
        "content": "<p>it seems like the biggest <em>problem</em> with the PR as implemented was diagnostics</p>",
        "id": 216877290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536731
    },
    {
        "content": "<p>I forget how much we talked <span class=\"user-mention\" data-user-id=\"362503\">@Yulia Startsev</span> about the goals of the PR?</p>",
        "id": 216877313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536746
    },
    {
        "content": "<p>Let me echo back what I understood from our discussion..</p>",
        "id": 216877468,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605536812
    },
    {
        "content": "<p>The overall goal is to prevent conditional negative impls, as this is potentially a source of headaches and the problems that it solves can be solved almost entirely without it</p>",
        "id": 216877563,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605536863
    },
    {
        "content": "<p>This pr specifically rejects the ability to have optin builtin traits and negative impls overlap, and moves towards that overall goal</p>",
        "id": 216877700,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605536915
    },
    {
        "content": "<p>Yeah, we just want to sidestep the tricky situations for now. Either a negative impl applies to <em>all instances</em> of a type or none.</p>",
        "id": 216877703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536915
    },
    {
        "content": "<p>(Hmm, it occurs to me that we probably want to forbid negative impls for traits that have multiple input types too, to simplify our lives.)</p>",
        "id": 216877763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536953
    },
    {
        "content": "<p>e.g., we wouldn't want to permit</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216877794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536971
    },
    {
        "content": "<p>we currently have no use for such things :)</p>",
        "id": 216877828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536986
    },
    {
        "content": "<p>(eventually, perhaps)</p>",
        "id": 216877839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536990
    },
    {
        "content": "<p>Is there already a tracking issue for the overall goal?</p>",
        "id": 216877951,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537024
    },
    {
        "content": "<p>The one I have to go off right now is <a href=\"https://github.com/rust-lang/rust/issues/13231\">https://github.com/rust-lang/rust/issues/13231</a></p>",
        "id": 216877973,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537035
    },
    {
        "content": "<p>I don't know, I was wondering that. We should create one.</p>",
        "id": 216877977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537036
    },
    {
        "content": "<p>Yeah, that's not really right.</p>",
        "id": 216878005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537048
    },
    {
        "content": "<p>Well, there is .. hold on...</p>",
        "id": 216878017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537053
    },
    {
        "content": "<p>OK, there is <a href=\"https://github.com/rust-lang/rust/issues/68318\">https://github.com/rust-lang/rust/issues/68318</a></p>",
        "id": 216878142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537106
    },
    {
        "content": "<p>it is going to be need some updating :)</p>",
        "id": 216878150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537110
    },
    {
        "content": "<p>ah! great!</p>",
        "id": 216878220,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537124
    },
    {
        "content": "<p>(I think we can kind of turn it into a proper tracking issue and add it to the lang team project board etc)</p>",
        "id": 216878250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537138
    },
    {
        "content": "<p>cool</p>",
        "id": 216878277,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537157
    },
    {
        "content": "<p>one thing that is not clear to me though is what the overall aims are here :)</p>",
        "id": 216878281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537159
    },
    {
        "content": "<p>I mean I have designs in my head</p>",
        "id": 216878294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537165
    },
    {
        "content": "<p>what I don't know is how far we'll want to push them</p>",
        "id": 216878312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537173
    },
    {
        "content": "<p>Of the work that I would be doing?</p>",
        "id": 216878322,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537176
    },
    {
        "content": "<p>but I think that we can start by writing out the steps and general ways forward and we'll see how far we feel like going</p>",
        "id": 216878346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537188
    },
    {
        "content": "<p>yeah, I mean, to start I think we want to cleanup the code, that is not controversial</p>",
        "id": 216878378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537198
    },
    {
        "content": "<p>if we wanted to go <em>further</em> I think there would be room to write an RFC that tries to make negative impls accessible to users</p>",
        "id": 216878431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537222
    },
    {
        "content": "<p>i.e., outside the stdlib</p>",
        "id": 216878439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537229
    },
    {
        "content": "<p>the current status is a bit \"in between\"</p>",
        "id": 216878509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537246
    },
    {
        "content": "<p>we landed some changes in stdlib that rely on negative impls but I think we're in need of another RFC that writes out the semantics and justification etc</p>",
        "id": 216878589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537276
    },
    {
        "content": "<p>the closest we have is the text from opt-in builtin traits RFC and it is a bit dated</p>",
        "id": 216878706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537328
    },
    {
        "content": "<p>Full disclosure: I do have the selfish goal of getting a masters thesis out of this. So that would involve potentially formally describing the behavior and how it works (the lab is focused around parallelization, and this initial writeup struck me as something that could be expanded: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md\">https://github.com/rust-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md</a>) to enable writing parallelizable code? maybe? (I haven't been able to get in touch with the professor yet on this)</p>",
        "id": 216878728,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537340
    },
    {
        "content": "<p>hmm, I'm not sure how this would effect parallelization</p>",
        "id": 216878770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537361
    },
    {
        "content": "<p>but I'm in favor of people getting theses :)</p>",
        "id": 216878833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537378
    },
    {
        "content": "<p>I guess I was looking specifically at how default traits and negative impls were being used for send and share, but maybe its not so relevant</p>",
        "id": 216879064,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537494
    },
    {
        "content": "<p>well</p>",
        "id": 216879126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537529
    },
    {
        "content": "<p>and this as an alternative for opt-in</p>",
        "id": 216879139,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537534
    },
    {
        "content": "<p>yeah it is connected to rust's parallel story</p>",
        "id": 216879151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537538
    },
    {
        "content": "<p>(i am not attached to this idea)</p>",
        "id": 216879182,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537552
    },
    {
        "content": "<p>If you are looking for parallelization-related ideas, we should discuss, there might be some other things, have to think about it</p>",
        "id": 216879249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537588
    },
    {
        "content": "<p>Well, I can probably find a professor to work with regardless. We can just see how it develops</p>",
        "id": 216879334,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537618
    },
    {
        "content": "<p>I do think that negative impls in general might be a nice scope for a master's thesis though</p>",
        "id": 216879336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537620
    },
    {
        "content": "<p>yeah i think so too. I think I'm also still wrapping my head around it and there might be something more interesting there</p>",
        "id": 216879381,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537641
    },
    {
        "content": "<p>ok, let's put theses aside for now and discuss that privately =) are you interested to try and hack on the PR in any case?</p>",
        "id": 216879435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537672
    },
    {
        "content": "<p>ok</p>",
        "id": 216879439,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537676
    },
    {
        "content": "<p>yes!</p>",
        "id": 216879448,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537681
    },
    {
        "content": "<p>let me get it set up</p>",
        "id": 216879453,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537683
    },
    {
        "content": "<p>I think I will create an issue for this specific change</p>",
        "id": 216879581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537739
    },
    {
        "content": "<p>I don't think one currently exists</p>",
        "id": 216879589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537744
    },
    {
        "content": "<p>oh well I guess that <a href=\"https://github.com/rust-lang/rust/issues/74629\">#74629</a></p>",
        "id": 216879637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537770
    },
    {
        "content": "<p>I'm going to make one anyway :)</p>",
        "id": 216879824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605537853
    },
    {
        "content": "<p>Should an issue also exist for forbidding negative impls for traits that have multiple input types?</p>",
        "id": 216879874,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605537881
    },
    {
        "content": "<p>oke, i have the code... and the buil is failing, i'll see why</p>",
        "id": 216880275,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605538092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"362503\">@Yulia Startsev</span> I created <a href=\"https://github.com/rust-lang/rust/issues/79098\">https://github.com/rust-lang/rust/issues/79098</a></p>",
        "id": 216880308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538112
    },
    {
        "content": "<p>you can do <code>@rustbot claim</code> to claim it</p>",
        "id": 216880329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538119
    },
    {
        "content": "<p>cool</p>",
        "id": 216880655,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605538270
    },
    {
        "content": "<p>you also mentioned that there is cleanup?</p>",
        "id": 216880667,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605538276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"362503\">@Yulia Startsev</span> well this is the first bit of cleanup, I would say</p>",
        "id": 216880948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538386
    },
    {
        "content": "<p>let's start with this and I'll put in a bit of thought into what is the best next step</p>",
        "id": 216881050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538424
    },
    {
        "content": "<p>ok, sounds good</p>",
        "id": 216881201,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605538473
    },
    {
        "content": "<p>did I send you <a href=\"https://hackmd.io/2FYm23s0R-igRnTLaFoo8w\">this hackmd</a>?</p>",
        "id": 216881215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538480
    },
    {
        "content": "<p>hmm looks like no</p>",
        "id": 216881343,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605538535
    },
    {
        "content": "<p>first time i see it</p>",
        "id": 216881351,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605538538
    },
    {
        "content": "<p>ok, I just added a link t the tracking issue</p>",
        "id": 216881371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538553
    },
    {
        "content": "<p>oh wait</p>",
        "id": 216881386,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605538557
    },
    {
        "content": "<p>yes you did</p>",
        "id": 216881391,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605538559
    },
    {
        "content": "<p>that was the writeup I did when we landed preliminary support for negative impls</p>",
        "id": 216881401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538562
    },
    {
        "content": "<p>it kind of sketches out the direction I see this as going in I think</p>",
        "id": 216881463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538572
    },
    {
        "content": "<p>but there are some tricky corners ...</p>",
        "id": 216881528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538606
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> read this discussion and the hackmd</p>",
        "id": 216881622,
        "sender_full_name": "lcnr",
        "timestamp": 1605538650
    },
    {
        "content": "<p>thanks for <span class=\"user-mention silent\" data-user-id=\"362503\">Yulia Startsev</span> for picking up <a href=\"https://github.com/rust-lang/rust/issues/74648\">#74648</a>, I think I wanted to pretty much refactor this PR to move all possible types into the path we currently use for <code>ty::Adt</code> so that we can reuse the existing infrastructure and don't have to add any new code to fix the open review comments by <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span></p>",
        "id": 216881931,
        "sender_full_name": "lcnr",
        "timestamp": 1605538771
    },
    {
        "content": "<p>though it's probably fine to solve this differently as I haven't tried doing so myself <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 216881974,
        "sender_full_name": "lcnr",
        "timestamp": 1605538791
    },
    {
        "content": "<p>re <a href=\"https://hackmd.io/2FYm23s0R-igRnTLaFoo8w#Permit-T-Trait-where-clauses\">https://hackmd.io/2FYm23s0R-igRnTLaFoo8w#Permit-T-Trait-where-clauses</a></p>\n<p>doesn't this once again have weird isses because of static lifetimes?</p>",
        "id": 216882107,
        "sender_full_name": "lcnr",
        "timestamp": 1605538836
    },
    {
        "content": "<p>I don't think so, but you have to understand what I had in mind there</p>",
        "id": 216882237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538891
    },
    {
        "content": "<p>the idea is quite different from what chalk implements as <code>not { G }</code> goals</p>",
        "id": 216882274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538908
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">!</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216882298,
        "sender_full_name": "lcnr",
        "timestamp": 1605538918
    },
    {
        "content": "<p>the idea would be that you can only prove <code>T: !Trait</code> if you can find some negative impl</p>",
        "id": 216882301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538919
    },
    {
        "content": "<p>so e.g. it would not be provable in that case</p>",
        "id": 216882367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538931
    },
    {
        "content": "<p>but if you have a <code>impl !Foo for &amp;'static u32 { }</code>, it would be</p>",
        "id": 216882393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538940
    },
    {
        "content": "<p><del>well, sorry, it wouldn't be</del></p>",
        "id": 216882405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538948
    },
    {
        "content": "<p>I'm not being very clear about what \"it\" is</p>",
        "id": 216882454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538973
    },
    {
        "content": "<p>in any case the semantics would be roughly the same as if you had defined two traits</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">NotFoo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and <code>T: !Foo</code> were translated to <code>T: NotFoo</code></p>",
        "id": 216882529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605538998
    },
    {
        "content": "<p>the main difference would be that coherence would guarantee that <code>Foo</code> and <code>NotFoo</code> impls cannot overlap</p>",
        "id": 216882557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605539012
    },
    {
        "content": "<p>in your example above there are no explicit negative impls, so <code>!Foo</code> would never be provable</p>",
        "id": 216882629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605539041
    },
    {
        "content": "<p>ah yeah <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 216882763,
        "sender_full_name": "lcnr",
        "timestamp": 1605539079
    },
    {
        "content": "<p>what does \"no explicit negative impls\" mean? I would have expected <code>impl&lt;T: !Foo&gt; Bar for T {}</code> to be explicit, but clearly it isn't</p>",
        "id": 216882891,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605539133
    },
    {
        "content": "<p>you have to explicitly implement \"not Foo\" or \"!Foo\", so <code>impl&lt;T&gt; !Foo for T {}</code> would be an explicit impl</p>",
        "id": 216883008,
        "sender_full_name": "lcnr",
        "timestamp": 1605539176
    },
    {
        "content": "<p>iiuc</p>",
        "id": 216883016,
        "sender_full_name": "lcnr",
        "timestamp": 1605539180
    },
    {
        "content": "<p>Got it</p>",
        "id": 216883025,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605539182
    },
    {
        "content": "<p>yes</p>",
        "id": 216883296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605539288
    },
    {
        "content": "<p>one way to think about this is</p>",
        "id": 216883300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605539291
    },
    {
        "content": "<p>from the lens of semver</p>",
        "id": 216883315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605539300
    },
    {
        "content": "<p>if you haven't declared whether <code>Foo</code> is implemented or not</p>",
        "id": 216883330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605539308
    },
    {
        "content": "<p>you may want to \"reserve the right\" to add an impl later</p>",
        "id": 216883345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605539315
    },
    {
        "content": "<p>but if we allow <code>T: !Foo</code> to be considered true just beacuse you haven't written an impl <em>yet</em>, does that make sense?</p>",
        "id": 216883390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605539334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls/near/216881528\">said</a>:</p>\n<blockquote>\n<p>but there are some tricky corners ...</p>\n</blockquote>\n<p>this gets into the tricky corners though, as we currently <em>do</em> permit some amount of negative reasoning, but only \"intra crate\"</p>",
        "id": 216883445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605539359
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rfcs/1023-rebalancing-coherence.html\">RFC 1023</a> talks about this, along with <a href=\"https://rust-lang.github.io/rfcs/2451-re-rebalancing-coherence.html\">RFC 2451</a></p>",
        "id": 216883520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605539402
    },
    {
        "content": "<p>ideally we'd subsume these nicely together</p>",
        "id": 216883571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605539410
    },
    {
        "content": "<p>I have a bit of reading to do it looks like</p>",
        "id": 216884561,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605539815
    },
    {
        "content": "<p>I guess, as next steps what I will do is see if i can address the comments on 74648? is that a good place to start?</p>",
        "id": 216884636,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605539855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls/near/216881931\">said</a>:</p>\n<blockquote>\n<p>thanks for <span class=\"user-mention silent\" data-user-id=\"362503\">Yulia Startsev</span> for picking up <a href=\"https://github.com/rust-lang/rust/issues/74648\">#74648</a>, I think I wanted to pretty much refactor this PR to move all possible types into the path we currently use for <code>ty::Adt</code> so that we can reuse the existing infrastructure and don't have to add any new code to fix the open review comments by <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span></p>\n</blockquote>\n<p>i think so, yeah. Either by trying what i recommended above or by copying some code <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I think adding a special-case for <code>Sized</code> is probably easier for now</p>",
        "id": 216884877,
        "sender_full_name": "lcnr",
        "timestamp": 1605539958
    },
    {
        "content": "<p>ok, that is what i will look into this week then</p>",
        "id": 216885043,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1605540042
    },
    {
        "content": "<p>So, I understand where you are coming from regarding not supporting <code>!Foo</code> as absence of <code>Foo</code>, but how would I achieve <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20bounds/near/216799475\">this scenario</a>? This was the second time I wanted something like that in one my libraries</p>",
        "id": 216968518,
        "sender_full_name": "pksunkara",
        "timestamp": 1605591814
    },
    {
        "content": "<p>A quick update here, I have the work that lcnr did rebased and working, now I am doing the suggested refactoring and trying to wrap my head around it</p>",
        "id": 218111355,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606495998
    },
    {
        "content": "<p>sorry its taking a while (coding during vacation is a bit hard)</p>",
        "id": 218111365,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606496011
    },
    {
        "content": "<p>oh geez, rust is indexed by search fox. 1) thank goodness, 2) i wish i realized sooner</p>",
        "id": 218160427,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606563421
    },
    {
        "content": "<p>ok so dumb question, lcnr -- is the goal in sharing the code with the adt code path _primarily_ to solve the T: sized issue? so applying mostly to slice and Array? Or am I missing a comment somewhere?</p>",
        "id": 218161078,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606564530
    },
    {
        "content": "<p>i think so</p>",
        "id": 218161275,
        "sender_full_name": "lcnr",
        "timestamp": 1606564813
    },
    {
        "content": "<p>maybe it is easier to only check for sized and move these error messages into a separate method if they aren't already?</p>",
        "id": 218161301,
        "sender_full_name": "lcnr",
        "timestamp": 1606564907
    },
    {
        "content": "<p>ok so <span class=\"user-mention\" data-user-id=\"362503\">@Yulia Startsev</span> ..</p>",
        "id": 218291382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606745835
    },
    {
        "content": "<p>This morning Niko and I are looking over this again. I didn't get any further than when I asked the above question. Basically, where i am stuck is what the next step should look like</p>",
        "id": 218291398,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606745843
    },
    {
        "content": "<p>hi</p>",
        "id": 218291406,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606745849
    },
    {
        "content": "<p>ok so I'm looking a bit more at the PR now</p>",
        "id": 218291464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606745878
    },
    {
        "content": "<p>so you asked about the comments like</p>",
        "id": 218291551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606745906
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>         // FIXME: Support negative impls for `[T; N]` where `T: Sized` is the only predicate.\n</code></pre></div>\n\n</blockquote>",
        "id": 218291561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606745910
    },
    {
        "content": "<p>part of this is that a type like <code>[T]</code> is only well-formed if <code>T: Sized</code></p>",
        "id": 218291589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606745928
    },
    {
        "content": "<p>so I imagine that is why we <em>want</em> to support such negative impls</p>",
        "id": 218291650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606745966
    },
    {
        "content": "<p>so that people can write <code>impl&lt;T&gt; !Foo for [T]</code></p>",
        "id": 218291676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606745977
    },
    {
        "content": "<p>(hmm, there is an interesting semver interaction I hadn't considered...)</p>",
        "id": 218291691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606745988
    },
    {
        "content": "<p>if we permit negative impls in arbitrary code</p>",
        "id": 218291756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746005
    },
    {
        "content": "<p>and we require that negative impls match the WF clauses on a type exactly</p>",
        "id": 218291767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746013
    },
    {
        "content": "<p>then if you have a type like <code>struct MyType&lt;T: Ord&gt;</code> and you change it to <code>struct MyType&lt;T&gt;</code></p>",
        "id": 218291808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746034
    },
    {
        "content": "<p>some downstream crate could have <code>impl&lt;T: Ord&gt; !Trait for MyType&lt;T&gt;</code>, which would become an error</p>",
        "id": 218291843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746053
    },
    {
        "content": "<p>(this is related to implied bounds, which -- in some incarnations -- would also make that an error)</p>",
        "id": 218291887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls/near/218291676\">said</a>:</p>\n<blockquote>\n<p>so that people can write <code>impl&lt;T&gt; !Foo for [T]</code></p>\n</blockquote>\n<p>note that there is an implied <code>T: Sized</code> bound here</p>",
        "id": 218291921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls/near/218291589\">said</a>:</p>\n<blockquote>\n<p>part of this is that a type like <code>[T]</code> is only well-formed if <code>T: Sized</code></p>\n</blockquote>\n<p>are you familiar with the phrase \"well-formed\", <span class=\"user-mention\" data-user-id=\"362503\">@Yulia Startsev</span>?</p>",
        "id": 218291942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746108
    },
    {
        "content": "<p>not as well as i would like to be, i guess this is what \"WF\" stands for earlier?</p>",
        "id": 218292031,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606746146
    },
    {
        "content": "<p>yes</p>",
        "id": 218292076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746177
    },
    {
        "content": "<p>it just means that the type is \"valid\", so to speak</p>",
        "id": 218292097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746185
    },
    {
        "content": "<p>ok, that fits with what i thought it would mean</p>",
        "id": 218292135,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606746205
    },
    {
        "content": "<p>i also have another question, just to help with my reading of the code</p>",
        "id": 218292160,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606746214
    },
    {
        "content": "<p>so if you have <code>struct MyType&lt;T: Ord&gt;</code>, then <code>MyType&lt;X&gt;</code> is only valid if <code>X: Ord</code></p>",
        "id": 218292165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746220
    },
    {
        "content": "<p>would you read <code>impl&lt;T&gt; !Foo for [T]</code> as \"Implement 'not-foo' by default for all types\"? is that the right reading?</p>",
        "id": 218292259,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606746261
    },
    {
        "content": "<p>I would read that as \"<code>Foo</code> will never be implemented for <code>[T]</code> for any <code>T</code>\"</p>",
        "id": 218292299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746288
    },
    {
        "content": "<p>ok</p>",
        "id": 218292352,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606746310
    },
    {
        "content": "<p>i.e., for no slice types</p>",
        "id": 218292371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746318
    },
    {
        "content": "<p>that makes sense, i tripped on the syntax</p>",
        "id": 218292399,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606746338
    },
    {
        "content": "<p>ok, back to the question at hand -- this probably has an impact on semver?</p>",
        "id": 218292489,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606746370
    },
    {
        "content": "<p>yes, well, if we were to stabilize negative impls with the rule that they must match the WF rules for their type exactly</p>",
        "id": 218292577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746417
    },
    {
        "content": "<p>and using the \"obvious\" coherence rules (i.e., you can write a <code>impl !Foo</code> for some set of types iff yuo can write <code>impl Foo</code> for those same types)</p>",
        "id": 218292635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746442
    },
    {
        "content": "<p>(which makes sense -- if you are the one permitted to implement the trait, you are also permitted to promise never to do so)</p>",
        "id": 218292665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746456
    },
    {
        "content": "<p>then there would be a semver implication</p>",
        "id": 218292688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746465
    },
    {
        "content": "<p>this is not necessarily a problem</p>",
        "id": 218292788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746499
    },
    {
        "content": "<p>but it is interesting and something I hadn't considered before</p>",
        "id": 218292795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746506
    },
    {
        "content": "<p>in the long run I don't see any reason to restrict what kinds of negative impls one can write</p>",
        "id": 218292842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746534
    },
    {
        "content": "<p>ok, that makes sense</p>",
        "id": 218292866,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606746546
    },
    {
        "content": "<p>it's worth revisiting <em>why</em> I wanted to impose these rules</p>",
        "id": 218292964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746597
    },
    {
        "content": "<p>I think that it was <em>mainly</em> because of non-obvious semantics with auto traits</p>",
        "id": 218293022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746607
    },
    {
        "content": "<p>that is, people might have a type like <code>struct Foo&lt;T&gt; { }</code> and then write <code>impl&lt;T: Ord&gt; !Send for Foo&lt;T&gt;</code></p>",
        "id": 218293087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746634
    },
    {
        "content": "<p>and it would raise the question: does that mean that <code>Foo&lt;T&gt;: Send</code> unless <code>T: Ord</code>?</p>",
        "id": 218293114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746649
    },
    {
        "content": "<p>the way the current code works, it does not, it means effectively that <code>Foo&lt;T&gt;</code> is never <code>Send</code></p>",
        "id": 218293142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746663
    },
    {
        "content": "<p>because the negative impl \"turns off\" the default impl we would otherwise have provided completely</p>",
        "id": 218293175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746678
    },
    {
        "content": "<p>similaly if you write <code>unsafe impl Send for Foo&lt;u32&gt;</code>, that means (today) that <code>Foo&lt;u32&gt;</code> is the only type which is <code>Send</code>, because the default (automatic) impl is suppressed</p>",
        "id": 218293218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746708
    },
    {
        "content": "<p>(the latter is I think stable...)</p>",
        "id": 218293224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746715
    },
    {
        "content": "<p>interesting. i would have expected the first outcome</p>",
        "id": 218293293,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606746737
    },
    {
        "content": "<p>a lot of people expect that</p>",
        "id": 218293311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746749
    },
    {
        "content": "<p>this is partly why I wanted to sidestep the question by just not permitted the impl in question</p>",
        "id": 218293405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746798
    },
    {
        "content": "<p>an interesting point though is that this applies <em>only</em> to auto traits</p>",
        "id": 218293428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746805
    },
    {
        "content": "<p>(which themselves are a non-stable mechanism)</p>",
        "id": 218293465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746819
    },
    {
        "content": "<p>this is partly interesting because maybe we would only need this limitation <em>for</em> auto traits</p>",
        "id": 218293491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746834
    },
    {
        "content": "<p>this would, at least temporarily, sidestep the semver concerns</p>",
        "id": 218293518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746844
    },
    {
        "content": "<p>since all auto traits are declared in the stdlib</p>",
        "id": 218293551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls/near/218293218\">said</a>:</p>\n<blockquote>\n<p>similaly if you write <code>unsafe impl Send for Foo&lt;u32&gt;</code>, that means (today) that <code>Foo&lt;u32&gt;</code> is the only type which is <code>Send</code>, because the default (automatic) impl is suppressed</p>\n</blockquote>\n<p>i don't think this is the case <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fad4a98a4e99a834b770a06cd318690a\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fad4a98a4e99a834b770a06cd318690a</a></p>",
        "id": 218293586,
        "sender_full_name": "lcnr",
        "timestamp": 1606746866
    },
    {
        "content": "<p>but if i make sense of it, it reminds you that you described <code>!Foo</code> as being sort of like <code>NotFoo</code> (basically, a regular impl) and that would be an implementation... if i understand correctly, having a regular implementation would override the default implementations? If we stop talking about negative implementations that is</p>",
        "id": 218293599,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606746871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls/near/218293586\">said</a>:</p>\n<blockquote>\n<p>i don't think this is the case <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fad4a98a4e99a834b770a06cd318690a\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fad4a98a4e99a834b770a06cd318690a</a></p>\n</blockquote>\n<p>oh, interesting</p>",
        "id": 218293637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746890
    },
    {
        "content": "<p>hmm :)</p>",
        "id": 218293643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746894
    },
    {
        "content": "<p>i don't know if that is the right mental model though</p>",
        "id": 218293649,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606746896
    },
    {
        "content": "<p>I was just going to go test that to make sure what I was saying was true</p>",
        "id": 218293688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746915
    },
    {
        "content": "<p>well, that changes things</p>",
        "id": 218293693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746918
    },
    {
        "content": "<p>I guess somehow the impl changed at some point :)</p>",
        "id": 218293703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746925
    },
    {
        "content": "<p>/me wonders if we don't have tests around this</p>",
        "id": 218293717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746936
    },
    {
        "content": "<p>you can use <code>Send</code> to implement overlapping impls on stable (<a href=\"https://twitter.com/lcnr7/status/1295361144564207617\">https://twitter.com/lcnr7/status/1295361144564207617</a>)</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/lcnr7/status/1295361144564207617\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1243258148368064518/oXqxwD9M_normal.png\"></a><p>type level maps are actually possible in stable rust <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span>\n\n<a href=\"https://t.co/1sqYcaARfh\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bc59202b698e458f98dc5f7eb9e98741</a> <a href=\"https://t.co/HR89UHJiaa\">https://twitter.com/lcnr7/status/1295361144564207617/photo/1</a></p><span>- lcnr (@lcnr7)</span><div class=\"twitter-image\"><a href=\"https://t.co/HR89UHJiaa\"><img src=\"https://pbs.twimg.com/media/EfoLTkTWAAUAh7q.jpg:thumb\"></a></div></div></div>",
        "id": 218293730,
        "sender_full_name": "lcnr",
        "timestamp": 1606746941
    },
    {
        "content": "<p>well, that means what I wrote above is wrong with respect to positive impls, which is perhaps not a bad thing</p>",
        "id": 218293857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606746996
    },
    {
        "content": "<p>though I personally .. hmm</p>",
        "id": 218293875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747008
    },
    {
        "content": "<p>I guess I find both behaviors surprising in their own way :)</p>",
        "id": 218293893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747020
    },
    {
        "content": "<p>on the one hand, if I see <em>any</em> impls, it surprises me not to see <em>all</em> of them</p>",
        "id": 218293969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747053
    },
    {
        "content": "<p>on the other, it is surprising to have the default impl disappear</p>",
        "id": 218294123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747120
    },
    {
        "content": "<p>that said, it implies that negative impls are \"specializing\" the default impl</p>",
        "id": 218294151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747133
    },
    {
        "content": "<p>which isn't really a valid interpretation</p>",
        "id": 218294165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747139
    },
    {
        "content": "<p>urg. im falling behind a bit</p>",
        "id": 218294205,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747156
    },
    {
        "content": "<p>sorry, I'm thinking out loud a bit</p>",
        "id": 218294234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747165
    },
    {
        "content": "<p>in the example that lcnr posted, you would have expected that to not compile, is that right?</p>",
        "id": 218294251,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747173
    },
    {
        "content": "<p>based on what I wrote above, yes</p>",
        "id": 218294275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747183
    },
    {
        "content": "<p>ok, good im followingg again</p>",
        "id": 218294290,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747189
    },
    {
        "content": "<p>at some point I had a model of how auto traits should work where the idea was that <em>if</em> you wrote any impl (positive or negative), the default impl was suppressed</p>",
        "id": 218294363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747204
    },
    {
        "content": "<p>but that no longer matches the impl, for better or worse</p>",
        "id": 218294377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747211
    },
    {
        "content": "<p>heh maybe it never did</p>",
        "id": 218294407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747222
    },
    {
        "content": "<p>and that would be suppressed for all types?</p>",
        "id": 218294483,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747252
    },
    {
        "content": "<p>that said</p>",
        "id": 218294525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747270
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(negative_impls)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span>::<span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this seems to compile too</p>",
        "id": 218294542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747282
    },
    {
        "content": "<p>yeah, but type inference is now broken</p>",
        "id": 218294570,
        "sender_full_name": "lcnr",
        "timestamp": 1606747298
    },
    {
        "content": "<p>because of <code>auto \\ neg-impl</code></p>",
        "id": 218294594,
        "sender_full_name": "lcnr",
        "timestamp": 1606747310
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/74383\">#74383</a></p>",
        "id": 218294703,
        "sender_full_name": "lcnr",
        "timestamp": 1606747343
    },
    {
        "content": "<p>i.e., if we do <code>test::&lt;Foo&lt;_&gt;&gt;</code>, then the <code>_</code> gets inferred to <code>u8</code>?</p>",
        "id": 218294719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747350
    },
    {
        "content": "<p>yes ok</p>",
        "id": 218294768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747376
    },
    {
        "content": "<p>ok so <span class=\"user-mention\" data-user-id=\"362503\">@Yulia Startsev</span> basically everything I wrote above was wrong :)</p>",
        "id": 218294799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747386
    },
    {
        "content": "<p>i think so, or much rather, we look at the negative impl and think that <code>Foo&lt;_&gt;</code> is not implemented</p>",
        "id": 218294804,
        "sender_full_name": "lcnr",
        "timestamp": 1606747389
    },
    {
        "content": "<p>which affects what I think is the correct course of action somewhat</p>",
        "id": 218294819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747395
    },
    {
        "content": "<p>huh, neat</p>",
        "id": 218294862,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747418
    },
    {
        "content": "<p>(though this also means that the way chalk models auto traits is wrong)</p>",
        "id": 218294961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747445
    },
    {
        "content": "<p>(but that should be fixable)</p>",
        "id": 218294984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747454
    },
    {
        "content": "<p>(actually it's probably <em>easier</em>)</p>",
        "id": 218295023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747467
    },
    {
        "content": "<p>ohh cool, i didn't realize what chalk was</p>",
        "id": 218295072,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747490
    },
    {
        "content": "<p>thats really neat</p>",
        "id": 218295076,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747492
    },
    {
        "content": "<p>wow, this is amazing but also a tiny bit overwhelming</p>",
        "id": 218295290,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747567
    },
    {
        "content": "<p>yeah, that's ok, I'm pondering a bit</p>",
        "id": 218295308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747578
    },
    {
        "content": "<p>I thikn I need to go look at the impl again</p>",
        "id": 218295318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747585
    },
    {
        "content": "<p>one option might be to investigate and/or fix the type inference behavior</p>",
        "id": 218295337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747598
    },
    {
        "content": "<p>can i look as well? do you mean the implementation of impl in rustlang or something else?</p>",
        "id": 218295350,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747605
    },
    {
        "content": "<p>I meant the impl in rust-lang</p>",
        "id": 218295376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747614
    },
    {
        "content": "<p>yeah I mean I think it could be useful to go look at what happens in the examples above and why they come out as true</p>",
        "id": 218295413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747628
    },
    {
        "content": "<p>I can sort of imagine but I want to refresh my memory, we could look at it a bit together if you wanted</p>",
        "id": 218295443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747643
    },
    {
        "content": "<p>I guess that based on this another wya forward would be to <strong>not</strong> put limits on negative impls but just permit them</p>",
        "id": 218295475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747665
    },
    {
        "content": "<p>I will hit my timebox for today in a few minutes, but if you ccome up with some interesting examples of things that should or shouldn't work</p>",
        "id": 218295498,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747679
    },
    {
        "content": "<p>and instead look into some of the things we might <em>do with them</em></p>",
        "id": 218295518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747683
    },
    {
        "content": "<p>i can also poke around and see if i can make sense of them</p>",
        "id": 218295550,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747688
    },
    {
        "content": "<p>right, maybe one thing might be to take a look at how negative impls might or might not be used...</p>",
        "id": 218295596,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747710
    },
    {
        "content": "<p>(e.g., integrating them a bit into coherence checking, that was one of my main interests)</p>",
        "id": 218295602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747712
    },
    {
        "content": "<p>I'd like to permit <code>impl&lt;T: Copy&gt; Foo for T</code> and <code>impl&lt;T&gt; Foo for Box&lt;T&gt;</code>, which today doesn't work</p>",
        "id": 218295634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747727
    },
    {
        "content": "<p>the idea would be to have <code>impl !Copy for Box&lt;T&gt;</code></p>",
        "id": 218295650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls/near/218295337\">said</a>:</p>\n<blockquote>\n<p>one option might be to investigate and/or fix the type inference behavior</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> i think i already tried this in <a href=\"https://github.com/rust-lang/rust/issues/74525\">#74525</a></p>",
        "id": 218295657,
        "sender_full_name": "lcnr",
        "timestamp": 1606747738
    },
    {
        "content": "<p>yeah I thought you might've</p>",
        "id": 218295705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747762
    },
    {
        "content": "<p>which might be a good starting point if we want to go this way</p>",
        "id": 218295707,
        "sender_full_name": "lcnr",
        "timestamp": 1606747763
    },
    {
        "content": "<p>that said <a href=\"https://github.com/rust-lang/rust/pull/74525/files#r457465014\">this comment of mine</a> seems to be wrong</p>",
        "id": 218295756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747782
    },
    {
        "content": "<p>(factually)</p>",
        "id": 218295776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747788
    },
    {
        "content": "<p>I'm still of slightly mixed minds about what semantics we <em>want</em>, but the stable semantics for positive impls kind of pushes us in one direction it seems</p>",
        "id": 218295857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747805
    },
    {
        "content": "<p>so I think that the big issue is that if we keep auto impls if negative ones don't apply</p>",
        "id": 218295912,
        "sender_full_name": "lcnr",
        "timestamp": 1606747827
    },
    {
        "content": "<p>(hmm of and if we stabilize <code>!</code>, can we remove reservation impls?)</p>",
        "id": 218295981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747849
    },
    {
        "content": "<p>we end up with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218295995,
        "sender_full_name": "lcnr",
        "timestamp": 1606747856
    },
    {
        "content": "<p>yeah this is the \"specialization\" considerations I was talking about</p>",
        "id": 218296059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747879
    },
    {
        "content": "<p>I guess we got distracted from going too far down that road</p>",
        "id": 218296114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"362503\">@Yulia Startsev</span> sorry looks like we opened a bit of a pandora's box here :) but we can talk about it next week some more perhaps</p>",
        "id": 218296171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747921
    },
    {
        "content": "<p>ok, that sounds good</p>",
        "id": 218296263,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/negative.20impls/near/218296059\">said</a>:</p>\n<blockquote>\n<p>yeah this is the \"specialization\" considerations I was talking about</p>\n</blockquote>\n<p>that said, this is only an issue for auto traits</p>",
        "id": 218296269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747946
    },
    {
        "content": "<p>i think for now i am a bit stuck in terms of what i should do next</p>",
        "id": 218296297,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747955
    },
    {
        "content": "<p>the answer might be to have some limits on what kinds of impls we permit on auto traits</p>",
        "id": 218296322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747962
    },
    {
        "content": "<p>yeah, I'm not sure the best next step yet</p>",
        "id": 218296393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747990
    },
    {
        "content": "<p>right now i have a working implementation of lcnr's patch, and a partially refactored one to make use of the adt code for slice and array, but the rest stayed more or less the same</p>",
        "id": 218296400,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606747993
    },
    {
        "content": "<p>reading a bit into trait selection is an option</p>",
        "id": 218296418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606747997
    },
    {
        "content": "<p>I think there is some coverage in the rustc-dev-guide</p>",
        "id": 218296445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606748008
    },
    {
        "content": "<p>i can keep working on that, or i can collect \"all possible world\" for negative impls interacting with things?</p>",
        "id": 218296474,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606748020
    },
    {
        "content": "<p>ill do that reading</p>",
        "id": 218296669,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606748070
    },
    {
        "content": "<p>OK, I need to switch back to my other stuff, I will find time during the week to do that reading then!</p>",
        "id": 218297369,
        "sender_full_name": "Yulia Startsev",
        "timestamp": 1606748342
    }
]