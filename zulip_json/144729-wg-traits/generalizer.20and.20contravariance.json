[
    {
        "content": "<p>can someone explain me why using <code>sub</code> is correct here, even if we are in a contravariant context? <a href=\"https://github.com/rust-lang/rust/blob/903427b2e807cb1292388940b3f44f3b061cfebf/compiler/rustc_infer/src/infer/combine.rs#L654\">https://github.com/rust-lang/rust/blob/903427b2e807cb1292388940b3f44f3b061cfebf/compiler/rustc_infer/src/infer/combine.rs#L654</a></p>",
        "id": 276642158,
        "sender_full_name": "lcnr",
        "timestamp": 1648224676
    },
    {
        "content": "<p>might have forgotten some context here '^^</p>",
        "id": 276642226,
        "sender_full_name": "lcnr",
        "timestamp": 1648224704
    },
    {
        "content": "<p>going to look at this more next week</p>",
        "id": 276642250,
        "sender_full_name": "lcnr",
        "timestamp": 1648224715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I don't believe that is \"directed\"</p>",
        "id": 276668515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648236861
    },
    {
        "content": "<p>we maintain two unification relations</p>",
        "id": 276668527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648236865
    },
    {
        "content": "<p>one for things that equated</p>",
        "id": 276668539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648236873
    },
    {
        "content": "<p>and one where <code>A</code> is unified with <code>B</code> if <code>A &lt;= B</code> or <code>B &lt;= A</code></p>",
        "id": 276668581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648236897
    },
    {
        "content": "<p>Well, I think for this the ambient variance does get taken into account?</p>",
        "id": 276668622,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648236912
    },
    {
        "content": "<p>I believe that call to <code>sub</code> is adding something to that second one</p>",
        "id": 276668623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648236912
    },
    {
        "content": "<p>let me check</p>",
        "id": 276668644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648236925
    },
    {
        "content": "<p>But this also just might be for cycles</p>",
        "id": 276668747,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648236968
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// Records that `a &lt;: b`, depending on `dir`.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Precondition: neither `a` nor `b` are known.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">ty</span>::<span class=\"n\">TyVid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">ty</span>::<span class=\"n\">TyVid</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">debug_assert!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">probe</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">).</span><span class=\"n\">is_unknown</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">debug_assert!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">probe</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">).</span><span class=\"n\">is_unknown</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">sub_relations</span><span class=\"p\">().</span><span class=\"k\">union</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276668780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648236983
    },
    {
        "content": "<p>yeah, this is just for cycles</p>",
        "id": 276668793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648236987
    },
    {
        "content": "<p>ah, interesting that we record this separately from normal subtyping relations <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> want to take the time to learn more about that next week</p>",
        "id": 276669800,
        "sender_full_name": "lcnr",
        "timestamp": 1648237569
    }
]