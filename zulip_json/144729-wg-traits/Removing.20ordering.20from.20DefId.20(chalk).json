[
    {
        "content": "<p>I'm really starting to think this isn't correct: <a href=\"https://github.com/rust-lang/chalk/pull/739/files#diff-ba814a8e084488bce444bd626693c6c99786b7be83fc1f0f05c51853e0fb96deR119\">https://github.com/rust-lang/chalk/pull/739/files#diff-ba814a8e084488bce444bd626693c6c99786b7be83fc1f0f05c51853e0fb96deR119</a></p>",
        "id": 265235716,
        "sender_full_name": "pierwill",
        "timestamp": 1639697959
    },
    {
        "content": "<p>Based on? The failing test?</p>",
        "id": 265235819,
        "sender_full_name": "Jack Huey",
        "timestamp": 1639698037
    },
    {
        "content": "<p>Try adding <code>disable_coherence;</code> to the test</p>",
        "id": 265235866,
        "sender_full_name": "Jack Huey",
        "timestamp": 1639698093
    },
    {
        "content": "<p>I think something like this might be needed to make it correct:</p>\n<div class=\"codehilite\"><pre><span></span><code>        // Find all specializations (implemented in coherence/solve)\n        // Record them in the forest by adding an edge from the less special\n        // to the more special.\n        self.visit_specializations_of_trait(|less_special, more_special| {\n            let node_impls: Vec&lt;ImplId&lt;_&gt;&gt; = forest.raw_nodes().iter().map(|x| x.weight).collect();\n\n            match (\n                node_impls.contains(&amp;less_special),\n                node_impls.contains(&amp;more_special),\n            ) {\n                (true, true) =&gt; {\n                    // get an identifier for existing node for less_special\n                    // get an identifier for existing node for more_special\n                    // make sure there&#39;s an edge connecting them\n                }\n                (true, false) =&gt; {\n                    // get an identifier for existing node for less_special\n                    // add node for more_special\n                    // make sure there&#39;s an edge connecting them\n                }\n                (false, true) =&gt; {\n                    // add node for less_special\n                    // get an identifier for existing node for more_special\n                    // make sure there&#39;s an edge connecting them\n                }\n                (false, false) =&gt; {\n                    // add both modes and make edge\n                }\n            };\n        })?;\n\n        Ok(forest)\n</code></pre></div>",
        "id": 265236107,
        "sender_full_name": "pierwill",
        "timestamp": 1639698288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Removing.20ordering.20from.20DefId.20.28chalk.29/near/265235866\">said</a>:</p>\n<blockquote>\n<p>Try adding <code>disable_coherence;</code> to the test</p>\n</blockquote>\n<p>will try</p>",
        "id": 265236194,
        "sender_full_name": "pierwill",
        "timestamp": 1639698337
    },
    {
        "content": "<p>Previously the code above used a <a href=\"https://docs.rs/petgraph/latest/petgraph/graphmap/struct.GraphMap.html\">GraphMap</a>, which required <code>Ord</code> on the node types. It ensured there weren't duplicates and that edges were added properly. Now that we use <a href=\"https://docs.rs/petgraph/latest/petgraph/graph/struct.Graph.html\">https://docs.rs/petgraph/latest/petgraph/graph/struct.Graph.html</a>, I think we'll need logic like the above to ensure correctness.</p>",
        "id": 265236432,
        "sender_full_name": "pierwill",
        "timestamp": 1639698488
    },
    {
        "content": "<p>But I might be wrong/overthinking it....</p>",
        "id": 265236446,
        "sender_full_name": "pierwill",
        "timestamp": 1639698506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Removing.20ordering.20from.20DefId.20.28chalk.29/near/265236194\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Removing.20ordering.20from.20DefId.20.28chalk.29/near/265235866\">said</a>:</p>\n<blockquote>\n<p>Try adding <code>disable_coherence;</code> to the test</p>\n</blockquote>\n<p>will try</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code>test::unsize::dyn_to_dyn_unsizing still fails with `disable coherence`\n</code></pre></div>",
        "id": 265236737,
        "sender_full_name": "pierwill",
        "timestamp": 1639698705
    },
    {
        "content": "<p>Right, so the test failure isn't due to the code you linked</p>",
        "id": 265239402,
        "sender_full_name": "Jack Huey",
        "timestamp": 1639700761
    },
    {
        "content": "<p>Its something with the unsizing code I imagine</p>",
        "id": 265239447,
        "sender_full_name": "Jack Huey",
        "timestamp": 1639700779
    },
    {
        "content": "<p>I'm gonna retry doing the work of this PR, see if I can do things a bit more simply</p>",
        "id": 265332023,
        "sender_full_name": "pierwill",
        "timestamp": 1639762641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> has marked this topic as unresolved.</p>",
        "id": 265834764,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640196430
    }
]