[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Advice.20for.20.22Support.20extern.20opaque.20types.22/near/209118245\">said</a>:</p>\n<blockquote>\n<p>(sidenote, the parser/lowering code is kind of over-complicated I think)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> Anything in particular that caused you to say that?</p>",
        "id": 209129080,
        "sender_full_name": "detrumi",
        "timestamp": 1599245689
    },
    {
        "content": "<p>Well</p>",
        "id": 209129170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599245753
    },
    {
        "content": "<p>Uh, give me a minute to finish this review</p>",
        "id": 209129210,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599245764
    },
    {
        "content": "<p>I agree that the lowering code is kinda not really straightforward at the moment, but maybe you had something you ran into</p>",
        "id": 209129247,
        "sender_full_name": "detrumi",
        "timestamp": 1599245782
    },
    {
        "content": "<p>Ah, looking at it now, just adding some <code>Default</code> impl for <code>Env</code> or something would help a bit already</p>",
        "id": 209129422,
        "sender_full_name": "detrumi",
        "timestamp": 1599245898
    },
    {
        "content": "<p>(probably new() instead of Default, since Env holds references, but something like that)</p>",
        "id": 209129717,
        "sender_full_name": "detrumi",
        "timestamp": 1599246088
    },
    {
        "content": "<p>Right so</p>",
        "id": 209129860,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246147
    },
    {
        "content": "<p>Starting with lowering</p>",
        "id": 209129914,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246179
    },
    {
        "content": "<p>There's basically two different paths to lower things with generics</p>",
        "id": 209130070,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246256
    },
    {
        "content": "<p>There's a lot of basically duplicate code</p>",
        "id": 209130101,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246281
    },
    {
        "content": "<p>hmm, give an example?</p>",
        "id": 209130206,
        "sender_full_name": "detrumi",
        "timestamp": 1599246354
    },
    {
        "content": "<p>Could probably have a single <code>Lower</code> trait</p>",
        "id": 209130215,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246358
    },
    {
        "content": "<p>Example of duplicate code?</p>",
        "id": 209130256,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246364
    },
    {
        "content": "<p>yeah</p>",
        "id": 209130264,
        "sender_full_name": "detrumi",
        "timestamp": 1599246368
    },
    {
        "content": "<p>The <code>lookup_generic_arg</code> function</p>",
        "id": 209130290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246385
    },
    {
        "content": "<p>follows the pattern</p>\n<div class=\"codehilite\"><pre><span></span><code>if let Some(id) = ... {\n  let k = ...;\n  if k.binders.len(interner) &gt;0 {\n....\n}\n</code></pre></div>",
        "id": 209130314,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246401
    },
    {
        "content": "<p>Ah, you mean between the different maps</p>",
        "id": 209130354,
        "sender_full_name": "detrumi",
        "timestamp": 1599246425
    },
    {
        "content": "<p>yes</p>",
        "id": 209130418,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246468
    },
    {
        "content": "<p>(in that case)</p>",
        "id": 209130430,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246474
    },
    {
        "content": "<p>Yeah, and all the lowering traits are overkill indeed</p>",
        "id": 209130514,
        "sender_full_name": "detrumi",
        "timestamp": 1599246508
    },
    {
        "content": "<p>Or like, look at <code>lookup_apply_type</code></p>",
        "id": 209130606,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246560
    },
    {
        "content": "<p>basically, lowering in tons of repeated code</p>",
        "id": 209130625,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246571
    },
    {
        "content": "<p><code>parser.lalrpop</code>, I don't want to say too much about, because I don't know how much of the complexity is there out of necessity</p>",
        "id": 209130708,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246605
    },
    {
        "content": "<p>Could probably also use some simplification, since the parser generates a _lot_ of code</p>",
        "id": 209130810,
        "sender_full_name": "detrumi",
        "timestamp": 1599246680
    },
    {
        "content": "<p>So much so that we had that compile time problem a while ago</p>",
        "id": 209130844,
        "sender_full_name": "detrumi",
        "timestamp": 1599246710
    },
    {
        "content": "<p>Also true</p>",
        "id": 209130851,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246714
    },
    {
        "content": "<p>(which reminds me, I should ask for the status on <a href=\"https://github.com/lalrpop/lalrpop/issues/543\">lalrpop#543</a> so we can update to the newest version when the next version hits)</p>",
        "id": 209131025,
        "sender_full_name": "detrumi",
        "timestamp": 1599246813
    },
    {
        "content": "<p>I wonder how much the parselib effort <em>might</em> help</p>",
        "id": 209131058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246828
    },
    {
        "content": "<p>I feel like we probably can't use it, since we need extra stuff</p>",
        "id": 209131128,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246844
    },
    {
        "content": "<p>Hmm, yeah I don't think we could use that. And I'm not sure if that would be a lighter solution, since the whole rust parser is bigger than just what chalk needs</p>",
        "id": 209131286,
        "sender_full_name": "detrumi",
        "timestamp": 1599246944
    },
    {
        "content": "<p>Yeah, exactly</p>",
        "id": 209131308,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246961
    },
    {
        "content": "<p>My main gripe here though was <code>lowering.rs</code></p>",
        "id": 209131435,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599247037
    },
    {
        "content": "<p>Imo, a couple well placed macros could reduce the file length (and complexity) by 5 fold at least</p>",
        "id": 209131458,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599247063
    },
    {
        "content": "<p>(okay, maybe that's a little exaggerated)</p>",
        "id": 209131484,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599247079
    },
    {
        "content": "<p>Definitely. Alright, I'll see what I can do</p>",
        "id": 209131623,
        "sender_full_name": "detrumi",
        "timestamp": 1599247168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Simplifying.20lowering.20code/near/209130514\">said</a>:</p>\n<blockquote>\n<p>Yeah, and all the lowering traits are overkill indeed</p>\n</blockquote>\n<p>If you're talking about the <code>trait LowerX</code> traits, those are required due to the orphan rule. <code>chalk-integration</code> can't impl functions directly onto <code>chalk-ir</code> types except through a local trait impl.</p>",
        "id": 209131808,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1599247286
    },
    {
        "content": "<p>Well, yes we need an extension trait, but we don't need a new one for each <code>Defn</code></p>",
        "id": 209131902,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599247330
    },
    {
        "content": "<p>We can just have one like <code>trait Lower { type Lowered; fn lower(&amp;self, env: &amp;Env) -&gt; LowerResult&lt;Lowered&gt;; }</code></p>",
        "id": 209131965,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599247374
    },
    {
        "content": "<p>I think some of the lower functions take in more than just <code>Env</code></p>",
        "id": 209131978,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1599247390
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/46344c8074f2a8b9a377a1281021bf879ff5cc60/chalk-integration/src/lowering.rs#L1919-L1925\">https://github.com/rust-lang/chalk/blob/46344c8074f2a8b9a377a1281021bf879ff5cc60/chalk-integration/src/lowering.rs#L1919-L1925</a></p>",
        "id": 209131989,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1599247399
    },
    {
        "content": "<p>Most of the LowerTraits don't actually get the Env argument I think</p>",
        "id": 209131996,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599247407
    },
    {
        "content": "<p>Or at least a few</p>",
        "id": 209132011,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599247423
    },
    {
        "content": "<p>But it would be great to generalize it to a single trait if possible.</p>",
        "id": 209132027,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1599247434
    },
    {
        "content": "<p>oh drat</p>",
        "id": 209132145,
        "sender_full_name": "detrumi",
        "timestamp": 1599247498
    },
    {
        "content": "<p>so that's because <code>TraitDefn</code> doesn't know its own id?</p>",
        "id": 209132257,
        "sender_full_name": "detrumi",
        "timestamp": 1599247576
    },
    {
        "content": "<p>Another option is to just not use traits, and instead just use freestanding functions</p>",
        "id": 209132280,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599247598
    },
    {
        "content": "<p>having a single trait so you can jump to all the implementations would be kinda nice though</p>",
        "id": 209132349,
        "sender_full_name": "detrumi",
        "timestamp": 1599247650
    },
    {
        "content": "<p><code>LowerImpl</code> is also a good example of extra params: <a href=\"https://github.com/rust-lang/chalk/blob/46344c8074f2a8b9a377a1281021bf879ff5cc60/chalk-integration/src/lowering.rs#L1821-L1828\">https://github.com/rust-lang/chalk/blob/46344c8074f2a8b9a377a1281021bf879ff5cc60/chalk-integration/src/lowering.rs#L1821-L1828</a></p>",
        "id": 209132357,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1599247654
    },
    {
        "content": "<p>So <code>AssociatedTyValueIds</code> is passed directly instead of throught the environment?</p>",
        "id": 209132526,
        "sender_full_name": "detrumi",
        "timestamp": 1599247756
    },
    {
        "content": "<p>It may be able to be simplified; that's not out of the question :)</p>",
        "id": 209132553,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1599247783
    },
    {
        "content": "<p>First improvement: <code>self.lower_where_clauses(&amp;env)</code> can be simplified to <code>self.where_clauses.lower(&amp;env)</code>, removing the need for the whole <code>LowerWhereClauses</code> trait</p>",
        "id": 209135358,
        "sender_full_name": "detrumi",
        "timestamp": 1599249722
    },
    {
        "content": "<p>Can we merge some id maps such as adt_ids, fn_def_ids, closure_ids and opaque_ty_ids? Or could the names potentially overlap?</p>",
        "id": 209143898,
        "sender_full_name": "detrumi",
        "timestamp": 1599255869
    },
    {
        "content": "<p>ah, it's also passed on to <code>LoweredProgram</code>, so that wouldn't work</p>",
        "id": 209143954,
        "sender_full_name": "detrumi",
        "timestamp": 1599255938
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/e9ExM13sOl4NhyRUu1ziT6A-/image.png\">image.png</a> <br>\nHeh, there's some old code in there that's not used any more</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/e9ExM13sOl4NhyRUu1ziT6A-/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/e9ExM13sOl4NhyRUu1ziT6A-/image.png\"></a></div>",
        "id": 209170696,
        "sender_full_name": "detrumi",
        "timestamp": 1599299554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Simplifying.20lowering.20code/near/209132280\">said</a>:</p>\n<blockquote>\n<p>Another option is to just not use traits, and instead just use freestanding functions</p>\n</blockquote>\n<p>I'm now doing this for some functions such as <code>lower_adt</code>, but for other cases it has the downside of not being able to chain a <code>.lower(env)</code> at the end</p>",
        "id": 209173815,
        "sender_full_name": "detrumi",
        "timestamp": 1599305386
    },
    {
        "content": "<p>For example, compare these two calls. You'd also need to deref explicitly when calling it on <code>Box&lt;Goal&gt;</code></p>\n<div class=\"codehilite\"><pre><span></span><code>chalk_parse::parse_goal(text)?.lower(&amp;*program)\nlower_goal(*chalk_parse::parse_goal(text)?, &amp;*program)\n</code></pre></div>",
        "id": 209173949,
        "sender_full_name": "detrumi",
        "timestamp": 1599305622
    },
    {
        "content": "<p>At the moment I'm considering having a <code>Lower</code> trait for lowering without env, <code>LowerInEnv</code> with env, keep <code>LowerGoal</code> as is and convert others that take more parameters to freestanding functions</p>",
        "id": 209174025,
        "sender_full_name": "detrumi",
        "timestamp": 1599305749
    },
    {
        "content": "<p>I guess it's also possible to have a single lowering trait by making the argument generic like <code>LowerGoal</code> does, but that'd get hairy with passing tuples and such</p>",
        "id": 209174081,
        "sender_full_name": "detrumi",
        "timestamp": 1599305855
    },
    {
        "content": "<p>Those <code>lookup_generic_arg</code> and <code>lookup_apply_type</code> functions are rather confusing. I _think_ <code>lookup_generic_arg</code> could re-use <code>lookup_apply_type</code> if we add <code>ApplyTypeLookup::Param</code>, but then I'm left wondering what to do with <code>foreign_ty_ids</code> and <code>trait_ids</code></p>",
        "id": 209180129,
        "sender_full_name": "detrumi",
        "timestamp": 1599315519
    }
]