[
    {
        "content": "<p>So, I'm starting to work on/think about the <code>Self: 'a</code> lint</p>",
        "id": 256422756,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633531377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 256422798,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633531392
    },
    {
        "content": "<p>I've got two \"canonical\" examples in mind:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Iterable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">iter</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Deserializer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deserialize</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 256422807,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633531395
    },
    {
        "content": "<p>The former requires <code>Self: 'a</code>, the second <code>T: 'a</code></p>",
        "id": 256422837,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633531409
    },
    {
        "content": "<p>The general scheme I'm going for is:</p>",
        "id": 256422861,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633531421
    },
    {
        "content": "<p>For each GAT:</p>",
        "id": 256422888,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633531436
    },
    {
        "content": "<p>Iterate through each function in the trait</p>",
        "id": 256422959,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633531449
    },
    {
        "content": "<p>Look for regions appearing in the GAT substs</p>",
        "id": 256422980,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633531461
    },
    {
        "content": "<p><code>'a</code> for both examples above</p>",
        "id": 256423001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633531470
    },
    {
        "content": "<p>Then, for each input argument, find the <em>implied</em> outlives bounds</p>",
        "id": 256423058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633531498
    },
    {
        "content": "<p>For the first, it's <code>Self: 'a</code>, for the latter, it's <code>T: 'a</code></p>",
        "id": 256423096,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633531520
    },
    {
        "content": "<p>Now, these are essentially the required bounds on the GAT</p>",
        "id": 256423162,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633531558
    },
    {
        "content": "<p>Since that's the only way you can borrow from that arg</p>",
        "id": 256423240,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633531581
    },
    {
        "content": "<p>I suppose one place where we can fall flat here is <code>fn deserialize2&lt;'a, 'b: 'a&gt;(&amp;self, input: &amp;'b T) -&gt; Self::Out&lt;'a&gt;;</code></p>",
        "id": 256434751,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633535564
    },
    {
        "content": "<p>But...maybe this \"good\". Not trying to handle this case means the rules are simpler and provides a relatively easy way to opt-out</p>",
        "id": 256437289,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633536335
    },
    {
        "content": "<p>On the other, we can probably end up with the same bounds, since we know that <code>'b: 'a</code> and <code>T: 'b</code>, so we can infer that <code>T: 'a</code> is also implied, and so needs a bound</p>",
        "id": 256452624,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633542184
    },
    {
        "content": "<p>I guess to that a step further, it would then make <code>fn deserialize2&lt;'a, 'b: 'a&gt;(&amp;self, input: &amp;'b T, input2: &amp;'a T) -&gt; Self::Out&lt;'a&gt;;</code> more complicated.</p>\n<p>In theory, you can generate a return type from both <code>input</code> and <code>input2</code>, given the right where clauses. But with slightly more lax where clauses, you could also only generate a return type from <code>input2</code>. (Then, of course, with no where clauses, you could generate a return type given that the GAT contains no lifetimes)</p>",
        "id": 256454484,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633542869
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">Missing</span><span class=\"w\"> </span><span class=\"n\">bound</span>: <span class=\"nc\">Self</span>: <span class=\"o\">'</span><span class=\"na\">a</span>\n  <span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">generic</span><span class=\"o\">-</span><span class=\"n\">associated</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"o\">/</span><span class=\"bp\">self</span><span class=\"o\">-</span><span class=\"n\">outlives</span><span class=\"o\">-</span><span class=\"n\">lint</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">6</span>:<span class=\"mi\">14</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">              </span><span class=\"o\">^^^^</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">Missing</span><span class=\"w\"> </span><span class=\"n\">bound</span>: <span class=\"nc\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span>\n  <span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">generic</span><span class=\"o\">-</span><span class=\"n\">associated</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"o\">/</span><span class=\"bp\">self</span><span class=\"o\">-</span><span class=\"n\">outlives</span><span class=\"o\">-</span><span class=\"n\">lint</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">20</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"o\">^^^^</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Decent start. I think this could be done on hir, if we stick to the simple \"you must have the implied bounds containing regions in GAT substs from the function in the GAT where clause\"</p>",
        "id": 256490740,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633557235
    },
    {
        "content": "<p>Though, that does mean we would have to copy over the implied bounds rules</p>",
        "id": 256490806,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633557257
    },
    {
        "content": "<p>And potentially precludes more advanced implied bounds</p>",
        "id": 256490916,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633557323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20.60Self.3A.20'a.60.20lint/near/256452624\">said</a>:</p>\n<blockquote>\n<p>On the other, we can probably end up with the same bounds, since we know that <code>'b: 'a</code> and <code>T: 'b</code>, so we can infer that <code>T: 'a</code> is also implied, and so needs a bound</p>\n</blockquote>\n<p>Thinking about this, this is somewhat an elaboration of outlives bounds</p>",
        "id": 256491094,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633557434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you get a bit, would love some thoughts here</p>",
        "id": 256493203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633558548
    },
    {
        "content": "<p>ok, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> , going to read now :)</p>",
        "id": 256761281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633708662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> can I see your branch?</p>",
        "id": 256762327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633709074
    },
    {
        "content": "<p>I am debating about the <code>'b: 'a</code> rules</p>",
        "id": 256762373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633709092
    },
    {
        "content": "<p>I'm thinking about the inference we do for outlives bounds on struct declarations</p>",
        "id": 256762710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633709222
    },
    {
        "content": "<p>yes, let me push real quick</p>",
        "id": 256763136,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633709378
    },
    {
        "content": "<p>I'm going to go skim back over the code</p>",
        "id": 256763158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633709389
    },
    {
        "content": "<p>it's not a directly analogous situation</p>",
        "id": 256763176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633709396
    },
    {
        "content": "<p>but it's ... close</p>",
        "id": 256763183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633709398
    },
    {
        "content": "<p>it would certainly be easy to handle cases like <code>'b: 'a</code></p>",
        "id": 256763277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633709416
    },
    {
        "content": "<p>any such rules are going to hit weird corner cases that are hard to think about</p>",
        "id": 256763316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633709434
    },
    {
        "content": "<p>e.g., <code>for&lt;'b&gt; 'a: 'b</code> or whatever</p>",
        "id": 256763332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633709440
    },
    {
        "content": "<p><a href=\"https://github.com/jackh726/rust/tree/gats_diagnostics\">https://github.com/jackh726/rust/tree/gats_diagnostics</a></p>",
        "id": 256763413,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633709471
    },
    {
        "content": "<p>The second commit is the relevant work</p>",
        "id": 256763505,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633709506
    },
    {
        "content": "<p>It's still a bit hacky</p>",
        "id": 256763623,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633709542
    },
    {
        "content": "<p>Other interesting test cases</p>",
        "id": 256763733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633709587
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Deserializer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deserialize</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"bp\">Self</span>::<span class=\"n\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 256763771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633709603
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Deserializer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deserialize</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 256763807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633709618
    },
    {
        "content": "<p>Yeah, both should be trivially covered by existing code</p>",
        "id": 256764439,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633709863
    },
    {
        "content": "<p>The <code>RegionsInGATs</code> visitor will just add <code>('a, 0)</code> in both cases</p>",
        "id": 256764558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633709902
    },
    {
        "content": "<p>this looks basically good, yes</p>",
        "id": 256765279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633710213
    },
    {
        "content": "<p>At this point, I'm just doing a bit of cleanup. But the unanswered question here does revolve around that <code>'b: 'a</code> corner case.</p>",
        "id": 256765806,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633710428
    },
    {
        "content": "<p>Also, should add some tests covering generics on the function itself and such</p>",
        "id": 256765880,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633710456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20.60Self.3A.20'a.60.20lint/near/256765806\">said</a>:</p>\n<blockquote>\n<p>At this point, I'm just doing a bit of cleanup. But the unanswered question here does revolve around that <code>'b: 'a</code> corner case.</p>\n</blockquote>\n<p>I'm trying to think if there's any precedent.</p>",
        "id": 256766268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633710599
    },
    {
        "content": "<p>I can't think of one. But I think we should extend it.</p>",
        "id": 256766374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633710622
    },
    {
        "content": "<p>Two reasons:</p>",
        "id": 256766394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633710628
    },
    {
        "content": "<ul>\n<li>preserves future flexibility</li>\n</ul>",
        "id": 256766415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633710634
    },
    {
        "content": "<ul>\n<li>matches the supportive nature of this work (i.e., trying to do the right thing, first and foremost)</li>\n</ul>",
        "id": 256766448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633710648
    },
    {
        "content": "<p>I don't think that using non-obvious outlives clauses is the \"right way\" to disable this default</p>",
        "id": 256766482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633710661
    },
    {
        "content": "<p>Hmm okay</p>",
        "id": 256767029,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633710851
    },
    {
        "content": "<p>Then that's the next step probably</p>",
        "id": 256767053,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633710859
    },
    {
        "content": "<p>Do you know if there's any code anywhere that does this sort of \"extension\" already</p>",
        "id": 256767094,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633710883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I think so, yes</p>",
        "id": 256769287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633711792
    },
    {
        "content": "<p>let me try to find it :)</p>",
        "id": 256769300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633711800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> the code you want is <code>FreeRegionMap</code></p>",
        "id": 256771856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712807
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/outlives/env/struct.OutlivesEnvironment.html#method.free_region_map\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/outlives/env/struct.OutlivesEnvironment.html#method.free_region_map</a></p>",
        "id": 256771892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712821
    },
    {
        "content": "<p>it might not expose \"transitive relationships\" logic though</p>",
        "id": 256771915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712833
    },
    {
        "content": "<p>and it might not be <em>accessible</em> (but I think it is)</p>",
        "id": 256771933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712840
    },
    {
        "content": "<p>hmm, how do you get this thing</p>",
        "id": 256772016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712879
    },
    {
        "content": "<p>I think that's part of the <code>FnCtxt</code> maybe</p>",
        "id": 256772118,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633712911
    },
    {
        "content": "<p>do you have a FnCtxt?</p>",
        "id": 256772145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712919
    },
    {
        "content": "<p>if so, you're fine, yes</p>",
        "id": 256772153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712922
    },
    {
        "content": "<p>oh, I guess you do</p>",
        "id": 256772164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712927
    },
    {
        "content": "<p>Not really, but I think it's easy enough to make one</p>",
        "id": 256772209,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633712948
    },
    {
        "content": "<p>or move this to somewhere where I do have one</p>",
        "id": 256772229,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633712958
    },
    {
        "content": "<p>do you have a param env?</p>",
        "id": 256772289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633712987
    },
    {
        "content": "<p>I'm just treating it as any empty param env</p>",
        "id": 256772428,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633713023
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler/rustc_infer/src/infer/outlives/env.rs#L71-L83\">https://github.com/rust-lang/rust/blob/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler/rustc_infer/src/infer/outlives/env.rs#L71-L83</a></p>",
        "id": 256772557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633713081
    },
    {
        "content": "<p>that's the code that populates the free region map</p>",
        "id": 256772656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633713123
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/e0aaffd8a45cd0e9f331ec7734713e9de11aa6c8/compiler/rustc_infer/src/infer/outlives/env.rs#L80\">this line, in particular</a></p>",
        "id": 256772719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633713136
    },
    {
        "content": "<p>right</p>",
        "id": 256772796,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633713170
    },
    {
        "content": "<p>I'm more curious how to use <code>FreeRegionMap</code> to get the bounds I need</p>",
        "id": 256772835,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633713185
    },
    {
        "content": "<p>I guess for something like <code>fn deserialize2&lt;'a, 'b: 'a&gt;(&amp;self, input: &amp;'b T) -&gt; Self::Out&lt;'a&gt;;</code></p>",
        "id": 256773174,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633713313
    },
    {
        "content": "<p>I'll have <code>T: 'b</code> already</p>",
        "id": 256773193,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633713321
    },
    {
        "content": "<p>And also know that I have <code>'a</code> as a GAT subst</p>",
        "id": 256773215,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633713331
    },
    {
        "content": "<p>So, I'll probably just have to go through the all pairs</p>",
        "id": 256773263,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633713350
    },
    {
        "content": "<p>and see if we know that <code>'b: 'a</code></p>",
        "id": 256773289,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633713359
    },
    {
        "content": "<p>And, if so, require that bound</p>",
        "id": 256773338,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633713365
    },
    {
        "content": "<p>Another case we probably need to cover:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Des</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">des</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Des</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">x</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">des</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 256781888,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633716795
    },
    {
        "content": "<p>the FRM does compute the transitive closures</p>",
        "id": 256786736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633718729
    },
    {
        "content": "<p>but I think it doesn't expose an iterator</p>",
        "id": 256786742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633718733
    },
    {
        "content": "<p>Another example that's a bit difficult with the current code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Wrap</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Des</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">D</span>: <span class=\"o\">'</span><span class=\"na\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">des</span><span class=\"o\">&lt;'</span><span class=\"na\">z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">z</span> <span class=\"nc\">Wrap</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Wrap</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Des</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">D</span>: <span class=\"o\">'</span><span class=\"na\">x</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">x</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">des</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">Wrap</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Wrap</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 256826011,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633740977
    },
    {
        "content": "<p>In theory, this isn't difficult: we see <code>Wrap&lt;T&gt;</code> as a GAT subst, and we imply that <code>Wrap&lt;T&gt;: 'a</code>, therefore, we should be able to say that <code>D: 'x</code> is a required clause. However, the current implied bounds code only splits out <code>T: 'a</code>, so it's a bit more difficult</p>",
        "id": 256826161,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633741126
    },
    {
        "content": "<p>Ugh I hate this stupid example I came up with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(generic_associated_types)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">IntoTupRef</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">IntoTupRef</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Out</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">tup</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">IntoTupRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">tup</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;&amp;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Mine</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IntoTupRef</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Mine</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">tup</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;&amp;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 256964654,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633881083
    },
    {
        "content": "<p>Don't mind the extra parameters on Out, I got here playing around with impls to try to figure out what clauses we want to require</p>",
        "id": 256964723,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633881141
    },
    {
        "content": "<p>But essentially ran into this, which more or else shows that we're not really going to be able to be \"perfect\" here, since we can end up a situation where we don't have an params in the GAT, but we still need a where clause</p>",
        "id": 256964898,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633881318
    },
    {
        "content": "<p>Cleaned up a bit: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=52fdd7b34c3997fcbec9b79e7b73b0a2\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=52fdd7b34c3997fcbec9b79e7b73b0a2</a></p>",
        "id": 256965032,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633881454
    },
    {
        "content": "<p>I don't think this matters for the case where the param is on the trait itself, since the rule there is only dependent on the function input args and the lifetimes we see on the GAT. Whereas when we pass both a type and a lifetime to a GAT, we can end up with the case where there's no direct obvious link between the two</p>",
        "id": 256965634,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633881976
    },
    {
        "content": "<p>Simplified a bit more: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=302d44b3cef88a3b21dbf6e5a9bb89e6\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=302d44b3cef88a3b21dbf6e5a9bb89e6</a></p>",
        "id": 256965754,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633882104
    },
    {
        "content": "<p>Even more simple: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ae52e60227be03d0047983fbc01539a3\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ae52e60227be03d0047983fbc01539a3</a></p>",
        "id": 257063138,
        "sender_full_name": "Jack Huey",
        "timestamp": 1633958400
    },
    {
        "content": "<p>Okay so I have a working branch: <a href=\"https://github.com/jackh726/rust/tree/gats_diagnostics\">https://github.com/jackh726/rust/tree/gats_diagnostics</a></p>",
        "id": 257842904,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634401181
    },
    {
        "content": "<p>Lots of errors in GAT tests</p>",
        "id": 257842914,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634401200
    },
    {
        "content": "<p>Some seem legit</p>",
        "id": 257842955,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634401206
    },
    {
        "content": "<p>Others need some consideration</p>",
        "id": 257842964,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634401215
    },
    {
        "content": "<p>Take issue-79422:</p>",
        "id": 257842971,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634401226
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MapLike</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">VRefCont</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span>: <span class=\"nc\">RefCont</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">K</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">VRefCont</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">K</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MapLike</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">BTreeMap</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">VRefCont</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">K</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">BTreeMap</span>::<span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257842979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634401237
    },
    {
        "content": "<p>Let's also modify it a bit to be more \"generalized\":</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MapLike</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">VRefCont</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span>: <span class=\"nc\">RefCont</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">K</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">VRefCont</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">K</span>: <span class=\"nb\">Ord</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MapLike</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">BTreeMap</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">VRefCont</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">K</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">BTreeMap</span>::<span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257843009,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634401275
    },
    {
        "content": "<p>The lint as written will require <code>Self: 'a</code></p>",
        "id": 257843099,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634401361
    },
    {
        "content": "<p>(Also remember that the return type is <code>Option&lt;&lt;Self as MapLike&lt;K, V&gt;&gt;::VRefCont&lt;'a&gt;&gt;</code>, so the GAT substs here are <code>[Self, K, V, 'a]</code>)</p>",
        "id": 257843233,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634401470
    },
    {
        "content": "<p>Let's imagine we go with the suggestion and add a <code>Self: 'a</code>. Well, now this is unfortunate: Now we get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0309]: the parameter type `K` may not live long enough\n --&gt; src/main.rs:9:5\n  |\n9 |     type VRefCont&lt;&#39;a&gt; = &amp;&#39;a V;\n  |     ^^^^^^^^^^^^^^^^^-^^^^^^^^\n  |     |                |\n  |     |                help: consider adding a where clause: `where K: &#39;a`\n  |     ...so that the type `BTreeMap&lt;K, V&gt;` will meet its required lifetime bounds\n</code></pre></div>",
        "id": 257843409,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634401647
    },
    {
        "content": "<p>Err, nevermind. I didn't <em>also</em> add that to the impl</p>",
        "id": 257843511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634401710
    },
    {
        "content": "<p>Actually this is fine. The errors guide the way.</p>",
        "id": 257843647,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634401840
    },
    {
        "content": "<p>issue-88360 is a fun one</p>",
        "id": 257851089,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634408814
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">GatTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Gat</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Gat</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SuperTrait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"nc\">GatTrait</span><span class=\"o\">&lt;</span><span class=\"n\">Gat</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Gat</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">test</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">//~^ mismatched types</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257851099,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634408828
    },
    {
        "content": "<p>I think this effectively means that <code>T: 'static</code> for any impl to be able to exist</p>",
        "id": 257851116,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634408846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>  May i ask a perhaps noob question about this lint? the <code>Self: 'a</code> and the <code>T: 'a</code> are for the well-formed-ness of the associated function itself, right? Why would people prefer to add the where bound to the associated type item, rather than adding them to the associated function item?</p>",
        "id": 259830183,
        "sender_full_name": "Charles Lew",
        "timestamp": 1635746917
    },
    {
        "content": "<p>These bounds are for the well-formedness of the associated type definition (so you could write <code>&amp;'a T</code> for example)</p>",
        "id": 259861182,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635772194
    },
    {
        "content": "<p>Oh! Got it, thanks!</p>",
        "id": 259883000,
        "sender_full_name": "Charles Lew",
        "timestamp": 1635782862
    },
    {
        "content": "<p>I think what's potentially confusing here, is that in order to get a list of bounds that are \"reasonable\", we look at the associated functions. The idea being that those will tell us what bounds were required to hold to construct the GAT (from the trait functions).</p>",
        "id": 259883761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1635783193
    },
    {
        "content": "<p>Yes, this would be a helpful diagnostics suggestion. I'd imagine people relying it a lot to get their GAT definitions correct :)</p>",
        "id": 259886244,
        "sender_full_name": "Charles Lew",
        "timestamp": 1635784294
    },
    {
        "content": "<p>Has anyone brought up the <code>T: ?Sized</code> syntax for opting out of these GAT where clauses/silencing the error for not having them. i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>: <span class=\"o\">?'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 260231281,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636003999
    },
    {
        "content": "<p>Yes, but we basically were in agreement that it's not a great idea</p>",
        "id": 260264556,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636030284
    },
    {
        "content": "<p>oh okay <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 260264573,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636030296
    },
    {
        "content": "<p>With good enough rules, there should be no reason to need to opt out</p>",
        "id": 260264585,
        "sender_full_name": "Jack Huey",
        "timestamp": 1636030305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"426609\">@Michael Goulet (compiler-errors)</span> I'll put a few more links here to relevant discussion</p>",
        "id": 270991018,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644246347
    },
    {
        "content": "<p><a href=\"https://hackmd.io/RqsyidaAQ_aiiB9t7PpLfQ?both#what-rule-to-apply%E2%80%A6\">https://hackmd.io/RqsyidaAQ_aiiB9t7PpLfQ?both#what-rule-to-apply%E2%80%A6</a></p>",
        "id": 270991761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644246621
    },
    {
        "content": "<p>That's the algorithm Niko was talking about</p>",
        "id": 270992223,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644246825
    },
    {
        "content": "<p>This example is the one we want to lint on: <a href=\"https://github.com/rust-lang/rust/blob/51126be1b260216b41143469086e6e6ee567647e/src/test/ui/generic-associated-types/self-outlives-lint.rs#L141\">https://github.com/rust-lang/rust/blob/51126be1b260216b41143469086e6e6ee567647e/src/test/ui/generic-associated-types/self-outlives-lint.rs#L141</a></p>",
        "id": 270992283,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644246842
    },
    {
        "content": "<p>This is the current implementation: <a href=\"https://github.com/jackh726/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler/rustc_typeck/src/check/wfcheck.rs#L277\">https://github.com/jackh726/rust/blob/e012a191d768adeda1ee36a99ef8b92d51920154/compiler/rustc_typeck/src/check/wfcheck.rs#L277</a></p>",
        "id": 270992370,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644246867
    }
]