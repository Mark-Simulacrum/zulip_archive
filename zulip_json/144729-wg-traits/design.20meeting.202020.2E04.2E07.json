[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 193239347,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289281
    },
    {
        "content": "<p>5ish minutes until meeting</p>",
        "id": 193239356,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289287
    },
    {
        "content": "<p>Topic for today: const in Chalk</p>",
        "id": 193239367,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289294
    },
    {
        "content": "<p>See <a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\" title=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\">https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both</a> for meeting agenda and such</p>",
        "id": 193239443,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289329
    },
    {
        "content": "<p>Before we start, just wanted to give some announcements/shout outs</p>",
        "id": 193239707,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289469
    },
    {
        "content": "<p>Been a busy last week</p>",
        "id": 193239727,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289478
    },
    {
        "content": "<p>We currently have <em>10</em> PRs opened</p>",
        "id": 193239873,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289536
    },
    {
        "content": "<p>Very cool to see all the activity all of a sudden</p>",
        "id": 193239875,
        "sender_full_name": "detrumi",
        "timestamp": 1586289537
    },
    {
        "content": "<p>and <em>3</em> that were merged in the last week</p>",
        "id": 193239904,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289557
    },
    {
        "content": "<p>But anyways, I know if I start shouting out individual people, I'm gonna miss some</p>",
        "id": 193240046,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289604
    },
    {
        "content": "<p>We also have more issues describing the ongoing work now, with assignees which helps to see things at a glance</p>",
        "id": 193240137,
        "sender_full_name": "detrumi",
        "timestamp": 1586289642
    },
    {
        "content": "<p>I actually have 2 more ready, they depend on not-yet-merged ones</p>",
        "id": 193240142,
        "sender_full_name": "Areredify",
        "timestamp": 1586289643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> feel free to make a PR for them :) We can always merge in order and/or comment</p>",
        "id": 193240209,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289683
    },
    {
        "content": "<p>Sigh, I didn't do any actual <em>prep</em> about constants</p>",
        "id": 193240447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586289814
    },
    {
        "content": "<p>Meeting time</p>",
        "id": 193240456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289818
    },
    {
        "content": "<p>but that's ok, let's talk now :)</p>",
        "id": 193240457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586289819
    },
    {
        "content": "<p>ha</p>",
        "id": 193240458,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289820
    },
    {
        "content": "<p>me neither</p>",
        "id": 193240467,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289823
    },
    {
        "content": "<p>mostly because I know little about how consts work in rustc under the hood</p>",
        "id": 193240485,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289836
    },
    {
        "content": "<p>it's been...a day</p>",
        "id": 193240533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586289844
    },
    {
        "content": "<p>Tuesdays are always a busy day for me</p>",
        "id": 193240562,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289859
    },
    {
        "content": "<p>I guess let's start with a few minutes on current status etc?</p>",
        "id": 193240567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586289860
    },
    {
        "content": "<p>right, so already covered a bit: lots of activity the last week, nice to see</p>",
        "id": 193240610,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289884
    },
    {
        "content": "<p>that is, I'd like to keep updating the agenda hackmd etc so we have some record and can answer the \"what's been doing on\" questions easily</p>",
        "id": 193240621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586289890
    },
    {
        "content": "<p>yep -- what are the areas we've made progress on?</p>",
        "id": 193240678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586289921
    },
    {
        "content": "<ul>\n<li>some work on the <code>TypeName</code></li>\n</ul>",
        "id": 193240722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586289944
    },
    {
        "content": "<p>Status about rustc integration: this is getting close. I need to update the <code>ParamsSubtitutor</code>/<code>BoundVarCollector</code> to handle <code>ReEarlyBound</code> and <code>ReNamed</code></p>",
        "id": 193240728,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586289947
    },
    {
        "content": "<ul>\n<li>some work on bult-in traits (<code>Sized</code>)</li>\n</ul>",
        "id": 193240732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586289950
    },
    {
        "content": "<ul>\n<li>work towards removing vec etc</li>\n</ul>",
        "id": 193240795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586289967
    },
    {
        "content": "<p>I guess I'll drop notes in the hackmd</p>",
        "id": 193240802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586289970
    },
    {
        "content": "<p>Sized, Copy, Drop and Clone</p>",
        "id": 193240848,
        "sender_full_name": "Areredify",
        "timestamp": 1586290006
    },
    {
        "content": "<p>nice</p>",
        "id": 193240891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290040
    },
    {
        "content": "<p>on my part, besides reviewing and things, I did some hacking towards towards removing leak check from rustc</p>",
        "id": 193240926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290053
    },
    {
        "content": "<p>Nice</p>",
        "id": 193240941,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586290067
    },
    {
        "content": "<p>now on my third branch and I think I know the right way to do it ;)</p>",
        "id": 193240944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290069
    },
    {
        "content": "<p>The <code>impl Trait</code> work is getting along, I'm hoping to land the current PR soon and iterate on that afterwards (tests, documentation, WF rules and lazy access of hidden types)</p>",
        "id": 193241007,
        "sender_full_name": "detrumi",
        "timestamp": 1586290088
    },
    {
        "content": "<p>one thing I would like: do we know if there are folks looking for tasks who aren't finding them? I can't quite tell, seems like a lot of people were asking</p>",
        "id": 193241022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290096
    },
    {
        "content": "<p>I'm not sure</p>",
        "id": 193241052,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586290119
    },
    {
        "content": "<p>I <em>think</em> we've got everyone</p>",
        "id": 193241065,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586290134
    },
    {
        "content": "<p>(if not, speak up :))</p>",
        "id": 193241097,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586290158
    },
    {
        "content": "<p>OK. Well, people reading this, if you're looking for a task, drop a message in <a class=\"stream-topic\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits/topic/Contribution.20to.20chalk\">#wg-traits &gt; Contribution to chalk</a> I guess :)</p>",
        "id": 193241105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290160
    },
    {
        "content": "<p>I guess let's talk a bit about constants. I wonder if <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> or <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> are around.</p>",
        "id": 193241144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290183
    },
    {
        "content": "<p>Or maybe <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> =)</p>",
        "id": 193241160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290190
    },
    {
        "content": "<p>Yeah, was about to say</p>",
        "id": 193241180,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586290194
    },
    {
        "content": "<p>/me pings random folks from rustc who do work towards constants</p>",
        "id": 193241184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290199
    },
    {
        "content": "<p>o/</p>",
        "id": 193241230,
        "sender_full_name": "eddyb",
        "timestamp": 1586290203
    },
    {
        "content": "<p>constant police is here <span aria-label=\"oncoming police car\" class=\"emoji emoji-1f694\" role=\"img\" title=\"oncoming police car\">:oncoming_police_car:</span></p>",
        "id": 193241253,
        "sender_full_name": "eddyb",
        "timestamp": 1586290216
    },
    {
        "content": "<p>Maybe we should start with what exactly the <em>problem</em> here. Or, really, what we're trying to accomplish</p>",
        "id": 193241259,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586290220
    },
    {
        "content": "<p>I can kind of give my high-level view of how things are working and what role chalk ought to play</p>",
        "id": 193241263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290222
    },
    {
        "content": "<p>which <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> can correct</p>",
        "id": 193241277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290229
    },
    {
        "content": "<p>the short version is: I hope that chalk can treat constants pretty opaquely</p>",
        "id": 193241301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290240
    },
    {
        "content": "<p>so, obviously they're a third \"kind\" of parameter (like types, lifetimes)</p>",
        "id": 193241319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290255
    },
    {
        "content": "<p>only <em>known</em> constant values</p>",
        "id": 193241327,
        "sender_full_name": "eddyb",
        "timestamp": 1586290259
    },
    {
        "content": "<p>and adding that is fairly easy</p>",
        "id": 193241332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290261
    },
    {
        "content": "<p>in general, constants are something like \"type aliases\"</p>",
        "id": 193241363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290279
    },
    {
        "content": "<p>but (const) parameters, inference variables and projections would behave like type ones do</p>",
        "id": 193241366,
        "sender_full_name": "eddyb",
        "timestamp": 1586290281
    },
    {
        "content": "<p>(which includes associated types expressions like <code>Foo::Item</code> in chalk)</p>",
        "id": 193241418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290315
    },
    {
        "content": "<p>in that, to figure out whether two constant expressions are equal, we can sometimes \"evaluate\" them to a fixed value</p>",
        "id": 193241495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290349
    },
    {
        "content": "<p>So in theory, translating each const to a fresh struct wouldn't really change how chalk handles them (but not like it's useful)</p>",
        "id": 193241496,
        "sender_full_name": "detrumi",
        "timestamp": 1586290349
    },
    {
        "content": "<p>FWIW the values themselves are trees of constructors with integer leaves, so Chalk could also encode them</p>",
        "id": 193241542,
        "sender_full_name": "eddyb",
        "timestamp": 1586290394
    },
    {
        "content": "<p>Oh right, I was mainly thinking of fully-evaluated constants</p>",
        "id": 193241556,
        "sender_full_name": "detrumi",
        "timestamp": 1586290412
    },
    {
        "content": "<p>(anything else is probably unsound :P)</p>",
        "id": 193241558,
        "sender_full_name": "eddyb",
        "timestamp": 1586290414
    },
    {
        "content": "<p>and integers are only included because a type-theoretical <code>Nat</code> is an ADT</p>",
        "id": 193241632,
        "sender_full_name": "eddyb",
        "timestamp": 1586290443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> do you mean anything other than encoding values as trees is unsound?</p>",
        "id": 193241650,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586290465
    },
    {
        "content": "<p>concrete constant values mirror type constructors <em>perfectly</em> ;)</p>",
        "id": 193241651,
        "sender_full_name": "eddyb",
        "timestamp": 1586290465
    },
    {
        "content": "<p>I think that -- short term at least -- chalk can be generic over constant values, but eventually that might be part of this shared library that defines types</p>",
        "id": 193241655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> likely yes</p>",
        "id": 193241658,
        "sender_full_name": "eddyb",
        "timestamp": 1586290473
    },
    {
        "content": "<p>but constants can also be \"associated constants\" as well as expressions that have to be evaluated, right?</p>",
        "id": 193241694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290501
    },
    {
        "content": "<p>I guess let's pull up the rustc types</p>",
        "id": 193241711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290505
    },
    {
        "content": "<p>by \"tree\" I mean the same thing <code>Ty</code> is, the DAG nature is an implementation detail</p>",
        "id": 193241712,
        "sender_full_name": "eddyb",
        "timestamp": 1586290505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> those two are the same</p>",
        "id": 193241718,
        "sender_full_name": "eddyb",
        "timestamp": 1586290512
    },
    {
        "content": "<p>they're both <code>Unevaluated(DefId, Substs)</code></p>",
        "id": 193241730,
        "sender_full_name": "eddyb",
        "timestamp": 1586290521
    },
    {
        "content": "<p>well</p>",
        "id": 193241750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290532
    },
    {
        "content": "<p>in rustc they are, not sure about chalk</p>",
        "id": 193241762,
        "sender_full_name": "detrumi",
        "timestamp": 1586290539
    },
    {
        "content": "<p>there is a difference in that chalk needs to be involved in resolving the trait impls and things</p>",
        "id": 193241772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290549
    },
    {
        "content": "<p>hmm but that's based on what the <code>DefId</code> points to</p>",
        "id": 193241829,
        "sender_full_name": "eddyb",
        "timestamp": 1586290568
    },
    {
        "content": "<p>I guess Chalk doesn't have <code>Instance::resolve</code> verbatim heh</p>",
        "id": 193241840,
        "sender_full_name": "eddyb",
        "timestamp": 1586290579
    },
    {
        "content": "<p>seems fine</p>",
        "id": 193241854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290585
    },
    {
        "content": "<p>at least potentially :)</p>",
        "id": 193241868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290594
    },
    {
        "content": "<p>i.e., if we can ask something like \"what -- roughly speaking -- is this def-id\" that'd probably be good enough</p>",
        "id": 193241903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290622
    },
    {
        "content": "<p>I am imagining this will work similarly -- ultimately -- to how type aliases work</p>",
        "id": 193241955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290665
    },
    {
        "content": "<p>which is to say that unification will produce a subgoal (well, ideally, we'll \"preprocess\" those, but that's ok) that is like <code>ConstEq(...)</code></p>",
        "id": 193242015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290687
    },
    {
        "content": "<p>that's what I was imagining</p>",
        "id": 193242058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586290719
    },
    {
        "content": "<p>anyway so e.g. <code>Some((true, 2))</code> needs an encoding isomorphic to the hypothetical type<br>\n<code>Option::Some&lt;(bool::true, S&lt;S&lt;Z&gt;&gt;)&gt;</code></p>",
        "id": 193242061,
        "sender_full_name": "eddyb",
        "timestamp": 1586290721
    },
    {
        "content": "<p>we'll generate clauses that define <code>ConstEq</code> based on impls, so that when you have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SomeType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>we'd have a <code>NormalizeConst(&lt;SomeType as Foo&gt;::C =&gt; 22)</code> rule</p>",
        "id": 193242075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290729
    },
    {
        "content": "<p>(presumably you wouldn't encode integers using succ's tho :P)</p>",
        "id": 193242091,
        "sender_full_name": "eddyb",
        "timestamp": 1586290739
    },
    {
        "content": "<p>Hope not, only Agda does that</p>",
        "id": 193242129,
        "sender_full_name": "detrumi",
        "timestamp": 1586290771
    },
    {
        "content": "<p>I'm not 100% sure how the 'do true evaluation' part would work; presumably there has to be some sort of callback that lets us try to evaluate</p>",
        "id": 193242153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290788
    },
    {
        "content": "<p>the only thing that Chalk can't know about is how to actually evaluate MIR bodies</p>",
        "id": 193242175,
        "sender_full_name": "eddyb",
        "timestamp": 1586290799
    },
    {
        "content": "<p>in rustc, we have some similar callback, and if the code winds up relying on generic type parameters, it fails, is that right?</p>",
        "id": 193242237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290805
    },
    {
        "content": "<p>yes, it's a bit tricky, but the query returns:</p>",
        "id": 193242256,
        "sender_full_name": "eddyb",
        "timestamp": 1586290818
    },
    {
        "content": "<p>(what's the name of the query?)</p>",
        "id": 193242264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290824
    },
    {
        "content": "<p><code>Result&lt;ConstValue, ErrorReported | TooGeneric&gt;</code></p>",
        "id": 193242269,
        "sender_full_name": "eddyb",
        "timestamp": 1586290829
    },
    {
        "content": "<p><code>const_eval_raw</code> probably but it's a rats' nest</p>",
        "id": 193242299,
        "sender_full_name": "eddyb",
        "timestamp": 1586290844
    },
    {
        "content": "<p><code>ConstValue</code> is a <em>concrete</em> constant, fully evaluated</p>",
        "id": 193242318,
        "sender_full_name": "eddyb",
        "timestamp": 1586290859
    },
    {
        "content": "<p><code>TooGeneric</code> doesn't report inside the constant itself, but the <code>ConstEvaluatable</code> predicate (likely just <code>ConstWellFormed</code> in the future, if I had to guess) errors if a constant can't be proven to evaluate successfully due to <code>TooGeneric</code></p>",
        "id": 193242381,
        "sender_full_name": "eddyb",
        "timestamp": 1586290920
    },
    {
        "content": "<p>the goal, in time, would be to allow definitions to shift the responsibility of this const-WF requirement to their callers</p>",
        "id": 193242463,
        "sender_full_name": "eddyb",
        "timestamp": 1586290958
    },
    {
        "content": "<p>\"too generic\" meaning -- something depended on an unknown generic type</p>",
        "id": 193242470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290965
    },
    {
        "content": "<p>/me is aiming for a 0 post-monomorphization-error system</p>",
        "id": 193242474,
        "sender_full_name": "eddyb",
        "timestamp": 1586290967
    },
    {
        "content": "<p>or an unknown const generic parameter :P</p>",
        "id": 193242492,
        "sender_full_name": "eddyb",
        "timestamp": 1586290985
    },
    {
        "content": "<p>but this isn't something we can know in advance, prior to evauation</p>",
        "id": 193242496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586290988
    },
    {
        "content": "<p>correct, because if you can have <code>if foo { 0 } else { size_of::&lt;T&gt;() }</code></p>",
        "id": 193242538,
        "sender_full_name": "eddyb",
        "timestamp": 1586291010
    },
    {
        "content": "<p>right</p>",
        "id": 193242546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291016
    },
    {
        "content": "<p>and also things that use parameters can still evaluate successfully, e.g. if you know <code>T: Sized</code> then types like <code>&amp;T</code> have a constant size</p>",
        "id": 193242623,
        "sender_full_name": "eddyb",
        "timestamp": 1586291045
    },
    {
        "content": "<p>(without knowing <code>T</code>)</p>",
        "id": 193242629,
        "sender_full_name": "eddyb",
        "timestamp": 1586291051
    },
    {
        "content": "<p>Ah, that's kinda tricky</p>",
        "id": 193242665,
        "sender_full_name": "detrumi",
        "timestamp": 1586291067
    },
    {
        "content": "<p>ok so we're definitely going to want some kind of callback that says \"<em>try</em> to evaluate this constant with this substitution\"</p>",
        "id": 193242688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291082
    },
    {
        "content": "<p>and if it fails and comes back too generic, that's fine, it's just a dead-end so to speak</p>",
        "id": 193242742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291116
    },
    {
        "content": "<p>yupp, and only WF would actually ever error for <code>TooGeneric</code>, normalization just doesn't replace the unevaluated constant</p>",
        "id": 193242743,
        "sender_full_name": "eddyb",
        "timestamp": 1586291116
    },
    {
        "content": "<p>I think I'm lost</p>",
        "id": 193242859,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586291171
    },
    {
        "content": "<p>(oops)</p>",
        "id": 193242879,
        "sender_full_name": "eddyb",
        "timestamp": 1586291184
    },
    {
        "content": "<p>You mean that normalization doesn't evaluate too far, if I read that right</p>",
        "id": 193242882,
        "sender_full_name": "detrumi",
        "timestamp": 1586291189
    },
    {
        "content": "<p>normalization evaluates what it can</p>",
        "id": 193242914,
        "sender_full_name": "eddyb",
        "timestamp": 1586291205
    },
    {
        "content": "<p>yeah, I think from chalk's pov there'd be some rule like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">ConstNormalize</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"o\">&lt;</span><span class=\"n\">Subst</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">C1</span><span class=\"p\">)</span><span class=\"w\"> </span>:<span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Evaluate</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"o\">&lt;</span><span class=\"n\">Subst</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- this is an &quot;intrinsic&quot; that invokes that callback; if TooGeneric is returned, it fails and searches for other applicable rules</span>\n<span class=\"w\">    </span><span class=\"n\">C1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C2</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193242921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291207
    },
    {
        "content": "<p>I'm not sure that made things any clearer ;)</p>",
        "id": 193242968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291234
    },
    {
        "content": "<p>point is, we'll have some rules that try to invoke that callback. if it succeeds, then they may succeed in proving equality, but else they fail in proving it</p>",
        "id": 193242995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291250
    },
    {
        "content": "<p>chalk never reports errors anyway</p>",
        "id": 193243011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291260
    },
    {
        "content": "<p>WF requires that either the constant fully evaluates <em>or</em> there's something (e.g. a <code>where</code> clause) that guarantees the same WF check will be performed in the users of this definition</p>",
        "id": 193243013,
        "sender_full_name": "eddyb",
        "timestamp": 1586291260
    },
    {
        "content": "<p>And with callback, you mean that chalk calls into rustc (or whatever called chalk), but rustc doesn't really get control back, it just handles that callback and chalk continues on its way, right?</p>",
        "id": 193243096,
        "sender_full_name": "detrumi",
        "timestamp": 1586291288
    },
    {
        "content": "<p>yeah that's fine, WF isn't our problem yet ;)</p>",
        "id": 193243183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291341
    },
    {
        "content": "<p>though it probably will become it</p>",
        "id": 193243198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291352
    },
    {
        "content": "<p>I guess we'd need some concept of \"can be evaluated\"</p>",
        "id": 193243221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291364
    },
    {
        "content": "<p>I mean chalk is defining the wf rules so it'll have to be able to express them...</p>",
        "id": 193243244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291373
    },
    {
        "content": "<p>\"can be evaluated\" is not the best, \"will evaluate successfully\" is probably closer?</p>",
        "id": 193243281,
        "sender_full_name": "eddyb",
        "timestamp": 1586291396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E07/near/193243096\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E07/near/193243096\">said</a>:</p>\n<blockquote>\n<p>And with callback, you mean that chalk calls into rustc (or whatever called chalk), but rustc doesn't really get control back, it just handles that callback and chalk continues on its way, right?</p>\n</blockquote>\n<p>right, just like e.g. the callbacks that fetch a <code>TraitDatum</code> given its def-id and so forth</p>",
        "id": 193243284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291397
    },
    {
        "content": "<p>but...a bit more meaty</p>",
        "id": 193243323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291403
    },
    {
        "content": "<p>ah, which reminds me, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, does const evaluation ever need to resolve traits? I guess it can</p>",
        "id": 193243377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291417
    },
    {
        "content": "<p>in order to handle associated constants</p>",
        "id": 193243386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291424
    },
    {
        "content": "<p>heh</p>",
        "id": 193243408,
        "sender_full_name": "eddyb",
        "timestamp": 1586291437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E07/near/193243281\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E07/near/193243281\">said</a>:</p>\n<blockquote>\n<p>\"can be evaluated\" is not the best, \"will evaluate successfully\" is probably closer?</p>\n</blockquote>\n<p>yeah, I want to circle back to that in a bit... to get some better examples</p>",
        "id": 193243413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291441
    },
    {
        "content": "<p>miri is mutually recursive with a lot of rustc</p>",
        "id": 193243417,
        "sender_full_name": "eddyb",
        "timestamp": 1586291444
    },
    {
        "content": "<p>sigh, this seems pretty relevant to the ultimate solver design as well</p>",
        "id": 193243455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291468
    },
    {
        "content": "<p>(I think it actually favors the \"recursive solver\" design somewhat)</p>",
        "id": 193243477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291477
    },
    {
        "content": "<p>like you can go typeck -&gt; miri -&gt; borrowck -&gt; MIR building -&gt; typeck</p>",
        "id": 193243496,
        "sender_full_name": "eddyb",
        "timestamp": 1586291490
    },
    {
        "content": "<p>uhh, what</p>",
        "id": 193243531,
        "sender_full_name": "detrumi",
        "timestamp": 1586291510
    },
    {
        "content": "<p>yeah but I don't care about that part, from chalk's perspective :)</p>",
        "id": 193243543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291518
    },
    {
        "content": "<p>wow</p>",
        "id": 193243544,
        "sender_full_name": "detrumi",
        "timestamp": 1586291518
    },
    {
        "content": "<p>miri evaluates Rust code</p>",
        "id": 193243545,
        "sender_full_name": "eddyb",
        "timestamp": 1586291519
    },
    {
        "content": "<p>note: those would be doing type-checking and other things on different functions</p>",
        "id": 193243601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291531
    },
    {
        "content": "<p>or constants. \"bodies\" in general</p>",
        "id": 193243618,
        "sender_full_name": "eddyb",
        "timestamp": 1586291544
    },
    {
        "content": "<p>if e.g. <code>typeck_tables</code> is queried on the same body, that'd be a query cycle error</p>",
        "id": 193243651,
        "sender_full_name": "eddyb",
        "timestamp": 1586291558
    },
    {
        "content": "<p>I was assuming that consts had a known type, so wouldn't need typechecking. Or does typechecking also do some const checks?</p>",
        "id": 193243707,
        "sender_full_name": "detrumi",
        "timestamp": 1586291588
    },
    {
        "content": "<p>sorry, body type-checking</p>",
        "id": 193243740,
        "sender_full_name": "eddyb",
        "timestamp": 1586291604
    },
    {
        "content": "<p>not the signature, the code inside the body</p>",
        "id": 193243760,
        "sender_full_name": "eddyb",
        "timestamp": 1586291612
    },
    {
        "content": "<p><code>const</code> is just a <code>const fn</code> w/o args, really</p>",
        "id": 193243781,
        "sender_full_name": "eddyb",
        "timestamp": 1586291622
    },
    {
        "content": "<p>and this applies for anonymous consts as well</p>",
        "id": 193243815,
        "sender_full_name": "eddyb",
        "timestamp": 1586291642
    },
    {
        "content": "<p>hmm... anyways, where were we</p>",
        "id": 193243890,
        "sender_full_name": "detrumi",
        "timestamp": 1586291660
    },
    {
        "content": "<p>you could probably run Chalk at compile-time in the length const expression for an array type :P</p>",
        "id": 193243920,
        "sender_full_name": "eddyb",
        "timestamp": 1586291673
    },
    {
        "content": "<p>what I mean is, the intermediate steps don't matter too much, but what does matter is if you get a cycle where</p>\n<ul>\n<li>proving some goal <code>X</code></li>\n<li>requires evaluating a constant</li>\n<li>which in turn requires proving that same goal <code>X</code></li>\n</ul>",
        "id": 193243926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291676
    },
    {
        "content": "<p>(eventually)</p>",
        "id": 193243928,
        "sender_full_name": "eddyb",
        "timestamp": 1586291678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so, unevaluated consts in <code>impl</code> headers?</p>",
        "id": 193244019,
        "sender_full_name": "eddyb",
        "timestamp": 1586291732
    },
    {
        "content": "<p>or I guess <code>where</code> clauses</p>",
        "id": 193244041,
        "sender_full_name": "eddyb",
        "timestamp": 1586291749
    },
    {
        "content": "<p>all the places where they cause query cycles today (if we expose generic parameters in scope to them) w/o lazy normalization :)</p>",
        "id": 193244065,
        "sender_full_name": "eddyb",
        "timestamp": 1586291760
    },
    {
        "content": "<p>I'm not sure it's the same set of places, nor if this is really a problem, but it's something we'll want to dig a bit more into</p>",
        "id": 193244163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291803
    },
    {
        "content": "<p>I mean in some sense it's just an unsatisfiable cycle and that's not unusual</p>",
        "id": 193244211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291835
    },
    {
        "content": "<p>but I always find this  a bit hard to reason about without some good examples</p>",
        "id": 193244245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291865
    },
    {
        "content": "<p>basically <code>Foo: Trait&lt;[(); 123]&gt;</code> matching <code>impl Trait&lt;[(); {complex expr}]&gt; for Foo</code> where the \"complex expr\" needs to prove <code>Foo: Trait&lt;[(); 123]&gt;</code></p>",
        "id": 193244253,
        "sender_full_name": "eddyb",
        "timestamp": 1586291871
    },
    {
        "content": "<p>I can probably give you an example if you want</p>",
        "id": 193244338,
        "sender_full_name": "eddyb",
        "timestamp": 1586291910
    },
    {
        "content": "<p>right, I mean, that's probably just an error.</p>",
        "id": 193244351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291920
    },
    {
        "content": "<p>examples are helpful</p>",
        "id": 193244375,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586291944
    },
    {
        "content": "<p>i was going to make a hackmd and start to take down some notes</p>",
        "id": 193244415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291976
    },
    {
        "content": "<p><a href=\"https://hackmd.io/n0Um5UtyS8md4l9r7B8rCw\" title=\"https://hackmd.io/n0Um5UtyS8md4l9r7B8rCw\">hackmd</a></p>",
        "id": 193244430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291989
    },
    {
        "content": "<p>since it seems like we're 40 minutes in and it's time to start collating a bit on what steps we can take</p>",
        "id": 193244441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586291998
    },
    {
        "content": "<p>and what to figure out a bit more later on</p>",
        "id": 193244487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292004
    },
    {
        "content": "<p>so, for an initial implementation</p>",
        "id": 193244554,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292026
    },
    {
        "content": "<p>do we want to try to get as far as we can <em>without</em> any callbacks?</p>",
        "id": 193244563,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292039
    },
    {
        "content": "<p>huh, so that would be a function, with as return type some trait that gets a const expr as argument...</p>",
        "id": 193244564,
        "sender_full_name": "detrumi",
        "timestamp": 1586292040
    },
    {
        "content": "<p>not sure if the extra array wrapping around it really matters here?</p>",
        "id": 193244585,
        "sender_full_name": "detrumi",
        "timestamp": 1586292058
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=251afd8d83250417feead2efbf7638d7\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=251afd8d83250417feead2efbf7638d7\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=251afd8d83250417feead2efbf7638d7</a></p>\n<div class=\"codehilite\"><pre><span></span>  = note: ...which requires evaluating trait selection obligation `Foo: Trait&lt;[(); 0]&gt;`...\n</pre></div>",
        "id": 193244594,
        "sender_full_name": "eddyb",
        "timestamp": 1586292062
    },
    {
        "content": "<p>that example has a trait operation right in the middle of the cycle</p>",
        "id": 193244625,
        "sender_full_name": "eddyb",
        "timestamp": 1586292082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E07/near/193244563\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E07/near/193244563\">said</a>:</p>\n<blockquote>\n<p>do we want to try to get as far as we can <em>without</em> any callbacks?</p>\n</blockquote>\n<p>yeah, this seems good -- I mean the callbacks are only needed to support things like <code>{1+2}</code></p>",
        "id": 193244637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292088
    },
    {
        "content": "<p>i.e., you could also have a perfectly coherent system that had associated constants but the only 'constant values' were literals</p>",
        "id": 193244660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> the array makes it compile on stable :P</p>",
        "id": 193244666,
        "sender_full_name": "eddyb",
        "timestamp": 1586292105
    },
    {
        "content": "<p>ah.</p>",
        "id": 193244682,
        "sender_full_name": "detrumi",
        "timestamp": 1586292120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'd start with parameters, placeholders, etc.</p>",
        "id": 193244791,
        "sender_full_name": "eddyb",
        "timestamp": 1586292169
    },
    {
        "content": "<p>inference variables</p>",
        "id": 193244800,
        "sender_full_name": "eddyb",
        "timestamp": 1586292174
    },
    {
        "content": "<p>right, that's the easy stuff</p>",
        "id": 193244805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292178
    },
    {
        "content": "<p>which is what <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> was suggesting basically</p>",
        "id": 193244817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292186
    },
    {
        "content": "<p>you can support a subset of const generics without supporting const expressions :P</p>",
        "id": 193244820,
        "sender_full_name": "eddyb",
        "timestamp": 1586292188
    },
    {
        "content": "<p>which makes me quite happy ^_^</p>",
        "id": 193244828,
        "sender_full_name": "eddyb",
        "timestamp": 1586292196
    },
    {
        "content": "<p>cc me on this stuff etc.</p>",
        "id": 193244834,
        "sender_full_name": "eddyb",
        "timestamp": 1586292200
    },
    {
        "content": "<p>I think it should be <em>fairly</em> straightforward to do</p>",
        "id": 193244854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292213
    },
    {
        "content": "<p>and then with that in place we can layer on const expression evaluation</p>",
        "id": 193244870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292227
    },
    {
        "content": "<p>/me has recently been bughunting the implementation of const generics in rustc</p>",
        "id": 193244873,
        "sender_full_name": "eddyb",
        "timestamp": 1586292228
    },
    {
        "content": "<p>seems like a good plan</p>",
        "id": 193244878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292232
    },
    {
        "content": "<p>And it would also make it clear what's left: first support constants in all the right places, and support const expressions later</p>",
        "id": 193244886,
        "sender_full_name": "detrumi",
        "timestamp": 1586292238
    },
    {
        "content": "<p>The definition of constant values, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> -- that's currently in rustc, right? and miri \"uses it\" from there?</p>",
        "id": 193244947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292262
    },
    {
        "content": "<p>yeah, <code>rustc_middle::mir::interpret</code></p>",
        "id": 193244965,
        "sender_full_name": "eddyb",
        "timestamp": 1586292276
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/interpret/struct.RawConst.html\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/interpret/struct.RawConst.html\"><code>RawConst</code></a>?</p>",
        "id": 193244971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292280
    },
    {
        "content": "<p><code>ConstValue</code> I would expect?</p>",
        "id": 193244985,
        "sender_full_name": "eddyb",
        "timestamp": 1586292289
    },
    {
        "content": "<p>ah yeah</p>",
        "id": 193245000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292301
    },
    {
        "content": "<p>that looks right</p>",
        "id": 193245006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292303
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/interpret/enum.ConstValue.html\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/interpret/enum.ConstValue.html\"><code>ConstValue</code></a></p>",
        "id": 193245026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292312
    },
    {
        "content": "<p>oh yeah the query is something like <code>const_eval_validated</code></p>",
        "id": 193245031,
        "sender_full_name": "eddyb",
        "timestamp": 1586292314
    },
    {
        "content": "<p>Hm, would chalk also need config for what it accepts, for when features are nightly-only for example?</p>",
        "id": 193245059,
        "sender_full_name": "detrumi",
        "timestamp": 1586292319
    },
    {
        "content": "<p>eventually probably</p>",
        "id": 193245152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292336
    },
    {
        "content": "<p>well maybe</p>",
        "id": 193245165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292339
    },
    {
        "content": "<p>sounds similar to what we're expecting with implied bounds</p>",
        "id": 193245169,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292339
    },
    {
        "content": "<p>yeah</p>",
        "id": 193245189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292343
    },
    {
        "content": "<p>something funny to me is that chalk-ir could have const generics that are all <code>usize</code>, assuming it already has a notion of array types (but maybe it doesn't?)</p>",
        "id": 193245196,
        "sender_full_name": "eddyb",
        "timestamp": 1586292346
    },
    {
        "content": "<p>I'd like to start with just simple constant values</p>",
        "id": 193245216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292359
    },
    {
        "content": "<p>probably just scalar integers</p>",
        "id": 193245262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292365
    },
    {
        "content": "<p>but really I think this can be part of the <code>Interner</code></p>",
        "id": 193245270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292371
    },
    {
        "content": "<p>my vote is for unsigned integers</p>",
        "id": 193245274,
        "sender_full_name": "eddyb",
        "timestamp": 1586292373
    },
    {
        "content": "<p>at least to start</p>",
        "id": 193245280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292374
    },
    {
        "content": "<p>the new Rust mangling also started off with just unsigned integers</p>",
        "id": 193245345,
        "sender_full_name": "eddyb",
        "timestamp": 1586292386
    },
    {
        "content": "<p><code>I::ConstValue</code> in other words</p>",
        "id": 193245362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292389
    },
    {
        "content": "<p>and then chalk-integration (for unit testing) can just use <code>usize</code></p>",
        "id": 193245445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292404
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 193245471,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292416
    },
    {
        "content": "<p>oh is that called <code>chalk-integration</code>? for some reason I had <code>chalk-ir</code> stuck in my head</p>",
        "id": 193245502,
        "sender_full_name": "eddyb",
        "timestamp": 1586292427
    },
    {
        "content": "<p>chalk-ir is the \"type library\"</p>",
        "id": 193245697,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292466
    },
    {
        "content": "<p>chalk-integration is the unit testing harness</p>",
        "id": 193245702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292466
    },
    {
        "content": "<p>more or less</p>",
        "id": 193245714,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292468
    },
    {
        "content": "<p>ah I see</p>",
        "id": 193245729,
        "sender_full_name": "eddyb",
        "timestamp": 1586292478
    },
    {
        "content": "<p>rustc would never depend on chalk-integration</p>",
        "id": 193245731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292480
    },
    {
        "content": "<p>Hm, isn't most of const generics about integers?</p>",
        "id": 193245736,
        "sender_full_name": "detrumi",
        "timestamp": 1586292482
    },
    {
        "content": "<p>the usefulness, yeah</p>",
        "id": 193245786,
        "sender_full_name": "eddyb",
        "timestamp": 1586292492
    },
    {
        "content": "<p>yeah, rustc depends on chalk-ir, chalk-solve, and chalk-rust-ir</p>",
        "id": 193245848,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292505
    },
    {
        "content": "<p>but they're more flexible than that (well, basically structurally-matcheable ADTs with integer leaves)</p>",
        "id": 193245926,
        "sender_full_name": "eddyb",
        "timestamp": 1586292518
    },
    {
        "content": "<p>(in the current PR)</p>",
        "id": 193245935,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E07/near/193245848\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E07/near/193245848\">said</a>:</p>\n<blockquote>\n<p>yeah, rustc depends on chalk-ir, chalk-solve, and chalk-rust-ir</p>\n</blockquote>\n<p>that sounds right</p>",
        "id": 193246034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292565
    },
    {
        "content": "<p>Ok, this was pretty productive</p>",
        "id": 193246047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292574
    },
    {
        "content": "<p>I guess one question to ask if \"when\" -- do we want to start spelling out issues, or wait until next sprint :)</p>",
        "id": 193246061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292590
    },
    {
        "content": "<p>I think next sprint</p>",
        "id": 193246128,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292613
    },
    {
        "content": "<p>I'm inclined to say \"wait\", keep focused, but given the rate we're going through things we may need to start spelling out the issues</p>",
        "id": 193246133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292618
    },
    {
        "content": "<p>yeah, me too</p>",
        "id": 193246137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292620
    },
    {
        "content": "<p>is when we make const support in Chalk a goal</p>",
        "id": 193246148,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292623
    },
    {
        "content": "<p>I think we can encode some of the steps into the task-tree</p>",
        "id": 193246161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292626
    },
    {
        "content": "<p>here real late :&lt;</p>",
        "id": 193246171,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1586292630
    },
    {
        "content": "<p>btw if anyone is curious <em>why</em> integer leaves: <a href=\"https://github.com/rust-lang/rust/issues/70889#issuecomment-610565240\" title=\"https://github.com/rust-lang/rust/issues/70889#issuecomment-610565240\">https://github.com/rust-lang/rust/issues/70889#issuecomment-610565240</a></p>",
        "id": 193246180,
        "sender_full_name": "eddyb",
        "timestamp": 1586292632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ^^</p>",
        "id": 193246186,
        "sender_full_name": "eddyb",
        "timestamp": 1586292637
    },
    {
        "content": "<p>#rust-offtopic back in the day broke <em>Idris</em></p>",
        "id": 193246202,
        "sender_full_name": "eddyb",
        "timestamp": 1586292647
    },
    {
        "content": "<p>I was wondering <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> where you were :)</p>",
        "id": 193246203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292647
    },
    {
        "content": "<p>by shoving floats into types</p>",
        "id": 193246213,
        "sender_full_name": "eddyb",
        "timestamp": 1586292652
    },
    {
        "content": "<p>yea sorry lost track of time</p>",
        "id": 193246219,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1586292654
    },
    {
        "content": "<blockquote>\n<p>_&lt;</p>\n</blockquote>",
        "id": 193246227,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1586292659
    },
    {
        "content": "<p>did i miss anything relevant to what I've been working on?</p>",
        "id": 193246253,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1586292679
    },
    {
        "content": "<p>i dont have much to report</p>",
        "id": 193246257,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1586292683
    },
    {
        "content": "<p>no, except that <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> has done a lot of the built-in trait stuff</p>",
        "id": 193246276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292693
    },
    {
        "content": "<p>which I think you were working on?</p>",
        "id": 193246290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292702
    },
    {
        "content": "<p>okay, yea i saw a lot of that on github</p>",
        "id": 193246303,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1586292710
    },
    {
        "content": "<p>but we can find you some tasks :)</p>",
        "id": 193246311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292714
    },
    {
        "content": "<p>okay</p>",
        "id": 193246322,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1586292720
    },
    {
        "content": "<p>Waiting with const support sounds fine, let's polish the ongoing stuff a bit more first</p>",
        "id": 193246379,
        "sender_full_name": "detrumi",
        "timestamp": 1586292739
    },
    {
        "content": "<p>perhaps an important note:</p>",
        "id": 193246401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292757
    },
    {
        "content": "<p>currently in my PR, for consts I'm just \"using\" a <code>()</code></p>",
        "id": 193246427,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292775
    },
    {
        "content": "<p>PS, while we have you <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> -- I want to rename <code>Fold</code> to <code>Map</code> and <code>Visit</code> to <code>Fold</code> (also in rustc), do you agree?</p>",
        "id": 193246520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292838
    },
    {
        "content": "<p>that is, the \"type folder\" and \"type visitor\"</p>",
        "id": 193246564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292844
    },
    {
        "content": "<p>I'd keep <code>Visit</code> but <code>Map</code> makes sense</p>",
        "id": 193246586,
        "sender_full_name": "eddyb",
        "timestamp": 1586292861
    },
    {
        "content": "<p>maybe <code>Transform</code>?</p>",
        "id": 193246590,
        "sender_full_name": "eddyb",
        "timestamp": 1586292865
    },
    {
        "content": "<p>The chalk visit is I guess closer to fold than the rustc one</p>",
        "id": 193246617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292879
    },
    {
        "content": "<p>heh</p>",
        "id": 193246637,
        "sender_full_name": "eddyb",
        "timestamp": 1586292886
    },
    {
        "content": "<p>in that it's not hard-coded to \"search for something\"</p>",
        "id": 193246652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292890
    },
    {
        "content": "<p>On that note, I was wondering</p>",
        "id": 193246673,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292902
    },
    {
        "content": "<p>the rustc one could be called <code>Find</code> =)</p>",
        "id": 193246680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292905
    },
    {
        "content": "<p>but I'd like to unify them eventually, which is part of why I'm asking</p>",
        "id": 193246701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292914
    },
    {
        "content": "<p>Can the current <code>Fold</code> just be a type of <code>Visit</code></p>",
        "id": 193246714,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586292922
    },
    {
        "content": "<p>no</p>",
        "id": 193246724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292929
    },
    {
        "content": "<p>because</p>",
        "id": 193246734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292934
    },
    {
        "content": "<p>IMO <code>Visit</code> with <code>Result</code> returns and associated type Error in the <code>TypeVisitor</code> should be what we do</p>",
        "id": 193246738,
        "sender_full_name": "eddyb",
        "timestamp": 1586292937
    },
    {
        "content": "<p>the result type varies depending on what you are folding</p>",
        "id": 193246743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292939
    },
    {
        "content": "<p><code>TryVisit</code> if you want :P</p>",
        "id": 193246763,
        "sender_full_name": "eddyb",
        "timestamp": 1586292958
    },
    {
        "content": "<p>the basic difference is: <code>Fold</code> (today) keeps the same types (roughly...) as the thing being mapped, whereas <code>Visit</code> (today) processes a single value of type <code>R</code> across all the trees</p>",
        "id": 193246844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292990
    },
    {
        "content": "<p>ah, yeah, so chalk's <code>Fold</code> is fallible</p>",
        "id": 193246853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292995
    },
    {
        "content": "<p>I forget if <code>Visit</code> is</p>",
        "id": 193246858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586292999
    },
    {
        "content": "<p>see: <code>try_for_each</code> in <code>Iterator</code></p>",
        "id": 193246868,
        "sender_full_name": "eddyb",
        "timestamp": 1586293002
    },
    {
        "content": "<p>What does a custom derive for Fold mean in wg-traits#16?</p>",
        "id": 193246901,
        "sender_full_name": "Areredify",
        "timestamp": 1586293020
    },
    {
        "content": "<p>I guess not</p>",
        "id": 193246909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"251766\">Areredify</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E07/near/193246901\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E07/near/193246901\">said</a>:</p>\n<blockquote>\n<p>What does a custom derive for Fold mean in wg-traits#16?</p>\n</blockquote>\n<p>rustc doesn't have one</p>",
        "id": 193246925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293032
    },
    {
        "content": "<p>Ah yeah, okay</p>",
        "id": 193246933,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586293036
    },
    {
        "content": "<p>I think that's what I was referring to</p>",
        "id": 193246935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293036
    },
    {
        "content": "<p>we have a <code>TypeFoldable</code> derive now I think?</p>",
        "id": 193246965,
        "sender_full_name": "eddyb",
        "timestamp": 1586293050
    },
    {
        "content": "<p>Visit is infallible</p>",
        "id": 193246968,
        "sender_full_name": "Areredify",
        "timestamp": 1586293054
    },
    {
        "content": "<p>we should've added it ages ago but we have it now</p>",
        "id": 193246975,
        "sender_full_name": "eddyb",
        "timestamp": 1586293057
    },
    {
        "content": "<p>ok ok I am out of date :)</p>",
        "id": 193246984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293064
    },
    {
        "content": "<p>I didn't see it go by</p>",
        "id": 193246989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293067
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(HashStable, TypeFoldable)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Predicate</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193247059,
        "sender_full_name": "eddyb",
        "timestamp": 1586293093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I remember pinging you on it :P</p>",
        "id": 193247072,
        "sender_full_name": "eddyb",
        "timestamp": 1586293101
    },
    {
        "content": "<p>lol</p>",
        "id": 193247090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293117
    },
    {
        "content": "<p>I mean.. \"of course I remember that\"</p>",
        "id": 193247114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293136
    },
    {
        "content": "<p>anyway, <span aria-label=\"point right\" class=\"emoji emoji-1f449\" role=\"img\" title=\"point right\">:point_right:</span> <code>rustc_macros</code></p>",
        "id": 193247127,
        "sender_full_name": "eddyb",
        "timestamp": 1586293144
    },
    {
        "content": "<p>if you want to add more derives (they're super easy to implement, I looked recently at the impl)</p>",
        "id": 193247152,
        "sender_full_name": "eddyb",
        "timestamp": 1586293165
    },
    {
        "content": "<p>that's a sign that rustc picked the right trait to derive, I feel we've had less success with that in chalk</p>",
        "id": 193247355,
        "sender_full_name": "detrumi",
        "timestamp": 1586293261
    },
    {
        "content": "<p>any trait should be easy</p>",
        "id": 193247415,
        "sender_full_name": "eddyb",
        "timestamp": 1586293282
    },
    {
        "content": "<p>judging from the implementation :P</p>",
        "id": 193247471,
        "sender_full_name": "eddyb",
        "timestamp": 1586293291
    },
    {
        "content": "<p>it's not super hard..? but we've got a bit more boilerplate than I'd like</p>",
        "id": 193247484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293295
    },
    {
        "content": "<p>unless there's a lot of corner cases <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193247506,
        "sender_full_name": "detrumi",
        "timestamp": 1586293306
    },
    {
        "content": "<p>well you don't put corner cases in derives :P</p>",
        "id": 193247577,
        "sender_full_name": "eddyb",
        "timestamp": 1586293326
    },
    {
        "content": "<p>you put them in custom impls</p>",
        "id": 193247588,
        "sender_full_name": "eddyb",
        "timestamp": 1586293332
    },
    {
        "content": "<p>in general I think writing derives is a bit harder than it should be, though I suspect <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> has some super crates I should be using to make it easier</p>",
        "id": 193247594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293335
    },
    {
        "content": "<p>you're not using <code>synstructure</code>?</p>",
        "id": 193247614,
        "sender_full_name": "eddyb",
        "timestamp": 1586293348
    },
    {
        "content": "<p>nah, see, exactly :)</p>",
        "id": 193247628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293356
    },
    {
        "content": "<p>that's a crime <span aria-label=\"oncoming police car\" class=\"emoji emoji-1f694\" role=\"img\" title=\"oncoming police car\">:oncoming_police_car:</span></p>",
        "id": 193247643,
        "sender_full_name": "eddyb",
        "timestamp": 1586293366
    },
    {
        "content": "<p>PRs welcome :)</p>",
        "id": 193247653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293372
    },
    {
        "content": "<p>/me goes to file an issue ...</p>",
        "id": 193247663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293377
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_macros/src/type_foldable.rs\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_macros/src/type_foldable.rs\">https://github.com/rust-lang/rust/blob/master/src/librustc_macros/src/type_foldable.rs</a></p>",
        "id": 193247680,
        "sender_full_name": "eddyb",
        "timestamp": 1586293384
    },
    {
        "content": "<p>this is the entire thing</p>",
        "id": 193247686,
        "sender_full_name": "eddyb",
        "timestamp": 1586293387
    },
    {
        "content": "<p>visit is <em>three lines</em> <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_macros/src/type_foldable.rs#L18-L20\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_macros/src/type_foldable.rs#L18-L20\">https://github.com/rust-lang/rust/blob/master/src/librustc_macros/src/type_foldable.rs#L18-L20</a></p>",
        "id": 193247714,
        "sender_full_name": "eddyb",
        "timestamp": 1586293403
    },
    {
        "content": "<p>Compare that to this: <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-derive/src/lib.rs\" title=\"https://github.com/rust-lang/chalk/blob/master/chalk-derive/src/lib.rs\">https://github.com/rust-lang/chalk/blob/master/chalk-derive/src/lib.rs</a></p>",
        "id": 193247722,
        "sender_full_name": "detrumi",
        "timestamp": 1586293411
    },
    {
        "content": "<p>fold is <em>nine lines</em> <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_macros/src/type_foldable.rs#L9-L17\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_macros/src/type_foldable.rs#L9-L17\">https://github.com/rust-lang/rust/blob/master/src/librustc_macros/src/type_foldable.rs#L9-L17</a></p>",
        "id": 193247743,
        "sender_full_name": "eddyb",
        "timestamp": 1586293422
    },
    {
        "content": "<p>and 3 of those are just closing braces :P</p>",
        "id": 193247755,
        "sender_full_name": "eddyb",
        "timestamp": 1586293431
    },
    {
        "content": "<p>Looks very cool, thanks for informing us</p>",
        "id": 193247808,
        "sender_full_name": "detrumi",
        "timestamp": 1586293451
    },
    {
        "content": "<p>part of is it that we've maintained the ability to be generic over things like <code>HasInterner</code></p>",
        "id": 193247888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293483
    },
    {
        "content": "<p>thank <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> :P</p>",
        "id": 193247892,
        "sender_full_name": "eddyb",
        "timestamp": 1586293486
    },
    {
        "content": "<p>but it can definitely be made much nicer...</p>",
        "id": 193247904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293489
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/chalk/issues/381\" title=\"https://github.com/rust-lang/chalk/issues/381\">https://github.com/rust-lang/chalk/issues/381</a></p>",
        "id": 193247985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586293519
    }
]