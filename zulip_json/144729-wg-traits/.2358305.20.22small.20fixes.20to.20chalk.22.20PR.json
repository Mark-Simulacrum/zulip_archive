[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> you have <code>(WIP)</code> in the title of <a href=\"https://github.com/rust-lang/rust/pull/58305\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58305\">https://github.com/rust-lang/rust/pull/58305</a>, is there a reason not to r+?</p>",
        "id": 159189744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> there is at least one, in the bug I fixed in the unification code (where I needed to swap <code>a_scopes</code> and <code>b_scopes</code>), I think I also need to flip the variance, what do you think?</p>",
        "id": 159189826,
        "sender_full_name": "scalexm",
        "timestamp": 1550868722
    },
    {
        "content": "<p>that part certainly looked unfortunate</p>",
        "id": 159189870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868745
    },
    {
        "content": "<p>mm yes I guess you do</p>",
        "id": 159189876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868754
    },
    {
        "content": "<p>it feels maybe like we should encapsulate that to a method?</p>",
        "id": 159189889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868768
    },
    {
        "content": "<p>I'd rather we don't have to flip at all, of course</p>",
        "id": 159189899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868774
    },
    {
        "content": "<p>Do you have another solution in mind? The whole thing seems a bit fragile</p>",
        "id": 159189900,
        "sender_full_name": "scalexm",
        "timestamp": 1550868779
    },
    {
        "content": "<p>I didn't look very closely but I guess the idea is that the logic would basically be identical either way?</p>",
        "id": 159189923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868800
    },
    {
        "content": "<p>i.e., you want some code to handle the \"type/var\" case or whatever</p>",
        "id": 159189934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868812
    },
    {
        "content": "<p>Right</p>",
        "id": 159189940,
        "sender_full_name": "scalexm",
        "timestamp": 1550868817
    },
    {
        "content": "<p>Regardless of the sides of the two types</p>",
        "id": 159189944,
        "sender_full_name": "scalexm",
        "timestamp": 1550868824
    },
    {
        "content": "<p>Yeah</p>",
        "id": 159190049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868903
    },
    {
        "content": "<p>I'll have to pull up the code and look a bit more</p>",
        "id": 159190060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868906
    },
    {
        "content": "<p>It doesn't feel great</p>",
        "id": 159190061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868908
    },
    {
        "content": "<p>Other than that, I was hoping to be able to do some more work on that PR, namely trying to implement the rules for trait objects directly in rustc, and also trying to investigate the inference error I described in the PR description</p>",
        "id": 159190088,
        "sender_full_name": "scalexm",
        "timestamp": 1550868938
    },
    {
        "content": "<p>OK</p>",
        "id": 159190166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868989
    },
    {
        "content": "<p>But I guess we could merge it once we have figured out how to cleanly fix the unification bug, there are some useful additions already in that PR</p>",
        "id": 159190200,
        "sender_full_name": "scalexm",
        "timestamp": 1550869029
    },
    {
        "content": "<p>I am +1 on experimenting around the rules for trait objects, though I remain .. not fully satisfied with the solutions on the table thus far.</p>",
        "id": 159190202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550869031
    },
    {
        "content": "<p>Yeah, it seems like it would be better to merge and work in a separate PR</p>",
        "id": 159190213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550869044
    },
    {
        "content": "<p>Not sure if you saw, but in <a href=\"#narrow/stream/144729-t-compiler.2Fwg-traits/topic/structure.20of.20the.20working.20group\" title=\"#narrow/stream/144729-t-compiler.2Fwg-traits/topic/structure.20of.20the.20working.20group\">the \"structure of the working group\" topic</a> I've been trying to draw up a kind of <a href=\"https://paper.dropbox.com/doc/Traits-Roadmap-sketch--AYEYyqaNyA~~NOuXZb2hCbyOAg-m6hucUslp7GihsY3SjNN2\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Traits-Roadmap-sketch--AYEYyqaNyA~~NOuXZb2hCbyOAg-m6hucUslp7GihsY3SjNN2\">\"master list\" of actionable things around traits</a>. One of the things I wanted to do was to sketch out the next steps around chalk integration too. I know we've been over this many times. :) Sorry</p>",
        "id": 159190316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550869098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well, personally I think I am about satisfied with the solution I described for trait objects :) there are still not handled like « existential » types but I don’t really see how we could do that, but yes we can definitely leave that question open and experiment around it until we have some more experience</p>",
        "id": 159190429,
        "sender_full_name": "scalexm",
        "timestamp": 1550869193
    },
    {
        "content": "<p>I saw the topic but did not read it yet</p>",
        "id": 159190481,
        "sender_full_name": "scalexm",
        "timestamp": 1550869206
    },
    {
        "content": "<p>it may be that I just need to really devote some time to understanding it better</p>",
        "id": 159190490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550869211
    },
    {
        "content": "<p>I mean I'm not <em>dissatisfied</em> :)</p>",
        "id": 159190500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550869217
    },
    {
        "content": "<p>I could easily see that the rules you are proposing are indeed the ones we wind up with</p>",
        "id": 159190509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550869226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we should discuss a solution about how best to make <code>relate_ty_var</code> insensible to the direction of the relation (e.g. not having to swap scopes / variance just to be able to correctly reuse that function)</p>",
        "id": 160383401,
        "sender_full_name": "scalexm",
        "timestamp": 1552164864
    },
    {
        "content": "<p>that's probably the only blocker to <a href=\"https://github.com/rust-lang/rust/issues/58305\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58305\">#58305</a></p>",
        "id": 160383406,
        "sender_full_name": "scalexm",
        "timestamp": 1552164888
    },
    {
        "content": "<p>after that, I'm still unsure how much progress we want to do on the \"chalk in rustc\" side and what direction we should take</p>",
        "id": 160383418,
        "sender_full_name": "scalexm",
        "timestamp": 1552164913
    },
    {
        "content": "<p>e.g. maybe we should be focusing on improving the chalk crate so that we can share more code, like to lowering stuff etc</p>",
        "id": 160383424,
        "sender_full_name": "scalexm",
        "timestamp": 1552164933
    },
    {
        "content": "<p>or else focus on the other problems we encountered like handling lifetime requirements which come from unification, or the \"ambiguity\" bug for open goals <code>?T: Trait</code> (goal selection order etc)</p>",
        "id": 160383473,
        "sender_full_name": "scalexm",
        "timestamp": 1552164992
    },
    {
        "content": "<p>plus adding things like more builtin impls etc so that the new trait solver in rustc can compile more programs</p>",
        "id": 160383537,
        "sender_full_name": "scalexm",
        "timestamp": 1552165187
    },
    {
        "content": "<blockquote>\n<p>we should discuss a solution about how best to make <code>relate_ty_var</code> insensible to the direction of the relation (e.g. not having to swap scopes / variance just to be able to correctly reuse that function)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> to be clear, we're talking about <a href=\"https://github.com/rust-lang/rust/blob/248531af3ff86cdd4465220898c83352eff65690/src/librustc/infer/nll_relate/mod.rs#L425-L431\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/248531af3ff86cdd4465220898c83352eff65690/src/librustc/infer/nll_relate/mod.rs#L425-L431\">this code</a>, right?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                    </span><span class=\"c1\">// We swap the order of `a` and `b` in the call to</span>\n<span class=\"w\">                    </span><span class=\"c1\">// `relate_ty_var` below, so swap the corresponding scopes</span>\n<span class=\"w\">                    </span><span class=\"c1\">// as well.</span>\n<span class=\"w\">                    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">a_scopes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">b_scopes</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">relate_ty_var</span><span class=\"p\">(</span><span class=\"n\">vid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">a_scopes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">b_scopes</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">res</span><span class=\"w\"></span>\n</pre></div>",
        "id": 161259321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096670
    },
    {
        "content": "<p>I note that the PR doesn't swap variance</p>",
        "id": 161259339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096682
    },
    {
        "content": "<p>I don't <em>quite</em> remember the history there</p>",
        "id": 161259375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096714
    },
    {
        "content": "<p>I guess I should check the PR comments</p>",
        "id": 161259379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes, that’s why it shouldn’t be merged as is :)</p>",
        "id": 161259404,
        "sender_full_name": "scalexm",
        "timestamp": 1553096733
    },
    {
        "content": "<blockquote>\n<p>there is at least one, in the bug I fixed in the unification code (where I needed to swap <code>a_scopes</code> and <code>b_scopes</code>), I think I also need to flip the variance, what do you think?</p>\n</blockquote>\n<p>ah, right, you were talking <em>adding</em> code to flip the variance =) heh, I remember now, sorry</p>",
        "id": 161259465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096763
    },
    {
        "content": "<p>Looking more at the <code>relate_ty_var</code> code, I think there are other problems</p>",
        "id": 161259491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096793
    },
    {
        "content": "<p>When it comes to variance</p>",
        "id": 161259503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096801
    },
    {
        "content": "<p>Notably, <a href=\"https://github.com/rust-lang/rust/blob/248531af3ff86cdd4465220898c83352eff65690/src/librustc/infer/nll_relate/mod.rs#L307\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/248531af3ff86cdd4465220898c83352eff65690/src/librustc/infer/nll_relate/mod.rs#L307\">this line</a> assumes \"invariant\", I believe.</p>",
        "id": 161259536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096828
    },
    {
        "content": "<p>Yes, notably I think I’m doing an <code>equate</code> or something regardless of variance</p>",
        "id": 161259541,
        "sender_full_name": "scalexm",
        "timestamp": 1553096833
    },
    {
        "content": "<p>Right</p>",
        "id": 161259551,
        "sender_full_name": "scalexm",
        "timestamp": 1553096843
    },
    {
        "content": "<p>So, one thing we could certainly do</p>",
        "id": 161259575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096864
    },
    {
        "content": "<p>is to refactor the code to be \"generic\" with respect to whether <code>vid</code> comes from A or what</p>",
        "id": 161259592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096875
    },
    {
        "content": "<p>that doesn't seem <em>that</em> hard to do</p>",
        "id": 161259671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096913
    },
    {
        "content": "<p>In the NLL code, do you happen to use something else than « invariant »? Because I think the <code>equate</code> was there already before my unification PR where I refactored this code</p>",
        "id": 161259707,
        "sender_full_name": "scalexm",
        "timestamp": 1553096941
    },
    {
        "content": "<p>I believe this code only used invariance before</p>",
        "id": 161259738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096956
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 161259754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096971
    },
    {
        "content": "<p>Certainly when I first wrote it, that was true</p>",
        "id": 161259755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096978
    },
    {
        "content": "<p>but I may have changed it</p>",
        "id": 161259757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096980
    },
    {
        "content": "<p>and overlooked this detail :)</p>",
        "id": 161259761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096981
    },
    {
        "content": "<p>I don't recall who added the variance code to this -- I did?</p>",
        "id": 161259768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553096989
    },
    {
        "content": "<p>Variance was already there indeed when I refactored the code</p>",
        "id": 161259833,
        "sender_full_name": "scalexm",
        "timestamp": 1553097006
    },
    {
        "content": "<p>OK. Then it's probably a bug in NLL</p>",
        "id": 161259852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553097020
    },
    {
        "content": "<p>But I have to check</p>",
        "id": 161259859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553097028
    },
    {
        "content": "<p>Well, one bug at a time</p>",
        "id": 161260065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553097133
    },
    {
        "content": "<p>Let me experiment with a refactoring here, I can push it to your branch?</p>",
        "id": 161260094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553097148
    },
    {
        "content": "<p>Sure</p>",
        "id": 161260104,
        "sender_full_name": "scalexm",
        "timestamp": 1553097153
    },
    {
        "content": "<p>Also, I think that whole match is wrong in the same way</p>",
        "id": 161260111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553097157
    },
    {
        "content": "<p>in other words, <a href=\"https://github.com/rust-lang/rust/blob/248531af3ff86cdd4465220898c83352eff65690/src/librustc/infer/nll_relate/mod.rs#L314\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/248531af3ff86cdd4465220898c83352eff65690/src/librustc/infer/nll_relate/mod.rs#L314\">the lazy norm case also assumes invariant</a></p>",
        "id": 161260134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553097171
    },
    {
        "content": "<p>but we should file a bug about this</p>",
        "id": 161260144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553097181
    },
    {
        "content": "<p>I just checked, the <code>equate</code> bug was not pre-existing in NLL actually; and it is still not a bug because NLL will never relate two type variables (because of <code>forbid_inference_vars()</code>)</p>",
        "id": 161260994,
        "sender_full_name": "scalexm",
        "timestamp": 1553097668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I was wondering about that (the forbid-inference-vars part of it)</p>",
        "id": 161261708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553098063
    },
    {
        "content": "<p>but I couldn't quite remember when we had lifted that restriction</p>",
        "id": 161261730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553098072
    },
    {
        "content": "<p>in general this code feels messier than I would like</p>",
        "id": 161261777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553098084
    },
    {
        "content": "<p>but let's talk about that later</p>",
        "id": 161261792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553098087
    },
    {
        "content": "<p>I've got a refactored version close to working now</p>",
        "id": 161261833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553098112
    },
    {
        "content": "<p>I lifted that restriction when I re-used that unification code for chalk, because unification in chalk must deal with inference variables in both sides of the relation</p>",
        "id": 161262590,
        "sender_full_name": "scalexm",
        "timestamp": 1553098496
    },
    {
        "content": "<p>But yes I agree it’s a bit messy</p>",
        "id": 161263256,
        "sender_full_name": "scalexm",
        "timestamp": 1553098904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I pushed two commits to your branch</p>",
        "id": 161266397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553100512
    },
    {
        "content": "<p>took me longer than expected because I wound up doing two iterations, but I like this final version, feels pretty clean</p>",
        "id": 161266413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553100528
    },
    {
        "content": "<p>could maybe use a few more comments</p>",
        "id": 161266418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553100532
    },
    {
        "content": "<p>ok, forced pushed a few more comments</p>",
        "id": 161266730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553100719
    },
    {
        "content": "<p>if you are happy with that, then I think I am happy with the PR overall</p>",
        "id": 161266839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553100770
    },
    {
        "content": "<p>For the <code>equate</code> thing, could we maybe add a method on <code>VidValuePair</code>, something like <code>relate_vars</code> which just does the right thing depending on the variance?</p>",
        "id": 161267168,
        "sender_full_name": "scalexm",
        "timestamp": 1553100941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I agree <code>relate_projection_ty</code> does not need to deal with scopes anyway</p>",
        "id": 161267418,
        "sender_full_name": "scalexm",
        "timestamp": 1553101080
    },
    {
        "content": "<blockquote>\n<p>For the <code>equate</code> thing, could we maybe add a method on <code>VidValuePair</code>, something like <code>relate_vars</code> which just does the right thing depending on the variance?</p>\n</blockquote>\n<p>what we have to do, I think, is to push a new constraint -- basically <code>?A &lt;: ?B</code> is something we can't make progress on until we know <em>something</em> about <code>?A</code> or <code>?B</code></p>",
        "id": 161269792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553102435
    },
    {
        "content": "<p>this is an instance of that more general problem that also afflicts <code>?T: Sized</code></p>",
        "id": 161269800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553102444
    },
    {
        "content": "<p>I am thinking that i would like to dig more -- perhaps next week over zoom? -- into how the chalk-engine works</p>",
        "id": 161269833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553102472
    },
    {
        "content": "<p>so we can discuss how to incorporate that concept</p>",
        "id": 161269838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553102480
    },
    {
        "content": "<p>e.g., SLG solving</p>",
        "id": 161269840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553102482
    },
    {
        "content": "<p>this would require me to remember some stuff :)</p>",
        "id": 161269853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553102490
    },
    {
        "content": "<p>which is .. probably god</p>",
        "id": 161269862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553102494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Ah yes I see</p>",
        "id": 161270835,
        "sender_full_name": "scalexm",
        "timestamp": 1553103017
    },
    {
        "content": "<p>I’m happy with your refactoring anyway</p>",
        "id": 161270892,
        "sender_full_name": "scalexm",
        "timestamp": 1553103050
    },
    {
        "content": "<p>So we can merge it</p>",
        "id": 161270900,
        "sender_full_name": "scalexm",
        "timestamp": 1553103057
    },
    {
        "content": "<p>maybe it needs a rebase?</p>",
        "id": 161273294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553104385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> rebased</p>",
        "id": 161281193,
        "sender_full_name": "scalexm",
        "timestamp": 1553108996
    },
    {
        "content": "<p>left a <a href=\"https://github.com/rust-lang/rust/pull/58305/files/da756250077fe887b7ac61b8483f1c3ef683a6d2#pullrequestreview-216928085\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58305/files/da756250077fe887b7ac61b8483f1c3ef683a6d2#pullrequestreview-216928085\">nit</a> <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> but otherwise r=me</p>",
        "id": 161281337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553109100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok I removed these lines</p>",
        "id": 161281883,
        "sender_full_name": "scalexm",
        "timestamp": 1553109477
    }
]