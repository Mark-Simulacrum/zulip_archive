[
    {
        "content": "<p>I haven't been able to find much information for discussion on this. What I mean is something like the following:</p>\n<ul>\n<li><code>impl&lt;T: traitA + !traitB&gt; From&lt;T&gt; for Type</code></li>\n<li><code>impl&lt;T: traitA + !Self&gt; From&lt;T&gt; for Type</code><br>\nI.e.</li>\n</ul>",
        "id": 229141547,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1615076824
    },
    {
        "content": "<p>Where <code>!traitB</code> makes <code>T</code> exclude types which are <code>traitB</code>, and where <code>!Self</code> excludes <code>Self</code> (<code>Type</code>) if <code>Type</code> also implements <code>traitA</code>.</p>",
        "id": 229141646,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1615076936
    },
    {
        "content": "<p>I think this could be reduced to the <code>Self</code> case either entirely or as a first step, if needed. It would be extremely handy to be able to exclude self from <code>From</code>/<code>Into</code> impls where the trait bounds you are doing this on are also implemented by your type.</p>",
        "id": 229141767,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1615077048
    },
    {
        "content": "<p>probably not the person you were hoping to reply, but i think that's <a href=\"https://github.com/rust-lang/rfcs/pull/586\">https://github.com/rust-lang/rfcs/pull/586</a> (in particular <a href=\"https://github.com/kennytm/rfcs/blob/neg-bounds/text/0000-negative-bounds.md#negative-bounds\">https://github.com/kennytm/rfcs/blob/neg-bounds/text/0000-negative-bounds.md#negative-bounds</a>)</p>",
        "id": 229141793,
        "sender_full_name": "Jacob Rothstein",
        "timestamp": 1615077075
    },
    {
        "content": "<p>In particular, this would solve the <code>std::error::Error</code> issue for dyn error types like <code>anyhow::Error</code>, <code>eyre::Error</code>, <code>http_types::Error</code>, etc.</p>",
        "id": 229141836,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1615077124
    },
    {
        "content": "<p>My understanding of negative impls were they they were not this but rather something else, maybe I am mistaken though.</p>",
        "id": 229141863,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1615077162
    },
    {
        "content": "<p>That RFC also does not specifically mention the self case, but I think the self case is the most compelling since it solves a handful of other issues directly without needing full specialization.</p>",
        "id": 229141997,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1615077265
    },
    {
        "content": "<p>(Or <em>could</em> solve.)</p>",
        "id": 229142005,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1615077288
    },
    {
        "content": "<p>Also, related issue: <a href=\"https://github.com/rust-lang/project-error-handling/issues/30\">https://github.com/rust-lang/project-error-handling/issues/30</a></p>",
        "id": 229143681,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1615079003
    }
]