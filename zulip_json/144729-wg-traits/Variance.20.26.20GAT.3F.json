[
    {
        "content": "<p>Does <code>&lt;T as Life&gt;::L&lt;'a&gt;</code> have to be invariant?<br>\nIf so why? I have tried looking into this, but only found <a href=\"https://github.com/rust-lang/rust/issues/57440\">tangentially related issues</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Life</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">L</span><span class=\"o\">&lt;'</span><span class=\"na\">l</span><span class=\"o\">&gt;</span>: <span class=\"o\">'</span><span class=\"na\">l</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216596600,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605265800
    },
    {
        "content": "<p>how can it not be <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>Would you restrict <code>L&lt;'l&gt;</code> to only allow types which use <code>'l</code> in co/contravariant positions?</p>",
        "id": 216596907,
        "sender_full_name": "lcnr",
        "timestamp": 1605266023
    },
    {
        "content": "<p>let's say you have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Life</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">L</span><span class=\"o\">&lt;'</span><span class=\"na\">l</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">l</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">l</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216597040,
        "sender_full_name": "lcnr",
        "timestamp": 1605266107
    },
    {
        "content": "<p>if <code>L&lt;'l&gt;</code> was covariant, you could shrink the lifetime <code>'l</code> and overwrite the inner reference with a reference of the shorter lifetime, which can now be accessed using original lt.</p>",
        "id": 216597210,
        "sender_full_name": "lcnr",
        "timestamp": 1605266276
    },
    {
        "content": "<p>Could you give an example? I'm still not seeing it.</p>\n<p>How can <code>'l</code> be used in a invariant position?<br>\n<code>&amp;'l mut &amp;'invariant_position mut String</code>?</p>",
        "id": 216597789,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605266756
    },
    {
        "content": "<p>Are you referring to the example in the nomicon?</p>",
        "id": 216598401,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605267180
    },
    {
        "content": "<p>i am currently trying to write an example of what I have in mind</p>",
        "id": 216599133,
        "sender_full_name": "lcnr",
        "timestamp": 1605267617
    },
    {
        "content": "<p>I am starting to see the issue, or at least a issue.</p>\n<p>However, if we must always assume GATs to be invariant how can they be used to model HKT?<br>\nIn a hypothetical world with HKT <code>T&lt;'_&gt;</code> would be covariant?</p>",
        "id": 216600360,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605268362
    },
    {
        "content": "<p>Or would it also have to be invariant, since <code>'_</code> could be used inside a struct in a invariant position?</p>",
        "id": 216600606,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605268518
    },
    {
        "content": "<p>that's what I am talking about think about <code>Foo</code> as <code>&lt;T as Life&gt;::L&lt;'a&gt;</code></p>",
        "id": 216600806,
        "sender_full_name": "lcnr",
        "timestamp": 1605268628
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=de3c32c7990f001562d2d83e5ab5cffe\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=de3c32c7990f001562d2d83e5ab5cffe</a></p>",
        "id": 216600813,
        "sender_full_name": "lcnr",
        "timestamp": 1605268633
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>  it might make sense to add a way for associated types to be covariant, but that seems like a really complex addition for such a niche feature</p>",
        "id": 216600921,
        "sender_full_name": "lcnr",
        "timestamp": 1605268704
    },
    {
        "content": "<p>I'm not clear how any of the HKT modeling patterns could work without it.</p>",
        "id": 216601086,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605268839
    },
    {
        "content": "<p>Forget HKT basic core GAT goals don't work.</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=62e774a187e40ed7f7c5e28912090f3f\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=62e774a187e40ed7f7c5e28912090f3f</a></p>",
        "id": 216602010,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605269585
    },
    {
        "content": "<p>why is that a basic core GAT goal?</p>",
        "id": 216602402,
        "sender_full_name": "lcnr",
        "timestamp": 1605269772
    },
    {
        "content": "<p>considering that it would be unsound</p>",
        "id": 216602438,
        "sender_full_name": "lcnr",
        "timestamp": 1605269781
    },
    {
        "content": "<p>How would it be unsound?</p>",
        "id": 216602465,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605269810
    },
    {
        "content": "<p>you can freely overwrite <code>PartialEq</code> for <code>T::Item</code> and if <code>T::Item</code> is invariant you once again have the above issue</p>",
        "id": 216602492,
        "sender_full_name": "lcnr",
        "timestamp": 1605269834
    },
    {
        "content": "<p>I would consider comparing two items from different streaming iterators of the same type to be a requirement.<br>\nI can certently do that with other language's streams.</p>",
        "id": 216602728,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605270007
    },
    {
        "content": "<p>you can do that <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=638fd83db23d2c652386ec5dfb7320bb\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=638fd83db23d2c652386ec5dfb7320bb</a></p>",
        "id": 216603055,
        "sender_full_name": "lcnr",
        "timestamp": 1605270268
    },
    {
        "content": "<p>you either have to call <code>next</code> in the same scope or have a concrete type for <code>Item</code></p>",
        "id": 216603088,
        "sender_full_name": "lcnr",
        "timestamp": 1605270312
    },
    {
        "content": "<p>at which point variance should work as expected</p>",
        "id": 216603096,
        "sender_full_name": "lcnr",
        "timestamp": 1605270322
    },
    {
        "content": "<p>fixed the implementation <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ea7bc62ad49482f40bbd5da5d97d9728\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ea7bc62ad49482f40bbd5da5d97d9728</a></p>",
        "id": 216603148,
        "sender_full_name": "lcnr",
        "timestamp": 1605270364
    },
    {
        "content": "<p>But that's exactly the issue.<br>\nHow is a streaming iterator useful if the GATs can't be passed into functions?</p>",
        "id": 216603483,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605270636
    },
    {
        "content": "<p>well they can</p>",
        "id": 216603535,
        "sender_full_name": "lcnr",
        "timestamp": 1605270687
    },
    {
        "content": "<p>They become invariant upon passing, no?</p>\n<p>Was this limitation ever discussed in the RFC or internals?</p>",
        "id": 216603635,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605270745
    },
    {
        "content": "<p>In the context of this discussion what would the proposed type equality constraint denote.</p>\n<p>Could <code>where T::Item&lt;'a&gt; == T::Item&lt;'b&gt;</code> ever be satisfied?</p>",
        "id": 216604215,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605271092
    },
    {
        "content": "<p><code>&lt;T as Trait&gt;::Item&lt;'a&gt;</code> is pretty much identical to <code>&lt;T as Trait&lt;'a&gt;&gt;::Item</code> so i don't completely understand what you are concerned about.</p>",
        "id": 216606732,
        "sender_full_name": "lcnr",
        "timestamp": 1605272552
    },
    {
        "content": "<p>I'm concerned that this isn't likly a fix.<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fab410da6162fe39b6d36a4bf0bc3c15\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fab410da6162fe39b6d36a4bf0bc3c15</a></p>",
        "id": 216607093,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605272733
    },
    {
        "content": "<p>probably, but that constraint seems meaningless to me</p>",
        "id": 216607256,
        "sender_full_name": "lcnr",
        "timestamp": 1605272832
    },
    {
        "content": "<p>because at this point you can just use <code>T::Item&lt;'a&gt;</code> for both <code>a</code> and <code>b</code></p>",
        "id": 216607308,
        "sender_full_name": "lcnr",
        "timestamp": 1605272864
    },
    {
        "content": "<p>or add a new generic param <code>U</code></p>",
        "id": 216607318,
        "sender_full_name": "lcnr",
        "timestamp": 1605272873
    },
    {
        "content": "<p>and use that instead of <code>T::Item&lt;'_&gt;</code></p>",
        "id": 216607358,
        "sender_full_name": "lcnr",
        "timestamp": 1605272884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Variance.20.26.20GAT.3F/near/216607256\">said</a>:</p>\n<blockquote>\n<p>probably, but that constraint seems meaningless to me</p>\n</blockquote>\n<p>Yeah, that's my concern.</p>",
        "id": 216607676,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605273071
    },
    {
        "content": "<p>meaningless in the sense that it shouldn't be necessary, not in the sense that it won't help</p>",
        "id": 216607899,
        "sender_full_name": "lcnr",
        "timestamp": 1605273195
    },
    {
        "content": "<p>What would make it compile then?<br>\nA <code>T::Item&lt;'a&gt;: Covariant</code> constraint?</p>",
        "id": 216608184,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605273374
    },
    {
        "content": "<p>it feels to me like you are somehow focusing on something really specific which seems limiting in isolation but isn't actually relevant when viewed from above. It might help to add some more examples of what you are concerned with and I can try to adapt them to how I would implement them</p>",
        "id": 216608227,
        "sender_full_name": "lcnr",
        "timestamp": 1605273395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209924\">Avi Dessauer</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Variance.20.26.20GAT.3F/near/216608184\">said</a>:</p>\n<blockquote>\n<p>What would make it compile then?<br>\nA <code>T::Item&lt;'a&gt;: Covariant</code> constraint?</p>\n</blockquote>\n<p>not using <code>T::Item&lt;'a&gt;</code> and <code>T::Item&lt;'b&gt;</code> in the first place <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 216608295,
        "sender_full_name": "lcnr",
        "timestamp": 1605273434
    },
    {
        "content": "<p>I don't think we can call GATs to be created within the same scope \"specific\".<br>\nThis was even pointed out on the <a href=\"https://github.com/rust-lang/rfcs/pull/1598#issuecomment-381638842\">RFC PR</a></p>",
        "id": 216609746,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1605274167
    },
    {
        "content": "<p>I personally don't believe this to be fruitful without some examples which you consider to be not be possible due to this restriction.</p>",
        "id": 216612132,
        "sender_full_name": "lcnr",
        "timestamp": 1605275216
    }
]