[
    {
        "content": "<p>The location of this <code>where</code> clause feels all sorts of wrong:</p>\n<div class=\"codehilite\"><pre><span></span><code>type Item&lt;&#39;a&gt; where Self: &#39;a = &amp;&#39;a mut [T];\n</code></pre></div>\n<p>I'm sure there's a good reason for it. Why can't it be</p>\n<div class=\"codehilite\"><pre><span></span><code>type Item&lt;&#39;a&gt; = &amp;&#39;a mut [T]\nwhere\n    Self: &#39;a;\n</code></pre></div>",
        "id": 248271339,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1628020432
    },
    {
        "content": "<p>I will admit that it seems to make more sense for the <code>where</code> clause to be after the type</p>",
        "id": 248273645,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628021390
    },
    {
        "content": "<p>My brain does a bit of a segfault when I see <code>'a = &amp;'a</code>. Then I backtrack and try to make <code>'a = &amp;'a mut [T]</code> into a trait.</p>",
        "id": 248278378,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1628023688
    },
    {
        "content": "<p>The current order has parallels with other kinds of items where the <code>where</code> is between the name and body.</p>",
        "id": 248278681,
        "sender_full_name": "bjorn3",
        "timestamp": 1628023841
    },
    {
        "content": "<p>I think the the RHS is conceptually more of a 'header' than a 'body' here</p>",
        "id": 248281261,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628024921
    },
    {
        "content": "<p>similar to how we have <code>fn foo() where Type: Trait {}</code></p>",
        "id": 248281281,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628024934
    },
    {
        "content": "<p>and I also had trouble reading <code>type Item&lt;'a&gt; where Self: 'a = &amp;'a mut [T];</code> - it looked like we were assigning to the <code>Self: 'a</code>,</p>",
        "id": 248281361,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628024983
    },
    {
        "content": "<p>normal type aliases can already have bounds in that place right now in stable Rust, even if not enforced</p>",
        "id": 248281994,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628025212
    },
    {
        "content": "<p>Even if we don't change it in the grammar, the parser will need to be able to do so, because I fully expect people to try to write them both ways...</p>",
        "id": 248320020,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1628063497
    },
    {
        "content": "<p>Note however that this is kinda inconsistent with trait aliases since they're written as <code>trait Alias = Supertrait where SomeType: SomeBound;</code><br>\nHowever changing this makes it inconsistent with how supertraits are defined since you have to put them before the where clauses.</p>",
        "id": 248323928,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1628066412
    },
    {
        "content": "<p>If we will be inconsistent with some other part of Rust anyway, I'd propose changing it away from the current form <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span> .</p>\n<p>Has anyone talked with a rustfmt developer about how the current form would be formatted?</p>",
        "id": 248341423,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1628079223
    },
    {
        "content": "<p>I'd just like to add my support to moving the where clause after the <code>= ...</code>, the current syntax I both have to spend more time to read and to type. Anecdotal evidence and all, but figured I'd mention that I also am having issues with it.</p>",
        "id": 249525053,
        "sender_full_name": "CraftSpider",
        "timestamp": 1629052257
    },
    {
        "content": "<p>I think we'd like input from <span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> for the questions raised here :)</p>",
        "id": 249567912,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1629107355
    },
    {
        "content": "<p>I agree that the syntax hurts my head every time</p>",
        "id": 249605375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629128343
    },
    {
        "content": "<p>I also agree that the current proposed syntax seems easily misread.</p>",
        "id": 249680714,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1629178963
    },
    {
        "content": "<p>maybe we could just put delimiters around the <code>where</code>-clause in this case?  Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249723032,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629208970
    },
    {
        "content": "<p>but honestly I’d be fine with putting the <code>where</code>-clause after the RHS too. I think. (The only reason I can think of not to do so would be if there was some worry that it would be an interpreted as some sort of conditional on whether the RHS is used, as opposed to a constraint on the generic parameter of the GAT itself.)</p>",
        "id": 249723556,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629209190
    },
    {
        "content": "<p>So, seems like there's strong support for moving where clauses on GATs to <em>after</em> the type. I'll probably make a PR for this sometime soon (this week is busy for me)</p>",
        "id": 249724974,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629209750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20syntax.20whining/near/249723556\">said</a>:</p>\n<blockquote>\n<p>The only reason I can think of not to do so would be if there was some worry that it would be an interpreted as some sort of conditional on whether the RHS is used, as opposed to a constraint on the generic parameter of the GAT itself.</p>\n</blockquote>\n<p>I'm not really worried about this</p>",
        "id": 249725238,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629209853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20syntax.20whining/near/248281994\">said</a>:</p>\n<blockquote>\n<p>normal type aliases can already have bounds in that place right now in stable Rust, even if not enforced</p>\n</blockquote>\n<p>I wonder what people's thoughts are on <em>also</em> changing it for type aliases (for if/when they <em>are</em> enforced). At worst, we can just allow where clauses in both places for type aliases (and warn in current position). At best, we can deprecate and maybe eventually just disallow given that it's already a warning.</p>",
        "id": 249725678,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629210055
    },
    {
        "content": "<p>that's why I'm not a fan of it. you're just repeating the where clauses of the definition here, right? so you have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>in the trait and then</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>\n<p>in the impl, so for me <code>type Item&lt;'a&gt; where Self: 'a</code> is the 'header' and <code>= &amp;'a mut [T]</code> is the body. I agree that it's annoying to read though, but formatting could help:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"o\">'</span><span class=\"na\">a</span>\n    <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249725822,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1629210119
    },
    {
        "content": "<p>actually rustfmt will right now already put where clauses for functions on another line anyway, so why not do the same for types</p>",
        "id": 249726042,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1629210221
    },
    {
        "content": "<p>I prefer the follow syntax because it looks cleaner to me, and more like a function sig.</p>\n<div class=\"codehilite\"><pre><span></span><code>type Item&lt;&#39;a&gt;\nwhere\n    Self: &#39;a;\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code>type Item&lt;&#39;a&gt; = &amp;&#39;a [i32]\nwhere\n    Self: &#39;a\n</code></pre></div>\n<p>feels like it more match how a functions whole signature comes before the where.</p>",
        "id": 249740097,
        "sender_full_name": "CraftSpider",
        "timestamp": 1629216147
    },
    {
        "content": "<p>for me the <code>= &lt;type&gt;</code> is the 'body', not part of the 'signature'</p>",
        "id": 249741547,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1629216763
    },
    {
        "content": "<p><code>struct Foo&lt;T&gt;(T) where T: Copy;</code> feels more like <code>type Item&lt;'a&gt; = &amp;'a u32 where Self: 'a;</code> to me.  It's not <code>struct Foo&lt;T&gt; where T: Copy (T);</code>.</p>",
        "id": 249751928,
        "sender_full_name": "scottmcm",
        "timestamp": 1629221595
    },
    {
        "content": "<p>(Well, it is <code>struct Foo&lt;T: Copy&gt;(T)</code> tho)<br>\nalthough honestly I agree, putting the <code>where</code> after feels more consistent.</p>",
        "id": 249755995,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1629223555
    },
    {
        "content": "<p>(Yes, it'd be <code>type Item&lt;'a: 'b&gt; = ...;</code> for things that can go there.)</p>",
        "id": 249756634,
        "sender_full_name": "scottmcm",
        "timestamp": 1629223860
    },
    {
        "content": "<p>Why is it necessary to repeat the <code>where</code> clauses in the first place? Is that something that could potentially be changed?</p>",
        "id": 249834689,
        "sender_full_name": "jplatte",
        "timestamp": 1629285454
    },
    {
        "content": "<p>It's a bit tricky. In general, the impl can require fewer things than the trait. Right now we don't take advantage of that but there have been proposals to do so -- e.g., to permit the impl to not use <code>unsafe</code> on a method and then to have callers who <em>know the type</em> not need to write <code>unsafe</code></p>",
        "id": 249860877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629298179
    },
    {
        "content": "<p>All that said, I'd like to default this <code>where Self: 'a</code> bound</p>",
        "id": 249860893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629298187
    },
    {
        "content": "<p>but the syntax for where clauses is still worth discussing</p>",
        "id": 249860910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629298195
    },
    {
        "content": "<p>despite the incongruity, I do feel that</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>somehow \"looks right\" to me, even though <code>= Foo</code> is the body</p>",
        "id": 249861022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629298228
    },
    {
        "content": "<p>Re. requiring fewer things, to me it really seems like just shadowing via an inherent item of the same name would be less confusing. And it's not currently allowed anywhere in traits to have the impl be more general than the trait definition, right? (e.g. leave out bounds on generic trait methods)</p>",
        "id": 249975473,
        "sender_full_name": "jplatte",
        "timestamp": 1629374322
    },
    {
        "content": "<p>Re. defaulting to <code>where Self: 'a</code>, I haven't actually seen a proposal for what opt-out would look like, am I missing sth.?</p>",
        "id": 249975552,
        "sender_full_name": "jplatte",
        "timestamp": 1629374360
    },
    {
        "content": "<p>It is allowed for the impl to be more general in numerous places</p>",
        "id": 250023157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629396092
    },
    {
        "content": "<p>I believe for example you can leave out generic bounds</p>",
        "id": 250023230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629396122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198047\">jplatte</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20syntax.20whining/near/249975552\">said</a>:</p>\n<blockquote>\n<p>Re. defaulting to <code>where Self: 'a</code>, I haven't actually seen a proposal for what opt-out would look like, am I missing sth.?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/87479\">https://github.com/rust-lang/rust/issues/87479</a></p>",
        "id": 250023338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629396154
    },
    {
        "content": "<p>not had much time to follow up here</p>",
        "id": 250023371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629396165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20syntax.20whining/near/250023157\">said</a>:</p>\n<blockquote>\n<p>It is allowed for the impl to be more general in numerous places</p>\n</blockquote>\n<p>Huh, interesting. Didn't know about that.</p>",
        "id": 250106196,
        "sender_full_name": "jplatte",
        "timestamp": 1629458999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GAT.20syntax.20whining/near/250023338\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/87479\">https://github.com/rust-lang/rust/issues/87479</a></p>\n</blockquote>\n<p>Right, I've read and am subscribed to that. No syntax suggested there for opting out AFAICT.</p>",
        "id": 250106393,
        "sender_full_name": "jplatte",
        "timestamp": 1629459134
    },
    {
        "content": "<p>I have to catch up on the latest comments there</p>",
        "id": 250174688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629494768
    },
    {
        "content": "<p>I would hope we can come up with a defaulting scheme that is sufficiently precise that one does not <em>need</em> a syntax for opting out</p>",
        "id": 250174703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629494779
    }
]