[
    {
        "content": "<p>The location of this <code>where</code> clause feels all sorts of wrong:</p>\n<div class=\"codehilite\"><pre><span></span><code>type Item&lt;&#39;a&gt; where Self: &#39;a = &amp;&#39;a mut [T];\n</code></pre></div>\n<p>I'm sure there's a good reason for it. Why can't it be</p>\n<div class=\"codehilite\"><pre><span></span><code>type Item&lt;&#39;a&gt; = &amp;&#39;a mut [T]\nwhere\n    Self: &#39;a;\n</code></pre></div>",
        "id": 248271339,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1628020432
    },
    {
        "content": "<p>I will admit that it seems to make more sense for the <code>where</code> clause to be after the type</p>",
        "id": 248273645,
        "sender_full_name": "Jack Huey",
        "timestamp": 1628021390
    },
    {
        "content": "<p>My brain does a bit of a segfault when I see <code>'a = &amp;'a</code>. Then I backtrack and try to make <code>'a = &amp;'a mut [T]</code> into a trait.</p>",
        "id": 248278378,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1628023688
    },
    {
        "content": "<p>The current order has parallels with other kinds of items where the <code>where</code> is between the name and body.</p>",
        "id": 248278681,
        "sender_full_name": "bjorn3",
        "timestamp": 1628023841
    },
    {
        "content": "<p>I think the the RHS is conceptually more of a 'header' than a 'body' here</p>",
        "id": 248281261,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628024921
    },
    {
        "content": "<p>similar to how we have <code>fn foo() where Type: Trait {}</code></p>",
        "id": 248281281,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628024934
    },
    {
        "content": "<p>and I also had trouble reading <code>type Item&lt;'a&gt; where Self: 'a = &amp;'a mut [T];</code> - it looked like we were assigning to the <code>Self: 'a</code>,</p>",
        "id": 248281361,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628024983
    },
    {
        "content": "<p>normal type aliases can already have bounds in that place right now in stable Rust, even if not enforced</p>",
        "id": 248281994,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1628025212
    },
    {
        "content": "<p>Even if we don't change it in the grammar, the parser will need to be able to do so, because I fully expect people to try to write them both ways...</p>",
        "id": 248320020,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1628063497
    },
    {
        "content": "<p>Note however that this is kinda inconsistent with trait aliases since they're written as <code>trait Alias = Supertrait where SomeType: SomeBound;</code><br>\nHowever changing this makes it inconsistent with how supertraits are defined since you have to put them before the where clauses.</p>",
        "id": 248323928,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1628066412
    },
    {
        "content": "<p>If we will be inconsistent with some other part of Rust anyway, I'd propose changing it away from the current form <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span> .</p>\n<p>Has anyone talked with a rustfmt developer about how the current form would be formatted?</p>",
        "id": 248341423,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1628079223
    }
]