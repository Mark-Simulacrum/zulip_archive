[
    {
        "content": "<p><a href=\"https://rust-lang.github.io/chalk/book/clauses/coherence.html#modeling-the-orphan-check\">https://rust-lang.github.io/chalk/book/clauses/coherence.html#modeling-the-orphan-check</a></p>",
        "id": 235581622,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619039195
    },
    {
        "content": "<p>where it says ...</p>",
        "id": 235581683,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619039214
    },
    {
        "content": "<blockquote>\n<p>If Trait is local to the current crate, we generate: <code>forall&lt;Self, P1…Pn&gt; { LocalImplAllowed(Self: Trait&lt;P1...Pn&gt;) }</code> This models that any impls are allowed if the trait is local to the current crate.</p>\n</blockquote>",
        "id": 235581689,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619039216
    },
    {
        "content": "<p>I think that should be ...</p>",
        "id": 235581713,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619039221
    },
    {
        "content": "<blockquote>\n<p>If Trait is local to the current crate, we generate: <code>forall&lt;Self, P1…Pn&gt; { LocalImplAllowed(Self: Trait&lt;P1...Pn&gt;)  :- IsLocal(Trait&lt;P1...Pn&gt;)}</code> This models that any impls are allowed if the trait is local to the current crate.</p>\n</blockquote>",
        "id": 235581822,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619039254
    },
    {
        "content": "<p>right?</p>",
        "id": 235581890,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619039277
    },
    {
        "content": "<p>So, I'd have to look at the actual clauses that we generate. Your <code>:- IsLocal(...)</code> I think is logically correct</p>",
        "id": 235582647,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619039487
    },
    {
        "content": "<p>But we don't generate those conditions in some cases where we know them ahead of time</p>",
        "id": 235582808,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619039527
    },
    {
        "content": "<p>like the previous statement is not even actually a clause :) the <code>:-</code> is missing</p>",
        "id": 235582874,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619039545
    },
    {
        "content": "<p>if you want I can provide a PR with that change so we can discuss there or merge if you agree that's the right change</p>",
        "id": 235582971,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619039577
    },
    {
        "content": "<p>let me just quickly go look at the code</p>",
        "id": 235583134,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619039606
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/book/src/clauses/coherence.md b/book/src/clauses/coherence.md</span>\n<span class=\"gh\">index 190dac99..a8ddfde5 100644</span>\n<span class=\"gd\">--- a/book/src/clauses/coherence.md</span>\n<span class=\"gi\">+++ b/book/src/clauses/coherence.md</span>\n<span class=\"gu\">@@ -90,7 +90,7 @@ Here’s how the lowering rules would look:</span>\n For each trait `Trait`,\n\n - If `Trait` is local to the current crate, we generate:\n<span class=\"gd\">-    `forall&lt;Self, P1…Pn&gt; { LocalImplAllowed(Self: Trait&lt;P1...Pn&gt;) }`</span>\n<span class=\"gi\">+    `forall&lt;Self, P1…Pn&gt; { LocalImplAllowed(Self: Trait&lt;P1...Pn&gt;) :- IsLocal(Trait&lt;P1...Pn&gt;) }`</span>\n     This models that any impls are allowed if the trait is local to the current crate.\n - If `Trait` is upstream to the current crate, we need a rule which models the additional conditions on which impls are allowed:\n ```ignore\n</code></pre></div>",
        "id": 235583545,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619039700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Chalk.20book.20modeling.20orphan.20check/near/235583134\">said</a>:</p>\n<blockquote>\n<p>let me just quickly go look at the code</p>\n</blockquote>\n<p>point out to the code you are looking at :), may be interesting to see</p>",
        "id": 235583814,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619039768
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/d0d8fbe20dd17d5edce38e40b0551df4b065f996/chalk-solve/src/clauses/program_clauses.rs#L684\">https://github.com/rust-lang/chalk/blob/d0d8fbe20dd17d5edce38e40b0551df4b065f996/chalk-solve/src/clauses/program_clauses.rs#L684</a></p>",
        "id": 235583852,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619039786
    },
    {
        "content": "<p>Trying to figure out if that's the relevant code</p>",
        "id": 235583869,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619039795
    },
    {
        "content": "<p>So, line 681</p>",
        "id": 235583972,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619039856
    },
    {
        "content": "<p>Because of the <code>!self.flags.upstream</code> check, we don't <em>need</em> the <code>IsLocal(...)</code> condition</p>",
        "id": 235584053,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619039889
    },
    {
        "content": "<p>Because that <em>is</em> the condition itself</p>",
        "id": 235584070,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619039898
    },
    {
        "content": "<p>Also, we don't <em>have</em> an <code>IsLocal(Trait)</code> goal</p>",
        "id": 235584112,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619039926
    },
    {
        "content": "<p>Relevant goal for <code>Ty</code>: <a href=\"https://github.com/rust-lang/chalk/blob/d0d8fbe20dd17d5edce38e40b0551df4b065f996/chalk-ir/src/lib.rs#L1856\">https://github.com/rust-lang/chalk/blob/d0d8fbe20dd17d5edce38e40b0551df4b065f996/chalk-ir/src/lib.rs#L1856</a></p>",
        "id": 235584136,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619039940
    },
    {
        "content": "<p>I see</p>",
        "id": 235584283,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040004
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/d0d8fbe20dd17d5edce38e40b0551df4b065f996/chalk-solve/src/clauses/program_clauses.rs#L511-L514\">https://github.com/rust-lang/chalk/blob/d0d8fbe20dd17d5edce38e40b0551df4b065f996/chalk-solve/src/clauses/program_clauses.rs#L511-L514</a></p>",
        "id": 235584307,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040017
    },
    {
        "content": "<p>so that thing per se is considered a fact, I guess?</p>",
        "id": 235584347,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040034
    },
    {
        "content": "<p>Well, if we check if <code>Trait</code> is not upstream, then we can take <code>IsLocal(Trait&lt;P1...Pn&gt;) }</code> as fact</p>",
        "id": 235584470,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040080
    },
    {
        "content": "<p>We do something similar with some other wf/coherence related things. Blanking on which ones</p>",
        "id": 235584555,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040122
    },
    {
        "content": "<p>I was expecting something like <code>LocalImplAllowed(Self: Trait&lt;P1...Pn&gt;)</code> to not be considered as a goal and as a fact at the same time</p>",
        "id": 235584637,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040140
    },
    {
        "content": "<p>unsure if I'm explaining myself correctly</p>",
        "id": 235584647,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040147
    },
    {
        "content": "<p>but if you see <code>LocalImplAllowed(Self: Trait&lt;P1...Pn&gt;)</code> in some cases is at the left side of the <code>:-</code> and in some cases like this is just fact</p>",
        "id": 235584698,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040177
    },
    {
        "content": "<p>I wasn't sure if that was \"valid\"</p>",
        "id": 235584706,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040183
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/chalk/pull/566\">https://github.com/rust-lang/chalk/pull/566</a></p>",
        "id": 235584748,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040209
    },
    {
        "content": "<p>I'm not sure I follow</p>",
        "id": 235584782,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040239
    },
    {
        "content": "<p>So, <code>wf.rs</code> tries to solve <code>LocalImplAllowed(Self: Trait&lt;P1...Pn&gt;)</code></p>",
        "id": 235584876,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040271
    },
    {
        "content": "<p>And to solve that, <code>program_clauses</code> pushes relevant clauses</p>",
        "id": 235584910,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040286
    },
    {
        "content": "<p>But either that is <em>just true</em> (if the trait is local), or it's conditionally true</p>",
        "id": 235585064,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040353
    },
    {
        "content": "<p>If we had a <code>IsLocal(Trait)</code> goal, then <code>program_clauses</code> could add <em>both</em></p>",
        "id": 235585192,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040405
    },
    {
        "content": "<p>But <code>IsLocal(Trait)</code> would essentially be solvable if <code>Trait</code> is not upstream</p>",
        "id": 235585260,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040439
    },
    {
        "content": "<p>I understand what you're saying but I was talking in a more abstract way</p>",
        "id": 235585524,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040583
    },
    {
        "content": "<p>like it seems to me that this conceptually is saying</p>",
        "id": 235585547,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040597
    },
    {
        "content": "<p>in order to prove <code>LocalImplAllowed(Self: Trait&lt;P1...Pn&gt;)</code>, prove <code>LocalImplAllowed(Self: Trait&lt;P1...Pn&gt;)</code></p>",
        "id": 235585609,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040612
    },
    {
        "content": "<p>this is what I meant by ... I was expecting something that looks more like a leaf and not to see <code>LocalImplAllowed(Self: Trait&lt;P1...Pn&gt;)</code> as a fact</p>",
        "id": 235585679,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040642
    },
    {
        "content": "<p>Ah so</p>",
        "id": 235585759,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040690
    },
    {
        "content": "<p>I mean</p>",
        "id": 235585790,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040703
    },
    {
        "content": "<p>Hmm, trying to think of the best way to approach this</p>",
        "id": 235585804,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040714
    },
    {
        "content": "<p>So, let's think a bit more abstractly</p>",
        "id": 235585863,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040729
    },
    {
        "content": "<p>Imagine you had a goal <code>Implemented(T: Foo&lt;Bar&gt;)</code></p>",
        "id": 235585893,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040749
    },
    {
        "content": "<p>You could have a clause like <code>Implemented(T: Foo&lt;Bar&gt;)</code></p>",
        "id": 235585916,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040765
    },
    {
        "content": "<p>And that makes sense right?</p>",
        "id": 235585930,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040770
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 235585948,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040781
    },
    {
        "content": "<p><em>but</em>, you could also have a clause like <code>forall&lt;U&gt; { Implemented(T: Foo&lt;U&gt;) }</code></p>",
        "id": 235586007,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040798
    },
    {
        "content": "<p>I see what you mean yeah</p>",
        "id": 235586010,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040800
    },
    {
        "content": "<p>And that makes sense</p>",
        "id": 235586018,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040803
    },
    {
        "content": "<p><em>but</em> you can <em>also</em> have:</p>",
        "id": 235586030,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040810
    },
    {
        "content": "<p><code>Implemented(T: Foo&lt;Bar&gt;) :- Implemented(Bar: Baz)</code></p>",
        "id": 235586057,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040830
    },
    {
        "content": "<p>yep</p>",
        "id": 235586066,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040835
    },
    {
        "content": "<p>I see :)</p>",
        "id": 235586070,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040837
    },
    {
        "content": "<p>So, it</p>",
        "id": 235586073,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040840
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 235586114,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1619040845
    },
    {
        "content": "<p>It's not super surprising that you see the goal as \"just fact\"</p>",
        "id": 235586181,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040871
    },
    {
        "content": "<p>And to continue just a bit more</p>",
        "id": 235586229,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040903
    },
    {
        "content": "<p>This sort of highlights that the clauses we generate are sort of separate from how we <em>use</em> them to solve our goal</p>",
        "id": 235586287,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040930
    },
    {
        "content": "<p>It's up to the solver to see that this provides a solution to that goal, exactly</p>",
        "id": 235586378,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619040968
    }
]