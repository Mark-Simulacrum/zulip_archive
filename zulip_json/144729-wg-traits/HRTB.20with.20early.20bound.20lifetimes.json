[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> or someone else, do you know why we cant use HRTB with early bound lifetimes? i.e:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>was investigating an issue and ended up in late bound lifetime shenanigans and now wondering about this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 235423700,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618956349
    },
    {
        "content": "<p>I do know why:)</p>",
        "id": 235423838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618956428
    },
    {
        "content": "<p>The idea is that HRTBs get erased at monomorphization</p>",
        "id": 235423846,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618956433
    },
    {
        "content": "<p>err</p>",
        "id": 235423864,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618956447
    },
    {
        "content": "<p>not quite</p>",
        "id": 235423871,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618956451
    },
    {
        "content": "<p>Early bound lifetimes do</p>",
        "id": 235423907,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618956472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"326176\">@Boxy</span> <a href=\"https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/\">this blog post from 2013</a> basically explains it</p>",
        "id": 235423913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618956479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> ^^</p>",
        "id": 235423959,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618956490
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/early-late-bound.html\">https://rustc-dev-guide.rust-lang.org/early-late-bound.html</a></p>",
        "id": 235423979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618956501
    },
    {
        "content": "<p>I will read this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 235423980,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618956501
    },
    {
        "content": "<p>this may also</p>",
        "id": 235423982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618956504
    },
    {
        "content": "<p>..and read that, thank you!</p>",
        "id": 235424002,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618956517
    },
    {
        "content": "<p>hmm</p>",
        "id": 235428435,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618959236
    },
    {
        "content": "<p>I have read the linked things</p>",
        "id": 235428476,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618959245
    },
    {
        "content": "<p>im having a hard time articulating why I'm still having the same confusion <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235428496,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618959262
    },
    {
        "content": "<p>So, imagine <code>for&lt;'a&gt; fn(&amp;'a ())</code></p>",
        "id": 235428679,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618959391
    },
    {
        "content": "<p>In this case, you can imagine that there is some monomorphized code for that function</p>",
        "id": 235428705,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618959408
    },
    {
        "content": "<p>And that function is valid for <em>any</em> lifetime</p>",
        "id": 235428729,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618959424
    },
    {
        "content": "<p>that makes sense to me so far <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 235428824,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618959484
    },
    {
        "content": "<p>From the blog post there is also:</p>",
        "id": 235428879,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618959515
    },
    {
        "content": "<blockquote>\n<p>What is important here is that the type parameter A has a bound that references the lifetime parameter 'arena. This means that we cannot know A unless we know 'arena. Since A is a type parameter, and thus early bound, this implies that 'arena must also be early bound.</p>\n</blockquote>",
        "id": 235428881,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618959516
    },
    {
        "content": "<p>I think it mostly comes down to how we verify the constraints on lifetimes and such</p>",
        "id": 235428938,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618959558
    },
    {
        "content": "<p>In your example, you can't use <code>'a</code> from <code>for&lt;'a&gt;</code> for your early bound lifetime, because we can't use that to verify constraints</p>",
        "id": 235429119,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618959641
    },
    {
        "content": "<p>I think that makes sense</p>",
        "id": 235429896,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618960079
    },
    {
        "content": "<p>hmm</p>",
        "id": 235430180,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618960249
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">())</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235430190,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618960263
    },
    {
        "content": "<p>if I have something liek this for example</p>",
        "id": 235430194,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618960267
    },
    {
        "content": "<p>why can <code>foo</code> not have <code>'a</code> be late bound</p>",
        "id": 235430214,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618960286
    },
    {
        "content": "<p><code>for&lt;'a&gt; Bar&lt;'a&gt;: Foo</code> holds</p>",
        "id": 235430231,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618960308
    },
    {
        "content": "<p>is this something that <em>could</em> be done but just isnt?</p>",
        "id": 235430239,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618960322
    },
    {
        "content": "<p>or am I maybe missing some reason as to why this would be incorrect to do</p>",
        "id": 235430295,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618960337
    },
    {
        "content": "<p>I atleast get why \"HRTB with early bound lifetimes\" makes not much sense <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I think im now just confused why my lifetime is early bound not late bound</p>",
        "id": 235431652,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618961304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"326176\">@Boxy</span> it's because <code>'a: 'a</code></p>",
        "id": 235431942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618961520
    },
    {
        "content": "<p>that's a where clause</p>",
        "id": 235431988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618961527
    },
    {
        "content": "<p>whenever a lifetime appears in a where clause (at least presently) we call it early bound</p>",
        "id": 235432053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618961575
    },
    {
        "content": "<p>the way is works is that when we evaluate <code>foo</code> you get a value, and you introduce the where clauses at that time and prove them true</p>",
        "id": 235432131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618961615
    },
    {
        "content": "<p>(note that in an ideal world I think we could erase some of these differences)</p>",
        "id": 235432149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618961625
    },
    {
        "content": "<p>what are the differences you're talking about?</p>",
        "id": 235432328,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618961721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/HRTB.20with.20early.20bound.20lifetimes/near/235432053\">said</a>:</p>\n<blockquote>\n<p>whenever a lifetime appears in a where clause (at least presently) we call it early bound</p>\n</blockquote>\n<p>I think the \"at least presently\" somewhat answers my previous question though <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 235432662,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618961957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy</span> <a href=\"#narrow/stream/144729-wg-traits/topic/HRTB.20with.20early.20bound.20lifetimes/near/235432328\">said</a>:</p>\n<blockquote>\n<p>what are the differences you're talking about?</p>\n</blockquote>\n<p>I mean the whole distinction between early and late bound -- I think that with chalk or a more flexible solver we could lighten some of these distinctions</p>",
        "id": 235440518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618967895
    }
]