[
    {
        "content": "<p>I have a question about trait bound resolution, and wasn't able to find an issue on github related to it (I suspect there is one, but I'm not sure what to search for):</p>\n<p>This playground fails to compile, despite the bounds looking like they should ensure that the error situation should never happen<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bad85946a6fbab31976393d7a7419316\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bad85946a6fbab31976393d7a7419316</a><br>\nIs there a reason for this? Would not rejecting it allow unsoundness, or is this a hole in resolution, or something else?</p>",
        "id": 243950912,
        "sender_full_name": "CraftSpider",
        "timestamp": 1624644593
    },
    {
        "content": "<p>What would you expect here?</p>",
        "id": 243955105,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624646839
    },
    {
        "content": "<p>The bounds must apply for an impl to be allowed</p>",
        "id": 243955124,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624646850
    },
    {
        "content": "<p>There is no <code>impl&lt;'a&gt; Add&lt;Bar&gt; for &amp;'a Bar { type Output = Bar; }</code></p>",
        "id": 243955266,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624646926
    },
    {
        "content": "<p>I'd expect the function to compile. I included Bar to show that the compiler erroring on <em>both</em> the Bar impl and the use in the function seems odd, as one of those errors implies the other shouldn't happen: The trait can't be implemented if the <code>where</code> doesn't hold, so why do I need to repeat it on the function?</p>",
        "id": 243959669,
        "sender_full_name": "CraftSpider",
        "timestamp": 1624649238
    },
    {
        "content": "<p>I add that impl for Bar, and it can now implement Foo, but the function still fails to compile</p>",
        "id": 243959721,
        "sender_full_name": "CraftSpider",
        "timestamp": 1624649266
    },
    {
        "content": "<p>Basically: If a trait has certain bounds, I would expect those bounds to be implicitly included on any generic bound on the trait</p>",
        "id": 243959904,
        "sender_full_name": "CraftSpider",
        "timestamp": 1624649348
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 243960284,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624649527
    },
    {
        "content": "<p>Well</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">do_thing</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">item</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>that suggestion is definitely wrong anyways lol</p>",
        "id": 243960312,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624649543
    },
    {
        "content": "<p>Definitely seems weird</p>",
        "id": 243960454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624649640
    },
    {
        "content": "<p>seems like the implied bounds when we WF check <code>T: Foo</code> is probably not correct</p>",
        "id": 243960979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1624649887
    },
    {
        "content": "<p>Okay, makes sense. I'm not super familiar with how the compiler actually handles well-formedness predicates, I only touched them indirectly as part of playing with making rust-call a little more robust to incorrect usage a while ago. But I just was playing with something and ran into that, and was like 'Huh... I don't immediately see a reason that doesn't hold, but maybe there's a reason'</p>",
        "id": 243963238,
        "sender_full_name": "CraftSpider",
        "timestamp": 1624651085
    },
    {
        "content": "<p>Opened an issue: <a href=\"https://github.com/rust-lang/rust/issues/86635\">https://github.com/rust-lang/rust/issues/86635</a></p>",
        "id": 243964362,
        "sender_full_name": "CraftSpider",
        "timestamp": 1624651570
    }
]