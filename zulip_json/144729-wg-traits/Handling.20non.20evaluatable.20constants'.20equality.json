[
    {
        "content": "<p>Hi! I'm working on some stuff ( <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8799#issuecomment-839015078\">https://github.com/rust-analyzer/rust-analyzer/pull/8799#issuecomment-839015078</a>) in rust analyzer, and we're adding partial constant evaluation support. As part of this, we have a variant of our ConcreteConst type we give to chalk that represents a computation that we don't know how to do, but probably is not erroneous.</p>\n<p>Previously, when all computations were like this, we returned true always from const_eq in our Interner, but now that we have some simple computations that do actually have known concrete values, we sometimes have a real answer. The question I have is, what should our return value for const equality be, to achieve the most correct result the most of the time, in cases where one or both of the operands don't have known values due to our constant evaluation limitations?</p>",
        "id": 238386348,
        "sender_full_name": "Jade",
        "timestamp": 1620769285
    },
    {
        "content": "<p>eddyb <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/8799/files#r630152210\">mentioned</a> that rustc sometimes defers const equality obligations for later (if I understood it right). How does Chalk deal with this? Is this not necessary in Chalk's model?</p>",
        "id": 238439693,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1620808346
    },
    {
        "content": "<p>ping, not to let this topic get buried <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> </p>\n<p>rustc seems to implement Chalk's <code>ConcreteConst</code> directly as an evaluated constant. How does it deal with something like <code>N - 1</code>?</p>\n<p>do constants not need 'lazy' evaluation/normalization?</p>",
        "id": 238616336,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1620910119
    },
    {
        "content": "<p>I'm pretty sure <code>N - 1</code> would be represented as an <code>Unevaluated</code> not a <code>ConcreteConst</code></p>",
        "id": 238616614,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620910317
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.ConstKind.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.ConstKind.html</a></p>",
        "id": 238616732,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620910388
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/596\">chalk#596</a> would have added <code>Unevaluated</code>, but we have basically no design directions and it became inactive, so it was closed</p>",
        "id": 238616896,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620910500
    },
    {
        "content": "<p>That being said, this is probably something we should have a design meeting to specifically talk about how we want to handle const evaluation in Chalk</p>",
        "id": 238616955,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620910540
    },
    {
        "content": "<p>And try to get people like <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> and the <span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span> group involved for that</p>",
        "id": 238617028,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620910574
    },
    {
        "content": "<p>aha, that makes things make a lot more sense</p>",
        "id": 238617059,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1620910590
    },
    {
        "content": "<p>I'd been wondering how chalk was gonna handle const generics stuff <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 238617068,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1620910600
    },
    {
        "content": "<p>Yeah, short answer: we don't know</p>",
        "id": 238617123,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620910643
    },
    {
        "content": "<p>it would be good to press on :)</p>",
        "id": 238619190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620911776
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span></p>",
        "id": 238619193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620911778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Handling.20non.20evaluatable.20constants'.20equality/near/238616614\">said</a>:</p>\n<blockquote>\n<p>I'm pretty sure <code>N - 1</code> would be represented as an <code>Unevaluated</code> not a <code>ConcreteConst</code></p>\n</blockquote>\n<p>yes</p>",
        "id": 238636619,
        "sender_full_name": "lcnr",
        "timestamp": 1620919453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Handling.20non.20evaluatable.20constants'.20equality/near/238616955\">said</a>:</p>\n<blockquote>\n<p>That being said, this is probably something we should have a design meeting to specifically talk about how we want to handle const evaluation in Chalk</p>\n</blockquote>\n<p>seems good</p>",
        "id": 238636660,
        "sender_full_name": "lcnr",
        "timestamp": 1620919469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Handling.20non.20evaluatable.20constants'.20equality/near/238619193\">said</a>:</p>\n<blockquote>\n<p>cc <span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is there already something specific i should comment on here?</p>",
        "id": 238636802,
        "sender_full_name": "lcnr",
        "timestamp": 1620919535
    },
    {
        "content": "<p>Probably not :)</p>",
        "id": 238638767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620920428
    },
    {
        "content": "<p>heh, no I guess not</p>",
        "id": 238642403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620921972
    },
    {
        "content": "<p>I just wanted to be sure you'd seen the topic</p>",
        "id": 238642422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620921978
    }
]