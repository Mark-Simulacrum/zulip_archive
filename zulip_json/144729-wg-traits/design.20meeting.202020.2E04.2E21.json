[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 194853430,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587499100
    },
    {
        "content": "<p>meeting starting soon</p>",
        "id": 194853441,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587499105
    },
    {
        "content": "<p>Agenda for today, implied bounds</p>",
        "id": 194853448,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587499113
    },
    {
        "content": "<p>I think I'm gonna be fairly absent today. Work is a bit busy</p>",
        "id": 194853483,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587499139
    },
    {
        "content": "<p>Before we get started, feel free to leave notes on progress</p>",
        "id": 194853602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499194
    },
    {
        "content": "<p>and let's update the <a href=\"https://hackmd.io/kYWsWI9IS0213x0qX_1RDw\" title=\"https://hackmd.io/kYWsWI9IS0213x0qX_1RDw\">sprint goals doc</a></p>",
        "id": 194853672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499214
    },
    {
        "content": "<p>There was so much activity this week</p>",
        "id": 194853688,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587499223
    },
    {
        "content": "<p>Including recursive solver getting merged, impl Trait</p>",
        "id": 194853720,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587499239
    },
    {
        "content": "<p>Also implied bounds were discussed at the last lang meeting, can you link the doc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 194853752,
        "sender_full_name": "Areredify",
        "timestamp": 1587499254
    },
    {
        "content": "<p>/me goes to look up what else</p>",
        "id": 194853756,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587499259
    },
    {
        "content": "<p>And some work on the chalk book</p>",
        "id": 194853769,
        "sender_full_name": "detrumi",
        "timestamp": 1587499265
    },
    {
        "content": "<p>And also Copy, Clone and Drop support</p>",
        "id": 194853792,
        "sender_full_name": "detrumi",
        "timestamp": 1587499278
    },
    {
        "content": "<p>I just merged the scalar types work</p>",
        "id": 194853815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499289
    },
    {
        "content": "<p>(8 PRs merged)</p>",
        "id": 194853821,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587499293
    },
    {
        "content": "<p>wait, more</p>",
        "id": 194853853,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587499313
    },
    {
        "content": "<p>12</p>",
        "id": 194853960,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587499341
    },
    {
        "content": "<h1>Implied bounds links</h1>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2089-implied-bounds.md\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/2089-implied-bounds.md\">RFC 2089</a></li>\n<li><a href=\"https://rustc-dev-guide.rust-lang.org/traits/implied-bounds.html\" title=\"https://rustc-dev-guide.rust-lang.org/traits/implied-bounds.html\">Chapter from the rustc-dev-guide</a></li>\n</ul>",
        "id": 194854027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499371
    },
    {
        "content": "<p>I was hoping to have re-read both of those but of course I didn't get to it ;)</p>",
        "id": 194854072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499394
    },
    {
        "content": "<p>but I figured we can talk out the design</p>",
        "id": 194854083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499399
    },
    {
        "content": "<p>and I'll remember as I go</p>",
        "id": 194854087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499402
    },
    {
        "content": "<p>I'm hoping both to spread the knowledge a bit and then debate a few details</p>",
        "id": 194854105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499411
    },
    {
        "content": "<p>let me make a dedicated hackmd for taking notes and examples I think</p>",
        "id": 194854122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499418
    },
    {
        "content": "<p>not sure if <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> is around, that'd be amazing (they're the original architect here)</p>",
        "id": 194854169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499436
    },
    {
        "content": "<p>Oh right, this is also about the Implemented/FromEnv split, which I find confusing</p>",
        "id": 194854268,
        "sender_full_name": "detrumi",
        "timestamp": 1587499464
    },
    {
        "content": "<p><a href=\"https://hackmd.io/C16wkTwoRx-aFW5F4-4CKQ\" title=\"https://hackmd.io/C16wkTwoRx-aFW5F4-4CKQ\">hackmd for notes from this meeting</a></p>",
        "id": 194854271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499466
    },
    {
        "content": "<p>Maybe it would be helpful to start out with a brief overview of what implied bounds <em>is</em></p>",
        "id": 194854385,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587499522
    },
    {
        "content": "<p>yep</p>",
        "id": 194854401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499528
    },
    {
        "content": "<p>let me write out a proposed agenda</p>",
        "id": 194854405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499533
    },
    {
        "content": "<p>how chalk handles it, and how it differs from rustc</p>",
        "id": 194854406,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587499533
    },
    {
        "content": "<h2>Agenda</h2>\n<ul>\n<li>What is implied bounds, from a user's POV?</li>\n<li>\n<p>Naive implementation and why it doesn't work<br>\n    * Some of the relevant bugs and corner cases, if we can find a good list :)</p>\n</li>\n<li>\n<p>Implementation we wound up with</p>\n</li>\n<li>Questions below</li>\n</ul>",
        "id": 194854545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499593
    },
    {
        "content": "<p>from the doc</p>",
        "id": 194854548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499595
    },
    {
        "content": "<p>sound reasonable?</p>",
        "id": 194854559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499599
    },
    {
        "content": "<p>(btw, did folks update the sprint goals doc?)</p>",
        "id": 194854591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499615
    },
    {
        "content": "<p>(I'm hoping yes)</p>",
        "id": 194854596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499617
    },
    {
        "content": "<p>but let's get started</p>",
        "id": 194854598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499619
    },
    {
        "content": "<p>if not, it'd be great to add a few notes on what you did :)</p>",
        "id": 194854611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499625
    },
    {
        "content": "<p>So, yes, implied bounds.</p>",
        "id": 194854642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499645
    },
    {
        "content": "<p>Both rustc and chalk have a notion of \"implied bounds\"</p>",
        "id": 194854646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499650
    },
    {
        "content": "<p>but rustc's is much more limited</p>",
        "id": 194854651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499655
    },
    {
        "content": "<p>as a super simple example, consider <code>trait Copy: Clone</code></p>",
        "id": 194854670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499667
    },
    {
        "content": "<p>which expands to <code>trait Copy where Self: Clone</code></p>",
        "id": 194854683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499674
    },
    {
        "content": "<p>i.e., for every impl of <code>Copy</code>, the <code>Self</code> type must also implement <code>Clone</code></p>",
        "id": 194854746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499693
    },
    {
        "content": "<p>more \"casually\" called a supertrait</p>",
        "id": 194854759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499701
    },
    {
        "content": "<p>(supertrait does have some special meaning for <code>dyn</code> values, but let's ignore that)</p>",
        "id": 194854773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499709
    },
    {
        "content": "<p>I can write something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and, because of that supertrait relationship, I can assume that <code>T: Clone</code> too</p>",
        "id": 194854809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499734
    },
    {
        "content": "<p>But how do I know that, really? The caller only <em>directly proved</em> that <code>T: Copy</code> (well, you could imagine different designs, but let's assume that's true for the moment)</p>",
        "id": 194854871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499758
    },
    {
        "content": "<p>the idea is that:</p>\n<ul>\n<li>the caller proved that <code>T: Copy</code> has some valid impl</li>\n<li>and we know that for each valid impl of <code>T: Copy</code>, the impl proved that <code>T: Clone</code></li>\n</ul>",
        "id": 194854938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499786
    },
    {
        "content": "<p>but in Rust today if you have other where-clauses that aren't related to <code>Self</code>, you don't get these benefits</p>",
        "id": 194855035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499813
    },
    {
        "content": "<p>e.g., <code>trait Foo&lt;X: Ord&gt;</code></p>",
        "id": 194855051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499825
    },
    {
        "content": "<p>(hi, I'm around)</p>",
        "id": 194855063,
        "sender_full_name": "scalexm",
        "timestamp": 1587499835
    },
    {
        "content": "<p>if I have <code>fn foo&lt;A, B: Foo&lt;A&gt;&gt;()</code>, I don't get to assume that <code>A: Ord</code> (in fact, I get an error)</p>",
        "id": 194855083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499847
    },
    {
        "content": "<p>rustc also leverages the idea of implied bounds very explicitly around lifetimes</p>",
        "id": 194855127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499876
    },
    {
        "content": "<p>for example, if I have</p>",
        "id": 194855138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499881
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194855149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499892
    },
    {
        "content": "<p>the code inside the impl gets to assume that <code>T: 'a</code>, which is part of the \"well-formed\" conditions for the type <code>&amp;'a T</code></p>",
        "id": 194855171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499905
    },
    {
        "content": "<p>the idea here is that the impl gets to assume all of its <em>input types</em> (<code>&amp;'a T</code>, in this case)  are \"well-formed\"</p>",
        "id": 194855250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499929
    },
    {
        "content": "<p>does this all make sense so far?</p>",
        "id": 194855263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499938
    },
    {
        "content": "<p>(in turn, whoever \"applies\" the impl must prove that the types are well-formed)</p>",
        "id": 194855311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499957
    },
    {
        "content": "<p><code>T: 'a</code> meaning that <code>'a</code> lives at least as long as <code>T</code>, right?</p>",
        "id": 194855357,
        "sender_full_name": "detrumi",
        "timestamp": 1587499979
    },
    {
        "content": "<p>yeah</p>",
        "id": 194855367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499983
    },
    {
        "content": "<p>more precisely, all lifetimes inside of <code>T</code> outlive <code>'a</code></p>",
        "id": 194855388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587499991
    },
    {
        "content": "<p>but we don't really have to talk about lifetimes for today, no real difference for our purposes with that example vs supertraits</p>",
        "id": 194855433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500022
    },
    {
        "content": "<p>(though there are some differences in terms of how rustc implements things which I'd prefer to avoid discussing ;)</p>",
        "id": 194855457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500033
    },
    {
        "content": "<p>Right. So, the naive implementation?</p>",
        "id": 194855540,
        "sender_full_name": "detrumi",
        "timestamp": 1587500069
    },
    {
        "content": "<p>so, the \"user's experience\" of implied bounds is to extend from \"just supertraits\" to a much broader set of \"well-formedness\" rules</p>",
        "id": 194855542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500069
    },
    {
        "content": "<p>i.e., if you have <code>trait Foo&lt;T: Ord&gt;</code>, you get to assume that <code>T: Ord</code> is true too</p>",
        "id": 194855585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500091
    },
    {
        "content": "<p>not just supertraits</p>",
        "id": 194855593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500093
    },
    {
        "content": "<p>similarly, and perhaps the more common example</p>",
        "id": 194855615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500104
    },
    {
        "content": "<p>if I have <code>struct MySet&lt;T: Ord&gt;</code></p>",
        "id": 194855629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500109
    },
    {
        "content": "<p>and I have an impl like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MySet</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194855645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500121
    },
    {
        "content": "<p>because I know that <code>MySet&lt;T&gt;</code> is well-formed, I would know that <code>T: Ord</code></p>",
        "id": 194855665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500134
    },
    {
        "content": "<p>(there are some semver implications I would also prefer to avoid because it's orthogonal from our concern atm)</p>",
        "id": 194855690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500148
    },
    {
        "content": "<p>similarly <code>fn foo&lt;T&gt;(m: MySet&lt;T&gt;)</code> would know that <code>T: Ord</code> because fn parameter types must also be proven to be well-formed by callers</p>",
        "id": 194855780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500179
    },
    {
        "content": "<p>but in terms of how we <em>implemented</em> this in chalk, we wanted to do a \"simpler\" impl that exposed this idea cleanly -- i.e., we wanted to capture this in the \"lowering rules\" that chalk-solve uses, versus something added into the solver itself or in the rust layer</p>",
        "id": 194855857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500228
    },
    {
        "content": "<p>this is somewhat in contrast to how rustc implements supertraits, which is by a kind of \"fixed point expansion\". i.e., it takes an environment like <code>[T: Copy]</code> and \"elaborates\" it to include <code>[T: Copy, T: Clone]</code></p>",
        "id": 194855915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500263
    },
    {
        "content": "<p>(so far so good?)</p>",
        "id": 194855931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500276
    },
    {
        "content": "<p>(I'll cover the elaboration vs what chalk does in a sec)</p>",
        "id": 194855977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500285
    },
    {
        "content": "<p>ps <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> if you have a list of the various soundness bugs and edge cases, it'd be awesome if you started adding some links to <a href=\"https://hackmd.io/C16wkTwoRx-aFW5F4-4CKQ\" title=\"https://hackmd.io/C16wkTwoRx-aFW5F4-4CKQ\">the hackmd</a></p>",
        "id": 194856052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500342
    },
    {
        "content": "<p>I can try to find some yes</p>",
        "id": 194856072,
        "sender_full_name": "scalexm",
        "timestamp": 1587500355
    },
    {
        "content": "<p>well I guess in my agenda I said I would start with the \"naive impl\"</p>",
        "id": 194856076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500356
    },
    {
        "content": "<p>so maybe I'll do that, though I wonder if it'd be more confusing  than helpful</p>",
        "id": 194856097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500367
    },
    {
        "content": "<p>I guess the first idea was that we might add a rule like this</p>",
        "id": 194856123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500378
    },
    {
        "content": "<p>given <code>trait Copy: Clone</code></p>",
        "id": 194856144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500386
    },
    {
        "content": "<p>we might generate a clause like</p>\n<div class=\"codehilite\"><pre><span></span>Implemented(T: Clone) :- Implemented(T: Copy)\n</pre></div>",
        "id": 194856161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500400
    },
    {
        "content": "<p>in other words, if you can prove that <code>T: Copy</code>, you have proven that <code>T: Clone</code> too</p>",
        "id": 194856222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500412
    },
    {
        "content": "<p>but this is not a very good rule</p>",
        "id": 194856280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500450
    },
    {
        "content": "<p>ah I see <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> already wrote this up perfectly in rustc-dev-guide <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 194856304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500464
    },
    {
        "content": "<p>here is the problem</p>",
        "id": 194856311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500470
    },
    {
        "content": "<p>now imagine I have this program</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194856330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500479
    },
    {
        "content": "<p>this should be an error, because I don't have an <code>impl Clone for X</code></p>",
        "id": 194856342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500487
    },
    {
        "content": "<p>but how do we find that error?</p>",
        "id": 194856345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500490
    },
    {
        "content": "<p>the idea was that the impl would try to prove that the \"where clauses\" for the trait holds</p>",
        "id": 194856364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500505
    },
    {
        "content": "<p>so the <code>impl Copy for X</code> would come with a \"well-formed obligation\" to prove that <code>X: Clone</code></p>",
        "id": 194856379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500520
    },
    {
        "content": "<p>but it would also generate a program clause <code>Implemented(X: Copy)</code> (that's the rule for an impl)</p>",
        "id": 194856432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500535
    },
    {
        "content": "<p>so if you put the clauses together, we have</p>\n<div class=\"codehilite\"><pre><span></span>Implemented(X: Copy). // from the impl\n\nImplemented(X: Clone) :- Implemented(X: Copy). // from the trait\n</pre></div>",
        "id": 194856474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500553
    },
    {
        "content": "<p>which means that, actually, the impl can prove that <code>X: Clone</code></p>",
        "id": 194856491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500561
    },
    {
        "content": "<p>even though there is, in fact, no <code>X: Clone</code> impl anywhere</p>",
        "id": 194856500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500570
    },
    {
        "content": "<p>basically it can prove it by relying on <em>itself</em> recursively</p>",
        "id": 194856512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500578
    },
    {
        "content": "<p>we experimented with a few ways to address this, but we ultimately landed on the <code>FromEnv</code>/<code>Implemented</code> split you seen today</p>",
        "id": 194856539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E21/near/194856491\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E21/near/194856491\">said</a>:</p>\n<blockquote>\n<p>which means that, actually, the impl can prove that <code>X: Clone</code></p>\n</blockquote>\n<p>do folks see why this is?</p>",
        "id": 194856554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500615
    },
    {
        "content": "<p>Well</p>",
        "id": 194856676,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587500667
    },
    {
        "content": "<p>so, the idea of <code>FromEnv</code> / <code>Implemented</code> is to kind of make this \"split\" apparent --</p>",
        "id": 194856679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500668
    },
    {
        "content": "<p>/me waits</p>",
        "id": 194856687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500671
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 194856689,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587500672
    },
    {
        "content": "<p>I never thought about that</p>",
        "id": 194856700,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587500680
    },
    {
        "content": "<p>(sorry, I should have just thumbs up)</p>",
        "id": 194856764,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587500728
    },
    {
        "content": "<p>so <code>FromEnv</code> basically means \"I know this is true because my caller 'proved' it for me\" --</p>",
        "id": 194856796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500758
    },
    {
        "content": "<p>presuming there is a caller --</p>",
        "id": 194856840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500765
    },
    {
        "content": "<p>Why not something like <code>Implemented(X: Copy) :- HasImpl(X: Copy), Implemented(X: Clone).</code>? (<code>HasImpl</code> would represent the impl existing in the code)</p>",
        "id": 194856841,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1587500765
    },
    {
        "content": "<p>well, we have something that has a shape much like that iirc...</p>",
        "id": 194856899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500798
    },
    {
        "content": "<p>though I guess its role is a bit different, but I think the <code>WellFormed</code> rule I'll discuss later at least looks like that...</p>",
        "id": 194856928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500817
    },
    {
        "content": "<p>tbh I don't remember the exact reasons for this design, but there were a number of tricky cases that led us here -- it'd be good to note down some of the alternates for later perhaps -- though maybe <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> remembers</p>",
        "id": 194856998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500855
    },
    {
        "content": "<p>(let's jot the question for now in the hackmd)</p>",
        "id": 194857012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500865
    },
    {
        "content": "<p>all that said, there are multiple ways to approach the problem that could be valid, and in some cases one might be more or less efficient, as well (i.e., require proving more things)</p>",
        "id": 194857105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500893
    },
    {
        "content": "<p>for me one of the key examples to understand why we needed the split is this soundness bug: <a href=\"https://github.com/rust-lang/rust/pull/43786\" title=\"https://github.com/rust-lang/rust/pull/43786\">https://github.com/rust-lang/rust/pull/43786</a> (which I've put in the hackmd)</p>",
        "id": 194857187,
        "sender_full_name": "scalexm",
        "timestamp": 1587500948
    },
    {
        "content": "<p>I think that's one of the issue numbers I was hoping to find, yeah</p>",
        "id": 194857226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587500971
    },
    {
        "content": "<p>well, at least of all the designs we tried, the Implemented / FromEnv setup is the only one who went through this bug successfully (or other variations of it)</p>",
        "id": 194857240,
        "sender_full_name": "scalexm",
        "timestamp": 1587500984
    },
    {
        "content": "<p>(side note that there's a connection to the idea of coinduction and \"productive definitions\" here that I've never been able to quite elaborate to my satisfaction, if those terms mean anything to you)</p>",
        "id": 194857367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501018
    },
    {
        "content": "<p>but yes I remember that many \"seemingly logical\" designs wind up failing on that bug</p>",
        "id": 194857403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501038
    },
    {
        "content": "<p>ok, so, let's cover the scheme as impl'd today I guess</p>",
        "id": 194857457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501076
    },
    {
        "content": "<p>so the way we model this is...</p>",
        "id": 194857464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501081
    },
    {
        "content": "<p>if you have</p>",
        "id": 194857466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501082
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194857481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501090
    },
    {
        "content": "<p>the <code>T: Copy</code>, in chalk terms, is a \"where-clause\", and it can be converted into a goal in two ways...</p>\n<ul>\n<li><code>Implemented(T: Copy)</code> -- \"we know that <code>T: Copy</code> has an implementation\"</li>\n<li><code>FromEnv(T: Copy)</code> -- \"we know that <code>T: Copy</code> is true because our caller proved it for us\"</li>\n</ul>",
        "id": 194857611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501147
    },
    {
        "content": "<p>so when you <em>call</em> <code>foo::&lt;X&gt;</code> or whatever, you have to prove <code>Implemented(X: Copy)</code></p>",
        "id": 194857647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501173
    },
    {
        "content": "<p>but when we type-check the body  of <code>foo</code>, we get to do so in an environment like </p>\n<div class=\"codehilite\"><pre><span></span>forall&lt;T&gt; {\n  if (FromEnv(T: Copy)) { ... }\n}\n</pre></div>",
        "id": 194857692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501205
    },
    {
        "content": "<p>similarly, when you have an <code>impl Copy for SomeType</code> impl, it generates the rule <code>Implemented(SomeType: Copy)</code> -- i.e., it lets us prove that <code>SomeType: Copy</code>, but not that we know it because of a where-clause</p>",
        "id": 194857785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501250
    },
    {
        "content": "<p>and then we have two rules. The first is:</p>",
        "id": 194857824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501269
    },
    {
        "content": "<ul>\n<li><code>forall&lt;T&gt; { Implemented(T: Copy) :- FromEnv(T: Copy) }</code></li>\n</ul>",
        "id": 194857870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501284
    },
    {
        "content": "<p>(that is generated from the trait definition)</p>",
        "id": 194857884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501290
    },
    {
        "content": "<p>if you just have that alone, you get no implied bounds, but the setup kind of \"works\"</p>",
        "id": 194857901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501302
    },
    {
        "content": "<p>i.e., <code>fn foo&lt;T: Copy&gt;</code> can prove that <code>Implemented(T: Copy)</code> because:</p>\n<ul>\n<li>it knows <code>FromEnv(T: Copy)</code></li>\n<li>and it can deduce from that <code>Implemented(T: Copy)</code> by applying the rule</li>\n</ul>",
        "id": 194857959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501335
    },
    {
        "content": "<p>then the last bit is that, also from the trait definition, we generate \"elaboration\" rules for <code>FromEnv</code> clauses:</p>\n<ul>\n<li><code>forall&lt;T&gt; { FromEnv(T: Clone) :- FromEnv(T: Copy) }</code></li>\n</ul>",
        "id": 194858055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501369
    },
    {
        "content": "<p>so, <em>if you know <code>T: Copy</code> from a where-clause</em>, you also know <code>T: Clone</code> from a where-clause</p>",
        "id": 194858079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501383
    },
    {
        "content": "<p>but if you don't have a where-clause, just a <code>Copy</code> impl, that's all you know -- that <code>T: Copy</code>, you'd have to go find the <code>T: Clone</code> impl yourself</p>",
        "id": 194858115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501407
    },
    {
        "content": "<p>and in particular, this means that in my erroneous program above, </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>when the impl tries to prove that <code>X: Clone</code>, it can't, because it has no where-clause to rely on.</p>",
        "id": 194858169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501443
    },
    {
        "content": "<p>/me stops</p>",
        "id": 194858172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501445
    },
    {
        "content": "<p>so far so good</p>",
        "id": 194858185,
        "sender_full_name": "Areredify",
        "timestamp": 1587501453
    },
    {
        "content": "<p>ok, let's leave aside the tricky bugs, because I want to get to some of the questions :)</p>",
        "id": 194858313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501515
    },
    {
        "content": "<p>in particular,</p>",
        "id": 194858332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501540
    },
    {
        "content": "<p>ah well</p>",
        "id": 194858344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501548
    },
    {
        "content": "<p>ok I left out one part :)</p>",
        "id": 194858348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501550
    },
    {
        "content": "<p>which is to talk a bit more about what each impl must prove, and the various <code>WellFormed</code> goals</p>",
        "id": 194858362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501566
    },
    {
        "content": "<p>and that's kind of important</p>",
        "id": 194858371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501572
    },
    {
        "content": "<p>ps <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I hope you don't mind me typing it out, kind of useful to be sure I remember it :)</p>",
        "id": 194858414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501598
    },
    {
        "content": "<p>right, so, I kind of hand-waived a bit about what the impl must prove</p>",
        "id": 194858478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501615
    },
    {
        "content": "<p>the idea of the \"well-formed\" goals is that they encapsulate two notions:</p>\n<ul>\n<li><code>WellFormed(Ty)</code> -- what it takes for a <em>type</em> to be well-formed (defined basd on the type definition, as we'll see)</li>\n<li><code>WellFormed(T0: Trait&lt;T1..Tn&gt;)</code> -- what it takes for a <em>trait ref</em> to be well-formed (defined based on the trait definition)</li>\n</ul>",
        "id": 194858563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501672
    },
    {
        "content": "<p>(also, as I recall, we were debating about renaming at least one of those...the latter one...)</p>",
        "id": 194858586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501689
    },
    {
        "content": "<p>so if you have <code>trait Copy: Clone</code>, it would generate a rule like this:</p>",
        "id": 194858705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501751
    },
    {
        "content": "<p>(sorry, skimming the rustc-dev-guide again :)</p>",
        "id": 194858718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501757
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>forall&lt;Self&gt; {\n  WellFormed(Self: Copy) :-\n    Implemented(Self: Clone),\n    WellFormed(Self: Clone)\n}\n</pre></div>\n\n\n<p>(EDIT: wrong, see below)</p>",
        "id": 194858790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501807
    },
    {
        "content": "<p>the idea is that not only must all the where-clauses on the trait be satisfied, but the <em>transitive set</em> of where-clauses from those traits too</p>",
        "id": 194858880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501844
    },
    {
        "content": "<p>time check, 45 minutes in</p>",
        "id": 194858957,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587501883
    },
    {
        "content": "<p>so if you had</p>\n<div class=\"codehilite\"><pre><span></span>trait A\ntrait B: A\ntrait C: B\n</pre></div>\n\n\n<p>then an impl of <code>C</code> would have to prove</p>\n<ul>\n<li>there is an impl of <code>B</code></li>\n<li>and that impl is well-formed (which implies proving that there's an impl of <code>A</code>)</li>\n</ul>",
        "id": 194858961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501885
    },
    {
        "content": "<p>Hmm, so <code>WellFormed(Self: Clone)</code> doesn't imply <code>Implemented(Self: Clone)</code></p>",
        "id": 194858972,
        "sender_full_name": "detrumi",
        "timestamp": 1587501890
    },
    {
        "content": "<p><del>remember that these are used as <em>goals</em> (things that must be proven)</del></p>",
        "id": 194859035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587501937
    },
    {
        "content": "<p>Because of coinductive semantics I think?</p>",
        "id": 194859045,
        "sender_full_name": "Areredify",
        "timestamp": 1587501942
    },
    {
        "content": "<p>sorry, I think I misunderstood what you were saying</p>",
        "id": 194859172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502000
    },
    {
        "content": "<p>I think I transcribed it wrong actually</p>",
        "id": 194859197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502013
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>forall&lt;Self&gt; {\n  WellFormed(Self: Copy) :-\n    Implemented(Self: Copy),\n    WellFormed(Self: Clone)\n}\n</pre></div>\n\n\n<p>is correct</p>",
        "id": 194859232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502029
    },
    {
        "content": "<p>Ah, that makes more sense</p>",
        "id": 194859257,
        "sender_full_name": "detrumi",
        "timestamp": 1587502043
    },
    {
        "content": "<p>this is why we were debating about other names</p>",
        "id": 194859287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502058
    },
    {
        "content": "<p>in some sense <code>WellFormed</code> is like \"fully implemented\"</p>",
        "id": 194859294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502064
    },
    {
        "content": "<p>not only is the trait implemented, but also all of its where-clauses are true</p>",
        "id": 194859313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502075
    },
    {
        "content": "<p>(feel free to skip if meeting is going long) So <code>Implemented(T: Copy)</code> does not imply <code>Implemented(T: Clone)</code>?</p>",
        "id": 194859379,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1587502100
    },
    {
        "content": "<p>No, not directly</p>",
        "id": 194859408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502121
    },
    {
        "content": "<p>Really <code>Implemented</code> should be something like <code>ExistsImpl</code>, I think</p>",
        "id": 194859434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502135
    },
    {
        "content": "<p>i.e., you know there's an impl -- but that's all you know in some sense</p>",
        "id": 194859446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502145
    },
    {
        "content": "<p>you don't really know the impl is \"well formed\"</p>",
        "id": 194859456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502150
    },
    {
        "content": "<p>and that is exactly what an <code>impl Foo for T</code> gives you</p>",
        "id": 194859472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502162
    },
    {
        "content": "<p>It ties back to my <code>HasImpl</code> from before</p>",
        "id": 194859484,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1587502168
    },
    {
        "content": "<p>right, that's partly why I deferred</p>",
        "id": 194859501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502175
    },
    {
        "content": "<p><code>ExistsImpl</code> sounds like it has to do with quantification, I think <code>Implemented</code> is fine</p>",
        "id": 194859539,
        "sender_full_name": "detrumi",
        "timestamp": 1587502196
    },
    {
        "content": "<p>well, anyway,</p>",
        "id": 194859625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502216
    },
    {
        "content": "<p>I guess we won't get to the most complex part I wanted to get to, seeing as we're 50 minutes in, but we might as well try to round out the story</p>",
        "id": 194859640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502228
    },
    {
        "content": "<p>and cover the well-formed types part of it</p>",
        "id": 194859644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502232
    },
    {
        "content": "<p>which <em>just</em> gets to the question I wanted to raise :)</p>",
        "id": 194859649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502237
    },
    {
        "content": "<p>I mentioned early on that <code>fn foo&lt;T&gt;(x: MySet&lt;T&gt;)</code> wants to assume that <code>T: Ord</code></p>",
        "id": 194859678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502253
    },
    {
        "content": "<p>we've only really talked about traits here</p>",
        "id": 194859697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502260
    },
    {
        "content": "<p>but the principles apply to type definitions in a similar way</p>",
        "id": 194859711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502267
    },
    {
        "content": "<p>if you have</p>",
        "id": 194859720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502271
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">MySet</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Ord</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194859727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502277
    },
    {
        "content": "<p>we can define a goal <code>WellFormed(MySet&lt;T&gt;)</code> that is true when that struct definition is valid...</p>",
        "id": 194859752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502293
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">WellFormed</span><span class=\"p\">(</span><span class=\"n\">MySet</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>:<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Implemented</span><span class=\"p\">(</span><span class=\"n\">T</span>: <span class=\"nb\">Ord</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>is what the rustc-dev-guide says -- i.e., it only checks that there's some impl</p>",
        "id": 194859884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502329
    },
    {
        "content": "<p>(and we assume that the impl had to prove it was well-formed..)</p>",
        "id": 194859901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502339
    },
    {
        "content": "<p>in any case, we also have a <code>FromEnv(Type)</code> form</p>",
        "id": 194859935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502353
    },
    {
        "content": "<p>which is provable if \"your environment requires <code>Type</code> to be well-formed\"</p>",
        "id": 194859977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502370
    },
    {
        "content": "<p>and we have some rules like</p>\n<div class=\"codehilite\"><pre><span></span>FromEnv(T: Ord) :- FromEnv(MySet&lt;T&gt;)\n</pre></div>\n\n\n<p>which we generate from the struct definition</p>",
        "id": 194860056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502417
    },
    {
        "content": "<p>i.e., each where cause in the struct generates one rule</p>",
        "id": 194860068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502424
    },
    {
        "content": "<p>\"if I'm in some context where <code>MySet&lt;T&gt;</code> must be well-formed, then I know that <code>T: Ord</code> is true too\"</p>",
        "id": 194860146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502446
    },
    {
        "content": "<p>Hm, would that work with indirection?</p>",
        "id": 194860195,
        "sender_full_name": "detrumi",
        "timestamp": 1587502474
    },
    {
        "content": "<p>so to put it all together, when you have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MySet</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>or </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">m</span>: <span class=\"nc\">MySet</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194860206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502481
    },
    {
        "content": "<p>they would be type-checked in an environment that includes <code>WellFormed(MySet&lt;T&gt;)</code>...</p>",
        "id": 194860222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502494
    },
    {
        "content": "<p>...and hence they get to prove that <code>Implemented(T: Ord)</code>...</p>",
        "id": 194860264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502512
    },
    {
        "content": "<p>...beacuse they know <code>FromEnv(T: Ord)</code>...</p>",
        "id": 194860294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502525
    },
    {
        "content": "<p>...because they know <code>WellFormed(MySet&lt;T&gt;)</code></p>",
        "id": 194860307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E21/near/194860195\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E04.2E21/near/194860195\">said</a>:</p>\n<blockquote>\n<p>Hm, would that work with indirection?</p>\n</blockquote>\n<p>not sure I understand the question</p>",
        "id": 194860320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502542
    },
    {
        "content": "<p>Never mind, I see how it works now</p>",
        "id": 194860395,
        "sender_full_name": "detrumi",
        "timestamp": 1587502568
    },
    {
        "content": "<p>5 minutes</p>",
        "id": 194860413,
        "sender_full_name": "Areredify",
        "timestamp": 1587502575
    },
    {
        "content": "<p>OK, well, we <em>just</em> had time to cover the system, which makes sense :)</p>",
        "id": 194860446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502600
    },
    {
        "content": "<p>the question I wanted to ask <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> had to do with a detail of <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2089-implied-bounds.md\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/2089-implied-bounds.md\">the RFC</a> etc, wherein we kind of do this \"flatenning\"</p>",
        "id": 194860517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502641
    },
    {
        "content": "<p>I kind of glossed over it here</p>",
        "id": 194860526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502651
    },
    {
        "content": "<p>but imagine that you have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">m</span>: <span class=\"nc\">MySet</span><span class=\"o\">&lt;</span><span class=\"n\">SomeOtherType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194860552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502668
    },
    {
        "content": "<p>this implies <code>SomeOtherType&lt;T&gt;: Ord</code></p>",
        "id": 194860569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502676
    },
    {
        "content": "<p>but if <em>also</em> requires that <code>SomeOtherType&lt;T&gt;</code> is well-formed</p>",
        "id": 194860609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502683
    },
    {
        "content": "<p>which may imply things about <code>T</code></p>",
        "id": 194860633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502693
    },
    {
        "content": "<p>That feels a little unintuitive</p>",
        "id": 194860718,
        "sender_full_name": "Areredify",
        "timestamp": 1587502747
    },
    {
        "content": "<p>the way the RFC was written, we kind of did this \"elaborating\" or \"flatenning\" when lowering from rust syntax. So we would say that <code>foo</code> is type-checked with both <code>FromEnv(MySet&lt;...&gt;)</code> and <code>FromEnv(SomeOtherType&lt;T&gt;)</code> in the environment</p>",
        "id": 194860725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502752
    },
    {
        "content": "<p>instead of having just <code>FromEnv(MySet&lt;SomeOtherType&lt;T&gt;&gt;)</code> and then -- from <em>that</em> -- deducing that <code>FromEnv(SomeOtherType&lt;T&gt;)</code> is implied</p>",
        "id": 194860772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502775
    },
    {
        "content": "<p>(whoops, sorry, had some edits there)</p>",
        "id": 194860835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502802
    },
    {
        "content": "<p>I ran into some problems with this, I think, that have to do with higher-ranked things</p>",
        "id": 194860878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502812
    },
    {
        "content": "<p>(we're at the hour if anyone has to go)</p>",
        "id": 194860956,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587502848
    },
    {
        "content": "<p>and I wanted to discuss it -- i.e., if you had something like <code>for&lt;'a&gt; T: Foo&lt;&amp;'a u32&gt;</code>, you can't \"elaborate\" that to include <code>WellFormed(&amp;'a u32)</code>, because <code>'a</code> is bound</p>",
        "id": 194860991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502867
    },
    {
        "content": "<p>unfortunately I have to go too :)</p>",
        "id": 194861007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502873
    },
    {
        "content": "<p>but maybe we can continue that in another topic / tomorrow...?</p>",
        "id": 194861022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502885
    },
    {
        "content": "<p>Yeah</p>",
        "id": 194861050,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587502900
    },
    {
        "content": "<p>hopefully it was useful to explain how the system works, in any case, and maybe prime us up for considering the follow-up questions, like maybe tweaking some of the names :)</p>",
        "id": 194861063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502909
    },
    {
        "content": "<p>and/or feature gating</p>",
        "id": 194861068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587502913
    },
    {
        "content": "<p>Thanks everyone for attending :)</p>",
        "id": 194861142,
        "sender_full_name": "Jack Huey",
        "timestamp": 1587502941
    },
    {
        "content": "<p>one subtle bit that I'll note:</p>\n<ul>\n<li>in the system as designed, if you have a <code>T: Foo</code> where-clause, you have to <em>prove</em> that the impl exists</li>\n<li>but the callee gets to assume the impl is well-formed</li>\n</ul>\n<p>We believe this is correct because the rust compiler is proving all impls well-formed, but it's a bit subtle.</p>\n<p>We were discussing maybe changing so that instead of proving <code>Implemented(T: Foo)</code> all the time, you actually proved <code>WellFormed(T: Foo)</code>, which is in some sense \"more than necessary\", but also more obviously correct.</p>\n<p>Moreover there was <em>some</em> situation where this made sense, maybe having to do with <code>dyn</code> values?</p>",
        "id": 194861215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503004
    },
    {
        "content": "<p>And I reminded that we were going to maybe extend the implied bound system to <code>dyn</code> values too, and that <em>too</em> was a bit subtle</p>",
        "id": 194861244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503018
    },
    {
        "content": "<p>I think that what is said in the RFC is still true: if you have a rule of the form <code>FromEnv(T) :- FromEnv(MySet&lt;T&gt;)</code>, then you have infinite branches like <code>FromEnv(i32) :- FromEnv(MySet&lt;i32&gt;) :- FromEnv(MySet&lt;MySet&lt;i32&gt;&gt;) :- ...</code> in the proof tree, and a former version of the solver did not like it</p>",
        "id": 194861275,
        "sender_full_name": "scalexm",
        "timestamp": 1587503036
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> you were asking some questions of a similar nature to that iirc)</p>",
        "id": 194861277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503037
    },
    {
        "content": "<p>ah yeah</p>",
        "id": 194861338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503058
    },
    {
        "content": "<p>but maybe that technical limitation does not exist anymore</p>",
        "id": 194861343,
        "sender_full_name": "scalexm",
        "timestamp": 1587503061
    },
    {
        "content": "<p>indeed that would be bad</p>",
        "id": 194861348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503062
    },
    {
        "content": "<p>well, the only way we would stop that runaway is by capping the size of the type I think</p>",
        "id": 194861363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503074
    },
    {
        "content": "<p>which isn't really a good way</p>",
        "id": 194861397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503092
    },
    {
        "content": "<p>though yes I'm remembering now</p>",
        "id": 194861402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503095
    },
    {
        "content": "<p>yes, but that could \"miss\" legitimate proofs</p>",
        "id": 194861404,
        "sender_full_name": "scalexm",
        "timestamp": 1587503096
    },
    {
        "content": "<p>we had talked about some of the fancier work</p>",
        "id": 194861409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503100
    },
    {
        "content": "<p>to identify patterns like that, too</p>",
        "id": 194861421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503105
    },
    {
        "content": "<p>yeah</p>",
        "id": 194861430,
        "sender_full_name": "scalexm",
        "timestamp": 1587503111
    },
    {
        "content": "<p>but I don't really want to go there :)</p>",
        "id": 194861432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503112
    },
    {
        "content": "<p>also not sure I understand your higher ranked example where elaboration cannot work</p>",
        "id": 194861468,
        "sender_full_name": "scalexm",
        "timestamp": 1587503133
    },
    {
        "content": "<p>yeah, I have to run, but I'll try to write out a more fully deatiled one</p>",
        "id": 194861487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503147
    },
    {
        "content": "<p>I'm not sure that it can't work exactly,</p>",
        "id": 194861495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503151
    },
    {
        "content": "<p>ok cool</p>",
        "id": 194861497,
        "sender_full_name": "scalexm",
        "timestamp": 1587503152
    },
    {
        "content": "<p>I have to run too anyway</p>",
        "id": 194861516,
        "sender_full_name": "scalexm",
        "timestamp": 1587503160
    },
    {
        "content": "<p>but I know that when I was doing some refactoring on chalk</p>",
        "id": 194861518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503161
    },
    {
        "content": "<p>that made the debruijn bounds more explicit</p>",
        "id": 194861557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503165
    },
    {
        "content": "<p>ah I remember the fixme indeed</p>",
        "id": 194861576,
        "sender_full_name": "scalexm",
        "timestamp": 1587503177
    },
    {
        "content": "<p>I identifed a place where we had overlooked the possibility of a binder</p>",
        "id": 194861585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503184
    },
    {
        "content": "<p>I'd have to read it again</p>",
        "id": 194861587,
        "sender_full_name": "scalexm",
        "timestamp": 1587503187
    },
    {
        "content": "<p>ok, chat later, thanks all! (I know we said that already)</p>",
        "id": 194861616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503213
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 194861619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587503214
    },
    {
        "content": "<p>By the way, that chapter in rustc-dev-guide <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/679\" title=\"https://github.com/rust-lang/rustc-dev-guide/pull/679\">will be gone soon</a>. The corresponding chapter in Chalk book is <a href=\"https://rust-lang.github.io/chalk/book/clauses/implied_bounds.html\" title=\"https://rust-lang.github.io/chalk/book/clauses/implied_bounds.html\">https://rust-lang.github.io/chalk/book/clauses/implied_bounds.html</a> .</p>",
        "id": 194882619,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587522282
    }
]