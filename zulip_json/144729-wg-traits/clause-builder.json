[
    {
        "content": "<p>So I opened <a href=\"https://github.com/rust-lang/chalk/pull/266\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/266\">https://github.com/rust-lang/chalk/pull/266</a> -- I've also asked <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> to review this, though he very kindly reviewed the generic PR. This is basically just \"cleanup\", laying the groundwork to actually be able to move projections from something that happens during unification into something that we handle lowering. It also aims to make the program-clause logic significantly more readable -- you can browse through <a href=\"https://github.com/rust-lang/chalk/blob/0c01d41087f95bdfa9f2c40ba4f3a5147943caee/chalk-solve/src/clauses/program_clauses.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/0c01d41087f95bdfa9f2c40ba4f3a5147943caee/chalk-solve/src/clauses/program_clauses.rs\">the final <code>program_clauses.rs</code></a> to get a sense of what I mean. Hopefully you agree -- although reading through it, I think there's still various tweaks we could do to remove a number of random <code>clone</code> and <code>cast</code> calls and try to focus the attention more on the core logic.</p>\n<p>(Example: instead of <code>trait_ref.clone().well_formed()</code>, should probably change <code>well_formed</code> to be <code>&amp;self</code> and to do the clone -- I think all callers invoke <code>clone</code> first. Similarly, adding methods like that to <code>Ty</code> instead of doing <code>WellFormed::Ty(ty)</code>. And making some other functions take a <code>impl Cast&lt;T&gt;</code> instead of <code>T</code>, so that callers don't have to write <code>cast</code>. And lifting various operations to iterators, to avoid <code>map</code>. And so forth. But I'd rather do that sort of thing later. )</p>",
        "id": 178948690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571921922
    },
    {
        "content": "<p>(Next step after this, I think, is to try and make the clause logic generic over the target TF)</p>",
        "id": 178948799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571921994
    },
    {
        "content": "<p>(But I've not started that)</p>",
        "id": 178948806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571922002
    },
    {
        "content": "<p>Oh, and cc <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> -- this PR makes a number of changes to the rust-ir data structures. The biggest change being to associated type values and how their binders work. I did try to document pretty thoroughly, but I'm sure I missed stuff.</p>",
        "id": 178949140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571922167
    },
    {
        "content": "<p>I suppose I could attempt to rebase rust-analyzer over these changes as a way to get a bit more into the code.</p>",
        "id": 178949155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571922184
    },
    {
        "content": "<p>note that we haven't updated to the dyn/impl changes, so you would have to fix those or cherry-pick the changes from <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/2030\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/2030\">https://github.com/rust-analyzer/rust-analyzer/pull/2030</a> as well</p>",
        "id": 178949308,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1571922294
    },
    {
        "content": "<p>it probably makes step to bump the commit in steps</p>",
        "id": 178949368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571922335
    },
    {
        "content": "<p>actually i'm not sure if that's true</p>",
        "id": 178949385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571922349
    },
    {
        "content": "<p>I guess we could actually update to newest Chalk master and just not convert our <code>Dyn</code> to Chalk's <code>Dyn</code> for now to avoid the test failures</p>",
        "id": 178953797,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1571925348
    },
    {
        "content": "<p>IIRC it panics in <code>chalk</code>, which is a bit worse than some failing tests <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 178953962,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1571925444
    },
    {
        "content": "<p>yeah I guess also panics during real usage ;)</p>",
        "id": 178954755,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1571925844
    },
    {
        "content": "<p>Yeah chalk's dyn support is just not complete</p>",
        "id": 178961973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571929774
    },
    {
        "content": "<p>Not far away though</p>",
        "id": 178961993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571929788
    },
    {
        "content": "<p>I .. think :)</p>",
        "id": 178962001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571929796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've upgraded RA to current Chalk master</p>",
        "id": 179128225,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1572100320
    }
]