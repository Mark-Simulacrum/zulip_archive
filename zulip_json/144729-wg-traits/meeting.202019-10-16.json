[
    {
        "content": "<p>Oh hai <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> -- so this week has sort of been a mess, but let's try to have some sort of design meeting <em>anyway</em>!</p>",
        "id": 178313784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249165
    },
    {
        "content": "<p>Couple of things:</p>",
        "id": 178313842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249212
    },
    {
        "content": "<p>I won't be able to do this time after all</p>",
        "id": 178313850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249218
    },
    {
        "content": "<p>I think Monday would work better for me</p>",
        "id": 178313862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249222
    },
    {
        "content": "<p>Though I might be able to do a different time on Wednesday</p>",
        "id": 178313880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249235
    },
    {
        "content": "<p>The question is -- what should we talk about -- I had hope to have a bit of a \"presentation\" on this, but as I said, this week has had a lot of last minute things coming up and I have just not had time.</p>",
        "id": 178313919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249269
    },
    {
        "content": "<p>But let me float some of the things on my mind :)</p>",
        "id": 178313929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249278
    },
    {
        "content": "<ul>\n<li>Lazy norm of constants in rustc  -- I think I see a way forward here to make concrete progress, could talk a bit about that</li>\n</ul>",
        "id": 178314010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249308
    },
    {
        "content": "<ul>\n<li>Improving lowering and changing a bit how types are represented in chalk</li>\n</ul>",
        "id": 178314071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249348
    },
    {
        "content": "<ul>\n<li>Related: extract a shared type library, what would that look like?</li>\n</ul>",
        "id": 178314102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249367
    },
    {
        "content": "<ul>\n<li>Universes in Rustc -- though I really haven't though much about that PR</li>\n</ul>",
        "id": 178314208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249406
    },
    {
        "content": "<p>I guess the root question is \"chalk or rustc\"?</p>",
        "id": 178314217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249414
    },
    {
        "content": "<p>Given the folks who <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>'d above, maybe chalk?</p>",
        "id": 178314239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249426
    },
    {
        "content": "<p>(In the future, I'd like to pick topics for next time ahead of time)</p>",
        "id": 178314251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249435
    },
    {
        "content": "<p>also, here is a <a href=\"https://hackmd.io/ogm3gZM-RxiJBVSyO2z_qg\" target=\"_blank\" title=\"https://hackmd.io/ogm3gZM-RxiJBVSyO2z_qg\">hackmd</a> for taking notes and the like</p>",
        "id": 178314334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249494
    },
    {
        "content": "<p>I think extracting a shared type library would be really interesting, sounds challenging though</p>",
        "id": 178314337,
        "sender_full_name": "tmandry",
        "timestamp": 1571249495
    },
    {
        "content": "<p>Oops, wrong topic</p>",
        "id": 178314351,
        "sender_full_name": "tmandry",
        "timestamp": 1571249505
    },
    {
        "content": "<p>oh wait</p>",
        "id": 178314363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249514
    },
    {
        "content": "<p>did I just mergr those two topics completely</p>",
        "id": 178314370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249520
    },
    {
        "content": "<p>dang it :)</p>",
        "id": 178314392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249524
    },
    {
        "content": "<p>oh, no, I didn't, <em>shew</em></p>",
        "id": 178314429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249536
    },
    {
        "content": "<blockquote>\n<p>Oops, wrong topic</p>\n</blockquote>\n<p>yeah I retopic'd :)</p>",
        "id": 178314435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249540
    },
    {
        "content": "<p>ok, well, let's talk about \"shared type libary\" and \"changing how types are represented in chalk\"</p>",
        "id": 178314452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249550
    },
    {
        "content": "<p>they kind of overlap</p>",
        "id": 178314456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249552
    },
    {
        "content": "<p>let me just lay out a few strands to start</p>",
        "id": 178314487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249574
    },
    {
        "content": "<p>one of the things I would like to do is to change how we handle normalization and unifiation in chalk</p>",
        "id": 178314511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249586
    },
    {
        "content": "<p>right now, we have a type that represents an \"unnormalized trait projection\", like <code>&lt;T as Iterator&gt;::Item</code></p>",
        "id": 178314538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249602
    },
    {
        "content": "<p>our unification logic understands what this means</p>",
        "id": 178314576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249622
    },
    {
        "content": "<p>so if we try to unify <code>&lt;T as Iterator&gt;::Item</code> with some other type <code>U</code>, that \"always succeeds\", but it generates a pending obligation of the form <code>ProjectionEq(&lt;T as Iterator&gt;::Item = U)</code></p>",
        "id": 178314664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249653
    },
    {
        "content": "<p>that notation is maybe a <em>touch</em> confusing -- but basically the idea is that you have to prove that <code>&lt;T as Iterator&gt;::Item</code> can be 'normalized<code> to </code>U` based on the impls around</p>",
        "id": 178314711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249681
    },
    {
        "content": "<p>this is sort of a weird special case since most of unify is about proving that two types are <em>syntactically equal</em> (well, modulo regions)</p>",
        "id": 178314754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249707
    },
    {
        "content": "<p>it's also a bit of a divergence from \"prolog\", where unification is all about syntactic equality</p>",
        "id": 178314778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249724
    },
    {
        "content": "<p>(make sense so far?)</p>",
        "id": 178314793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249740
    },
    {
        "content": "<p>so why do I care?</p>",
        "id": 178314915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249801
    },
    {
        "content": "<p>well, for one thing, I want to lower as much as possible to something that resembles a simple prolog-liek thing</p>",
        "id": 178314934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249817
    },
    {
        "content": "<p>but also if we have an impl like this one:</p>",
        "id": 178314937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249822
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178314950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249830
    },
    {
        "content": "<p>er, that's not the problem, sorry</p>",
        "id": 178314972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249846
    },
    {
        "content": "<p>well, if you're trying to prove a goal like <code>Implemented(&lt;T as Iterator&gt;::Item)</code> --</p>",
        "id": 178314990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249860
    },
    {
        "content": "<p>(where that is not normalized)</p>",
        "id": 178314996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249865
    },
    {
        "content": "<p>sorry, maybe <code>Implemented(&lt;T as Iterator&gt;::Item: Foo)</code></p>",
        "id": 178315021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249881
    },
    {
        "content": "<p>anyway you have no idea what the self type <em>is</em></p>",
        "id": 178315063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249885
    },
    {
        "content": "<p>beacuse it unifies with anything</p>",
        "id": 178315074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249894
    },
    {
        "content": "<p>but likely it is quite a bit more constrained than that :)</p>",
        "id": 178315077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249895
    },
    {
        "content": "<p>we are currently floundering if we have a goal like <code>Implemented(?X: Foo)</code> -- i.e., where self-type is fully unknown</p>",
        "id": 178315095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249918
    },
    {
        "content": "<p>anyway so what I would like to do is to remove \"unnormalized\" projections</p>",
        "id": 178315108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249932
    },
    {
        "content": "<p>as a type</p>",
        "id": 178315118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249937
    },
    {
        "content": "<p>and instead just have \"placeholder\" ones -- actually kind of like rustc in this regard</p>",
        "id": 178315136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249951
    },
    {
        "content": "<p>but I'd like to <em>move</em> that normalization to the lowering phase</p>",
        "id": 178315142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249961
    },
    {
        "content": "<p>so if we have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178315155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249972
    },
    {
        "content": "<p>today we would generate a lowered rule like</p>\n<div class=\"codehilite\"><pre><span></span>forall&lt;T: Iterator&gt; {\n    Implemented(&lt;T as Iterator&gt;::Item: Foo)\n}\n</pre></div>",
        "id": 178315194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571249997
    },
    {
        "content": "<blockquote>\n<p>and instead just have \"placeholder\" ones -- actually kind of like rustc in this regard</p>\n</blockquote>\n<p>(I'll use the notation <code>(Iterator::Item)&lt;T&gt;</code> for those, since that is what we use in chalk)</p>",
        "id": 178315261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250016
    },
    {
        "content": "<p>I'd prefer to generate this rule</p>",
        "id": 178315272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250024
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>forall&lt;T: Iterator, U&gt; {\n    Implemented(U: Foo) :-\n        ProjectionEq(&lt;T as Iterator&gt;::Item = U)\n}\n</pre></div>",
        "id": 178315301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250053
    },
    {
        "content": "<p>in a sense I've just \"unrolled\" what unification would have done anyway</p>",
        "id": 178315324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250067
    },
    {
        "content": "<p>(does that make sense?)</p>",
        "id": 178315336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250079
    },
    {
        "content": "<p>my impression is that this wasn’t done in the first place because it made the rules less ergonomic, is that right?</p>",
        "id": 178315447,
        "sender_full_name": "tmandry",
        "timestamp": 1571250155
    },
    {
        "content": "<p>yeah, so, I've thought about it before; it obviously moves the lowered form a bit farther from Rust surface syntax</p>",
        "id": 178315495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250184
    },
    {
        "content": "<p>it's also just kind of a bit of a pain to implement with the system as it is</p>",
        "id": 178315506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250193
    },
    {
        "content": "<p>(which is part of what connects this to a shared type libary)</p>",
        "id": 178315518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250201
    },
    {
        "content": "<p>in particular, the user basically <em>writes</em> types that include unnormalized projections</p>",
        "id": 178315555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250239
    },
    {
        "content": "<p>today, we can kind of lower the user's types and embed them directly into the final rules -- actually, in the clause generating code, the \"types\" from user are <code>chalk_ir::Ty</code></p>",
        "id": 178315630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250285
    },
    {
        "content": "<p>so we can literally just embed them into the clauses we build</p>",
        "id": 178315638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250295
    },
    {
        "content": "<p>but what we have to do now is to say \"if this type is an unnormalizd projection, instead we generate a fresh variable and some new clauses\" etc</p>",
        "id": 178315662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250313
    },
    {
        "content": "<p>it's not <em>hard</em> per se but it's a bit more complex than before</p>",
        "id": 178315668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250320
    },
    {
        "content": "<p>but I'm not very happy with the clause generator code <em>anyway</em></p>",
        "id": 178315673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250326
    },
    {
        "content": "<p>it's super opaque, particularly around debruijn binders, and I think nobody gets it</p>",
        "id": 178315687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250336
    },
    {
        "content": "<p>so what I was thinking is this</p>",
        "id": 178315718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250359
    },
    {
        "content": "<p>first off, it seems like we sort of want two concepts of types</p>",
        "id": 178315802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250400
    },
    {
        "content": "<p>\"pre-lowering\" (which only includes unnormalized projections)</p>",
        "id": 178315812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250411
    },
    {
        "content": "<p>\"clauses\" (which never does)</p>",
        "id": 178315825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250418
    },
    {
        "content": "<p>at least <em>conceptually</em> we want that</p>",
        "id": 178315837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250424
    },
    {
        "content": "<p>and converting between the two is something you have to do carefully</p>",
        "id": 178315877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250457
    },
    {
        "content": "<p>I'd like to use generic types for this, I think</p>",
        "id": 178315887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250467
    },
    {
        "content": "<p>so, in a sense, we're moving the complexity of these unnormalized projections out of unification and into the \"pre-lowering =&gt; clauses\" step?</p>",
        "id": 178316019,
        "sender_full_name": "tmandry",
        "timestamp": 1571250563
    },
    {
        "content": "<p>so that we hvae some generic type <code>T: RustType</code> or something -- and some operations to (e.g.) figure out which variant of rust type it is. Probably there is a little \"family\"</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">RustTypeFamily</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Type</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Substitutions</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">variant</span><span class=\"p\">(</span><span class=\"n\">Self</span>::<span class=\"n\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TypeVariants</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">TypeVariants</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nc\">RustTypeFamily</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Apply</span><span class=\"p\">(</span><span class=\"n\">AppicationTy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>::<span class=\"n\">Substitutions</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178316023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250567
    },
    {
        "content": "<blockquote>\n<p>so, in a sense, we're moving the complexity of these unnormalized projections out of unification and into the \"pre-lowering =&gt; clauses\" step?</p>\n</blockquote>\n<p>yes, exactly</p>",
        "id": 178316034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250575
    },
    {
        "content": "<p>there are a few reasons to use generics</p>",
        "id": 178316053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250591
    },
    {
        "content": "<p>but one of them that is nice is that</p>",
        "id": 178316061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250597
    },
    {
        "content": "<p>it might be that both the \"before\" and \"after\" types are represented by the same thing</p>",
        "id": 178316129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250612
    },
    {
        "content": "<p>but the <em>semantics</em> (particularly of projections!) are different</p>",
        "id": 178316135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250621
    },
    {
        "content": "<p>and if they have different generic types, then compiler can help us keep them separated</p>",
        "id": 178316146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250633
    },
    {
        "content": "<p>in particular, when we lower from a <code>BeforeType</code> to an <code>AfterType</code>, if it is a projection, we can generate the clauses we need</p>",
        "id": 178316156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250647
    },
    {
        "content": "<p>i.e., there'd be something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">lower_type</span><span class=\"p\">(</span><span class=\"n\">before</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Before</span>::<span class=\"n\">Type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">obligations</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">After</span>::<span class=\"n\">Type</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178316213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250689
    },
    {
        "content": "<p>so now if I see a projection, I can generate the <code>ProjectionEq(...)</code> goal and push it onto <code>obligations</code></p>",
        "id": 178316234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250707
    },
    {
        "content": "<p>this is exactly what unify <em>used</em> to be doing at runtime</p>",
        "id": 178316246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250715
    },
    {
        "content": "<p>but we're doing it at clause generation time</p>",
        "id": 178316292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250726
    },
    {
        "content": "<p>/me pauses to see if folks have questions</p>",
        "id": 178316307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250742
    },
    {
        "content": "<p>ok</p>",
        "id": 178316416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250841
    },
    {
        "content": "<p>/me typing</p>",
        "id": 178316467,
        "sender_full_name": "tmandry",
        "timestamp": 1571250850
    },
    {
        "content": "<p>heh :)</p>",
        "id": 178316471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250855
    },
    {
        "content": "<p>/me waits more</p>",
        "id": 178316474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250858
    },
    {
        "content": "<p>what you just said makes sense. just to build on my summary from before... the reason for moving all of this out of unification is so that we don't encounter so much complexity with regards to clause/goal selection and floundering?</p>",
        "id": 178316509,
        "sender_full_name": "tmandry",
        "timestamp": 1571250894
    },
    {
        "content": "<p>yes, I have a few motivations</p>",
        "id": 178316550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250927
    },
    {
        "content": "<p>that is one of them</p>",
        "id": 178316556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250933
    },
    {
        "content": "<p>I also want to try and align our \"lowered representation\" with something that is closer to prolog because -- long term -- I want to make some kind of virtual machine to efficiently execute this stuff</p>",
        "id": 178316580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250957
    },
    {
        "content": "<p>and if unification looks more like \"syntactic equality\" and less like \"a mini interpreter\", that will be easier</p>",
        "id": 178316652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571250985
    },
    {
        "content": "<p>another reason is that I think it should be a touch more efficient, and it's also maybe a better strategy long term for managing projections -- I'm not sure how true this , I guess. There are some other issues around the normalization strategy that chalk is using that suggests we <em>may</em> want to try to have some kind of \"normalization function\" more like what rust does --</p>",
        "id": 178316748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251067
    },
    {
        "content": "<p>/me is taking off and might not be as responsive, fyi</p>",
        "id": 178316806,
        "sender_full_name": "tmandry",
        "timestamp": 1571251087
    },
    {
        "content": "<p>I guess I think that any such changes will be easier if we separate out the \"projection-eq\" part more cleanly, so that types are simpler</p>",
        "id": 178316810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251089
    },
    {
        "content": "<p>anyway, the connection that all this has to a \"generic definition fo types\" that can be shared is</p>",
        "id": 178316839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251111
    },
    {
        "content": "<p>well, I already started to give you what one might look like</p>",
        "id": 178316849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251120
    },
    {
        "content": "<blockquote>\n<p>so that we hvae some generic type <code>T: RustType</code> or something -- and some operations to (e.g.) figure out which variant of rust type it is. Probably there is a little \"family\"</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">RustTypeFamily</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Type</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Substitutions</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">variant</span><span class=\"p\">(</span><span class=\"n\">Self</span>::<span class=\"n\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TypeVariants</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">TypeVariants</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nc\">RustTypeFamily</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Apply</span><span class=\"p\">(</span><span class=\"n\">AppicationTy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>::<span class=\"n\">Substitutions</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>",
        "id": 178316866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251129
    },
    {
        "content": "<p>so in this case we are not specifying the <em>structures per se</em> but rather a kind of trait</p>",
        "id": 178316893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251149
    },
    {
        "content": "<p>we'll need a few more operations (e.g., to \"intern\")</p>",
        "id": 178316907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251160
    },
    {
        "content": "<p>I have to do a bit of work to define that trait, what I wrote up there isn't <em>quite</em> it, there is a bit more</p>",
        "id": 178316923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251174
    },
    {
        "content": "<p>notably I thikn it's generic over the <code>ApplicationTy</code>, for example</p>",
        "id": 178316930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251182
    },
    {
        "content": "<p>but then I think we can implement this for Rust and have the type (internally) be <code>Ty&lt;'tcx&gt;</code></p>",
        "id": 178316949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251195
    },
    {
        "content": "<p>and rust-analyzer can implement it and have types be \"whatever\"</p>",
        "id": 178316962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251204
    },
    {
        "content": "<p>and we can make all the logic in chalk-solve and friends kind of generic over that</p>",
        "id": 178317034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251221
    },
    {
        "content": "<p>I was hoping to start playing with this before the meeting but .. yeah .. life</p>",
        "id": 178317082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251256
    },
    {
        "content": "<p>I think though that chalk's \"core variants\" are probably about right, though we may want to tweak how they are structured</p>",
        "id": 178317131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251293
    },
    {
        "content": "<p>note also that the <code>variant</code> method can \"convert\" on the fly from rustc's <code>Ty</code> representation to a chalk one, at least at first -- probably we'd want them to match up as closely as possibly eventually</p>",
        "id": 178317163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251317
    },
    {
        "content": "<p>some random thoughts that I've been wondering about:</p>",
        "id": 178317230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251343
    },
    {
        "content": "<h1>debruijn or not?</h1>",
        "id": 178317235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251347
    },
    {
        "content": "<p>I love me some debruijn indices but .. they're also kind of confusing. Maybe it'd be better to just use \"uuids\" or something for each binding spot? (And disallow shadowing) In particular I think we could make the clause generation stuff a lot more ergonomic</p>",
        "id": 178317280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251381
    },
    {
        "content": "<h1>how would we actually <em>implement</em> this transition is another good question</h1>",
        "id": 178317341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251438
    },
    {
        "content": "<p>I have to think about the exact steps but I guess the right way to start would be to try and introduce a trait first, making things more and more generic over said trait, but keeping the same underlying types</p>",
        "id": 178317418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251469
    },
    {
        "content": "<p>but this all feels like stuff that's a bit hard to dig into in the abstract</p>",
        "id": 178317477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251514
    },
    {
        "content": "<p>easier with an open editor :)</p>",
        "id": 178317488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251522
    },
    {
        "content": "<p>I'd definitely keep the debruijin setup until the rest is in place, I guess, but it defintiely affects the generic \"type family\" sort of operations, as you'll need to have notions of shifting and what not --</p>",
        "id": 178317519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251553
    },
    {
        "content": "<p>that said, if we use generics -- we might be abel to make it a compilation time error to forget to shift :)</p>",
        "id": 178317572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251566
    },
    {
        "content": "<p>ok, that's about all I've got I guess :) I'll stop here but this is something I really want to start experimenting with asap to \"try out\". I don't plan to do all the work myself, I'd like to do enough of the steps I'm convinced it will work and then work with someone else (or maybe work with someone else a bit from the start)</p>",
        "id": 178317670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251640
    },
    {
        "content": "<p>re: deBruijn indices the shifting is quite subtle, but if we moved away from it I’d be concerned about performance. Maybe we can introduce some nice abstractions around this, as you mentioned</p>",
        "id": 178318136,
        "sender_full_name": "tmandry",
        "timestamp": 1571251971
    },
    {
        "content": "<p>yeah that's really a separate topic</p>",
        "id": 178318159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251986
    },
    {
        "content": "<p>Both have their performance issues</p>",
        "id": 178318166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571251994
    },
    {
        "content": "<p>I’m also curious what we’ve learned about the different concrete type representations you’d want in rustc vs rust-analyzer. Like I know that rustc types are pretty coupled to the internals, but not sure if it <em>has to</em> be that way. </p>\n<p>In other words, are generics over type representations the way we would do it if we were starting over, or a way of making migration more feasible?</p>",
        "id": 178318507,
        "sender_full_name": "tmandry",
        "timestamp": 1571252236
    },
    {
        "content": "<p>Some of both</p>",
        "id": 178318557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252282
    },
    {
        "content": "<p>The pros I see is precisely the ability to make these syntactic distinctions</p>",
        "id": 178318633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252324
    },
    {
        "content": "<p>These come up in rustc too, and we've just opted not to have the extra static safety</p>",
        "id": 178318644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252333
    },
    {
        "content": "<p>On the other hand, it does induce <em>some</em> amount of \"forced inefficiency\" because you can't assume the types are the same, even if you happen to know that (in some particular case) you just want the same type</p>",
        "id": 178318676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252358
    },
    {
        "content": "<p>But I think overall we do an awful amoutn of type folding and \"re-interning\" in rustc anyway :)</p>",
        "id": 178318710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252387
    },
    {
        "content": "<p>I think what'd I'd prefer is to have the generic layer, and then try to use specialization and/or other tricks to optimize it out where we can</p>",
        "id": 178318770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252406
    },
    {
        "content": "<blockquote>\n<p>These come up in rustc too, and we've just opted not to have the extra static safety</p>\n</blockquote>\n<p>an example:</p>\n<ul>\n<li>when you extract the type of a field from a struct, that may reference parameters defined on the struct</li>\n<li>therefore, you really need to immediately substitute values for those parameters that come from your \"current namespace\"</li>\n<li>but this is not reflected in the type</li>\n</ul>",
        "id": 178318812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252449
    },
    {
        "content": "<p>failure to do those substitutions is a common source of ICEs</p>",
        "id": 178318816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252454
    },
    {
        "content": "<p>for that matter, normalization in rustc must also be done at this time, and failure to do that is also a common problem :)</p>",
        "id": 178318837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252475
    },
    {
        "content": "<p>it seems to me that having multipe generic types that (when instantiated) wind up sharing the same representation might actually be a kind of \"sweet spot\"</p>",
        "id": 178318905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571252523
    },
    {
        "content": "<p>Yeah I really like that idea, in theory at least <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 178319440,
        "sender_full_name": "tmandry",
        "timestamp": 1571252942
    }
]