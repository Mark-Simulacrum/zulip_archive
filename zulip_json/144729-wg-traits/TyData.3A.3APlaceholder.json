[
    {
        "content": "<p>in the vein of aligning RA's <code>Ty</code> more with Chalk, I'm wondering about placeholders. We used to represent placeholders (for type parameters) in RA as simple indices, but after some refactoring recently, we now just use the (globally) unique ID of the type parameter, which simplifies a few things. Chalk has this representation of universe index + index. I actually don't quite understand what universes are, so</p>\n<ol>\n<li>what are universes? do they correspond to scopes introducing type parameters? why are they needed?</li>\n<li>why does Chalk need to know about them? It seems they are maybe only relevant in case of lifetime placeholders?</li>\n</ol>",
        "id": 188237840,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581708416
    },
    {
        "content": "<p>This is something we have to address with rustc, too</p>",
        "id": 188238407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708750
    },
    {
        "content": "<p>So, universes are used when dealing with types like <code>for&lt;'a&gt; fn(&amp;'a u32)</code> or when solving goals like <code>forall&lt;T&gt; { if (T: Debug) { Vec&lt;T&gt;: Debug } }</code> (which rust can't currently express, but which arise with GATs)</p>",
        "id": 188238462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708791
    },
    {
        "content": "<p>in those cases, we need to 'instantiate' the type parameter <code>T</code> with something, and we use a placeholder for that; the universe helps us track what is in scope</p>",
        "id": 188238500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708826
    },
    {
        "content": "<p>there are a few write-ups about it, we should move them to the chalk book</p>",
        "id": 188238517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708836
    },
    {
        "content": "<p>in rustc, we have both: we use placeholders like chalk for the \"transient lifetimes we create when dealing with higher-ranke things\" and we use parameters w/ a def-id for the cases where you can readily enumerate \"here are the parametrs in scope\" (e.g., when you are checking the body of a function)</p>",
        "id": 188238625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708882
    },
    {
        "content": "<p>they are really both the same sort of placeholder, but we treat them slightly differently, and I also think there is some reason we might want that in chalk -- in particular, some of the thoughts I've had about how to handle region solving in a more principled way involve distinguishing between the lifetimes in scope on the fn being checked, and the ifetimes that you instantiate as you deal with higher-ranked types like <code>fn</code></p>",
        "id": 188238694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TyData.3A.3APlaceholder/near/188238517\" title=\"#narrow/stream/144729-wg-traits/topic/TyData.3A.3APlaceholder/near/188238517\">said</a>:</p>\n<blockquote>\n<p>there are a few write-ups about it, we should move them to the chalk book</p>\n</blockquote>\n<p>yeah, actually there's a link in the doc for <code>UniverseIndex</code> which seems to be outdated</p>",
        "id": 188238825,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581709019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> I think the best write-up is <a href=\"https://rust-lang.github.io/rustc-guide/borrow_check/region_inference/placeholders_and_universes.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/borrow_check/region_inference/placeholders_and_universes.html\">this one</a></p>",
        "id": 188240205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709878
    },
    {
        "content": "<p>ah yeah, I think I actually read that one before. It seems it only talks about lifetimes, so the vague recollections I had of that didn't seem applicable for types <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 188240763,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581710224
    },
    {
        "content": "<p>yeah, the concepts are all applicable</p>",
        "id": 188241060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710411
    },
    {
        "content": "<p>but that may not be obvious :)</p>",
        "id": 188241067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710417
    },
    {
        "content": "<p>if you have to solve something like <code>exists&lt;T&gt; { forall&lt;U&gt; { T = U } }</code> (which should not be provable...) you would get errors because of universes</p>",
        "id": 188241092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581710440
    }
]