[
    {
        "content": "<p>At the moment, we use an untracted read when creating a salsa solver. That means that after every change (even a change in a comment), we re-create the solver. In the past week, we twice</p>",
        "id": 184908472,
        "sender_full_name": "matklad",
        "timestamp": 1578319727
    },
    {
        "content": "<p>saw cases where caching the solver more aggressively would be benefitial. That is, we implemented an (unsound) caching which invalidated solver only if the set of top-level items changed, and it led to noticible perf improvements.</p>",
        "id": 184908531,
        "sender_full_name": "matklad",
        "timestamp": 1578319799
    },
    {
        "content": "<p>I wonder what is our long-term plan here?</p>",
        "id": 184908586,
        "sender_full_name": "matklad",
        "timestamp": 1578319821
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Completion.20latency.3F/near/184906243\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Completion.20latency.3F/near/184906243\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Completion.20latency.3F/near/184906243</a> for the recent example where adding cache speeds up completion a bunch</p>",
        "id": 184908646,
        "sender_full_name": "matklad",
        "timestamp": 1578319875
    }
]