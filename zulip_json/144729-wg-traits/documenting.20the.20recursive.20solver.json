[
    {
        "content": "<p>So I've been working on documenting the recursive solver in this branch (I've got a lot of edits locally, too, which I'll push soon):</p>\n<p><a href=\"https://github.com/nikomatsakis/chalk-ndm/tree/recursive-solver-document\">https://github.com/nikomatsakis/chalk-ndm/tree/recursive-solver-document</a></p>\n<p>but I have to admit I'm finding it hard to figure out the right way to explain it. Not sure if this approach is working.</p>",
        "id": 199407105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591037100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> albeit work in progress, it is quite enlightening</p>",
        "id": 199543972,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1591127532
    },
    {
        "content": "<p>So, radical idea. What if <code>chalk_engine</code> and <code>chalk_recursive</code> (or whatever name) were their own crates that depended on <code>chalk_solve</code></p>",
        "id": 199568864,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591143969
    },
    {
        "content": "<p>So, we lose the ability to have a single <code>Solver</code> struct that you pick the implementation</p>",
        "id": 199568962,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591144095
    },
    {
        "content": "<p>but there's already some indirection there</p>",
        "id": 199568964,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591144107
    },
    {
        "content": "<p>but really, somewhat like <code>chalk-ir</code> and <code>chalk-engine</code> there's no real reason for the dependency direction as-is</p>",
        "id": 199569099,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591144289
    },
    {
        "content": "<p>And to build on that, we eventually want to settle on one or the other <em>anyways</em></p>",
        "id": 199569592,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591144808
    },
    {
        "content": "<p>Huh, that's interesting. It feels wrong to me in that -- in principle -- the solvers/engines ought to be independent of those details and \"reusable\", but I see your point that the code would be simpler this way, and it's not like we actually <em>plan</em> to re-use them.</p>",
        "id": 199598090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591176875
    },
    {
        "content": "<p>And given that they depend on chalk-ir already...</p>",
        "id": 199598109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591176887
    },
    {
        "content": "<p>I don't know that a single <code>Solver</code> struct is important except for testing, but we can recreate the struct at the testing layer</p>",
        "id": 199598189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591176932
    },
    {
        "content": "<p>Should I try to do this refactor ?</p>",
        "id": 199620395,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1591191627
    },
    {
        "content": "<p>nvm I see <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> is already doing that</p>",
        "id": 199623306,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1591193048
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/488\">https://github.com/rust-lang/chalk/pull/488</a> &lt;-- docs, I think i'm done for now :P</p>",
        "id": 199686907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591224663
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> that refactor might be nice, I also plan to start suggesting some steps about how to prepare for the salsa integration, and maybe to spell out what coinduction might mean</p>",
        "id": 199686944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591224695
    },
    {
        "content": "<p>but I have to go now :)</p>",
        "id": 199686947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591224698
    },
    {
        "content": "<p>I went ahead and just merged that so you can read it here <a href=\"http://rust-lang.github.io/chalk/book/recursive.html\">http://rust-lang.github.io/chalk/book/recursive.html</a></p>",
        "id": 199727749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591266312
    },
    {
        "content": "<p>I realize it doesn't include priorities, we should add that</p>",
        "id": 199736195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591272138
    },
    {
        "content": "<p>I'm a bit confused about the example in <a href=\"http://rust-lang.github.io/chalk/book/recursive.html#recursion-and-completeness\">http://rust-lang.github.io/chalk/book/recursive.html#recursion-and-completeness</a>, shouldn't that work in the recursive solver because we can solve <code>Implemented(?X: B)</code> uniquely and then the rest follows? haven't tried it yet</p>",
        "id": 199736296,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1591272206
    },
    {
        "content": "<p>it might be missing a second impl like</p>",
        "id": 199736338,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1591272232
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199736390,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1591272242
    },
    {
        "content": "<p>or if the traits are non-enumerable, but that doesn't seem like the point of the example</p>",
        "id": 199736482,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1591272296
    },
    {
        "content": "<p>ah yeah that's true</p>",
        "id": 199736836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591272514
    },
    {
        "content": "<p>adding a second impl should fix it indeed</p>",
        "id": 199736846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591272522
    },
    {
        "content": "<p>usually my example is one trait for all signed integers (i8, i16, i32, etc) and one trait for all 32 bit things</p>",
        "id": 199737083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591272659
    },
    {
        "content": "<p>which have a unique intersection</p>",
        "id": 199737091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591272663
    },
    {
        "content": "<p>but are ambiguous</p>",
        "id": 199737097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591272667
    },
    {
        "content": "<p>anyway that suggests another missing chapter, one that explains the \"<a href=\"http://Fulfill.rs\">Fulfill.rs</a>\" file, and the way that it tries to find <em>some</em> goal it can solve (and hence reorders as it goes)</p>",
        "id": 199737138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591272699
    },
    {
        "content": "<p>plus it would be good to talk about non-enumerable</p>",
        "id": 199737241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591272755
    },
    {
        "content": "<p>i.e., you can retool the example to be relevant even so, but the point is that since traits in rustc are non-enumerable, it's sort of a moot point anyway</p>",
        "id": 199737261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591272774
    },
    {
        "content": "<p>it's easy to adjust to be relevant for non-enumerable traits as well, though, right? just use <code>impl B for Foo&lt;u32&gt;</code>, <code>impl B for Foo&lt;u64&gt;</code> and so on</p>",
        "id": 199737532,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1591272939
    },
    {
        "content": "<p>right</p>",
        "id": 199737608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591272963
    },
    {
        "content": "<p>maybe even worth doing so...</p>",
        "id": 199737627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591272975
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> after <a href=\"https://github.com/rust-lang/chalk/pull/487\">https://github.com/rust-lang/chalk/pull/487</a> gets merged, can I pick the work for splitting the recursive solver into a separate crate that depends on chalk_solve ?</p>",
        "id": 199883942,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1591367179
    },
    {
        "content": "<p>or you maybe intend to do it right there ?</p>",
        "id": 199883977,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1591367198
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'm inclined to merge <a href=\"https://github.com/rust-lang-nursery/chalk/issues/487\">chalk#487</a> even if it still seems like things are \"evolving\"</p>",
        "id": 199923871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591385647
    },
    {
        "content": "<p>any objections to that?</p>",
        "id": 199923876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591385650
    },
    {
        "content": "<p>I think that's good with me. Wasn't sure if we wanted a review from <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>. But there aren't any semantic changes, so it doesn't matter too much :)</p>",
        "id": 199924636,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591386083
    },
    {
        "content": "<p>so is there still an inclination to split  the recursive solver and make both it and chalk_engine depend on chalk_solve ?</p>",
        "id": 199927014,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1591387264
    },
    {
        "content": "<p>possibly :)</p>",
        "id": 199928593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591388141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> I didn't actually answer your question: yes, feel free to try to split out the recursive solver (and maybe switch up the chalk-engine dependency order)</p>",
        "id": 199992141,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591475900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> are you currently hacking on recursive solve? (or you, <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>?)</p>",
        "id": 200481786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591825870
    },
    {
        "content": "<p>I'm not</p>",
        "id": 200482480,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1591826206
    },
    {
        "content": "<p>OK, I'm going to spend a bit of time playing with it, I'm just looking into the caching stuff I've been thinking about</p>",
        "id": 200482709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591826337
    },
    {
        "content": "<p>/me needs to write <em>some</em> code this week</p>",
        "id": 200482864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591826422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> what was the motivation for the <code>RecursiveInferenceTable</code> and <code>RecursiveSolver</code> traits in <code>recursive::fulfill</code> (versus having it know the precise types)</p>",
        "id": 200485359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591827827
    },
    {
        "content": "<p>I guess it doesn't matter actually</p>",
        "id": 200486205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591828306
    },
    {
        "content": "<p>anyway, opened <a href=\"https://github.com/rust-lang/chalk/pull/513\">https://github.com/rust-lang/chalk/pull/513</a> with some minor refactorings for now</p>",
        "id": 200486211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591828311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> those were there to help to be able to move them into a separate crate</p>",
        "id": 200493917,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591834112
    },
    {
        "content": "<p>Though, if we do decide to just make chalk-engine and the recursive solver depend on chalk-solve instead of the other way around, it's kind of a moot point</p>",
        "id": 200493953,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591834166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> working <a href=\"https://github.com/rust-lang/chalk/issues/510\">https://github.com/rust-lang/chalk/issues/510</a>. Was planning to use some of your wisdom that you shared in the docs and here to tackle coinduction correctly but since you need to write some code this week maybe that will be way more effective (and quick)way of going about it.</p>",
        "id": 200528569,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1591872663
    },
    {
        "content": "<p>well <span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> I wasn't planning on working on that aspect, though I might well touch some of the same code. But it's usually better to work with others and help grow expertise, so I'd love to work with you on it</p>",
        "id": 200550013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591884975
    },
    {
        "content": "<p>Great, which part you think is the best  place for me to start off</p>",
        "id": 200550452,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1591885193
    }
]