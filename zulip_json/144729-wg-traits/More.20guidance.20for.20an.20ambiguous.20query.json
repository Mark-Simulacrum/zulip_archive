[
    {
        "content": "<p>When debugging <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/4132\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/4132\">an issue</a> in rust-analyzer I found chalk doesn't give any guidance when solving this query:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"cp\">#[non_enumerable]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Constraint</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Constraint</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"o\">?-</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nc\">MyTrait</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">Ambiguous</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">inference</span><span class=\"w\"> </span><span class=\"n\">guidance</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I understand that the solution is ambiguous because <code>Constraint</code> is non-enumerable, but it seems like we should still get the guidance that <code>T=U</code>.</p>\n<p>In the recursive solver I think the issue is in <a href=\"https://github.com/rust-lang/chalk/blob/e8b6a6a4ab5e325502bde31f1dc0be95dd640613/chalk-solve/src/recursive/fulfill.rs#L425\" title=\"https://github.com/rust-lang/chalk/blob/e8b6a6a4ab5e325502bde31f1dc0be95dd640613/chalk-solve/src/recursive/fulfill.rs#L425\"><code>Fulfill::solve</code></a>. If we aren't able to solve all the obligations, then we decide to provide guidance if the substitutions found so far aren't trivial (before canonicalizing). But it seems like in this situation the substitutions are non-trivial after canonicalizing, even though they were trivial before.</p>\n<p>Does this reasoning seem correct? If so, could someone give me a tip on where to make a similar change in the SLG solver?.<br>\nHere's my <a href=\"https://github.com/rust-lang/chalk/pull/433\" title=\"https://github.com/rust-lang/chalk/pull/433\">draft PR</a> with the fix for the recursive solver.</p>",
        "id": 196277828,
        "sender_full_name": "Adam Bratschi-Kaye (he)",
        "timestamp": 1588665826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when you get a chance, can you take a look at <a href=\"https://github.com/rust-lang/chalk/pull/433\">https://github.com/rust-lang/chalk/pull/433</a></p>",
        "id": 198916853,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590596821
    },
    {
        "content": "<p>Sigh, yes, sorry <span class=\"user-mention\" data-user-id=\"262963\">@Adam Bratschi-Kaye (he) (SP1'17)</span></p>",
        "id": 198916889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590596843
    },
    {
        "content": "<p>No problem <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>!</p>",
        "id": 198917884,
        "sender_full_name": "Adam Bratschi-Kaye (he)",
        "timestamp": 1590597345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> skimming the change -- didn't you say it had some effect on assoc type normalization?</p>",
        "id": 198918225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597489
    },
    {
        "content": "<p>Mmm, I don't think so</p>",
        "id": 198918277,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590597516
    },
    {
        "content": "<p>the only existing test I see that seemed to change output was <code>subgoal_cycle_uninhabited</code></p>",
        "id": 198918290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597522
    },
    {
        "content": "<p>ok</p>",
        "id": 198918294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597523
    },
    {
        "content": "<p>perhaps I misunderstood</p>",
        "id": 198918307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597531
    },
    {
        "content": "<p>it affects how we deal with ambiguity</p>",
        "id": 198918312,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590597533
    },
    {
        "content": "<p>this is good because I didn't quite understand how it would help :)</p>",
        "id": 198918320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597537
    },
    {
        "content": "<p>right, so the new idea is to </p>\n<ul>\n<li>first pursue \"non-ambiguous\" results (where ambiguous means, afaict, that we had a <code>CannotProve</code> somewhere...)</li>\n</ul>",
        "id": 198918396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597583
    },
    {
        "content": "<ul>\n<li>or a negative cycle but I don't think that arises right now?</li>\n</ul>",
        "id": 198918404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597594
    },
    {
        "content": "<p>I guess truncation too</p>",
        "id": 198918453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597605
    },
    {
        "content": "<p>anyway we effectively defer \"ambig\" strands until we've worked out the rest</p>",
        "id": 198918468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597616
    },
    {
        "content": "<p>I'm not quite sure how floundering fits into this yet</p>",
        "id": 198918495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597637
    },
    {
        "content": "<p>Negative cycles IIRC always fail-fast. They aren't ever ambiguous</p>",
        "id": 198918603,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590597714
    },
    {
        "content": "<p>comments suggest otherwise</p>",
        "id": 198918681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597735
    },
    {
        "content": "<p>seems wrong-ish</p>",
        "id": 198918685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597737
    },
    {
        "content": "<p>Here, we essentially define floundering as ambiguous</p>",
        "id": 198918689,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590597740
    },
    {
        "content": "<p>unless it's a panic or something</p>",
        "id": 198918697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597744
    },
    {
        "content": "<p>or propagating some kind of special result code I mean</p>",
        "id": 198918713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597756
    },
    {
        "content": "<p>what comments?</p>",
        "id": 198918714,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590597756
    },
    {
        "content": "<p><a href=\"http://rust-lang.github.io/chalk/chalk_engine/struct.ExClause.html#structfield.ambiguous\">http://rust-lang.github.io/chalk/chalk_engine/struct.ExClause.html#structfield.ambiguous</a></p>",
        "id": 198918735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597768
    },
    {
        "content": "<p>or maybe I misunderstood it actually</p>",
        "id": 198918750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597781
    },
    {
        "content": "<blockquote>\n<p>True if any subgoals were depended upon negatively and were not fully evaluated, or if we encountered a CannotProve goal. (In the full SLG algorithm, we would use delayed literals here, but we don't bother, as we don't need that support.)</p>\n</blockquote>",
        "id": 198918755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597782
    },
    {
        "content": "<p>\"were not fully evaluated\"</p>",
        "id": 198918764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597788
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/22978b413ca19e19621fcbf4f4f233c40249a49b/chalk-engine/src/logic.rs#L1163\">https://github.com/rust-lang/chalk/blob/22978b413ca19e19621fcbf4f4f233c40249a49b/chalk-engine/src/logic.rs#L1163</a></p>",
        "id": 198918776,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590597798
    },
    {
        "content": "<p>maybe that just means they contain free inf variables or soething like that</p>",
        "id": 198918778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597799
    },
    {
        "content": "<p>yeah ok propagating a <code>NegativeCycle</code> out seems fine</p>",
        "id": 198918798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597812
    },
    {
        "content": "<p>but ok floundering is a cause for ambiguity</p>",
        "id": 198918915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597856
    },
    {
        "content": "<p>which makes sense</p>",
        "id": 198918922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590597857
    },
    {
        "content": "<p>Yeah, that comment should maybe not include the \"depended on negatively\" part. Really, it's true if <em>any</em> subgoals were not fully evaluated</p>",
        "id": 198918941,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590597870
    },
    {
        "content": "<p>OK, so, I've skimmed the PR and it all makes sense to me</p>",
        "id": 198919447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598097
    },
    {
        "content": "<p>but I don't <em>quite</em> grok the motivation for the complete/answer phase split yet</p>",
        "id": 198919466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598106
    },
    {
        "content": "<p>Okay, let me elaborate</p>",
        "id": 198919546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598144
    },
    {
        "content": "<p>The reasoning for this initially stemmed from the fact that we now treat floundered subgoals as ambiguous</p>",
        "id": 198919750,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598221
    },
    {
        "content": "<p>i.e. they actually give answers now</p>",
        "id": 198919777,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598238
    },
    {
        "content": "<p>OK</p>",
        "id": 198919809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598254
    },
    {
        "content": "<p>This is a problem when we rely on floundering to <em>not</em> give answers (yet)</p>",
        "id": 198919836,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598270
    },
    {
        "content": "<p>There's one really easy test to mentally think about this</p>",
        "id": 198919908,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598303
    },
    {
        "content": "<p>let me get it</p>",
        "id": 198919914,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598306
    },
    {
        "content": "<p><code>non_enumerable_traits_reorder</code></p>",
        "id": 198919991,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598335
    },
    {
        "content": "<p>Basically, we end up with a table of two goals:</p>",
        "id": 198920017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598351
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[\n  forall&lt;&gt; {  ?0: Enumerable },\n  forall&lt;&gt; {  ?0: NonEnumerable },\n]\n</code></pre></div>",
        "id": 198920027,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598358
    },
    {
        "content": "<p>so I sort of recall something about how floundering would kill off the other strands</p>",
        "id": 198920052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598375
    },
    {
        "content": "<p>and I can imagine that there might be useful hints to be had</p>",
        "id": 198920073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598384
    },
    {
        "content": "<p>if you pursue them a bit more</p>",
        "id": 198920099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590598397
    },
    {
        "content": "<p>Well, a <em>table</em> floundering does kill all Strands</p>",
        "id": 198920140,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598423
    },
    {
        "content": "<p>That doesn't change here</p>",
        "id": 198920165,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598435
    },
    {
        "content": "<p>But, with the example above</p>",
        "id": 198920312,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598504
    },
    {
        "content": "<p>We pursue the second subgoal first</p>",
        "id": 198920325,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598515
    },
    {
        "content": "<p>And before it would flounder</p>",
        "id": 198920351,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598527
    },
    {
        "content": "<p>But now it gives back an ambiguous answer</p>",
        "id": 198920372,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598541
    },
    {
        "content": "<p>When, in reality it's <em>not</em> ambiguous, as long as we pursue the other subgoal first</p>",
        "id": 198920520,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590598588
    },
    {
        "content": "<p>(going back to when a table floundered, that now only happens if we can't create any program clauses or when the answer needs truncation)</p>",
        "id": 198921874,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590599151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Thing you'll have any more time today to finish this discussion?</p>",
        "id": 198951088,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590612475
    },
    {
        "content": "<p>whoops, sorry, yes I'm around now-ish actually</p>",
        "id": 198951147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590612491
    },
    {
        "content": "<p>No worries :)</p>",
        "id": 198951195,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590612517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/More.20guidance.20for.20an.20ambiguous.20query/near/198920140\">said</a>:</p>\n<blockquote>\n<p>Well, a <em>table</em> floundering does kill all Strands</p>\n</blockquote>\n<p>yeah so this is true, but it happens <em>later</em> is the point</p>",
        "id": 198951207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590612520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/More.20guidance.20for.20an.20ambiguous.20query/near/198920520\">said</a>:</p>\n<blockquote>\n<p>When, in reality it's <em>not</em> ambiguous, as long as we pursue the other subgoal first</p>\n</blockquote>\n<p>I'm struggling a bit with this I guess</p>",
        "id": 198951234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590612541
    },
    {
        "content": "<p>Well, now a table floundering doesn't happen at all in <em>most</em> cases</p>",
        "id": 198951258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590612562
    },
    {
        "content": "<p>that is, I thought that the floundering mechanism was already supposed to handle the case of</p>",
        "id": 198951259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590612562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/More.20guidance.20for.20an.20ambiguous.20query/near/198920027\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>[\n  forall&lt;&gt; {  ?0: Enumerable },\n  forall&lt;&gt; {  ?0: NonEnumerable },\n]\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198951278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590612574
    },
    {
        "content": "<p>yes, indeed it did</p>",
        "id": 198951284,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590612579
    },
    {
        "content": "<p>so maybe i'm missing a bit the motivation</p>",
        "id": 198951317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590612591
    },
    {
        "content": "<p>this seems sort of \"similar but different\" to the floundering mechanism, right?</p>",
        "id": 198951392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590612618
    },
    {
        "content": "<p>i.e., the floundering mechanism said:</p>",
        "id": 198951408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590612630
    },
    {
        "content": "<p>if a single strand has some subgoals that flounder, we move them to the end</p>",
        "id": 198951422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590612637
    },
    {
        "content": "<p>but this is more moving <em>strands</em> to the end?</p>",
        "id": 198951436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590612642
    },
    {
        "content": "<p>that is, strands that would produce an ambiguous answer?</p>",
        "id": 198951452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590612653
    },
    {
        "content": "<p>well, now both</p>",
        "id": 198951509,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590612684
    },
    {
        "content": "<p>both how?</p>",
        "id": 198951627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590612733
    },
    {
        "content": "<p>For <em>subgoals</em>:</p>",
        "id": 198951640,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590612739
    },
    {
        "content": "<p>We always flounder if the answer is ambiguous</p>",
        "id": 198951658,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590612754
    },
    {
        "content": "<p>(but we can \"recover\" that answer later)</p>",
        "id": 198951675,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590612766
    },
    {
        "content": "<p>But for <em>strands</em></p>",
        "id": 198951708,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590612784
    },
    {
        "content": "<p>we don't want any ambiguous answers on the table (until we're out of non-ambiguous answers), so we don't follow them until we have to</p>",
        "id": 198951807,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590612840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/More.20guidance.20for.20an.20ambiguous.20query/near/198951658\">said</a>:</p>\n<blockquote>\n<p>We always flounder if the answer is ambiguous</p>\n</blockquote>\n<p>here <a href=\"https://github.com/rust-lang/chalk/pull/433/files#diff-0ad662113ab25dc8768fb71878e783fdR560\">https://github.com/rust-lang/chalk/pull/433/files#diff-0ad662113ab25dc8768fb71878e783fdR560</a></p>",
        "id": 198951968,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590612899
    },
    {
        "content": "<p>so how does this wind up improving precision?</p>",
        "id": 198952489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613134
    },
    {
        "content": "<p>something I was worried about is something like</p>",
        "id": 198952493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613139
    },
    {
        "content": "<p>the strands we defer until later are still going to flounder, same as they ever were</p>",
        "id": 198952539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613169
    },
    {
        "content": "<p>or course, we may now get more answers than we did before</p>",
        "id": 198952570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613184
    },
    {
        "content": "<p>Well, the strands never flounder, they're just ambiguous</p>",
        "id": 198952671,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613209
    },
    {
        "content": "<p>The point though, is that maybe answers from non-ambiguous strands give us what we want</p>",
        "id": 198952737,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613246
    },
    {
        "content": "<p>why wouldn't we have gotten those answers before?</p>",
        "id": 198952764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613261
    },
    {
        "content": "<p>because we would have cut off the strands?</p>",
        "id": 198952782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/More.20guidance.20for.20an.20ambiguous.20query/near/198952671\">said</a>:</p>\n<blockquote>\n<p>Well, the strands never flounder, they're just ambiguous</p>\n</blockquote>\n<p>I don't really understand this :)</p>",
        "id": 198952799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613278
    },
    {
        "content": "<p>I thought we said that there was some logic that caused a table to be considered floundered and remove other strands</p>",
        "id": 198952824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613294
    },
    {
        "content": "<p>there is</p>",
        "id": 198952831,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613301
    },
    {
        "content": "<p>I guess it's a bit confusing, because there are three different things that we check for ambiguity</p>",
        "id": 198952907,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613316
    },
    {
        "content": "<p>tables, strands, and subgoals</p>",
        "id": 198952930,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/More.20guidance.20for.20an.20ambiguous.20query/near/198952764\">said</a>:</p>\n<blockquote>\n<p>why wouldn't we have gotten those answers before?</p>\n</blockquote>\n<p>So, if a strand is ambiguous, we <em>will</em> get those answers, eventually</p>",
        "id": 198953016,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613362
    },
    {
        "content": "<p>and did before</p>",
        "id": 198953021,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613365
    },
    {
        "content": "<p>OK, but now we get them sooner</p>",
        "id": 198953041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613373
    },
    {
        "content": "<p>that seems clear</p>",
        "id": 198953047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613376
    },
    {
        "content": "<p>I guess one of the things we might get is a \"identity subst\"</p>",
        "id": 198953078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613395
    },
    {
        "content": "<p>well, now we answers that are ambiguous but wouldn't have gotten before because a subgoal floundered</p>",
        "id": 198953100,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613417
    },
    {
        "content": "<p>that's the part I'm still .. hmm wait</p>",
        "id": 198953139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613440
    },
    {
        "content": "<p>first off, what do you mean by \"subgoal floundered :)</p>",
        "id": 198953204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613460
    },
    {
        "content": "<p>do you mean \"got back an ambig result\"</p>",
        "id": 198953216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613468
    },
    {
        "content": "<p>no, I mean that the table the followed for the subgoal floundered</p>",
        "id": 198953288,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613507
    },
    {
        "content": "<p>and so that subgoal will <em>never</em> give an answer</p>",
        "id": 198953306,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613516
    },
    {
        "content": "<p>in other words, is the change that:</p>\n<ul>\n<li>we were checking for answer N from some goal G</li>\n<li>before, answer N was ambig, and we stopped looking for more answers?</li>\n</ul>",
        "id": 198953310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613518
    },
    {
        "content": "<p>it seems like the idea of tables floundering is sort of not a great fit for this change you're pursuing</p>",
        "id": 198953346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613546
    },
    {
        "content": "<p>vs producing an ambig answer</p>",
        "id": 198953449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613588
    },
    {
        "content": "<p>but ok I guess the idea is that</p>",
        "id": 198953459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613596
    },
    {
        "content": "<p>well, again, now tables don't really flounder anymore</p>",
        "id": 198953460,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613597
    },
    {
        "content": "<p>other than the two instances I listed above</p>",
        "id": 198953472,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/More.20guidance.20for.20an.20ambiguous.20query/near/198953288\">said</a>:</p>\n<blockquote>\n<p>no, I mean that the table the followed for the subgoal floundered</p>\n</blockquote>\n<p>? :)</p>",
        "id": 198953475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613608
    },
    {
        "content": "<p>I guess you meant \"before this PR...\"</p>",
        "id": 198953488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613618
    },
    {
        "content": "<p>yes</p>",
        "id": 198953493,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613622
    },
    {
        "content": "<p>Sorry, I feel like I'm doing a poor job explaining</p>",
        "id": 198953523,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613638
    },
    {
        "content": "<p>ok, so, before we would have asked for answer N from subgoal G, but that table might've floundered</p>",
        "id": 198953538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613648
    },
    {
        "content": "<p>now, we will reorder things so that we prefer better answers, so answerN might be defined...</p>",
        "id": 198953554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613662
    },
    {
        "content": "<p>yes exactly</p>",
        "id": 198953566,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613669
    },
    {
        "content": "<p>...but we would eventually request answer N+m...which would then be ambiguous</p>",
        "id": 198953582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613679
    },
    {
        "content": "<p>or at least we <em>might</em></p>",
        "id": 198953625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613683
    },
    {
        "content": "<p>right</p>",
        "id": 198953634,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613690
    },
    {
        "content": "<p>and is the gain from those cases where we <em>don't</em></p>",
        "id": 198953654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613701
    },
    {
        "content": "<p>or also in the cases where we do, because we have made ambiguity less 'infectious' or something</p>",
        "id": 198953683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613716
    },
    {
        "content": "<p>hmm</p>",
        "id": 198953701,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613732
    },
    {
        "content": "<p>let me parse that</p>",
        "id": 198953712,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613735
    },
    {
        "content": "<p>I'm unsure exactly how to answer that</p>",
        "id": 198953772,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613782
    },
    {
        "content": "<p>so you said</p>",
        "id": 198953934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613870
    },
    {
        "content": "<p>\"Tables don't flounder anymore\"</p>",
        "id": 198953941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613873
    },
    {
        "content": "<p>I don't 100% remember how things worked before</p>",
        "id": 198953949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613880
    },
    {
        "content": "<p>(usually)</p>",
        "id": 198953950,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590613880
    },
    {
        "content": "<p>I don't however see why that would be the case yet</p>",
        "id": 198953962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613888
    },
    {
        "content": "<p>unless it's just that we don't \"happen\" to pull on as many strands as before</p>",
        "id": 198953972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/More.20guidance.20for.20an.20ambiguous.20query/near/198953654\">said</a>:</p>\n<blockquote>\n<p>and is the gain from those cases where we <em>don't</em></p>\n</blockquote>\n<p>i.e., this</p>",
        "id": 198953984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613911
    },
    {
        "content": "<p>so i'm wondering if that's all it is, or if there is some other change such that -- even though we <em>do</em> pull the strand -- it doesn't cause the same effect because of the answers we found earlier or something</p>",
        "id": 198954052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590613939
    },
    {
        "content": "<p>I see, so you're asking if, because we wait to follow ambiguous strands, we pull on fewer strands?</p>",
        "id": 198954150,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590614008
    },
    {
        "content": "<p>I'm not entirely sure</p>",
        "id": 198954321,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590614043
    },
    {
        "content": "<p>Back to tables floudering though, there is one case that we flounder tables on master that isn't the case in the PR: <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/logic.rs#L1008\">https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/logic.rs#L1008</a></p>",
        "id": 198954352,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590614069
    },
    {
        "content": "<p>When all subgoals flounder</p>",
        "id": 198954368,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590614083
    },
    {
        "content": "<p>going back to the testcase above:</p>",
        "id": 198954445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590614133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/More.20guidance.20for.20an.20ambiguous.20query/near/198951278\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/More.20guidance.20for.20an.20ambiguous.20query/near/198920027\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>[\n  forall&lt;&gt; {  ?0: Enumerable },\n  forall&lt;&gt; {  ?0: NonEnumerable },\n]\n</code></pre></div>\n\n\n</blockquote>\n</blockquote>\n<p>this one</p>",
        "id": 198954460,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590614142
    },
    {
        "content": "<p>it's a little bit more nuanced</p>",
        "id": 198954535,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590614168
    },
    {
        "content": "<p>since <code>forall&lt;&gt; {  ?0: NonEnumerable }</code> doesn't flounder directly</p>",
        "id": 198954555,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590614184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/More.20guidance.20for.20an.20ambiguous.20query/near/198954368\">said</a>:</p>\n<blockquote>\n<p>When all subgoals flounder</p>\n</blockquote>\n<p>in the PR, what do we do?</p>",
        "id": 198954590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590614212
    },
    {
        "content": "<p>We actually generate an intermediate table where there is one subgoal <code>forall&lt;&gt; ^1.0: NonEnumerable</code></p>",
        "id": 198954611,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590614225
    },
    {
        "content": "<p>In the PR, we just generate an ambiguous answer</p>",
        "id": 198954642,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590614243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/More.20guidance.20for.20an.20ambiguous.20query/near/198954642\">said</a>:</p>\n<blockquote>\n<p>In the PR, we just generate an ambiguous answer</p>\n</blockquote>\n<p>oK, this is probably the change I was looking for</p>",
        "id": 198955623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590614770
    },
    {
        "content": "<p>ok well I don't see any problem with the design right now</p>",
        "id": 198955653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590614786
    },
    {
        "content": "<p>and I think I grok it :)</p>",
        "id": 198955657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590614788
    },
    {
        "content": "<p>I'd be happy to merge</p>",
        "id": 198955661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590614793
    },
    {
        "content": "<p>Cool</p>",
        "id": 198955667,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590614797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are you merging or am I</p>",
        "id": 198956543,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590615275
    },
    {
        "content": "<p>rI can</p>",
        "id": 198956646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590615349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> the link check looks unhappy?</p>",
        "id": 198958252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590616379
    },
    {
        "content": "<p>Indeed. Fallout from chalk-engine/chalk-ir changes</p>",
        "id": 198958322,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590616429
    },
    {
        "content": "<p>I'm going to fix it in a separate PR</p>",
        "id": 198958338,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590616436
    },
    {
        "content": "<p>with some updates to the book</p>",
        "id": 198958343,
        "sender_full_name": "Jack Huey",
        "timestamp": 1590616440
    },
    {
        "content": "<p>OK, merged</p>",
        "id": 198959241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590616956
    }
]