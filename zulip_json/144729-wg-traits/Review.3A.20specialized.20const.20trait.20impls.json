[
    {
        "content": "<p>Hi all. It would seem that the const-eval code is already properly hooked up to the specialization graph (I discovered this by accident when trying to prove the opposite <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>). IMO we should allow <code>min_specialization</code> to now accept specialized <code>const_trait_impls</code>. So I've posted <a href=\"https://github.com/rust-lang/rust/pull/95292\">https://github.com/rust-lang/rust/pull/95292</a> to prove the concept.</p>\n<p>I'd like some input, particularly regarding missing test cases and possible edge cases I haven't considered.</p>",
        "id": 276559132,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648169662
    },
    {
        "content": "<p>afaik we're currently reworking the way const trait impls are implemented, i think <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  was talking about replacing \"constness\" with a new generic parameter kind. Does it make sense to continue the work on the current impl with that in mind?</p>",
        "id": 276581435,
        "sender_full_name": "lcnr",
        "timestamp": 1648190410
    },
    {
        "content": "<p>Yea I'd prefer to put all these things on hold until we have finished that refactoring. Too much danger of things slipping through</p>",
        "id": 276581945,
        "sender_full_name": "oli",
        "timestamp": 1648191151
    },
    {
        "content": "<p>Ok sounds good. What would be the best way for me to follow along with the progress of this refactor?</p>",
        "id": 276654297,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1648229826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> asking again: how I can follow along with the refactor of trait constness that you mentioned? Or help it along?</p>",
        "id": 277943218,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1649192727
    },
    {
        "content": "<p>Ah, the current impl is at <a href=\"https://github.com/fee1-dead/rust/tree/const_trait\">https://github.com/fee1-dead/rust/tree/const_trait</a></p>",
        "id": 277976969,
        "sender_full_name": "oli",
        "timestamp": 1649222693
    },
    {
        "content": "<p>I don't know when i'll get to it, but I can merge things to that branch, so I can mentor you and you do PRs against that</p>",
        "id": 277977002,
        "sender_full_name": "oli",
        "timestamp": 1649222760
    },
    {
        "content": "<p>If you want I can add you access to my repo</p>",
        "id": 278134098,
        "sender_full_name": "fee1-dead",
        "timestamp": 1649321495
    },
    {
        "content": "<p>but right now it's been pretty boring: I added a new variant to <code>ty::GenericParamKind</code> (IIRC the name) and it has been just handling the case of the new variant</p>",
        "id": 278134215,
        "sender_full_name": "fee1-dead",
        "timestamp": 1649321558
    },
    {
        "content": "<p>Also added an expectation to <code>TraitRef</code> that its substs must have a ConstnessParam as its last argument. This has not yet been reflected in <code>rustc_typeck</code>'s <code>generics_of</code> impl.</p>",
        "id": 278134304,
        "sender_full_name": "fee1-dead",
        "timestamp": 1649321636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> would you prefer having ConstnessParam as last or first?</p>",
        "id": 278134371,
        "sender_full_name": "fee1-dead",
        "timestamp": 1649321656
    },
    {
        "content": "<p>Last seems good to me, as long as only const traits have it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 278137427,
        "sender_full_name": "oli",
        "timestamp": 1649323551
    },
    {
        "content": "<p>hmm. non-const traits can just have it as <code>ConstnessParam::Not</code>, right?</p>",
        "id": 278139927,
        "sender_full_name": "fee1-dead",
        "timestamp": 1649325150
    },
    {
        "content": "<p>what is a non const trait? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 278140201,
        "sender_full_name": "lcnr",
        "timestamp": 1649325357
    },
    {
        "content": "<p>The idea is that we'd only allow some traits to have const impls (opt-in) and we decided to implement that first with an attribute <code>#[const_trait]</code></p>",
        "id": 278140847,
        "sender_full_name": "fee1-dead",
        "timestamp": 1649325680
    }
]