[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> -- I was thinking more about <code>dyn Trait</code> upcasting while I was away. Not sure if you are still looking for a \"next task\", but I think that is what we should consider. It is basically a real pain that we cannot do it =)</p>",
        "id": 162835989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554743340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yep! I've had nothing serious on my plate for about a week now (mainly waiting on feedback), so that sounds cool.</p>",
        "id": 162836120,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554743407
    },
    {
        "content": "<p>I also don't think it's all <strong>that</strong> complex a problem.</p>",
        "id": 162836150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554743429
    },
    {
        "content": "<p>I guess the way to start would be by doing some review of how the current setup works etc</p>",
        "id": 162836161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554743437
    },
    {
        "content": "<p>(TBH, I wonder if it's worth making this a working group of its own)</p>",
        "id": 162836176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554743450
    },
    {
        "content": "<p>maybe, maybe not</p>",
        "id": 162836184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554743461
    },
    {
        "content": "<p>had a question for you about a) maybe bounds in trait objects, b) RPIT existential lifetimes (can wait a bit maybe)</p>",
        "id": 162836201,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554743473
    },
    {
        "content": "<p>yeah... not sure, honestly. I'm up for it if you are though.</p>",
        "id": 162836213,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554743487
    },
    {
        "content": "<p>shall we start a HackMD doc at least?</p>",
        "id": 162836229,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554743501
    },
    {
        "content": "<p>or similar</p>",
        "id": 162836235,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554743504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 162836545,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554743701
    },
    {
        "content": "<blockquote>\n<p>shall we start a HackMD doc at least?</p>\n</blockquote>\n<p>start a doc for upcasting?</p>",
        "id": 162836742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554743860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah</p>",
        "id": 162836747,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554743867
    },
    {
        "content": "<p>seems reasonable</p>",
        "id": 162836755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554743870
    },
    {
        "content": "<p>there is a bit of prior work we can research in terms of vtable layout,</p>",
        "id": 162836760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554743879
    },
    {
        "content": "<p>we can summarise the current state</p>",
        "id": 162836761,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554743879
    },
    {
        "content": "<p>then part B can be an action plan</p>",
        "id": 162836813,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554743887
    },
    {
        "content": "<p>but I think ultimately it's not <em>that</em> important what we settle on here</p>",
        "id": 162836814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554743888
    },
    {
        "content": "<p>sure</p>",
        "id": 162836820,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554743893
    },
    {
        "content": "<p>(as long as we leave room for us to change later)</p>",
        "id": 162836826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554743900
    },
    {
        "content": "<p>what we probably want to do is to try and schedule a time to draw up an action plan with first few steps</p>",
        "id": 162836847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554743918
    },
    {
        "content": "<p>maybe we can get <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> involved</p>",
        "id": 162836854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554743926
    },
    {
        "content": "<p>yeah that would be good, if he's free</p>",
        "id": 162836887,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554743958
    },
    {
        "content": "<p>okay, we have a Zoom meeting to kick things off... got any suggestions for when?</p>",
        "id": 162836912,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554743984
    },
    {
        "content": "<p>tomorrow is difficult for me, but other than that, afternoons should be fine...</p>",
        "id": 162836975,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554744006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> can you make a doodle with some options that work for you?</p>",
        "id": 162839491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554745772
    },
    {
        "content": "<p>Sure, here it is: <a href=\"https://doodle.com/poll/7xdsf8rcy4g989v7\" target=\"_blank\" title=\"https://doodle.com/poll/7xdsf8rcy4g989v7\">https://doodle.com/poll/7xdsf8rcy4g989v7</a> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 162860031,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554761792
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"131912\">@dhardy</span> <span class=\"user-mention\" data-user-id=\"210316\">@Guillaume</span> (people whom I know have interest in this)</p>",
        "id": 162860054,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554761817
    },
    {
        "content": "<p>Here I am!</p>",
        "id": 162885682,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1554792478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210316\">@Guillaume</span> Cool, thanks for the response. Hopefully we'll figure out when Niko and maybe others can make it too.</p>",
        "id": 162914440,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554819581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  Do you want to participate too? :-)</p>",
        "id": 162914460,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554819599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ok I filled it out</p>",
        "id": 162950539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554844275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> cheers. we'll go with Fri at 6:00 then probably...</p>",
        "id": 162950658,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554844349
    },
    {
        "content": "<p>unless someone else replies soon</p>",
        "id": 162950670,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554844364
    },
    {
        "content": "<p>sorry if time zone was confusing</p>",
        "id": 162950680,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554844375
    },
    {
        "content": "<p><a href=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NGY2Y250ZWsxdnVmdGdqZjRyM2c0ZGppZGEgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\" target=\"_blank\" title=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NGY2Y250ZWsxdnVmdGdqZjRyM2c0ZGppZGEgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\">Created a calendar event</a>, which includes a zoom link</p>",
        "id": 162953431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554846909
    },
    {
        "content": "<p>(Or did we want to do this on Zulip?)</p>",
        "id": 162953436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554846916
    },
    {
        "content": "<p>Either is fine. What do you think's more efficient? Incidentally, I put 1 hour duration in Doodle, but if you think we only need 45 mins, then that's cool.</p>",
        "id": 162953585,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554847030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> could we get your feedback on <a href=\"https://github.com/rust-lang/rust/issues/59656\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59656\">https://github.com/rust-lang/rust/issues/59656</a> at some point soon btw? :-)</p>",
        "id": 162953599,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554847045
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NGY2Y250ZWsxdnVmdGdqZjRyM2c0ZGppZGEgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\" target=\"_blank\" title=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NGY2Y250ZWsxdnVmdGdqZjRyM2c0ZGppZGEgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\">Created a calendar event</a>, which includes a zoom link</p>\n</blockquote>\n<p>CC <span class=\"user-mention\" data-user-id=\"210316\">@Guillaume</span></p>",
        "id": 162953712,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554847099
    },
    {
        "content": "<p>I might attend; can you add the calendar link to t-compiler's calendar? or t-lang's</p>",
        "id": 162962433,
        "sender_full_name": "centril",
        "timestamp": 1554855772
    },
    {
        "content": "<p>it <em>is</em> on the compiler calendar. Though your comment confused me :P and I might have messed up the link just now, if so, <a href=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NGY2Y250ZWsxdnVmdGdqZjRyM2c0ZGppZGEgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\" target=\"_blank\" title=\"https://calendar.google.com/event?action=TEMPLATE&amp;tmeid=NGY2Y250ZWsxdnVmdGdqZjRyM2c0ZGppZGEgNnU1cnJ0Y2U2bHJ0djA3cGZpM2RhbWdqdXNAZw&amp;tmsrc=6u5rrtce6lrtv07pfi3damgjus%40group.calendar.google.com\">here is another one</a>.</p>",
        "id": 162987628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554887919
    },
    {
        "content": "<p>oh; I might have looked at the wrong week :P</p>",
        "id": 163009451,
        "sender_full_name": "centril",
        "timestamp": 1554906608
    },
    {
        "content": "<p>it's this week :-P</p>",
        "id": 163013494,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554909095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  yeah I looked 1 week into the future</p>",
        "id": 163014648,
        "sender_full_name": "centril",
        "timestamp": 1554909798
    },
    {
        "content": "<p>heh okay</p>",
        "id": 163014656,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1554909805
    },
    {
        "content": "<p>I should be able to attend. I added the event to my calendar. :)</p>",
        "id": 163029831,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1554919731
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> (cc <span class=\"user-mention\" data-user-id=\"210316\">@Guillaume</span>, <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, whomever else) -- I had made this a Zoom meeting, but I was wondering if we really want that? I've found Zulip often works as well or better. I'm inclined probably to do it over Zulip myself.</p>",
        "id": 163202921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555084606
    },
    {
        "content": "<p>(To be clear, it doesn't start for a few hours, I just wanted to check because -- if so -- I'll edit the event)</p>",
        "id": 163202938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555084622
    },
    {
        "content": "<p>Zulip is fine with me too, yeah</p>",
        "id": 163203201,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555084811
    },
    {
        "content": "<p>The time was set for now, I thought, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>...</p>",
        "id": 163203207,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555084817
    },
    {
        "content": "<p>at least that's what's in the calendar</p>",
        "id": 163203429,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555084996
    },
    {
        "content": "<p>the calendar says in 1 hr?</p>",
        "id": 163203640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555085181
    },
    {
        "content": "<p>hmm, not for me</p>",
        "id": 163203658,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555085220
    },
    {
        "content": "<p>weird</p>",
        "id": 163203659,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555085221
    },
    {
        "content": "<p>anyway, 1hr is fine</p>",
        "id": 163203664,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555085224
    },
    {
        "content": "<p>no worries</p>",
        "id": 163203667,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555085224
    },
    {
        "content": "<p>maybe iCal confused the timezones</p>",
        "id": 163203681,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555085235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in the meanwhile, did you see the GitHub issue about maybe bounds in trait objects?</p>",
        "id": 163204466,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555085895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it's part of the PR I made for enforcing single-trait objects with trait aliases. I did some other things like removed the concept of principal traits, which arielby never got around to finishing.</p>",
        "id": 163204503,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555085933
    },
    {
        "content": "<p>this is the last remaining thing...</p>",
        "id": 163204512,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555085942
    },
    {
        "content": "<p>for me it's in 21 min</p>",
        "id": 163205956,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1555087185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I would prefer Zoom; I find that you often get more done via audio since you don't have to think and type :P</p>",
        "id": 163206420,
        "sender_full_name": "centril",
        "timestamp": 1555087569
    },
    {
        "content": "<p>Let's do Zulip though, sorry Centril. Niko is leading this meeting so if he slightly prefers that it's probably best... I slightly prefer it too.</p>",
        "id": 163206698,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555087804
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> in the meanwhile, did you see the GitHub issue about maybe bounds in trait objects?</p>\n</blockquote>\n<p>I did not</p>",
        "id": 163206735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555087858
    },
    {
        "content": "<p>Link?</p>",
        "id": 163206764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555087880
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/59656\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59656\">https://github.com/rust-lang/rust/issues/59656</a></p>",
        "id": 163206772,
        "sender_full_name": "centril",
        "timestamp": 1555087890
    },
    {
        "content": "<p>@centril thanks</p>",
        "id": 163207001,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555088101
    },
    {
        "content": "<p>Should we start?</p>",
        "id": 163207370,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1555088398
    },
    {
        "content": "<p>Yep, let's start</p>",
        "id": 163207521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088490
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> -- we're going to talk about trait upcasting (cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> if you're around and interested)</p>",
        "id": 163207541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088519
    },
    {
        "content": "<p>First, to set the stage</p>",
        "id": 163207556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088522
    },
    {
        "content": "<p>Let me clarify what <em>I</em> think we're talking about :)</p>",
        "id": 163207593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088528
    },
    {
        "content": "<p>yep...</p>",
        "id": 163207594,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555088530
    },
    {
        "content": "<p>Or perhaps what we're <em>not</em> talking about</p>",
        "id": 163207595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088532
    },
    {
        "content": "<p>I think we are not talking about supporting <code>dyn Foo + Bar</code> for arbitrary <code>Foo</code> and <code>Bar</code></p>",
        "id": 163207604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088546
    },
    {
        "content": "<p>That is, the definition of a trait object type as <code>dyn Principal + AutoTraits</code> would not be altered</p>",
        "id": 163207628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088565
    },
    {
        "content": "<p>But we <em>would</em> permit upcasting to supertraits via a coercion</p>",
        "id": 163207637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088575
    },
    {
        "content": "<p>so e.g. if you had <code>trait Foo: Bar + Baz</code>, then <code>dyn Foo</code> could be coerced to <code>dyn Bar</code> or <code>dyn Baz</code></p>",
        "id": 163207655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088591
    },
    {
        "content": "<p>if we later add support for <code>dyn Bar + Baz</code>, of course we would want to permit coercion to that too</p>",
        "id": 163207660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088602
    },
    {
        "content": "<p>or perhaps I should say <em>when</em></p>",
        "id": 163207677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088615
    },
    {
        "content": "<p>since I am assuming we will do so at some point</p>",
        "id": 163207682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088621
    },
    {
        "content": "<p>but I think that's a more complex topic</p>",
        "id": 163207688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088626
    },
    {
        "content": "<p>Does everybody agree with this so far? :)</p>",
        "id": 163207704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> don't we permit <code>dyn Principal + Auto</code> ~&gt; <code>dyn Principal</code> today?</p>",
        "id": 163207764,
        "sender_full_name": "centril",
        "timestamp": 1555088663
    },
    {
        "content": "<p>We may, I forget.</p>",
        "id": 163207781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088676
    },
    {
        "content": "<p>Good to clarify.</p>",
        "id": 163207786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088679
    },
    {
        "content": "<p>Also, if we do, if we do it via coercion or subtyping (internally to the compiler).</p>",
        "id": 163207806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088696
    },
    {
        "content": "<p>(and maybe <code>dyn Principal + Auto</code> ~&gt; <code>dyn Auto</code> but I don't think we allow just auto traits...)</p>",
        "id": 163207828,
        "sender_full_name": "centril",
        "timestamp": 1555088713
    },
    {
        "content": "<p>this <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0f4e4f7a9a9d75a86faad5e47aa3b0c4\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0f4e4f7a9a9d75a86faad5e47aa3b0c4\">builds</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">coerce</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"p\">(</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// let _: &amp;dyn Send = x;</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163207929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088785
    },
    {
        "content": "<p>but the commented line does not</p>",
        "id": 163207939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088796
    },
    {
        "content": "<p>you get this:</p>\n<div class=\"codehilite\"><pre><span></span>Standard Error\n\n   Compiling playground v0.0.1 (/playground)\nerror[E0308]: mismatched types\n --&gt; src/main.rs:5:24\n  |\n5 |     let _: &amp;dyn Send = x;\n  |                        ^ expected trait `std::marker::Send`, found trait `Foo + std::marker::Send`\n  |\n  = note: expected type `&amp;dyn std::marker::Send`\n             found type `&amp;dyn Foo + std::marker::Send`\n</pre></div>",
        "id": 163207981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yep I agree.</p>",
        "id": 163207982,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555088832
    },
    {
        "content": "<p>I suspect this is because we have \"broken-ish\" code doing that coercion</p>",
        "id": 163207994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088849
    },
    {
        "content": "<p>multi-trait objects can come later. it's a natural progression, but this is the natural first step.</p>",
        "id": 163208003,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555088858
    },
    {
        "content": "<p>I see</p>",
        "id": 163208007,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555088863
    },
    {
        "content": "<p>basically I suspect we permit reducing the set of auto traits, but not changing the principal (in this case, from something to nothing)</p>",
        "id": 163208011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088866
    },
    {
        "content": "<p>but let's find the actual code</p>",
        "id": 163208015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555088872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I wonder if the PR you just looked at happens to fix that... since it removes principals as a concept ;-)</p>",
        "id": 163208071,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555088891
    },
    {
        "content": "<p>I could test now actually heh</p>",
        "id": 163208085,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555088900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> another thing: type constructors seem relevant here, because I assume were are not going to allow <code>F&lt;dyn Sub&gt;</code> ~&gt; <code>F&lt;dyn Super&gt;</code> for arbitrary <code>F</code> -- but still we do want to allow <code>Box&lt;dyn Sub&gt;</code> ~&gt; <code>Box&lt;dyn Super&gt;</code></p>",
        "id": 163208112,
        "sender_full_name": "centril",
        "timestamp": 1555088941
    },
    {
        "content": "<p>IOW, <code>dyn Sub &lt;: dyn Super</code> does not hold</p>",
        "id": 163208135,
        "sender_full_name": "centril",
        "timestamp": 1555088966
    },
    {
        "content": "<p>ah nope, same error in the build for that PR</p>",
        "id": 163208158,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555088993
    },
    {
        "content": "<blockquote>\n<p>but let's find the actual code</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src/librustc/ty/relate.rs#L576-L599\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5b96425699476ccfc4c56185067d80cb792044a3/src/librustc/ty/relate.rs#L576-L599\">this is the subtyping code for trait objects</a>, unless I'm confused it seems to require an exact match, so this is presumably a coercion</p>",
        "id": 163208217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089020
    },
    {
        "content": "<p>Yes, the <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/traits/select.rs#L2169-L2186\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/traits/select.rs#L2169-L2186\">coercion is here</a>, and it says:</p>",
        "id": 163208259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089069
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> // Upcasts permit two things:\n                //\n                // 1. Dropping builtin bounds, e.g., `Foo+Send` to `Foo`\n                // 2. Tightening the region bound, e.g., `Foo+&#39;a` to `Foo+&#39;b` if `&#39;a : &#39;b`\n                //\n                // Note that neither of these changes requires any\n                // change at runtime.  Eventually this will be\n                // generalized.\n                //\n                // We always upcast when we can because of reason\n// #2 (region bounds).\n</pre></div>",
        "id": 163208274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089082
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> another thing: type constructors seem relevant here, because I assume were are not going to allow <code>F&lt;dyn Sub&gt;</code> ~&gt; <code>F&lt;dyn Super&gt;</code> for arbitrary <code>F</code> -- but still we do want to allow <code>Box&lt;dyn Sub&gt;</code> ~&gt; <code>Box&lt;dyn Super&gt;</code></p>\n</blockquote>\n<p>this should just fall out from the unsizing rules, <span class=\"user-mention\" data-user-id=\"126931\">@centril</span></p>",
        "id": 163208300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089109
    },
    {
        "content": "<p>Yeah that seems reasonable</p>",
        "id": 163208304,
        "sender_full_name": "centril",
        "timestamp": 1555089112
    },
    {
        "content": "<blockquote>\n<p>this should just fall out from the unsizing rules, <span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> </p>\n</blockquote>\n<p>Also reasonable <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 163208365,
        "sender_full_name": "centril",
        "timestamp": 1555089125
    },
    {
        "content": "<p>basically, any place that we would permit the <em>existing upcast</em> (which is tied to unsizing), we would also permit the trait object upcast</p>",
        "id": 163208393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089146
    },
    {
        "content": "<p>the key point is that doing this upcast may change the vtable</p>",
        "id": 163208400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089151
    },
    {
        "content": "<p>so it is definitely not <em>subtyping</em> in the compiler's sense of the word</p>",
        "id": 163208413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089158
    },
    {
        "content": "<p>so maybe we turn to that for a second, that is, how I would expect to implement</p>",
        "id": 163208430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089172
    },
    {
        "content": "<p>my expectation is that we will basically have the vtable for a given trait</p>",
        "id": 163208460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089201
    },
    {
        "content": "<p>include pointers to the vtables for its supertraits</p>",
        "id": 163208466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089209
    },
    {
        "content": "<p>we know that, at least presently, the vtables are structured in a tree</p>",
        "id": 163208476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089217
    },
    {
        "content": "<p>er, sorry, supertrait relations are structured in a tree</p>",
        "id": 163208483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089235
    },
    {
        "content": "<p>I'd actually like to lift that restriction</p>",
        "id": 163208486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089238
    },
    {
        "content": "<p>but that seems separable (though maybe worth thinking through how it would work at runtime)</p>",
        "id": 163208536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089253
    },
    {
        "content": "<p>(btw, do we have an RFC for upcasting?)</p>",
        "id": 163208544,
        "sender_full_name": "centril",
        "timestamp": 1555089265
    },
    {
        "content": "<p>not that I know of</p>",
        "id": 163208548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089274
    },
    {
        "content": "<p>I was going to bring up the question of what procedure to follow</p>",
        "id": 163208558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089284
    },
    {
        "content": "<p>it's hard to imagine it being <em>controversial</em></p>",
        "id": 163208562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089289
    },
    {
        "content": "<p>but I think documenting the plan is good</p>",
        "id": 163208568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089295
    },
    {
        "content": "<p>ok, it seems to me that an rfc needs to happen at some point</p>",
        "id": 163208573,
        "sender_full_name": "centril",
        "timestamp": 1555089300
    },
    {
        "content": "<p>Is it required to have one? There doesn't seem to have much debates about the feature itself?</p>",
        "id": 163208574,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1555089300
    },
    {
        "content": "<p>I don't think there's debate, but that's not a reason not to have the RFC</p>",
        "id": 163208596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089316
    },
    {
        "content": "<p>put another way, you won't know if there's debate, until you create a forum for it :)</p>",
        "id": 163208600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089322
    },
    {
        "content": "<p>but I would expect us to move to FCP quickly</p>",
        "id": 163208604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089328
    },
    {
        "content": "<p>Fair enough!</p>",
        "id": 163208621,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1555089342
    },
    {
        "content": "<p>it's a good use of the staging mechanism -- the lang design questions are relatively sparse</p>",
        "id": 163208622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089342
    },
    {
        "content": "<p>(it's mostly an impl plan question, and that mostly isn't exposed to users)</p>",
        "id": 163208636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089362
    },
    {
        "content": "<p>but also, the purpose of RFCs is not just debates, it is also for clearly communicating what we are doing, make sure its well thought, and also spread knowledge</p>",
        "id": 163208682,
        "sender_full_name": "centril",
        "timestamp": 1555089367
    },
    {
        "content": "<blockquote>\n<p>Is it required to have one? There doesn't seem to have much debates about the feature itself?</p>\n</blockquote>\n<p>still I did wonder the same thing to myself :)</p>",
        "id": 163208685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089370
    },
    {
        "content": "<blockquote>\n<p>but also, the purpose of RFCs is not just debates, it is also for clearly communicating what we are doing, make sure its well thought, and also spread knowledge</p>\n</blockquote>\n<p>yes very much this</p>",
        "id": 163208695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089377
    },
    {
        "content": "<blockquote>\n<p>include pointers to the vtables for its supertraits</p>\n</blockquote>\n<p>there is another impl route</p>",
        "id": 163208718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089415
    },
    {
        "content": "<p>This is another fair point :)</p>",
        "id": 163208722,
        "sender_full_name": "GuillaumeGomez",
        "timestamp": 1555089418
    },
    {
        "content": "<p>after all the vtable for the trait Foo <em>already</em> contains all the methods for its supertraits</p>",
        "id": 163208742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089432
    },
    {
        "content": "<p>we could lay them out in such a way that</p>",
        "id": 163208747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089436
    },
    {
        "content": "<p>we can compute <em>a</em> vtable for the supertrait by applying an offset to the vtable for <code>Foo</code></p>",
        "id": 163208753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089445
    },
    {
        "content": "<p>there's a whole bunch of literature on this from the C++ space</p>",
        "id": 163208765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089458
    },
    {
        "content": "<p>I actually don't care much at all what we do here, though I think embedding some pointers for supertraits might be easier</p>",
        "id": 163208773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089476
    },
    {
        "content": "<p>(I definitely don't think we should promise any particular layout to users)</p>",
        "id": 163208825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah, I wonder if that will work better when we come to supporting multi-trait objects and their vtables later</p>",
        "id": 163208826,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555089491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> imo, we can also iterate on layout</p>",
        "id": 163208835,
        "sender_full_name": "centril",
        "timestamp": 1555089497
    },
    {
        "content": "<p>like, even start with the \"dumb\" version at first</p>",
        "id": 163208841,
        "sender_full_name": "centril",
        "timestamp": 1555089512
    },
    {
        "content": "<p>trait object layout is probably also not a wg-traits area of expertise?</p>",
        "id": 163208887,
        "sender_full_name": "centril",
        "timestamp": 1555089555
    },
    {
        "content": "<p>I don't know why not</p>",
        "id": 163209001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089631
    },
    {
        "content": "<p>but I wouldn't expect this to ultimately be in wg-traits from compiler POV</p>",
        "id": 163209006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089641
    },
    {
        "content": "<p>I think we should just make a WG for this particular effort</p>",
        "id": 163209014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089646
    },
    {
        "content": "<p>sounds reasonable</p>",
        "id": 163209024,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555089652
    },
    {
        "content": "<p>wg-subtyping? :-P</p>",
        "id": 163209043,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555089671
    },
    {
        "content": "<p>wg-coercion ;)</p>",
        "id": 163209049,
        "sender_full_name": "centril",
        "timestamp": 1555089677
    },
    {
        "content": "<p>no :) wg-dyn-upcast :)</p>",
        "id": 163209058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089684
    },
    {
        "content": "<p>(by which I mean I think we should be focused)</p>",
        "id": 163209072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089694
    },
    {
        "content": "<p>anyway, i know I checked in with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> earlier and they seemed to agree with everything we've written so far, so that's good =)</p>",
        "id": 163209159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089747
    },
    {
        "content": "<p>Here's an idea: 1) work on the type system logic, 2) work on the layout logic, 3) work on an RFC, 4) iterate on 2., 5) stabilize</p>",
        "id": 163209164,
        "sender_full_name": "centril",
        "timestamp": 1555089750
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> imo, we can also iterate on layout</p>\n</blockquote>\n<p>also I meant to say yes to this :) I agree</p>",
        "id": 163209169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089758
    },
    {
        "content": "<p>/me grumbles something about most of the logic being around anyway</p>",
        "id": 163209227,
        "sender_full_name": "eddyb",
        "timestamp": 1555089794
    },
    {
        "content": "<p>you might even be able to separate 1 &amp; 2 completely by producing some well placed ICEs anyways</p>",
        "id": 163209251,
        "sender_full_name": "centril",
        "timestamp": 1555089808
    },
    {
        "content": "<p>like, this isn't even that much work, implementation-wise?</p>",
        "id": 163209264,
        "sender_full_name": "eddyb",
        "timestamp": 1555089825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ok, seems like you'll have a full implementation up in a PR tomorrow then ^^</p>",
        "id": 163209265,
        "sender_full_name": "centril",
        "timestamp": 1555089826
    },
    {
        "content": "<p>and hasn't been for ages</p>",
        "id": 163209269,
        "sender_full_name": "eddyb",
        "timestamp": 1555089829
    },
    {
        "content": "<p>my issue is I have to do several things already</p>",
        "id": 163209279,
        "sender_full_name": "eddyb",
        "timestamp": 1555089836
    },
    {
        "content": "<p>if not for that, sure</p>",
        "id": 163209286,
        "sender_full_name": "eddyb",
        "timestamp": 1555089840
    },
    {
        "content": "<p>I want to nominate <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> to help mentor <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> =)</p>",
        "id": 163209338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089848
    },
    {
        "content": "<p>the \"is supertrait\" check is easy, like, copypaste another place that does it already</p>",
        "id": 163209353,
        "sender_full_name": "eddyb",
        "timestamp": 1555089861
    },
    {
        "content": "<p>but I agree it's not all that much work</p>",
        "id": 163209359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> don't worry, Niko planned for me to do it anywya. if you want to mentor me, that's cool though.</p>",
        "id": 163209371,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555089882
    },
    {
        "content": "<p>and in terms of doing it, we already encode several things like these</p>",
        "id": 163209374,
        "sender_full_name": "eddyb",
        "timestamp": 1555089884
    },
    {
        "content": "<p>anyway I know you're busy, leaving a few notes as to what work is needed is fine</p>",
        "id": 163209378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089886
    },
    {
        "content": "<p>lemme grab it</p>",
        "id": 163209382,
        "sender_full_name": "eddyb",
        "timestamp": 1555089891
    },
    {
        "content": "<blockquote>\n<p>copypaste another place that does it already</p>\n</blockquote>\n<p>preferably not literally copy-paste, refactoring a bit would be good?</p>",
        "id": 163209384,
        "sender_full_name": "centril",
        "timestamp": 1555089892
    },
    {
        "content": "<p>I am also happy to do so</p>",
        "id": 163209385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I mean it might be one line :P?</p>",
        "id": 163209404,
        "sender_full_name": "eddyb",
        "timestamp": 1555089910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  fiiine :P</p>",
        "id": 163209419,
        "sender_full_name": "centril",
        "timestamp": 1555089919
    },
    {
        "content": "<p>so... maybe we can iterate on the RFC together then?</p>",
        "id": 163209495,
        "sender_full_name": "centril",
        "timestamp": 1555089966
    },
    {
        "content": "<p>as in, the bulk of the operation is likely already present elsewhere</p>",
        "id": 163209507,
        "sender_full_name": "eddyb",
        "timestamp": 1555089977
    },
    {
        "content": "<p>the RFC does't seem like it should be that hard to write</p>",
        "id": 163209510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  also, if it is as little work as <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> describes then a new WG sounds overkill</p>",
        "id": 163209512,
        "sender_full_name": "centril",
        "timestamp": 1555089985
    },
    {
        "content": "<p>(though I would be curious to think through how things would work if supertraits were permitted to be cyclic)</p>",
        "id": 163209518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089991
    },
    {
        "content": "<p>regardles I think we want this upcast :)</p>",
        "id": 163209526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555089999
    },
    {
        "content": "<p>ughhh niko how much I hate now you naming a trait resolution thing a \"vtable\"</p>",
        "id": 163209529,
        "sender_full_name": "eddyb",
        "timestamp": 1555090003
    },
    {
        "content": "<p>even though it's not &gt;:P</p>",
        "id": 163209534,
        "sender_full_name": "eddyb",
        "timestamp": 1555090007
    },
    {
        "content": "<p>(going to be afk for a bit)</p>",
        "id": 163209541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555090013
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/traits/util.rs#L475\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/traits/util.rs#L475\">https://github.com/rust-lang/rust/blob/master/src/librustc/traits/util.rs#L475</a></p>",
        "id": 163209573,
        "sender_full_name": "eddyb",
        "timestamp": 1555090040
    },
    {
        "content": "<p>yeah, the rfc is probably not hard to write, but some busy work</p>",
        "id": 163209580,
        "sender_full_name": "centril",
        "timestamp": 1555090044
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L3028-L3032\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L3028-L3032\">https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L3028-L3032</a></p>",
        "id": 163209601,
        "sender_full_name": "eddyb",
        "timestamp": 1555090074
    },
    {
        "content": "<p>we already compute the base of <code>SuperTrait</code>'s methods in <code>SubTrait</code>'s vtable</p>",
        "id": 163209665,
        "sender_full_name": "eddyb",
        "timestamp": 1555090100
    },
    {
        "content": "<p>like, vtable layout is already done by the trait system</p>",
        "id": 163209686,
        "sender_full_name": "eddyb",
        "timestamp": 1555090136
    },
    {
        "content": "<blockquote>\n<p>ughhh niko how much I hate now you naming a trait resolution thing a \"vtable\"</p>\n</blockquote>\n<p>this confused the hell out of me for a while haha</p>",
        "id": 163209709,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555090148
    },
    {
        "content": "<p>you just need to do a <code>+ 3</code> in a strategic place :P</p>",
        "id": 163209715,
        "sender_full_name": "eddyb",
        "timestamp": 1555090151
    },
    {
        "content": "<p>to get <code>trait Foo: Sup1 + Sup2</code> to reuse the magical 3 for <code>Sup1</code> but duplicate them for <code>Sup2</code></p>",
        "id": 163209751,
        "sender_full_name": "eddyb",
        "timestamp": 1555090187
    },
    {
        "content": "<p>someone needs to write a bunch of tests as well</p>",
        "id": 163209895,
        "sender_full_name": "centril",
        "timestamp": 1555090281
    },
    {
        "content": "<p>what's this magical 3? :-P</p>",
        "id": 163209905,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555090291
    },
    {
        "content": "<p>for the implementation</p>",
        "id": 163209910,
        "sender_full_name": "centril",
        "timestamp": 1555090294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> you know that's you ;-)</p>",
        "id": 163209913,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555090296
    },
    {
        "content": "<p>mr. tests</p>",
        "id": 163209915,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555090298
    },
    {
        "content": "<p><span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 163209925,
        "sender_full_name": "centril",
        "timestamp": 1555090307
    },
    {
        "content": "<p>yeah maybe ;)</p>",
        "id": 163209934,
        "sender_full_name": "centril",
        "timestamp": 1555090322
    },
    {
        "content": "<p>I'll copy the RFC template over to <a href=\"https://github.com/rust-lang/wg-traits\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-traits\">https://github.com/rust-lang/wg-traits</a>  and we can work on it there</p>",
        "id": 163210069,
        "sender_full_name": "centril",
        "timestamp": 1555090433
    },
    {
        "content": "<p>3 is drop+size+align</p>",
        "id": 163210139,
        "sender_full_name": "eddyb",
        "timestamp": 1555090468
    },
    {
        "content": "<blockquote>\n<p>(going to be afk for a bit)</p>\n</blockquote>\n<p>sorry, back</p>",
        "id": 163210196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555090524
    },
    {
        "content": "<p>for tests we need to check both the static and dynamic semantics</p>",
        "id": 163210284,
        "sender_full_name": "centril",
        "timestamp": 1555090570
    },
    {
        "content": "<blockquote>\n<p>3 is drop+size+align</p>\n</blockquote>\n<p>oh I see. just three usize's or something to offset eh?</p>",
        "id": 163210297,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555090583
    },
    {
        "content": "<p>but there's no syntax to check here at least</p>",
        "id": 163210319,
        "sender_full_name": "centril",
        "timestamp": 1555090599
    },
    {
        "content": "<p>actually, we can iterate on tests in the same place?</p>",
        "id": 163210362,
        "sender_full_name": "centril",
        "timestamp": 1555090637
    },
    {
        "content": "<p>oh yeaaaah sooo</p>",
        "id": 163210381,
        "sender_full_name": "eddyb",
        "timestamp": 1555090664
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L3032\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L3032\">https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L3032</a></p>",
        "id": 163210382,
        "sender_full_name": "eddyb",
        "timestamp": 1555090664
    },
    {
        "content": "<blockquote>\n<p>actually, we can iterate on tests in the same place?</p>\n</blockquote>\n<p>feel free to make a subdirectory there</p>",
        "id": 163210469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555090721
    },
    {
        "content": "<p>replace the <code>.sum()</code> with <code>.fold(None, |i, n| Some(i.map_or(0, |i| i + 3) + n)).unwrap_or(0)</code></p>",
        "id": 163210639,
        "sender_full_name": "eddyb",
        "timestamp": 1555090867
    },
    {
        "content": "<p>or... something like that</p>",
        "id": 163210642,
        "sender_full_name": "eddyb",
        "timestamp": 1555090870
    },
    {
        "content": "<p>so this is for calling methods on trait objects</p>",
        "id": 163210773,
        "sender_full_name": "eddyb",
        "timestamp": 1555090969
    },
    {
        "content": "<p>interesting</p>",
        "id": 163210804,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555090989
    },
    {
        "content": "<p>for the cast you'd need to do this exact <code>vtable_base</code> thing, to figure out how much you need to offset</p>",
        "id": 163210812,
        "sender_full_name": "eddyb",
        "timestamp": 1555090998
    },
    {
        "content": "<p>do you want to write this up into a few notes on GH or HackMD when you have a moment?</p>",
        "id": 163210819,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555091002
    },
    {
        "content": "<p>then I can have a go maybe</p>",
        "id": 163210822,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555091005
    },
    {
        "content": "<p>I mean, this is it?</p>",
        "id": 163210826,
        "sender_full_name": "eddyb",
        "timestamp": 1555091010
    },
    {
        "content": "<blockquote>\n<p>(though I would be curious to think through how things would work if supertraits were permitted to be cyclic)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> maybe let's dig into this?</p>",
        "id": 163210849,
        "sender_full_name": "centril",
        "timestamp": 1555091029
    },
    {
        "content": "<p>basically there's 3 more entries before each supertrait other than the first one</p>",
        "id": 163210852,
        "sender_full_name": "eddyb",
        "timestamp": 1555091036
    },
    {
        "content": "<p>that's all my <code>fold</code> does</p>",
        "id": 163210913,
        "sender_full_name": "eddyb",
        "timestamp": 1555091048
    },
    {
        "content": "<p>Okay, I can have a go then... will need to reread later though</p>",
        "id": 163210942,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555091076
    },
    {
        "content": "<blockquote>\n<p>basically there's 3 more entries before each supertrait other than the first one</p>\n</blockquote>\n<p>what do you mean?</p>",
        "id": 163210957,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555091098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<blockquote>\n<p>Since we don't have that default in the context of trait objects, it makes no sense to suppress it (particularly since it would be an error).</p>\n</blockquote>\n<p>It sounds like you are saying that <code>dyn ?Sized</code> should still be an error, right?</p>",
        "id": 163211094,
        "sender_full_name": "centril",
        "timestamp": 1555091180
    },
    {
        "content": "<p>I would make it an error, yes. Or at least I see no reason to accept it, though I guess it's also not <em>harmful</em> to do so.</p>",
        "id": 163211139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091224
    },
    {
        "content": "<p>like, if you have traits <code>Sup1 { a, b }</code>, <code>Sup2 { c, d }</code> and <code>Sub: Sup1 + Sup2 { e, f }</code> (those are methods)</p>",
        "id": 163211160,
        "sender_full_name": "eddyb",
        "timestamp": 1555091246
    },
    {
        "content": "<p>right now the vtable (ignoring the first 3) is <code>a b c d e f</code></p>",
        "id": 163211180,
        "sender_full_name": "eddyb",
        "timestamp": 1555091261
    },
    {
        "content": "<blockquote>\n<p>maybe let's dig into this?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> thinking more about it, I don't really see that there would be a problem -- if you had each vtable having pointer to the parent vtables, then you'd just have a cycle amongst them, for example.</p>",
        "id": 163211271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091315
    },
    {
        "content": "<p>I'm saying it becomes <code>a b D S A c d e f</code></p>",
        "id": 163211282,
        "sender_full_name": "eddyb",
        "timestamp": 1555091321
    },
    {
        "content": "<p>I've not been closely following what <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> is suggesting, it sounds maybe like they're suggesting an alternative approach in which you adjust the pointer for methods to the right offset (which I think implies we have to duplicate the \"magic 3\" fields)</p>",
        "id": 163211316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091348
    },
    {
        "content": "<p>with the full vtable being <code>D S A a b D S A c d e f</code> (while today it's <code>D S A a b c d e f</code>)</p>",
        "id": 163211317,
        "sender_full_name": "eddyb",
        "timestamp": 1555091351
    },
    {
        "content": "<blockquote>\n<p>I would make it an error, yes. Or at least I see no reason to accept it, though I guess it's also not <em>harmful</em> to do so.</p>\n</blockquote>\n<p>annoying thing is that maybe bounds are lost by the time we get to typeck</p>",
        "id": 163211329,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555091363
    },
    {
        "content": "<p>yeah ofc you need to duplicate them</p>",
        "id": 163211332,
        "sender_full_name": "eddyb",
        "timestamp": 1555091364
    },
    {
        "content": "<p>wait did everyone discuss something else?</p>",
        "id": 163211336,
        "sender_full_name": "eddyb",
        "timestamp": 1555091373
    },
    {
        "content": "<p>I don't think this \"embedding\" approach works as well for cyclic relations</p>",
        "id": 163211341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091376
    },
    {
        "content": "<p>/me pretends to have been paying attention</p>",
        "id": 163211347,
        "sender_full_name": "eddyb",
        "timestamp": 1555091381
    },
    {
        "content": "<p>No, I said there are two ways, and that is one of them</p>",
        "id": 163211350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091384
    },
    {
        "content": "<p>the other way would be to have the vtables embed pointers to the other vtables</p>",
        "id": 163211358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091392
    },
    {
        "content": "<p>I think this is the one we can trivially do today</p>",
        "id": 163211359,
        "sender_full_name": "eddyb",
        "timestamp": 1555091394
    },
    {
        "content": "<p>and it's not much of a perf loss</p>",
        "id": 163211370,
        "sender_full_name": "eddyb",
        "timestamp": 1555091401
    },
    {
        "content": "<p>(if at all)</p>",
        "id": 163211431,
        "sender_full_name": "eddyb",
        "timestamp": 1555091409
    },
    {
        "content": "<p>neither has perf loss</p>",
        "id": 163211432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091410
    },
    {
        "content": "<p>but I'm in favor of the one with less work</p>",
        "id": 163211441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091414
    },
    {
        "content": "<p>embedding pointers means virtual calls are more expensive</p>",
        "id": 163211457,
        "sender_full_name": "eddyb",
        "timestamp": 1555091431
    },
    {
        "content": "<p>I mean what I imagined more precisely is that the vtable for <code>Foo</code> would embed all the methods of <code>Foo</code> and its supertraits;</p>",
        "id": 163211460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091435
    },
    {
        "content": "<p>but <em>also</em> pointers to the vtables of the supertraits</p>",
        "id": 163211470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091442
    },
    {
        "content": "<p>oh that sounds silly though?</p>",
        "id": 163211475,
        "sender_full_name": "eddyb",
        "timestamp": 1555091445
    },
    {
        "content": "<p>why?</p>",
        "id": 163211478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091449
    },
    {
        "content": "<p>it supports cycles, among other things :)</p>",
        "id": 163211484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091455
    },
    {
        "content": "<p>you're duplicating more. and do we have <em>any</em> plans for cycles?</p>",
        "id": 163211499,
        "sender_full_name": "eddyb",
        "timestamp": 1555091464
    },
    {
        "content": "<p>you're not duplicating more</p>",
        "id": 163211511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091471
    },
    {
        "content": "<p>I mean you have to duplicate 3 fields per supertrait</p>",
        "id": 163211518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091477
    },
    {
        "content": "<p>I am duplicating 1</p>",
        "id": 163211521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091481
    },
    {
        "content": "<p>er, adding 1</p>",
        "id": 163211524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> why is the second D S A before <code>c d</code> and not <code>e f</code>?</p>",
        "id": 163211530,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555091493
    },
    {
        "content": "<p>and anyway come on, it's vtables</p>",
        "id": 163211532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091493
    },
    {
        "content": "<p>but you have 3 + methods elsewhere</p>",
        "id": 163211535,
        "sender_full_name": "eddyb",
        "timestamp": 1555091496
    },
    {
        "content": "<p>why*</p>",
        "id": 163211539,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555091501
    },
    {
        "content": "<p>so e.g. for <code>trait Foo: Bar + Baz</code>, you would be adding 6 fields to the vtable for <code>Foo</code></p>",
        "id": 163211629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> because all 3 traits have the prefix</p>",
        "id": 163211632,
        "sender_full_name": "eddyb",
        "timestamp": 1555091542
    },
    {
        "content": "<p>I would add 2</p>",
        "id": 163211636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091545
    },
    {
        "content": "<p>in both cases I imagine we'll still need to generate vtables for <code>Bar</code> and <code>Baz</code></p>",
        "id": 163211653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091561
    },
    {
        "content": "<p>though you could imagine not doing so</p>",
        "id": 163211658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091566
    },
    {
        "content": "<p>but it'd be hard across crates etc</p>",
        "id": 163211662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> <code>Sub</code> shares it with <code>Sup1</code></p>",
        "id": 163211686,
        "sender_full_name": "eddyb",
        "timestamp": 1555091593
    },
    {
        "content": "<p>(what am I missing?)</p>",
        "id": 163211688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555091597
    },
    {
        "content": "<p>this means with my version, single-inheritance is zero-cost :P</p>",
        "id": 163211694,
        "sender_full_name": "eddyb",
        "timestamp": 1555091604
    },
    {
        "content": "<p>cross-crate reuse has been solved by mw :P</p>",
        "id": 163211711,
        "sender_full_name": "eddyb",
        "timestamp": 1555091616
    },
    {
        "content": "<p>we have infra in the compiler to reuse any monomorphization downstream</p>",
        "id": 163211731,
        "sender_full_name": "eddyb",
        "timestamp": 1555091629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I don't get it... a b c d e f are all separate methods right? so why would e f apply to Sup2?</p>",
        "id": 163211869,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555091704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you never coerce <code>P&lt;T&gt;</code> to either <code>P&lt;Sup1&gt;</code> or <code>P&lt;Sup2&gt;</code> directly, then you don't even need <code>T as Sup1</code> or <code>T as Sup2</code> vtables</p>",
        "id": 163211903,
        "sender_full_name": "eddyb",
        "timestamp": 1555091730
    },
    {
        "content": "<p>you use 17 x usize, I use 12 x usize</p>",
        "id": 163211979,
        "sender_full_name": "eddyb",
        "timestamp": 1555091763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ugh I tried to keep it a tiny example. basically the nesting is like this:</p>\n<div class=\"codehilite\"><pre><span></span>((D S A a b) (D S A c d) e f)\n</pre></div>",
        "id": 163212057,
        "sender_full_name": "eddyb",
        "timestamp": 1555091827
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 163212061,
        "sender_full_name": "eddyb",
        "timestamp": 1555091832
    },
    {
        "content": "<p><code>Sub</code> and <code>Sup1</code> share the first <code>D S A</code>, while <code>Sup2</code> needs its own</p>",
        "id": 163212195,
        "sender_full_name": "eddyb",
        "timestamp": 1555091932
    },
    {
        "content": "<p>oh sorry</p>",
        "id": 163212318,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555092011
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> if you never coerce <code>P&lt;T&gt;</code> to either <code>P&lt;Sup1&gt;</code> or <code>P&lt;Sup2&gt;</code> directly, then you don't even need <code>T as Sup1</code> or <code>T as Sup2</code> vtables</p>\n</blockquote>\n<p>I don't know how you could know that</p>",
        "id": 163212321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092015
    },
    {
        "content": "<p>got my associativity all wrong haha</p>",
        "id": 163212326,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555092018
    },
    {
        "content": "<p>but also I don't care to argue about this</p>",
        "id": 163212335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092023
    },
    {
        "content": "<p>do whaever</p>",
        "id": 163212338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092025
    },
    {
        "content": "<p>I also don't care how man words are in m vtables</p>",
        "id": 163212343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092029
    },
    {
        "content": "<p>no, I mean</p>",
        "id": 163212345,
        "sender_full_name": "eddyb",
        "timestamp": 1555092030
    },
    {
        "content": "<p>we build vtables on demand</p>",
        "id": 163212350,
        "sender_full_name": "eddyb",
        "timestamp": 1555092035
    },
    {
        "content": "<p>so yeah, makes sense now eddyb</p>",
        "id": 163212355,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555092042
    },
    {
        "content": "<p>so we would only need all 3 if there were unsizing coercions</p>",
        "id": 163212366,
        "sender_full_name": "eddyb",
        "timestamp": 1555092054
    },
    {
        "content": "<p>I mean you leave the pointers to supertrait vtables as NULL, or not include them</p>",
        "id": 163212371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092061
    },
    {
        "content": "<p>but I still don't think you can know that</p>",
        "id": 163212393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092072
    },
    {
        "content": "<p>i.e., you have to include all the data for a potential upcast</p>",
        "id": 163212401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092078
    },
    {
        "content": "<p>no, that's not what I was referring to</p>",
        "id": 163212405,
        "sender_full_name": "eddyb",
        "timestamp": 1555092083
    },
    {
        "content": "<p>because you could return the trait object to something outside of the crate</p>",
        "id": 163212408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092085
    },
    {
        "content": "<p>and it might do the upcast</p>",
        "id": 163212411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092088
    },
    {
        "content": "<p>if you don't use pointers, you don't need to create those vtables</p>",
        "id": 163212416,
        "sender_full_name": "eddyb",
        "timestamp": 1555092094
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 163212421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092100
    },
    {
        "content": "<p>unless there is a direct cast</p>",
        "id": 163212422,
        "sender_full_name": "eddyb",
        "timestamp": 1555092102
    },
    {
        "content": "<p>sure, ok</p>",
        "id": 163212426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092104
    },
    {
        "content": "<p>/me shrugs</p>",
        "id": 163212428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092108
    },
    {
        "content": "<p>whoop-dee-doo :P</p>",
        "id": 163212431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092111
    },
    {
        "content": "<p>offsetting is also cheaper</p>",
        "id": 163212435,
        "sender_full_name": "eddyb",
        "timestamp": 1555092116
    },
    {
        "content": "<p>yes, that is true</p>",
        "id": 163212442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092122
    },
    {
        "content": "<p>is there a way to handle cycles with offsetting?</p>",
        "id": 163212492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092128
    },
    {
        "content": "<p>and I'd just make cyclic traits not object-safe</p>",
        "id": 163212502,
        "sender_full_name": "eddyb",
        "timestamp": 1555092134
    },
    {
        "content": "<p>why?</p>",
        "id": 163212509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092139
    },
    {
        "content": "<p>just so we can shave off a few cycles?</p>",
        "id": 163212518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092146
    },
    {
        "content": "<p>because they're an abomination :P?</p>",
        "id": 163212522,
        "sender_full_name": "eddyb",
        "timestamp": 1555092148
    },
    {
        "content": "<p>and they complicate everything</p>",
        "id": 163212540,
        "sender_full_name": "eddyb",
        "timestamp": 1555092157
    },
    {
        "content": "<p>I mean right now it's an error anyway, so it's fine</p>",
        "id": 163212541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092157
    },
    {
        "content": "<p>so we can decide this later</p>",
        "id": 163212550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092165
    },
    {
        "content": "<p>but yeah you can do it with offsets</p>",
        "id": 163212554,
        "sender_full_name": "eddyb",
        "timestamp": 1555092169
    },
    {
        "content": "<p>maybe I'm missing something, but it's not very clear how you would do that</p>",
        "id": 163212562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092181
    },
    {
        "content": "<p>I guess you lay out the whole cycle as a unit and you know you can do some negative offsets or something</p>",
        "id": 163212594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092205
    },
    {
        "content": "<p>I mean, it's physically possible, it just requires a... yeah that</p>",
        "id": 163212604,
        "sender_full_name": "eddyb",
        "timestamp": 1555092213
    },
    {
        "content": "<p>yeah, ok</p>",
        "id": 163212609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092218
    },
    {
        "content": "<p>at that point there is no reason to offset at all</p>",
        "id": 163212615,
        "sender_full_name": "eddyb",
        "timestamp": 1555092225
    },
    {
        "content": "<p>anyway, as I said, offsets seems fine to me, particularly since I agree it's probably easier</p>",
        "id": 163212621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092231
    },
    {
        "content": "<p>all traits in the cyclic group (which I can't remember the proper word for)</p>",
        "id": 163212631,
        "sender_full_name": "eddyb",
        "timestamp": 1555092236
    },
    {
        "content": "<p>SCC, yes, ok</p>",
        "id": 163212640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092241
    },
    {
        "content": "<p>would just use the same vtable</p>",
        "id": 163212651,
        "sender_full_name": "eddyb",
        "timestamp": 1555092245
    },
    {
        "content": "<p>that's a good point :)</p>",
        "id": 163212676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092246
    },
    {
        "content": "<p><em>they are one trait</em></p>",
        "id": 163212703,
        "sender_full_name": "eddyb",
        "timestamp": 1555092259
    },
    {
        "content": "<p>(that's actually kind of neat) =)</p>",
        "id": 163212704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092259
    },
    {
        "content": "<p>in any case, can you not have special logic for traits with cycles if you need to?</p>",
        "id": 163212709,
        "sender_full_name": "centril",
        "timestamp": 1555092264
    },
    {
        "content": "<p>this is another reason cycles are silly</p>",
        "id": 163212715,
        "sender_full_name": "eddyb",
        "timestamp": 1555092271
    },
    {
        "content": "<p>I don't agree it's silly but we'll leave it</p>",
        "id": 163212723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092277
    },
    {
        "content": "<p>mutual cyclical things are one cyclical thing</p>",
        "id": 163212737,
        "sender_full_name": "eddyb",
        "timestamp": 1555092288
    },
    {
        "content": "<p>(I think it's useful to isolate out independent \"views\" on the same set of methods)</p>",
        "id": 163212751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092298
    },
    {
        "content": "<p>but it's not a big thing, I agree they are logically one trait</p>",
        "id": 163212766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092309
    },
    {
        "content": "<p>soo....</p>",
        "id": 163212774,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555092320
    },
    {
        "content": "<p>I would hate it if we couldn't find a nicer way to do that than mutually cyclical traits :P</p>",
        "id": 163212787,
        "sender_full_name": "eddyb",
        "timestamp": 1555092331
    },
    {
        "content": "<p>anyway I gotta run y'all but seems like we are underway, I think it'd be a good idea to step back and write out the actual steps</p>",
        "id": 163212794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092339
    },
    {
        "content": "<p>and who will be doing them:)</p>",
        "id": 163212797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555092342
    },
    {
        "content": "<p>we probably have rough implementation notes from <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> 's messages here already. would you mind filtering them out into a short post though, just for a) the record (and whoever writes the RFC), b) my sanity? :-)</p>",
        "id": 163212808,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555092360
    },
    {
        "content": "<p>yep, thanks <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 163212860,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555092373
    },
    {
        "content": "<p>So we have:<br>\n1. implementation -- <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> <br>\n2. tests -- ??<br>\n3. rfc -- ??</p>",
        "id": 163212872,
        "sender_full_name": "centril",
        "timestamp": 1555092388
    },
    {
        "content": "<p>2. tests -- centril<br>\n3. rfc -- niko?</p>",
        "id": 163212898,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555092420
    },
    {
        "content": "<p>;-)</p>",
        "id": 163212902,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555092423
    },
    {
        "content": "<p>I can probably write a bit on the rfc</p>",
        "id": 163212936,
        "sender_full_name": "centril",
        "timestamp": 1555092446
    },
    {
        "content": "<p>you might want to get <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> in on this</p>",
        "id": 163212947,
        "sender_full_name": "eddyb",
        "timestamp": 1555092464
    },
    {
        "content": "<p>I'll leave the representation bits to someone else, but those are not specified anyways so we can be light on this</p>",
        "id": 163212949,
        "sender_full_name": "centril",
        "timestamp": 1555092468
    },
    {
        "content": "<p>wrt miri and layout of vtables</p>",
        "id": 163212955,
        "sender_full_name": "eddyb",
        "timestamp": 1555092474
    },
    {
        "content": "<p>like, actually building them. I hope that code has been deduplicated already</p>",
        "id": 163213009,
        "sender_full_name": "eddyb",
        "timestamp": 1555092492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  iirc  <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  made a PR re. <code>dyn FnOnce</code> so maybe they are familiar as well</p>",
        "id": 163213026,
        "sender_full_name": "centril",
        "timestamp": 1555092520
    },
    {
        "content": "<p>not related I don't think</p>",
        "id": 163213057,
        "sender_full_name": "eddyb",
        "timestamp": 1555092552
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is indeed the other person working on miri :P</p>",
        "id": 163213066,
        "sender_full_name": "eddyb",
        "timestamp": 1555092569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  anyway does the above sound okay re notes?</p>",
        "id": 163213389,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555092809
    },
    {
        "content": "<p>replace the <code>.sum()</code> with <code>.fold(None, |i, n| Some(i.map_or(0, |i| i + 3) + n)).unwrap_or(0)</code> in <a href=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L3032\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L3032\">https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L3032</a></p>",
        "id": 163213538,
        "sender_full_name": "eddyb",
        "timestamp": 1555092905
    },
    {
        "content": "<p>that was the main thing of note :P</p>",
        "id": 163213552,
        "sender_full_name": "eddyb",
        "timestamp": 1555092911
    },
    {
        "content": "<p>and, yeah, look at <code>ObjectCandidate</code> / <code>VtableObject</code> (it's for <code>dyn SubTrait: SuperTrait</code>)</p>",
        "id": 163213662,
        "sender_full_name": "eddyb",
        "timestamp": 1555092973
    },
    {
        "content": "<p>oh, actually, it's not just for method calls, my bad</p>",
        "id": 163213668,
        "sender_full_name": "eddyb",
        "timestamp": 1555092980
    },
    {
        "content": "<p>yeah so <code>dyn SubTrait -&gt; dyn SuperTrait</code> can just add an <code>ObjectCandidate</code></p>",
        "id": 163213726,
        "sender_full_name": "eddyb",
        "timestamp": 1555093029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> okay thanks. what about MIR?</p>",
        "id": 163213825,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555093083
    },
    {
        "content": "<p>what about it?</p>",
        "id": 163213839,
        "sender_full_name": "eddyb",
        "timestamp": 1555093091
    },
    {
        "content": "<p>nothing to be done there?</p>",
        "id": 163213844,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555093098
    },
    {
        "content": "<p>not that I can think of</p>",
        "id": 163213880,
        "sender_full_name": "eddyb",
        "timestamp": 1555093122
    },
    {
        "content": "<p>this is a <code>dyn SubTrait: Unsize&lt;dyn SuperTrait&gt;</code> coercion</p>",
        "id": 163213903,
        "sender_full_name": "eddyb",
        "timestamp": 1555093143
    },
    {
        "content": "<p>okay... just miri stuff, and that can be done by oli later maybe?</p>",
        "id": 163213912,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555093146
    },
    {
        "content": "<p><code>dyn Foo + Send: Unsize&lt;dyn Foo&gt;</code> exists today</p>",
        "id": 163213931,
        "sender_full_name": "eddyb",
        "timestamp": 1555093161
    },
    {
        "content": "<p>it's allowed here, specifically <a href=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L2183-L2185\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L2183-L2185\">https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L2183-L2185</a></p>",
        "id": 163213945,
        "sender_full_name": "eddyb",
        "timestamp": 1555093176
    },
    {
        "content": "<p>the miri stuff is creating the vtable :P</p>",
        "id": 163213956,
        "sender_full_name": "eddyb",
        "timestamp": 1555093187
    },
    {
        "content": "<p>but basically, if you remove this condition <a href=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L2182\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L2182\">https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L2182</a></p>",
        "id": 163214052,
        "sender_full_name": "eddyb",
        "timestamp": 1555093257
    },
    {
        "content": "<p>then here the two traits could differ: <a href=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L3299\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L3299\">https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/librustc/traits/select.rs#L3299</a></p>",
        "id": 163214077,
        "sender_full_name": "eddyb",
        "timestamp": 1555093273
    },
    {
        "content": "<p>and you can <code>nested.push(...)</code> a <code>dyn A: B</code> obligation</p>",
        "id": 163214117,
        "sender_full_name": "eddyb",
        "timestamp": 1555093311
    },
    {
        "content": "<p>okay...</p>",
        "id": 163214181,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555093330
    },
    {
        "content": "<p>I don't get what I have to do with miri though.</p>",
        "id": 163214203,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555093353
    },
    {
        "content": "<p>you can ask someone who knows trait stuff about that, or just guess from looking around (I'd be just doing the latter if you wanted me to help)</p>",
        "id": 163214209,
        "sender_full_name": "eddyb",
        "timestamp": 1555093358
    },
    {
        "content": "<p>did you refer to that before?</p>",
        "id": 163214211,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555093361
    },
    {
        "content": "<p>yeah, vtables</p>",
        "id": 163214219,
        "sender_full_name": "eddyb",
        "timestamp": 1555093367
    },
    {
        "content": "<p>miri builds the actual vtable bytes, so to say</p>",
        "id": 163214229,
        "sender_full_name": "eddyb",
        "timestamp": 1555093379
    },
    {
        "content": "<p><code>ObjectCandidate</code> and <code>VtableObject</code> are miri? didn't know that ha</p>",
        "id": 163214249,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555093388
    },
    {
        "content": "<p>I see</p>",
        "id": 163214254,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555093391
    },
    {
        "content": "<p>no</p>",
        "id": 163214256,
        "sender_full_name": "eddyb",
        "timestamp": 1555093393
    },
    {
        "content": "<p>those are traits::select</p>",
        "id": 163214268,
        "sender_full_name": "eddyb",
        "timestamp": 1555093402
    },
    {
        "content": "<p>nevermind, I'm wrong <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_ssa/meth.rs#L69\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_ssa/meth.rs#L69\">https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_ssa/meth.rs#L69</a></p>",
        "id": 163214354,
        "sender_full_name": "eddyb",
        "timestamp": 1555093461
    },
    {
        "content": "<p>this was supposed to be deduplicated into miri ages ago :(</p>",
        "id": 163214363,
        "sender_full_name": "eddyb",
        "timestamp": 1555093473
    },
    {
        "content": "<p>I guess it hasn't happened yet</p>",
        "id": 163214368,
        "sender_full_name": "eddyb",
        "timestamp": 1555093479
    },
    {
        "content": "<p>so basically here you just need to inject the 3 D S A entries before the actual methods <a href=\"https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src/librustc/traits/mod.rs#L991\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src/librustc/traits/mod.rs#L991\">https://github.com/rust-lang/rust/blob/2226c09699a96520238e162777f44504f4a0a1a7/src/librustc/traits/mod.rs#L991</a></p>",
        "id": 163214494,
        "sender_full_name": "eddyb",
        "timestamp": 1555093568
    },
    {
        "content": "<p>(by replacing the <code>Option</code> with an <code>enum</code> indicating what data is in that entry)</p>",
        "id": 163214530,
        "sender_full_name": "eddyb",
        "timestamp": 1555093596
    },
    {
        "content": "<p>alternatively, change <code>&amp;'tcx [Option&lt;(DefId, SubstsRef&lt;'tcx&gt;)&gt;]</code> in the return to <code>&amp;'tcx [&amp;'tcx [Option&lt;(DefId, SubstsRef&lt;'tcx&gt;)&gt;]]</code> to make it clear how the methods are split into traits :P</p>",
        "id": 163214590,
        "sender_full_name": "eddyb",
        "timestamp": 1555093635
    },
    {
        "content": "<p><code>(DefId, SubstsRef&lt;'tcx&gt;)</code> also sounds like it should be an <code>Instance</code>, heh</p>",
        "id": 163214611,
        "sender_full_name": "eddyb",
        "timestamp": 1555093655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> okay, I think that should be reasonably clear now. I'll have a look soon. thanks! (and I'll let you bug Oli or Ralf about deduplicating that code heh)</p>",
        "id": 163214783,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555093789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> </p>\n<blockquote>\n<p>like, actually building them. I hope that code has been deduplicated already</p>\n</blockquote>\n<p>not that I know of</p>",
        "id": 163223176,
        "sender_full_name": "RalfJ",
        "timestamp": 1555100291
    },
    {
        "content": "<blockquote>\n<p>like, actually building them. I hope that code has been deduplicated already</p>\n</blockquote>\n<p>it has not</p>",
        "id": 163229820,
        "sender_full_name": "oli",
        "timestamp": 1555105796
    },
    {
        "content": "<p>oh lol</p>",
        "id": 163229825,
        "sender_full_name": "oli",
        "timestamp": 1555105801
    },
    {
        "content": "<p>I should've scrolled down</p>",
        "id": 163229878,
        "sender_full_name": "oli",
        "timestamp": 1555105807
    },
    {
        "content": "<p>we can try dedupicating, but we need to bench that, because in many cases it might be more effort since we're creating miri allocations just to write them back to llvm</p>",
        "id": 163229942,
        "sender_full_name": "oli",
        "timestamp": 1555105895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> worst case we replace the <code>vtable_methods</code> query with one that produces a list of vtable entries :P</p>",
        "id": 163266297,
        "sender_full_name": "eddyb",
        "timestamp": 1555163418
    },
    {
        "content": "<p>but really, if a constant does an unsizing, we already use the miri vtable instead of the LLVM one...</p>",
        "id": 163266302,
        "sender_full_name": "eddyb",
        "timestamp": 1555163458
    },
    {
        "content": "<p>so I don't see any point in not using the miri one</p>",
        "id": 163266314,
        "sender_full_name": "eddyb",
        "timestamp": 1555163468
    },
    {
        "content": "<blockquote>\n<p><code>Sub</code> and <code>Sup1</code> share the first <code>D S A</code>, while <code>Sup2</code> needs its own</p>\n</blockquote>\n<p>why can they share  the first? <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 164938205,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1557093137
    },
    {
        "content": "<p>uhhh</p>",
        "id": 164975121,
        "sender_full_name": "eddyb",
        "timestamp": 1557143376
    },
    {
        "content": "<p>my point is that you can have <code>Sub</code> share a prefix with with <code>Sup1</code> or <code>Sup2</code>, because you can start <code>Sub</code>'s vtable with <code>D S A</code> followed by their respective methods</p>",
        "id": 164975541,
        "sender_full_name": "eddyb",
        "timestamp": 1557143764
    },
    {
        "content": "<p>but you can't have both <code>Sup1</code> and <code>Sup2</code> share the same <code>D S A</code></p>",
        "id": 164975550,
        "sender_full_name": "eddyb",
        "timestamp": 1557143782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> okay, I guess I'll see <em>why</em> that's the case as I proceed... I thought that D S A would  need to be different for <code>Sub</code> and <code>Sup1</code> because fundamentally they're different types, but...</p>",
        "id": 165030483,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1557187661
    },
    {
        "content": "<p>OH!</p>",
        "id": 165030996,
        "sender_full_name": "eddyb",
        "timestamp": 1557188326
    },
    {
        "content": "<p>that's where the confusion was</p>",
        "id": 165031002,
        "sender_full_name": "eddyb",
        "timestamp": 1557188335
    },
    {
        "content": "<p><code>Sub</code> and <code>Sup1</code> are traits</p>",
        "id": 165031006,
        "sender_full_name": "eddyb",
        "timestamp": 1557188341
    },
    {
        "content": "<p>the vtable is for a given type that implements those traits, and D/S/A are properties of that type that are always the same no matter what trait you're talking about</p>",
        "id": 165031035,
        "sender_full_name": "eddyb",
        "timestamp": 1557188388
    },
    {
        "content": "<p>like, it's almost literally <code>(ptr::drop_in_place::&lt;T&gt;, mem::size_of::&lt;T&gt;(), mem::align_of::&lt;T&gt;())</code></p>",
        "id": 165031098,
        "sender_full_name": "eddyb",
        "timestamp": 1557188448
    },
    {
        "content": "<p>they're followed by, say, <code>&lt;T as Sup1&gt;::whatever_method_name</code> function pointers, but the D S A prefix is always the same for a given <code>T</code></p>",
        "id": 165031115,
        "sender_full_name": "eddyb",
        "timestamp": 1557188490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ohh, I see (I think). so the second D S A is just a duplicate of the first in the vtable (in your above example)?</p>",
        "id": 165031598,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1557189048
    },
    {
        "content": "<p>yupp</p>",
        "id": 165031602,
        "sender_full_name": "eddyb",
        "timestamp": 1557189062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> thanks. all clear now.</p>",
        "id": 165031624,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1557189075
    },
    {
        "content": "<blockquote>\n<p>alternatively, change <code>&amp;'tcx [Option&lt;(DefId, SubstsRef&lt;'tcx&gt;)&gt;]</code> in the return to <code>&amp;'tcx [&amp;'tcx [Option&lt;(DefId, SubstsRef&lt;'tcx&gt;)&gt;]]</code> to make it clear how the methods are split into traits :P</p>\n</blockquote>\n<p>is this your preferred alternative, @eddyb? that is, <code>&amp;'tcx [Instance]</code>?</p>",
        "id": 165031829,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1557189362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> is this how I registeer the obligation in <code>confirm_builtin_unsize_candidate</code>?</p>",
        "id": 165714203,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1557926975
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"c1\">// Register an obligation for `TraitA: TraitB`.</span>\n<span class=\"w\">                </span><span class=\"n\">nested</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">data_b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">d</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">predicate_to_obligation</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">with_self_ty</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source_ty</span><span class=\"p\">))),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165714213,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1557926982
    },
    {
        "content": "<p>sorry, I gtg, but I'll take a look at it later</p>",
        "id": 165717833,
        "sender_full_name": "eddyb",
        "timestamp": 1557929589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> no prob</p>",
        "id": 165727847,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1557936548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> that should read <code>dyn TraitA: TraitB</code> BTW. I can  paste the  whole file  if you like, but I think that's the relevant bit</p>",
        "id": 165746973,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1557948918
    },
    {
        "content": "<p>I think that's correct</p>",
        "id": 165783279,
        "sender_full_name": "eddyb",
        "timestamp": 1557987679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> okay thanks. I think something went wrong with my staged build, because it (kind of) worked now. I'm working on the MIR part now...</p>",
        "id": 165817738,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558018623
    },
    {
        "content": "<p>looks <em>reasonably</em> straightforward.</p>",
        "id": 165819698,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558019874
    },
    {
        "content": "<p>unless I've misunderstood something</p>",
        "id": 165819704,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558019880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> might be nice to provide <code>Read</code> and <code>Write</code> impls for <code>Cursor&lt;mir::Memory&gt;</code> or something no?</p>",
        "id": 165851741,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558043039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> noticed the PR I opened yet?</p>",
        "id": 165985341,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558203647
    },
    {
        "content": "<p>nope, I'm back at the office today but idk how much time I'll have to review it</p>",
        "id": 166080932,
        "sender_full_name": "eddyb",
        "timestamp": 1558355746
    },
    {
        "content": "<p>as for miri things, talk to <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> (<code>Read</code>/<code>Write</code> don't seem that fitting, especially without the ability to change the error type from <code>io::Error</code>)</p>",
        "id": 166081009,
        "sender_full_name": "eddyb",
        "timestamp": 1558355797
    },
    {
        "content": "<p>I'm not sure what <code>mir::Memory</code> is, but if you mean <code>mir::interpret::Memory</code>, I have no idea what <code>Read</code> and <code>Write</code> would even do on a <code>Memory</code></p>",
        "id": 166086697,
        "sender_full_name": "oli",
        "timestamp": 1558360448
    },
    {
        "content": "<p>don't worry, it was a silly idea</p>",
        "id": 166092835,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558365067
    },
    {
        "content": "<p>I took another approach, which you seemed to have liked in the end.</p>",
        "id": 166092855,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558365090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> and no worries. when you do have time, feedback on the bootstrapping error I posted in the PR  (to do with coercion) is the most important thing.</p>",
        "id": 166092928,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558365133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so, this is the problematic thing right now: <a href=\"https://github.com/rust-lang/rust/pull/60900#issuecomment-493593431\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60900#issuecomment-493593431\">https://github.com/rust-lang/rust/pull/60900#issuecomment-493593431</a></p>",
        "id": 169716196,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562339621
    },
    {
        "content": "<p>I see</p>",
        "id": 169716265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562339683
    },
    {
        "content": "<p>presumably due to some changes to coercion</p>",
        "id": 169716267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562339686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this seems to be the relevant bit of code: <a href=\"https://github.com/rust-lang/rust/pull/60900/commits/0dbc2adb7e7d4d078a47ad1cf554d5bc95fc50a9#r285305829\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60900/commits/0dbc2adb7e7d4d078a47ad1cf554d5bc95fc50a9#r285305829\">https://github.com/rust-lang/rust/pull/60900/commits/0dbc2adb7e7d4d078a47ad1cf554d5bc95fc50a9#r285305829</a></p>",
        "id": 169716303,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562339732
    },
    {
        "content": "<p>and in fact, whether or not I comment out the old bit of inference code you wrote, the error still occurs</p>",
        "id": 169716408,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562339797
    },
    {
        "content": "<p>Well, I think also that this change feels too loose. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gd\">- data_a.principal_def_id() == data_b.principal_def_id()</span>\n</pre></div>",
        "id": 169716410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562339798
    },
    {
        "content": "<p>though perhaps not at fault</p>",
        "id": 169716421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562339814
    },
    {
        "content": "<p>so it's caused by the new code probably, even though it seems right (eddyb thought so too)</p>",
        "id": 169716423,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562339818
    },
    {
        "content": "<p>it may be. I did that on eddyb's suggestion too. not that I blame him, because it made sense to me too. :-)</p>",
        "id": 169716447,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562339837
    },
    {
        "content": "<p>the relevant new code I think is the bit beginning with <code>// Register an obligation for `dyn TraitA: TraitB`.</code></p>",
        "id": 169716487,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562339872
    },
    {
        "content": "<p>OK, yeah, I'm looking. Might be the easiest way to debug is to build and test.</p>",
        "id": 169716703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562340014
    },
    {
        "content": "<p>yep</p>",
        "id": 169716710,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562340023
    },
    {
        "content": "<p>I have a build here, but you'll probably want your own</p>",
        "id": 169716723,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562340046
    },
    {
        "content": "<p>indeed, always easiest in the home environment</p>",
        "id": 169716848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562340149
    },
    {
        "content": "<p>So, should I leave both things to you in your own time now? :-)</p>",
        "id": 169716853,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562340174
    },
    {
        "content": "<p>and you can just comment on the PRs or message me here</p>",
        "id": 169716864,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562340187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 169716876,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562340202
    },
    {
        "content": "<p>OK, so I've kicked off a build. I think let's do this: I will add to my calendar some time to review <a href=\"https://github.com/rust-lang/rust/issues/61812\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61812\">#61812</a> today, and also <a href=\"https://github.com/rust-lang/rust/issues/60900\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60900\">#60900</a> once  can observe the problem</p>",
        "id": 169716879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562340206
    },
    {
        "content": "<p>prob in an hour or so, since I have to take that other call that I moved :)</p>",
        "id": 169716903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562340230
    },
    {
        "content": "<p>I'll also try to review <a href=\"https://github.com/rust-lang/rust/issues/61812\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61812\">#61812</a>...</p>",
        "id": 169716916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562340242
    },
    {
        "content": "<p>but that's not related to you :)</p>",
        "id": 169716959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562340246
    },
    {
        "content": "<p>yeah no worries Niko</p>",
        "id": 169716960,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562340247
    },
    {
        "content": "<p>heh</p>",
        "id": 169716963,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562340250
    },
    {
        "content": "<p>when are you taking your holiday by the way?</p>",
        "id": 169716972,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562340256
    },
    {
        "content": "<p>it starts July 15</p>",
        "id": 169717037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562340321
    },
    {
        "content": "<p>Okay. Couple of weeks? Longer? Just curious, so I know not to pester you when you're enjoying your time off!</p>",
        "id": 169717061,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562340353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm confident we can get both these things sorted before then in any case. Maybe afterwards we could address impl-trait-in-bindings. (I know the intention was for you to compile the notes and musings scattered across various locations, but honestly maybe it makes more sense in terms of efficiency for me to hand over my existing work to you and me focus on other things, since you know exactly what needs to be done.)</p>",
        "id": 169717123,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562340406
    },
    {
        "content": "<p>For example, maybe I can work on multi-trait objects then if we can get trait upcasting through :-)</p>",
        "id": 169717764,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562340976
    },
    {
        "content": "<p>OK, <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>, so I see the problem with upcasts. The good news is that it's, I think, a pre-existing problem. Pretty unrelated to your diff, though I think it <em>is</em> caused by the change to insert more obligations on an upcast coercion than we used to.</p>",
        "id": 169724016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562347615
    },
    {
        "content": "<p>i.e., that makes us prove something we never had to prove before</p>",
        "id": 169724037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562347635
    },
    {
        "content": "<p>Here is a minimized example illustrating the problem (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a4379d24c52512644ab3fc0444ad2167\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a4379d24c52512644ab3fc0444ad2167\">playground</a>):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(optin_builtin_traits)]</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Comment this out makes the code compile:</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 169724144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562347756
    },
    {
        "content": "<p>In short, we get an ambiguity because <code>dyn Bar + Foo: Foo</code> holds in 2 different ways -- one via the impl, the other via the nature of object types.</p>",
        "id": 169724161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562347780
    },
    {
        "content": "<p>Also, and completely unrelated, I wish we had made it <code>dyn (Bar + Foo)</code>. The strange precedence of <code>dyn</code> and <code>impl</code> is convenient sometimes but man it reads odd to me. =)</p>",
        "id": 169724241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562347824
    },
    {
        "content": "<p>I think this is only really relevant because of a somewhat epic hack we are using to make \"dual mode\" thread-safety compiles. We could plausibly do that hack a different way and sidestep the problem. We could also handle this particular \"ambiguity\".</p>",
        "id": 169724364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562347986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I thought it was pre-existing too, indeed.</p>",
        "id": 169725111,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562348880
    },
    {
        "content": "<p>Yeah, I don't like that precedence either overmuch heh...</p>",
        "id": 169725157,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562348892
    },
    {
        "content": "<p>anyway, I see the problem now, thanks for explaining</p>",
        "id": 169725174,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562348925
    },
    {
        "content": "<p>what's your inclination when it comes to solving it?</p>",
        "id": 169725178,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562348938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> anyway much appreciated. if you could leave instructions here, I may be able to have a go at tackling it over the weekend... whichever approach you prefer.</p>",
        "id": 169725530,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562349325
    },
    {
        "content": "<blockquote>\n<p>what's your inclination when it comes to solving it?</p>\n</blockquote>\n<p>I'm debating this <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> =) there is also this soundness issue that I've been meaning to review that is totally related.</p>",
        "id": 169732926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562357218
    },
    {
        "content": "<p>One obvious thing would be to give precedence to object candidates, but that's a tricky question that has implications for type inference and I don't love it.</p>",
        "id": 169732966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562357276
    },
    {
        "content": "<p>Another would be to revise the coercion logic to add fewer obligations =) that would probably just sidestep the problem enough for now and leave it for another day (though we should file an issue)</p>",
        "id": 169733019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562357298
    },
    {
        "content": "<p>BTW <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> you should consider landing that \"cleanup commit\" separately</p>",
        "id": 169733025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562357312
    },
    {
        "content": "<p>i.e., in a separate PR</p>",
        "id": 169733032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562357318
    },
    {
        "content": "<p>ah well I guess we've been back and forth on this :P</p>",
        "id": 169733037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562357327
    },
    {
        "content": "<p>I'm only mentioning it because it was sort of annoying when trying to read the diffs, though having it at the beginning was a big help as  I Could do <code>git diff 12312414...</code> or whatever</p>",
        "id": 169733049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562357355
    },
    {
        "content": "<blockquote>\n<p>Another would be to revise the coercion logic to add fewer obligations =) that would probably just sidestep the problem enough for now and leave it for another day (though we should file an issue)</p>\n</blockquote>\n<p>this is probably the thing to do for now</p>",
        "id": 169733061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562357376
    },
    {
        "content": "<p>but I have to think what that means</p>",
        "id": 169733068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562357387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sure... I just thought those \"aggregated drive-by  changes\" (admittedly quite a few of them) were more likely to get merged as a separate commit in the same PR. :-)</p>",
        "id": 169742379,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562370817
    },
    {
        "content": "<p>anyway, I'll try to look at the coercion logic for now, thanks</p>",
        "id": 169742423,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562370855
    },
    {
        "content": "<blockquote>\n<p>In short, we get an ambiguity because <code>dyn Bar + Foo: Foo</code> holds in 2 different ways -- one via the impl, the other via the nature of object types.</p>\n</blockquote>\n<p>does it require that both hold right now? maybe we just want \"at least one\" to hold?</p>",
        "id": 169742432,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1562370893
    },
    {
        "content": "<blockquote>\n<p>I think this is only really relevant because of a somewhat epic hack we are using to make \"dual mode\" thread-safety compiles. We could plausibly do that hack a different way and sidestep the problem. We could also handle this particular \"ambiguity\".</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> is either of you aware of this \"epic hack\" / where it is / how we could tackle it differently to avoid this problem?</p>",
        "id": 172514134,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1565019839
    },
    {
        "content": "<p>I'm not sure, no</p>",
        "id": 172514304,
        "sender_full_name": "varkor",
        "timestamp": 1565019961
    },
    {
        "content": "<p>no prob</p>",
        "id": 172516208,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1565021388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> did you see my comment about my PR involving type-checking for ATB though? I thought maybe you'd be a good person to review. it's not too much to review, and Niko already partially reviewed and left notes how he wanted it (re)done... no great rush, but if you can look at it at some point this week, then great.</p>",
        "id": 172516321,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1565021465
    },
    {
        "content": "<p>I haven't checked GH properly yet today — I'll take a look later 👍</p>",
        "id": 172516356,
        "sender_full_name": "varkor",
        "timestamp": 1565021513
    },
    {
        "content": "<p>Cool, thanks.</p>",
        "id": 172516623,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1565021727
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span></p>",
        "id": 174252048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566927809
    },
    {
        "content": "<p>Hey Niko.</p>",
        "id": 174252055,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566927817
    },
    {
        "content": "<p>got a bit of time now then?</p>",
        "id": 174252061,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566927823
    },
    {
        "content": "<p>A bit, yeah</p>",
        "id": 174252068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566927828
    },
    {
        "content": "<p>So I guess this is still blocking you :)</p>",
        "id": 174252127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566927850
    },
    {
        "content": "<p>yeah, a bit...</p>",
        "id": 174252136,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566927864
    },
    {
        "content": "<p>I suppose it would be nice to decide which of your two suggested approaches to take</p>",
        "id": 174252149,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566927876
    },
    {
        "content": "<p>and what exactly I need to do</p>",
        "id": 174252154,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566927880
    },
    {
        "content": "<p>you went over them at a high level above.</p>",
        "id": 174252164,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566927887
    },
    {
        "content": "<p>Yeah I'm reviewing the code</p>",
        "id": 174252398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566928042
    },
    {
        "content": "<p>The epic hack I was referring to are these <a href=\"https://github.com/rust-lang/rust/blob/0396aace27eea97c3603e9683e921807dff2a314/src/librustc_data_structures/sync.rs#L54-L55\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0396aace27eea97c3603e9683e921807dff2a314/src/librustc_data_structures/sync.rs#L54-L55\">duplicate Send + Sync auto traits</a></p>",
        "id": 174252407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566928052
    },
    {
        "content": "<p>oh I see</p>",
        "id": 174252599,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566928198
    },
    {
        "content": "<p>hrmm</p>",
        "id": 174252658,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566928212
    },
    {
        "content": "<p>and they're needed why exactly?</p>",
        "id": 174252676,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566928224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 174253067,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566928475
    },
    {
        "content": "<p>well, they're used to \"cross-compile\" the compiler between thread-safe and not thread-safe</p>",
        "id": 174253486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566928809
    },
    {
        "content": "<p>the types always say <code>librustc_data_structures::sync::Send</code> and whatever</p>",
        "id": 174253507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566928827
    },
    {
        "content": "<p>when in thread-safe mode, that is the normal <code>Send</code></p>",
        "id": 174253519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566928833
    },
    {
        "content": "<p>but otherwise it's this \"no-op\" Send that is defined for all types</p>",
        "id": 174253536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566928846
    },
    {
        "content": "<p>the reason that <em>your code</em> is hitting problems -- which is what I was just researching -- is <a href=\"https://github.com/rust-lang/rust/pull/60900/files#diff-bab18e2cba63e19e514ac06a633a873cR3411\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60900/files#diff-bab18e2cba63e19e514ac06a633a873cR3411\">this code here</a>:</p>",
        "id": 174253550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566928861
    },
    {
        "content": "<p>oh</p>",
        "id": 174253658,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566928925
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"n\">nested</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">data_b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">d</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">predicate_to_obligation</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">with_self_ty</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source_ty</span><span class=\"p\">))),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 174253669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566928928
    },
    {
        "content": "<p>of course</p>",
        "id": 174253672,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566928929
    },
    {
        "content": "<p>not that the code is <em>wrong</em></p>",
        "id": 174253675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566928932
    },
    {
        "content": "<p>mhm...</p>",
        "id": 174253689,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566928940
    },
    {
        "content": "<p>but when you upcast from <code>dyn Foo + Send + 'a</code> to <code>dyn Foo + Send + 'b</code></p>",
        "id": 174253715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566928960
    },
    {
        "content": "<p>it winds up forcing us to prove <code>dyn Foo + Send: Send</code></p>",
        "id": 174253731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566928968
    },
    {
        "content": "<p>which in turn hits that ambiguous case</p>",
        "id": 174253739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566928972
    },
    {
        "content": "<p>right</p>",
        "id": 174253813,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929039
    },
    {
        "content": "<p>this is a more general problem though, isn't it?</p>",
        "id": 174253850,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929045
    },
    {
        "content": "<p>it is but I'm not sure I want to fix it in this PR :)</p>",
        "id": 174253867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929056
    },
    {
        "content": "<p>so one option might be to (somewhat hackily) avoid generating that obligation</p>",
        "id": 174253884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929066
    },
    {
        "content": "<p>because a trait object can implement a trait by <code>impl</code> or it being a \"supertrait\"</p>",
        "id": 174253894,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929074
    },
    {
        "content": "<p>mhm...</p>",
        "id": 174253912,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929086
    },
    {
        "content": "<p>(there is also a related soundness problem, as an aside...)</p>",
        "id": 174253930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929099
    },
    {
        "content": "<p>anyway a hack that would suffice to <em>unblock the PR</em> might be to look for auto traits that are already included in the list and skip them or something</p>",
        "id": 174254020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929162
    },
    {
        "content": "<p>hmm</p>",
        "id": 174254051,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929170
    },
    {
        "content": "<p>yes, does sound quite hacky though</p>",
        "id": 174254060,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929175
    },
    {
        "content": "<p>I'm doing a build with those lines commented out, as an aside, just to test my hypothesis</p>",
        "id": 174254076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929184
    },
    {
        "content": "<p>do you not want to go for a more solid solution right away?</p>",
        "id": 174254091,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929194
    },
    {
        "content": "<p>it got farther</p>",
        "id": 174254092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929194
    },
    {
        "content": "<p>I don't mind really</p>",
        "id": 174254095,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929196
    },
    {
        "content": "<p>okay.</p>",
        "id": 174254096,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929197
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0284]: type annotations required: cannot resolve `&lt;_ as context::Context&gt;::GoalInEnvironment == &lt;I as context::Context&gt;::GoalInEnvironment`\n   --&gt; /home/nmatsakis/.cargo/registry/src/github.com-1ecc6299db9ec823/chalk-engine-0.9.0/src/logic.rs:675:48\n    |\n675 |             Literal::Positive(subgoal) =&gt; self.abstract_positive_literal(infer, subgoal),\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^\n</pre></div>",
        "id": 174254152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929236
    },
    {
        "content": "<p>not sure what's up with <em>that</em></p>",
        "id": 174254156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929240
    },
    {
        "content": "<p>anyway, I think I would try to add some kind of \"skip auto traits\" check with a FIXME</p>",
        "id": 174254169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929252
    },
    {
        "content": "<p>we could file a related issue, using my example above</p>",
        "id": 174254173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929257
    },
    {
        "content": "<p>the idea would be to say \"if you are upcasting to <code>X</code> and the original type includes the auto trait <code>X</code>, skip it\" -- though we might want to be sure it's an auto trait with no type parameters</p>",
        "id": 174254235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929290
    },
    {
        "content": "<p>yeah. I didn't know chalk was being used already by default though...?</p>",
        "id": 174254263,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929309
    },
    {
        "content": "<p>mhm</p>",
        "id": 174254271,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929319
    },
    {
        "content": "<p>sounds fair enough</p>",
        "id": 174254280,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929324
    },
    {
        "content": "<p>how would you see a less hacky fix going though?</p>",
        "id": 174254297,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929335
    },
    {
        "content": "<p>well, e.g. for chalk, it isn't necessary to find a unique path necessarily</p>",
        "id": 174254360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929384
    },
    {
        "content": "<p>so one option would be to just not have a problem with multiple options</p>",
        "id": 174254373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929397
    },
    {
        "content": "<p>but that requires some deeper changes in how trait resolution works</p>",
        "id": 174254412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566929404
    },
    {
        "content": "<p>I see</p>",
        "id": 174254642,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929565
    },
    {
        "content": "<p>so many best just to leave that to you and the Chalk guys?</p>",
        "id": 174254645,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> anyway I'll try your hack suggestion, thanks. if you have an idea about that subsequent error, let me know (maybe I won't run into it if I'm lucky though?)</p>",
        "id": 174255218,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566929985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> yeah I'm hoping you don't :)</p>",
        "id": 174255282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566930009
    },
    {
        "content": "<p>I did a hackier change, after all</p>",
        "id": 174255287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566930014
    },
    {
        "content": "<p>exactly</p>",
        "id": 174255295,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566930019
    },
    {
        "content": "<p>but let me know and I'll do some debugging</p>",
        "id": 174255298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566930020
    },
    {
        "content": "<p>and that error msg is very weird heh</p>",
        "id": 174255307,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566930027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have a few thing I want to do after this trait upcasting gets merged (apart from getting my REPL project published and whatnot), but maybe I can start getting more involved with Chalk then. I'd like to... let's see.</p>",
        "id": 174255351,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566930069
    },
    {
        "content": "<p>I suppose we'll be having meetings again now, at least.</p>",
        "id": 174255359,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566930075
    },
    {
        "content": "<p>traits-WG ones</p>",
        "id": 174255361,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566930078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> random question: is the best (easiest?) way to check whether a ty implements a trait – outside of type checking/inference phase – to do <code>tcx.infer_ctxt().enter(|infcx| { infcx.at().sub(...) })</code> – or something like that?</p>",
        "id": 174256756,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566931028
    },
    {
        "content": "<p>I guess I'd just give some empty <code>ParamEnv</code> too</p>",
        "id": 174256789,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566931051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> no, the best way is to use the <code>evaluate_obligation</code> query</p>",
        "id": 174266476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566936626
    },
    {
        "content": "<p>Okay thanks!</p>",
        "id": 174312348,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1566941280
    },
    {
        "content": "<p>Okay thanks!</p>",
        "id": 174843830,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1567560022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> We'll talk here then.</p>",
        "id": 175377929,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568149203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> got a little time for this today or not? no worries if not.</p>",
        "id": 175385534,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568155508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> how about today? :-)</p>",
        "id": 175473965,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568234467
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>, sorry, today was crazy so far</p>",
        "id": 175483340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568242467
    },
    {
        "content": "<p>Let me review the PR :)</p>",
        "id": 175483341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568242471
    },
    {
        "content": "<p>hey, no problem...</p>",
        "id": 175483348,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568242478
    },
    {
        "content": "<p>cheers!</p>",
        "id": 175483349,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568242484
    },
    {
        "content": "<p>is current status still that those examples don't work, <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ?</p>",
        "id": 175483386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568242546
    },
    {
        "content": "<p>yeah</p>",
        "id": 175483391,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568242554
    },
    {
        "content": "<p>if so, it does seem like it's probably some kind of vtable counting problem</p>",
        "id": 175483393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568242555
    },
    {
        "content": "<p>the bit of code I highlighted in my last comment is surely the key</p>",
        "id": 175483432,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568242568
    },
    {
        "content": "<p>yeah, prob, let me do a local build</p>",
        "id": 175483437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568242578
    },
    {
        "content": "<p>the question is how to go about it... do I use <code>old_info</code> in some way? do I do a query? do I reuse the vtable counting code from <code>select.rs</code> somehow?</p>",
        "id": 175483440,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568242601
    },
    {
        "content": "<p>(since this is in codegen)</p>",
        "id": 175483441,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568242604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 175483538,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568242720
    },
    {
        "content": "<p>hmm</p>",
        "id": 175483687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568242816
    },
    {
        "content": "<p>remind me, we are doing the \"roll out all the methods into the vtable\" approach, right?</p>",
        "id": 175483698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568242835
    },
    {
        "content": "<p>i.e., one big flat vtable?</p>",
        "id": 175483701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568242838
    },
    {
        "content": "<p>yeah</p>",
        "id": 175483711,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568242848
    },
    {
        "content": "<p>there's a <code>flat_map</code> somewhere that does that, I forget where exactly...</p>",
        "id": 175483738,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568242891
    },
    {
        "content": "<p>I guess I would expect you'd do some sort of query, yes, but I'm not sure just what</p>",
        "id": 175483746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568242903
    },
    {
        "content": "<p>would have to look at the <a href=\"http://select.rs\" target=\"_blank\" title=\"http://select.rs\">select.rs</a> code I guess</p>",
        "id": 175483750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568242908
    },
    {
        "content": "<p>the vtable looks like D S A [trait methods] D S A [supertrait 1 methods] D S A [supertrait 2 methods] ...</p>",
        "id": 175483801,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568242935
    },
    {
        "content": "<p>yeah...</p>",
        "id": 175483806,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568242938
    },
    {
        "content": "<p>I just want to avoid the compiler duplicating work as much as possible, really</p>",
        "id": 175483820,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568242954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> grep for <code>count_own_vtable_entries</code> in the diff and you'll see the relevant <a href=\"http://select.rs\" target=\"_blank\" title=\"http://select.rs\">select.rs</a> code</p>",
        "id": 175483856,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568242997
    },
    {
        "content": "<p>it's simple</p>",
        "id": 175483861,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568243003
    },
    {
        "content": "<p>well, ish</p>",
        "id": 175483873,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568243018
    },
    {
        "content": "<p>there's a <code>supertraits</code> query</p>",
        "id": 175483941,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568243053
    },
    {
        "content": "<p>which I may need to repeat...?</p>",
        "id": 175483946,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568243062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> still building? :-)</p>",
        "id": 175489938,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568249955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> sorry, didn't finish before I had to log out for the night :)</p>",
        "id": 175522715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568290553
    },
    {
        "content": "<p>ah okay</p>",
        "id": 175554656,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568311555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> today...?</p>",
        "id": 175554664,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568311558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'll be out the rest of today, but feel free to leave notes while I'm gone, if you have thoughts.</p>",
        "id": 175640604,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568392277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> my build of your branch is dying with this error</p>\n<div class=\"codehilite\"><pre><span></span>error[E0283]: type annotations required: cannot resolve `dyn emitter::Emitter + rustc_data_structures::sync::Send: rustc_data_structures::sync::Send`\n</pre></div>\n\n\n<p>is that expected?</p>",
        "id": 175656726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568402986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh sorry. The way I built it was with <code>—keep-stage 0</code> after building master stage 0. Easier to debug that way.</p>",
        "id": 175663349,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568408138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> hey. did you get it built yet then?</p>",
        "id": 176118088,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568911528
    },
    {
        "content": "<p>anyway you may just want  to look at the bit of code I highlighted</p>",
        "id": 176118096,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568911541
    },
    {
        "content": "<p>in my comment on GH</p>",
        "id": 176118099,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568911544
    },
    {
        "content": "<p>and tell  me roughly what should go there :-)</p>",
        "id": 176118121,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568911552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well, I'll have a go doing a  trait query there and see if I get progress...</p>",
        "id": 176207481,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1568996625
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> been slammed this wek</p>",
        "id": 176227750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569011282
    },
    {
        "content": "<p>Trying to catch up a bit</p>",
        "id": 176227773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569011287
    },
    {
        "content": "<p>However, I didn't get this building, no -- I'm confused are you just using --keep-stage0 to work around the other problem for now?</p>",
        "id": 176228242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569011694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well, I'm using it  just to get rustc building</p>",
        "id": 176229030,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569012388
    },
    {
        "content": "<p>so I can test it on smaller examples</p>",
        "id": 176229045,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569012403
    },
    {
        "content": "<p>rather than all of rustc</p>",
        "id": 176229046,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569012405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> don't worry if you don't  have time today though</p>",
        "id": 176230507,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569013611
    },
    {
        "content": "<p>I'll try anyway</p>",
        "id": 176230512,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569013614
    },
    {
        "content": "<p>I wouldn't think you'd gain much by a working  build like me anyway</p>",
        "id": 176230526,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569013628
    },
    {
        "content": "<p>it's mainly about what to put in that bit of codeen_ssa</p>",
        "id": 176230531,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569013637
    },
    {
        "content": "<blockquote>\n<p>well, I'm using it  just to get rustc building</p>\n</blockquote>\n<p><em>oh</em>, I see</p>",
        "id": 176407493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271239
    },
    {
        "content": "<p>useful hack, yes</p>",
        "id": 176407525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271272
    },
    {
        "content": "<p>In answer to your question <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> -- in codegen, when we dispatch a <code>foo.bar()</code> call, we invoke <a href=\"https://github.com/rust-lang/rust/blob/c7bc0bf82faf9718fa1e59a38f5aab308299ba7d/src/librustc/traits/codegen/mod.rs#L21-L24\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c7bc0bf82faf9718fa1e59a38f5aab308299ba7d/src/librustc/traits/codegen/mod.rs#L21-L24\"><code>codegen_fulfill_obligation</code></a></p>",
        "id": 176559730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569415241
    },
    {
        "content": "<p>okay, thanks</p>",
        "id": 176566955,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569419957
    },
    {
        "content": "<p>I'll still need to do a query in the codegen for the upcast then, I suppose? don't see a way around it</p>",
        "id": 176566979,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569419973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> can you send me a quick link to where you would need the info?</p>",
        "id": 176570532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569422224
    },
    {
        "content": "<p>sorry if the link's already in the PR</p>",
        "id": 176570537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569422229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah, it's here: <a href=\"https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src/librustc_codegen_ssa/base.rs#L141\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src/librustc_codegen_ssa/base.rs#L141\">https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src/librustc_codegen_ssa/base.rs#L141</a></p>",
        "id": 176572673,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569423430
    },
    {
        "content": "<p>also curious how I do a pointer offset in codegen_ssa (I have basicaly no experience with codegen in rustc, I'm afraid.)</p>",
        "id": 176572731,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569423465
    },
    {
        "content": "<p>so yeah, if we can figure out how to do that, and get the appropriate <code>VtableObject</code> value, then bingo.</p>",
        "id": 176573115,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569423665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> hmm, so maybe I can/should call <code>codegen_fulfill_obligation</code> from within the <code>unsized_info</code> method?</p>",
        "id": 176590486,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569434461
    },
    {
        "content": "<p>(in codegen_ssa)</p>",
        "id": 176590499,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569434466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> you said that <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> helped you out here, or do you still have pending questions?</p>",
        "id": 176668243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569511795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> doing some experimentation right now. so I'll see shortly. would be good to have a short sync anyway, if you don't mind. we can cut it short if we don't need all the time?</p>",
        "id": 176668551,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569511996
    },
    {
        "content": "<p>he's gone AFK for now, but here's my last question <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 176672139,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569514588
    },
    {
        "content": "<p>my wider issue is basically that in codegen_rvalue_operand, for unsizing, I need to do something equivalent to coerce_unsized_into but for operands. do I need to make that fn more abstract (to work on operands... not sure how exactly), or do something similar to codegen_rvalue in codegen_rvalue_operand (for unsizing)?</p>",
        "id": 176672140,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569514589
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>. around now?  :-)</p>",
        "id": 176675643,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569517222
    },
    {
        "content": "<p>yep, just reading your last few comments</p>",
        "id": 176675760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569517313
    },
    {
        "content": "<p>I'm going to have to go read into that code</p>",
        "id": 176675835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569517340
    },
    {
        "content": "<p>it is pretty thoroughly out of cache</p>",
        "id": 176675846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569517346
    },
    {
        "content": "<p>okay thanks</p>",
        "id": 176675860,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569517358
    },
    {
        "content": "<p>ps, is your branch up to date?</p>",
        "id": 176675868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569517363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I can push my WIP code right now if you like too</p>",
        "id": 176675873,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569517365
    },
    {
        "content": "<p>heh</p>",
        "id": 176675882,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569517367
    },
    {
        "content": "<p>let me do that.</p>",
        "id": 176675885,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569517370
    },
    {
        "content": "<p>always useful, thanks</p>",
        "id": 176675896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569517376
    },
    {
        "content": "<blockquote>\n<p>my wider issue is basically that in codegen_rvalue_operand, for unsizing, I need to do something equivalent to coerce_unsized_into but for operands. </p>\n</blockquote>\n<p>ok i'm looking at this fn now</p>",
        "id": 176676325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569517741
    },
    {
        "content": "<p>done</p>",
        "id": 176676357,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569517761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 176676361,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569517766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> rerunning the trait query in <code>unsized_info</code> is obviously non-ideal. I didn't properly look into your suggestion of using <code>codegen_fulfill_obligation</code> yet.</p>",
        "id": 176676473,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569517836
    },
    {
        "content": "<p>was focusing more  on codegn</p>",
        "id": 176676484,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569517841
    },
    {
        "content": "<p>yep, ok, I'm reading your code now</p>",
        "id": 176676799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518058
    },
    {
        "content": "<p>I still don't really understand <em>quite</em> what you meant when you were saying you needed \"something equivalent to <code>coerce_unsized_into</code></p>",
        "id": 176676814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518077
    },
    {
        "content": "<p>okay, well...</p>",
        "id": 176676879,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <code>src/librustc_codegen_ssa/mir/rvalue.rs|:227</code> (the FIXME)</p>",
        "id": 176676963,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518195
    },
    {
        "content": "<p>does that help clarify?</p>",
        "id": 176676967,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518199
    },
    {
        "content": "<p>also,  note the similarity between the match expr there and the one in <code>coerce_unsized_into</code> (<code>coerce_ptr</code> closure), <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> (basically that one just does an additional <code>OperandValue::store</code> but is otherwise no different I think</p>",
        "id": 176677119,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518286
    },
    {
        "content": "<p>hmm ok</p>",
        "id": 176677192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518338
    },
    {
        "content": "<p>is that clearer? sorry, the code is a bit messy still...</p>",
        "id": 176677213,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518350
    },
    {
        "content": "<p>well.... it wasn't exactly super-clean to begin with heh.</p>",
        "id": 176677258,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518388
    },
    {
        "content": "<p>it's clear-ish</p>",
        "id": 176677333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518418
    },
    {
        "content": "<p>this code has changed a lot since I last looke at it</p>",
        "id": 176677351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518433
    },
    {
        "content": "<p>well idk if that's true, maybe I just forget :)</p>",
        "id": 176677366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518445
    },
    {
        "content": "<p>heh, easily done in any casee</p>",
        "id": 176677381,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518454
    },
    {
        "content": "<p>in any case, the primary difference between <code>coerce_unsized_into</code> and <code>codegen_rvalue_operand</code> is that the former starts from two LLVM \"typed pointers\", basically (<code>PlaceRef</code>), whereas the latter also goes from MIR?</p>",
        "id": 176677541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518582
    },
    {
        "content": "<p>er, well, I guess we also return an operand</p>",
        "id": 176677559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518606
    },
    {
        "content": "<p>right, I think so.</p>",
        "id": 176677567,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518614
    },
    {
        "content": "<p>whihc I guess is sort that <code>store</code> you were talking about</p>",
        "id": 176677572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518620
    },
    {
        "content": "<p>both work with <code>OpereandValue</code>s though</p>",
        "id": 176677580,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518626
    },
    {
        "content": "<p>in their corresponding matches</p>",
        "id": 176677637,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518643
    },
    {
        "content": "<p>yeah so the <em>heart</em> of <code>coerce_unsized_into</code> is this code:</p>",
        "id": 176677675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518683
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">coerce_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">ty_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty_b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">load_operand</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">).</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">OperandValue</span>::<span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// FIXME(alexreg): this comment needs updating.</span>\n<span class=\"w\">                </span><span class=\"c1\">// Fat-ptr to fat-ptr unsize preserves the vtable,</span>\n<span class=\"w\">                </span><span class=\"c1\">// i.e., `&amp;&#39;a fmt::Debug + Send` =&gt; `&amp;&#39;a fmt::Debug`</span>\n<span class=\"w\">                </span><span class=\"c1\">// So, we need to `pointercast` the base to ensure</span>\n<span class=\"w\">                </span><span class=\"c1\">// the types match up.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">thin_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"p\">.</span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">FAT_PTR_ADDR</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;FOO: FAT PTR UNSIZE&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// HACK(eddyb): have to bitcast pointers until LLVM removes pointee types.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">pointercast</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">().</span><span class=\"n\">backend_type</span><span class=\"p\">(</span><span class=\"n\">thin_ptr</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unsized_info</span><span class=\"p\">(</span><span class=\"n\">bx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty_b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">OperandValue</span>::<span class=\"n\">Immediate</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">unsize_thin_ptr</span><span class=\"p\">(</span><span class=\"n\">bx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dst_ty</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">OperandValue</span>::<span class=\"n\">Ref</span><span class=\"p\">(..)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">OperandValue</span>::<span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">).</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">bx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176677691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518693
    },
    {
        "content": "<p>which doesn't <em>really</em> want to take a <code>PlaceRef-&gt;PlaceRef</code></p>",
        "id": 176677706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518704
    },
    {
        "content": "<p>that is, it's kind of a wrapper around a <code>Operand -&gt; OPerand</code> I think</p>",
        "id": 176677727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518714
    },
    {
        "content": "<p>right, I'm thinking that can be factored out</p>",
        "id": 176677729,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518716
    },
    {
        "content": "<p>that sounds right</p>",
        "id": 176677736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518721
    },
    {
        "content": "<p>and used in <code>codegen_rvalue_operand</code></p>",
        "id": 176677737,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518723
    },
    {
        "content": "<p>it seems like it is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">coerce_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">ty_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty_b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">src_operand</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">load_operand</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dst_operand</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">coerce_operand_operand</span><span class=\"p\">(</span><span class=\"n\">src_operand</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dst_operand</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(...);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176677788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518761
    },
    {
        "content": "<p>but we still need something like <code>src/librustc_codegen_ssa/base.rs:299</code> (that other match) in <code>codegen_rvalue_operand</code>, no?</p>",
        "id": 176677826,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518764
    },
    {
        "content": "<p>exactly</p>",
        "id": 176677843,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518775
    },
    {
        "content": "<p>maybe call it <code>fn coerce_operand_unsized</code>  though (?)</p>",
        "id": 176677876,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518811
    },
    {
        "content": "<p>or <code>fn coerce_unsized_ptr</code>?</p>",
        "id": 176677899,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518836
    },
    {
        "content": "<p>yeah I mean whatever :)</p>",
        "id": 176677902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518838
    },
    {
        "content": "<p>I was just being sloppy</p>",
        "id": 176677904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518840
    },
    {
        "content": "<p>yeah that's me unnecessarily focusing on details sorry heh</p>",
        "id": 176677936,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518865
    },
    {
        "content": "<p>so....</p>",
        "id": 176677940,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518867
    },
    {
        "content": "<p>anyway, do you need that match on line 299...</p>",
        "id": 176677942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518870
    },
    {
        "content": "<p>I guess the answer is yes</p>",
        "id": 176678001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well I'm alluding to something like that in <code>rvalue.rs:227</code>(the FIXME comment)</p>",
        "id": 176678019,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518902
    },
    {
        "content": "<p>because we presumably want to be able to coerce (e.g.) <code>Arc&lt;Foo&gt;</code> to <code>Arc&lt;Bar&gt;</code></p>",
        "id": 176678030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518907
    },
    {
        "content": "<p>yeah</p>",
        "id": 176678045,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518916
    },
    {
        "content": "<p>but all that line does</p>",
        "id": 176678056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518924
    },
    {
        "content": "<p>the final arm of that match is the tricky one though. it involves recursion of the fn.</p>",
        "id": 176678092,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518945
    },
    {
        "content": "<p>well I guess the fn I wrote isn't really how you want to factor it</p>",
        "id": 176678112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518959
    },
    {
        "content": "<p>you probably want a function that takes the result of <code>load_operand</code> combined with a type</p>",
        "id": 176678120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518969
    },
    {
        "content": "<p>as the \"source\"</p>",
        "id": 176678123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518972
    },
    {
        "content": "<p>and seems to be predicated specifically on using places</p>",
        "id": 176678126,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518974
    },
    {
        "content": "<p>and then does the match etc</p>",
        "id": 176678127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518976
    },
    {
        "content": "<p>hmm</p>",
        "id": 176678129,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518977
    },
    {
        "content": "<p>oh yes</p>",
        "id": 176678138,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518984
    },
    {
        "content": "<p>hmm so the final case, that's the <code>Arc&lt;...&gt;</code> cse</p>",
        "id": 176678144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518993
    },
    {
        "content": "<p>I hadn't read closely and just assumed that :-)</p>",
        "id": 176678151,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569518997
    },
    {
        "content": "<p>and yes it is predicated on places</p>",
        "id": 176678152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569518998
    },
    {
        "content": "<p>well so the other thing you can do of course</p>",
        "id": 176678248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519048
    },
    {
        "content": "<p>is to spill :)</p>",
        "id": 176678256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519054
    },
    {
        "content": "<p>(which might well make sense)</p>",
        "id": 176678266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519061
    },
    {
        "content": "<p>see the match at <code>rvalue.rs:56</code>... I wonder if we can do something similar in <code>codgen_rvalue_operand</code>?</p>",
        "id": 176678278,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519073
    },
    {
        "content": "<p>that's what I was alluding to before</p>",
        "id": 176678281,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519079
    },
    {
        "content": "<p>oh, \"spill\"?</p>",
        "id": 176678290,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519085
    },
    {
        "content": "<p>right, that's what I meant by \"spill\"</p>",
        "id": 176678298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519092
    },
    {
        "content": "<p>create a temporary if you need one</p>",
        "id": 176678301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519095
    },
    {
        "content": "<p>aha yep</p>",
        "id": 176678322,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519114
    },
    {
        "content": "<p>that last case feels very painful to handle without spilling; you could potentially spill <em>only</em> in tha case</p>",
        "id": 176678331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519119
    },
    {
        "content": "<p>yeah, that's an interesting thought</p>",
        "id": 176678387,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519135
    },
    {
        "content": "<p>you will <em>typically</em> have a <code>PlaceRef</code> anyway I think</p>",
        "id": 176678389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519136
    },
    {
        "content": "<p>well I'm not sure how <code>OperandRef</code> works exactly</p>",
        "id": 176678400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519143
    },
    {
        "content": "<p>but in the MIR you are usually casting from a place</p>",
        "id": 176678407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519150
    },
    {
        "content": "<p>would it be more efficient to special-case the last case though?</p>",
        "id": 176678408,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519150
    },
    {
        "content": "<p>(in <em>theory</em> it can be a constant)</p>",
        "id": 176678418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519156
    },
    {
        "content": "<p>because it's obviously more of a pain</p>",
        "id": 176678421,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519158
    },
    {
        "content": "<p>I see</p>",
        "id": 176678428,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519162
    },
    {
        "content": "<p>not sure what you mean by special-case</p>",
        "id": 176678434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519166
    },
    {
        "content": "<p>I am proposing to special case it :)</p>",
        "id": 176678437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519171
    },
    {
        "content": "<p>that is, I am saying that you probably don't want to <em>always</em> create a temporary and store into it, because you typically don't need one</p>",
        "id": 176678469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519191
    },
    {
        "content": "<p>sorry, I meant whether to \"special-case\" in the opposite sense: not create a temporary for the simpler cases.</p>",
        "id": 176678619,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519269
    },
    {
        "content": "<p>easier to write, but potentially less efficient</p>",
        "id": 176678627,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519276
    },
    {
        "content": "<p>ok. yes, I think we're saying the same thing</p>",
        "id": 176678675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519316
    },
    {
        "content": "<p>I have to run but -- I can see why you find this tricky :) -- i'm starting to see what needs to be done, let me know if you do anything else and/or I'll try to look at it a bit more tomorrow</p>",
        "id": 176678701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> is probably also a good one to help, indeed, as they're much closer to this code than I am</p>",
        "id": 176678726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519358
    },
    {
        "content": "<p>yeah. I was basically just asking you if it's worth it in terms of efficiency (obviously will defer to you on this, since I don't fully understand thee tradeoffs!)</p>",
        "id": 176678733,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sure. as for the <code>codegen_fulfill_obligation</code>... should I be calling that from <code>unsized_info</code>, or what?</p>",
        "id": 176678805,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519385
    },
    {
        "content": "<p>feel feel to reply whenever.</p>",
        "id": 176678815,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519394
    },
    {
        "content": "<p>thanks for your time anyway!</p>",
        "id": 176678822,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519398
    },
    {
        "content": "<p>it's been helpful</p>",
        "id": 176678831,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569519404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> let's chat here</p>",
        "id": 176975958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569878468
    },
    {
        "content": "<p>so I saw the gist but maybe the best is if I just look at the state of your branch?</p>",
        "id": 176975987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569878489
    },
    {
        "content": "<p>sure</p>",
        "id": 176976062,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569878529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yep, let me push now...</p>",
        "id": 176976093,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569878560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> pull and grep for <code>// FIXME: what should go here?</code> :-)</p>",
        "id": 176976508,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569878919
    },
    {
        "content": "<p>or...</p>",
        "id": 176976518,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569878934
    },
    {
        "content": "<p>just take a look at the whole of the last commit</p>",
        "id": 176976529,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569878939
    },
    {
        "content": "<p>I think it's all new stuff</p>",
        "id": 176976535,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569878942
    },
    {
        "content": "<p>ok</p>",
        "id": 176976969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879277
    },
    {
        "content": "<p>something about the names feels wrong to me here</p>",
        "id": 176977218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879533
    },
    {
        "content": "<p>names of the fns? sure, suggest new ones, by all means</p>",
        "id": 176977326,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879637
    },
    {
        "content": "<p>I'm confused about <code> coerce_unsized_operand</code></p>",
        "id": 176977344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879670
    },
    {
        "content": "<p>the main thing I'm concerned about right now is the functionality though</p>",
        "id": 176977348,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879675
    },
    {
        "content": "<p>hmm</p>",
        "id": 176977350,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879677
    },
    {
        "content": "<p>there's no such fn?</p>",
        "id": 176977372,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879710
    },
    {
        "content": "<p>indeed, there is no such fn</p>",
        "id": 176977421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879724
    },
    {
        "content": "<p>are you looking at an old commit by chance?</p>",
        "id": 176977424,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879725
    },
    {
        "content": "<p>that is what is confusing me :)</p>",
        "id": 176977429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879727
    },
    {
        "content": "<p>no, it's commented out code</p>",
        "id": 176977432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879730
    },
    {
        "content": "<p>where did it come from?</p>",
        "id": 176977436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879733
    },
    {
        "content": "<p>ah</p>",
        "id": 176977450,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879736
    },
    {
        "content": "<p>I don't even see it commented out</p>",
        "id": 176977499,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879760
    },
    {
        "content": "<p>grep returns nothing hmm!</p>",
        "id": 176977501,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879763
    },
    {
        "content": "<p>well anyway not imp't</p>",
        "id": 176977520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879786
    },
    {
        "content": "<p>to answer your question</p>",
        "id": 176977524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879788
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// FIXME: what should go here?</span>\n</pre></div>\n\n\n<p>that question, I mean</p>",
        "id": 176977564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879838
    },
    {
        "content": "<p>yeah</p>",
        "id": 176977610,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879845
    },
    {
        "content": "<p>I thnk that the setup is sort of off</p>",
        "id": 176977614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879850
    },
    {
        "content": "<p>okay it may well be</p>",
        "id": 176977621,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879859
    },
    {
        "content": "<p>I'm really a newb when it comes to codegen!</p>",
        "id": 176977626,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879867
    },
    {
        "content": "<p>just been looking at examples in other places to try to learn</p>",
        "id": 176977641,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879888
    },
    {
        "content": "<p>basically I think the <code>OperandValue</code> you want to return is to load from <code>dst_scratch</code></p>",
        "id": 176977664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879911
    },
    {
        "content": "<p>right, exactly...</p>",
        "id": 176977672,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879924
    },
    {
        "content": "<p>but I'm wondering now how that would interact with storage-dea</p>",
        "id": 176977675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569879925
    },
    {
        "content": "<p>ah yes</p>",
        "id": 176977682,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879932
    },
    {
        "content": "<p>I was wondering about that</p>",
        "id": 176977685,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879935
    },
    {
        "content": "<p>whether it invalidates the operand even if I do storage-dead <em>after</em> fetching the operand value</p>",
        "id": 176977696,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569879952
    },
    {
        "content": "<p>if not, maybe I can just do <code>OperandValue::Pair(dst_scratch.llval, dst_scratch.llextra)</code> for that line? though that seems suspect too?</p>",
        "id": 176977787,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880015
    },
    {
        "content": "<p>I think that's invalid, yes</p>",
        "id": 176977931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880126
    },
    {
        "content": "<p>(BTW, I pushed again. no major changes, just fixed some build errors due to copy &amp; paste coding...)</p>",
        "id": 176977944,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880139
    },
    {
        "content": "<p>hmm</p>",
        "id": 176977946,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880140
    },
    {
        "content": "<p>so I feel like, to go this way, you really don't want to be returning an operand</p>",
        "id": 176977954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880143
    },
    {
        "content": "<p>you want to be given a dest</p>",
        "id": 176977962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880148
    },
    {
        "content": "<p>looking a bit further out</p>",
        "id": 176977970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880153
    },
    {
        "content": "<p>at the callers of this function</p>",
        "id": 176977979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880163
    },
    {
        "content": "<p>one of them has a destination</p>",
        "id": 176977984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880165
    },
    {
        "content": "<p>possibly</p>",
        "id": 176977986,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880166
    },
    {
        "content": "<p>the other does not</p>",
        "id": 176977988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880167
    },
    {
        "content": "<p>however, the other caller comes from a statement assign</p>",
        "id": 176978000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880182
    },
    {
        "content": "<p>in particular we have some logic for cases like <code>x = foo</code> where we tried to avoid an alloca for <code>x</code></p>",
        "id": 176978010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880196
    },
    {
        "content": "<p>if <code>x</code> has a \"sufficiently complicated\" type we'll create one</p>",
        "id": 176978021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880204
    },
    {
        "content": "<p>the question is: can <code>coerce_ptr_unsized</code> even get called with an <code>op</code> that has an ADT, in practice? I presume the answer is yes.</p>",
        "id": 176978060,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880214
    },
    {
        "content": "<p>basically a non-immediate type (and we include pairs in that case)</p>",
        "id": 176978066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880217
    },
    {
        "content": "<blockquote>\n<p>the question is: can <code>coerce_ptr_unsized</code> even get called with an <code>op</code> that has an ADT, in practice? I presume the answer is yes.</p>\n</blockquote>\n<p>I think you kind of want to split out the path where the case is \"yes\" from the case where it is \"no\"</p>",
        "id": 176978077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880234
    },
    {
        "content": "<p>is what I'm getting at</p>",
        "id": 176978079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880236
    },
    {
        "content": "<p>it's only called a) recursively b) by <code>cosdegen_rvalue_operand</code></p>",
        "id": 176978082,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880239
    },
    {
        "content": "<p>in particular, <code>codegen_rvalue_operand</code> is invoked from the assignment code I was talking about above</p>",
        "id": 176978101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880269
    },
    {
        "content": "<p>which itself needs to spit out  an <code>OperandRef</code></p>",
        "id": 176978107,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880280
    },
    {
        "content": "<p>not assign to a <code>PlaceRef</code></p>",
        "id": 176978110,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880284
    },
    {
        "content": "<p>hmm</p>",
        "id": 176978112,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880285
    },
    {
        "content": "<p>notice that <code>codegen_rvalue_operand</code> already has some logic that assumes this</p>",
        "id": 176978181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880324
    },
    {
        "content": "<p>e.g.</p>",
        "id": 176978182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880326
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"n\">mir</span>::<span class=\"n\">Rvalue</span>::<span class=\"n\">Repeat</span><span class=\"p\">(..)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">mir</span>::<span class=\"n\">Rvalue</span>::<span class=\"n\">Aggregate</span><span class=\"p\">(..)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// According to `rvalue_creates_operand`, only ZST</span>\n<span class=\"w\">                </span><span class=\"c1\">// aggregate rvalues are allowed to be operands.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rvalue</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">operand</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OperandRef</span>::<span class=\"n\">new_zst</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">layout_of</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">monomorphize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ty</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"n\">bx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">operand</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176978183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880328
    },
    {
        "content": "<p>i.e., it assumes it <em>can</em> be invoked with a <code>Foo { ... }</code> operand that constructs a struct, but only if that struct is a ZST</p>",
        "id": 176978192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880342
    },
    {
        "content": "<p>now I don't think this means you can't have an ADT necessarily</p>",
        "id": 176978212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880366
    },
    {
        "content": "<p>hmm</p>",
        "id": 176978217,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880374
    },
    {
        "content": "<p>it's just that your ADT must be represented by a (ptr, info) pair</p>",
        "id": 176978221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880376
    },
    {
        "content": "<p>and not some more general structure</p>",
        "id": 176978224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880380
    },
    {
        "content": "<p>I'm not 100% sure about that</p>",
        "id": 176978231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880385
    },
    {
        "content": "<p>you could test with e.g. <code>Arc</code></p>",
        "id": 176978235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880390
    },
    {
        "content": "<p>yeah, so it's already a fat pointer to an ADT?</p>",
        "id": 176978247,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880406
    },
    {
        "content": "<p>but the decision of whether to use an alloca for a type is made in the <code>non_ssa_locals</code> function</p>",
        "id": 176978256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880413
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">       </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">layout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fx</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">spanned_layout_of</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">fx</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">is_backend_immediate</span><span class=\"p\">(</span><span class=\"n\">layout</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// These sorts of types are immediates that we can store</span>\n<span class=\"w\">            </span><span class=\"c1\">// in an Value without an alloca.</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">fx</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">is_backend_scalar_pair</span><span class=\"p\">(</span><span class=\"n\">layout</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// We allow pairs and uses of any of their 2 fields.</span>\n</pre></div>",
        "id": 176978265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880425
    },
    {
        "content": "<p>and it seems to be based on the <em>layout</em></p>",
        "id": 176978267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880429
    },
    {
        "content": "<p>(which makes sense)</p>",
        "id": 176978270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880435
    },
    {
        "content": "<blockquote>\n<p>yeah, so it's already a fat pointer to an ADT?</p>\n</blockquote>\n<p>no</p>",
        "id": 176978272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880440
    },
    {
        "content": "<p>well I don't know what \"fat pointer to an ADT means\"</p>",
        "id": 176978317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880450
    },
    {
        "content": "<p>but e.g. an <code>Arc&lt;dyn Debug&gt;</code> would be represented (I think) by a <code>(ptr, vtable)</code> pair where the <code>ptr</code> is the <code>Arc&lt;_&gt;</code> pointer --- i.e., it's internal pointer to some shared box with a ref count</p>",
        "id": 176978339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880489
    },
    {
        "content": "<p>e.g. <code>&amp;dyn FooStruct</code> or <code>Box&lt;dyn FooStruct&gt;</code>?</p>",
        "id": 176978341,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880490
    },
    {
        "content": "<p><code>dyn FooStruct</code> is a contradiction, no?</p>",
        "id": 176978361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880510
    },
    {
        "content": "<p>okay</p>",
        "id": 176978363,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880510
    },
    {
        "content": "<p>ughh</p>",
        "id": 176978373,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880519
    },
    {
        "content": "<p>I'm tired, sorry</p>",
        "id": 176978379,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880526
    },
    {
        "content": "<p>long day</p>",
        "id": 176978381,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880528
    },
    {
        "content": "<p>basically if you had a <code>Arc&lt;T&gt;</code>, it would be represented by (in C terms) a <code>*const T</code></p>",
        "id": 176978383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880530
    },
    {
        "content": "<p>actually a <code>*const ArcData&lt;T&gt;</code> or something</p>",
        "id": 176978388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880538
    },
    {
        "content": "<p>and so the layout in this case would be a <code>(*const ArcLayout&lt;T&gt;, vtable)</code></p>",
        "id": 176978392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880547
    },
    {
        "content": "<p>I guess that's C terms but Rust syntax :) or .. something</p>",
        "id": 176978401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880560
    },
    {
        "content": "<p>guess I was thinking <code>&amp;dyn Trait</code> where <code>FooStruct: Trait</code></p>",
        "id": 176978447,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880567
    },
    {
        "content": "<p>point is, the <code>Arc&lt;T&gt;</code> struct is really just a pointer</p>",
        "id": 176978448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880570
    },
    {
        "content": "<p>okay</p>",
        "id": 176978455,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880575
    },
    {
        "content": "<p>anyway the reason I mention all that is</p>",
        "id": 176978466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880589
    },
    {
        "content": "<p>the logic that \"spills\" to temporary stack slots is intended for more complex cases</p>",
        "id": 176978472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880598
    },
    {
        "content": "<p>in that case... wouldn't it just be handled by one of the previous two arms of the match?</p>",
        "id": 176978475,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880600
    },
    {
        "content": "<p>where the struct has arbitray fields and things</p>",
        "id": 176978477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880603
    },
    {
        "content": "<blockquote>\n<p>in that case... wouldn't it just be handled by one of the previous two arms of the match?</p>\n</blockquote>\n<p>no, because the match is matching on it's <strong>Rust type</strong></p>",
        "id": 176978497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880636
    },
    {
        "content": "<p>however</p>",
        "id": 176978512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880652
    },
    {
        "content": "<p>right, not its LLVM type...</p>",
        "id": 176978526,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880666
    },
    {
        "content": "<p>makes sense</p>",
        "id": 176978531,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880670
    },
    {
        "content": "<p>this logic here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">Adt</span><span class=\"p\">(</span><span class=\"n\">def_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">Adt</span><span class=\"p\">(</span><span class=\"n\">def_b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">def_a</span><span class=\"p\">.</span><span class=\"n\">is_box</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">def_b</span><span class=\"p\">.</span><span class=\"n\">is_box</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">unsized_info</span><span class=\"p\">(</span><span class=\"n\">bx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">boxed_ty</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">boxed_ty</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>is .. probably what we want, <em>more or less</em>, except that it's hardcoded to box</p>",
        "id": 176978593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880693
    },
    {
        "content": "<p>do we want something more like the final match arm in <code>coerce_unsized_into</code> then?</p>",
        "id": 176978648,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880749
    },
    {
        "content": "<p>don't know how that can be adapted for operands and not places though</p>",
        "id": 176978653,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880758
    },
    {
        "content": "<p>heh man this is annoying</p>",
        "id": 176978685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880794
    },
    {
        "content": "<p>so let's first just try to get it <em>working</em></p>",
        "id": 176978726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880804
    },
    {
        "content": "<p>then we'll worry about making it a bit more efficient</p>",
        "id": 176978742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880811
    },
    {
        "content": "<p>yep</p>",
        "id": 176978743,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880817
    },
    {
        "content": "<p>at least the simple case is working now :-P</p>",
        "id": 176978745,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880823
    },
    {
        "content": "<p>oh wait, wait</p>",
        "id": 176978750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880830
    },
    {
        "content": "<p>just not upcasting things like Arc</p>",
        "id": 176978751,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880832
    },
    {
        "content": "<p>I gues...</p>",
        "id": 176978754,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880836
    },
    {
        "content": "<p>ok ok so there are <em>two</em> callers of <code>coerce_ptr_unsized</code> <em>but</em></p>",
        "id": 176978755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880839
    },
    {
        "content": "<p>both of them are assuming that the source operand is either a pointer or a (pointer, info) pair</p>",
        "id": 176978760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880855
    },
    {
        "content": "<p>in the case of <code>coerce_unsized_into</code>, that's because it's already done the logic of matching the fields of the adts</p>",
        "id": 176978769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880870
    },
    {
        "content": "<p>yes that's true</p>",
        "id": 176978774,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880887
    },
    {
        "content": "<p>but the second?</p>",
        "id": 176978778,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880889
    },
    {
        "content": "<p>I was worried about that one</p>",
        "id": 176978782,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880894
    },
    {
        "content": "<p>in the case of the rvalue coercion fn, that's because of the limits on local variables (more complex type would be spilled to alloca)</p>",
        "id": 176978785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880895
    },
    {
        "content": "<p>oh. so you're saying <code>codegen_rvalue_operand</code> would never be called for complex ADTs even?</p>",
        "id": 176978842,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880926
    },
    {
        "content": "<p>correct</p>",
        "id": 176978895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880986
    },
    {
        "content": "<p>we would call <code>codegen_rvalue_into</code> or something like that</p>",
        "id": 176978900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569880993
    },
    {
        "content": "<p>cool</p>",
        "id": 176978901,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569880994
    },
    {
        "content": "<p>or just <code>bug!</code> out?</p>",
        "id": 176978910,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881005
    },
    {
        "content": "<p>up to you</p>",
        "id": 176978914,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881009
    },
    {
        "content": "<p>no I mean</p>",
        "id": 176978918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881013
    },
    {
        "content": "<blockquote>\n<p>oh. so you're saying <code>codegen_rvalue_operand</code> would never be called for complex ADTs even?</p>\n</blockquote>\n<p>it is a bug to call this for a more complex ADT</p>",
        "id": 176978921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881020
    },
    {
        "content": "<p>the caller ought to have invoked one of the into variants</p>",
        "id": 176978928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881030
    },
    {
        "content": "<p>so I think what you want to do in <code>coerce_ptr_unsized</code></p>",
        "id": 176978932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881034
    },
    {
        "content": "<p>you basically want to invoke <code>unsized_info</code>, but the trick is figuring out what type to invoke it <em>with</em></p>",
        "id": 176978991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881060
    },
    {
        "content": "<p>then isn't it a bug to call <code>coerce_ptr_unsized</code> on a more complex ADT likewise, since you gave the only two call sites above?</p>",
        "id": 176978996,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881067
    },
    {
        "content": "<p>okay...</p>",
        "id": 176978999,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881069
    },
    {
        "content": "<p>ah wait</p>",
        "id": 176979011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881087
    },
    {
        "content": "<p>I <strong>think</strong> maybe this will work?</p>",
        "id": 176979038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881121
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">Adt</span><span class=\"p\">(</span><span class=\"n\">def_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">ty</span>::<span class=\"n\">Adt</span><span class=\"p\">(</span><span class=\"n\">def_b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">def_a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">unsized_info</span><span class=\"p\">(</span><span class=\"n\">bx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176979039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881124
    },
    {
        "content": "<p>in particular, <code>unsized_info</code> seems to already expect two instance of the same ADT, and it knows to walk their fields in lockstep</p>",
        "id": 176979082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881162
    },
    {
        "content": "<p>(the code for <code>box</code> might be similarly simplified and mergd into this arm, actually)</p>",
        "id": 176979108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881173
    },
    {
        "content": "<p>line 131 then?</p>",
        "id": 176979124,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881214
    },
    {
        "content": "<p>of that file</p>",
        "id": 176979125,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881216
    },
    {
        "content": "<p>I pushed a commit to your branch</p>",
        "id": 176979140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881229
    },
    {
        "content": "<p>not sure if it works</p>",
        "id": 176979143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881231
    },
    {
        "content": "<p>but I got to run</p>",
        "id": 176979146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881233
    },
    {
        "content": "<p>I <em>think</em> it may be correct</p>",
        "id": 176979148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881237
    },
    {
        "content": "<p>in which case I <em>think</em> the match arm I just modified and the match arm before it can be mergd</p>",
        "id": 176979162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881251
    },
    {
        "content": "<p>okay thanks!</p>",
        "id": 176979169,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881267
    },
    {
        "content": "<p>sounds good</p>",
        "id": 176979172,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881269
    },
    {
        "content": "<p>makes sense actually</p>",
        "id": 176979176,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881272
    },
    {
        "content": "<p>I'll see if it gets rid of the bootstrap error btw, which is: <a href=\"https://gist.github.com/e20f1817eb2ced1ec25ba706f8a9c31a\" target=\"_blank\" title=\"https://gist.github.com/e20f1817eb2ced1ec25ba706f8a9c31a\">https://gist.github.com/e20f1817eb2ced1ec25ba706f8a9c31a</a></p>",
        "id": 176979215,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881283
    },
    {
        "content": "<p>cool, I'm doing a local build too</p>",
        "id": 176979231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881299
    },
    {
        "content": "<p>(the box code is taking <code>Box&lt;T&gt; -&gt; Box&lt;U&gt;</code> coercion and invoking that helper with <code>T, U</code>...</p>",
        "id": 176979239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881318
    },
    {
        "content": "<p>it's an LLVM assertion issue with the bootstrap, so that's a bit disconcerting, but oh well..</p>",
        "id": 176979240,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881319
    },
    {
        "content": "<p>but from what I can see, the helper would deal just fine with <code>Box</code> arguments)</p>",
        "id": 176979245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881327
    },
    {
        "content": "<p>with the bootstrap*</p>",
        "id": 176979248,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881329
    },
    {
        "content": "<p>cool</p>",
        "id": 176979263,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881343
    },
    {
        "content": "<blockquote>\n<p>cool, I'm doing a local build too</p>\n</blockquote>\n<p>I'm just doing a <code>./x.py build -i</code> so I guess i'll find out</p>",
        "id": 176979268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881346
    },
    {
        "content": "<p>yeah heh</p>",
        "id": 176979276,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881351
    },
    {
        "content": "<p>thanks for working over this with me. if you could look at what I wrote about the REPL PRs / compiler team meetings and whatnot in your own time, and let me know, that would be great. a synchronous chat about that is less important probably!</p>",
        "id": 176979357,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> anyway, see you later. I'm off for now too.</p>",
        "id": 176979422,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh, and I don't think you pushed FYI.</p>",
        "id": 176979481,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881532
    },
    {
        "content": "<p>oh it got rejected</p>",
        "id": 176979493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881555
    },
    {
        "content": "<p>not sure why</p>",
        "id": 176979508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881579
    },
    {
        "content": "<p>sorry. probably because of my fixing-build-errors force-push while we were chatting</p>",
        "id": 176979511,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881581
    },
    {
        "content": "<p>ok</p>",
        "id": 176979519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881586
    },
    {
        "content": "<p>I'll rebase</p>",
        "id": 176979522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881589
    },
    {
        "content": "<p>or force push, and I can rebase. don't mind much.</p>",
        "id": 176979532,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881605
    },
    {
        "content": "<p>cheers!</p>",
        "id": 176979541,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569881616
    },
    {
        "content": "<p>done</p>",
        "id": 176979602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881645
    },
    {
        "content": "<p>(I get a crash trying to bootstrap =)</p>",
        "id": 176979755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569881797
    },
    {
        "content": "<p>heh not too surprised</p>",
        "id": 176983453,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569885521
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 177077340,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569950492
    },
    {
        "content": "<p>so..</p>",
        "id": 177077347,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569950493
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bar</span>: <span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Arc</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 177077351,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569950499
    },
    {
        "content": "<p>that should work,right?</p>",
        "id": 177077364,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569950509
    },
    {
        "content": "<p>but I get</p>\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: src/librustc_codegen_ssa/base.rs:164: unsized_info: invalid unsizing std::marker::PhantomData&lt;dyn Bar&gt; -&gt; std::marker::PhantomData&lt;dyn Foo&gt;\n</pre></div>",
        "id": 177077430,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569950535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let me know if you have any ideas (about this or the LLVM assertion bootstrapping issue)</p>",
        "id": 177077467,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569950565
    },
    {
        "content": "<p>there may be an easy fix to that actually... let's see</p>",
        "id": 177078207,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569951088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> added this to <code>unsized_info</code>, and the cast \"works\", but it segfaults when I try to print <code>foo</code>:</p>\n<div class=\"codehilite\"><pre><span></span>        (&amp;ty::Adt(def_a, _), &amp;ty::Adt(def_b, _))\n            if def_a.is_phantom_data() &amp;&amp; def_b.is_phantom_data() =&gt;\n        {\n            old_info.expect(&quot;unsized_info: missing old info&quot;)\n        }\n</pre></div>",
        "id": 177080743,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1569952541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> that hack seems ok for now, let's revisit that problem</p>",
        "id": 177243509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570109198
    },
    {
        "content": "<p>we gotta figure out the cause of these segfaults though</p>",
        "id": 177243514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570109204
    },
    {
        "content": "<p>sure</p>",
        "id": 177259532,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570118951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I don't know if that hack is causing the segfault... but yeah the segfault there and the weird bootstrapping LLVM error... that's beyond me!</p>",
        "id": 177259571,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570118983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I don't see any LLVM error when bootstrapping</p>",
        "id": 177367611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570214489
    },
    {
        "content": "<p>I guess maybe it doesn't get that far</p>",
        "id": 177367622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570214493
    },
    {
        "content": "<p>but those are usually good hint :)</p>",
        "id": 177367627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570214498
    },
    {
        "content": "<p>let me try rebuilding with verify-llvm-ir=true I guess</p>",
        "id": 177367752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570214569
    },
    {
        "content": "<p>oh interesting. maybe it was a consequence of <code>--keep-stage 0</code>?</p>",
        "id": 177372307,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570217931
    },
    {
        "content": "<p>or actually, of <code>-i</code></p>",
        "id": 177372356,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570217958
    },
    {
        "content": "<p>and not removing the LLVM artefacts</p>",
        "id": 177372362,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570217961
    },
    {
        "content": "<p>you saw the segfault though yes?</p>",
        "id": 177372387,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570217976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 177372394,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570217978
    },
    {
        "content": "<p>I do see a segfault</p>",
        "id": 177374573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570219542
    },
    {
        "content": "<p>I'm trying to reproduce it in some way in a debugger</p>",
        "id": 177374585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570219558
    },
    {
        "content": "<p>and failing</p>",
        "id": 177374590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570219559
    },
    {
        "content": "<p>like, I literally cannot figure out what command to run  :)</p>",
        "id": 177374643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570219578
    },
    {
        "content": "<p>the last thing I see is</p>",
        "id": 177374658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570219595
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>     Running `/home/nmatsakis/versioned/rust-2/build/bootstrap/debug/rustc --edition=2018 --crate-name core\n</pre></div>",
        "id": 177374666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570219604
    },
    {
        "content": "<p>and the \"boostrap rustc\" is kind of impossible to run from outside x.py in my experience :)</p>",
        "id": 177374671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570219613
    },
    {
        "content": "<p>one can add --on-fail=env to print the environment IIRC</p>",
        "id": 177374867,
        "sender_full_name": "lqd",
        "timestamp": 1570219774
    },
    {
        "content": "<p>likely that --on-fail=bash might work to launch a debugger from there but I've never tried that</p>",
        "id": 177374957,
        "sender_full_name": "lqd",
        "timestamp": 1570219831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> whenever you see bootstrap rustc you should be able to easily replace it with the stage1/bin/rustc or so and that would generally just work</p>",
        "id": 177375709,
        "sender_full_name": "simulacrum",
        "timestamp": 1570220418
    },
    {
        "content": "<p>you might need to throw in a few env variables, but most of the time you can just SOME_ENV=foo and it'll be fine</p>",
        "id": 177375726,
        "sender_full_name": "simulacrum",
        "timestamp": 1570220445
    },
    {
        "content": "<p>lately i've foudn that is not true</p>",
        "id": 177375750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570220478
    },
    {
        "content": "<p>that used to be true</p>",
        "id": 177375751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570220479
    },
    {
        "content": "<p>I'll give it a try though, maybe I'm wrong</p>",
        "id": 177375756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570220486
    },
    {
        "content": "<blockquote>\n<p>likely that --on-fail=bash might work to launch a debugger from there but I've never tried that</p>\n</blockquote>\n<p>that used to work but it stopped working for me at some point</p>",
        "id": 177375768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570220498
    },
    {
        "content": "<p>yeah I now remember there's an issue saying it doesn't work anymore :/</p>",
        "id": 177375871,
        "sender_full_name": "lqd",
        "timestamp": 1570220599
    },
    {
        "content": "<p>ah, good news</p>",
        "id": 177375942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570220653
    },
    {
        "content": "<p>for some reason I am now seeing the actual rustc: command output...</p>",
        "id": 177375948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570220666
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>rustc command: &quot;LD_LIBRARY_PATH&quot;=&quot;/home/nmatsakis/versioned/rust-2/build/x86_64-unknown-linux-gnu/stage1/lib:/home/nmatsakis/versioned/rust-2/build/x86_64-unknown-linux-gnu/stage1-std/release/deps:/home/nma\\\ntsakis/versioned/rust-2/build/x86_64-unknown-linux-gnu/stage0/lib&quot;\n</pre></div>\n\n\n<p>copying and pasting <em>that</em> usually works for me...</p>",
        "id": 177375965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570220685
    },
    {
        "content": "<p>hm strange.. I would not expect that to be the case.</p>",
        "id": 177376003,
        "sender_full_name": "simulacrum",
        "timestamp": 1570220725
    },
    {
        "content": "<p>maybe for stage 0 but not stage 1</p>",
        "id": 177376010,
        "sender_full_name": "simulacrum",
        "timestamp": 1570220733
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> so I am seeing this</p>\n<div class=\"codehilite\"><pre><span></span>Invalid InsertValueInst operands!\n  %38 = insertvalue { {}*, [3 x i64]* } %37, i64* getelementptr inbounds ([3 x i64], [3 x i64]* bitcast ({ void (%&quot;fmt::builders::PadAdapter&quot;*)*, i64, i64, i1 (%&quot;fmt::builders::PadAdapter&quot;*, [0 x i8]*, i64)\\\n*, i1 (%&quot;fmt::builders::PadAdapter&quot;*, i32)*, i1 (%&quot;fmt::builders::PadAdapter&quot;*, %&quot;fmt::Arguments&quot;*)* }* @3 to [3 x i64]*), i32 0, i32 0), 1, !dbg !189\nin function _ZN4core3fmt8builders10PadAdapter4wrap28_$u7b$$u7b$closure$u7d$$u7d$17he99dacb16de69f1eE\nLLVM ERROR: Broken function found, compilation aborted!\n``\n\nnow that I rebuilt with llvm assertions\n</pre></div>",
        "id": 177376077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570220781
    },
    {
        "content": "<p>although hmm</p>",
        "id": 177376087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570220789
    },
    {
        "content": "<blockquote>\n<p>I do see a segfault</p>\n</blockquote>\n<p>for the <code>Arc</code> case, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 177376235,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570220938
    },
    {
        "content": "<p>ah righg</p>",
        "id": 177376266,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570220976
    },
    {
        "content": "<p>so this looks like a</p>",
        "id": 177376291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570220994
    },
    {
        "content": "<p><code>&amp;mut dyn Write -&gt; &amp;mut dyn Write</code> coercion</p>",
        "id": 177376300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221002
    },
    {
        "content": "<p>going wrong somehow ;)</p>",
        "id": 177376341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221004
    },
    {
        "content": "<p>hmm</p>",
        "id": 177376352,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221015
    },
    {
        "content": "<p>how is that a coercion even though?</p>",
        "id": 177376358,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221025
    },
    {
        "content": "<p>the same type</p>",
        "id": 177376364,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221028
    },
    {
        "content": "<p>it is</p>",
        "id": 177376368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221030
    },
    {
        "content": "<p>because of lifetime bounds</p>",
        "id": 177376371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221034
    },
    {
        "content": "<p>oh</p>",
        "id": 177376375,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221037
    },
    {
        "content": "<p>duh</p>",
        "id": 177376376,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221038
    },
    {
        "content": "<p>so... maybe I removed too much of the previous code? hmm</p>",
        "id": 177376406,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221069
    },
    {
        "content": "<p>honestly I'm having a hard time even parsing that type ;)</p>",
        "id": 177376432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221091
    },
    {
        "content": "<p>which <em>only</em> had to deal with lifetime bound coercions for trait objects</p>",
        "id": 177376437,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221098
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  %38 = insertvalue { {}*, [3 x i64]* } %37, i64* getelementptr inbounds ([3 x i64], [3 x i64]* bitcast ({ void (%&quot;fmt::builders::PadAdapter&quot;*)*, i64, i64, i1 (%&quot;fmt::builders::PadAdapter&quot;*, [0 x i8]*, i64)\\\n*, i1 (%&quot;fmt::builders::PadAdapter&quot;*, i32)*, i1 (%&quot;fmt::builders::PadAdapter&quot;*, %&quot;fmt::Arguments&quot;*)* }* @3 to [3 x i64]*), i32 0, i32 0), 1, !dbg !189\n</pre></div>",
        "id": 177376439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221100
    },
    {
        "content": "<p>since auto-traits were basically irrelevant</p>",
        "id": 177376443,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221103
    },
    {
        "content": "<p>yeah... that's not exactly readable</p>",
        "id": 177376454,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221114
    },
    {
        "content": "<p>presumably called for <code>println!</code> stmt or such though</p>",
        "id": 177376499,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221124
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  %38 =\n  insertvalue { {}*, [3 x i64]* } %37,\n  i64* getelementptr inbounds (\n      [3 x i64],\n      [3 x i64]* bitcast (\n          {\n              void (%&quot;fmt::builders::PadAdapter&quot;*)*, i64, i64, i1 (%&quot;fmt::builders::PadAdapter&quot;*, [0 x i8]*, i64)*, i1 (%&quot;fmt::builders::PadAdapter&quot;*, i32)*, i1 (%&quot;fmt::builders::PadAdapter&quot;*, %&quot;fmt::Argume\\\nnts&quot;*)*\n          }* @3\n          to\n          [3 x i64]*\n      ),\n      i32 0,\n      i32 0\n  ),\n  1,\n  !dbg !189\n</pre></div>",
        "id": 177376585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221214
    },
    {
        "content": "<p>used emacs to at least pare up all the delimiters :)</p>",
        "id": 177376592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221223
    },
    {
        "content": "<p>I guess that's some kind of vtable cast</p>",
        "id": 177376657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221250
    },
    {
        "content": "<p><a href=\"https://llvm.org/docs/LangRef.html#id192\" target=\"_blank\" title=\"https://llvm.org/docs/LangRef.html#id192\">insertvalue llvm docs</a></p>",
        "id": 177376718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221320
    },
    {
        "content": "<p>yes... I think so.</p>",
        "id": 177376722,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221324
    },
    {
        "content": "<p>ok I sort of see what it's complaining about</p>",
        "id": 177376747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221360
    },
    {
        "content": "<p>the gep winds up pointing at a specific <code>i64</code> from the vtable</p>",
        "id": 177376792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221373
    },
    {
        "content": "<p>but it is being inserted into a <code>[3 x i164]*</code> field</p>",
        "id": 177376800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221383
    },
    {
        "content": "<p>it kind of looks like there is one argument too many on the gep</p>",
        "id": 177376804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221389
    },
    {
        "content": "<p>i.e., instead of gep(..., 0, 0) it should be gep(..., 0)</p>",
        "id": 177376814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221408
    },
    {
        "content": "<p>is this maybe ringing any bells for any of your edits? :)</p>",
        "id": 177376820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221417
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 177376831,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221425
    },
    {
        "content": "<p>I'm guessing it has to do something with the code that finds a \"child\" vtable</p>",
        "id": 177376836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221438
    },
    {
        "content": "<p>I do this: <code>bx.struct_gep(source_ptr, offset as u64)</code></p>",
        "id": 177376837,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221441
    },
    {
        "content": "<p>this is this code</p>",
        "id": 177376851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221464
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;FOO: unsized_info: vtable={:?} offset={:?} &quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vtable</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">struct_gep</span><span class=\"p\">(</span><span class=\"n\">source_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>",
        "id": 177376853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221466
    },
    {
        "content": "<p>the Rust interface to LLVM is very strongly-typed so I don't see how that can go wrong</p>",
        "id": 177376854,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221467
    },
    {
        "content": "<p>unless it's simply the wrong offset?</p>",
        "id": 177376865,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221477
    },
    {
        "content": "<p>no, it's more the number of arugments</p>",
        "id": 177376954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221522
    },
    {
        "content": "<p>than the value of them</p>",
        "id": 177376957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221524
    },
    {
        "content": "<p>I don't think the rust interface to llvm is this strongly typed</p>",
        "id": 177376961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221530
    },
    {
        "content": "<p>it doesn't reflect the <strong>llvm types</strong> of what's inside, does it?</p>",
        "id": 177376968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221538
    },
    {
        "content": "<p>hmm</p>",
        "id": 177376969,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221539
    },
    {
        "content": "<p>of what's inside ptr's? no</p>",
        "id": 177376992,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221559
    },
    {
        "content": "<p>you're right there</p>",
        "id": 177376995,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221563
    },
    {
        "content": "<p>anyway I'm trying to dump out sme debug print outs</p>",
        "id": 177377001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221570
    },
    {
        "content": "<p>this is also an inbounds gep</p>",
        "id": 177377021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221591
    },
    {
        "content": "<p>so maybe it's not that code</p>",
        "id": 177377024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221594
    },
    {
        "content": "<p><code>struct_gep</code> <em>is</em> the right call, isn't it?</p>",
        "id": 177377123,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221654
    },
    {
        "content": "<p>I figured out the vtable is stored as a struct not an array</p>",
        "id": 177377133,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221667
    },
    {
        "content": "<p>so presume it is</p>",
        "id": 177377136,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221670
    },
    {
        "content": "<p>not sure</p>",
        "id": 177377248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221761
    },
    {
        "content": "<p>I was doing <code>inbounds_gep</code> before, and that created problems</p>",
        "id": 177377260,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221774
    },
    {
        "content": "<p>so thismakes sense</p>",
        "id": 177377262,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221778
    },
    {
        "content": "<p>I forget the difference to be totally honest :P</p>",
        "id": 177377276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221791
    },
    {
        "content": "<p><code>struct_gep</code> isn't translated to that LLVM at any stage,  is it?</p>",
        "id": 177377285,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221796
    },
    {
        "content": "<p>heh yeah</p>",
        "id": 177377291,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221801
    },
    {
        "content": "<p>it's weird to me</p>",
        "id": 177377293,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570221803
    },
    {
        "content": "<p>don't think so</p>",
        "id": 177377294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221804
    },
    {
        "content": "<p>but I'm looking at the backtrace</p>",
        "id": 177377299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221807
    },
    {
        "content": "<p>still trying to figure out where this particular llvm instruction is being generated</p>",
        "id": 177377307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221815
    },
    {
        "content": "<p>I'm not sure it's that code you cited</p>",
        "id": 177377316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221820
    },
    {
        "content": "<p>doesn't <em>quite</em> fit</p>",
        "id": 177377319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221824
    },
    {
        "content": "<p><code>ProjectionElem::Index</code> uses <code>inbounds_gep</code></p>",
        "id": 177377329,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1570221830
    },
    {
        "content": "<p>yeah</p>",
        "id": 177377335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221840
    },
    {
        "content": "<p>I saw that...</p>",
        "id": 177377375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221844
    },
    {
        "content": "<p>/me runs in gdb to get backtrace</p>",
        "id": 177377409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221873
    },
    {
        "content": "<p>oh I should disable threading</p>",
        "id": 177377427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221896
    },
    {
        "content": "<p>that's probably confusing a lot of things</p>",
        "id": 177377432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221900
    },
    {
        "content": "<p>how...do you do that</p>",
        "id": 177377466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221931
    },
    {
        "content": "<p>-Ccodegen-units=1 is a good start</p>",
        "id": 177377477,
        "sender_full_name": "simulacrum",
        "timestamp": 1570221956
    },
    {
        "content": "<p>-Zno-parallel-llvm also</p>",
        "id": 177377539,
        "sender_full_name": "simulacrum",
        "timestamp": 1570221988
    },
    {
        "content": "<p>(maybe just the latter is enough)</p>",
        "id": 177377545,
        "sender_full_name": "simulacrum",
        "timestamp": 1570221995
    },
    {
        "content": "<p>yeah I just came to both of those :)</p>",
        "id": 177377548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221997
    },
    {
        "content": "<p>thanks</p>",
        "id": 177377550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570221998
    },
    {
        "content": "<p>I don't think it hurts here either way, I'll add 'em both</p>",
        "id": 177377559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222006
    },
    {
        "content": "<p>hmm that causes a segfault and not the llvm assertion</p>",
        "id": 177377846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222269
    },
    {
        "content": "<p>so maybe that was a red herring</p>",
        "id": 177377849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> there's projections being done for complex ADT upcasting... and I'm changing how that code is hit</p>",
        "id": 177377865,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570222295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> it looks like struct-gep <em>is</em> compiled to inbounds gep</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">Value</span> <span class=\"o\">*</span><span class=\"nf\">CreateStructGEP</span><span class=\"p\">(</span><span class=\"n\">Type</span> <span class=\"o\">*</span><span class=\"n\">Ty</span><span class=\"p\">,</span> <span class=\"n\">Value</span> <span class=\"o\">*</span><span class=\"n\">Ptr</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"n\">Idx</span><span class=\"p\">,</span>\n                         <span class=\"k\">const</span> <span class=\"n\">Twine</span> <span class=\"o\">&amp;</span><span class=\"n\">Name</span> <span class=\"o\">=</span> <span class=\"s\">&quot;&quot;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">CreateConstInBoundsGEP2_32</span><span class=\"p\">(</span><span class=\"n\">Ty</span><span class=\"p\">,</span> <span class=\"n\">Ptr</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Idx</span><span class=\"p\">,</span> <span class=\"n\">Name</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n</pre></div>",
        "id": 177378003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222430
    },
    {
        "content": "<p>ahh</p>",
        "id": 177378010,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570222438
    },
    {
        "content": "<p>so that explains <em>that</em></p>",
        "id": 177378011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222440
    },
    {
        "content": "<p>yeah I wondered</p>",
        "id": 177378057,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570222452
    },
    {
        "content": "<p>can you remind me what you are trying to do here :)</p>",
        "id": 177378075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222480
    },
    {
        "content": "<p>like, what vtable layout you have created</p>",
        "id": 177378080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222487
    },
    {
        "content": "<p>it's basically a big array</p>",
        "id": 177378082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222490
    },
    {
        "content": "<p>with \"subvtables\" embedded in it, right?</p>",
        "id": 177378090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222496
    },
    {
        "content": "<p>er, \"Super\" vtables I guess :)</p>",
        "id": 177378110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222519
    },
    {
        "content": "<p>also, what is the offset measured in?</p>",
        "id": 177378500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222808
    },
    {
        "content": "<p>I'm pretty sure the assert was not wrong, but something about <code>-Zno-parallel-llvm</code> leads to us squelching the error <em>somehow</em></p>",
        "id": 177378526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222825
    },
    {
        "content": "<p>I think the struct_gep is just wrong</p>",
        "id": 177378541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222839
    },
    {
        "content": "<p>the type that <em>LLVM</em> sees for this vtable is <code>[3 x i64]*</code> basically -- so calling <code>struct_gep(0)</code>, as you are doing, inserts a in-bounds gep of <code>[0, 0]</code>. In other words, you don't have a pointer to a struct from LLVM's POV, and that method is tailored to access a field of a struct.</p>",
        "id": 177378635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222906
    },
    {
        "content": "<p>I suspect you want a gep with one argument, to basically simulate (in C) <code>ptr + offset</code></p>",
        "id": 177378715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222938
    },
    {
        "content": "<p>but the question is what the offset is measured in (I'd sort of expect \"words\", in which case we have the wrong llvm type)</p>",
        "id": 177378747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222957
    },
    {
        "content": "<p>I guess that when bootstrapping the offset should always be zero</p>",
        "id": 177378768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570222974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> so I changed to <code>inbounds_gep</code> to remove the extra <code>0</code> and I am bootstrapping; I pushed a commit for now to your branch, but the code is almost certainly wrong for <code>offset != 0</code></p>",
        "id": 177379213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> offset is measured in... not sure? eddyb just told me it was the right type layout</p>",
        "id": 177379248,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570223385
    },
    {
        "content": "<p>yeah, it segfaults fo <code>offset != 0</code></p>",
        "id": 177379310,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570223412
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> offset is measured in... not sure? eddyb just told me it was the right type layout</p>\n</blockquote>\n<p>I'll take a look later, but I suspect it's words</p>",
        "id": 177379319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223428
    },
    {
        "content": "<p>anyway, thanks for explaining</p>",
        "id": 177379335,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570223440
    },
    {
        "content": "<p>yeah</p>",
        "id": 177379338,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570223446
    },
    {
        "content": "<p>probably</p>",
        "id": 177379343,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570223448
    },
    {
        "content": "<p>one sec, I can look now</p>",
        "id": 177379351,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570223454
    },
    {
        "content": "<p>I'm not sure why the type is <code>[i64 x 3]*</code> and not just <code>i64*</code> or somethign</p>",
        "id": 177379478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yep, words</p>",
        "id": 177379480,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570223543
    },
    {
        "content": "<p>it seems like <code>i64*</code> is what we really want</p>",
        "id": 177379486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223550
    },
    {
        "content": "<p><code>const_usize</code> is used to generate some values</p>",
        "id": 177379489,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570223555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> would probably have informed opinions here</p>",
        "id": 177379504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570223570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> grep for <code>pub fn get_vtable</code> if you want to see how the vtable is constructed now</p>",
        "id": 177379852,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570223834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> finding it hard to discern why the type of the vtable in LLVM is <code>[i64 x 3]*</code>... I think that's what's causing the segfault</p>",
        "id": 177385383,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570229182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> did you push any updates?</p>",
        "id": 177531905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570463104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> pushed (last commit is experimentation).</p>",
        "id": 177532350,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570463386
    },
    {
        "content": "<p>basically, I think <code>struct_gep</code> somehow <em>feels</em> right still, given the vtable is a struct, and in practical terms it seems to get <em>more</em> working. the LLVM vtable type still seems wrong though, which is odd.</p>",
        "id": 177532432,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570463420
    },
    {
        "content": "<p>and I know <code>struct_gep</code> apparently passes one too many args, but maybe there's another cause of that? it's just all very weird to me</p>",
        "id": 177532476,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570463444
    },
    {
        "content": "<p>anyway, I still get the segfault  here</p>",
        "id": 177532483,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570463451
    },
    {
        "content": "<p>segfaults on the last <code>println</code> of <a href=\"https://gist.github.com/2e47ba39c1bd5b3a4dcfff5d2e5660e5\" target=\"_blank\" title=\"https://gist.github.com/2e47ba39c1bd5b3a4dcfff5d2e5660e5\">this</a></p>",
        "id": 177532522,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570463478
    },
    {
        "content": "<blockquote>\n<p>basically, I think <code>struct_gep</code> somehow <em>feels</em> right still, given the vtable is a struct, and in practical terms it seems to get <em>more</em> working. the LLVM vtable type still seems wrong though, which is odd.</p>\n</blockquote>\n<p>struct-gep is only right if we have an accurate type for the vtable</p>",
        "id": 177542594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570470308
    },
    {
        "content": "<p>hmm with my changes I am getting these errors, <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>, which seem familiar:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0283]: type annotations needed: cannot resolve `dyn emitter::Emitter + rustc_data_structures::sync::Send: rustc_data_structures::sync::Send`\n   --&gt; src/librustc_errors/lib.rs:427:13\n    |\n427 |             emitter,\n    |             ^^^^^^^\n    |\n    = note: required for the cast to the object type `dyn emitter::Emitter + rustc_data_structures::sync::Send`\n\nerror[E0283]: type annotations needed: cannot resolve `dyn emitter::Emitter + rustc_data_structures::sync::Send: rustc_data_structures::sync::Send`\n   --&gt; src/librustc_errors/lib.rs:446:17\n    |\n446 |                 emitter,\n    |                 ^^^^^^^\n    |\n    = note: required for the cast to the object type `dyn emitter::Emitter + rustc_data_structures::sync::Send`\n\nerror[E0283]: type annotations needed: cannot resolve `dyn SourceMapper + rustc_data_structures::sync::Send + rustc_data_structures::sync::Sync: rustc_data_structures::sync::Sync`\n    --&gt; src/librustc_errors/emitter.rs:1480:55\n     |\n1480 |             let suggestions = suggestion.splice_lines(&amp;**sm);\n     |                                                       ^^^^^\n     |\n     = note: required for the cast to the object type `dyn SourceMapper + rustc_data_structures::sync::Send + rustc_data_structures::sync::Sync`\n</pre></div>",
        "id": 177542632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570470353
    },
    {
        "content": "<p>I think we were going to add some sort of .. hack or <em>something</em> to work around these, right?</p>",
        "id": 177542688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570470366
    },
    {
        "content": "<p>I guess building with parallel-compiler=true ought to be enough for now</p>",
        "id": 177542715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570470401
    },
    {
        "content": "<p>we already added the hack, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 177544231,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570471367
    },
    {
        "content": "<p>at least, I added something</p>",
        "id": 177544241,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570471376
    },
    {
        "content": "<p>see the bit where I handle auto traits separately</p>",
        "id": 177544270,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570471397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm stil doing the hack to bootstrap by building stage 0 master than stage 1 of this branch on top of it</p>",
        "id": 177544397,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570471476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> BTW was trying to get the vtable ptr to be the right think using <code>const_ptrcast</code> in my \"experimentation\" commit</p>",
        "id": 177544449,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570471514
    },
    {
        "content": "<p>doesn't seem to have worked</p>",
        "id": 177544458,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570471519
    },
    {
        "content": "<p>that is, it's not hurt the situation, but it's not made the second <code>println!</code> in my Gist work either</p>",
        "id": 177544486,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570471535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ok so now i'm seeing <em>this</em></p>\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: src/librustc_codegen_ssa/base.rs:164: unsized_info: invalid unsizing std::marker::PhantomData&lt;dyn rustc_errors::SourceMapper + std::marker::Send + std::marker::Sync&gt; -&gt; std::marker::PhantomData&lt;dyn rustc_errors::SourceMapper + std::marker\\\n::Send + std::marker::Sync&gt;\n</pre></div>\n\n\n<p>I think you pushed something realted to that?</p>",
        "id": 177553041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570477627
    },
    {
        "content": "<p>(I'm not yet using the latest tip of your branch)</p>",
        "id": 177553053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570477633
    },
    {
        "content": "<p>ok but I see it has a workaround for that</p>",
        "id": 177553076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570477646
    },
    {
        "content": "<p>Yeah exactly</p>",
        "id": 177560075,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570481928
    },
    {
        "content": "<p>Latest commit fixes that (maybe?)</p>",
        "id": 177560176,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570481990
    },
    {
        "content": "<p>But still issue with Arc</p>",
        "id": 177560190,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570482000
    },
    {
        "content": "<p>So I'm trying to summon <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 177561733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570482955
    },
    {
        "content": "<p>in any case I think the right fix here -- at least for short-term -- is to cast the vtable to a u64* and do an in-bounds gep</p>",
        "id": 177562018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570483169
    },
    {
        "content": "<p>and then cast back</p>",
        "id": 177562019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570483171
    },
    {
        "content": "<p>it doesn't feel the most elegant and it seems like our \"typing\" of vtables in general could use to be updated</p>",
        "id": 177562026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570483185
    },
    {
        "content": "<p>ultimately the cleaner way would probably be to have an accurate Layout for the vtables, so we can cast to that and do a struct gep to the appropriate field</p>",
        "id": 177562641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570483628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> makes sense.</p>",
        "id": 177565896,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570486390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> could try that for now though... and leave a note. should I?</p>",
        "id": 177565909,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570486405
    },
    {
        "content": "<blockquote>\n<p>in any case I think the right fix here -- at least for short-term -- is to cast the vtable to a u64* and do an in-bounds gep</p>\n</blockquote>\n<p>I think you should try this for now</p>",
        "id": 177566272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570486717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> will do, ta</p>",
        "id": 177567459,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570487608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we want u64 and not usize?</p>",
        "id": 177569795,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570489800
    },
    {
        "content": "<p>--deleted--</p>",
        "id": 177569994,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570489993
    },
    {
        "content": "<p>--deleted--</p>",
        "id": 177569996,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570489995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> curious error now: <a href=\"https://gist.github.com/54483ab2c86451c0ba36d006f2a13c64\" target=\"_blank\" title=\"https://gist.github.com/54483ab2c86451c0ba36d006f2a13c64\">https://gist.github.com/54483ab2c86451c0ba36d006f2a13c64</a></p>",
        "id": 177570785,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570490840
    },
    {
        "content": "<p>--deleted--</p>",
        "id": 177571406,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570491566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> pushed a bit more experimentation, but now I'm skeptical that <code>src/librustc_codegen_ssa/base.rs:283</code> is the right approach / sufficient.</p>",
        "id": 177573612,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570494138
    },
    {
        "content": "<p>because it leads to <code>unsized_info</code> having to handle not only <code>PhantomData</code>, but also other types like <code>NonNull</code>... that doesn't feel right. even if there's a finite number of special cases, surely this is wrong?</p>",
        "id": 177573627,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570494187
    },
    {
        "content": "<p>the problem is assertion failures?</p>",
        "id": 177627428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570548591
    },
    {
        "content": "<p>I'll try to take a look</p>",
        "id": 177627436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570548595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> segfault with the same Gist as before. didn't try bootstrapping, so no assertion failures.</p>",
        "id": 177630498,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570550472
    },
    {
        "content": "<p>sorry for keeping on bugging you. this is a pretty gnarly issue, I hope you agree!</p>",
        "id": 177630513,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570550488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> but yeah, if you do something like this, you get an invalid types error in <code>unsized_info</code> (because it's not equipped to handle <code>NonNull</code>)...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bar</span>: <span class=\"nc\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NonNull</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Arc-bar: {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Arc-foo: {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n</pre></div>",
        "id": 177721021,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570632574
    },
    {
        "content": "<p>gnarly indeed! ping away, but I may not get time to investigate until friday</p>",
        "id": 177757684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570656309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> cheers. this is all the investigation I've managed to do so far (not sure I can do much more of the useful variety given my current level of understanding), but Friday is fine with me.</p>",
        "id": 177760110,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570658524
    },
    {
        "content": "<p>whenever you do get to it, just ping me likewise. ta.</p>",
        "id": 177760127,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570658543
    },
    {
        "content": "<p>--deleted--</p>",
        "id": 177821018,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570721120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let me know if you get around to this today :-)</p>",
        "id": 177913086,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570804818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I'll take a look now</p>",
        "id": 177928060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570814134
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 177928459,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570814402
    },
    {
        "content": "<p>BTW</p>",
        "id": 177928573,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570814465
    },
    {
        "content": "<p>I have to be honest, this whole  design process thing sounds like a lot of painful bureaucracy, and introduces many more delays.</p>",
        "id": 177928595,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570814487
    },
    {
        "content": "<p>I'm not sure I really want to go through it, considering how much effort I've put into work on my REPL anyway, and the delays so far...</p>",
        "id": 177928619,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570814511
    },
    {
        "content": "<p>it's just not very encouraging for me, when the time and it's continuing to demand from me is so great.</p>",
        "id": 177928767,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570814586
    },
    {
        "content": "<p>sorry... just had to clear that up.</p>",
        "id": 177928778,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570814595
    },
    {
        "content": "<p>I appreciate that it sounds like bureaucracy. On the other hand, I think it's the reality of contributing to a major project. Tech debt is a big problem for us right now that slows everything down. A big part of getting out from under that is trying to (a) do design more actively, (b) be a bit careful about what we land and (c) help to spread understanding by talking over and documenting our intentions.</p>",
        "id": 177928803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570814612
    },
    {
        "content": "<p>One of the biggest problems I think we have now is that we've historically had no great procs</p>",
        "id": 177928878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570814644
    },
    {
        "content": "<p>which means that big PRs can easily just get stuck</p>",
        "id": 177928888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570814652
    },
    {
        "content": "<p>sure</p>",
        "id": 177928906,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570814662
    },
    {
        "content": "<p>but</p>",
        "id": 177928909,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570814662
    },
    {
        "content": "<p>i.e., I think that if we'd had this process working smoothly from the beginning, you would have been doing it much earlier on, and thing sowuld be better.</p>",
        "id": 177928924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570814672
    },
    {
        "content": "<p>Unfortunately, it has to start somewhere.</p>",
        "id": 177928931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570814678
    },
    {
        "content": "<p>the fact I have to wait 2 weeks even to get the proposal considered, THEN a meeting booked in, THEN the meeting carried out, THEN a decision made, THEN probably more changes to the PR, THEN finally another review and acceptance</p>",
        "id": 177928972,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570814713
    },
    {
        "content": "<p>I just don't have the willpower or desire to go through that right now, I'm afraid... and not sure when I will.</p>",
        "id": 177929008,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570814746
    },
    {
        "content": "<p>I could understand if it were done fairly quickly, but it will be a month or more before a decision is made on entrance of REPL parts into the compiler, I think</p>",
        "id": 177929072,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570814775
    },
    {
        "content": "<p>so a fork sounds like the best way to go now</p>",
        "id": 177929079,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570814780
    },
    {
        "content": "<p>anyway, re. trait upcasting</p>",
        "id": 177930027,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570815388
    },
    {
        "content": "<p>thanks for taking a look. I have to be off now, but will be back later. feel free to leave notes here or on GH.</p>",
        "id": 177930053,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570815413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 177952217,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570830005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I'm looking :)</p>",
        "id": 177952627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570830416
    },
    {
        "content": "<p>I got distracted because my sister is here for a visit</p>",
        "id": 177952632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570830422
    },
    {
        "content": "<p>At the moment I'm trying to reproduce the error in gdb so I can see the stack trace</p>",
        "id": 177952641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570830430
    },
    {
        "content": "<p>this is kind of driving me crazy</p>",
        "id": 177952642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570830433
    },
    {
        "content": "<p>but I think I finally found the thing to do</p>",
        "id": 177952648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570830442
    },
    {
        "content": "<p>lol though it's not that useful</p>",
        "id": 177952667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570830464
    },
    {
        "content": "<p>heh</p>",
        "id": 177954434,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570832101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> no worries.. :-)</p>",
        "id": 177954443,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570832109
    },
    {
        "content": "<p>what's the \"thing to do then\"?</p>",
        "id": 177954453,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570832127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> as for for the PR and REPL stuff... I thought about it again, and I'm struggling to see how this can't be construed as \"experimentation under master\", which shouldn't really need an RFC or design meeting or anything like that. You know I'd be happy with a compromise like a single meeting in the next week  or 10 days to flesh things out (plus a design doc from me, if you like), but yeah, something like that would be the most I could feasibly offer, sorry.</p>",
        "id": 177955091,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570832866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I think a design doc is a great start -- personally I think that we probably want to aim for design doc and then FCP, which may lead to a design meeting if there are objections (but with a select few -- maybe PR author and those listing concerns) which can be more adhoc</p>",
        "id": 177967314,
        "sender_full_name": "simulacrum",
        "timestamp": 1570849086
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 177968540,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570851515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Oh, that sounds much more bearable. I could probably be happy with something like that. If <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thinks that’s a reasonable way to go too, then let’s proceed with that.</p>",
        "id": 177968619,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570851646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I agree with <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  that a design doc is a good start. If the changes are simple enough, maybe that's all we need.</p>",
        "id": 177993879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570894444
    },
    {
        "content": "<p>Regarding your branch:</p>\n<p>I'm not quite sure what the problem is, but I obesrved that this example fails all on its own</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">any</span>::<span class=\"n\">Any</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">rc</span>::<span class=\"n\">Rc</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Rc</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Any</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Rc</span><span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Any</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 177993884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570894473
    },
    {
        "content": "<p>honestly, this seems like a bit of a pre-existing bug -- at minimum, it's very confusing what the \"llvm type\" of a vtable is</p>",
        "id": 177995421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570896773
    },
    {
        "content": "<p>(ps, we're going to be needing a design doc for this work, too, I think; I'm happy to help some with that)</p>",
        "id": 177995439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570896821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Okay, that sounds like we could have a compromise, hopefully... thanks for understanding. I'll create that design doc this weekend if possible. Should it be a PR to the compiler team repo?</p>",
        "id": 177998846,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570901882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I agree... the LLVM type of the vtable is a point of confusion. Because the rustc type is a struct, that may be having odd consequences? Yes, I think we mentioned a design doc when we originally discussed this effort months ago. I know someone else had volunteered to help with that then, but forget who. But if we could do it together, that may be workable anyway.</p>",
        "id": 177998900,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570901970
    },
    {
        "content": "<blockquote>\n<p>I'll create that design doc this weekend if possible. Should it be a PR to the compiler team repo?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> just start with a hackmd or something</p>",
        "id": 178010449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570921480
    },
    {
        "content": "<p>Will do, ta.</p>",
        "id": 178010569,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1570921739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> to expand a bit on the vtable type, it seems like <em>some</em> code expects <code>[i64 x 3]*</code> and <em>some</em> code expects <code>i64*</code> and I can't quite understand why that would be</p>",
        "id": 178087980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571045893
    },
    {
        "content": "<p>tbh I don't fully know where <em>either</em> of those types are coming from anymore, so I guess I would need to dig a bit more into it</p>",
        "id": 178087997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571045913
    },
    {
        "content": "<p>but e.g. this error that I see when bootstrapping</p>\n<div class=\"codehilite\"><pre><span></span>Invalid InsertValueInst operands!\n  %8 = insertvalue { i64*, i64* } %7, [3 x i64]* bitcast ({ void (%&quot;cstore::CrateMetadata&quot;*)*, i64, i64, i64 (%&quot;cstore::CrateMetadata&quot;*)* }* @458 to [3 x i64]*), 1, !dbg !69145\nin function _ZN14rustc_metadata11cstore_impl94_$LT$impl$u20$rustc..middle..cstore..CrateStore$u20$for$u20$rustc_metadata..cstore..CStore$GT$20crate_data_as_rc_any17he9ec2a22b2b45625E\n</pre></div>",
        "id": 178088043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571045958
    },
    {
        "content": "<p>seems to be arising out of this confusion</p>",
        "id": 178088047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571045965
    },
    {
        "content": "<p>in this case, we expect a <code>i64*</code></p>",
        "id": 178088049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571045969
    },
    {
        "content": "<p>the annoying thing being that we <em>HAVE</em> a <code>i64*</code> and we bitcast it to <code>[i64 x 3]*</code>, but I know that if you remove that bitcast, it does much earlier :)</p>",
        "id": 178088121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571046012
    },
    {
        "content": "<p>still, hmm, looking at the logs the <code>old_info</code> is <em>always</em> a <code>[3 x i64]*</code></p>",
        "id": 178088163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571046084
    },
    {
        "content": "<p>so maybe the problem is somewhere <em>else</em></p>",
        "id": 178088166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571046088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> btw, do you build with </p>\n<div class=\"codehilite\"><pre><span></span>[llvm]\nassertions = true\n</pre></div>\n\n\n<p>I am giving that a try now, I forgot this required an extra step</p>",
        "id": 178088608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571046582
    },
    {
        "content": "<p>also, pushed a few commits</p>",
        "id": 178088668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571046616
    },
    {
        "content": "<p>Ah, nice, enabling llvm.assertions causes some errors earlier</p>",
        "id": 178092126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571049831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I don’t believe so (away from computer now). But fair point.</p>",
        "id": 178115572,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571068829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> That’s annoying about the different LLVM types, but good spot.</p>",
        "id": 178115601,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571068862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh, I had set assertions on... that probably explains why I got that error previously</p>",
        "id": 178122663,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571074759
    },
    {
        "content": "<p>the bootstrapping one</p>",
        "id": 178122674,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571074772
    },
    {
        "content": "<p>a couple of weeks ago</p>",
        "id": 178122675,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571074773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> seems good</p>",
        "id": 178141052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571088702
    },
    {
        "content": "<p>digging a bit more it seems the llvm version of <code>std::ptr::NonNull&lt;std::rc::RcBox&lt;dyn std::any::Any&gt;&gt;</code> is <code>{i64*,i64*}</code> but (e.g.) <code>Box&lt;dyn Any + Send&gt;</code> is <code>{ {}*, [3 x i64]* }</code></p>",
        "id": 178151354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571100408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> huh. I'm not sure what to make of that!</p>",
        "id": 178156985,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571109451
    },
    {
        "content": "<p>we need consistency though, either way (which is the better LLVM type?)</p>",
        "id": 178156992,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571109468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> yeah I'm not quite sure</p>",
        "id": 178219694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571163399
    },
    {
        "content": "<p>I pinged <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> and they  wrote this:</p>\n<blockquote>\n<p>years ago I wasted a few months trying to help with the LLVM pointee type removal<br>\nspecifically so we could unpack newtypes and stuff. this best-effort approach was basically the fallback<br>\nthe reason we even do pointee types anymore is LLVM still relies on them in places, frustratingly enough<br>\nit's the same reason removing them is so hard<br>\nanyway the trick is to 1. not expect anything 2. always cast to scalar_pair_element_type_of or w/e</p>\n</blockquote>\n<p>which seems pretty close to what we're already doing, so I'm not quite sure what the problem is</p>",
        "id": 178219771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571163449
    },
    {
        "content": "<p>yeah hmm</p>",
        "id": 178219920,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571163520
    },
    {
        "content": "<p>should we be bitcasting rather than pointer-casting?</p>",
        "id": 178219941,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571163528
    },
    {
        "content": "<p>not sure of the exact difference in fact, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 178219949,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571163534
    },
    {
        "content": "<p>I see both are done in existing code...</p>",
        "id": 178219961,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571163542
    },
    {
        "content": "<p>So let me drop down a few notes</p>",
        "id": 178220261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571163734
    },
    {
        "content": "<p>What happens is that we get a <code>Rc&lt;dyn Foo&gt;</code> and we want to \"upcast\" it to <code>Rc&lt;dyn Foo&gt;</code></p>",
        "id": 178220289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571163760
    },
    {
        "content": "<p>we take the old info, do a \"zero\" adjustment to it, and return back a <code>OperandPair</code> or whatever; the types of the 'old info' in this bit of code seems to be <code>[3 x i64]*</code></p>",
        "id": 178220354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571163821
    },
    {
        "content": "<p>hmm the MIR is:</p>",
        "id": 178220363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571163830
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>fn  bar() -&gt; std::rc::Rc&lt;dyn std::any::Any&gt; {\n    let mut _0: std::rc::Rc&lt;dyn std::any::Any&gt;; // return place in scope 0 at /home/nmatsakis/tmp/any_any.rs:8:13: 8:24\n    let mut _1: std::rc::Rc&lt;dyn std::any::Any&gt;; // in scope 0 at /home/nmatsakis/tmp/any_any.rs:9:5: 9:10\n    let mut _2: std::rc::Rc&lt;dyn std::any::Any&gt;; // in scope 0 at /home/nmatsakis/tmp/any_any.rs:9:5: 9:10\n\n    bb0: {\n        StorageLive(_1);                 // bb0[0]: scope 0 at /home/nmatsakis/tmp/any_any.rs:9:5: 9:10\n        StorageLive(_2);                 // bb0[1]: scope 0 at /home/nmatsakis/tmp/any_any.rs:9:5: 9:10\n        _2 = const foo() -&gt; bb1;         // bb0[2]: scope 0 at /home/nmatsakis/tmp/any_any.rs:9:5: 9:10\n                                         // ty::Const\n                                         // + ty: fn() -&gt; std::rc::Rc&lt;(dyn std::any::Any + &#39;static)&gt; {foo}\n                                         // + val: Scalar(&lt;ZST&gt;)\n                                         // mir::Constant\n                                         // + span: /home/nmatsakis/tmp/any_any.rs:9:5: 9:8\n                                         // + literal: Const { ty: fn() -&gt; std::rc::Rc&lt;(dyn std::any::Any + &#39;static)&gt; {foo}, val: Scalar\\\n(&lt;ZST&gt;) }\n    }\n\n    bb1: {\n        _1 = move _2 as std::rc::Rc&lt;dyn std::any::Any&gt; (Pointer(Unsize)); // bb1[0]: scope 0 at /home/nmatsakis/tmp/any_any.rs:9:5: 9:10\n        StorageDead(_2);                 // bb1[1]: scope 0 at /home/nmatsakis/tmp/any_any.rs:9:9: 9:10\n        _0 = move _1 as std::rc::Rc&lt;dyn std::any::Any&gt; (Pointer(Unsize)); // bb1[2]: scope 0 at /home/nmatsakis/tmp/any_any.rs:9:5: 9:10\n        StorageDead(_1);                 // bb1[3]: scope 0 at /home/nmatsakis/tmp/any_any.rs:10:1: 10:2\n        return;                          // bb1[4]: scope 0 at /home/nmatsakis/tmp/any_any.rs:10:2: 10:2\n    }\n}\n</pre></div>",
        "id": 178220475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571163894
    },
    {
        "content": "<p>so I think what happens is that when we create the \"pair\" for <code>_0</code>, we associated it with the two llvm values, and they have the <code>[3 x i64]*</code> type</p>",
        "id": 178220547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571163937
    },
    {
        "content": "<p>then the <code>return</code> tries to use insertvalue to build the return value</p>",
        "id": 178220553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571163947
    },
    {
        "content": "<p>but at that point the types disagree</p>",
        "id": 178220567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571163953
    },
    {
        "content": "<p>some kind of adaptation is missing</p>",
        "id": 178220579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571163957
    },
    {
        "content": "<p>Some pointers <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> to relevant bits of source:</p>\n<ul>\n<li>the <a href=\"https://github.com/rust-lang/rust/blob/83bd038de97941ead4965914ea07e32cf2acf0c8/src/librustc_codegen_ssa/base.rs#L123-L128\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/83bd038de97941ead4965914ea07e32cf2acf0c8/src/librustc_codegen_ssa/base.rs#L123-L128\"><code>unsized_info</code></a> function is the one doing the \"upcast\" (in this case, a noop)</li>\n<li>it <a href=\"https://github.com/rust-lang/rust/blob/83bd038de97941ead4965914ea07e32cf2acf0c8/src/librustc_codegen_ssa/base.rs#L160-L161\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/83bd038de97941ead4965914ea07e32cf2acf0c8/src/librustc_codegen_ssa/base.rs#L160-L161\">casts the oldinfo</a> into <code>i64*</code> and then <a href=\"https://github.com/rust-lang/rust/blob/83bd038de97941ead4965914ea07e32cf2acf0c8/src/librustc_codegen_ssa/base.rs#L166-L169\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/83bd038de97941ead4965914ea07e32cf2acf0c8/src/librustc_codegen_ssa/base.rs#L166-L169\">casts back</a></li>\n<li>the actual LLVM error occurs <a href=\"https://github.com/rust-lang/rust/blob/83bd038de97941ead4965914ea07e32cf2acf0c8/src/librustc_codegen_ssa/mir/operand.rs#L443-L445\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/83bd038de97941ead4965914ea07e32cf2acf0c8/src/librustc_codegen_ssa/mir/operand.rs#L443-L445\">because <code>Some</code> is returned here</a> and the result doesn't have the type expected</li>\n</ul>",
        "id": 178220849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571164137
    },
    {
        "content": "<p>Okay let’s wait and see what he suggests. Thanks <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>.</p>",
        "id": 178224795,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571166779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I'm thinking about how we can get some of this work landed -- I hate \"open forever\" PRs -- maybe we should try to extract the \"type system\" work into something we can land and leave the codegen work as a fixme (it could just ICE for now when a non-zero offset is found, for example)</p>",
        "id": 178311211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571247616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah, true (and I hate open-forever PRs too)</p>",
        "id": 178312461,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571248445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you have any more ideas of what to try while we're waiting for eddyb to response, let me know... otherwise I can separate out the codegen stuff, add in a feature gate, and we can get the stuff working so far merged.</p>",
        "id": 178315619,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571250271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I’ll try to just get all the stuff but the codegen merged now okay? Maybe you can review?</p>",
        "id": 178670180,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571674009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> sounds great! I've not had time to do anything further yet</p>",
        "id": 178670445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571674184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> no worries. want to talk about it briefly now though? where we go from here.</p>",
        "id": 178688913,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571685994
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> sorry I'm around-ish now</p>",
        "id": 178698740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571691885
    },
    {
        "content": "<p>one question I was thinking about, did you ever solve that issue with type-checking when parallel compilation is <em>not</em> enable?</p>",
        "id": 178698767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571691903
    },
    {
        "content": "<p>I remember we had discussed various work arounds</p>",
        "id": 178698782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571691909
    },
    {
        "content": "<p>that's alright</p>",
        "id": 178698801,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571691927
    },
    {
        "content": "<p>err</p>",
        "id": 178698802,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571691928
    },
    {
        "content": "<p>I'd implemented one</p>",
        "id": 178698809,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571691933
    },
    {
        "content": "<p>and I thought it was working yes</p>",
        "id": 178698822,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571691949
    },
    {
        "content": "<p>can't remember when in the code it is though <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 178698899,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571691992
    },
    {
        "content": "<p>hmm</p>",
        "id": 178698900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571691992
    },
    {
        "content": "<p>I put it before the recent commits though</p>",
        "id": 178698911,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571692000
    },
    {
        "content": "<p>ok :)</p>",
        "id": 178698912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571692001
    },
    {
        "content": "<p>let me look...</p>",
        "id": 178698917,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571692006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it's where the obligations are generated</p>",
        "id": 178698974,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571692057
    },
    {
        "content": "<p>I forget the file for that, sorry</p>",
        "id": 178698981,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571692063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> it's ok,</p>",
        "id": 178699163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571692195
    },
    {
        "content": "<p>I'll find it soon enough :)</p>",
        "id": 178699169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571692199
    },
    {
        "content": "<p>Did you look at what it means to land the code <em>without</em> codegen changes?</p>",
        "id": 178699245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571692238
    },
    {
        "content": "<p>Presumably we have to introduce some feature gates</p>",
        "id": 178699254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571692246
    },
    {
        "content": "<p>I think we are also going to want to try and document the vtable formats</p>",
        "id": 178699274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571692260
    },
    {
        "content": "<p>I guess I need to spend a bit of time reviewing the PR again</p>",
        "id": 178699310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571692292
    },
    {
        "content": "<p>yep</p>",
        "id": 178700443,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571693191
    },
    {
        "content": "<p>it's a real pain this eh</p>",
        "id": 178700453,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571693199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> feature gate with a warning message would be ideal</p>",
        "id": 178700462,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571693211
    },
    {
        "content": "<p>that's no problem for me to do though</p>",
        "id": 178700464,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571693215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> vtable formats are pretty well-documented now I think. anyway I'll try to do this tonight or tomorrow... will leave looking at the codegen to you though. happy to chat about it again, but not sure I can offer much until an expert like you has a closer look!</p>",
        "id": 178702370,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571694837
    },
    {
        "content": "<p>sounds good</p>",
        "id": 178702573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571694988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> let us know if you have any thoughts on the above BTW :-)</p>",
        "id": 178773417,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1571762763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> so what's the latest here?</p>",
        "id": 179869973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> latest is very good. I got a few helpful tips from @eddyb to complete my implementation (it was working before, but a bit hacky). I basically need a proper test suite now. at least a minimal one, which can be expanded soon.</p>",
        "id": 179870106,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572897724
    },
    {
        "content": "<p>a review either now or once we have a few more tests would be super.</p>",
        "id": 179870121,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572897736
    },
    {
        "content": "<p>also trying to implement good diagnostics to suggest turning on the feature when trait upcasting is appropriate</p>",
        "id": 179870230,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572897814
    },
    {
        "content": "<p>(i.e. only when a coercion is possible)</p>",
        "id": 179870250,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572897828
    },
    {
        "content": "<p>Re. the second point: is there any way to get an appropriate <code>FnCtxt</code> from an <code>InferCtxt</code> in <code>rustc::infer::error_reporting</code> (specifically the <code>note_type_err</code> method)?</p>",
        "id": 179870633,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572898040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 179871307,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572898363
    },
    {
        "content": "<blockquote>\n<p>a review either now or once we have a few more tests would be super.</p>\n</blockquote>\n<p>ok!</p>",
        "id": 179871458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572898448
    },
    {
        "content": "<blockquote>\n<p>Re. the second point: is there any way to get an appropriate <code>FnCtxt</code> from an <code>InferCtxt</code> in <code>rustc::infer::error_reporting</code> (specifically the <code>note_type_err</code> method)?</p>\n</blockquote>\n<p>not sure what .. ah ok I see</p>",
        "id": 179871475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572898466
    },
    {
        "content": "<p>No, there is no way</p>",
        "id": 179871480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572898471
    },
    {
        "content": "<p>let me look what that method does</p>",
        "id": 179871490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572898480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> oh, are you saying <em>from within that method</em>, you wish to get teh <code>FnCtxt</code>?</p>",
        "id": 179871699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572898616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sorry I didn't get a notification!</p>",
        "id": 179875403,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572900949
    },
    {
        "content": "<p>hrmm</p>",
        "id": 179875405,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572900950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> right, that's what I want</p>",
        "id": 179875457,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572900964
    },
    {
        "content": "<p>basically I want to see if type <code>a</code> is coercible to type <code>b</code> from within that method doing diagnostics</p>",
        "id": 179875476,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572900980
    },
    {
        "content": "<p>and it needs the appropriate <code>FnCtxt</code> I guess</p>",
        "id": 179875488,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572900990
    },
    {
        "content": "<p>Hmm. I think we should try to \"not want\" this</p>",
        "id": 179877178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572901973
    },
    {
        "content": "<p>Can you say more about why you want it?</p>",
        "id": 179877181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572901976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sure. basically when the diagnostic is emitted for \"found type a... expected type b\", I want to suggest \"enable the trait_upcasting feature\", but only when it's actually relevant</p>",
        "id": 179879269,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572903399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I could use a more simplistic algorithm of just looking at the expected and found traits (I'm given their DefIds already) and seeing if the expected trait is amongst the supertraits of the found traits... but that wouldn't account for type params and whatnot. good enough, still?</p>",
        "id": 179879321,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572903451
    },
    {
        "content": "<p>seems good enough to me, <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span></p>",
        "id": 179880441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572904163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> cool.</p>",
        "id": 179882599,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572905550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> as for tests... I'm going to write some tomorrow, but if you a) have ideas of ones to include, let me know, b) want to review soon anyway, both those things would be great. :-)</p>",
        "id": 179882633,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572905587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> writing tests lately, and encountered one problem (upcasting to an auto trait object):</p>\n<div class=\"codehilite\"><pre><span></span>67 |     let _: &amp;dyn Send = foo;\n   |                        ^^^ expected trait `std::marker::Send`, found trait `Foo`\n   |\n   = note: expected type `&amp;dyn std::marker::Send`\n              found type `&amp;dyn Foo`\n</pre></div>\n\n\n<p>when you do have time, which I appreciate may not be till next week, let me know your thoughts. the latest code (pretty much) is already pushed to Github.</p>",
        "id": 180244436,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573229545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> awesome</p>",
        "id": 180244666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229667
    },
    {
        "content": "<p>I'm so excited for this to land</p>",
        "id": 180244675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229673
    },
    {
        "content": "<p>In this case, do you have <code>trait Foo: Send</code>?</p>",
        "id": 180244696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229693
    },
    {
        "content": "<p>I'm guessing this is an artifact of the semi-hokey way we handle auto traits</p>",
        "id": 180244722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> exactly</p>",
        "id": 180245064,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573229900
    },
    {
        "content": "<p>yeah</p>",
        "id": 180245066,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573229901
    },
    {
        "content": "<p>probably that</p>",
        "id": 180245071,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573229904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> anyway if you think of a pointer as to what I should investigate for this, let me know. otherwise we'll chat next week.</p>",
        "id": 180249884,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573232694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Hey Niko. If you have a minute today, would you mind explaining this bit of code to me? (in <code>select.rs</code>)</p>",
        "id": 180442179,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573492913
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"c1\">// See `assemble_candidates_for_unsizing` for more info.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">existential_predicates</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data_a</span><span class=\"p\">.</span><span class=\"n\">map_bound</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">data_a</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">data_a</span><span class=\"p\">.</span><span class=\"n\">principal</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">ExistentialPredicate</span>::<span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">data_a</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"p\">.</span><span class=\"n\">projection_bounds</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">ExistentialPredicate</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">data_b</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"p\">.</span><span class=\"n\">auto_traits</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">ExistentialPredicate</span>::<span class=\"n\">AutoTrait</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">mk_existential_predicates</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">source_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">mk_dynamic</span><span class=\"p\">(</span><span class=\"n\">existential_predicates</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">region_b</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 180442183,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573492917
    },
    {
        "content": "<p>specifically, why do we use b's auto-traits?</p>",
        "id": 180442245,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573492935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> looking now</p>",
        "id": 180445800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573495765
    },
    {
        "content": "<p>I think the answer to that question is because <code>b</code> is the target type, and we expect the autotraits to be a subset of <code>a</code>?</p>",
        "id": 180446100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573495979
    },
    {
        "content": "<p>let me find the code in question</p>",
        "id": 180446114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573495984
    },
    {
        "content": "<p>(yes, confirmed)</p>",
        "id": 180446439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573496196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> right, makes sense, but that no longer applies now... which is why I think this is a problem</p>",
        "id": 180449898,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573498892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> maybe let's address this towards the end of the meeting :-)</p>",
        "id": 180451252,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573499853
    },
    {
        "content": "<p>actually, I'll probably be away still</p>",
        "id": 180451260,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573499858
    },
    {
        "content": "<p>but feel free to leave ideas</p>",
        "id": 180451265,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573499862
    },
    {
        "content": "<blockquote>\n<p>right, makes sense, but that no longer applies now... which is why I think this is a problem</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> that seems true :)</p>",
        "id": 180453437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573501205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> so that code is used to create <code>source_ty</code></p>",
        "id": 180456390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573503436
    },
    {
        "content": "<p>I think that code should move into the <code>else</code> branch</p>",
        "id": 180456395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573503440
    },
    {
        "content": "<p>i.e., you only need it if you have don't have trait-upcasting enabled</p>",
        "id": 180456422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573503463
    },
    {
        "content": "<p>the trait-upcasting branch can use the variable <code>source</code></p>",
        "id": 180456436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573503479
    },
    {
        "content": "<p>probably we should rename <code>source_ty</code>, too</p>",
        "id": 180456474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573503483
    },
    {
        "content": "<p>the creation of <code>source_ty</code> seems like it basically just a hack to relate (a) the lifetimes and (b) the other type arguments that may appear in the principle bound</p>",
        "id": 180456492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573503506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> heh, that's exactly what I did just after I messaged you. sorry. but good to have confirmation!</p>",
        "id": 180468512,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573514463
    },
    {
        "content": "<p>and yes, I renamed <code>source_ty</code> to just <code>source</code>, shadowing the existing <code>source</code> parameter</p>",
        "id": 180468525,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573514481
    },
    {
        "content": "<p>which I think makes sense.</p>",
        "id": 180468528,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573514485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  I would probably rename it to something like <code>source_eq_ty</code> or something, with a comment -- the current code is a bit... subtle</p>",
        "id": 180469220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573515457
    },
    {
        "content": "<p>or <code>source_with_target_auto_traits</code> :)</p>",
        "id": 180469230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573515469
    },
    {
        "content": "<p>I just finished reading the PR, it seems great so far</p>",
        "id": 180469238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573515479
    },
    {
        "content": "<p>hah, that's verbose alright</p>",
        "id": 180469262,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573515482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> cool. I just made that fix and reran tests BTW. upcasting with auto-traits working nicely now!</p>",
        "id": 180469287,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573515498
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> =)</p>",
        "id": 180469292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573515509
    },
    {
        "content": "<blockquote>\n<p>hah, that's verbose alright</p>\n</blockquote>\n<p>heh, I'm a fan of verbose names for wacky edge cases... but in any case I think shadowing is misleading since these are not the same type</p>",
        "id": 180469300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573515534
    },
    {
        "content": "<p>yeah you're right</p>",
        "id": 180469310,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573515543
    },
    {
        "content": "<p>I'll use that then!</p>",
        "id": 180469321,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573515547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what I'll do is try to add some more tests, then you can give it a final review whenever you can this week, maybe, and we can r+? :-)</p>",
        "id": 180469336,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573515574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> yep, I think so :)</p>",
        "id": 180469348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573515589
    },
    {
        "content": "<p>I would like to think about what rustc-guide additions are needed here, but I think it can come after the PR</p>",
        "id": 180469397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573515607
    },
    {
        "content": "<p>great. I'll try to have that done by tomorrow (just in case you have the time tomorrow)</p>",
        "id": 180469420,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573515636
    },
    {
        "content": "<p>yeah</p>",
        "id": 180469424,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573515638
    },
    {
        "content": "<p>indeed</p>",
        "id": 180469427,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573515644
    },
    {
        "content": "<p>(I added a brief chapter to the unstable book in this PR of course.)</p>",
        "id": 180469437,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573515656
    },
    {
        "content": "<p>anyway, thanks for the review. I'll try to address those comments tonight too, else tomorrow.</p>",
        "id": 180469936,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573516333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so, tests all written now, but two outstanding issues:</p>\n<ol>\n<li>the diamond inheritance case doesn't work (segfaults), and I'm not sure why. see line 66 of the <code>diamond.rs</code> test. all other tests work however.</li>\n<li>we're currently generating D S A metadata for auto traits, which seems wasteful. the naive approach of not including auto traits in the vtable construction (<code>meth.rs</code>) and in offset calculation (<code>select.rs</code>) does not work (it gives <a href=\"https://gist.github.com/94ee12b9d6aaf6cad24007d6e1024d83\" target=\"_blank\" title=\"https://gist.github.com/94ee12b9d6aaf6cad24007d6e1024d83\">this ICE</a>)</li>\n</ol>",
        "id": 180580876,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573608595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ok! great</p>",
        "id": 180631293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655444
    },
    {
        "content": "<p>let me start a local build</p>",
        "id": 180631298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655446
    },
    {
        "content": "<p>and investigate</p>",
        "id": 180631299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573655448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> cool. thanks.</p>",
        "id": 180632998,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573656592
    },
    {
        "content": "<p>ok I can reproduce the problems at least :)</p>",
        "id": 180634659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573657513
    },
    {
        "content": "<p>heh okay, good. let me know if you have ideas <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 180657182,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573670148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> so i'm looking at the diamond case</p>",
        "id": 180736174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573742372
    },
    {
        "content": "<p>I simplified the test file a lot</p>",
        "id": 180736175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573742375
    },
    {
        "content": "<p><a href=\"https://gist.github.com/5a48395164357db543ffe03838a4e6e2\" target=\"_blank\" title=\"https://gist.github.com/5a48395164357db543ffe03838a4e6e2\">my simplified test</a></p>",
        "id": 180736260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573742406
    },
    {
        "content": "<p>this still crashes</p>",
        "id": 180736266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573742408
    },
    {
        "content": "<p>the LLVM output is .. basically illegible :)</p>",
        "id": 180736271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573742413
    },
    {
        "content": "<p>I guess the next step is either to try and format the LLVM IR and make sense of it or else to insert debug statements to try and log what's going on</p>",
        "id": 180736288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573742432
    },
    {
        "content": "<p>I mean it seems pretty obvious that <em>something</em> is off, but I can't quite figure out what is being generated yet to tell <em>what</em></p>",
        "id": 180736306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573742448
    },
    {
        "content": "<p>I would guess that the methods from <code>Foo</code> need to be duplicated across the table</p>",
        "id": 180736341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573742464
    },
    {
        "content": "<p>and that they are not</p>",
        "id": 180736342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573742467
    },
    {
        "content": "<p>probably because when we are enumerating the set of supertraits etc we are avoiding walking the same thing twice</p>",
        "id": 180736361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573742483
    },
    {
        "content": "<p>but we need to if we are going to use this vtable generation strategy</p>",
        "id": 180736373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573742491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes I think you're spot on.</p>",
        "id": 180747554,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573749117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and thanks for investigating!</p>",
        "id": 180749609,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573750408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I wonder... what cases <em>precisely</em> I need to duplicate (some of) the supertraits in. probably just diamond inheritance?</p>",
        "id": 180750211,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573750794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I think all of them</p>",
        "id": 180906352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573899215
    },
    {
        "content": "<p>that's the whole point with this style -- you have to make a tree, not a DAG</p>",
        "id": 180906355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573899232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ps, my desktop where I had checkouts of your branch and everything mysteriously died a horrific death yesterday, so I can't play with your code right now</p>",
        "id": 180906860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573900144
    },
    {
        "content": "<p>But I do think you have to de-duplicate everything</p>",
        "id": 180906862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573900150
    },
    {
        "content": "<p>Put another way, the trait should have one complete copy of the vtables for each of its supertraits</p>",
        "id": 180906870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573900184
    },
    {
        "content": "<p>if you have <code>trait Foo: Bar + Bar</code>, then you don't need two copies of <code>Bar</code></p>",
        "id": 180906871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573900189
    },
    {
        "content": "<p>but if you have trait <code>Foo: Bar1 + Bar2</code> and <code>trait Bar1: Baz</code> / <code>trait Bar2: Baz</code>, you need a copy of <code>Bar1</code> and <code>Bar2</code>, and they <em>each</em> need a copy of <code>Baz</code></p>",
        "id": 180906920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573900217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh dear! well, thanks for trying to investigate anyway</p>",
        "id": 180928531,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573938699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can I can only deduplicate if the type args are the same though right?</p>",
        "id": 180928577,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573938729
    },
    {
        "content": "<p>The thing that perplexed me is: how come you can call supertrait methods in the current vtable setup, if I'm not doing it the right way?</p>",
        "id": 180928764,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573939025
    },
    {
        "content": "<p>^ hmm, presumably because we go up the type hierarchy as we offset into the vtable, right <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 180928902,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573939313
    },
    {
        "content": "<p>so we don't want to duplicate <em>everything</em> then</p>",
        "id": 180928941,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573939323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so, I was thinking about this more today and looking at some debug output, and I believe we don't actually need multiple copies of the vtables for the same supertrait <em>at all</em>. the problem stems from the fact that in the diamond test case, the supertraits are enumerated in the order <code>Baz, Bar2, Foo, Bar1</code>. I think this is because it does a depth-first visit, but the real point is the order isn't suitable if you offset to <code>Bar1</code>'s vtable and then try to access a method of <code>Foo</code> (which should be legal). see the problem? if we had the order <code>Baz, Bar2, Bar1, Foo</code>, all would be fine! (<code>Bar1, Bar2</code> is equally good, of course.) now, since the trait hierarchy forms a DAG, we're in luck. we can just do a topological sort on the supertraits and the resulting overall vtable will be properly \"offsetable\" no matter what sequence of upcasts you do. I think we just need to be careful that we consider the different <code>PolyTraitRef</code>s (modulo lifetimes?) return by <code>supertraits</code> as different 'vertices' in the top-sort.</p>",
        "id": 180936386,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573953581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I mean, this has the issue that if we upcast <code>Baz -&gt; Bar2</code> we somehow have to know to skip over <code>Bar1</code> in the above example when finding the necessary method offset in <code>Foo</code>... since <code>Bar1</code> isn't a supertrait of Bar2` of course, the normal \"supertrait counting\" thing won't work, but maybe we can create a look-up table or something?</p>",
        "id": 180936503,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573953794
    },
    {
        "content": "<p>I believe what you were suggesting (while it obviously works) requires a change to the \"supertrait counting\" algorithm for finding method offsets, anyway</p>",
        "id": 180936553,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573953877
    },
    {
        "content": "<p>well, let me know your thoughts :-)</p>",
        "id": 180936555,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1573953880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I don't understand your suggestion</p>",
        "id": 181053931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574109924
    },
    {
        "content": "<p>If you have <code>Baz, Bar2, Bar1, Foo</code></p>",
        "id": 181053937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574109930
    },
    {
        "content": "<p>and you try to upcast to <code>Bar1</code>, you're all set (sort of)</p>",
        "id": 181053942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574109935
    },
    {
        "content": "<p>but if you try to upcast to <code>Bar2</code>, you're not</p>",
        "id": 181053950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574109941
    },
    {
        "content": "<p>that is, the <code>Bar2</code> vtable expects <code>Bar2, Foo</code></p>",
        "id": 181053960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574109954
    },
    {
        "content": "<p>and the <code>Bar1</code> vtable expects <code>Bar1, Foo</code></p>",
        "id": 181053968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574109961
    },
    {
        "content": "<p>therefore, there is no way to have <em>both</em> a <code>Bar1</code> and a <code>Bar2</code> vtable embedded without two copies of <code>Foo</code></p>",
        "id": 181054018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574109975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> but that's the thing... does the <code>Bar1</code> vtable need to expect <code>Bar1, Foo</code>? I thought it could just expect <code>Bar1, X, Foo</code> if we accommodate for that?</p>",
        "id": 181056308,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1574111392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> eh, no, I'm an idiot... that isn't possible because the method offsets all have to be fixed at compile-time, and be the same for all types implementing a given trait, right?</p>",
        "id": 181074247,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1574127281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> anyway, I think the solution here is to have something like the <code>supertraits</code> query (that performs a DFS), but allow visiting the same trait twice, at different points in the search. the question is: is infinite recursion still possible? I don't know in precisely what cases it occurs... is it just with auto traits? cf. <code>src/librustc/traits/util.rs:135</code></p>",
        "id": 181074406,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1574127571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> anyway if that now makes sense to you, let me know how you think we should implement it, and I'll try to get on it ASAP</p>",
        "id": 181145403,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1574191432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just checking you saw the above message... no problem if you're too busy to address it today!</p>",
        "id": 181331072,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1574359922
    },
    {
        "content": "<p>oh, also, if you have any idea about the auto-traits thing, would be great...</p>",
        "id": 181597975,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1574381070
    },
    {
        "content": "<p>heading out now for the evening, but feel free to leave notes/idea here :-)</p>",
        "id": 181660928,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1574444763
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> anyway, I think the solution here is to have something like the <code>supertraits</code> query (that performs a DFS), but allow visiting the same trait twice, at different points in the search. the question is: is infinite recursion still possible? I don't know in precisely what cases it occurs... is it just with auto traits? cf. <code>src/librustc/traits/util.rs:135</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> this sounds correct</p>",
        "id": 181673643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574453995
    },
    {
        "content": "<p>I don't believe infinite recursion should be possible at that late stage</p>",
        "id": 181673694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454003
    },
    {
        "content": "<p>because earlier stages already check that supertraits are a  DAG</p>",
        "id": 181673706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454013
    },
    {
        "content": "<p>so presumably we need some second \"enumerator\" that will run -- I think it'd be <em>safest</em> if it only runs during codegen</p>",
        "id": 181673726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yep, thoughts were my thoughts too. thanks. I may be able to reuse some of the underlying machinery for the computation of supertraits. I wonder if it's necessary make this new 'enumerator' an actual query though?</p>",
        "id": 181691475,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1574470023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> is there any update on this? I'm considering closing <a href=\"https://github.com/rust-lang/rust/pull/60900\" title=\"https://github.com/rust-lang/rust/pull/60900\">https://github.com/rust-lang/rust/pull/60900</a> right now <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 192835898,
        "sender_full_name": "DPC",
        "timestamp": 1585933860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> and I were discussing that the PR needs to be refactored. They mentioned they were going to try, I'm not sure if they've had a chance yet. I think closing the PR is not unreasonable, though, as hopefully there will be a smaller on that does some of the initial work and then follow-up PRs.</p>",
        "id": 192836763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585934264
    },
    {
        "content": "<p>I'm currently reviving this work, since it's a very useful feature, and the implementation doesn't seem very hard.</p>",
        "id": 242677272,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623719136
    },
    {
        "content": "<p>I've created and posted the initial two PRs, <a href=\"https://github.com/rust-lang/rust/issues/86264\">#86264</a> (typecheck and feature gate) and <a href=\"https://github.com/rust-lang/rust/issues/86291\">#86291</a> (codegen refactoring as preparation), they're decoupled and can be landed separately.</p>",
        "id": 242677373,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623719225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> If you've got some bandwidth would you minding taking a look at <a href=\"https://github.com/rust-lang/rust/issues/86264\">#86264</a> ? It's a small change verifying the \"compatibilty\" of two principal traits of trait objects during the unsizing operation.</p>",
        "id": 242677564,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623719430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> I'm thrilled about that</p>",
        "id": 242782973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623783742
    },
    {
        "content": "<p>but I think we should put it on the lang team project board</p>",
        "id": 242783020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623783763
    },
    {
        "content": "<p>how would you feel about creating a project proposal ?</p>",
        "id": 242783031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623783768
    },
    {
        "content": "<p>I'd second it</p>",
        "id": 242783039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623783771
    },
    {
        "content": "<p>Sure, <a href=\"https://github.com/rust-lang/lang-team/issues/98\">https://github.com/rust-lang/lang-team/issues/98</a></p>",
        "id": 242788809,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623786307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 242789484,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623786613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> great, thanks!</p>",
        "id": 242790799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623787224
    },
    {
        "content": "<p>also, can you add a link to the PR that was closed from before, <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> ?</p>",
        "id": 242790835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623787237
    },
    {
        "content": "<p>I was a bit surprised by some of the upcasting logic in <a href=\"https://github.com/rust-lang/rust/issues/86264\">#86264</a> -- comparing for equality seems a bit suspicious</p>",
        "id": 242790869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623787252
    },
    {
        "content": "<p>not <em>wrong</em></p>",
        "id": 242790883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623787256
    },
    {
        "content": "<p>I added that to the tracking issue before. The tracking issue is linked from the proposal. Do you want a separate copy in the project proposal?</p>",
        "id": 242790984,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623787289
    },
    {
        "content": "<p>Now that i think more about it, it is a little suspicious.</p>",
        "id": 242791563,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623787516
    },
    {
        "content": "<p><del>The replaced previous code was just comparing <code>def_id</code>. So maybe there would be cases where the <code>def_id</code> matched but the substs doesn't really match, and maybe that would be unsound?</del></p>",
        "id": 242791753,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623787594
    },
    {
        "content": "<p><del>The new code i wrote directly compares the trait ref, and i think this might reject legal code somehow...</del></p>",
        "id": 242791843,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623787635
    },
    {
        "content": "<p>nevermind, there's more follow up checks in <code>confirm_builtin_unsize_candidate</code> so these two parts needs to work together.</p>",
        "id": 242796072,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623789503
    },
    {
        "content": "<p>In fact, it seems the logic in <code>confirm_builtin_unsize_candidate</code> is mostly all we want. (I don't know why it leaves the part of  auto trait checking to <code>assemble_candidates_for_unsizing</code> though)</p>\n<p>I guess the proper implementation is just removing the principal trait identical test, leaving that check to <code>At::sup</code> within <code>confirm_builtin_unsize_candidate</code>. (Not sure whether i should also move the auto traits to the confirmation stage)</p>\n<p>With this said, the feature gate checking is not easily done within the obligation engine. Maybe i'll duplicate the logic and leave the feature gating part within the <code>assemble_candidates_for_unsizing</code> function.</p>",
        "id": 242799162,
        "sender_full_name": "Charles Lew",
        "timestamp": 1623790865
    },
    {
        "content": "<hr>",
        "id": 243245752,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624103176
    },
    {
        "content": "<p>Update: Codegen refactor pr <a href=\"https://github.com/rust-lang/rust/issues/86291\">#86291</a> was merged and, third PR <a href=\"https://github.com/rust-lang/rust/issues/86461\">#86461</a> is up, which refactors the vtable to use the new scheme.</p>",
        "id": 243245757,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624103194
    },
    {
        "content": "<p>ideally we'd first deduplicate codegen and miri vtable generation by always going through miri</p>",
        "id": 243246193,
        "sender_full_name": "oli",
        "timestamp": 1624103840
    },
    {
        "content": "<p>then we'd only have a single site. we've been wanting to do that since a while, and I think recently someone was working on it, but I can't remember details</p>",
        "id": 243246196,
        "sender_full_name": "oli",
        "timestamp": 1624103865
    },
    {
        "content": "<p>That's fine. I have to understand the details anyway. Maybe i'll start with the miri part.</p>",
        "id": 243246246,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624103906
    },
    {
        "content": "<p>For the feature of <code>trait_upcasting</code> I think there're two things left: One is typecheck changes, previously a pr is up but there's something wrong with it so i think it'll get it right with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> 's help when GAT/TAIT work is not so busy.</p>",
        "id": 243246321,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624104009
    },
    {
        "content": "<p>The other thing will be actually changing the pointer conversion behavior.</p>",
        "id": 243246331,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624104033
    },
    {
        "content": "<p>Basically it will be changing the fat pointer =&gt; fat pointer conversion.</p>",
        "id": 243246350,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624104069
    },
    {
        "content": "<p>Previously @alexreg 's PR doesn't cover this part at all, only a few changes to llvm codegen. But i guess i'll start from miri side.  <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 243246361,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624104119
    },
    {
        "content": "<p>Yes? :)</p>",
        "id": 243248619,
        "sender_full_name": "RalfJ",
        "timestamp": 1624107103
    },
    {
        "content": "<p>I'm totally unfamiliar with miri code =) So i guess it'll take a few days before i start asking questions. Basically about pointer-cast unsizing.</p>",
        "id": 243250644,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624110154
    },
    {
        "content": "<p>Before that i want to ask a small question about previous comments from bjorn3 in this issue: <a href=\"https://github.com/rust-lang/rust/issues/86324\">https://github.com/rust-lang/rust/issues/86324</a></p>",
        "id": 243250698,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624110247
    },
    {
        "content": "<p>The comment was about </p>\n<blockquote>\n<p>create an Allocation outside of the context of a Machine</p>\n</blockquote>",
        "id": 243250766,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624110366
    },
    {
        "content": "<p>I'm curious why is this possible... Since vtable includes pointers to functions and other vtables...</p>",
        "id": 243250780,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624110405
    },
    {
        "content": "<p>Also, is there some introduction materials like <code>rustc-dev-guide</code> but about miri?  <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 243250803,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624110466
    },
    {
        "content": "<p>Pointers to functions are represented by <code>AllocId</code>'s that point to a <code>GlobalAlloc::Function</code>. For vtable pointers it would be backed by <code>GlobalAlloc::Memory</code>. <code>AllocId</code>'s can be allocated in both a <code>Machine</code> or <code>tcx.alloc_map</code>. Currently miri's vtable generation allocates them in a <code>Machine</code>. The goal is to allocate them in <code>tcx.alloc_map</code> instead using <code>tcx.create_memory_alloc</code>.</p>",
        "id": 243257208,
        "sender_full_name": "bjorn3",
        "timestamp": 1624120023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span></p>",
        "id": 243257212,
        "sender_full_name": "bjorn3",
        "timestamp": 1624120029
    },
    {
        "content": "<p>So is it something that \"records\" all write operations to a piece of \"memory allocation\"?</p>",
        "id": 243257318,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624120199
    },
    {
        "content": "<p>No, you would make a full <code>Allocation</code> and then call <code>tcx.create_memory_alloc(tcx.intern_allocation(alloc))</code> to get an <code>AllocId</code> to the now immutable allocation..</p>",
        "id": 243257482,
        "sender_full_name": "bjorn3",
        "timestamp": 1624120432
    },
    {
        "content": "<p>Sounds good, let me try to see if i get it right.</p>",
        "id": 243258087,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624121270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I made some progress. Though i still haven't get how to convert <code>AllocId</code> to <code>Scalar</code> ...</p>",
        "id": 243259628,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624123200
    },
    {
        "content": "<p>Oh, i think i figured it out... there's a <code>Pointer</code> intermediate type.</p>",
        "id": 243259744,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624123357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/144729-wg-traits/topic/object.20upcasting/near/243250803\">said</a>:</p>\n<blockquote>\n<p>Also, is there some introduction materials like <code>rustc-dev-guide</code> but about miri?  <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span></p>\n</blockquote>\n<p>well, there is <a href=\"https://rustc-dev-guide.rust-lang.org/miri.html\">https://rustc-dev-guide.rust-lang.org/miri.html</a>. it should even be mostly up-to-date...</p>",
        "id": 243259941,
        "sender_full_name": "RalfJ",
        "timestamp": 1624123601
    },
    {
        "content": "<p>I am also a bit confused about what you are trying to achieve. it seems there are two things:</p>\n<ul>\n<li>using miri to generate all vtables. the code for that already exists and you have touched it; the issue here is wiring this up with the codegen backends in the right way. I'm afraid I am the wrong person to ask for this; the stuff that glues miri to the rest of rustc is not really my area of expertise...</li>\n<li>implementing the unsizing casts in miri. this is not a blocker for implementing them elsewhere, but I try to keep miri feature-complete wrt to codegen (we currently lack arbitrary-<code>self</code> receivers in <code>dyn</code> types but other than that, miri is complete, I think).  I assume these are reference-to-reference casts so the right place to start is probably <a href=\"https://github.com/rust-lang/rust/blob/44a8e8d7455cd8f8ec3b3f2d5d4ef80693608f63/compiler/rustc_mir/src/interpret/cast.rs#L27\">around here</a></li>\n</ul>",
        "id": 243260043,
        "sender_full_name": "RalfJ",
        "timestamp": 1624123797
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 243284298,
        "sender_full_name": "Charles Lew",
        "timestamp": 1624161179
    },
    {
        "content": "<p>Status update:</p>\n<p>These two preparation PRs has landed:</p>\n<ul>\n<li>Refactor vtable codegen <a href=\"https://github.com/rust-lang/rust/issues/86291\">#86291</a></li>\n<li>Change vtable memory representation to use tcx allocated allocations. <a href=\"https://github.com/rust-lang/rust/issues/86475\">#86475</a></li>\n</ul>",
        "id": 244513865,
        "sender_full_name": "Charles Lew",
        "timestamp": 1625109219
    },
    {
        "content": "<p>Third PR:</p>\n<ul>\n<li>Refactor vtable format for upcoming trait_upcasting feature. <a href=\"https://github.com/rust-lang/rust/issues/86461\">#86461</a><br>\nis ready for review.</li>\n</ul>",
        "id": 244513920,
        "sender_full_name": "Charles Lew",
        "timestamp": 1625109252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  about <a href=\"https://github.com/rust-lang/rust/issues/86461\">#86461</a> , do you want to review it, or do you want me to pass it to <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> for reviewing?</p>",
        "id": 244655948,
        "sender_full_name": "Charles Lew",
        "timestamp": 1625196196
    },
    {
        "content": "<p>I did a quick review. I would like to pass the rest of the review to <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> as I am not familiar enough with this area of the compiler.</p>",
        "id": 244661512,
        "sender_full_name": "bjorn3",
        "timestamp": 1625204475
    },
    {
        "content": "<p>office hour slot in 1hr   :)    <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  would you mind using this Zulip topic?</p>",
        "id": 246712308,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626870822
    },
    {
        "content": "<p>no problem!</p>",
        "id": 246719567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874335
    },
    {
        "content": "<p>I'm here</p>",
        "id": 246719571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874337
    },
    {
        "content": "<p>thanks!</p>",
        "id": 246719580,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626874343
    },
    {
        "content": "<p>Did you want to talk about <a href=\"https://github.com/rust-lang/rust/issues/86461\">#86461</a> ?</p>",
        "id": 246719624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874362
    },
    {
        "content": "<p>yes!</p>",
        "id": 246719643,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626874367
    },
    {
        "content": "<p>I've read it over once</p>",
        "id": 246719655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874375
    },
    {
        "content": "<p>Let me look back over it</p>",
        "id": 246719663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874379
    },
    {
        "content": "<p>oh, this testing infra is beautful</p>",
        "id": 246719715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874397
    },
    {
        "content": "<p>did you have specific questions or things you wanted to discuss?</p>",
        "id": 246719740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874415
    },
    {
        "content": "<p>otherwise I can read and poke you with questions :) I see <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> left a comment</p>",
        "id": 246719759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874427
    },
    {
        "content": "<p>i think you can go ahead and read it first.</p>",
        "id": 246719823,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626874447
    },
    {
        "content": "<p>I still want to ask about whether it's ok to use <code>ParamEnv::reveal_all()</code> here... I think since the types are \"concrete\" enough, maybe it's ok?</p>",
        "id": 246720014,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626874550
    },
    {
        "content": "<p>ok so</p>",
        "id": 246720278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874675
    },
    {
        "content": "<p>the logic of the vtable layout makes sense, very cool</p>",
        "id": 246720287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874680
    },
    {
        "content": "<p>the testing makes sense</p>",
        "id": 246720304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874683
    },
    {
        "content": "<p>I would love to see each of your examples as a test, or at least this monster one</p>",
        "id": 246720368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874702
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    // For a more complex inheritance relationship like this:\n    //   O --&gt; G --&gt; C --&gt; A\n    //     \\     \\     \\-&gt; B\n    //     |     |-&gt; F --&gt; D\n    //     |           \\-&gt; E\n    //     |-&gt; N --&gt; J --&gt; H\n    //           \\     \\-&gt; I\n    //           |-&gt; M --&gt; K\n    //                 \\-&gt; L\n    // The resulting vtable will consists of these segments:\n    //  DSA, A, B, B-vptr, C, D, D-vptr, E, E-vptr, F, F-vptr, G,\n    //  H, H-vptr, I, I-vptr, J, J-vptr, K, K-vptr, L, L-vptr, M, M-vptr,\n    //  N, N-vptr, O\n</code></pre></div>",
        "id": 246720392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874714
    },
    {
        "content": "<p>yes, i can add it :)</p>",
        "id": 246720407,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626874722
    },
    {
        "content": "<p>I didn't read the loop and definition in detail</p>",
        "id": 246720419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874729
    },
    {
        "content": "<p>tbh I think that having the test would give me more confidence in its correctness than me reading it :)</p>",
        "id": 246720452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/144729-wg-traits/topic/object.20upcasting/near/246720014\">said</a>:</p>\n<blockquote>\n<p>I still want to ask about whether it's ok to use <code>ParamEnv::reveal_all()</code> here... I think since the types are \"concrete\" enough, maybe it's ok?</p>\n</blockquote>\n<p>where precisely do you mean</p>",
        "id": 246720467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874747
    },
    {
        "content": "<p>one thing that is missing from the \"monster\" test</p>",
        "id": 246720535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874773
    },
    {
        "content": "<p>is any chain of single inheritance</p>",
        "id": 246720556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874782
    },
    {
        "content": "<p>I think a good test might be</p>",
        "id": 246720628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874804
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/86461/files#diff-64ba6669d816a72d0c001062233739d967f0cc66938c6e934f4d947ceea33337R65\">https://github.com/rust-lang/rust/pull/86461/files#diff-64ba6669d816a72d0c001062233739d967f0cc66938c6e934f4d947ceea33337R65</a><br>\nThis one^</p>\n<p>And<br>\n<a href=\"https://github.com/rust-lang/rust/pull/86461/files#diff-b81e352311722abf2e93dff8b5af345f3a434adf9c7c068b17de9c815ec114d7R688\">https://github.com/rust-lang/rust/pull/86461/files#diff-b81e352311722abf2e93dff8b5af345f3a434adf9c7c068b17de9c815ec114d7R688</a></p>",
        "id": 246720723,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626874836
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>A -&gt; B -&gt; C\n|\nD -&gt; E -&gt; F\n     \\---&gt; G --&gt; H\n</code></pre></div>",
        "id": 246720727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874836
    },
    {
        "content": "<p>something like that</p>",
        "id": 246720735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874839
    },
    {
        "content": "<p>Sure, i'll add this as another test.</p>",
        "id": 246720759,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626874848
    },
    {
        "content": "<p>because then we can see that, indeed, the B and C are adjacent, and you have an \"isa\" relationship between A, B, and C</p>",
        "id": 246720806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874873
    },
    {
        "content": "<p>and between D, E, F, etc</p>",
        "id": 246720828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874880
    },
    {
        "content": "<p>I guess maybe that's still observable, I just thought the monster test never resulted in any output like <code>A B C</code> where there was an is-a relationship between them</p>",
        "id": 246720871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874906
    },
    {
        "content": "<p><em>anyway</em></p>",
        "id": 246720877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874907
    },
    {
        "content": "<p>as to reveal-all:</p>",
        "id": 246720885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874910
    },
    {
        "content": "<p>those lnks dont' work for me :(</p>",
        "id": 246720975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874937
    },
    {
        "content": "<p>but I will try searching :)</p>",
        "id": 246720980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874940
    },
    {
        "content": "<p>Oops</p>",
        "id": 246720989,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626874944
    },
    {
        "content": "<p>yeah, they're truncated somehow</p>",
        "id": 246721017,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626874958
    },
    {
        "content": "<p>I presume that this vtable construction logic runs only in the very back-end of the compiler?</p>",
        "id": 246721029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874964
    },
    {
        "content": "<p>codegen?</p>",
        "id": 246721034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874966
    },
    {
        "content": "<p>(what we used to call <code>trans</code>...)</p>",
        "id": 246721049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626874973
    },
    {
        "content": "<p>yeah, indeed.</p>",
        "id": 246721107,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626874997
    },
    {
        "content": "<p>then reveal-all is fine</p>",
        "id": 246721119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875002
    },
    {
        "content": "<p>that is an appropriate time to reveal all, basically</p>",
        "id": 246721142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875014
    },
    {
        "content": "<p>all the uses I saw looked ok</p>",
        "id": 246721145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875017
    },
    {
        "content": "<p>If CTFE use it in a later time, is reveal all still ok?</p>",
        "id": 246721241,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626875055
    },
    {
        "content": "<p>I think so, I'm pondering</p>",
        "id": 246721357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875143
    },
    {
        "content": "<p>how/when would CTFE use it?</p>",
        "id": 246721386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875161
    },
    {
        "content": "<p>to model <code>dyn Trait</code> values?</p>",
        "id": 246721418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875164
    },
    {
        "content": "<p>yeah</p>",
        "id": 246721442,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626875171
    },
    {
        "content": "<p>it's an interesting question but it must be ok</p>",
        "id": 246721480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875188
    },
    {
        "content": "<p>ok, cool</p>",
        "id": 246721505,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626875199
    },
    {
        "content": "<p>presumably specializations down the line etc canot change the methods that get called</p>",
        "id": 246721514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875203
    },
    {
        "content": "<p>for <code>dyn</code> values that are created <em>in this crate</em></p>",
        "id": 246721525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875207
    },
    {
        "content": "<p>or else something went wrong in our design :)</p>",
        "id": 246721556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875220
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 246721590,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626875237
    },
    {
        "content": "<p>do you believe this PR is ready to land?</p>",
        "id": 246721622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875250
    },
    {
        "content": "<p>(apart from maybe a test or two being added)</p>",
        "id": 246721635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875256
    },
    {
        "content": "<p>that is, it looks like you already addressed <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>'s comment</p>",
        "id": 246721651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875265
    },
    {
        "content": "<p>I think so, it doesn't change program behavior.</p>",
        "id": 246721669,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626875275
    },
    {
        "content": "<p>The vtable will grow a little for program that uses complex trait inheritance, but that won't hurt i guess :)</p>",
        "id": 246721876,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626875377
    },
    {
        "content": "<p>ok. I'm going to leave a comment suggesting a few tests but with r=me</p>",
        "id": 246722172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875515
    },
    {
        "content": "<p>thanks!</p>",
        "id": 246722357,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626875586
    },
    {
        "content": "<p>I'm very excited you're picking this up</p>",
        "id": 246722662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626875721
    },
    {
        "content": "<p>I'm also taking it as a chance to learn more about the traits system. I hope i can get to understand the trait system implementation better when you're back from vacation :) I'll book another office hour at that time.</p>",
        "id": 246722981,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626875864
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span>, <span class=\"user-mention\" data-user-id=\"418083\">@Alexa VanHattum</span> was asking me the following and I thought you would be better positioned to answer:</p>\n<blockquote>\n<p>It looks like it's still the case that the index <code>idx</code> passed at call site from <code>InstanceDef::Virtual(def_id, idx)</code> will always correspond to the index into the slice returned by fn <code>vtable_entries</code> , since the segments are built in there, right? Otherwise, would it make sense for <code>VtblEntry::Method</code> to include that index as well?</p>\n</blockquote>",
        "id": 246850687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626962493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"418083\">@Alexa VanHattum</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yes, the idx corresponds exactly to the index into <code>vtable_entries</code> slice.</p>",
        "id": 246857652,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626965475
    },
    {
        "content": "<p>-</p>",
        "id": 246858214,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626965710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> great, thank you! And thanks for the extensive comments in your PR!</p>",
        "id": 246863297,
        "sender_full_name": "Alexa VanHattum",
        "timestamp": 1626967890
    },
    {
        "content": "<p>np =)</p>",
        "id": 246863412,
        "sender_full_name": "Charles Lew",
        "timestamp": 1626967931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Hello, i'm working on trait upcasting coercion's pointer cast handling. I'm a little unsure about what the best approach would be. Would you mind give me a few advices?</p>",
        "id": 247129248,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627223932
    },
    {
        "content": "<p>Now i'm reading code related to <code>PointerCast::Unsize</code></p>",
        "id": 247129298,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627224005
    },
    {
        "content": "<p>Its comment says this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    /// Unsize a pointer/reference value, e.g., `&amp;[T; n]` to\n    /// `&amp;[T]`. Note that the source could be a thin or fat pointer.\n    /// This will do things like convert thin pointers to fat\n    /// pointers, or convert structs containing thin pointers to\n    /// structs containing fat pointers, or convert between fat\n    /// pointers. We don&#39;t store the details of how the transform is\n    /// done (in fact, we don&#39;t know that, because it might depend on\n    /// the precise type parameters). We just store the target\n    /// type. Codegen backends and miri figure out what has to be done\n    /// based on the precise source/target type at hand.\n</code></pre></div>",
        "id": 247129322,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627224068
    },
    {
        "content": "<p>So basically it's asking this be implemented separatedly in each of codegen/miri .</p>",
        "id": 247129374,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627224138
    },
    {
        "content": "<p>For cg_clif this would be changing <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/356360836e128e1d1eb11caf6ff5186efb211960/src/unsize.rs#L28-L33\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/356360836e128e1d1eb11caf6ff5186efb211960/src/unsize.rs#L28-L33</a> For cg_ssa this would be changing <a href=\"https://github.com/rust-lang/rust/blob/6489ee10410f7be70dbefad322d1a3e1533ab282/compiler/rustc_codegen_ssa/src/base.rs#L144-L147\">https://github.com/rust-lang/rust/blob/6489ee10410f7be70dbefad322d1a3e1533ab282/compiler/rustc_codegen_ssa/src/base.rs#L144-L147</a>. For miri this would be <a href=\"https://github.com/rust-lang/rust/blob/6489ee10410f7be70dbefad322d1a3e1533ab282/compiler/rustc_mir/src/interpret/cast.rs#L273-L277\">https://github.com/rust-lang/rust/blob/6489ee10410f7be70dbefad322d1a3e1533ab282/compiler/rustc_mir/src/interpret/cast.rs#L273-L277</a></p>",
        "id": 247132028,
        "sender_full_name": "bjorn3",
        "timestamp": 1627228261
    },
    {
        "content": "<p>oh funny, I did not know about this comment :D</p>",
        "id": 247133959,
        "sender_full_name": "RalfJ",
        "timestamp": 1627231433
    },
    {
        "content": "<p>but yeah, new casts need to be implement in each codegen backend separately, and miri is like a codegen backend here</p>",
        "id": 247134000,
        "sender_full_name": "RalfJ",
        "timestamp": 1627231455
    },
    {
        "content": "<p>to make sure I understand, this is about casting <code>&amp;dyn Trait1</code> to <code>&amp;dyn Trait2</code> when <code>Trait2</code> is a supertrait of <code>Trait1</code>?</p>",
        "id": 247134015,
        "sender_full_name": "RalfJ",
        "timestamp": 1627231485
    },
    {
        "content": "<p>Yes, indeed!</p>",
        "id": 247134281,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627231856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>   I believe for  <code>* dyn Trait1</code> to <code>*dyn Trait2</code> coercion, an unsafe block will be needed. I'm not yet sure how to implement this yet, nor am i very sure about the exact language rules should be...</p>",
        "id": 247134869,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627232641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I'll start with <code>cg_clif</code> then. it's 1am now here, so let me quickly scratch out a simple version... I think i've got a few questions to ask, basically about emitting code that reads memory.</p>",
        "id": 247134981,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627232724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/144729-wg-traits/topic/object.20upcasting/near/247134869\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span>   I believe for  <code>* dyn Trait1</code> to <code>*dyn Trait2</code> coercion, an unsafe block will be needed. I'm not yet sure how to implement this yet, nor am i very sure about the exact language rules should be...</p>\n</blockquote>\n<p>why that?<br>\nhow exactly is &amp;dyn Trait1 to &amp;dyn Trait2 implemented?</p>",
        "id": 247135477,
        "sender_full_name": "RalfJ",
        "timestamp": 1627233394
    },
    {
        "content": "<p>but if you are unsure it is probably best to make it unsafe. the unsafety checker is here: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/transform/check_unsafety.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/transform/check_unsafety.rs</a></p>",
        "id": 247135487,
        "sender_full_name": "RalfJ",
        "timestamp": 1627233423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  I haven't write it down yet, there're two code paths, for the simpler case, the original pointer scalar pair is not changed at all.<br>\nFor the second, more complex case, it will reach out to the vtable through the metadata scalar in the scalar pair, access its one slot at a fixed offset calculated out using <code>Trait1</code> and <code>Trait2</code> type info, and use that as the new metadata value.</p>",
        "id": 247135646,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627233707
    },
    {
        "content": "<p>so for <code>&amp;dyn Trait1</code> this operation will always succeed. While for <code>*dyn Trait1</code> this has to depend on the initial validity of the pointer itself.</p>",
        "id": 247135735,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627233826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  I think this is almost the version for <code>cg_clif</code> ... modulo necessary type conversions. Is there something i need to pay extra attention to?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">old_info</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">old_info</span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"unsized_info: missing old info for trait upcasting coercion\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">data_a</span><span class=\"p\">.</span><span class=\"n\">principal_def_id</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">data_b</span><span class=\"p\">.</span><span class=\"n\">principal_def_id</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">old_info</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// trait upcasting coercion</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">principal_a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data_a</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">principal</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"unsized_info: missing principal trait for trait upcasting coercion\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">principal_b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data_b</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">principal</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"unsized_info: missing principal trait for trait upcasting coercion\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vptr_entry_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">vtable_trait_upcasting_slot_idx</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">source</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">principal_a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">principal_b</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">entry_idx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vptr_entry_idx</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entry_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">entry_idx</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">fx</span><span class=\"p\">.</span><span class=\"n\">pointer_type</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vptr_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Pointer</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">old_info</span><span class=\"p\">).</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">entry_offset</span><span class=\"p\">).</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">fx</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">fx</span><span class=\"p\">.</span><span class=\"n\">pointer_type</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">vptr_ptr</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">old_info</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247137292,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627236070
    },
    {
        "content": "<p>You can use <code>MemFlags::trusted()</code> instead of <code>MemFlags::new()</code>. That makes it UB for it to trap or be unaligned.</p>",
        "id": 247137310,
        "sender_full_name": "bjorn3",
        "timestamp": 1627236113
    },
    {
        "content": "<p>ok</p>",
        "id": 247137359,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627236154
    },
    {
        "content": "<p>Apart from that I think it looks fine.</p>",
        "id": 247137361,
        "sender_full_name": "bjorn3",
        "timestamp": 1627236156
    },
    {
        "content": "<p>Thanks! 2am now. Need to get some sleep... I'll try to write the miri one tomorrow evening when i'm back from work =)</p>",
        "id": 247137423,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627236248
    },
    {
        "content": "<blockquote>\n<p>For the second, more complex case, it will reach out to the vtable through the metadata scalar in the scalar pair, access its one slot at a fixed offset calculated out using Trait1 and Trait2 type info, and use that as the new metadata value.</p>\n</blockquote>\n<p>okay, so basically vtables \"link to\" the vtables of supertraits, forming a kind of linked list? makes sense.</p>",
        "id": 247138099,
        "sender_full_name": "RalfJ",
        "timestamp": 1627237301
    },
    {
        "content": "<p>this will be interesting input for the discussion around whether raw pointers have to have valid vtables</p>",
        "id": 247138143,
        "sender_full_name": "RalfJ",
        "timestamp": 1627237330
    },
    {
        "content": "<p>so far we say yes they do but also want to remain future compaible with changing our mind -- so yeah that cast needs to be unsafe</p>",
        "id": 247138146,
        "sender_full_name": "RalfJ",
        "timestamp": 1627237346
    },
    {
        "content": "<p>Progress updated: Implemented all three \"unsized_info\" functions. But seems needs more change, for example, llvm version:<br>\n<a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_ssa/src/base.rs#L221\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_ssa/src/base.rs#L221</a></p>",
        "id": 247291283,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627357484
    },
    {
        "content": "<p>I'm thinking about expanding the duty of \"unsize_thin_ptr\"...</p>",
        "id": 247291364,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627357600
    },
    {
        "content": "<p>But i'm a little confused about <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_ssa/src/mir/rvalue.rs#L221\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_ssa/src/mir/rvalue.rs#L221</a><br>\nwhich seems to be another duplication ...</p>",
        "id": 247291512,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627357853
    },
    {
        "content": "<p>Is it ok to unify <code>unsize_thin_ptr</code> into <code>unsize_ptr</code> which supports both thin and fat source ptr?  cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span></p>",
        "id": 247291956,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627358469
    },
    {
        "content": "<p>I think that would be fine. cg_clif needs the same change I think.</p>",
        "id": 247298473,
        "sender_full_name": "bjorn3",
        "timestamp": 1627367332
    },
    {
        "content": "<p>office hour slot in 1hr :)  let's continue to use this topic to discuss <a href=\"https://github.com/rust-lang/rust/issues/86264\">#86264</a></p>",
        "id": 247610804,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627577927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 247610815,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627577932
    },
    {
        "content": "<p>wave</p>",
        "id": 247619734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627581797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span></p>",
        "id": 247619779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627581817
    },
    {
        "content": "<p>hi~</p>",
        "id": 247619781,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627581818
    },
    {
        "content": "<p>I'm skimming PR but</p>",
        "id": 247619904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627581877
    },
    {
        "content": "<p>So today we'll move on to the trait-system related part of trait upcasting coercion work.</p>",
        "id": 247619905,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627581877
    },
    {
        "content": "<p>did you have specific questions you wanted to discuss</p>",
        "id": 247619916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627581881
    },
    {
        "content": "<p>Yes!</p>",
        "id": 247619933,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627581888
    },
    {
        "content": "<p>For this time, i think maybe we'll have one decision to made....</p>",
        "id": 247619974,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627581910
    },
    {
        "content": "<p>It's about <code>* dyn Trait</code> raw pointer upcasting</p>",
        "id": 247620005,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627581934
    },
    {
        "content": "<p>ok</p>",
        "id": 247620026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627581946
    },
    {
        "content": "<p>i think we'll choose between 1. make it an unsafe operation 2. make it impossible to <code>Unsize</code></p>",
        "id": 247620085,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627581964
    },
    {
        "content": "<p>I saw some earlier discussion</p>",
        "id": 247620107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627581979
    },
    {
        "content": "<p>the key point is that we haven't yet decided whether a <code>*dyn Trait</code> is required to have a valid vtable?</p>",
        "id": 247620130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627581990
    },
    {
        "content": "<p>I think that making it unsafe is a reasoable idea</p>",
        "id": 247620137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627581997
    },
    {
        "content": "<p>Yes, indeed!</p>",
        "id": 247620140,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627581998
    },
    {
        "content": "<p>I'm not sure what the connection is to <code>Unsize</code> though</p>",
        "id": 247620160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582011
    },
    {
        "content": "<p>can you elaborate on that?</p>",
        "id": 247620224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582044
    },
    {
        "content": "<p>that trait is a bit out of cache for me</p>",
        "id": 247620238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582049
    },
    {
        "content": "<p>It's a symbolic representation of all unsizing impl. Through the real implementations may not exist.</p>",
        "id": 247620327,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627582084
    },
    {
        "content": "<p>I don't follow that either :)</p>",
        "id": 247620439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582135
    },
    {
        "content": "<p>in particular it sounded like you were saying that <em>if</em> we make it unsafe to upcast a <code>*dyn Foo</code></p>",
        "id": 247620482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582157
    },
    {
        "content": "<p>then it is possible to <code>Unsize</code>?</p>",
        "id": 247620492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582162
    },
    {
        "content": "<p>(but otherwise, it is not?)</p>",
        "id": 247620498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582167
    },
    {
        "content": "<p>I think so, but i may have got it wrong ...</p>",
        "id": 247620529,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627582186
    },
    {
        "content": "<p>can you say a bit more about the connection between those two</p>",
        "id": 247620644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582231
    },
    {
        "content": "<p>reading over your PR, the main thing I am a bit uncomfortable with is the way that we walk through the supertraits list, I'm tying to decide how we should know where to stop</p>",
        "id": 247620674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582253
    },
    {
        "content": "<p>just checking if the trait def-ids match doesn't seem right</p>",
        "id": 247620689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582262
    },
    {
        "content": "<p>I know that earlier you had <code>==</code> and I complained about that, too</p>",
        "id": 247620702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582270
    },
    {
        "content": "<p>I'm imagining a case like <code>trait Foo: Bar&lt;u32&gt; + Bar&lt;i32&gt;</code></p>",
        "id": 247620719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582282
    },
    {
        "content": "<p>Oh!</p>",
        "id": 247620759,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627582309
    },
    {
        "content": "<p>I'm looking to see what fns exist</p>",
        "id": 247620911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582383
    },
    {
        "content": "<p>Yes, i think i'll need some mentoring here.</p>",
        "id": 247621100,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627582475
    },
    {
        "content": "<p>I'm thinking about it</p>",
        "id": 247621124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582495
    },
    {
        "content": "<p>we might have a type with inference variables where it's actually ambiguous</p>",
        "id": 247621150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582509
    },
    {
        "content": "<p>e.g. <code>Box&lt;dyn Bar&lt;_&gt;&gt;</code></p>",
        "id": 247621181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582522
    },
    {
        "content": "<p>er</p>",
        "id": 247621191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582530
    },
    {
        "content": "<p>I guess it's more about the target type</p>",
        "id": 247621196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582534
    },
    {
        "content": "<p><code>Box&lt;dyn Foo&gt; as Box&lt;dyn Bar&lt;_&gt;&gt;</code></p>",
        "id": 247621214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582543
    },
    {
        "content": "<p>we probably want something like the \"can unify\" test</p>",
        "id": 247621326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582582
    },
    {
        "content": "<p>though I don't love that</p>",
        "id": 247621385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582621
    },
    {
        "content": "<p>anyway, let's leave it for now, I'll leave a review</p>",
        "id": 247621401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582629
    },
    {
        "content": "<p>I'll have to dig into it a bit</p>",
        "id": 247621426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582653
    },
    {
        "content": "<p>regarding safety, I think that the upcast should be unsafe</p>",
        "id": 247621442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582665
    },
    {
        "content": "<p>for raw pointers, yes</p>",
        "id": 247621475,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627582683
    },
    {
        "content": "<p>I haven't read the unsafety checking code in the compiler yet. I'll dig into it next week or so. I want to put off the unsafety checking part into next PR.</p>",
        "id": 247621604,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627582756
    },
    {
        "content": "<p>that sounds reasonable</p>",
        "id": 247621817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582885
    },
    {
        "content": "<p>is there a tracking issue for this where we can note it so it's not forgotten, though?</p>",
        "id": 247621829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582894
    },
    {
        "content": "<p>Yes, i've wrote it in the tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/65991\">#65991</a></p>",
        "id": 247621924,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627582935
    },
    {
        "content": "<p>In the implementation history part</p>",
        "id": 247621938,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627582947
    },
    {
        "content": "<p>ok, good</p>",
        "id": 247621999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627582979
    },
    {
        "content": "<p>cool. I've got some time tomorrow that I hope to use for reviewing</p>",
        "id": 247622089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627583024
    },
    {
        "content": "<p>so I'll look at the question of how to pick from the list then <em>but</em></p>",
        "id": 247622180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627583050
    },
    {
        "content": "<p>one thing we might do that's very, very simple :P</p>",
        "id": 247622191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627583055
    },
    {
        "content": "<p>only allow the upcast if the trait appears exactly once for now</p>",
        "id": 247622228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627583071
    },
    {
        "content": "<p>sounds good, i'll update the pr</p>",
        "id": 247622256,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627583089
    },
    {
        "content": "<p>not really what we want but it won't do the wrong thing</p>",
        "id": 247622269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627583092
    },
    {
        "content": "<p>if you do that, we should add another bullet to address it in a better way later</p>",
        "id": 247622285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627583101
    },
    {
        "content": "<p>I think ti'd be good though to kcik this can down the road a bit</p>",
        "id": 247622298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627583109
    },
    {
        "content": "<p>i wonder if it is possible to make the above case into \"multiple candidates\", so each get confirmed separately</p>",
        "id": 247622319,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627583118
    },
    {
        "content": "<p>though i don't really know how to do that... for now</p>",
        "id": 247622333,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627583133
    },
    {
        "content": "<p>interesting thought</p>",
        "id": 247622344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627583142
    },
    {
        "content": "<p>I have to review the code a bit</p>",
        "id": 247622381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627583161
    },
    {
        "content": "<p>that might make sense</p>",
        "id": 247622426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627583166
    },
    {
        "content": "<p>anyway, i'll use the simple strategy for now. i'll update the pr and the tracking issue.</p>",
        "id": 247622468,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627583186
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> !</p>",
        "id": 247622808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627583369
    },
    {
        "content": "<p>thank you for your time !</p>",
        "id": 247622830,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627583381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  PR and tracking issue updated following your advice here!</p>",
        "id": 247629630,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627586868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> I read the PR -- it looks good. I'm thinking that it would be nice to come up with a \"canonical set of tests\" for some of the corner cases.</p>",
        "id": 247703067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627649383
    },
    {
        "content": "<p>Yes, at least i plan to include those tests introduced by @alexreg in <a href=\"https://github.com/rust-lang/rust/pull/60900/commits/9549fbd6255fb9f7e4ce1a8859fae7335465e014\">https://github.com/rust-lang/rust/pull/60900/commits/9549fbd6255fb9f7e4ce1a8859fae7335465e014</a></p>",
        "id": 247703537,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627649645
    },
    {
        "content": "<p>Most of those are <code>run-pass</code> though... So they can't pass without the codegen changes.</p>",
        "id": 247703594,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627649686
    },
    {
        "content": "<p>Should i include them as <code>check-pass</code> tests in the first pr?</p>",
        "id": 247704051,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627649945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 247704529,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627650154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> I added a coment with  a hackmd of tests to add</p>",
        "id": 247704565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627650179
    },
    {
        "content": "<p>and delegated r+ to you, on the assumption they behave as I expected :)</p>",
        "id": 247704583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627650187
    },
    {
        "content": "<p>they are poking at the interactions of type/region checking</p>",
        "id": 247704609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627650198
    },
    {
        "content": "<p>ok, thanks!</p>",
        "id": 247704625,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627650209
    },
    {
        "content": "<p><a href=\"https://hackmd.io/_CDoRWIZRbuZ8qgN4luouA\">the hackmd</a></p>",
        "id": 247704635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627650213
    },
    {
        "content": "<p>For the \"// OK, eventually\" cases, i should make them into FIXMEs in this first pr, is this correct?</p>",
        "id": 247704973,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627650373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> yep</p>",
        "id": 247705859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627650856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Hello, there's one test that's failing from the hackmd. After reading it, i wonder if this really should be ambiguous error or not:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test_infer_arg</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Ambiguous</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247712815,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627654159
    },
    {
        "content": "<p>this is in the second test group within the hackmd.</p>",
        "id": 247713653,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627654546
    },
    {
        "content": "<p>After some thinking, i changed the definition of <code>Foo</code> to:<br>\n<code>trait Foo&lt;T&gt;: Bar&lt;i32&gt; + Bar&lt;T&gt; {}</code></p>\n<p>Now this test group looks like this:<br>\n<a href=\"https://github.com/rust-lang/rust/blob/d60ae35deaaee047ef186c6538bf06f198cb7cbe/src/test/ui/traits/trait-upcasting/type-checking-test-2.rs\">https://github.com/rust-lang/rust/blob/d60ae35deaaee047ef186c6538bf06f198cb7cbe/src/test/ui/traits/trait-upcasting/type-checking-test-2.rs</a></p>\n<p>I hope this matches your original idea :)</p>",
        "id": 247734716,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627664276
    },
    {
        "content": "<p>Hooray, <a href=\"https://github.com/rust-lang/rust/issues/86264\">#86264</a> has landed and we can continue with <a href=\"https://github.com/rust-lang/rust/issues/87515\">#87515</a> now. I've updated the PR and addressed the previous comments. Please give it another look when you've got time. Thanks!  <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 247809603,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627745615
    },
    {
        "content": "<p>Office hour in ~3.5hr. Today's topic will be reviewing the trait upcasting coercion part 3 PR (5th in total). If there's time left maybe we can also discuss a little about the relationship between raw pointer validity and unsizing coercion.</p>",
        "id": 249996478,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629384235
    },
    {
        "content": "<p>Link to that PR: <a href=\"https://github.com/rust-lang/rust/pull/88135\">https://github.com/rust-lang/rust/pull/88135</a></p>",
        "id": 250021096,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629395193
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> !</p>",
        "id": 250023084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629396057
    },
    {
        "content": "<p>hi!</p>",
        "id": 250023184,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629396101
    },
    {
        "content": "<p>So, I should take a look at the PR?</p>",
        "id": 250023293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629396135
    },
    {
        "content": "<p>yeah</p>",
        "id": 250023321,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629396144
    },
    {
        "content": "<p>Basically i've got the \"OK eventually\" parts of the tests fixed.</p>",
        "id": 250023379,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629396169
    },
    {
        "content": "<p>commit by commit?</p>",
        "id": 250023389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629396175
    },
    {
        "content": "<p>both are ok.</p>",
        "id": 250023442,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629396195
    },
    {
        "content": "<p>the approach is quite clever</p>",
        "id": 250023610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629396249
    },
    {
        "content": "<p>(multiple candidates)</p>",
        "id": 250023630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629396257
    },
    {
        "content": "<p>yeah, i think this basically matches the design expectation of the trait solving engine</p>",
        "id": 250023837,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629396340
    },
    {
        "content": "<p>OK, I read the first commit</p>",
        "id": 250024965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629396777
    },
    {
        "content": "<p>it is roughly what I expected it to be, but very nice</p>",
        "id": 250024978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629396783
    },
    {
        "content": "<p>thanks</p>",
        "id": 250025047,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629396801
    },
    {
        "content": "<p>reading the second commit now</p>",
        "id": 250025447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629396942
    },
    {
        "content": "<p>not quite sure what's going on here :)</p>",
        "id": 250025545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629396972
    },
    {
        "content": "<p>For codegen backends, they need the information about which candidate <del>is</del> <strong>was</strong> selected.</p>",
        "id": 250025807,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629397080
    },
    {
        "content": "<p>it seems lke it's just shuffling things around a bit</p>",
        "id": 250025867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397092
    },
    {
        "content": "<p>and I'm kind of inclined to assume you know what you're doing</p>",
        "id": 250025888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397102
    },
    {
        "content": "<p>I think i know the process, but i'm less sure whether the usages of <code>SelectionContext</code> and other APIs are correctly used.</p>",
        "id": 250026106,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629397192
    },
    {
        "content": "<p>So i invoked the trait engine again and extracted the information from <code>ImplSource</code></p>",
        "id": 250026561,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629397380
    },
    {
        "content": "<p>ok, I think I get it now</p>",
        "id": 250026590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397393
    },
    {
        "content": "<p>but I have to look I guess at <code>super::super::prepare_vtable_segments</code> in a <em>touch</em> more detail</p>",
        "id": 250026622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397408
    },
    {
        "content": "<p>That's the same procedure that built the vtable.</p>",
        "id": 250026651,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629397424
    },
    {
        "content": "<p>It's taking different callbacks to decide what it's doing. Here's it's just counting slots.</p>",
        "id": 250026795,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629397471
    },
    {
        "content": "<p>ImplSourceTraitUpcastingData</p>",
        "id": 250026811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397481
    },
    {
        "content": "<p>that name is kind of surprising</p>",
        "id": 250026817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397485
    },
    {
        "content": "<p>I'm not good at naming things...</p>",
        "id": 250026843,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629397497
    },
    {
        "content": "<p>oh, well,</p>",
        "id": 250026860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397504
    },
    {
        "content": "<p>reviewing the <code>enum</code> I don't think it's your fault</p>",
        "id": 250026894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397515
    },
    {
        "content": "<p>it's more that the impl is surprisingly named</p>",
        "id": 250026906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397520
    },
    {
        "content": "<p>I dn't really see any problems</p>",
        "id": 250027376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397721
    },
    {
        "content": "<p>the PR looks quite nice <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 250027388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397726
    },
    {
        "content": "<p>thanks</p>",
        "id": 250027393,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629397729
    },
    {
        "content": "<p>I guess we'll see what happens when we r+ :P</p>",
        "id": 250027447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397752
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 250027479,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629397770
    },
    {
        "content": "<p>well ok so one question <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span></p>",
        "id": 250027618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397827
    },
    {
        "content": "<p><code>vtable_trait_upcasting_coercion_new_vptr_slot</code> -- this is invoked only from the backends, I guess</p>",
        "id": 250027639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397838
    },
    {
        "content": "<p>indeed.</p>",
        "id": 250027659,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629397847
    },
    {
        "content": "<p>I thnk we should add an assertion that <code>needs_infer</code> is not true</p>",
        "id": 250027672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397860
    },
    {
        "content": "<p>ok, i'll add it.</p>",
        "id": 250027697,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629397873
    },
    {
        "content": "<p>I think apart from that it should be ok</p>",
        "id": 250027745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629397893
    },
    {
        "content": "<p>great, thanks</p>",
        "id": 250027777,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629397909
    },
    {
        "content": "<p>Thank you for your time today. I'll book another slot to talk about raw pointer validity i think.</p>",
        "id": 250028963,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629398408
    },
    {
        "content": "<p>Basically it's about unsafety checking on</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(unsize)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">Unsize</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">unsize</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span>: <span class=\"nc\">Unsize</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250029055,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629398451
    },
    {
        "content": "<p>sounds good</p>",
        "id": 250051903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629408601
    },
    {
        "content": "<p>office hour in ~0.5 hr.</p>",
        "id": 250611848,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629894167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 250616395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629896697
    },
    {
        "content": "<p>hi~</p>",
        "id": 250616409,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629896704
    },
    {
        "content": "<p>Sorry to be a few minutes late!</p>",
        "id": 250616485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629896743
    },
    {
        "content": "<p>What's on your mind for today</p>",
        "id": 250616495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629896747
    },
    {
        "content": "<p>raw pointer validity?</p>",
        "id": 250616501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629896750
    },
    {
        "content": "<p>Yeah</p>",
        "id": 250616517,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629896762
    },
    {
        "content": "<p>So at this point, most of the trait object coercion support is actually done. (<code>trait Foo: Bar {} =&gt; dyn Foo: Unsize&lt;dyn Bar&gt;</code>)</p>",
        "id": 250616592,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629896790
    },
    {
        "content": "<p>However, there's one remaining issue related-to raw pointers.<br>\n<code>fn foo(v: *const dyn Foo) -&gt; * const dyn Bar { v }</code></p>\n<p>currently compiles. If v is arbitrarily created using<br>\n<code>std::ptr::from_raw_parts</code>(an unstable safe API), <code>foo</code> can cause UB when it tries to read the vtable contents(with multiple inheritance).</p>",
        "id": 250616610,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629896802
    },
    {
        "content": "<p>which is bad.</p>",
        "id": 250616651,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629896825
    },
    {
        "content": "<p>Currently I can see three paths forward, but maybe there're other solutions too.</p>",
        "id": 250616686,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629896843
    },
    {
        "content": "<ol>\n<li>Announce that every fat pointer needs to have valid metadata part.<br>\n    Needs to switch the <code>std::ptr::from_raw_parts{,_mut}</code> APIs to be unsafe.<br>\n    And updates other documentations.</li>\n</ol>",
        "id": 250616737,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629896870
    },
    {
        "content": "<ol start=\"2\">\n<li>Make vtables \"flat\", by removing all pointer indirections in vtables and appending all the data to the tail. This makes upcasting coercion codegen become adding an offset to the metadata scalar, so won't cause real UB. Will waste some more static bytes in multiple inheritance cases than before, might make embedded-dev people unhappy.</li>\n</ol>",
        "id": 250616776,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629896883
    },
    {
        "content": "<ol start=\"3\">\n<li>Announce that raw pointer unsizing coercion must happen in unsafe blocks, while other unsizing coercions can happen outside an unsafe block. This is actually a small breaking change. So need a future compat lint to migrate existing users dealing with raw pointers and some more changes to <code>std</code>(POC PR at <a href=\"https://github.com/rust-lang/rust/issues/88239\">#88239</a> explains the details but it's a bit long). A few other MIR-level details become observable by user: whether the compiler thinks it's a unsizing coercion or not.</li>\n</ol>",
        "id": 250616834,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629896909
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>, if you happen to be around)</p>",
        "id": 250616843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629896915
    },
    {
        "content": "<p>Option 3 is a breaking change because some limited forms of coercion are available now?</p>",
        "id": 250616950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897001
    },
    {
        "content": "<p>e.g. <code>*dyn (Foo + Send)</code> to <code>*dyn Foo</code></p>",
        "id": 250617013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897018
    },
    {
        "content": "<p>Yes, and array to slice conversion too</p>",
        "id": 250617025,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897029
    },
    {
        "content": "<p>(behind a raw pointer)</p>",
        "id": 250617043,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897041
    },
    {
        "content": "<p>we could be more discriminating</p>",
        "id": 250617146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897102
    },
    {
        "content": "<p>in terms of whether unsafe is required</p>",
        "id": 250617157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897106
    },
    {
        "content": "<p>but you're saying that would be a pain</p>",
        "id": 250617165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897110
    },
    {
        "content": "<p>There's this snippet</p>",
        "id": 250617226,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897128
    },
    {
        "content": "<p>something about option 2 feels surprsing to me</p>",
        "id": 250617230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897128
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(unsize)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">Unsize</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">unsize</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">B</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span>: <span class=\"nc\">Unsize</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250617253,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897137
    },
    {
        "content": "<p>ok, yes</p>",
        "id": 250617268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897143
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 250617272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897145
    },
    {
        "content": "<p>\"generic code\" --&gt; always the problem :)</p>",
        "id": 250617301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897156
    },
    {
        "content": "<p>Indeed!</p>",
        "id": 250617310,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897164
    },
    {
        "content": "<p>btw, unrelated:</p>",
        "id": 250617326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897173
    },
    {
        "content": "<p>I see this as an active lang team <a href=\"https://lang-team.rust-lang.org/initiatives.html\">initiative</a> and I'd like to \"retcon\" it into that structure</p>",
        "id": 250617378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897201
    },
    {
        "content": "<p>specifically I think I will create a repository and try to capture some of these design questions and decisions in there</p>",
        "id": 250617393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897213
    },
    {
        "content": "<p>I'll add you as an owner</p>",
        "id": 250617402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897217
    },
    {
        "content": "<p>anyway, hmm</p>",
        "id": 250617406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897220
    },
    {
        "content": "<p>I'm happy to help.</p>",
        "id": 250617408,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897221
    },
    {
        "content": "<p>i would definitely say you are \"owner\" and I am \"liaison\" i this case</p>",
        "id": 250617431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897235
    },
    {
        "content": "<p>ok, that's also fine to me.</p>",
        "id": 250617490,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/144729-wg-traits/topic/object.20upcasting/near/250616776\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>Make vtables \"flat\", by removing all pointer indirections in vtables and appending all the data to the tail. This makes upcasting coercion codegen become adding an offset to the metadata scalar, so won't cause real UB. Will waste some more static bytes in multiple inheritance cases than before, might make embedded-dev people unhappy.</li>\n</ol>\n</blockquote>\n<p>I'm trying to figure out if this indeed removes all potential for UB -- example</p>",
        "id": 250617502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897257
    },
    {
        "content": "<p>is it UB in some sense to to \"adjust\" the point way outside the bounds of the underlying object?</p>",
        "id": 250617540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897273
    },
    {
        "content": "<p>I guess we would have to not use \"in-bounds-gep\"</p>",
        "id": 250617553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897281
    },
    {
        "content": "<p>I know that this discussion has a bit of a long history, I remember talking about it with <span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> and <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> and others from time to time</p>",
        "id": 250617649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897325
    },
    {
        "content": "<p>so I'm wondering also the \"catch\" to (1) -- I guess an example of what it means is that you can't have an equivalent of a \"null\" pointer for a <code>*dyn Foo</code></p>",
        "id": 250617691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897342
    },
    {
        "content": "<p>currently <code>ptr::null&lt;T&gt;</code> requires <code>T: Sized</code></p>",
        "id": 250617797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897379
    },
    {
        "content": "<p>the only way to do it then would be <code>MaybeUnint</code> basically?</p>",
        "id": 250617851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897402
    },
    {
        "content": "<p>well, I guess you can use an <code>Option</code></p>",
        "id": 250617864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897408
    },
    {
        "content": "<p>and since we have a niche, that doesn't even add extra space</p>",
        "id": 250617879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897417
    },
    {
        "content": "<p>is that right?</p>",
        "id": 250617885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897418
    },
    {
        "content": "<p>(side note: I regret that <code>*T</code> can be null)</p>",
        "id": 250617911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897431
    },
    {
        "content": "<p>I think so.</p>",
        "id": 250617949,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897451
    },
    {
        "content": "<p>Maybe it's also possible to provide some placeholder metadata to signal this is <code>null</code></p>",
        "id": 250617981,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897468
    },
    {
        "content": "<p>that's just potential possibility. i don't know whether people really want that.</p>",
        "id": 250618110,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897512
    },
    {
        "content": "<p>I thought about that</p>",
        "id": 250618132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897523
    },
    {
        "content": "<p>I think what you could do is say \"if the data ptr is null, the metadata ptr is arbitrary\"</p>",
        "id": 250618156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897532
    },
    {
        "content": "<p>but then you need an <code>if</code>, right?</p>",
        "id": 250618162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897537
    },
    {
        "content": "<p>e.g., the upcasting has to be a no-op</p>",
        "id": 250618174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897543
    },
    {
        "content": "<p>I meant maybe a <code>null_unsized</code> function, when creating a null trait object ptr, assign some meaningful metadata to it.</p>",
        "id": 250618254,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897587
    },
    {
        "content": "<p>yes-- but what</p>",
        "id": 250618284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897600
    },
    {
        "content": "<p>Then the metadata is \"well-formed\" not arbitrary.</p>",
        "id": 250618346,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897611
    },
    {
        "content": "<p>I guess we could make a metadata that is \"strcturally sound\"</p>",
        "id": 250618355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897615
    },
    {
        "content": "<p>but contains null pointers for each fn</p>",
        "id": 250618365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897619
    },
    {
        "content": "<p>yeah, that's right.</p>",
        "id": 250618389,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897628
    },
    {
        "content": "<p>just <code>undef</code> for methods slots is also ok, i think</p>",
        "id": 250618453,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897661
    },
    {
        "content": "<p>This reminds me of in C++ there's a <code>You can't call pure virtual function</code> shim in some implementations.</p>",
        "id": 250618699,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897756
    },
    {
        "content": "<p>I don't hate that</p>",
        "id": 250618786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897800
    },
    {
        "content": "<p>I think right now I somewhat lean towards \"always valid\" metadata</p>",
        "id": 250618801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897809
    },
    {
        "content": "<p>and having some way to create \"dummy\" metadata</p>",
        "id": 250618814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897814
    },
    {
        "content": "<p>One of my other regrets are raw pointers is making the set of unsafe operations <em>so</em> narrow (just deref)</p>",
        "id": 250618849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897836
    },
    {
        "content": "<p>I didn't truly appreciate how many operations are unsafe in C :)</p>",
        "id": 250618866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897842
    },
    {
        "content": "<p>( even though I should've known better )</p>",
        "id": 250618916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897853
    },
    {
        "content": "<p>this feels like we should write it up and perhaps have a lang team design meeting proposal or something</p>",
        "id": 250618971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629897876
    },
    {
        "content": "<p>sure</p>",
        "id": 250619075,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897919
    },
    {
        "content": "<p>There's really nothing much else in trait upcasting coercion left now. When this issue is solved, i can mark it no longer an incomplete feature.</p>",
        "id": 250619249,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629897983
    },
    {
        "content": "<p>that's awesome</p>",
        "id": 250619315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629898011
    },
    {
        "content": "<p>I guess we should invite libs to that discussion too</p>",
        "id": 250619326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629898016
    },
    {
        "content": "<p>let me go and create that repo real quick</p>",
        "id": 250619336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629898021
    },
    {
        "content": "<p>I'm going to use the same \"basic template\" as <a href=\"https://github.com/nikomatsakis/generic-associated-types-initiative/\">https://github.com/nikomatsakis/generic-associated-types-initiative/</a></p>",
        "id": 250619369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629898037
    },
    {
        "content": "<p>which in turn is based on <span class=\"user-mention\" data-user-id=\"219696\">@XAMPPRocky</span>'s excellent <a href=\"https://github.com/rust-lang/project-group-template\">https://github.com/rust-lang/project-group-template</a></p>",
        "id": 250619408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629898051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> I created and updated the repo a bit</p>",
        "id": 250641096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629907643
    },
    {
        "content": "<p>Thanks! I'm still writing summaries for the status quo and recent discussions. I'll try to finish it today.</p>",
        "id": 250641232,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629907696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> could you merge these message into <a href=\"#narrow/stream/144729-wg-traits/topic/dyn.20upcasting.20coercion\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/dyn.20upcasting.20coercion</a>    topic? I was trying to rename that topic and made it a mess ...</p>",
        "id": 250641375,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629907778
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/dyn-upcasting-coercion-initiative/blob/master/design-questions/upcast-safety.md\">https://github.com/nikomatsakis/dyn-upcasting-coercion-initiative/blob/master/design-questions/upcast-safety.md</a></p>",
        "id": 250641605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629907890
    },
    {
        "content": "<p>oh ok</p>",
        "id": 250641620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629907897
    }
]