[
    {
        "content": "<p>I've been looking into <a href=\"https://github.com/rust-lang/rust/issues/86218\">#86218</a>. This might be a blocker for TAITs.</p>\n<p>This is an example without the dependency on future-util:</p>\n<div class=\"codehilite\"><pre><span></span><code>#![feature(min_type_alias_impl_trait)]\n\n\ntrait X {\n    type Item;\n}\n\nstruct S&lt;T&gt;{\n    a: T,\n}\n\nimpl&lt;T&gt; X for S&lt;T&gt; {\n    type Item = T;\n}\n\ntype Boxed&lt;&#39;a, T&gt; = Box&lt;dyn X&lt;Item = T&gt; + &#39;a&gt;;\n\nimpl&lt;&#39;a, T&gt; X for Boxed&lt;&#39;a, T&gt; {\n    type Item = T;\n}\n\nfn bar&lt;&#39;a&gt;(val: &amp;&#39;a i32) -&gt; Boxed&lt;&#39;a, i32&gt; {\n    Box::new(S {a: 12})\n}\n\ntrait Y&lt;T&gt; {\n    type Inner&lt;&#39;s&gt;: X&lt;Item = i32&gt; + &#39;s;\n\n    fn foo&lt;&#39;s&gt;(val: &amp;&#39;s i32, add_val: T) -&gt; Self::Inner&lt;&#39;s&gt;;\n}\n\n/*\n// This compiles. Because we don&#39;t introduce a lifetime in the impl\n\nstruct Intermediate(());\nstruct Bar;\n\nimpl Y&lt;Intermediate&gt; for Bar{\n    type Inner&lt;&#39;s&gt; = impl X&lt;Item = i32&gt; + &#39;s;\n\n    fn foo&lt;&#39;s&gt;(val: &amp;&#39;s i32, add_val: Intermediate) -&gt; Self::Inner&lt;&#39;s&gt; {\n        bar(val)\n    }\n}\n*/\n\n// This errors\n\nstruct Intermediate&lt;&#39;a&gt;(&amp;&#39;a ());\nstruct Bar;\n\nimpl&lt;&#39;a&gt; Y&lt;Intermediate&lt;&#39;a&gt;&gt; for Bar{\n    type Inner&lt;&#39;s&gt; = impl X&lt;Item = i32&gt; + &#39;s;\n\n    fn foo&lt;&#39;s&gt;(val: &amp;&#39;s i32, add_val: Intermediate&lt;&#39;a&gt;) -&gt; Self::Inner&lt;&#39;s&gt; {\n        bar(val)\n    }\n}\n\nfn main() {}\n</code></pre></div>\n<p>What happens here is that during the regionck of the tyalias we call <a href=\"https://github.com/rust-lang/rust/blob/0ef2b4a29bf70e8984d0d2febb7a546856c554a0/compiler/rustc_infer/src/infer/outlives/obligations.rs#L256-L269\"><code>type_must_outlive</code></a> with <code>impl X</code> and <code>EarlyBound('s)</code>. <code>type_must_outlive</code> calls  <a href=\"https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/compiler/rustc_middle/src/ty/outlives.rs#L50-L58\"><code>push_outlives_components</code></a>. When we compute the components we walk through the parent of the OpaqueTy, which is Inner, but Inner contains the lifetime <code>'a</code> in its substs, which we then constrain to outlive <code>'s</code>. </p>\n<p>I'm not completely sure that this is a bug, but the example above that compiles, kind of suggests that imo. If it is a bug, I think we must somehow change the way we come up with the substs here. Any thoughts?</p>",
        "id": 243056018,
        "sender_full_name": "BN",
        "timestamp": 1623951960
    },
    {
        "content": "<p>Hmm</p>",
        "id": 243060655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953765
    },
    {
        "content": "<p>I added to the project board for now</p>",
        "id": 243061125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623953981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Currently we implement the lifetime bound in <code>impl X + 's</code> as an <code>Outlives(lifetime(HirId { owner: DefId(0:36 ~ issue_86218[317d]::{impl#2}::Inner::{opaque#0}), local_id: 6 }: 's))</code> bound and register the predicate <code>OutlivesPredicate(impl X, ReEarlyBound(1, 's))</code> in <code>check_type_bounds</code>. I'm not sure if this is correct, shouldn't the bound only be checked when we actually check for the concrete type?</p>",
        "id": 244910777,
        "sender_full_name": "BN",
        "timestamp": 1625475678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I need some help with this issue. We need this Outlives bound later when looking for a concrete type, but I'm not sure whether the predicate <code>OutlivesPredicate(impl X, ReEarlyBound(1, 's))</code> actually makes sense, to me it makes more sense that a lifetime bound <code>impl X + 's</code> expresses that <code>impl X</code> is guaranteed to outlive <code>'s</code> and that we only have to check this bound on the concrete type.</p>",
        "id": 246623778,
        "sender_full_name": "BN",
        "timestamp": 1626802436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> maybe you can schedule a slot in my <a href=\"https://calendly.com/nikomatsakis/office-hours\">office hours calendly</a> ?</p>",
        "id": 246627023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626803985
    },
    {
        "content": "<p>Sure. Would you mind if we do the sync here instead of in zoom?</p>",
        "id": 246627497,
        "sender_full_name": "BN",
        "timestamp": 1626804178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> not at all; I should add a clarification to the calendly about that, as it's come up before</p>",
        "id": 246698150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626860695
    },
    {
        "content": "<p>(done)</p>",
        "id": 246698406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626860881
    },
    {
        "content": "<p>To summarize this issue: </p>\n<p>We store lifetime bounds on opaque types in <code>GenericBounds</code> and create <code>OutlivesPredicate</code>s for those bounds. When we region check opaque type items, we have a problem when we use opaque types in type aliases, because we use the substs of the type alias as parent substs for the opaque type. If we have lifetime references for an impl item, those lifetimes occur in the substs of the type alias and hence in the substs of the opaque type. So if we would have:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;a&gt; X for Foo&lt;&#39;a&gt; {\n  type Inner&lt;&#39;s&gt; = impl Y + &#39;s;\n}\n</code></pre></div>\n<p>we would get an outlives error because <code>'s</code> doesn't outlive <code>'a</code>.</p>\n<p>We later need those outlives bounds when we constrain the concrete opaque types <a href=\"https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/compiler/rustc_trait_selection/src/opaque_types.rs#L415\">here</a>.</p>",
        "id": 247466609,
        "sender_full_name": "BN",
        "timestamp": 1627482553
    },
    {
        "content": "<p>I don't think that we actually want to generate an <code>OutlivesPredicate</code> on the impl trait if we have a lifetime bound on it. My understanding of lifetime bounds on impl traits is that they are sort of a guarantee that whatever the concrete type really is, we know that the opaque type is guaranteed to outlive the lifetime bound.</p>",
        "id": 247466775,
        "sender_full_name": "BN",
        "timestamp": 1627482619
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 247466857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627482656
    },
    {
        "content": "<p>I think what we want here is to store the lifetime bounds in a field in <code>OpaqueTy</code> seperately</p>",
        "id": 247466899,
        "sender_full_name": "BN",
        "timestamp": 1627482675
    },
    {
        "content": "<p>Hi</p>",
        "id": 247466918,
        "sender_full_name": "BN",
        "timestamp": 1627482684
    },
    {
        "content": "<p>But maybe I'm misunderstanding the meaning of lifetime bounds on opaque types</p>",
        "id": 247467063,
        "sender_full_name": "BN",
        "timestamp": 1627482739
    },
    {
        "content": "<p>I'm having a hard time understanding this :/</p>",
        "id": 247467329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627482853
    },
    {
        "content": "<p>I don't <em>quite</em> see why we wind up having to prove that <code>'s: 'a</code></p>",
        "id": 247467390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627482894
    },
    {
        "content": "<p>your understanding of what a lifetime bound on impl trait means sounds correct</p>",
        "id": 247467452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627482933
    },
    {
        "content": "<p>in what way is the current setup inconsistent with that?</p>",
        "id": 247467475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627482942
    },
    {
        "content": "<p>ok</p>",
        "id": 247467572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627482971
    },
    {
        "content": "<p>maybe i'm starting to understand</p>",
        "id": 247467576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627482975
    },
    {
        "content": "<p>so <code>impl Y + 's</code> winds up desugared into something like</p>\n<div class=\"codehilite\"><pre><span></span><code>opaque type InnerItem&lt;&#39;a, &#39;s&gt;: Y + &#39;s\n</code></pre></div>",
        "id": 247467687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483022
    },
    {
        "content": "<p>We wind up with that constraint because thats the way we handle lifetime bounds in the lexical region resolver. What actually creates the constraint is <a href=\"https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/compiler/rustc_middle/src/ty/outlives.rs#L50-L58\"><code>push_outlives_components</code></a></p>",
        "id": 247467764,
        "sender_full_name": "BN",
        "timestamp": 1627483059
    },
    {
        "content": "<p>and I guess we wind up proving that <code>InnerItem&lt;'a, 's&gt;: Y + 's</code>... as part of the impl well formedness?</p>",
        "id": 247467766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483059
    },
    {
        "content": "<p>No not as part of well formedness</p>",
        "id": 247467812,
        "sender_full_name": "BN",
        "timestamp": 1627483079
    },
    {
        "content": "<p>the question is why <em>that</em> code is being called</p>",
        "id": 247467862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483085
    },
    {
        "content": "<p>I don't think the flaw is in that code itself</p>",
        "id": 247467871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483091
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/0ef2b4a29bf70e8984d0d2febb7a546856c554a0/compiler/rustc_infer/src/infer/outlives/obligations.rs#L256-L269\"><code>type_must_outlive</code></a> is called when we region_check items</p>",
        "id": 247467932,
        "sender_full_name": "BN",
        "timestamp": 1627483120
    },
    {
        "content": "<p>and it calls <code>push_outlives_components</code> which creates the constraint based on the <code>substs</code> of that item and the bound on the lifetime</p>",
        "id": 247468006,
        "sender_full_name": "BN",
        "timestamp": 1627483149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20lifetime.20error.20.2386218/near/247467932\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/0ef2b4a29bf70e8984d0d2febb7a546856c554a0/compiler/rustc_infer/src/infer/outlives/obligations.rs#L256-L269\"><code>type_must_outlive</code></a> is called when we region_check items</p>\n</blockquote>\n<p>where?</p>",
        "id": 247468036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483164
    },
    {
        "content": "<p>iirc it is called in response to some other obligations</p>",
        "id": 247468067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483183
    },
    {
        "content": "<p>ah yes, actually I think you're right. This is done during well-formedness checking, when all the registered region obligations are checked</p>",
        "id": 247468216,
        "sender_full_name": "BN",
        "timestamp": 1627483257
    },
    {
        "content": "<p>ok</p>",
        "id": 247468237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483269
    },
    {
        "content": "<p>I have a hunch that the WF code for <code>impl Trait</code> is wrong</p>",
        "id": 247468256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483278
    },
    {
        "content": "<p>ok, haven't looked into that. Also not that familiar with that code</p>",
        "id": 247468317,
        "sender_full_name": "BN",
        "timestamp": 1627483315
    },
    {
        "content": "<p>I'm pulling up some rust sources :)</p>",
        "id": 247468376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483327
    },
    {
        "content": "<p>ok</p>",
        "id": 247468388,
        "sender_full_name": "BN",
        "timestamp": 1627483333
    },
    {
        "content": "<p>in any case, the question would be I guess when the code gets <em>registered</em></p>",
        "id": 247468580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483431
    },
    {
        "content": "<p>something like rr can be useful for this</p>",
        "id": 247468651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483448
    },
    {
        "content": "<p>what is rr?</p>",
        "id": 247468710,
        "sender_full_name": "BN",
        "timestamp": 1627483477
    },
    {
        "content": "<p>reverse debugger</p>",
        "id": 247468792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483522
    },
    {
        "content": "<p>it lets you attach \"timestamps\" to each log output</p>",
        "id": 247468803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483530
    },
    {
        "content": "<p>and then jump back in time to a specific timestamp and do a bt etc</p>",
        "id": 247468815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483538
    },
    {
        "content": "<p>what is your test case exactly?</p>",
        "id": 247468830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483544
    },
    {
        "content": "<p>e.g., you showed me</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Inner</span><span class=\"o\">&lt;'</span><span class=\"na\">s</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247468877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483562
    },
    {
        "content": "<p>but what is the definition of the trait <code>X</code>?</p>",
        "id": 247468920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483568
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2a15487abba6702ba625cad93bb483eb\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2a15487abba6702ba625cad93bb483eb</a></p>",
        "id": 247468923,
        "sender_full_name": "BN",
        "timestamp": 1627483570
    },
    {
        "content": "<p>That's the code from the github issue. Not as minimized as it could be, sorry</p>",
        "id": 247469085,
        "sender_full_name": "BN",
        "timestamp": 1627483661
    },
    {
        "content": "<p>does it -- yes, that</p>",
        "id": 247469259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483757
    },
    {
        "content": "<p>I was wodnering if it had to be so complex :)</p>",
        "id": 247469264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483762
    },
    {
        "content": "<p>I think there is a related async issue</p>",
        "id": 247469553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627483894
    },
    {
        "content": "<p>Actually I'm not sure whether this is actually well-formedness related. In <code>regionck_item</code> we call <code>rcx.visit_region_obligations(item_id);</code> <a href=\"https://github.com/rust-lang/rust/blob/eba3228b2a9875d268ff3990903d04e19f6cdb0c/compiler/rustc_typeck/src/check/regionck.rs#L135\">here</a></p>",
        "id": 247469720,
        "sender_full_name": "BN",
        "timestamp": 1627483966
    },
    {
        "content": "<p>I think thats where the error originates</p>",
        "id": 247469758,
        "sender_full_name": "BN",
        "timestamp": 1627483982
    },
    {
        "content": "<p>this seems like a fairly minimal repo:</p>",
        "id": 247469865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627484041
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b15f690a74aa0dfef0dd6d215a6cd527\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b15f690a74aa0dfef0dd6d215a6cd527</a></p>",
        "id": 247469871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627484042
    },
    {
        "content": "<p>Thanks</p>",
        "id": 247470022,
        "sender_full_name": "BN",
        "timestamp": 1627484113
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/42940\">https://github.com/rust-lang/rust/issues/42940</a></p>",
        "id": 247470097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627484153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> do you think this bug <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> is related?</p>",
        "id": 247470113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627484162
    },
    {
        "content": "<p>(I do)</p>",
        "id": 247470258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627484218
    },
    {
        "content": "<p>hm not sure. I think its not related</p>",
        "id": 247470539,
        "sender_full_name": "BN",
        "timestamp": 1627484349
    },
    {
        "content": "<p>Still not sure whether that's actually the same error, but the way we handle lifetime bounds on opaque types definitely seems to be wrong</p>",
        "id": 247471427,
        "sender_full_name": "BN",
        "timestamp": 1627484740
    },
    {
        "content": "<p>How much time do you have left?</p>",
        "id": 247471454,
        "sender_full_name": "BN",
        "timestamp": 1627484749
    },
    {
        "content": "<p>The way I thought we could handle this problem is to maybe add the lifetime bounds as a field to <code>OpaqueTy</code> and not include them in all generic bounds. Since to my knowledge we only need the lifetime bounds later when we constrain the concrete type.</p>",
        "id": 247471814,
        "sender_full_name": "BN",
        "timestamp": 1627484919
    },
    {
        "content": "<p>and store the lifetime bounds for opaque ty defids, when we need to use them for other outlives constraints such as in the other issue you posted.</p>",
        "id": 247472702,
        "sender_full_name": "BN",
        "timestamp": 1627485324
    }
]