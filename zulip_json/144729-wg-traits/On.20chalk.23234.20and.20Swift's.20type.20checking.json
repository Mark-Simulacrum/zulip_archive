[
    {
        "content": "<p>Recently I found <a href=\"https://forums.swift.org/t/swift-type-checking-is-undecidable/39024\">this discussion</a> on Swift's type checking being undecidable, and it reminded me of <a href=\"https://github.com/rust-lang/chalk/issues/234\">rust-lang/chalk#234</a>. Would it be possible for that chalk issue to be unfixable in the general case for the same reason?</p>",
        "id": 273346029,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1645888240
    },
    {
        "content": "<p>Let me look :)</p>",
        "id": 273347416,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645889905
    },
    {
        "content": "<p>So, looking at </p>\n<div class=\"codehilite\"><pre><span></span><code>protocol Impossible {\n  associatedtype A : Impossible\n  associatedtype B : Impossible\n  associatedtype C : Impossible\n  associatedtype D : Impossible\n  associatedtype E : Impossible\n    where A.C == C.A\n          A.D == D.A\n          B.C == C.B\n          B.D == D.B\n          C.E == E.C.A\n          D.E == E.D.B\n          C.C.A == C.C.A.E\n}\n</code></pre></div>",
        "id": 273348105,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645890841
    },
    {
        "content": "<p>You can't currently write that</p>",
        "id": 273348152,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645890865
    },
    {
        "content": "<p>You could potentially make a <em>new</em> associated type and use that for the associated types clauses though.</p>",
        "id": 273348179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645890926
    },
    {
        "content": "<p>Let me try to write something.</p>",
        "id": 273348235,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645890978
    },
    {
        "content": "<p>Maybe this one? It appears to fail with \"overflow evaluating the requirement ...\"</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Impossible</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>::<span class=\"n\">A</span>: <span class=\"nc\">Impossible</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Impossible</span><span class=\"o\">&gt;</span>::<span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>::<span class=\"n\">A</span>: <span class=\"nc\">Impossible</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">D</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Impossible</span><span class=\"o\">&gt;</span>::<span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>::<span class=\"n\">B</span>: <span class=\"nc\">Impossible</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Impossible</span><span class=\"o\">&gt;</span>::<span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>::<span class=\"n\">B</span>: <span class=\"nc\">Impossible</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">D</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Impossible</span><span class=\"o\">&gt;</span>::<span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>::<span class=\"n\">C</span>: <span class=\"nc\">Impossible</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">E</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Impossible</span><span class=\"o\">&gt;</span>::<span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Impossible</span><span class=\"o\">&gt;</span>::<span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>::<span class=\"n\">D</span>: <span class=\"nc\">Impossible</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">E</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Impossible</span><span class=\"o\">&gt;</span>::<span class=\"n\">D</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Impossible</span><span class=\"o\">&gt;</span>::<span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Impossible</span><span class=\"o\">&gt;</span>::<span class=\"n\">C</span>: <span class=\"nc\">Impossible</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Impossible</span><span class=\"o\">&gt;</span>::<span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Impossible</span><span class=\"o\">&gt;</span>::<span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Impossible</span><span class=\"o\">&gt;</span>::<span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">A</span>: <span class=\"nc\">Impossible</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">B</span>: <span class=\"nc\">Impossible</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">C</span>: <span class=\"nc\">Impossible</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">D</span>: <span class=\"nc\">Impossible</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">E</span>: <span class=\"nc\">Impossible</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273348954,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1645891720
    },
    {
        "content": "<p>Try this: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=c4d76a2ddb61ff540a3bdae75d4a8217\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=c4d76a2ddb61ff540a3bdae75d4a8217</a></p>",
        "id": 273348987,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645891799
    },
    {
        "content": "<p>I can imagine yours we quickly run into a cycle where we need to normalize <code>Self::*</code> and run into a cycle immediately (nothing fancy in terms of weirdness)</p>",
        "id": 273349058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645891879
    },
    {
        "content": "<p>Yours has an error (<code>C.E</code> is set to <code>Self::N</code> while it should be <code>Self::M</code>) but it still works after fixing it</p>",
        "id": 273349225,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1645892103
    },
    {
        "content": "<p>whoops</p>",
        "id": 273349237,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645892120
    },
    {
        "content": "<p>not sure though. Might run into issues when actually using these</p>",
        "id": 273349245,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645892147
    },
    {
        "content": "<p>But TIL swift has the equivalent of traits and associated types</p>",
        "id": 273349292,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645892171
    },
    {
        "content": "<p>However I wonder if it's possible to not have the additional I..=R types. I feel that's like asking the user to solve the costraints.</p>",
        "id": 273349840,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1645892928
    }
]