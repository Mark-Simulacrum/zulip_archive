[
    {
        "content": "<p>For those who are curious, rust-call is our hack to deal with the lack of variadic generics. The built-in fn traits have a single argument type <code>A</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nc\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>this argument is always a tuple. The \"rust-call\" ABI says \"expect a function with a tuple of arguments and flatten them\".</p>",
        "id": 200288752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591735981
    },
    {
        "content": "<p>A thing of beauty</p>",
        "id": 200288846,
        "sender_full_name": "Areredify",
        "timestamp": 1591736022
    },
    {
        "content": "<p>The hope is that eventually we will have variadic generics -- the <code>Fn</code> traits still can't be implemented by hand, so as to leave room for this</p>",
        "id": 200288969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591736062
    },
    {
        "content": "<p>I don't think you can even write <code>T: Fn&lt;X&gt;</code> by hand, you have to use the <code>Fn(...)</code> notation, which forces a tuple</p>",
        "id": 200289025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591736089
    },
    {
        "content": "<p>this is sometimes annoying</p>",
        "id": 200289043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591736097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/what.20is.20rust-call/near/200288969\">said</a>:</p>\n<blockquote>\n<p>The hope is that eventually we will have variadic generics -- the <code>Fn</code> traits still can't be implemented by hand, so as to leave room for this</p>\n</blockquote>\n<p>Do you know why they can't be implemented manually? (or is it more look away magic)</p>",
        "id": 200289320,
        "sender_full_name": "mental",
        "timestamp": 1591736250
    },
    {
        "content": "<p>There is special code in the compiler to prevent it</p>",
        "id": 200289344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591736267
    },
    {
        "content": "<p>The methods are unstable.</p>",
        "id": 200289359,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591736273
    },
    {
        "content": "<p>This is so that you can't make impls that violate the rust-call ABI expectations</p>",
        "id": 200289388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591736282
    },
    {
        "content": "<p>and so you don't have stable code that references the rust-call ABI</p>",
        "id": 200289426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591736290
    }
]