[
    {
        "content": "<p>So i'm looking into the remaining bits of <a href=\"https://github.com/rust-lang/rust/issues/369\" title=\"https://github.com/rust-lang/rust/issues/369\">#369</a>. And found that the <code>ParameterKind</code>s are a little tricky to deal with.</p>",
        "id": 193601429,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586543246
    },
    {
        "content": "<p>The interning itself is not hard. However currently the <code>Binders</code> and <code>Canonical</code> doesn't carry interner info with it.</p>",
        "id": 193601645,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586543363
    },
    {
        "content": "<p>what's more, <code>Canonical</code> supports <code>PartialOrd</code> and <code>Ord</code> here.</p>",
        "id": 193601752,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586543403
    },
    {
        "content": "<p>Before i start hacking on this, i want to validate that i'm doing the right thing first, so here are my questions:</p>",
        "id": 193601887,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586543487
    },
    {
        "content": "<ol>\n<li>Do i need to intern each <code>ParameterKind</code> in the <code>Vec</code> separately?</li>\n</ol>",
        "id": 193601994,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586543541
    },
    {
        "content": "<ol start=\"2\">\n<li>Is it reasonable to add <code>PartialOrd</code> and <code>Ord</code> to the bounds of <code>InternedParameterKindsWithUniverseIndex</code>?</li>\n</ol>",
        "id": 193602052,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586543588
    },
    {
        "content": "<ol start=\"3\">\n<li>I'm gonna change <code>Canonical&lt;T&gt;</code> to <code>Canonical&lt;I: Interner, T&gt;</code>, is this correct?</li>\n</ol>",
        "id": 193602399,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586543770
    },
    {
        "content": "<p>Going to sleep now. I think i can do the hacking when i wake up.</p>",
        "id": 193602452,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586543820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Wanna.20help.20finishing.20up.20.23369/near/193601994\" title=\"#narrow/stream/144729-wg-traits/topic/Wanna.20help.20finishing.20up.20.23369/near/193601994\">said</a>:</p>\n<blockquote>\n<ol>\n<li>Do i need to intern each <code>ParameterKind</code> in the <code>Vec</code> separately?</li>\n</ol>\n</blockquote>\n<p>No, I don't think so</p>",
        "id": 193602830,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586544022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Wanna.20help.20finishing.20up.20.23369/near/193602052\" title=\"#narrow/stream/144729-wg-traits/topic/Wanna.20help.20finishing.20up.20.23369/near/193602052\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>Is it reasonable to add <code>PartialOrd</code> and <code>Ord</code> to the bounds of <code>InternedParameterKindsWithUniverseIndex</code>?</li>\n</ol>\n</blockquote>\n<p>For <code>Canonical</code>? What happens if we don't derive <code>PartialOrd and </code>Ord<code> for that? (IIRC, it create problems with the coherence tree in </code>chalk-solve`). Might be worth looking at if we can order based on hash. Since there is no \"real\" ordering.</p>",
        "id": 193602943,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586544109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Wanna.20help.20finishing.20up.20.23369/near/193602399\" title=\"#narrow/stream/144729-wg-traits/topic/Wanna.20help.20finishing.20up.20.23369/near/193602399\">said</a>:</p>\n<blockquote>\n<ol start=\"3\">\n<li>I'm gonna change <code>Canonical&lt;T&gt;</code> to <code>Canonical&lt;I: Interner, T&gt;</code>, is this correct?</li>\n</ol>\n</blockquote>\n<p><code>Canonical&lt;T&gt;</code> already implements <code>HasInterner</code> using <code>T::Interner</code>, so I don't think that's needed</p>",
        "id": 193602948,
        "sender_full_name": "detrumi",
        "timestamp": 1586544112
    },
    {
        "content": "<p>well</p>",
        "id": 193603049,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586544149
    },
    {
        "content": "<p>you need <code>I: Interner</code> because <code>binders</code> with become <code>I::Interned&lt;something&gt;</code></p>",
        "id": 193603133,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586544198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Wanna.20help.20finishing.20up.20.23369/near/193602943\" title=\"#narrow/stream/144729-wg-traits/topic/Wanna.20help.20finishing.20up.20.23369/near/193602943\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Wanna.20help.20finishing.20up.20.23369/near/193602052\" title=\"#narrow/stream/144729-wg-traits/topic/Wanna.20help.20finishing.20up.20.23369/near/193602052\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>Is it reasonable to add <code>PartialOrd</code> and <code>Ord</code> to the bounds of <code>InternedParameterKindsWithUniverseIndex</code>?</li>\n</ol>\n</blockquote>\n<p>For <code>Canonical</code>? What happens if we don't derive <code>PartialOrd and </code>Ord<code> for that? (IIRC, it create problems with the coherence tree in </code>chalk-solve`). Might be worth looking at if we can order based on hash. Since there is no \"real\" ordering.</p>\n</blockquote>\n<p>Just checked, we don't need the <code>PartialOrd</code>/<code>Ord</code> on <code>Canonical</code> or <code>UCanonical</code></p>",
        "id": 193603401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586544339
    },
    {
        "content": "<p>Won't that become <code>T::Interner::Interned&lt;something&gt;</code>? (optionally through <code>HasInterner</code> with  <code>Canonical&lt;T&gt;::Interner</code>)</p>",
        "id": 193603402,
        "sender_full_name": "detrumi",
        "timestamp": 1586544340
    },
    {
        "content": "<p>uh, I mean</p>",
        "id": 193603457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586544362
    },
    {
        "content": "<p>I think you could do</p>",
        "id": 193603476,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586544365
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>pub struct Canonical&lt;T: HasInterner&gt; {\n  value: T,\n  binders: T::Interner::Interned&lt;something&gt;,\n}\n</pre></div>",
        "id": 193603564,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586544427
    },
    {
        "content": "<p>but you could also do:</p>\n<div class=\"codehilite\"><pre><span></span>pub struct Canonical&lt;I: Interner, T&gt; {\n  value: T,\n  binders: I::&lt;something&gt;,\n}\n</pre></div>",
        "id": 193603746,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586544524
    },
    {
        "content": "<p>or if you really want to make sure that <code>&lt;T as HasInterner&gt;::Interner == I</code>:</p>",
        "id": 193603785,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586544553
    },
    {
        "content": "<p>err</p>",
        "id": 193603899,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586544612
    },
    {
        "content": "<p>nvm, I don't want to have to think about it</p>",
        "id": 193603922,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586544624
    },
    {
        "content": "<p>Right, the second associates the interner more directly with the binders, instead of the value</p>",
        "id": 193604341,
        "sender_full_name": "detrumi",
        "timestamp": 1586544844
    },
    {
        "content": "<p>The only potential problem with the first is if we currently store any value that isn't <code>HasInterner</code></p>",
        "id": 193604546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586544960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Wanna.20help.20finishing.20up.20.23369/near/193603564\" title=\"#narrow/stream/144729-wg-traits/topic/Wanna.20help.20finishing.20up.20.23369/near/193603564\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>pub struct Canonical&lt;T: HasInterner&gt; {\n  value: T,\n  binders: T::Interner::Interned&lt;something&gt;,\n}\n</pre></div>\n\n\n</blockquote>\n<p>Yes, theoretically i can do this, in reality i tried and find that the bound got spread into <strong>many many</strong> places, even outside <code>chalk-ir</code> crate...</p>",
        "id": 193636114,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586568910
    },
    {
        "content": "<p>For <code>Canonical</code>?</p>",
        "id": 193636171,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586569035
    },
    {
        "content": "<p>That's <em>probably</em> okay?</p>",
        "id": 193636173,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586569039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I'll use <code>Canonical&lt;I: Interner, T&gt;</code> for now, and see whether i can switch to Canonical&lt;T: HasInterner&gt; as a follow-up.</p>",
        "id": 193638130,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586572060
    },
    {
        "content": "<p>One more question, i don't really understand this <code>Fold</code> trait.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TI</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Fold</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TI</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Fold</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TI</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TI</span>: <span class=\"nc\">TargetInterner</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nb\">Result</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">TI</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"nb\">Result</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fold_with</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;i</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">folder</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Folder</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TI</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">outer_binder</span>: <span class=\"nc\">DebruijnIndex</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fallible</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span>::<span class=\"nb\">Result</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">I</span>: <span class=\"na\">&#39;i</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">TI</span>: <span class=\"na\">&#39;i</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">binders</span>: <span class=\"nc\">self_binders</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">value</span>: <span class=\"nc\">self_value</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">self_value</span><span class=\"p\">.</span><span class=\"n\">fold_with</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">outer_binder</span><span class=\"p\">.</span><span class=\"n\">shifted_in</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Canonical</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">binders</span>: <span class=\"nc\">self_binders</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">value</span>: <span class=\"nc\">value</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"err\">```</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193638175,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586572115
    },
    {
        "content": "<p>So it seems there're two interners. I need to grasp the <code>self_binders</code>'s actually data and reintern that into the TI interner, is this correct?</p>",
        "id": 193638192,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586572179
    },
    {
        "content": "<p>Maybe i should add something like <code>transfer_parameter_kinds</code> to <code>TargetInterner</code>.</p>",
        "id": 193638396,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586572550
    },
    {
        "content": "<p>You might just be able to derive fold here</p>",
        "id": 193639150,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586574083
    },
    {
        "content": "<p>Currently, binders aren't folded. But with the interner, they should be</p>",
        "id": 193639156,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586574109
    },
    {
        "content": "<p>ok, let me have a try.</p>",
        "id": 193639529,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586574911
    },
    {
        "content": "<p>thanks!</p>",
        "id": 193639530,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586574914
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/386\" title=\"https://github.com/rust-lang/chalk/pull/386\">https://github.com/rust-lang/chalk/pull/386</a></p>",
        "id": 193645625,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586587177
    },
    {
        "content": "<p>Now I'm trying to removing the <code>Interner</code> generics argument from <code>Binder</code>(I added it to finish the work). And here's this code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">Binders</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">V</span>: <span class=\"nc\">HasInterner</span><span class=\"o\">&lt;</span><span class=\"n\">Interner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"nb\">IntoIterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Binders</span><span class=\"o\">&lt;&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">IntoIter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">BindersIntoIterator</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">IntoIter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">map_ref</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">r</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">).</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193781543,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586790731
    },
    {
        "content": "<p>During compilation this emits:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0275]: overflow evaluating the requirement `&amp;_: std::iter::IntoIterator`\n  |\n  = help: consider adding a `#![recursion_limit=&quot;256&quot;]` attribute to your crate\n  = note: required because of the requirements on the impl of `std::iter::IntoIterator` for `&amp;Binders&lt;_&gt;`\n  = note: required because of the requirements on the impl of `std::iter::IntoIterator` for `&amp;Binders&lt;Binders&lt;_&gt;&gt;`\n  = note: required because of the requirements on the impl of `std::iter::IntoIterator` for `&amp;Binders&lt;Binders&lt;Binders&lt;_&gt;&gt;&gt;`\n</pre></div>",
        "id": 193781578,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586790758
    },
    {
        "content": "<p>Can you show BindersIntoIterator?</p>",
        "id": 193782284,
        "sender_full_name": "Areredify",
        "timestamp": 1586791154
    },
    {
        "content": "<p>And impl for Binders (thats probably the culprit)</p>",
        "id": 193782486,
        "sender_full_name": "Areredify",
        "timestamp": 1586791247
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">Binders</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">V</span>: <span class=\"nc\">HasInterner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"nb\">IntoIterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Binders</span><span class=\"o\">&lt;&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">IntoIter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">BindersIntoIterator</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">IntoIter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">map_ref</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">r</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">).</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Allows iterating over a Binders&lt;Vec&lt;T&gt;&gt;, for instance.</span>\n<span class=\"sd\">/// Each element will include the same set of parameter bounds.</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Binders</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">V</span>: <span class=\"nc\">HasInterner</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span>: <span class=\"nc\">HasInterner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Binders</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">IntoIter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">BindersIntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">IntoIter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">BindersIntoIterator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">iter</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">binders</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">binders</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">BindersIntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">V</span>: <span class=\"nc\">HasInterner</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">iter</span>: <span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">IntoIter</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">binders</span>: <span class=\"nc\">ParameterKinds</span><span class=\"o\">&lt;</span><span class=\"n\">V</span>::<span class=\"n\">Interner</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193782494,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586791250
    },
    {
        "content": "<p>I think it's caused by the first two impls.</p>",
        "id": 193782523,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586791264
    },
    {
        "content": "<p>So I know the problem, probably</p>",
        "id": 193783028,
        "sender_full_name": "Areredify",
        "timestamp": 1586791543
    },
    {
        "content": "<p>You need <code>&lt;V as IntoIterator&gt;::Item: HasInterner</code> bound on the first impl</p>",
        "id": 193783120,
        "sender_full_name": "Areredify",
        "timestamp": 1586791581
    },
    {
        "content": "<p>let me have a try</p>",
        "id": 193783232,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586791640
    },
    {
        "content": "<p>Sorry, <code>&lt;&amp;'a V as IntoIterator&gt;::Item: HasInterner</code></p>",
        "id": 193783362,
        "sender_full_name": "Areredify",
        "timestamp": 1586791704
    },
    {
        "content": "<p>yes, adding <code>&lt;&amp;'a V as IntoIterator&gt;::Item: HasInterner</code> solves the problem! thanks!</p>",
        "id": 193783405,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586791741
    },
    {
        "content": "<p>rustc tries to resolve <code>self.map_ref(|r| r).into_iter()</code>, so it tries to find <code>IntoIter</code> impl for <code>Binders&lt;&amp;V&gt;</code>, but your second impl doesnt qualify for that because it has a <code>V: HasInterner</code> bound</p>",
        "id": 193783451,
        "sender_full_name": "Areredify",
        "timestamp": 1586791767
    },
    {
        "content": "<p>thanks for the explanation! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> i'll continue with the refactor.</p>",
        "id": 193783818,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586791958
    },
    {
        "content": "<p>Refactor complete! Gonna have some sleep now :)</p>",
        "id": 193793357,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586797197
    },
    {
        "content": "<p>Hey, so I am catching up now after leaving comments on the PR,</p>",
        "id": 193803200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586802203
    },
    {
        "content": "<p>but I'd still prefer to avoid <code>Canonical&lt;I, T&gt;</code></p>",
        "id": 193803211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586802210
    },
    {
        "content": "<p>although it's not the end of the world</p>",
        "id": 193803213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586802215
    },
    {
        "content": "<p>OK, so, judgement call needed:</p>",
        "id": 193817592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586809819
    },
    {
        "content": "<p>the PR uses <code>ParameterKindsWithUniverseIndex</code> as a type name</p>",
        "id": 193817613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586809833
    },
    {
        "content": "<p>I think eventually we're going to want a name like <code>CanonicalVarKinds</code> or something</p>",
        "id": 193817627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586809844
    },
    {
        "content": "<p>rustc uses <code>CanonicalVarInfos</code></p>",
        "id": 193817637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586809850
    },
    {
        "content": "<p>should we do this prior to landing the PR?</p>",
        "id": 193817642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586809857
    },
    {
        "content": "<p>As follow-up?</p>",
        "id": 193817647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586809860
    },
    {
        "content": "<p>I would say just rename it now, it's not like it's blocking anything</p>",
        "id": 193818044,
        "sender_full_name": "Areredify",
        "timestamp": 1586810067
    },
    {
        "content": "<p>Agreed. I don't really like the long <code>ParameterKindsWithUniverseIndex</code> name</p>",
        "id": 193818095,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586810104
    },
    {
        "content": "<p>CanonicalVarKinds?</p>",
        "id": 193818901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810553
    },
    {
        "content": "<p>Seems ok -- analogous to <code>ParameterVarKinds</code></p>",
        "id": 193818907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810558
    },
    {
        "content": "<p>maybe we should rename that to <code>BinderVarKinds</code>?</p>",
        "id": 193818916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586810565
    },
    {
        "content": "<p>er, I guess it's <code>ParameterKinds</code></p>",
        "id": 193822492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812596
    },
    {
        "content": "<p>anyway I sort of like <code>BoundVarKinds</code> (the \"kinds\" of the bound variables)</p>",
        "id": 193822514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812612
    },
    {
        "content": "<p>and <code>CanonicalVarKinds</code> (the \"kinds\" of the canonical variables)</p>",
        "id": 193822524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586812620
    },
    {
        "content": "<p>I'm awake now. Ok, i'll do the renaming after i'm back from day job. I'll rename both?</p>",
        "id": 193841600,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586826751
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">IntoBindersAndValue</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_binders_and_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>In my initial version i actually have it exactly like this. However the interner borrow (&amp;I) need to outlive the borrowed Binder, it should be &amp;'a I while Self: 'a. The code will be a little messier. Shall we go for this approach?</p>",
        "id": 193841842,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586827026
    },
    {
        "content": "<p>Hmm, I think I'd still prefer it, but that is somewhat unexpected</p>",
        "id": 193873840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586858124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Wanna.20help.20finishing.20up.20.23369/near/193841600\" title=\"#narrow/stream/144729-wg-traits/topic/Wanna.20help.20finishing.20up.20.23369/near/193841600\">said</a>:</p>\n<blockquote>\n<p>I'm awake now. Ok, i'll do the renaming after i'm back from day job. I'll rename both?</p>\n</blockquote>\n<p>On the PR I only requested renaming one, because I couldn't really decide what <code>ParameterKinds</code> <em>should</em> be called, but I would be ok with renaming both too.</p>",
        "id": 193873940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586858175
    },
    {
        "content": "<p>ParameterKinds is not the <em>worst</em>, these are generic parameters</p>",
        "id": 193873978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586858199
    },
    {
        "content": "<p><code>Kinds</code> was a little confusing because from in rust they are kinds, but in logic they are sorts, that threw me for a loop for a bit</p>",
        "id": 193874241,
        "sender_full_name": "Areredify",
        "timestamp": 1586858338
    },
    {
        "content": "<p>Adjusted the code :)</p>",
        "id": 193881902,
        "sender_full_name": "Charles Lew",
        "timestamp": 1586863101
    },
    {
        "content": "<p>Rebase done~</p>",
        "id": 194337953,
        "sender_full_name": "Charles Lew",
        "timestamp": 1587057413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> thanks -- I saw one nit, I may drop in and push a fix tho if you're not around</p>",
        "id": 194420550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1587119029
    }
]