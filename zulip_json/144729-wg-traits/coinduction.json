[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span> I was re-reading the issue and I saw that I <a href=\"https://github.com/rust-lang/chalk/issues/399#issuecomment-643420016\">left this comment</a> about an alternative approach for handling coinduction</p>",
        "id": 228487921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614720018
    },
    {
        "content": "<p>I'm curious if you considered and rejected that</p>",
        "id": 228487969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614720035
    },
    {
        "content": "<p>My approach is more or less based on this comment.</p>",
        "id": 228488077,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1614720075
    },
    {
        "content": "<p>ok</p>",
        "id": 228488110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614720092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229554609\">said</a>:</p>\n<blockquote>\n<p>basically there is already a mechanism for \"temporary cached results\"</p>\n</blockquote>\n<p>As a small followup from yesterdays meeting, I would like to get some clarity on this. Did you mean the mechanism for delaying results inside an inductive cycle by leaving them on the graph? Or did you mean the cache in <code>RecursiveContext</code> (which as far as I understand is not really temporary)?</p>",
        "id": 229620339,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1615365068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span> I meant the mechanism for delaying results inside of inductive cycles, I think</p>",
        "id": 230009213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615546293
    },
    {
        "content": "<p>Yeah, that was essentially what the closed PR was about. I had some intuition because of which I didn't follow this approach any further but I'd need to think about it again.</p>",
        "id": 230011194,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1615547270
    },
    {
        "content": "<p>I'm going to give this a bit of thought :)</p>",
        "id": 230044899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615562038
    },
    {
        "content": "<p>today ran away from from me (sigh)</p>",
        "id": 230094335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615581665
    },
    {
        "content": "<p>but I'm opening up the PR now :)</p>",
        "id": 230094349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615581669
    },
    {
        "content": "<p>I'm also reading <a href=\"https://github.com/rust-lang/chalk/issues/683\">chalk#683</a></p>",
        "id": 230095472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615582263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span> what motivated <a href=\"https://github.com/rust-lang/rust/issues/690\">#690</a> over <a href=\"https://github.com/rust-lang/rust/issues/683\">#683</a>? were there specific tests or things that weren't working? I can't quite follow from your comments</p>",
        "id": 230095668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615582361
    },
    {
        "content": "<p>It wasn't really a test or anything just unexpected behaviour. <a href=\"https://github.com/rust-lang/chalk/issues/683\">chalk#683</a> uses the same delaying method for coinductive cycles as for inductive cycles, i.e. it leaves the nodes in the search graph. Unfortunately, the existence of nodes in the graph is also used to recognize inductive cycle start. Thus, delayed results were interpreted as part of an inductive cycle. This still worked for all tests but it seemed too \"hacky\" to me to work for more complicated cases.</p>\n<p>tl;dr I simply didn't think enough about it. The other approach seemed simpler to understand and implement correctly.</p>",
        "id": 230098135,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1615583444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Small update: The simple usage of the minimums (like in <a href=\"https://github.com/rust-lang/chalk/issues/683\">chalk#683</a>) does not work for nested coinductive cycles like in the <code>coinductive_unsound_inter_cycle_dependency</code> test I added in <a href=\"https://github.com/rust-lang/chalk/issues/690\">chalk#690</a> . There, the false positives still occur. I'm not sure, how likely and thus relevant this is in real world applications though.</p>",
        "id": 230103152,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1615585661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span> that's helpful, thanks, let me dig into that example!</p>",
        "id": 230160888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615639877
    },
    {
        "content": "<p>What I wanted to do when I get back is to walk through some examples (in particular the one <span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span> raised) in detail with the new PR</p>",
        "id": 231800528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616679196
    },
    {
        "content": "<p>ok, back</p>",
        "id": 231804090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616680546
    },
    {
        "content": "<p>howdy</p>",
        "id": 231804459,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616680673
    },
    {
        "content": "<p>maybe we can start with</p>",
        "id": 231804564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616680698
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C1orC2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C3</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C1orC2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C1orC2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231804573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616680700
    },
    {
        "content": "<p>actually let's just do</p>",
        "id": 231804645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616680731
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">coinductive_unsound1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C1orC2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C1orC2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C3</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C3</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C1orC2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C1orC2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C1orC2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C1orC2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231804647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616680733
    },
    {
        "content": "<p>ugh</p>",
        "id": 231804707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616680754
    },
    {
        "content": "<p>There are just the same examples we worked on for the SLG solver?</p>",
        "id": 231804737,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616680764
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">coinductive_unsound1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C1orC2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C3</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C1orC2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C1orC2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"nc\">C1orC2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">yields</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"No possible solution\"</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231804785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616680781
    },
    {
        "content": "<p>this is the basic example</p>",
        "id": 231804793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616680784
    },
    {
        "content": "<p>just to refresh some memory, bring back Ye Good Olde Days</p>",
        "id": 231804878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616680804
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://media.giphy.com/media/3o6MbmL5HRG8KCL3by/source.gif\"><img src=\"https://media.giphy.com/media/3o6MbmL5HRG8KCL3by/source.gif\"></a></div>",
        "id": 231804993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616680833
    },
    {
        "content": "<p>brb, one sec</p>",
        "id": 231805080,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616680854
    },
    {
        "content": "<p>so in the recursive solver...</p>",
        "id": 231805157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616680884
    },
    {
        "content": "<p>we start proving <code>C1orC2</code> and we have two routes to explore</p>",
        "id": 231805311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616680930
    },
    {
        "content": "<p>we go down the <code>T: C1</code> (let's say) and that will take us to <code>T: C2</code></p>",
        "id": 231805370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616680956
    },
    {
        "content": "<p>let me make a tree</p>",
        "id": 231805379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616680959
    },
    {
        "content": "<ul>\n<li><code>!X: C1orC2</code><br>\n    * <code>X: C1orC1 if X: C1</code><br>\n        * <code>X: C1 if X: C2, X: C3</code><br>\n            * <code>X: C2 if X: C1</code><br>\n                * <code>X: C1</code> -- inductive cycle</li>\n</ul>",
        "id": 231805569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681026
    },
    {
        "content": "<p>ugh</p>",
        "id": 231805583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681030
    },
    {
        "content": "<p>I'm making a hackmd</p>",
        "id": 231805591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681032
    },
    {
        "content": "<p>back</p>",
        "id": 231805715,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616681063
    },
    {
        "content": "<p><a href=\"https://hackmd.io/2nm3xPJ1TTGc2r4iiWi4Lg\">https://hackmd.io/2nm3xPJ1TTGc2r4iiWi4Lg</a></p>",
        "id": 231805718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681064
    },
    {
        "content": "<p>So you're writing the goals we have to solve?</p>",
        "id": 231806139,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616681213
    },
    {
        "content": "<p>yeah that's kind of the path the recursive solver takes</p>",
        "id": 231806219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681243
    },
    {
        "content": "<p>I'm starting to remember some things</p>",
        "id": 231806507,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616681339
    },
    {
        "content": "<p>so when it hits the cycle</p>",
        "id": 231806574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681363
    },
    {
        "content": "<p>ugh silly vscode extension</p>",
        "id": 231806935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681476
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/recursive.rs#L134-L139\">https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/recursive.rs#L134-L139</a></p>",
        "id": 231807023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/coinduction/near/231806935\">said</a>:</p>\n<blockquote>\n<p>ugh silly vscode extension</p>\n</blockquote>\n<p>(you have to have a remote named <code>origin</code> for it to do the right thing)</p>",
        "id": 231807103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681534
    },
    {
        "content": "<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 231807174,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616681554
    },
    {
        "content": "<p>So, is there are reason we can't employ a similiar \"delayed subgoal\" approach in the recursive solver?</p>",
        "id": 231807295,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616681591
    },
    {
        "content": "<p>I don't want to do that</p>",
        "id": 231807338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681604
    },
    {
        "content": "<p>I think we plausibly <em>could</em> but the recursive solver has other options :)</p>",
        "id": 231807379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681616
    },
    {
        "content": "<p>anyway let's walk through because I have to bring it back</p>",
        "id": 231807411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681623
    },
    {
        "content": "<p>sorry, I'm being slow</p>",
        "id": 231807429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681628
    },
    {
        "content": "<p>so we invoke <code>solve_iteration</code></p>",
        "id": 231807460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681638
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/solve.rs#L38-L42\">https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/solve.rs#L38-L42</a></p>",
        "id": 231807535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681648
    },
    {
        "content": "<p>which will invoke <a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/solve.rs#L121-L125\"><code>solve_from_clauses</code></a></p>",
        "id": 231807656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681684
    },
    {
        "content": "<p>this creates a fulfillment context</p>",
        "id": 231807817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681734
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/solve.rs#L165-L166\">here</a></p>",
        "id": 231807902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681760
    },
    {
        "content": "<p>and invokes <a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/fulfill.rs#L518-L519\"><code>solve()</code></a></p>",
        "id": 231807988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681775
    },
    {
        "content": "<p>which invokes <a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/fulfill.rs#L437-L438\"><code>fulfill()</code></a></p>",
        "id": 231808188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681838
    },
    {
        "content": "<p>which invokes <a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/fulfill.rs#L462-L466\"><code>prove()</code></a></p>",
        "id": 231808243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681856
    },
    {
        "content": "<p>which <a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/fulfill.rs#L357-L358\">calls <code>self.solver.solve_goal()</code></a></p>",
        "id": 231808301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681878
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/recursive.rs#L211-L215\">defined here</a></p>",
        "id": 231808421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681905
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/recursive.rs#L222-L226\">which detects the cycle</a></p>",
        "id": 231808505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681932
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/recursive.rs#L231-L241\">and detects that it is coinductive here</a></p>",
        "id": 231808553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681946
    },
    {
        "content": "<p>importantly, we don't update the <code>minimums</code> at all</p>",
        "id": 231808620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681968
    },
    {
        "content": "<p>the <code>minimums</code> is used to track what part of the stack this result depends on</p>",
        "id": 231808657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681984
    },
    {
        "content": "<p>(and how)</p>",
        "id": 231808679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616681992
    },
    {
        "content": "<p>we don't even flag this as a cycle</p>",
        "id": 231808697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682000
    },
    {
        "content": "<p>ok</p>",
        "id": 231808754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682005
    },
    {
        "content": "<p>this affects caching because</p>",
        "id": 231809001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682076
    },
    {
        "content": "<p>if we pop back up to <a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/recursive.rs#L134-L139\"><code>solve_new_subgoal</code></a>, where this whole thing started</p>",
        "id": 231809645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682269
    },
    {
        "content": "<p>actually no, higher than that</p>",
        "id": 231809718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682295
    },
    {
        "content": "<p>well, solve-new-subgoal basically loops</p>",
        "id": 231809734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682300
    },
    {
        "content": "<p>we gotta go <a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/recursive.rs#L211-L215\"><code>solve_goal</code></a></p>",
        "id": 231809821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682322
    },
    {
        "content": "<p>once we've reached the fixed point, basically, we cache but only if the <a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/recursive.rs#L272-L288\">\"minimum\" is <code>&gt;= dfn</code>\"</a> -- meaning that this did not depend on anything outside of its subtree</p>",
        "id": 231810017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682377
    },
    {
        "content": "<p>in this case, we have not altered minimum, so we don't realize that it depends on something outside of its subtree</p>",
        "id": 231810072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682394
    },
    {
        "content": "<p>but of course it does -- it depends on itself</p>",
        "id": 231810110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682409
    },
    {
        "content": "<p>(not sure if anybody is even listening here lol but it seems useful to just dump stream of consciousness here...)</p>",
        "id": 231810205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682448
    },
    {
        "content": "<p>I am</p>",
        "id": 231810368,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616682497
    },
    {
        "content": "<p>so, one thing we could do is to alter the minimums</p>",
        "id": 231810457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682531
    },
    {
        "content": "<p>You're doing what I've done with like the binder refactor stuff</p>",
        "id": 231810490,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616682543
    },
    {
        "content": "<p>Its helpful</p>",
        "id": 231810507,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616682547
    },
    {
        "content": "<p>(ps cc <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> who has been asking me to follow up with braindumps from time to time :)</p>",
        "id": 231810551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682563
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/lib.rs#L15-L20\"><code>Minimums</code></a> is sort of a misnomer</p>",
        "id": 231810794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682636
    },
    {
        "content": "<p>that we don't properly handle negative subgoals</p>",
        "id": 231810817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682643
    },
    {
        "content": "<p>and hence there is only one \"minimum\", the positive one</p>",
        "id": 231810829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682649
    },
    {
        "content": "<p>but anyway</p>",
        "id": 231810842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682651
    },
    {
        "content": "<p>so, let's work through what would happen if we <em>just</em> updated the positive minimum for a coinductive goal</p>",
        "id": 231810908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682669
    },
    {
        "content": "<p>(side note: it's so hard to figure out how to represent the stack etc)</p>",
        "id": 231810951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682683
    },
    {
        "content": "<p>that is, in the hackmd</p>",
        "id": 231810959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682686
    },
    {
        "content": "<p>let me add a few more details</p>",
        "id": 231810989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682697
    },
    {
        "content": "<p>ok so I expanded it a bit</p>",
        "id": 231811744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682921
    },
    {
        "content": "<p>the <code>goal:</code> cases basically constitute the <em>stack</em></p>",
        "id": 231811761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682928
    },
    {
        "content": "<p>and I just labeled the stack depth</p>",
        "id": 231811831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682957
    },
    {
        "content": "<p>so the minimum here would be depth 1</p>",
        "id": 231811842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682962
    },
    {
        "content": "<p>in that case, we would consider <code>!X: C1</code> to be \"ok\" but we would return a minimum of 1</p>",
        "id": 231811947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616682987
    },
    {
        "content": "<p>this would mean that we would not cache the result</p>",
        "id": 231811979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683001
    },
    {
        "content": "<p>actually wait, where was that cycle detected again...</p>",
        "id": 231812020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683021
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/a0eac73f60ad0ab1de2075def346bd5a5f2352cd/chalk-recursive/src/recursive.rs#L231-L241\">here</a></p>",
        "id": 231812084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683048
    },
    {
        "content": "<p>so actually we never cached the <code>!X: C1</code> result</p>",
        "id": 231812107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683058
    },
    {
        "content": "<p>it's the <code>X: C2</code> result that we cached, duh, but that also would not be cached here</p>",
        "id": 231812126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683068
    },
    {
        "content": "<p>ok, let's work through the other example</p>",
        "id": 231812244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"365822\">FireFighterDuck</span> <a href=\"#narrow/stream/144729-wg-traits/topic/coinduction/near/230103152\">said</a>:</p>\n<blockquote>\n<p>the <code>coinductive_unsound_inter_cycle_dependency</code> test I added in <a href=\"https://github.com/rust-lang/chalk/issues/690\">chalk#690</a> .</p>\n</blockquote>\n<p>this one</p>",
        "id": 231812287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683118
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/3df6b429cbd801c5b4bf4b4ecc30732f59cba07a/tests/test/coinduction.rs#L433-L501\">link</a></p>",
        "id": 231812339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683144
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Another test with two nested coinductive cycles.</span>\n<span class=\"sd\">/// Here the inner cycle is also dependent on the outer one.</span>\n<span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">coinductive_unsound_inter_cycle_dependency</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C1andC2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C3</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C5</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C6</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"cp\">#[coinductive]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C7</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C6</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C7</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C5</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>:<span class=\"nc\">C6</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C4</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C3</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C5</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C3</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C4</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C3</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">T</span>: <span class=\"nc\">C1andC2</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">C2</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"nc\">C1andC2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">yields</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"No possible solution\"</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231812377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683156
    },
    {
        "content": "<p>good lord :)</p>",
        "id": 231812384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683159
    },
    {
        "content": "<p>let me condense that down</p>",
        "id": 231812393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683164
    },
    {
        "content": "<p>oh goodness</p>",
        "id": 231812466,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616683188
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>C1andC2 :- C1, C2.\nC1 :- C3.\nC2 :- C5, C1.\nC3 :- C4.\nC3 :- C5.\nC4 :- C1.\nC5 :- C6.\nC6 :- C2, C7.\n</code></pre></div>",
        "id": 231812565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683211
    },
    {
        "content": "<p>so what happens here...</p>",
        "id": 231812609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683227
    },
    {
        "content": "<p>I also made that one (more or less iirc) into a graph that may be easier to read <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <a href=\"https://github.com/rust-lang/chalk/blob/3df6b429cbd801c5b4bf4b4ecc30732f59cba07a/book/src/recursive/coinduction.md\">https://github.com/rust-lang/chalk/blob/3df6b429cbd801c5b4bf4b4ecc30732f59cba07a/book/src/recursive/coinduction.md</a></p>",
        "id": 231812628,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1616683236
    },
    {
        "content": "<p>ah, nice</p>",
        "id": 231812716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683269
    },
    {
        "content": "<p>too bad github doesn't know how to render that</p>",
        "id": 231812723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683273
    },
    {
        "content": "<p>but there's a mermaid live editor</p>",
        "id": 231812756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683285
    },
    {
        "content": "<p><a href=\"https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggVERcbiAgQy0tPkMxO1xuICBDMS0tPkMzO1xuICBDMy0uLT5DNTtcbiAgQzMtLi0-QzQ7XG4gIEM0LS0-QzE7XG4gIEM1LS0-QzY7XG4gIEMtLT5DMjtcbiAgQzItLT5DNTtcbiAgQzItLT5DMTtcbiAgQzYtLT5DNztcbiAgQzYtLT5DMjsiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ\">https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggVERcbiAgQy0tPkMxO1xuICBDMS0tPkMzO1xuICBDMy0uLT5DNTtcbiAgQzMtLi0-QzQ7XG4gIEM0LS0-QzE7XG4gIEM1LS0-QzY7XG4gIEMtLT5DMjtcbiAgQzItLT5DNTtcbiAgQzItLT5DMTtcbiAgQzYtLT5DNztcbiAgQzYtLT5DMjsiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ</a></p>",
        "id": 231812856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683312
    },
    {
        "content": "<p>that's beautiful</p>",
        "id": 231812970,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616683336
    },
    {
        "content": "<p>dang, zulip is not embedding it =)</p>",
        "id": 231813000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683348
    },
    {
        "content": "<p>ok so the \"inner cycle\" here is C5, C6, C2</p>",
        "id": 231813172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683403
    },
    {
        "content": "<p>this is ultimately not provable because C6 is false</p>",
        "id": 231813331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683446
    },
    {
        "content": "<p>or rather C7 is false</p>",
        "id": 231813343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683448
    },
    {
        "content": "<p>C1 is provable, though, right? because C1, C3, C4</p>",
        "id": 231813436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683478
    },
    {
        "content": "<p>seems so</p>",
        "id": 231813613,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616683533
    },
    {
        "content": "<p>we didn't really cover the whole caching mechanism in detail</p>",
        "id": 231813869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683611
    },
    {
        "content": "<p>the current setup is that we have a <em>search graph</em> and a <em>stack</em></p>",
        "id": 231813898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683622
    },
    {
        "content": "<p>this is entangled, side note, with my plans to make chalk more parallelizable</p>",
        "id": 231813926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683631
    },
    {
        "content": "<p>there is also a cache</p>",
        "id": 231813947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683641
    },
    {
        "content": "<p>I think the search graph and stack should be thread-local</p>",
        "id": 231813971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683649
    },
    {
        "content": "<p>but the cache should be shared</p>",
        "id": 231813980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683653
    },
    {
        "content": "<p>right now they are all kind of shared</p>",
        "id": 231813986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683656
    },
    {
        "content": "<p>the search graph contains things tracked by their <em>depth first search number</em></p>",
        "id": 231814057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683677
    },
    {
        "content": "<p>which is distinct from the stack depth, monotonically increasing</p>",
        "id": 231814117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683687
    },
    {
        "content": "<p>let me expand the previous example a bit just to bring it fresh in mind</p>",
        "id": 231814269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683741
    },
    {
        "content": "<p>(actually the dfn maybe doesn't monotonically increase when we do caching, I forget, but anyway in this case it will)</p>",
        "id": 231814385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683791
    },
    {
        "content": "<p>so basically when we finish proving <code>X: C2</code> we have a minimum of 1 so we leave the goal in the graph</p>",
        "id": 231814481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683812
    },
    {
        "content": "<p>(instead of moving it to the cache)</p>",
        "id": 231814573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683838
    },
    {
        "content": "<p>then we compute the next goal: <code>!X: C3</code></p>",
        "id": 231814589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683842
    },
    {
        "content": "<p>this fails, minimum is INT_MAX (no cycle)</p>",
        "id": 231814659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683870
    },
    {
        "content": "<p>but when we combine those the minimum remains 1</p>",
        "id": 231814676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683877
    },
    {
        "content": "<p>so I think the bug that <span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span> was pointing out is that now the goal at depth 1 has a minimum of 1, so once we reach a fixed point, we imagine that we can move things into the cache, but actually there are some incorrect results in the graph</p>",
        "id": 231814787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683918
    },
    {
        "content": "<p>in particular, we still have a recorded result of <code>Ok()</code> for <code>C2</code></p>",
        "id": 231814858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683929
    },
    {
        "content": "<p>(is that correct, <span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span> ?)</p>",
        "id": 231814872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683934
    },
    {
        "content": "<p>(this was not the full proposal that I proposed in the issue; only a piece of it)</p>",
        "id": 231814927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683952
    },
    {
        "content": "<p>the problem here is that we didn't really do the 'fixed point' thing correctly</p>",
        "id": 231814964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616683969
    },
    {
        "content": "<p>in particular, the solution I was proposing in the issue would have worked somewhat differently</p>",
        "id": 231815081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684008
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/399#issuecomment-643420016\">this solution</a></p>",
        "id": 231815163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684037
    },
    {
        "content": "<p>let's give it a better name</p>",
        "id": 231815289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684068
    },
    {
        "content": "<p>I'm just going to call it Solution0 :)</p>",
        "id": 231815322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684076
    },
    {
        "content": "<p>if we had used Solution0 in full, we would have started the goal at depth 1 with a result of <code>Ok</code></p>",
        "id": 231815447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684113
    },
    {
        "content": "<p>when we encounter a cycle, we wouldn't special coinduction except in one way</p>",
        "id": 231815541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684136
    },
    {
        "content": "<p>we would detect a \"mixed cycle\" where the head is coinductive but there are inductive goals on the stack and force that to Err</p>",
        "id": 231815585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684152
    },
    {
        "content": "<p>(I think?)</p>",
        "id": 231815607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684159
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 231815665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684169
    },
    {
        "content": "<p>ok I have to think about that but never mind</p>",
        "id": 231815722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684188
    },
    {
        "content": "<p>point is, we would update the minimums in the same way, but when we got back to the loop around <code>!X: C1</code></p>",
        "id": 231815803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684213
    },
    {
        "content": "<p>we would change the result from <code>Ok()</code> to <code>Err</code></p>",
        "id": 231815829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684220
    },
    {
        "content": "<p>and repeat the loop</p>",
        "id": 231815835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684222
    },
    {
        "content": "<p>this time when we get to <code>!X: C2 :- !X: C1</code> we would get back an <em>error</em></p>",
        "id": 231815872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684232
    },
    {
        "content": "<p>(even though it's a coinductive cycle)</p>",
        "id": 231815887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684237
    },
    {
        "content": "<p>and so the final result would be that <code>!X: C2</code> cannot be proven</p>",
        "id": 231815950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684259
    },
    {
        "content": "<p>which I believe is correct</p>",
        "id": 231815961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684262
    },
    {
        "content": "<p>I elaborated this in the hackmd</p>",
        "id": 231816285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684360
    },
    {
        "content": "<p><a href=\"https://hackmd.io/2nm3xPJ1TTGc2r4iiWi4Lg?view#Solution0\">here</a></p>",
        "id": 231816300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684366
    },
    {
        "content": "<p>does that sound right so far?</p>",
        "id": 231816361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684387
    },
    {
        "content": "<p>(I want to look at the inner cycle test next)</p>",
        "id": 231816373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684393
    },
    {
        "content": "<p>(and I have to come back to what to do with mixed cycles, but I believe the answer is error)</p>",
        "id": 231816403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684402
    },
    {
        "content": "<p>unfortunately I have another meeting now :)</p>",
        "id": 231816491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684416
    },
    {
        "content": "<p>I have 9-10 blocked out tomorrow again though</p>",
        "id": 231816544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684427
    },
    {
        "content": "<p>and maybe I'll pop back in later</p>",
        "id": 231816563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1616684432
    },
    {
        "content": "<p>I'll be here tomorrow too</p>",
        "id": 231816750,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616684474
    },
    {
        "content": "<p>But maybe we want to discuss binder refactor PR too</p>",
        "id": 231816779,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616684484
    },
    {
        "content": "<p>I don't usually work in this area so forgive my ignorance, but looking at the <code>C1andC2</code> example and solving it by hand, it seems that the easiest way is to reason about the negative graph. <code>C7</code> is unprovable, but it is a requirement for <code>C6</code> so that is not provable, so <code>C5</code> is not provable, so <code>C2</code> is not provable, so <code>C1andC2</code> is not provable. At that point we saturate; thus everything that remains - <code>C1</code>,<code>C3</code>,<code>C4</code> - is provable. This is just exploiting that the negation of a coinductive predicate is inductive, so we can get at it with a simple connectivity search (working backward along edges, with \"and\" and \"or\" flipped).</p>",
        "id": 231894470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616716649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> so there's a few problems with that approach. I think first is that even we do have a \"tree\", it's not clear where the \"leaves\" are. Let's say you <em>didn't</em> have <code>C7</code>, where would you start to \"work backward\"? Or, imagine that these clauses had conditions for them to be true? You essentially start to have a totally different problem of \"where do I start\". Also, if you start with what you <em>need</em> and go through all the ways that <em>could</em> be true, you do theoretically the minimal work to solve the goal. (You could imagine multiple separate trees too; if you wanted to solve a goal, you would on average need to go through several trees before getting to the one you need)</p>",
        "id": 231903364,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616723574
    },
    {
        "content": "<p>That's not to say it isn't possible :) I'm by no means an expert in prolog solvers (barely a beginner in the grand scheme of things). So it would be interesting if there's any work on that sort of approach</p>",
        "id": 231903480,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616723717
    },
    {
        "content": "<p>Right, I think you have to combine the work of discovering the tree with pruning leaves that are proven impossible. It's probably not too far from what you are doing already but maybe it helps conceptualize it better</p>",
        "id": 232009375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616782096
    },
    {
        "content": "<p>So during solving you get three states: true, false, and \"maybe\" or \"not yet refuted\". A maybe node becomes false if one of its dependencies becomes false. So this ends up looking like a DFS interspersed with a refutation:</p>\n<ul>\n<li>frontier = <code>C1andC2</code>, expand <code>C1andC2</code></li>\n<li><code>C1andC2</code>: maybe, frontier = <code>C1, C2</code>, expand <code>C1</code></li>\n<li><code>C1andC2, C1, C2</code>: maybe, frontier = <code>C3, C2</code>, expand <code>C3</code></li>\n<li><code>C1andC2, C1, C2, C3</code>: maybe, frontier = <code>C4, C5, C2</code>, expand <code>C4</code></li>\n<li><code>C1andC2, C1, C2, C3, C4</code>: maybe, frontier = <code>C5, C2</code>, expand <code>C5</code></li>\n<li><code>C1andC2, C1, C2, C3, C4, C5</code>: maybe, frontier = <code>C6, C2</code>, expand <code>C6</code></li>\n<li><code>C1andC2, C1, C2, C3, C4, C5, C6</code>: maybe, frontier = <code>C2, C7</code>, expand <code>C2</code></li>\n<li><code>C1andC2, C1, C2, C3, C4, C5, C6</code>: maybe, frontier = <code>C7</code>, expand <code>C7</code></li>\n<li><code>C1andC2, C1, C2, C3, C4, C5, C6</code>: maybe, <code>C7</code>: false, frontier = empty, refute <code>C7</code></li>\n<li><code>C1andC2, C1, C2, C3, C4, C5</code>: maybe, <code>C6, C7</code>: false, frontier = empty, refute <code>C6</code></li>\n<li><code>C1andC2, C1, C2, C3, C4</code>: maybe, <code>C5, C6, C7</code>: false, frontier = empty, refute <code>C5</code></li>\n<li><code>C1andC2, C1, C3, C4</code>: maybe, <code>C2, C5, C6, C7</code>: false, frontier = empty, refute <code>C2</code></li>\n<li><code>C1, C3, C4</code>: maybe, <code>C1andC2, C2, C5, C6, C7</code>: false, frontier = empty, refute <code>C1andC2</code></li>\n</ul>\n<p>This is the last step since we only care to refute the original goal <code>C1andC2</code>, but if we wanted to prove <code>C1</code> we would continue for one more step, see that nothing remains to be refuted, and conclude that all the maybes are true.</p>",
        "id": 232011982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616783363
    },
    {
        "content": "<p>If there are an infinite number of nodes and the graph is lazily expanded, this approach can be incomplete, for example if <code>Cn :- C(n+1)</code> then we would like to conclude that <code>C0</code> is true (coinductively) but it's hard to discover this unless you can see the whole graph</p>",
        "id": 232012874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616783740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span>  Your description is actually pretty similar to how the recursive solver works. There are a few differences though. On one hand, Chalk needs to compute not only true and false but type constraints as well.  Thus, a true solution can also be ambiguous with some restraints (e.g. all types that implement <code>Size</code>). On the other hand, your deduction would most likely not refute C1andC2 directly when it hasn't even finished C1 (at least if it works the same way Chalk is currently implemented). This kind of connection is - as far as I understand - not feasible to check in the midst of another computation. I'm not quite sure whether the SLG solver could do this. <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> could probably tell you more about this. <br>\nOn another note, do you already know the <a href=\"https://rust-lang.github.io/chalk/book/what_is_chalk.html\">Chalk book</a>? It's a really good introduction to Chalk and the quite fascinating theory behind its two solvers :D</p>",
        "id": 232024925,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1616789387
    },
    {
        "content": "<p>I don't really have time right now to read through this and comment right, but if I remember, I'll get to it later :)</p>",
        "id": 232025887,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616789794
    },
    {
        "content": "<p>I thought we could talk about this today</p>",
        "id": 232264611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023285
    },
    {
        "content": "<p>At least for a bit :)</p>",
        "id": 232264624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023291
    },
    {
        "content": "<p>I have to bring back the context in my head though</p>",
        "id": 232264645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023298
    },
    {
        "content": "<p>I've also got to grind some coffee beans <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span></p>",
        "id": 232264669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023308
    },
    {
        "content": "<p>I like how <code>:coff</code> brings up <span aria-label=\"coffin\" class=\"emoji emoji-26b0\" role=\"img\" title=\"coffin\">:coffin:</span> too</p>",
        "id": 232264694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023319
    },
    {
        "content": "<p>are emoticons suggesting something to coffee lovers?</p>",
        "id": 232264796,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1617023362
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://i.pinimg.com/originals/e3/c9/b0/e3c9b0a8d07b34357a2089f66018c486.jpg\"><img src=\"https://i.pinimg.com/originals/e3/c9/b0/e3c9b0a8d07b34357a2089f66018c486.jpg\"></a></div>",
        "id": 232264821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023375
    },
    {
        "content": "<p>lol</p>",
        "id": 232264850,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1617023388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/coinduction/near/231815722\">said</a>:</p>\n<blockquote>\n<p>ok I have to think about that but never mind</p>\n</blockquote>\n<p>I have to re-read from this point</p>",
        "id": 232265124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023497
    },
    {
        "content": "<p>not sure who's around :)</p>",
        "id": 232265137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> have you followed any of this so far?</p>",
        "id": 232265372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023611
    },
    {
        "content": "<p>nope :)</p>",
        "id": 232265384,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1617023617
    },
    {
        "content": "<p>I was reading the book and thought ... well some point I'm going to read about coinduction so let's keep reading :)</p>",
        "id": 232265420,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1617023638
    },
    {
        "content": "<p>heh</p>",
        "id": 232265761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023782
    },
    {
        "content": "<p>well let's put 15-20 minutes into it...</p>",
        "id": 232265783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023796
    },
    {
        "content": "<p>I had a hackmd</p>",
        "id": 232265852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/coinduction/near/231805718\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://hackmd.io/2nm3xPJ1TTGc2r4iiWi4Lg\">https://hackmd.io/2nm3xPJ1TTGc2r4iiWi4Lg</a></p>\n</blockquote>\n<p>ah here it is</p>",
        "id": 232265884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> the <em>basic</em> idea is that 'cycles are ok'</p>",
        "id": 232266116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023951
    },
    {
        "content": "<p>so e.g. you can have cyclic rules like \"<code>Foo</code> is true if <code>Foo</code> is true\"</p>",
        "id": 232266161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023982
    },
    {
        "content": "<p><code>Foo :- Foo</code></p>",
        "id": 232266166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023984
    },
    {
        "content": "<p>this comes up with proving autotraits like <code>Send</code></p>",
        "id": 232266184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617023997
    },
    {
        "content": "<p>because you might e.g. have</p>",
        "id": 232266188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024000
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">next</span><span class=\"w\"> </span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232266253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024014
    },
    {
        "content": "<p>and this might give rise to a rule like</p>",
        "id": 232266263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024020
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Implemented(List&lt;T&gt;: Send) :-\n    Implemented(T: Send),\n    Implemented(Option&lt;Box&lt;List&lt;T&gt;&gt;&gt;: Send).\n</code></pre></div>",
        "id": 232266306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024042
    },
    {
        "content": "<p>if you trace this out, you'll find that to prove that <code>Option&lt;Box&lt;List&lt;T&gt;&gt;&gt;: Send</code> you ultimately have to prove <code>List&lt;T&gt;: Send</code>, which is what you were trying to prove in the first place</p>",
        "id": 232266353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024062
    },
    {
        "content": "<p><em>and that's ok</em></p>",
        "id": 232266361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024066
    },
    {
        "content": "<p>anyway I think what I wanted to do was to work through this nested cycle example</p>",
        "id": 232266739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024236
    },
    {
        "content": "<p>ohh I see</p>",
        "id": 232266934,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1617024308
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 232266939,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1617024310
    },
    {
        "content": "<p>ok so the inner cycle test</p>",
        "id": 232267283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024466
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>C1andC2 :- C1, C2.\nC1 :- C3.\nC2 :- C5, C1.\nC3 :- C4.\nC3 :- C5.\nC4 :- C1.\nC5 :- C6.\nC6 :- C2, C7.\n</code></pre></div>",
        "id": 232267296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024470
    },
    {
        "content": "<p>let's walk through it, using Solution0</p>",
        "id": 232267342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024482
    },
    {
        "content": "<p>to start, we have the goal <code>C1andC2</code></p>",
        "id": 232267386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024502
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>* clause: `C1andC2 :- C1, C2`\n</code></pre></div>",
        "id": 232267746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024642
    },
    {
        "content": "<p>you're talking about the example from the HackMD?</p>",
        "id": 232267765,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1617024651
    },
    {
        "content": "<p>yeah</p>",
        "id": 232267776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024655
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/3df6b429cbd801c5b4bf4b4ecc30732f59cba07a/tests/test/coinduction.rs#L433-L501\">link</a></p>",
        "id": 232267796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024661
    },
    {
        "content": "<p>ahh the last one</p>",
        "id": 232267797,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1617024661
    },
    {
        "content": "<p>ps, <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> I didn't forget about you, I just want to work through this example before I circle back and read what you're saying in depth :)</p>",
        "id": 232268614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617024978
    },
    {
        "content": "<p>no worries, I'm not speaking with respect to the current algorithm in chalk so it probably isn't immediately useful</p>",
        "id": 232269882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617025475
    },
    {
        "content": "<p>ok, I worked through the example</p>",
        "id": 232271045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617025878
    },
    {
        "content": "<p>as far as I can tell, Solution0 handles the nested cycle case correctly</p>",
        "id": 232271076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617025890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span> do you happen to be around?</p>",
        "id": 232271081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617025894
    },
    {
        "content": "<p>so-- I'm thinking about your PR :)</p>",
        "id": 232271233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617025940
    },
    {
        "content": "<p>I think there's an easier way to do it</p>",
        "id": 232271256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617025951
    },
    {
        "content": "<p>but to start, do these results look correct to you for the nested cycle example?</p>",
        "id": 232271346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617025984
    },
    {
        "content": "<p>Final cache:</p>\n<ul>\n<li><code>C1 =&gt; Ok</code></li>\n<li><code>C2 =&gt; error</code></li>\n<li><code>C3 =&gt; Ok</code></li>\n<li><code>C4 =&gt; Ok</code></li>\n<li><code>C5 =&gt; error</code></li>\n<li><code>C6 =&gt; error</code></li>\n<li><code>C7 =&gt; error</code></li>\n<li><code>C1andC2 =&gt; Error</code></li>\n</ul>",
        "id": 232271354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617025987
    },
    {
        "content": "<p>it looks right to me</p>",
        "id": 232271632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617026086
    },
    {
        "content": "<p>Yes, these should be the correct results.</p>",
        "id": 232271648,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1617026096
    },
    {
        "content": "<p>so the important thing is to start the \"initial value\" for coinductive goals to <code>Ok</code> and to iterate if it changes</p>",
        "id": 232271700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617026120
    },
    {
        "content": "<p>(that said, I have to think about what to do with mixed cycles, I think the answer is that it is just always an error)</p>",
        "id": 232271738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617026137
    },
    {
        "content": "<p>Thanks to your explanation of Solution0, I finally understood how it should work. There were some minor misunderstandings on my part. Nonetheless, I would try to come up with an implementation of Solution0 in a new PR if that's okay for you.</p>",
        "id": 232272262,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1617026340
    },
    {
        "content": "<p>Agreed</p>",
        "id": 232272704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617026508
    },
    {
        "content": "<p>Keep the old one :)</p>",
        "id": 232272707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617026511
    },
    {
        "content": "<p>sadly I have to run for now</p>",
        "id": 232273044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617026637
    },
    {
        "content": "<blockquote>\n<p>I think the answer is that it is just always an error</p>\n</blockquote>\n<p>i would intuitively expect mixed cycles to be fine. This is really interesting to me, so in case you remember then, please ping me if you make progress here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 232342200,
        "sender_full_name": "lcnr",
        "timestamp": 1617054761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span> just saw <a href=\"https://github.com/rust-lang/chalk/pull/698\">https://github.com/rust-lang/chalk/pull/698</a></p>",
        "id": 232766445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617287598
    },
    {
        "content": "<p>that was fast!</p>",
        "id": 232766449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617287600
    },
    {
        "content": "<p>Fortunately, solution0 is pretty similar to my first approach. I hope I implemented solution0 correctly; it works at least for all tests and behaves exactly as described in the hackmd for the inner cycle example.</p>",
        "id": 232767780,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1617288029
    },
    {
        "content": "<p>I'll do some reviewing</p>",
        "id": 232899989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617371024
    }
]