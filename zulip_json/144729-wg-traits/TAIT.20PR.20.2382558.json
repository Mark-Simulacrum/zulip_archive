[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> -- I was looking at <a href=\"https://github.com/rust-lang/rust/pull/82558\">https://github.com/rust-lang/rust/pull/82558</a> again, and I am wondering whether you would like to hand it off to <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> or <span class=\"user-mention\" data-user-id=\"218805\">@Mark Drobnak</span> (or someone else, but they were at the wg-traits meeting yesterday)? Also, you two, I'm wondering whether you'd like to arrange a time to discuss it later today.</p>",
        "id": 238445017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620811250
    },
    {
        "content": "<p>Yea, I'd be happy to pass it on and just do some mentoring</p>",
        "id": 238461007,
        "sender_full_name": "oli",
        "timestamp": 1620820465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/238445017\">said</a>:</p>\n<blockquote>\n<p>Hey <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> -- I was looking at <a href=\"https://github.com/rust-lang/rust/pull/82558\">https://github.com/rust-lang/rust/pull/82558</a> again, and I am wondering whether you would like to hand it off to <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> or <span class=\"user-mention silent\" data-user-id=\"218805\">Mark Drobnak</span> (or someone else, but they were at the wg-traits meeting yesterday)? Also, you two, I'm wondering whether you'd like to arrange a time to discuss it later today.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I can take this one and talk with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> about it</p>",
        "id": 238478692,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620828185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> if you have time later today we can sync about it</p>",
        "id": 238484651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620830331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/238484651\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> if you have time later today we can sync about it</p>\n</blockquote>\n<p>sure, do you want to schedule some time now?</p>",
        "id": 238484726,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620830361
    },
    {
        "content": "<p>yep. maybe <time datetime=\"2021-05-12T18:30:00Z\">2021-05-12T14:30:00-04:00</time> ?</p>",
        "id": 238485002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620830445
    },
    {
        "content": "<p>let's coordinate on PM</p>",
        "id": 238488201,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620831542
    },
    {
        "content": "<p>that's ok</p>",
        "id": 238488286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620831579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ping</p>",
        "id": 238523631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620844796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 238524065,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620844959
    },
    {
        "content": "<p>do you want a zoom call or just have a chat here?</p>",
        "id": 238524162,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620845008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> sorry, missied you ping</p>",
        "id": 238525585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845536
    },
    {
        "content": "<p>well, I'm game for either kind</p>",
        "id": 238525600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845540
    },
    {
        "content": "<p>i've been doing a lot of zoom, so maybe we try Zulip?</p>",
        "id": 238525613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845546
    },
    {
        "content": "<p>yeah, whatever you prefer is ok to me</p>",
        "id": 238525628,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620845558
    },
    {
        "content": "<p>so...</p>",
        "id": 238525646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845570
    },
    {
        "content": "<p>I didn't look at the PR, was checking the issue and yeah, it's bad :)</p>",
        "id": 238525738,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620845601
    },
    {
        "content": "<p>so</p>",
        "id": 238525785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845628
    },
    {
        "content": "<p>I'm trying to decide where to start :)</p>",
        "id": 238525799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845635
    },
    {
        "content": "<p>so no idea why happens but if I understood correctly we end with a <code>A: 'static</code> and the compiler accepts that regardless what's in A is a String, not even a reference</p>",
        "id": 238525806,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620845637
    },
    {
        "content": "<p>I guess i can explain what the PR is doing</p>",
        "id": 238525807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845638
    },
    {
        "content": "<p>along the way, we'll have to explain a bit about how this whole setup works</p>",
        "id": 238525885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845664
    },
    {
        "content": "<p>might be good for rustc-dev-guide, if it's not already covered :)</p>",
        "id": 238525917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845671
    },
    {
        "content": "<p>well yeah, I was starting from the what's the problem :)</p>",
        "id": 238525932,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620845679
    },
    {
        "content": "<p>example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">B</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">....</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238525944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/238525806\">said</a>:</p>\n<blockquote>\n<p>so no idea why happens but if I understood correctly we end with a <code>A: 'static</code> and the compiler accepts that regardless what's in A is a String, not even a reference</p>\n</blockquote>\n<p>I guess the problem is <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 238525967,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620845695
    },
    {
        "content": "<p>but maybe best to start with a simpler one before we go deep</p>",
        "id": 238525977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845700
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238526055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845729
    },
    {
        "content": "<p>I wanted to talk about how the inference and logic works in this example</p>",
        "id": 238526099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845747
    },
    {
        "content": "<p>the idea is that <code>impl Into&lt;A&gt;</code> in that position 'desugars' into a kind of 'existential type', right? something whose value must be inferred</p>",
        "id": 238526215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845785
    },
    {
        "content": "<p>so you can sort of imagine that you have, after inference:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238526308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845813
    },
    {
        "content": "<p>you can verify for yourself that this should type check :)</p>",
        "id": 238526338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845823
    },
    {
        "content": "<p>yep</p>",
        "id": 238526434,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620845863
    },
    {
        "content": "<p>ok</p>",
        "id": 238526704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845966
    },
    {
        "content": "<p>so note something interesting there</p>",
        "id": 238526716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845971
    },
    {
        "content": "<p>you can't just take the type from the return type and paste it in</p>",
        "id": 238526724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845976
    },
    {
        "content": "<p>i.e., we translated <code>T</code> to <code>A</code></p>",
        "id": 238526733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620845981
    },
    {
        "content": "<p>in particular: when we type-checked the function, we inferred that the hidden type was <code>T</code></p>",
        "id": 238526830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846004
    },
    {
        "content": "<p>and then we \"translated that\" to be in terms of the generic arguments that the user declared on the <code>type X&lt;A&gt; = impl into&lt;A&gt;</code></p>",
        "id": 238526908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846021
    },
    {
        "content": "<p>right?</p>",
        "id": 238526923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846028
    },
    {
        "content": "<p>somewhat more detailed:</p>",
        "id": 238526977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/238526724\">said</a>:</p>\n<blockquote>\n<p>you can't just take the type from the return type and paste it in</p>\n</blockquote>\n<p>unsure what you meant here</p>",
        "id": 238526980,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620846044
    },
    {
        "content": "<p>well, let me explain it in terms of the implementation</p>",
        "id": 238527003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/238526830\">said</a>:</p>\n<blockquote>\n<p>in particular: when we type-checked the function, we inferred that the hidden type was <code>T</code></p>\n</blockquote>\n<p>right</p>",
        "id": 238527031,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620846060
    },
    {
        "content": "<p>when we type check <code>fn foo</code>, we note that the return type includes a reference to a TAIT (type alias impl trait) <code>X&lt;T&gt;</code></p>",
        "id": 238527058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846073
    },
    {
        "content": "<p>we replace that with a type variable <code>?X</code></p>",
        "id": 238527074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846080
    },
    {
        "content": "<p>so that the return type the fn body sees is <code>?X</code></p>",
        "id": 238527090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846089
    },
    {
        "content": "<p>then we type-check the function</p>",
        "id": 238527098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846093
    },
    {
        "content": "<p>this will result in a constraint that <code>T &lt;: ?X</code> -- because the returned value <code>x</code> is of type <code>T</code></p>",
        "id": 238527123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/238526308\">said</a>:</p>\n<blockquote>\n<p>so you can sort of imagine that you have, after inference:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>are you talking about this example or the previous one? because in this one there's no TAIT</p>",
        "id": 238527135,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620846114
    },
    {
        "content": "<p>the previous one</p>",
        "id": 238527151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846121
    },
    {
        "content": "<p>that example is the end result</p>",
        "id": 238527191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846125
    },
    {
        "content": "<p>i'm talking about the input</p>",
        "id": 238527198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846127
    },
    {
        "content": "<p>ahh now things make sense :)</p>",
        "id": 238527203,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620846129
    },
    {
        "content": "<p>right, so now we have to compute what is the \"hidden type\" for <code>X&lt;A&gt;</code></p>",
        "id": 238527251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846154
    },
    {
        "content": "<p>and we have one instance of it (<code>T</code>) for <code>X&lt;T&gt;</code></p>",
        "id": 238527282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846171
    },
    {
        "content": "<p>so there is some code that kind of does this reverse mapping: we see that the first argument is <code>T</code>, and we replace every instance of <code>T</code> with the corresponding generic parameter (<code>A</code>)</p>",
        "id": 238527369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846199
    },
    {
        "content": "<p>sort of the obvious thing your brain does automatically</p>",
        "id": 238527377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846205
    },
    {
        "content": "<p>right</p>",
        "id": 238527422,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620846231
    },
    {
        "content": "<p>but this can be a bit tricky in some edge cases</p>",
        "id": 238527486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846248
    },
    {
        "content": "<p>consider this:</p>",
        "id": 238527491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846250
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238527535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846276
    },
    {
        "content": "<p>what is the hidden type?</p>",
        "id": 238527571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846288
    },
    {
        "content": "<p>it could be either <code>A</code> <em>or</em> <code>B</code></p>",
        "id": 238527586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846293
    },
    {
        "content": "<p>right</p>",
        "id": 238527622,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620846307
    },
    {
        "content": "<p>so the answer is: we make that illegal</p>",
        "id": 238527851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846383
    },
    {
        "content": "<p>there's a similar problem with something like</p>",
        "id": 238527863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846390
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">22_</span><span class=\"k\">u32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238527876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846399
    },
    {
        "content": "<p>now, is it <code>type X&lt;A&gt; = u32</code> or is it <code>type X&lt;A&gt; = A</code></p>",
        "id": 238527914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846423
    },
    {
        "content": "<p>both would work</p>",
        "id": 238527922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846426
    },
    {
        "content": "<p>so we make that illegal too</p>",
        "id": 238527948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846437
    },
    {
        "content": "<p>the rules are specifically:</p>",
        "id": 238527952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846439
    },
    {
        "content": "<ul>\n<li>when you have a 'defining use' (i.e., a use from which we will infer the hidden type) of a TAIT, the generic arguments to that TAIT must all be unique generic arguments from the surrounding scope</li>\n</ul>",
        "id": 238528010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846467
    },
    {
        "content": "<p>so <code>fn foo&lt;T, U&gt;() -&gt; X&lt;T, U&gt;</code> is ok because the generic arguments to the TAIT <code>X</code> are <code>T</code> and <code>U</code>, which:</p>\n<ul>\n<li>are both generic parameters of the surrounding function</li>\n<li>are different from one another</li>\n</ul>",
        "id": 238528159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846512
    },
    {
        "content": "<p>you're not allowed to do <code>X&lt;u32, U&gt;</code>, etc</p>",
        "id": 238528178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846521
    },
    {
        "content": "<p>ok, that was a kind of general explanation</p>",
        "id": 238528203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846536
    },
    {
        "content": "<p>this particular thing is called \"higher order pattern unification\"</p>",
        "id": 238528213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846543
    },
    {
        "content": "<p>that is: inferring a generic type (something with type parameters, like <code>X&lt;T&gt;</code>) from examples, subject to that given limitation</p>",
        "id": 238528240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/238528178\">said</a>:</p>\n<blockquote>\n<p>you're not allowed to do <code>X&lt;u32, U&gt;</code>, etc</p>\n</blockquote>\n<p>you said this don't because U includes u32, I guess</p>",
        "id": 238528290,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620846588
    },
    {
        "content": "<p>because <code>u32</code> is not a generic type parameter from the surrounding context</p>",
        "id": 238528360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846604
    },
    {
        "content": "<p>ok</p>",
        "id": 238528399,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620846614
    },
    {
        "content": "<p>the reason that is disallowd is that you can't tell whether it shoud just appear as <em>itself</em> in the genreic form</p>",
        "id": 238528407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846616
    },
    {
        "content": "<p>or as a reference to the first parameter <code>A</code></p>",
        "id": 238528417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846621
    },
    {
        "content": "<p>it's kind of magic to me now the why of those rules but ok :)</p>",
        "id": 238528493,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620846652
    },
    {
        "content": "<p>basically: the general case is ambiguous</p>",
        "id": 238528535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846672
    },
    {
        "content": "<p>these rules make it unambiguous</p>",
        "id": 238528543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846677
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 238528561,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620846683
    },
    {
        "content": "<p>you can imagine other rules perhaps, but these are \"decent ones\" :)</p>",
        "id": 238528583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846694
    },
    {
        "content": "<p>hehe :)</p>",
        "id": 238528604,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620846707
    },
    {
        "content": "<p>anyway so</p>",
        "id": 238528831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846804
    },
    {
        "content": "<p><em>this bug</em></p>",
        "id": 238528837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846806
    },
    {
        "content": "<p>is about code that doesn't follow the rules :)</p>",
        "id": 238529018,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620846892
    },
    {
        "content": "<p>well</p>",
        "id": 238529269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846996
    },
    {
        "content": "<p>the code is actually reasonable</p>",
        "id": 238529277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620846999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/238525944\">said</a>:</p>\n<blockquote>\n<p>example:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">B</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">....</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 238529291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847009
    },
    {
        "content": "<p>there are <em>two</em> uses of <code>X</code> there</p>",
        "id": 238529299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847017
    },
    {
        "content": "<p><em>but</em></p>",
        "id": 238529302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847018
    },
    {
        "content": "<p>each use of <code>X</code> follows the rules:</p>",
        "id": 238529309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847023
    },
    {
        "content": "<ul>\n<li>it references only generic parameters from <code>f</code></li>\n</ul>",
        "id": 238529326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847030
    },
    {
        "content": "<ul>\n<li>it references distinct generic parameters from <code>f</code></li>\n</ul>",
        "id": 238529341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847037
    },
    {
        "content": "<p>the bug is that we don't recognize that there are  two distinct uses of <code>X</code></p>",
        "id": 238529362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847048
    },
    {
        "content": "<p>what we do today is to create <em>one</em> underlying inference variable (<code>?X</code>)</p>",
        "id": 238529392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847062
    },
    {
        "content": "<p>ohh I see</p>",
        "id": 238529407,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620847069
    },
    {
        "content": "<p>and then we just kind of ignore one of the uses</p>",
        "id": 238529518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847112
    },
    {
        "content": "<p>the fix that <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> did is to detect and report an error</p>",
        "id": 238529530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847118
    },
    {
        "content": "<p>but we can do better</p>",
        "id": 238529536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847120
    },
    {
        "content": "<p>we can just treat each use separately</p>",
        "id": 238529548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847126
    },
    {
        "content": "<p>so</p>",
        "id": 238529677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847194
    },
    {
        "content": "<p>I tried to be smart, but that caused a lot of fallout. In hindsight the solution proposed by Niko is obvious</p>",
        "id": 238529694,
        "sender_full_name": "oli",
        "timestamp": 1620847198
    },
    {
        "content": "<p>in that case we would have <code>?X1</code> and <code>?X2</code></p>",
        "id": 238529701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847200
    },
    {
        "content": "<p>yeah <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 238529922,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620847286
    },
    {
        "content": "<p>so in the PR itself...</p>",
        "id": 238529973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847321
    },
    {
        "content": "<p>currently we have a map</p>",
        "id": 238530150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847423
    },
    {
        "content": "<p>a vec I think but yeah</p>",
        "id": 238530600,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620847663
    },
    {
        "content": "<p>yeah sorry I got distracte</p>",
        "id": 238530794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847759
    },
    {
        "content": "<p>anyway the idea is to extend the key to include the substs</p>",
        "id": 238530806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847768
    },
    {
        "content": "<p>my belief is that because of the above rules</p>",
        "id": 238530814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847773
    },
    {
        "content": "<p>the substs should never have inference variables</p>",
        "id": 238530821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847779
    },
    {
        "content": "<p>or the other kinds of things that make <code>Ty</code> unsuitable for use as a hashmap key</p>",
        "id": 238530831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847788
    },
    {
        "content": "<p>the function: <a href=\"https://github.com/rust-lang/rust/blob/93f3d0867ed9a1ad343356955c314b3df8fd99f0/compiler/rustc_trait_selection/src/opaque_types.rs\">https://github.com/rust-lang/rust/blob/93f3d0867ed9a1ad343356955c314b3df8fd99f0/compiler/rustc_trait_selection/src/opaque_types.rs</a></p>",
        "id": 238530899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620847807
    },
    {
        "content": "<p>when you've said a map, were you referring to <code>OpaqueTypeMap</code>?</p>",
        "id": 238531346,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620847998
    },
    {
        "content": "<p>anyway, I need to read a bit the code to understand better what's going on :)</p>",
        "id": 238531526,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620848069
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <a href=\"https://github.com/rust-lang/rust/pull/82558/files#diff-98923b31651a0150fc5eae47f5ceb44f716b521762db4e37cf9292dac7b3e040R1104\">this map</a> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">opaque_defn</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">opaque_types</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238541578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620852340
    },
    {
        "content": "<p>right, that's the <code>OpaqueTypeMap</code> thing <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 238541693,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620852379
    },
    {
        "content": "<p>thanks Niko, will take a look at this tomorrow</p>",
        "id": 238542719,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620852841
    },
    {
        "content": "<p>great</p>",
        "id": 238544977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620853768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/spastorino/rust/tree/tait-soundness-bug\">https://github.com/spastorino/rust/tree/tait-soundness-bug</a></p>",
        "id": 239511798,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621467538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/239511798\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"https://github.com/spastorino/rust/tree/tait-soundness-bug\">https://github.com/spastorino/rust/tree/tait-soundness-bug</a></p>\n</blockquote>\n<p>was chatting with Niko on DM about this yesterday, but going to share a summary of what's going on</p>",
        "id": 239589856,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621516900
    },
    {
        "content": "<p>basically the code in that branch modifies the opaque type mapping to have as key <code>Ty&lt;'tcx&gt;</code> instead of <code>DefId</code></p>",
        "id": 239590074,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621516983
    },
    {
        "content": "<p><a href=\"https://github.com/spastorino/rust/commit/45e088374f6398b674f418aa4687cfb35348d2b3#diff-fac6fe2f0c52a383e90c95577bf3646f2e9e17a4c9271e54b3035a888f5d0f1aR219\">https://github.com/spastorino/rust/commit/45e088374f6398b674f418aa4687cfb35348d2b3#diff-fac6fe2f0c52a383e90c95577bf3646f2e9e17a4c9271e54b3035a888f5d0f1aR219</a> and <a href=\"https://github.com/spastorino/rust/commit/45e088374f6398b674f418aa4687cfb35348d2b3#diff-98923b31651a0150fc5eae47f5ceb44f716b521762db4e37cf9292dac7b3e040R31\">https://github.com/spastorino/rust/commit/45e088374f6398b674f418aa4687cfb35348d2b3#diff-98923b31651a0150fc5eae47f5ceb44f716b521762db4e37cf9292dac7b3e040R31</a></p>",
        "id": 239590122,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621517004
    },
    {
        "content": "<p>we wanted instead of <code>DefId</code>, <code>DefId</code> + <code>SubstsRef</code></p>",
        "id": 239590178,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621517031
    },
    {
        "content": "<p>my first approach was to try to use a pair of those but I was hitting issues because given that that's now the key of a <code>FxHashMap</code> it needs to implement <code>HashStable</code> and possibly <code>ToStableHashKey</code></p>",
        "id": 239590315,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621517077
    },
    {
        "content": "<p>Niko suggested me to use <code>Ty</code>, in particular the <code>Opaque</code> variant of it that's composed of <code>DefId</code> and <code>SubstsRef</code></p>",
        "id": 239590371,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621517106
    },
    {
        "content": "<p>I'm getting this compilation error ...</p>",
        "id": 239590395,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621517115
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>= note: the following trait bounds were not satisfied:\n            `&amp;TyS&lt;&#39;_&gt;: ToStableHashKey&lt;_&gt;`\n            which is required by `HashMap&lt;&amp;TyS&lt;&#39;_&gt;, ResolvedOpaqueTy&lt;&#39;_&gt;, BuildHasherDefault&lt;FxHasher&gt;&gt;: HashStable&lt;_&gt;`\n</code></pre></div>",
        "id": 239590451,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621517139
    },
    {
        "content": "<p>so, I'd need to implement <code>ToStableHashKey</code></p>",
        "id": 239590567,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621517174
    },
    {
        "content": "<p>so ... right now I'm not sure how using <code>Ty</code> there instead of <code>DefId, SubstsRef</code> pair is any better because I end, having to implement these traits (<code>HashStable</code> and <code>ToStableHashKey</code>) for the pair but also for the rest of the other variants that are not <code>Opaque</code></p>",
        "id": 239590703,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621517226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I finally have a chance to look at this</p>",
        "id": 239663847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621546918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> no worries, I’ll be with the computer in 5 minutes</p>",
        "id": 239664184,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547091
    },
    {
        "content": "<p>so</p>",
        "id": 239664838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547439
    },
    {
        "content": "<p>hmm</p>",
        "id": 239664842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547441
    },
    {
        "content": "<p>I see the probelm :)</p>",
        "id": 239664848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547444
    },
    {
        "content": "<p>I guess there are no maps with types as keys</p>",
        "id": 239664864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547449
    },
    {
        "content": "<p>which is interesing</p>",
        "id": 239664865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547451
    },
    {
        "content": "<p>perhaps we <em>will</em> have to implement stable hash or whatever</p>",
        "id": 239664875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah</p>",
        "id": 239664932,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547494
    },
    {
        "content": "<p>I see this impl that you added:</p>",
        "id": 239664955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547509
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gi\">+impl&lt;'a, 'tcx&gt; ToStableHashKey&lt;StableHashingContext&lt;'a&gt;&gt; for TyS&lt;'tcx&gt; {</span>\n<span class=\"gi\">+    type KeyType = Fingerprint;</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    #[inline]</span>\n<span class=\"gi\">+    fn to_stable_hash_key(&amp;self, hcx: &amp;StableHashingContext&lt;'a&gt;) -&gt; Fingerprint {</span>\n<span class=\"gi\">+        let ty::TyS {</span>\n<span class=\"gi\">+            ref kind,</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+            // The other fields just provide fast access to information that is</span>\n<span class=\"gi\">+            // also contained in `kind`, so no need to hash them.</span>\n<span class=\"gi\">+            flags: _,</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+            outer_exclusive_binder: _,</span>\n<span class=\"gi\">+        } = *self;</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        kind.to_stable_hash_key(hcx)</span>\n<span class=\"gi\">+    }</span>\n<span class=\"gi\">+}</span>\n</code></pre></div>",
        "id": 239664956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547510
    },
    {
        "content": "<p>where'd you get that code from?</p>",
        "id": 239664972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547522
    },
    {
        "content": "<p>well the code does nothing :)</p>",
        "id": 239665039,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547539
    },
    {
        "content": "<p>just delegates to kind's <code>ToStableHashKey</code> impl</p>",
        "id": 239665056,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547551
    },
    {
        "content": "<p>I guess that's a copy of the <code>HashTStable</code> impl more or less</p>",
        "id": 239665069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547558
    },
    {
        "content": "<p>I was going to implement it for kind</p>",
        "id": 239665071,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547560
    },
    {
        "content": "<p>I see</p>",
        "id": 239665122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547596
    },
    {
        "content": "<p>This is annoying lol</p>",
        "id": 239665127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/239665069\">said</a>:</p>\n<blockquote>\n<p>I guess that's a copy of the <code>HashTStable</code> impl more or less</p>\n</blockquote>\n<p>but it really does nothing, like I should probably do <code>self.kind.to_stable_hash_key</code></p>",
        "id": 239665129,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547603
    },
    {
        "content": "<p>I'm trying to decide if there is some other way to do it</p>",
        "id": 239665134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547608
    },
    {
        "content": "<p>so ... <code>HashStable</code> is implemented to <code>Ty</code></p>",
        "id": 239665165,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547634
    },
    {
        "content": "<p>well for <code>TyS</code></p>",
        "id": 239665170,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547640
    },
    {
        "content": "<p>ok so another option would be</p>",
        "id": 239665184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547642
    },
    {
        "content": "<p>instead of using a hashmap</p>",
        "id": 239665215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547647
    },
    {
        "content": "<p>what's not is <code>ToStableHashKey</code></p>",
        "id": 239665217,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547648
    },
    {
        "content": "<p>use a vector :)</p>",
        "id": 239665220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547649
    },
    {
        "content": "<p>honestly it's probably a better data structure anyway</p>",
        "id": 239665239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547660
    },
    {
        "content": "<p>how many impl Traits are defined on any given function</p>",
        "id": 239665248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547665
    },
    {
        "content": "<p>typically: 1 :)</p>",
        "id": 239665256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547672
    },
    {
        "content": "<p>at most \"a few\"</p>",
        "id": 239665265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547677
    },
    {
        "content": "<p>using a hashmap is <em>way</em> overkill</p>",
        "id": 239665271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547680
    },
    {
        "content": "<p>we could use a <code>Vec&lt;(Ty&lt;'tcx&gt;, Data)&gt;</code> and then do a lookup with <code>vec.find(|pair| pair.0 == key)</code></p>",
        "id": 239665328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547715
    },
    {
        "content": "<p>I was guessing that we were using a <code>HashMap</code> just to easily access by key and see where you hit a duplicate</p>",
        "id": 239665338,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547719
    },
    {
        "content": "<p>right</p>",
        "id": 239665345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547725
    },
    {
        "content": "<p>so just use a vector for that instead</p>",
        "id": 239665350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/239665328\">said</a>:</p>\n<blockquote>\n<p>we could use a <code>Vec&lt;(Ty&lt;'tcx&gt;, Data)&gt;</code> and then do a lookup with <code>vec.find(|pair| pair.0 == key)</code></p>\n</blockquote>\n<p>ahh well :P</p>",
        "id": 239665353,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547730
    },
    {
        "content": "<p>it'll be faster</p>",
        "id": 239665362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547739
    },
    {
        "content": "<p>I thought that would be bad :P</p>",
        "id": 239665366,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547739
    },
    {
        "content": "<p>but if you say it's not</p>",
        "id": 239665383,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547751
    },
    {
        "content": "<p>I mean to do it nicer, we make a little utility type</p>",
        "id": 239665384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547752
    },
    {
        "content": "<p>maybe it already exists even</p>",
        "id": 239665387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547754
    },
    {
        "content": "<p>unsure how much and how critical is where we are doing lookups</p>",
        "id": 239665391,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547761
    },
    {
        "content": "<p>I think it is faster this way</p>",
        "id": 239665430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547766
    },
    {
        "content": "<p>a hashmap is usually only faster if you have ~100 keys</p>",
        "id": 239665438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547772
    },
    {
        "content": "<p>I made that up but I read it on some website :)</p>",
        "id": 239665451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547782
    },
    {
        "content": "<p>lol</p>",
        "id": 239665460,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547788
    },
    {
        "content": "<p>hehe</p>",
        "id": 239665462,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547789
    },
    {
        "content": "<p>but seriously, with a <code>Ty</code> as the key, the <code>==</code> is just a pointer comparison</p>",
        "id": 239665470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547805
    },
    {
        "content": "<p>yeah, ok, but I see what you meant, we don't really have a lot of values</p>",
        "id": 239665473,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547806
    },
    {
        "content": "<p>the vector lookup will be plenty fast</p>",
        "id": 239665476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547808
    },
    {
        "content": "<p>maybe make a <code>VecMap&lt;K, V&gt;</code> data structure</p>",
        "id": 239665496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547827
    },
    {
        "content": "<p>definitely because it doesn't have a lot of elements</p>",
        "id": 239665500,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547829
    },
    {
        "content": "<p>implement <code>HashStable</code> for it so long as <code>K: HashStable</code> and <code>V: HashStable</code></p>",
        "id": 239665524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547847
    },
    {
        "content": "<p>that'd be the \"better factored\" way :)</p>",
        "id": 239665537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547854
    },
    {
        "content": "<p>I see</p>",
        "id": 239665550,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547866
    },
    {
        "content": "<p>the lazy way is to make a trait <code>VecMap</code></p>",
        "id": 239665551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547866
    },
    {
        "content": "<p>actually that's maybe better</p>",
        "id": 239665556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547872
    },
    {
        "content": "<p>in rustc_data_structures</p>",
        "id": 239665561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547877
    },
    {
        "content": "<p>yeah in rustc_data_structures, definitely</p>",
        "id": 239665607,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547887
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">VecMap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"nc\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">V</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"nc\">K</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">VecMap</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239665620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547897
    },
    {
        "content": "<p>and what methods would <code>VecMap</code> have?</p>",
        "id": 239665623,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547901
    },
    {
        "content": "<p>and then you can just import the trait and use those methods</p>",
        "id": 239665627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547904
    },
    {
        "content": "<p>something like that :)</p>",
        "id": 239665650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547921
    },
    {
        "content": "<p>yeah insert and get definitely</p>",
        "id": 239665656,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547925
    },
    {
        "content": "<p>that's probably the only methods that get used</p>",
        "id": 239665672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547933
    },
    {
        "content": "<p>unsure if in order to place it in rustc_data_structure you would want more?</p>",
        "id": 239665684,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547942
    },
    {
        "content": "<p>then you don't have to implement <code>HashStable</code> or anything, should all just work</p>",
        "id": 239665687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547944
    },
    {
        "content": "<p>you could make a <code>type VecMap&lt;K, V&gt; = Vec&lt;(K, V)&gt;</code> alias if you want :)</p>",
        "id": 239665708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547957
    },
    {
        "content": "<p>yeah all this makes sense :)</p>",
        "id": 239665709,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/239665684\">said</a>:</p>\n<blockquote>\n<p>unsure if in order to place it in rustc_data_structure you would want more?</p>\n</blockquote>\n<p>nah</p>",
        "id": 239665717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547966
    },
    {
        "content": "<p>I wouldn't add dead code</p>",
        "id": 239665731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547977
    },
    {
        "content": "<p>what's the point</p>",
        "id": 239665736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547984
    },
    {
        "content": "<p>people can add more methods as they need them</p>",
        "id": 239665743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621547988
    },
    {
        "content": "<p>ok</p>",
        "id": 239665751,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621547993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/239665708\">said</a>:</p>\n<blockquote>\n<p>you could make a <code>type VecMap&lt;K, V&gt; = Vec&lt;(K, V)&gt;</code> alias if you want :)</p>\n</blockquote>\n<p>so this or better the trait?</p>",
        "id": 239665763,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621548002
    },
    {
        "content": "<p>well you need the trait to have the methods</p>",
        "id": 239665830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621548011
    },
    {
        "content": "<p>the only reason to have the type alias</p>",
        "id": 239665858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621548019
    },
    {
        "content": "<p>(in addition to the trait)</p>",
        "id": 239665879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621548028
    },
    {
        "content": "<p>ahh both, so I guess you want different names then :P</p>",
        "id": 239665912,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621548047
    },
    {
        "content": "<p>would be so that </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">concrete_opaque_types</span>: <span class=\"nc\">FxHashMap</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">ResolvedOpaqueTy</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>becomes</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">concrete_opaque_types</span>: <span class=\"nc\">VecMap</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">ResolvedOpaqueTy</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239665931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621548056
    },
    {
        "content": "<p>unsure if I have followed what you intended to do</p>",
        "id": 239665936,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621548057
    },
    {
        "content": "<p>ah yes, you'd need to cal the trait <code>VecMapExt</code> or something</p>",
        "id": 239665950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621548066
    },
    {
        "content": "<p>ok</p>",
        "id": 239665961,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621548073
    },
    {
        "content": "<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">concrete_opaque_types</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">ResolvedOpaqueTy</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239665988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621548093
    },
    {
        "content": "<p>the <code>VecMap</code> seems a bit easier to read?</p>",
        "id": 239665999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621548100
    },
    {
        "content": "<p>right</p>",
        "id": 239666008,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621548107
    },
    {
        "content": "<p>makes sense</p>",
        "id": 239666014,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621548110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 240210482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621958489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 240211938,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621959109
    },
    {
        "content": "<p>didn't touch the code again since last we've talked</p>",
        "id": 240211955,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621959119
    },
    {
        "content": "<p>will try to finish it today</p>",
        "id": 240212015,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621959132
    },
    {
        "content": "<p>ok</p>",
        "id": 240214239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621960130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 240465988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622121778
    },
    {
        "content": "<p>just checking :)</p>",
        "id": 240465990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622121781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> zero progress, had zero time for this</p>",
        "id": 240469101,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622123015
    },
    {
        "content": "<p>today unless something happens, I'm going to work on it</p>",
        "id": 240469172,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622123041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I'm arond now btw</p>",
        "id": 240611223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622211932
    },
    {
        "content": "<p>I'm going to leave some notes for when you get a chance</p>",
        "id": 240612598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622212510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 240615685,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622213802
    },
    {
        "content": "<p>I'm around</p>",
        "id": 240615700,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622213807
    },
    {
        "content": "<p>wave</p>",
        "id": 240615824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622213882
    },
    {
        "content": "<p>I have a meeting coming up but I can probably chat on the side, since I'm not likely to be an active participant</p>",
        "id": 240615910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622213908
    },
    {
        "content": "<p>I got delayed by some local setup issues</p>",
        "id": 240615934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622213917
    },
    {
        "content": "<p>oh, wait, <em>that</em> meeting is later</p>",
        "id": 240616009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622213958
    },
    {
        "content": "<p>full calendar today :(</p>",
        "id": 240616036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622213968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> no worries</p>",
        "id": 240617730,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622214615
    },
    {
        "content": "<p>I'm going to work a bit on this issue today, if you can throw me a headline would be great, anyway I have other issues that I need to work on so no worries :)</p>",
        "id": 240617830,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622214668
    },
    {
        "content": "<p>OK, I'm around for a bit now</p>",
        "id": 240622397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622216545
    },
    {
        "content": "<p>in a meeting but inactive</p>",
        "id": 240622402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622216547
    },
    {
        "content": "<p>let me try to dump some thoughts <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 240622422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622216559
    },
    {
        "content": "<p>ok, I got distracted again, but here we go</p>",
        "id": 240625317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622217849
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> we've been talking about how the compiler infers the value for a named impl trait</p>",
        "id": 240625336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622217865
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/compiler/rustc_mir/src/borrow_check/region_infer/opaque_types.rs#L11-L49\">this is the code that does the hard work</a></p>",
        "id": 240625559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622217986
    },
    {
        "content": "<p>it produces, for  given function, a map saying \"for this opaque type, we have inferred this value\"</p>",
        "id": 240625630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622218007
    },
    {
        "content": "<p>that map is (on master) keyed by <code>DefId</code> but on your branch I think should be keyed by a <code>Ty</code></p>",
        "id": 240625743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622218031
    },
    {
        "content": "<p>this is (however) not entirely obvious</p>",
        "id": 240625764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622218036
    },
    {
        "content": "<p>maybe it should be keyed by <code>DefId</code> still actually</p>",
        "id": 240625847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622218054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah, my plan yesterday was to keep that in the way it was, keyed by <code>DefId</code> and convert that to <code>Ty</code> when/if I need the results of that somehow</p>",
        "id": 240632556,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622221342
    },
    {
        "content": "<p>OK, I'm around now <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> if you are</p>",
        "id": 240635992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622222952
    },
    {
        "content": "<p>so let me take some notes</p>",
        "id": 240636585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223210
    },
    {
        "content": "<p>here is how it works \"overall\"</p>",
        "id": 240636596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223216
    },
    {
        "content": "<p>you have a <code>type Foo&lt;T&gt; = impl Trait</code></p>",
        "id": 240636603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223220
    },
    {
        "content": "<p>and then you have various \"defining uses\" of <code>Foo</code>-- there are the uses from which we will infer the type for <code>Foo</code></p>",
        "id": 240636680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223247
    },
    {
        "content": "<p>in our case, these are typically functions that return <code>Foo</code> and are located within the same module where <code>Foo</code> was declared</p>",
        "id": 240636700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223263
    },
    {
        "content": "<p>so e.g.</p>",
        "id": 240636705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223265
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">a</span><span class=\"o\">&lt;</span><span class=\"n\">A</span>: <span class=\"nc\">Debug</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">b</span><span class=\"o\">&lt;</span><span class=\"n\">B</span>: <span class=\"nc\">Debug</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">b</span>: <span class=\"nc\">B</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240636783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223311
    },
    {
        "content": "<p>in that example, there are two \"defining uses\" of <code>Foo</code> -- one in the return type of <code>a</code>, and one in the return type of <code>b</code></p>",
        "id": 240636807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223326
    },
    {
        "content": "<p>when we type-check a function, we find each <em>defining use</em> of an <code>impl Trait</code> that appears in its signature and we replace that with an inference variable</p>",
        "id": 240636939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223386
    },
    {
        "content": "<p>this is the code you are tweaking now: currently we index only on the <code>DefId</code>, and we've seen that this is too limited</p>",
        "id": 240636954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223397
    },
    {
        "content": "<p>I can't seem to find that code anymore</p>",
        "id": 240637076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223476
    },
    {
        "content": "<p>I guess it's <a href=\"https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/compiler/rustc_trait_selection/src/opaque_types.rs#L161-L193\">this code</a></p>",
        "id": 240637199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223524
    },
    {
        "content": "<p>anyway, let's hold off on that</p>",
        "id": 240637297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223580
    },
    {
        "content": "<p>once we've run type-check, we can look at the value we selected for those inference variables</p>",
        "id": 240637321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223593
    },
    {
        "content": "<p>and we can use that to infer the value of <code>Foo</code></p>",
        "id": 240637344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223601
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/compiler/rustc_mir/src/borrow_check/region_infer/opaque_types.rs#L50-L56\">that is happening here</a> -- we currently do this from during borrow check, because that value may involve lifetimes</p>",
        "id": 240637496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223647
    },
    {
        "content": "<p>now, the key thing is that we do this for <em>both</em> <code>a</code> and <code>b</code></p>",
        "id": 240637703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223766
    },
    {
        "content": "<p>so we wind up with two values for <code>Foo</code></p>",
        "id": 240637713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223773
    },
    {
        "content": "<p>one per defining use, essentially</p>",
        "id": 240637729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223780
    },
    {
        "content": "<p>in this example, both of them will be <code>Vec&lt;T&gt;</code></p>",
        "id": 240637768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223789
    },
    {
        "content": "<p>that's good-- we want all the values we infer to be the same</p>",
        "id": 240637782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223798
    },
    {
        "content": "<p>now, there is a query that asks \"what is the value of <code>Foo</code>\"</p>",
        "id": 240638042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622223941
    },
    {
        "content": "<p>I think that is done in the <code>type_of</code> query, maybe</p>",
        "id": 240638371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224092
    },
    {
        "content": "<p>ah some of this is documented in <a href=\"https://rustc-dev-guide.rust-lang.org/opaque-types-type-alias-impl-trait.html\">https://rustc-dev-guide.rust-lang.org/opaque-types-type-alias-impl-trait.html</a></p>",
        "id": 240638443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224134
    },
    {
        "content": "<p>but not very thoroughly</p>",
        "id": 240638460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224144
    },
    {
        "content": "<p>ok, <a href=\"https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/compiler/rustc_typeck/src/collect/type_of.rs#L464-L465\">here is the function</a></p>",
        "id": 240638545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224186
    },
    {
        "content": "<p>it should really be in its own file I think</p>",
        "id": 240638557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224190
    },
    {
        "content": "<p>anyway so what that does</p>",
        "id": 240638955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224352
    },
    {
        "content": "<p>for a given impl trait (like <code>Foo</code>), it <a href=\"https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/compiler/rustc_typeck/src/collect/type_of.rs#L617-L641\">visits  the hir, looking for items defining uses</a></p>",
        "id": 240639285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224538
    },
    {
        "content": "<p>for each one, it invokes <a href=\"https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/compiler/rustc_typeck/src/collect/type_of.rs#L477-L478\"><code>ConstraintLocator::check</code></a></p>",
        "id": 240639370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224566
    },
    {
        "content": "<p>that function will invoke borrow check to <a href=\"https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/compiler/rustc_typeck/src/collect/type_of.rs#L496-L497\">get the concrete opaque types inferred for <code>Foo</code> by that function</a> (if any)</p>",
        "id": 240639456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224619
    },
    {
        "content": "<p>we then combine this with the value inferred from other functions we visited on our walk, <a href=\"https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/compiler/rustc_typeck/src/collect/type_of.rs#L549-L562\">reporting an error if they are different</a></p>",
        "id": 240639517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224674
    },
    {
        "content": "<p><em>ok</em>, now that I've refreshed my memory of the code, here is what I think you should do:</p>",
        "id": 240639569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224684
    },
    {
        "content": "<ul>\n<li>extract a helper function for the <a href=\"https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/compiler/rustc_typeck/src/collect/type_of.rs#L548-L571\">logic that combines multiple the values from multiple functions</a>, let's call it <code>merge_opaque_type_definition</code></li>\n</ul>",
        "id": 240639637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224739
    },
    {
        "content": "<ul>\n<li>in the borrow check, when we instantiate all the defining uses, we use a <code>VecMap&lt;Ty&lt;'tcx&gt;, ...&gt;</code> for those, since we will need one inference variable per defining use. That means we have to change <a href=\"https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/compiler/rustc_trait_selection/src/opaque_types.rs#L19-L20\"><code>OpaqueTypeMap</code></a> to use <code>VecMap&lt;Ty&lt;'tcx&gt;...</code> instead.</li>\n</ul>",
        "id": 240639838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224821
    },
    {
        "content": "<p><strong>However</strong></p>",
        "id": 240639944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224875
    },
    {
        "content": "<p>I would NOT change <code>concrete_opaque_types</code> in either the type check or borrow check results</p>",
        "id": 240639994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224906
    },
    {
        "content": "<p>those can still be keyed by <code>DefId</code></p>",
        "id": 240640002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224912
    },
    {
        "content": "<p>Why? Those maps contain the <em>result of inference for a particular function</em></p>",
        "id": 240640023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224921
    },
    {
        "content": "<p>while there may be mutiple uses of <code>Foo</code> within a particular function, they should all infer to the same <code>ResolvedOpaqueTy</code></p>",
        "id": 240640090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224938
    },
    {
        "content": "<p>(hmm)</p>",
        "id": 240640113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224954
    },
    {
        "content": "<p>I'm double checking if what I'm saying makes sense :)</p>",
        "id": 240640122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622224960
    },
    {
        "content": "<p>Well, I think my logic makes sense <em>but</em> the data structure would need more changs</p>",
        "id": 240640494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622225157
    },
    {
        "content": "<p>so the other option is yes we should generalize it</p>",
        "id": 240640530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622225163
    },
    {
        "content": "<p>in which case we don't need that helper function</p>",
        "id": 240640562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622225171
    },
    {
        "content": "<p>but we would want to modify the visitor so that it is prepared to visit multiple def-ids per function item</p>",
        "id": 240640616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622225203
    },
    {
        "content": "<p><em>oh</em> so <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 240640681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622225236
    },
    {
        "content": "<p>this <a href=\"https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/compiler/rustc_middle/src/ty/context.rs#L288-L298\"><code>ResolvedOpaqueTy</code></a> type</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// All information necessary to validate and reveal an `impl Trait`.</span>\n<span class=\"cp\">#[derive(TyEncodable, TyDecodable, Debug, HashStable)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ResolvedOpaqueTy</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The revealed type as seen by this function.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">concrete_type</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Generic parameters on the opaque type as passed by this function.</span>\n<span class=\"w\">    </span><span class=\"sd\">/// For `type Foo&lt;A, B&gt; = impl Bar&lt;A, B&gt;; fn foo&lt;T, U&gt;() -&gt; Foo&lt;T, U&gt; { .. }`</span>\n<span class=\"w\">    </span><span class=\"sd\">/// this is `[T, U]`, not `[A, B]`.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"nc\">SubstsRef</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240640705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622225258
    },
    {
        "content": "<p>it probably just goes away</p>",
        "id": 240640710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622225264
    },
    {
        "content": "<p>the <code>substs: SubstRef</code> field will become part of the key in the <code>VecMap</code></p>",
        "id": 240640719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622225273
    },
    {
        "content": "<p>and the value will be the <code>concrete_type</code> field</p>",
        "id": 240640760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622225282
    },
    {
        "content": "<p>ok, I think that's the right path, or at least the path of least resistance</p>",
        "id": 240640785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622225292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, yeah, I've figured that a couple of <code>substs</code> around could go away given that this is now part of the key</p>",
        "id": 240642422,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622226104
    },
    {
        "content": "<p>gave a glance at your thoughts and makes sense, may need to check a bit better what you're saying and contrast with the code to make myself a better idea</p>",
        "id": 240642528,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622226134
    },
    {
        "content": "<p>but seems good <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 240642542,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622226140
    },
    {
        "content": "<p>not sure about a couple of things on your conclusions, one recurring problem I have is that my english level disallow me to condense things when there are back and forths <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 240642785,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622226263
    },
    {
        "content": "<p>anyway a couple of concrete questions</p>",
        "id": 240642815,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622226277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/240639637\">said</a>:</p>\n<blockquote>\n<ul>\n<li>extract a helper function for the <a href=\"https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/compiler/rustc_typeck/src/collect/type_of.rs#L548-L571\">logic that combines multiple the values from multiple functions</a>, let's call it <code>merge_opaque_type_definition</code></li>\n</ul>\n</blockquote>\n<p>what would be the purpose of extracting this function? I guess you're seeing something that I'm not right now, may realized meanwhile coding</p>",
        "id": 240642876,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622226305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/240639994\">said</a>:</p>\n<blockquote>\n<p>I would NOT change <code>concrete_opaque_types</code> in either the type check or borrow check results</p>\n</blockquote>\n<p>about this <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, it was more or less what I was thinking</p>",
        "id": 240642926,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622226335
    },
    {
        "content": "<p>although with your explanation now makes much more sense :)</p>",
        "id": 240642947,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622226350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/240640562\">said</a>:</p>\n<blockquote>\n<p>in which case we don't need that helper function</p>\n</blockquote>\n<p>I guess you're saying that we don't need that</p>",
        "id": 240643030,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622226389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/240640616\">said</a>:</p>\n<blockquote>\n<p>but we would want to modify the visitor so that it is prepared to visit multiple def-ids per function item</p>\n</blockquote>\n<p>unsure I got this in particular, why multiple def-ids?</p>",
        "id": 240643079,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622226413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/240640760\">said</a>:</p>\n<blockquote>\n<p>and the value will be the <code>concrete_type</code> field</p>\n</blockquote>\n<p>the change you're proposing makes sense, I've figured a couple of cases where this happens too as i've mentioned above</p>",
        "id": 240643177,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622226466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/240642876\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/240639637\">said</a>:<br>\nwhat would be the purpose of extracting this function? I guess you're seeing something that I'm not right now, may realized meanwhile coding</p>\n</blockquote>\n<p>so I thnk I convinced myself that we should not have it by the end</p>",
        "id": 240652152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/240642926\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I would NOT change <code>concrete_opaque_types</code> in either the type check or borrow check results</p>\n</blockquote>\n<p>about this <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, it was more or less what I was thinking</p>\n</blockquote>\n<p>so--- I kind of reserved this by the end, because it seemed like it would actually be easier to update those maps (even though it involves changing a bunch of random bits of code)</p>",
        "id": 240652197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/240643079\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>but we would want to modify the visitor so that it is prepared to visit multiple def-ids per function item</p>\n</blockquote>\n<p>unsure I got this in particular, why multiple def-ids?</p>\n</blockquote>\n<p>this was a mistake. What I meant is \"multiple definitions for the given Opaque Type\"</p>",
        "id": 240652271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231300
    },
    {
        "content": "<p>so right now the opaque type has a def-id <code>D</code></p>",
        "id": 240652284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231307
    },
    {
        "content": "<p>and we do something like</p>",
        "id": 240652345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231351
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>let mut final_result = None;\nfor each function F {\n    if let Some((v1, substs))) = definition of D from F {\n        let v = infer_definition(v1, substs);\n        let previous_result = final_result.replace(v);\n        if let Some(old_v) = previous_result {\n            if old_v != v { error }\n       }\n    }\n}\n</code></pre></div>",
        "id": 240652431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231399
    },
    {
        "content": "<p>but if we make the change I am proposing, then this doesn't work, because the key to map is not just a def-id but the (def-id, substs)</p>",
        "id": 240652531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231426
    },
    {
        "content": "<p>(actually, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, if we are using a <code>VecMap</code>, you don't want the key to be a <code>Ty&lt;'tcx&gt;</code>, but just the <code>(DefId, SubstsRef,'tcx&gt;)</code> pair, I think)</p>",
        "id": 240652582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231452
    },
    {
        "content": "<p>maybe a newtype'd one</p>",
        "id": 240652597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231456
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">OpaqueTypeRef</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">SubstsRef</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240652626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231475
    },
    {
        "content": "<p>anyway so</p>",
        "id": 240652635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231479
    },
    {
        "content": "<p>the code becomes</p>",
        "id": 240652639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231482
    },
    {
        "content": "<p>makes sense</p>",
        "id": 240652681,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622231515
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>let mut final_result = None;\nfor each function F {\n    for ((d1, s1), v1) in defitions from F {\n        if D != d1 { continue; }\n        let v = infer_definition_from(v1, s1);\n        let previous_result = final_result.replace(v);\n        if let Some(old_v) = previous_result {\n            if old_v != v { error }\n       }\n    }\n}\n</code></pre></div>",
        "id": 240652685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231517
    },
    {
        "content": "<p>ok, I updated the pseudo-code, I was missing one important detail</p>",
        "id": 240652777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231545
    },
    {
        "content": "<p>but the key point is, if you change that from a <code>FxHashMap&lt;DefId, (Substs, Ty)&gt;</code> (as today) to a <code>VecMap&lt;(DefId, Substs), Ty&gt;</code></p>",
        "id": 240652891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231598
    },
    {
        "content": "<p>you may have multiple entries for the same <code>DefId</code></p>",
        "id": 240652914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231609
    },
    {
        "content": "<p>but that's ok because the code is already setup</p>",
        "id": 240652926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231614
    },
    {
        "content": "<p>right</p>",
        "id": 240652935,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622231619
    },
    {
        "content": "<p>to iterate over multiple <em>functions</em></p>",
        "id": 240652938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231620
    },
    {
        "content": "<p>so now you have just N per function, kind of a flat map</p>",
        "id": 240652947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231628
    },
    {
        "content": "<p>instead of 1 per function</p>",
        "id": 240652950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231630
    },
    {
        "content": "<p>the alternative -- what I was gong to <em>orgiinally</em> suggest --</p>",
        "id": 240653009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231645
    },
    {
        "content": "<p>was that for a particular function you would already collapse it down to one value</p>",
        "id": 240653016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231651
    },
    {
        "content": "<p>and then you would again collapse across functions</p>",
        "id": 240653022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231657
    },
    {
        "content": "<p>but I think that will be messier</p>",
        "id": 240653027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231662
    },
    {
        "content": "<p>you might wind up tweaking what I wrote above so that you <em>first</em> collapse within the function and then check against the other functions, just to give better error mesages,</p>",
        "id": 240653046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231679
    },
    {
        "content": "<p>but I woudl still do it all in that final phase</p>",
        "id": 240653050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/240653016\">said</a>:</p>\n<blockquote>\n<p>was that for a particular function you would already collapse it down to one value</p>\n</blockquote>\n<p>unsure what you meant here</p>",
        "id": 240653067,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622231696
    },
    {
        "content": "<p>consider the motivating example we started with</p>",
        "id": 240653087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231708
    },
    {
        "content": "<p>what do you mean by collapse it down to one value?</p>",
        "id": 240653091,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622231710
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"rusttype\"><pre><span></span><code>fn a&lt;A: Debug&gt;(a: A) -&gt; Foo&lt;A&gt; {\n    vec![a]\n}\n\nfn b&lt;B: Debug&gt;(b: B) -&gt; Foo&lt;B&gt; {\n    vec![b]\n}\n</code></pre></div>",
        "id": 240653116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231725
    },
    {
        "content": "<p>well actually</p>",
        "id": 240653127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231732
    },
    {
        "content": "<p>so in taht example we have two definitions of <code>Foo</code></p>",
        "id": 240653137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231738
    },
    {
        "content": "<p>from two different functions</p>",
        "id": 240653148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231741
    },
    {
        "content": "<p>but the motivating example for THIS bug is more like</p>",
        "id": 240653153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231745
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f1</span><span class=\"o\">&lt;</span><span class=\"n\">A</span>: <span class=\"nc\">Debug</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"nc\">Debug</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">B</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f2</span><span class=\"o\">&lt;</span><span class=\"n\">A</span>: <span class=\"nc\">Debug</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"nc\">Debug</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">B</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240653280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231792
    },
    {
        "content": "<p>and the key point here is that we have <strong>four definitions</strong> of <code>Foo</code> (all of which work out to the same type, <code>Vec&lt;T&gt;</code>)</p>",
        "id": 240653308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231806
    },
    {
        "content": "<p>two from each function</p>",
        "id": 240653318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231809
    },
    {
        "content": "<p>so what I am proposing is that when we type-check <code>f1</code> and <code>f2</code></p>",
        "id": 240653355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231828
    },
    {
        "content": "<p>we will produce a <code>VecMap</code> for each of them with two entries</p>",
        "id": 240653371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231837
    },
    {
        "content": "<p>e.g.,</p>",
        "id": 240653375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231840
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">((</span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">A</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">((</span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">B</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240653417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231864
    },
    {
        "content": "<p>with me so far?</p>",
        "id": 240653443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231880
    },
    {
        "content": "<p>here <code>Foo</code> means \"def-id of <code>Foo</code>\"</p>",
        "id": 240653488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231885
    },
    {
        "content": "<p>and <code>A</code> and <code>Vec&lt;A&gt;</code> means \"<code>Ty&lt;'tcx&gt;</code> representing the type <code>A</code> and <code>Vec&lt;A&gt;</code>\"</p>",
        "id": 240653525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231904
    },
    {
        "content": "<p>then in the final phase, we are going to walk those vec-maps, and so we will walk all four definiing uses, and we will infer that the type of <code>Foo</code> in each case is <code>Vec&lt;T&gt;</code></p>",
        "id": 240653612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231948
    },
    {
        "content": "<p>since all those 4 uses infer to the same final type, we are happy</p>",
        "id": 240653627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622231958
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 240654390,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622232341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> still if I got what you meant correctly you prefer me to not take this last approach and follow the previous one?</p>",
        "id": 240654504,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622232385
    },
    {
        "content": "<p>I'd need to re-read this conversation again and check the code in order to better understand all this that's going on</p>",
        "id": 240654586,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622232432
    },
    {
        "content": "<p>I'm not sure which is \"the last\" or \"previous\" etc <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> :)</p>",
        "id": 240675669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622250692
    },
    {
        "content": "<p>but I did change my mind mid explanation</p>",
        "id": 240675670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622250698
    },
    {
        "content": "<p>I think that you want to change basically all the maps related here to <code>VecMap</code></p>",
        "id": 240675672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622250715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/240653009\">said</a>:</p>\n<blockquote>\n<p>the alternative -- what I was gong to <em>orgiinally</em> suggest --</p>\n</blockquote>\n<p>I was referring as \"previous\" to what you've said before this point and the last to what you've said after this point</p>",
        "id": 240675811,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622250929
    },
    {
        "content": "<p>it seemed to me for some reason when I first read that, that you wanted me to take the \"previous\" approach</p>",
        "id": 240675818,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622250958
    },
    {
        "content": "<p>unsure, anyway I need to re-read everything and condense the info</p>",
        "id": 240675860,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622250982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> were you able to make sense of what I wrote in the end? :)</p>",
        "id": 241068133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622578008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was reading again from the beginning but I'm not sure I got what alternative you wanted me to follow</p>",
        "id": 241068910,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622578393
    },
    {
        "content": "<p>going to start writing some stuff here <a href=\"https://hackmd.io/4eIknVE7TaWAuiPpu_-gpA\">https://hackmd.io/4eIknVE7TaWAuiPpu_-gpA</a></p>",
        "id": 241069062,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622578454
    },
    {
        "content": "<p>ok, let me try to help with that</p>",
        "id": 241071263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622579542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> still here?</p>",
        "id": 241072764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622580260
    },
    {
        "content": "<p>yes</p>",
        "id": 241073976,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622580780
    },
    {
        "content": "<p>ok so</p>",
        "id": 241074520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581037
    },
    {
        "content": "<p>at the bottom of your hackmd</p>",
        "id": 241074528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581042
    },
    {
        "content": "<p>I added what I see as the steps needed</p>",
        "id": 241074536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581046
    },
    {
        "content": "<p>does what I wrote make any sense?</p>",
        "id": 241075000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581262
    },
    {
        "content": "<p>reading ...</p>",
        "id": 241075219,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622581354
    },
    {
        "content": "<p>yes makes sense</p>",
        "id": 241075405,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622581445
    },
    {
        "content": "<p>I also put some idea of what to order</p>",
        "id": 241075428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622581460
    },
    {
        "content": "<p>don't think I forgot <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 241533752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622812987
    },
    {
        "content": "<p>muaaahahahahahaha</p>",
        "id": 241533762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622812993
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://media0.giphy.com/media/FYnYcQoFmlPeU/giphy.gif?cid=c623cb3501xmcvlqjxut8wyvrqxbimy8w9095hw06g11n58p&amp;rid=giphy.gif&amp;ct=g\"><img src=\"https://uploads.zulipusercontent.net/4aefa695541c93d60f2e78d2adf112ce22c23df2/68747470733a2f2f6d65646961302e67697068792e636f6d2f6d656469612f46596e5963516f466d6c5065552f67697068792e6769663f6369643d63363233636233353031786d63766c716a7875743877797672717862696d79387739303935687730366731316e353870267269643d67697068792e6769662663743d67\"></a></div>",
        "id": 241533781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813006
    },
    {
        "content": "<p>hahahaha</p>",
        "id": 241535099,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622813591
    },
    {
        "content": "<p>yeah, again, sorry for putting this task to sleep</p>",
        "id": 241535115,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622813600
    },
    {
        "content": "<p>oh, I should review your hackmd</p>",
        "id": 241535176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813631
    },
    {
        "content": "<p>or, your changes to the hackmd</p>",
        "id": 241535223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813642
    },
    {
        "content": "<p>well if you want check that out, but the purpose now of the hackmd is more like a blog post than something that is right now gonna help me code</p>",
        "id": 241535296,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622813679
    },
    {
        "content": "<p>but still kind of reflects my understanding of what's going on</p>",
        "id": 241535318,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622813691
    },
    {
        "content": "<p>I'm reading it now</p>",
        "id": 241535400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813735
    },
    {
        "content": "<p>seems like it might be a great addition to the rustc-dev-guide</p>",
        "id": 241535412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813740
    },
    {
        "content": "<p>but also a good fit for inside rust?</p>",
        "id": 241535427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622813750
    },
    {
        "content": "<p>Just skimming, it does look it would be helpful for others :)</p>",
        "id": 241535657,
        "sender_full_name": "Jack Huey",
        "timestamp": 1622813856
    },
    {
        "content": "<p>sure, yeah</p>",
        "id": 241538135,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622814946
    },
    {
        "content": "<p>agree with both things</p>",
        "id": 241538175,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622814959
    },
    {
        "content": "<p>to be honest I'm not 100% sure if everything it says is correct, I'm about 95% sure :P</p>",
        "id": 241538308,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622814998
    },
    {
        "content": "<p>but well, if we turn it into rustc-dev-guide and/or inside rust, more people would have the opportunity to review</p>",
        "id": 241538394,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1622815036
    },
    {
        "content": "<p>work is done here <a href=\"https://github.com/rust-lang/rust/issues/86118\">#86118</a></p>",
        "id": 241849403,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623104651
    },
    {
        "content": "<p>I still need to review myself, already went ahead and left a comment but there are a couple of things that doesn't convince me 100%, anyway, minor things :)</p>",
        "id": 241849443,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623104697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20PR.20.2382558/near/238527535\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, we were discussing about this example with <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, can you explain exactly why should this be rejected?</p>",
        "id": 242752305,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623771312
    },
    {
        "content": "<p>I have not a clear picture about it</p>",
        "id": 242752591,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623771422
    },
    {
        "content": "<p>I'm thinking about it in a way that the type which impls Sized should contain or <code>A</code>, <code>B</code> or both of them but if the defining use is <code>X&lt;T, T&gt;</code> could be any so it's ambiguous</p>",
        "id": 242752687,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623771457
    },
    {
        "content": "<p>but I'm a bit confused right now :)</p>",
        "id": 242752732,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623771475
    },
    {
        "content": "<p>it's exactly what you said, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> -- it's ambiguous</p>",
        "id": 242782781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623783671
    },
    {
        "content": "<p>should it be <code>type X&lt;A, B&gt; = A</code></p>",
        "id": 242782796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623783677
    },
    {
        "content": "<p>or should it be <code>type X&lt;A, B&gt; = B</code></p>",
        "id": 242782811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623783682
    },
    {
        "content": "<p>in this particular <em>usage</em> it doesn't make any difference, but there could be other uses where it would</p>",
        "id": 242782840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623783693
    },
    {
        "content": "<p>e.g.</p>",
        "id": 242782841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623783694
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242782897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623783721
    },
    {
        "content": "<p>what is that <code>X&lt;u32, i32&gt;</code> an alias for?</p>",
        "id": 242782950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623783729
    },
    {
        "content": "<p>That example doesn't really make sense though?  That's essentially saying that <code>T = X&lt;T, T&gt;</code></p>",
        "id": 242785185,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623784726
    },
    {
        "content": "<p>that seems fine</p>",
        "id": 242787884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623785856
    },
    {
        "content": "<p>I expect an error because of ambiguity</p>",
        "id": 242787895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623785863
    },
    {
        "content": "<p>but not because <code>X</code> is defined to be <code>T</code></p>",
        "id": 242787906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623785868
    },
    {
        "content": "<p>aren't you on vacation, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> :)</p>",
        "id": 242788630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623786234
    },
    {
        "content": "<p>Yes</p>",
        "id": 242793409,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623788354
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/0nzjTt9yTTQah8mP5mDjbhcR/image-41b16412-e42b-4508-a539-1c5184115e74.jpg\">image-41b16412-e42b-4508-a539-1c5184115e74.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/0nzjTt9yTTQah8mP5mDjbhcR/image-41b16412-e42b-4508-a539-1c5184115e74.jpg\" title=\"image-41b16412-e42b-4508-a539-1c5184115e74.jpg\"><img src=\"/user_uploads/4715/0nzjTt9yTTQah8mP5mDjbhcR/image-41b16412-e42b-4508-a539-1c5184115e74.jpg\"></a></div>",
        "id": 242793455,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623788373
    },
    {
        "content": "<p>between strike and strike you fix some rustc problems? <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> <span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span></p>",
        "id": 242794374,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1623788753
    }
]