[
    {
        "content": "<p>This is from <a href=\"https://github.com/rust-lang/rust/issues/84366\">#84366</a>, so it might be part of the bug, but perhaps someone can explain why this is valid?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FancyTrait</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Associated</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Self</span>::<span class=\"n\">Associated</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">proof</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Associated</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I would have expected something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FancyTrait</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Associated</span>: <span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Self</span>::<span class=\"n\">Associated</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">proof</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Associated</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>since otherwise the two reference types are not well formed.</p>",
        "id": 236873129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619804203
    },
    {
        "content": "<p>Or is it that the bounds are implicitly added to the function instead, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FancyTrait</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Associated</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Self</span>::<span class=\"n\">Associated</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">proof</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Associated</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"nc\">T</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Associated</span>: <span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236873341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619804290
    },
    {
        "content": "<p>Interesting question. I haven’t even thought about that part, since <code>T: 'b</code> bounds weren’t anything I worried about in that example. Perhaps it’s related to the fact that the presence of a <code>(self)</code> method doesn’t require any <code>Self: Sized</code> bounds? At least I did never really understand why that it is the way it is.</p>\n<p>By the way it isn’t part of the bug, AFAICT. Well, at least you can easily add the <code>T: 'b</code> bound to the trait and the impl and everything still compiles. As I said, <code>T: 'b</code> wasn’t anything I worried about / was trying to (unsoundly) convince the compiler to be true.</p>",
        "id": 236910230,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1619820337
    },
    {
        "content": "<p>Wait, you wrote <code>Associated: 'b</code>, too. That seems more relevant to the problem / I don’t think my impl works anymore with that in place. It wouldn’t solve the original problem entirely of course, e.g. the original code example I gave still works AFAICT.</p>",
        "id": 236911683,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1619821323
    },
    {
        "content": "<p>The rule that says <code>T: 'a</code> implies <code>T::Associated: 'a</code> seems very strange to me given that there doesn't seem to be a corresponding proof obligation when constructing the impl: in</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FancyTrait</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Associated</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>it seems like <code>'a: 'b</code> ought to be available, although I'm not sure if it's an assumption or an obligation.</p>",
        "id": 236912525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619821888
    },
    {
        "content": "<p>I <em>think</em> that what is happening here is that <code>&amp;'a str</code> is known to be an associated type of <code>F</code> (specifically <code>&lt;F as Fn&gt;::Output</code>), so if we assume in this impl that <code>F: 'b</code>, then we can conclude (by reverse engineering WF bounds) that <code>&amp;'a str: 'b</code> and hence <code>'a: 'b</code> so the <code>Associated = &amp;'a T</code> is okay (it actually does outlive <code>'b</code>).</p>",
        "id": 236913132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619822288
    },
    {
        "content": "<p>Right now though a lot of those WF bounds only exist implicitly and I think this makes the handling bug-prone. (The inability to have bounded quantifiers like <code>for&lt;'a: 'b&gt; fn(...)</code> types is also related to this, but maybe that's another discussion.)</p>",
        "id": 236913235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619822402
    },
    {
        "content": "<p>I think the <code>T: 'b, Self::Associated: 'b</code> bounds on the method itself are the correct interpretation. The code still does compile fine if they are added.</p>",
        "id": 236915178,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1619823881
    },
    {
        "content": "<p>Regarding <code>T: 'a</code> implies <code>T::Associated: 'a</code>, the relevant RFC is <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1214-projections-lifetimes-and-wf.md\">1214</a>. I haven’t read it in detail myself yet.</p>\n<p>Regarding the trait impl in question, the corresponding proof obligation is indeed fulfilled by the <code>F: Fn() -&gt; &amp;'a str</code> bound. If you comment that out, you get some</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0207]: the lifetime parameter `&#39;a` is not constrained by the impl trait, self type, or predicates\n  --&gt; src/main.rs:8:6\n   |\n 8 | impl&lt;&#39;a, &#39;b, T: ?Sized + &#39;a, F&gt; FancyTrait&lt;&#39;b, T&gt; for F\n   |      ^^ unconstrained lifetime parameter\n</code></pre></div>",
        "id": 236915700,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1619824315
    },
    {
        "content": "<p>Here's an interesting variation. It seems like the only point of the <code>proof</code> argument is so that WF reverse engineering injects <code>'a: 'b</code>, so it should be possible to simply add this assumption without changing the results. But this version fails:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FancyTrait</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Associated</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Self</span>::<span class=\"n\">Associated</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Associated</span>: <span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FancyTrait</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Associated</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Associated</span>: <span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with an error that suggests that <code>'a: 'b</code> is not available when typechecking the <code>{ x }</code> body, and</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FancyTrait</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Associated</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">convert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">()</span>: <span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>manages to infer <code>'a: 'b</code> but fails to match the trait signature</p>",
        "id": 236916089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619824622
    },
    {
        "content": "<blockquote>\n<p><code>T: 'a</code> implies <code>T::Associated: 'a</code></p>\n</blockquote>\n<p>by the way, to be accurate (and as far as I understand), in this case the property/obligation is actually more like<br>\n∀<code>'c</code>(<code>F: 'c</code>∧<code>'b: 'c</code>∧<code>T: 'c</code>⟹<code>&lt;F as FancyTrait&lt;'b, T&gt;&gt;::Associated: 'c</code>)</p>",
        "id": 236916347,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1619824853
    },
    {
        "content": "<p>(simplified the example)</p>",
        "id": 236916513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619824991
    },
    {
        "content": "<p>Apparently WF reverse engineering doesn't work through name resolution: <code>Self::Associated: 'b</code> doesn't infer <code>'a: 'b</code> but <code>&amp;'a (): 'b</code> does even though <code>Self::Associated == &amp;'a ()</code></p>",
        "id": 236916642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619825092
    },
    {
        "content": "<p>this smells like a soundness issue but it might just be an elaboration problem</p>",
        "id": 236916695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619825135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/144729-wg-traits/topic/WF.20bounds.20in.20trait.20declarations/near/236873341\">said</a>:</p>\n<blockquote>\n<p>Or is it that the bounds are implicitly added to the function instead, like this:</p>\n</blockquote>\n<p>yes</p>",
        "id": 236949417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619857346
    },
    {
        "content": "<p>this is the <em>intention</em></p>",
        "id": 236949420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619857353
    },
    {
        "content": "<p>there are some known bugs here</p>",
        "id": 236949423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619857357
    },
    {
        "content": "<p>my intent is to resolve them by elaborating more explicitly</p>",
        "id": 236949435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619857391
    }
]