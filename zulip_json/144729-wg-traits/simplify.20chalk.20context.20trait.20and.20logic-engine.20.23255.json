[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Here's a topic for the issue, in case there end up being multiple related PRs</p>",
        "id": 178701617,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571694161
    },
    {
        "content": "<p>I haven't started too much down the rabbit hole of your suggestion, but the only hiccup I see happening is that <code>program_clauses</code> calls <code>self.infer.var_is_bound</code></p>",
        "id": 178701741,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571694256
    },
    {
        "content": "<p>But the only place it's called (<code>push_initial_strands_instantiated</code>), we have an <code>infer</code>, so I think it'll be fine</p>",
        "id": 178701904,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571694414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I suppose we can pass the infer into that fn -- that's what you mean, right?</p>",
        "id": 178702036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571694537
    },
    {
        "content": "<p>Yep exactly</p>",
        "id": 178702078,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571694594
    },
    {
        "content": "<p>Ok so I was able to move <code>program_clauses</code> to <code>ContextOps</code>. Did end up needing to make <code>InferenceTable</code> an associated type on <code>Context</code>, but I think it actually mirrors the other associated types well. Now I need to actually move <code>infer</code> back onto Strand</p>",
        "id": 178704015,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571695956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> So I was able to move infer back to strand and remove CanonicalStrand, but a lot of tests are failing, so I didn't correctly account for canonicalization. But I looked again at rustc's use of Chalk, and it's InferenceTable has a lifetime, so I don't know if we can store InferenceTable in Strand anyways.</p>",
        "id": 178779067,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571766609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> it should be fine, it only has the tcx lifetime, and so does the Context type</p>",
        "id": 178791103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571772978
    },
    {
        "content": "<p>well, i've not double checked :) but that should be the case</p>",
        "id": 178791108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571772993
    },
    {
        "content": "<p>Yeah, looking again, I think it should be okay. Mostly just have to figure out why I made the tests fail</p>",
        "id": 178791178,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571773051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around? I have some questions/discussion.</p>",
        "id": 178961938,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571929745
    },
    {
        "content": "<p>Yes</p>",
        "id": 178961953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571929755
    },
    {
        "content": "<p>What's the advantage of having a separate UCanonicalGoalInEnvironment versus just a CanonicalGoalInEnvironment?</p>",
        "id": 178961991,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571929788
    },
    {
        "content": "<p>I'm trying to remember :) Ah, well, I think that the different is</p>",
        "id": 178962106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571929845
    },
    {
        "content": "<p><code>UCanonicalGoalInEnvironment</code> \"renumbers\" the universes to be minimal</p>",
        "id": 178962125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571929859
    },
    {
        "content": "<p>this makes sense for a query or at the \"start\" of things</p>",
        "id": 178962136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571929865
    },
    {
        "content": "<p>but CanonicalGoalInEnvironment does not, which makes sense for an answer or other thing that occurs inside of some context</p>",
        "id": 178962153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571929880
    },
    {
        "content": "<p>at least, that's the main difference <code>UCanonical</code> and <code>Canonical</code> in general</p>",
        "id": 178962176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571929900
    },
    {
        "content": "<p>not sure <em>specifically</em> about <code>GoalInEnvironment</code></p>",
        "id": 178962192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571929915
    },
    {
        "content": "<p>well I guess that's the type we use for the \"answer\" to a query, maybe</p>",
        "id": 178962250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571929932
    },
    {
        "content": "<p>And, I'm still trying to wrap my head around where things get canonicalized/uncanonicalized. When I removed CanonicalGoal, I sort of just assumed that I should just be able to pass around the CanonicalizedExClause (with accessing the inner ExClause), but that wasn't an accurate assumption. So seems like still need to more or less keep the canonicalization/uncanonicalization as things get passed around</p>",
        "id": 178962354,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571930013
    },
    {
        "content": "<p>Right, so I guess my question between <code>UCanonicalGoalInEnvironment</code> and <code>CanonicalGoalInEnvironment</code> is it is ever necessary to <em>know</em> that you're not the first universe? Like, if all canonicalization renumbered the universe to be minimal?</p>",
        "id": 178962574,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571930135
    },
    {
        "content": "<p>OK. I guess I would summarize it as:</p>\n<ul>\n<li>canonicalization in general happens when you cross between inference contexts</li>\n<li>this can happen when you start a new query, and when you produce a result<br>\n    * when starting a new query, you also canonicalize universes<br>\n    * when producing a result, you are referencing the universes from the start of the query</li>\n</ul>",
        "id": 178962597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930151
    },
    {
        "content": "<p>So imagine that we had a query like <code>Implemented(?X: Foo&lt;!22, !23&gt;)</code></p>",
        "id": 178962683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930185
    },
    {
        "content": "<p>here we are saying -- give me all types that implement <code>Foo&lt;!22, !23&gt;</code>, and maybe <code>?X</code> is in universe 0</p>",
        "id": 178962700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930205
    },
    {
        "content": "<p>in that case, it doesn't really matter that the placeholders are in universes 22 and 23</p>",
        "id": 178962713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930218
    },
    {
        "content": "<p>what's important is the relative ordering</p>",
        "id": 178962716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930221
    },
    {
        "content": "<p>we canonicalize this to <code>Implemented(?X: Foo&lt;!1, !2&gt;)</code></p>",
        "id": 178962739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930235
    },
    {
        "content": "<p>ok, maybe not the best example, I hit a minor roadbock -- let's say that <code>?X</code> is in universe 23, so it can name either <code>!22</code> or <code>!23</code></p>",
        "id": 178962760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930257
    },
    {
        "content": "<p>(I'm kind of assuming some basic familiarity with how universes work, let me know if that's incorrect)</p>",
        "id": 178962779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930272
    },
    {
        "content": "<blockquote>\n<p>we canonicalize this to <code>Implemented(?X: Foo&lt;!1, !2&gt;)</code></p>\n</blockquote>\n<p>I should have said we <em>ucanonicalize</em> this</p>",
        "id": 178962829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930287
    },
    {
        "content": "<p>and if we include all the info, I guess it's like <code>exists&lt;?X in U2&gt; { Implemented(?X: Foo&lt;!1, !2&gt;) }</code></p>",
        "id": 178962859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930314
    },
    {
        "content": "<p>or you could sort of \"rephrase\" that as saying that we canonicalize to <code>forall&lt;A&gt; { forall&lt;B&gt; { exists&lt;C&gt; { Implemented(C: Foo&lt;A, B&gt;) } } }</code></p>",
        "id": 178962891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930335
    },
    {
        "content": "<p>with me so far?</p>",
        "id": 178962895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930338
    },
    {
        "content": "<p>one sec, let me try to follow</p>",
        "id": 178962962,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571930396
    },
    {
        "content": "<p>OK, here's a way to look at it. Every universe corresponds to some <code>forall</code> that we are \"inside\" of -- </p>\n<p>So</p>\n<div class=\"codehilite\"><pre><span></span>forall&lt;A&gt; { A: Foo }\n</pre></div>\n\n\n<p>when we enter the <code>forall</code>, we replace <code>A</code> with <code>!1</code>, etc</p>",
        "id": 178963116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930479
    },
    {
        "content": "<p>the problem is that sometimes we have foralls which we are inside of but which are not relevant</p>",
        "id": 178963129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930488
    },
    {
        "content": "<p>e.g.</p>",
        "id": 178963130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930489
    },
    {
        "content": "<p>Can you clarify the syntax here? <code>!22</code> means universe 22, right?</p>",
        "id": 178963157,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571930509
    },
    {
        "content": "<p>if we start with </p>\n<div class=\"codehilite\"><pre><span></span>forall&lt;A&gt; { forall&lt;B&gt; { A: Foo, B: Bar&lt;A&gt; } }\n</pre></div>\n\n\n<p>we would then have to prove just the first part (to start)</p>\n<div class=\"codehilite\"><pre><span></span>forall&lt;A&gt; { forall&lt;B&gt; { A: Foo } }\n</pre></div>\n\n\n<p>but here, <code>B</code> is not relevant</p>",
        "id": 178963206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930524
    },
    {
        "content": "<blockquote>\n<p>Can you clarify the syntax here? <code>!22</code> means universe 22, right?</p>\n</blockquote>\n<p>yeah, \"placeholder in universe 22\"</p>",
        "id": 178963228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930535
    },
    {
        "content": "<p>As opposed to <code>^0</code> or <code>?0</code>?</p>",
        "id": 178963275,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571930582
    },
    {
        "content": "<p>right so <code>^0</code> refers to a <em>bound</em> variable--</p>",
        "id": 178963290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930593
    },
    {
        "content": "<p>so e.g. <code>forall&lt;X&gt; { ... }</code>, in there, <code>X</code> is bound (we see the binder)</p>",
        "id": 178963301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930605
    },
    {
        "content": "<p>Ok, then when canonicalized <code>X</code> would be converted to <code>^0</code>?</p>",
        "id": 178963329,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571930633
    },
    {
        "content": "<p>but when we \"enter\" the <code>forall</code>, and wish to look at the terms inside, we kind of move that binder into the environment (by making a univese) and replace <code>X</code> with <code>!U</code> where <code>U</code> is that new universe</p>",
        "id": 178963382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930649
    },
    {
        "content": "<blockquote>\n<p>Ok, then when canonicalized <code>X</code> would be converted to <code>^0</code>?</p>\n</blockquote>\n<p>yes, because canonicalization basically adds a level of binder around the whole thing</p>",
        "id": 178963409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930675
    },
    {
        "content": "<p>Also, the only place that <code>infer.canonicalize_goal</code> is called is in <code>abstract_positive_literal</code> and <code>abstract_negative_literal</code>, but that immediately get's converted to a <code>UCanonicalizedGoalInEvironment</code> in <code>get_or_create_table_for_subgoal</code></p>",
        "id": 178963427,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571930684
    },
    {
        "content": "<p>I'm struggling with how to convey this sense but basically</p>",
        "id": 178963436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930688
    },
    {
        "content": "<p>Thanks for going through this with me. Like I said, trying to wrap my head around it all</p>",
        "id": 178963468,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571930715
    },
    {
        "content": "<p>you have terms (types, etc) and they can either reference things from the surrounding environment (\"free variables\") or they can include a binder and reference back to that -- and there is some implicit point that we are maintaining always</p>",
        "id": 178963478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930726
    },
    {
        "content": "<p>so e.g. in terms of our representation when you see <code>forall&lt;type&gt; { ^0: Debug }</code>, that <code>^0</code> is referring back to the innermost binder (a \"type\")</p>",
        "id": 178963507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930755
    },
    {
        "content": "<p>(that's our debug notation, the variables are not named)</p>",
        "id": 178963535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930763
    },
    {
        "content": "<p>in more conventional notation it would be like <code>forall&lt;T&gt; { T: Debug }</code></p>",
        "id": 178963561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930772
    },
    {
        "content": "<p>These are debruijn indices right?</p>",
        "id": 178963632,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571930842
    },
    {
        "content": "<p>but when we want to try and prove that to be true, we \"enter\" the <code>forall</code> -- kind of shifting the \"current point\" between what is bound and free. So we create the next universe <code>U</code>  and replace the bound variable (<code>^0</code>, or <code>T</code>) with <code>!U</code>, leaving us with a new term <code>!U: Debug</code> -- note that there is no <code>forall</code> here, it's in the environment now</p>",
        "id": 178963634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930843
    },
    {
        "content": "<blockquote>\n<p>Also, the only place that <code>infer.canonicalize_goal</code> is called is in <code>abstract_positive_literal</code> and <code>abstract_negative_literal</code>, but that immediately get's converted to a <code>UCanonicalizedGoalInEvironment</code> in <code>get_or_create_table_for_subgoal</code></p>\n</blockquote>\n<p>it may be that we don't need to have <code>CanonicalizedGoalInEnvornment</code> as a separate type</p>",
        "id": 178963674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930874
    },
    {
        "content": "<p>but the distinction between u-canonical and canonical is still important more generally</p>",
        "id": 178963724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571930887
    },
    {
        "content": "<p>Ok I think I understand a bit better now, thanks</p>",
        "id": 178963954,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571931035
    },
    {
        "content": "<p>to circle back to my example, basically the output of just <em>canonicalization</em> our query is something like this</p>\n<div class=\"codehilite\"><pre><span></span>forall&lt;A&gt; { forall&lt;B&gt; { A: Foo } }\n                        ^ implicit point is here, in terms of what&#39;s in environment and what&#39;s in the terms we are manipulating\n</pre></div>\n\n\n<p>so u-canonicalization is just removing that unused <code>forall&lt;B&gt;</code>, basically</p>",
        "id": 178963960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931039
    },
    {
        "content": "<p>but the thing I was going to say was that when you produce an <em>output</em>, you don't want to do that, because the output is expressed in terms of those foralls that were in the environment</p>",
        "id": 178963979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931059
    },
    {
        "content": "<p>e.g., we might say <code>?X: SomeTrait</code> is true if <code>?X = !1</code>, and we need to know which <code>!1</code> that is</p>",
        "id": 178964007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931081
    },
    {
        "content": "<p>we could I guess renumbering things but it'd be silly because we'd immediately want to reference back</p>",
        "id": 178964021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571931094
    },
    {
        "content": "<p>Ok so, to just sort of sum it up, if I understand correctly:<br>\nIf our query is<br>\n<code>forall&lt;A&gt; { forall&lt;B&gt; { A: Foo } }</code><br>\nthat would be canonicalized to <br>\n<code>forall&lt;type&gt; { forall&lt;type&gt; { ^1: Foo } }</code><br>\nand then ucanonicalized to<br>\n<code>!1: Foo</code><br>\nI feel like I've missed something.</p>",
        "id": 178965289,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571931768
    },
    {
        "content": "<p>well</p>",
        "id": 178966095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932171
    },
    {
        "content": "<p>ok so</p>",
        "id": 178966112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932184
    },
    {
        "content": "<p>it would be canonicalized for <code>forall&lt;type&gt; { forall&lt;type&gt; { ^1: Foo }</code> and then ucanonicalized to</p>\n<p><code>forall&lt;type&gt; { ^0: Foo }</code></p>",
        "id": 178966197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932209
    },
    {
        "content": "<p>oh</p>",
        "id": 178966241,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571932239
    },
    {
        "content": "<p><em>then</em> when we start <em>processing</em> the query</p>",
        "id": 178966257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932247
    },
    {
        "content": "<p>we would convert that to <code>!1: Foo</code></p>",
        "id": 178966285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571932259
    },
    {
        "content": "<p>Ok so, taking a step back. What exactly is the goal of removing <code>CanonicalStrand</code>? Or, more-so, what's the benefit of storing <code>infer</code> in <code>Strand</code>? Is the intention that we pass a canonicalized strand around or the uncanonicalized strand then canonicalize where needed?</p>",
        "id": 178968095,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571933227
    },
    {
        "content": "<p>I guess I should probably go back to the commit that added <code>CanonicalStrand</code> and look at how it was used before</p>",
        "id": 178968345,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571933396
    },
    {
        "content": "<blockquote>\n<p>Ok so, taking a step back. What exactly is the goal of removing <code>CanonicalStrand</code>? Or, more-so, what's the benefit of storing <code>infer</code> in <code>Strand</code>? Is the intention that we pass a canonicalized strand around or the uncanonicalized strand then canonicalize where needed?</p>\n</blockquote>\n<p>the benefit is not having to canonicalize when we suspend a strand and to \"de-canonicalize\" when we restore one</p>",
        "id": 178971442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571935405
    },
    {
        "content": "<p>it's a purely a runtime optimization</p>",
        "id": 178971481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571935429
    },
    {
        "content": "<p>perhaps also a (to my mind) conceptual simplification</p>",
        "id": 178971495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571935436
    },
    {
        "content": "<p>in that I think you want to have one inference context per .. hmm .. \"active environment\" in which work is being done, and a strand is one such environment (similarly, the code in the compiler creates one inference context per function, etc)</p>",
        "id": 178971611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571935494
    },
    {
        "content": "<p>Ok. So. I think there's some subtlety here that I'm not seeing. I have a feeling that it has to do with the InferenceTable now being persistent instead being re-created every time a <code>CanonicalStrand</code> get instantiated into a <code>Strand</code>. Either that, some state is getting shared when <code>Strand</code>s are supposed to cloned fresh. Which is causing a bunch of tests to fail, and I honestly don't know why. So I think a better approach to this is to take a step back to the known-passing code, add some unit tests that specifically test behavior in chalk-engine, instead of only the integration tests in the root.</p>",
        "id": 179011356,
        "sender_full_name": "Jack Huey",
        "timestamp": 1571963009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I can also take a look</p>",
        "id": 179067190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572021893
    },
    {
        "content": "<p>unit testing chalk-engine seems fine too, though in general I'd prefer to keep most of our unit tests \"high level\" precisely so they survive big refactorings like this</p>",
        "id": 179067221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572021918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> If you want to take a look/have time, I've pushed a branch to my fork with that commit that removes <code>CanonicalStrand</code> <a href=\"https://github.com/jackh726/chalk/commit/511b4f247e48a5b0d8ddc5e8bf84f0e3c1cd3337\" target=\"_blank\" title=\"https://github.com/jackh726/chalk/commit/511b4f247e48a5b0d8ddc5e8bf84f0e3c1cd3337\">https://github.com/jackh726/chalk/commit/511b4f247e48a5b0d8ddc5e8bf84f0e3c1cd3337</a></p>",
        "id": 179067674,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572022218
    },
    {
        "content": "<p>is that in the PR, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ?</p>",
        "id": 179067684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572022230
    },
    {
        "content": "<p>Not in the PR because tests are failing, but I could push it to the PR branch</p>",
        "id": 179067722,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572022248
    },
    {
        "content": "<p>I'd say push it to the PR branch</p>",
        "id": 179067735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572022258
    },
    {
        "content": "<p>it's usually easier to give feedback if there's an open PR</p>",
        "id": 179067747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572022264
    },
    {
        "content": "<p>will do</p>",
        "id": 179067753,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572022268
    },
    {
        "content": "<p>Ok PR is updated</p>",
        "id": 179067866,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572022335
    },
    {
        "content": "<p>Overall, all but 19 tests pass</p>",
        "id": 179068061,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572022483
    },
    {
        "content": "<p>Btw <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've updated the PR and rebased to master</p>",
        "id": 179263390,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572288952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Working off of the work I've done so far (using the coinduction fix branch as a base), I was able to make <code>Table</code> store <code>Strand</code>s rather than <code>CanonicalStrand</code>s</p>",
        "id": 179855749,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572889264
    },
    {
        "content": "<p>the only test not passing is <code>only_draw_so_many_blow_up</code></p>",
        "id": 179855761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572889278
    },
    {
        "content": "<p>but I think it's probably because new <code>InferenceTable</code>s aren't being created</p>",
        "id": 179855859,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572889348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> great! Sorry i've not finalized my review of your PRs yet</p>",
        "id": 179863423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894054
    },
    {
        "content": "<p>I did read them but I didn't have time to come back to it yet, been having some last-minute demands on my time fri/today</p>",
        "id": 179863454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894074
    },
    {
        "content": "<p>though from my first read I was very happy with the coinduction PR</p>",
        "id": 179863475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894086
    },
    {
        "content": "<p>No problem :)</p>",
        "id": 179863486,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572894093
    }
]