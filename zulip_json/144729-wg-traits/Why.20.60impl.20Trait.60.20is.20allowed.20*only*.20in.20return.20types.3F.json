[
    {
        "content": "<p>Consider I want to return an async closure with three arguments, the \"natural way\" to write this would be </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">async_closure</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But this <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=f02df056a54859627521da81188070a6\">doesn't work</a> since the <code>impl Future</code> is not in a return position, but in a associated type position instead:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error[E0562]: `impl Trait` not allowed outside of function and method return types\n --&gt; src/lib.rs:3:49\n  |\n3 | fn async_closure() -&gt; impl Fn(i32, i32, i32) -&gt; impl Future&lt;Output = u32&gt; {\n  |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n<p>And yet, if I declare a trait which is bound by <code>Fn</code>, it's <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=aef51a7b0c1d2dfffe8b3816165c9140\">possible</a> to return such closure:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">AsyncFn3</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">AsyncFn3</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Future</span>: <span class=\"nc\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Out</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Fut</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">AsyncFn3</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fut</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fut</span>: <span class=\"nc\">Future</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Future</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Fut</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Fut</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">async_closure</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">AsyncFn3</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is a lot of boilerplate though. Why is this boilerplate required? Why <code>impl Trait</code> can't \"just\" recursively work in RPIT's type parameters/associated types?</p>",
        "id": 266030253,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1640388428
    },
    {
        "content": "<p>I think that is just out of caution. We just never got around to adding a feature gate for it and continuing the work on it</p>",
        "id": 266054397,
        "sender_full_name": "oli",
        "timestamp": 1640430180
    },
    {
        "content": "<p>I just accidentally noticed (by writing it), that <code>impl A&lt;Assoc = impl B&gt;</code> <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=028fa87156e770043df86c02a95b2436\">is allowed</a>, so it seems even more like an overlook</p>",
        "id": 268448292,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1642536454
    },
    {
        "content": "<p>Another question is why this is not allowed:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Isn't <code>fn() -&gt; T</code> ~= <code>struct&lt;T&gt; { ptr: *const (), __: PhantomData&lt;fn() -&gt; T&gt; }</code>? Returning <code>F&lt;impl Trait&gt;</code> <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=959d46057b70b671ea4e5f6b11d3594f\">is allowed</a> too</p>",
        "id": 268533688,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1642596698
    },
    {
        "content": "<p>huh<br>\n<a href=\"/user_uploads/4715/3FZHFU7tQ85k4yy0yCHAYfpb/2022-01-19_17-00.png\">2022-01-19_17-00.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/3FZHFU7tQ85k4yy0yCHAYfpb/2022-01-19_17-00.png\" title=\"2022-01-19_17-00.png\"><img src=\"/user_uploads/4715/3FZHFU7tQ85k4yy0yCHAYfpb/2022-01-19_17-00.png\"></a></div>",
        "id": 268542935,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1642600849
    },
    {
        "content": "<p>It's also confusing that <code>lower_fn_decl</code> is used when lowering bare fn types (<code>fn(_) -&gt; _</code>) and not only function <strong>declarations</strong></p>",
        "id": 268543272,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1642600984
    },
    {
        "content": "<p>The farther I go, the more confusing everything is. There is a test that's supposed to test that <code>impl Fn() -&gt; impl Trait</code> is allowed, but it tests the opposite</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">allowed_in_ret_type</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"c1\">//~^ `impl Trait` not allowed</span>\n<span class=\"w\">    </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(note: it starts with <strong>allowed</strong>)<br>\n<a href=\"https://github.com/rust-lang/rust/blob/2f004d2d401682e553af3984ebd9a3976885e752/src/test/ui/impl-trait/nested_impl_trait.rs#L25-L28\">https://github.com/rust-lang/rust/blob/2f004d2d401682e553af3984ebd9a3976885e752/src/test/ui/impl-trait/nested_impl_trait.rs#L25-L28</a></p>",
        "id": 268551505,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1642604437
    },
    {
        "content": "<p>that test was allowed when it was written; it was disallowed by <a href=\"https://github.com/rust-lang/rust/pull/48084/files#diff-ccecca938872d65ffe8cd1c3ef1956e309fac83bcda547d8b16b89257e53a437R37\">https://github.com/rust-lang/rust/pull/48084/files#diff-ccecca938872d65ffe8cd1c3ef1956e309fac83bcda547d8b16b89257e53a437R37</a></p>",
        "id": 268554137,
        "sender_full_name": "erikdesjardins",
        "timestamp": 1642605484
    },
    {
        "content": "<p>seems unintentional given <a href=\"https://github.com/rust-lang/rust/pull/48084/files#diff-5a02f1ed43debed1fd24f7aad72490064f795b9420f15d847bac822aa4621a1cR476-R477\">https://github.com/rust-lang/rust/pull/48084/files#diff-5a02f1ed43debed1fd24f7aad72490064f795b9420f15d847bac822aa4621a1cR476-R477</a></p>\n<div class=\"codehilite\"><pre><span></span><code>// `-&gt; Foo` syntax is essentially an associated type binding,\n// so it is also allowed to contain nested `impl Trait`.\n</code></pre></div>",
        "id": 268554191,
        "sender_full_name": "erikdesjardins",
        "timestamp": 1642605504
    },
    {
        "content": "<p>I've opened a PR that fixes the <code>Fn() -&gt; impl Trait</code> checks: <a href=\"https://github.com/rust-lang/rust/pull/93082\">https://github.com/rust-lang/rust/pull/93082</a></p>",
        "id": 268564153,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1642609276
    }
]