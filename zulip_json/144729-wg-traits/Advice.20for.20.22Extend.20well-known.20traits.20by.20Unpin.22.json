[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>,<br>\nIt seems like chalk has incomplete support for auto traits, and thats why <a href=\"https://github.com/rust-lang/chalk/pull/603\">https://github.com/rust-lang/chalk/pull/603</a> is insufficient.<br>\nIn particular, given some <code>auto trait Foo {}</code> in rustc then Slices, Arrays etc. implement Foo if the contained type implements Foo.<br>\nThis is not yet implement in chalk apparently.<br>\nSo I'm toying with extending push_auto_trait_impls by implementations for Slices, Arrays, etc.</p>\n<p>Do you agree this is the right way of doing it?</p>",
        "id": 209290791,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599482175
    },
    {
        "content": "<p>just as a side note, if in the end there's no special support in Chalk needed for Unpin, then it's superfluous to even add it as a well-known trait</p>",
        "id": 209292089,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1599483049
    },
    {
        "content": "<p>uh, thats a valid point. ^^'</p>",
        "id": 209292804,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599483568
    },
    {
        "content": "<p>From the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2349-pin.md#the-unpin-auto-trait\">RFC</a>:</p>\n<blockquote>\n<p>This trait is a lang item, but only to generate negative impls for certain generators</p>\n</blockquote>\n<p>Sounds like chalk will need to handle that</p>",
        "id": 209293340,
        "sender_full_name": "detrumi",
        "timestamp": 1599483891
    },
    {
        "content": "<p>Unless every chalk integration handles that separately, but I think those impls can be generated in chalk</p>",
        "id": 209293567,
        "sender_full_name": "detrumi",
        "timestamp": 1599484049
    },
    {
        "content": "<p>Hmm, not too clear on the specifics, but maybe it'll become clearer once generators are handled in chalk (there's a <a href=\"https://github.com/rust-lang/chalk/pull/593\">WIP PR</a> for that), and we look into supporting <code>Future</code> in chalk?</p>",
        "id": 209293907,
        "sender_full_name": "detrumi",
        "timestamp": 1599484281
    },
    {
        "content": "<p>I would imagine that would happen in the desugaring for generators/async functions, so outside Chalk</p>",
        "id": 209294619,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1599484730
    },
    {
        "content": "<p>but... I don't know that well how those things work</p>",
        "id": 209295550,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1599485291
    },
    {
        "content": "<p>Yeah, auto traits not being implemented for builtin types is known. (I'm actually supposed to file an issue for that, which I haven't gotten to).</p>",
        "id": 209310301,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599494801
    },
    {
        "content": "<p>Yeah, I guess <code>Unpin</code> being <code>auto</code> means this doesn't need to be a builtin type.</p>",
        "id": 209310374,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599494878
    },
    {
        "content": "<p>I'm also not familiar with this, but I also imagine this is handled in the desugaring.</p>",
        "id": 209310473,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599494957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"335294\">@memoryleak47</span> do you instead want to PR the fix for auto traits?</p>",
        "id": 209310494,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599494987
    },
    {
        "content": "<p>yup!</p>",
        "id": 209310584,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599495026
    },
    {
        "content": "<p>I'll close the current PR then?</p>",
        "id": 209310668,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599495121
    },
    {
        "content": "<p>Hmm, I mean, you could leave it open. I would like either <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s or maybe <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span>'s thoughts on if <code>Unpin</code> needs to be builtin. Particularly since I'm not familiar with how rustc handles that.</p>",
        "id": 209312241,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599496420
    },
    {
        "content": "<p>it needs to be builtin because you cant make a negative impl of Unpin for Generator</p>",
        "id": 209315496,
        "sender_full_name": "Areredify",
        "timestamp": 1599499156
    },
    {
        "content": "<p>see <code>librustc_trait_selection::traits::select::assemble_candidates_from_auto_impls</code></p>",
        "id": 209315821,
        "sender_full_name": "Areredify",
        "timestamp": 1599499475
    },
    {
        "content": "<p>uh wait its the old one</p>",
        "id": 209315839,
        "sender_full_name": "Areredify",
        "timestamp": 1599499506
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/3e14b684dd31794e8dbe6acd7a5f132997ee0c47/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs#L373\">link</a></p>",
        "id": 209315983,
        "sender_full_name": "Areredify",
        "timestamp": 1599499676
    },
    {
        "content": "<p>at least thats the only Unpin thing I found when researching what traits chalk needs to support</p>",
        "id": 209316085,
        "sender_full_name": "Areredify",
        "timestamp": 1599499775
    },
    {
        "content": "<p>Right, so this is really a question based on how generators in chalk will work</p>",
        "id": 209316193,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599499880
    },
    {
        "content": "<p>is it? it more about the fact that you cant state facts about generator type in rust, is it not?</p>",
        "id": 209316286,
        "sender_full_name": "Areredify",
        "timestamp": 1599499973
    },
    {
        "content": "<p>Well, yes</p>",
        "id": 209316361,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599500047
    },
    {
        "content": "<p>I guess I meant to say</p>",
        "id": 209316363,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599500053
    },
    {
        "content": "<p>it's not obvious <em>why</em> we might need <code>Unpin</code> to be builtin right now</p>",
        "id": 209316378,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599500082
    },
    {
        "content": "<p>until you think about generators</p>",
        "id": 209316382,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599500088
    },
    {
        "content": "<p>specifically, we need to think about \"movable\" vs \"static\" generators</p>",
        "id": 209316402,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599500112
    },
    {
        "content": "<p>im not familiar with the code backing generators, will it be a pain to represent the generator type in chalk?</p>",
        "id": 209316484,
        "sender_full_name": "Areredify",
        "timestamp": 1599500190
    },
    {
        "content": "<p>I don't think so. <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> has  a WIP PR up</p>",
        "id": 209316500,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599500209
    },
    {
        "content": "<p>This makes me think: so, auto traits semantics and implementations for builtin types overlap a bit, in that both would cause a trait to be implemented for most builtin types. Don't know if this is meaningful, it's just something I haven't thought of before</p>",
        "id": 209316582,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599500289
    },
    {
        "content": "<p>then it won't be too hard to support unpin anyway</p>",
        "id": 209316685,
        "sender_full_name": "Areredify",
        "timestamp": 1599500431
    },
    {
        "content": "<p>Nope. Just wasn't clear (without generators) why it needs to be Unpin</p>",
        "id": 209316707,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599500472
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"335294\">@memoryleak47</span>  you can either wait for generator pr to land and finish your pr after or rebase onto the wip pr if you are really eager to work on this</p>",
        "id": 209317007,
        "sender_full_name": "Areredify",
        "timestamp": 1599500819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Advice.20for.20.22Extend.20well-known.20traits.20by.20Unpin.22/near/209316582\">said</a>:</p>\n<blockquote>\n<p>This makes me think: so, auto traits semantics and implementations for builtin types overlap a bit, in that both would cause a trait to be implemented for most builtin types. Don't know if this is meaningful, it's just something I haven't thought of before</p>\n</blockquote>\n<p>To elaborate on this a bit. Isn't a bit weird that scalars get auto traits auto-impled for them? Or maybe that's the only thing that separates it from <code>coinductive</code> (in Chalk terms). In fact, the docs <a href=\"https://doc.rust-lang.org/reference/special-types-and-traits.html\">here</a> don't even mention that scalars get an impl automatically.</p>",
        "id": 209317302,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599501222
    },
    {
        "content": "<p>depends on how you define auto traits</p>",
        "id": 209317376,
        "sender_full_name": "Areredify",
        "timestamp": 1599501300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"251766\">Areredify</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Advice.20for.20.22Extend.20well-known.20traits.20by.20Unpin.22/near/209317007\">said</a>:</p>\n<blockquote>\n<p>so <span class=\"user-mention silent\" data-user-id=\"335294\">memoryleak47</span>  you can either wait for generator pr to land and finish your pr after or rebase onto the wip pr if you are really eager to work on this</p>\n</blockquote>\n<p>I mean, I would recommend we just merge the PR once it looks good then we can update for generators when those are merged. But additionally, we do need the auto traits for builtin types done, but that's separate.</p>",
        "id": 209317401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599501345
    },
    {
        "content": "<p>if you define them as \"implemented for types all members of which implement the trait\"</p>",
        "id": 209317453,
        "sender_full_name": "Areredify",
        "timestamp": 1599501370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"251766\">Areredify</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Advice.20for.20.22Extend.20well-known.20traits.20by.20Unpin.22/near/209317376\">said</a>:</p>\n<blockquote>\n<p>depends on how you define auto traits</p>\n</blockquote>\n<p>Right, this is somewhat of a subtle point that I think is sort of \"implied\" but not well defined right now</p>",
        "id": 209317459,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599501381
    },
    {
        "content": "<p>then its not that weird, because scalars have no members</p>",
        "id": 209317465,
        "sender_full_name": "Areredify",
        "timestamp": 1599501396
    },
    {
        "content": "<p>Well, of course they have no members, they're <em>scalars</em></p>",
        "id": 209317494,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599501445
    },
    {
        "content": "<p>thats why they get a freebie :)</p>",
        "id": 209317515,
        "sender_full_name": "Areredify",
        "timestamp": 1599501472
    },
    {
        "content": "<p>Arguably, we <em>shouldn't</em> auto impl auto traits for scalars for the same reason we don't auto impl auto traits for foreign types</p>",
        "id": 209317521,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599501477
    },
    {
        "content": "<p>I don't think this is semantics that can be changed. But it seems a little illogical</p>",
        "id": 209317734,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599501642
    },
    {
        "content": "<p>we dont know what data is inside a foreign type</p>",
        "id": 209317881,
        "sender_full_name": "Areredify",
        "timestamp": 1599501799
    },
    {
        "content": "<p>so we cant say if it contains data of a type for which the auto trait is not implemented</p>",
        "id": 209317900,
        "sender_full_name": "Areredify",
        "timestamp": 1599501842
    },
    {
        "content": "<p><code>bool</code> gets an auto impl for the same reason <code>struct S {}</code> gets an auto impl - because nobody wrote a negative impl for them</p>",
        "id": 209317991,
        "sender_full_name": "Areredify",
        "timestamp": 1599501939
    },
    {
        "content": "<p>I 100% understand this point. I'm mostly just playing devil's advocate here</p>",
        "id": 209318170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599502138
    },
    {
        "content": "<p>(the docs I linked <em>should</em> be updated to also mentions scalars auto impl them)</p>",
        "id": 209318196,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599502188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Advice.20for.20.22Extend.20well-known.20traits.20by.20Unpin.22/near/209318170\">said</a>:</p>\n<blockquote>\n<p>I 100% understand this point. I'm mostly just playing devil's advocate here</p>\n</blockquote>\n<p>yeah I understand, scalars dont really fit in the \"implemented for types all members of which implement the trait\" thing</p>",
        "id": 209318365,
        "sender_full_name": "Areredify",
        "timestamp": 1599502384
    },
    {
        "content": "<p>but I convinced myself with the \"no negative impls\" argument instead</p>",
        "id": 209318377,
        "sender_full_name": "Areredify",
        "timestamp": 1599502410
    },
    {
        "content": "<p>No, I don't think that's quite right. <code>bool</code> and <code>struct S {}</code> both have as a member _the empty set_.</p>",
        "id": 209332259,
        "sender_full_name": "Jubilee",
        "timestamp": 1599519145
    },
    {
        "content": "<blockquote>\n<p>For any property P:<br>\n    For every element of ∅, the property P holds (vacuous truth).<br>\n    There is no element of ∅ for which the property P holds.</p>\n<p>Conversely, if for some property P and some set V, the following two statements hold:<br>\n    For every element of V the property P holds<br>\n    There is no element of V for which the property P holds</p>\n<p>then V = ∅. </p>\n</blockquote>\n<p>That is the real upholding logic here, no? Either we are taking the empty set as a member and so there is nothing that doesn't hold so of course we can make vacuously true assertions about it, or we are describing a scalar value itself as its own set and any particular value is a member of that set and the implementation in the first place is an assertion over all members of that set. Please feel free to correct me if I am wrong here! But I am pretty sure that this is relatively consistent for auto trait implementations over scalars.</p>\n<p>( I mean the real reason is that it is relatively simple to handle most scalar values BUT )</p>",
        "id": 209333103,
        "sender_full_name": "Jubilee",
        "timestamp": 1599520181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Advice.20for.20.22Extend.20well-known.20traits.20by.20Unpin.22/near/209317401\">said</a>:</p>\n<blockquote>\n<p>I mean, I would recommend we just merge the PR once it looks good then we can update for generators when those are merged. But additionally, we do need the auto traits for builtin types done, but that's separate.</p>\n</blockquote>\n<p>I agree. Can you re-review the PR? I think the book is actually correct already.</p>",
        "id": 209556993,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599679826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 209557079,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599679885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"335294\">@memoryleak47</span> seems like there was a problem with the rebase?</p>",
        "id": 209565543,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599683719
    },
    {
        "content": "<p>But yeah, didn't realize, but book <em>is</em> correct</p>",
        "id": 209565657,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599683771
    },
    {
        "content": "<p>Irgh.. you're right.</p>",
        "id": 209565668,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599683777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>  ready now!</p>",
        "id": 209567977,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599685186
    },
    {
        "content": "<p>r+ed</p>",
        "id": 209568426,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599685418
    },
    {
        "content": "<p>Were you going to take a stab at the auto traits for builtin types?</p>",
        "id": 209568447,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599685433
    },
    {
        "content": "<p>Thats the next thing I'll be doing!</p>",
        "id": 209568520,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599685464
    },
    {
        "content": "<p>Just wanted this PR to get through first</p>",
        "id": 209568535,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599685478
    },
    {
        "content": "<p>Makes sense :)</p>",
        "id": 209568727,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599685571
    }
]