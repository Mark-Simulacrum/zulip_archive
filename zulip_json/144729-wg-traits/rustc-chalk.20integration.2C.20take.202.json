[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> and I were talking about how to improve the rustc-chalk integration</p>",
        "id": 181043120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102398
    },
    {
        "content": "<p>And we decided to continue here :)</p>",
        "id": 181043172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102405
    },
    {
        "content": "<p>Currently rustc only uses chalk-engine</p>",
        "id": 181043229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102454
    },
    {
        "content": "<p>and it duplicates all the lowering and other logic</p>",
        "id": 181043247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102459
    },
    {
        "content": "<p>I think what we want instead is that rustc uses chalk-solve</p>",
        "id": 181043315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102502
    },
    {
        "content": "<p>(Like rust-analyzer does)</p>",
        "id": 181043326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102506
    },
    {
        "content": "<p>This will mean that we have to implement <a href=\"http://rust-lang.github.io/chalk/chalk_solve/trait.RustIrDatabase.html\" target=\"_blank\" title=\"http://rust-lang.github.io/chalk/chalk_solve/trait.RustIrDatabase.html\">the <code>RustIrDatabase</code> trait</a></p>",
        "id": 181043340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102515
    },
    {
        "content": "<p>We're not going to be be able to do that yet without some work :)</p>",
        "id": 181043433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102574
    },
    {
        "content": "<p>I was hoping to kind of brainstorm out a bit what this work would be</p>",
        "id": 181043441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102581
    },
    {
        "content": "<p>just made a <a href=\"https://hackmd.io/l7j-H0PeS2SCXTdpp-TQpA\" target=\"_blank\" title=\"https://hackmd.io/l7j-H0PeS2SCXTdpp-TQpA\">hackmd document</a> to keep notes</p>",
        "id": 181043489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102619
    },
    {
        "content": "<p>anyway the real challenge then is going to be created little bits of chalk-ir and chalk-rust-ir from Rust's HIR/ty values</p>",
        "id": 181043591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102675
    },
    {
        "content": "<p>I expect to use the <a href=\"http://rust-lang.github.io/chalk/chalk_ir/family/trait.TypeFamily.html\" target=\"_blank\" title=\"http://rust-lang.github.io/chalk/chalk_ir/family/trait.TypeFamily.html\"><code>TypeFamily</code></a> traits (extended with some more stuff...) to try and make that convenient and efficient</p>",
        "id": 181043627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102696
    },
    {
        "content": "<p>to start, I think we need to add the \"ids\"</p>",
        "id": 181043693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102745
    },
    {
        "content": "<p>e.g., instead of <code>TypeId</code> being hard-coded to be an integer (wrapped around <code>RawId</code>)</p>",
        "id": 181043753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102773
    },
    {
        "content": "<p>this should probably indirect through <code>TypeFamily</code></p>",
        "id": 181043763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102781
    },
    {
        "content": "<p>that would allow us to use <code>DefId</code> in the compiler</p>",
        "id": 181043769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102788
    },
    {
        "content": "<p>(it's interesting to note that I think Chalk can have a richer notion of ids, all of which map to <code>DefId</code> under the hood)</p>",
        "id": 181043811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102831
    },
    {
        "content": "<p>not sure if that'll cause any difficulty, depends if we currently match on the <code>TypeKindId</code> enum for anything besides debug</p>",
        "id": 181043856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102866
    },
    {
        "content": "<p>(answer: we do, a bit, so we should add some methods around that)</p>",
        "id": 181043993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102941
    },
    {
        "content": "<p>for example, we have code like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"c1\">// If this is a `Foo: Send` (or any auto-trait), then add</span>\n<span class=\"w\">            </span><span class=\"c1\">// the automatic impls for `Foo`.</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">trait_datum</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">trait_datum</span><span class=\"p\">(</span><span class=\"n\">trait_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">trait_datum</span><span class=\"p\">.</span><span class=\"n\">is_auto_trait</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">trait_ref</span><span class=\"p\">.</span><span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">assert_ty_ref</span><span class=\"p\">().</span><span class=\"n\">data</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">TyData</span>::<span class=\"n\">Apply</span><span class=\"p\">(</span><span class=\"n\">apply</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">TypeName</span>::<span class=\"n\">TypeKindId</span><span class=\"p\">(</span><span class=\"n\">TypeKindId</span>::<span class=\"n\">StructId</span><span class=\"p\">(</span><span class=\"n\">struct_id</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">push_auto_trait_impls</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trait_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">struct_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">TyData</span>::<span class=\"n\">InferenceVar</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;auto-traits should flounder if nothing is known&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181044028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102960
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>, still here? :)</p>",
        "id": 181044183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103075
    },
    {
        "content": "<p>yep</p>",
        "id": 181044195,
        "sender_full_name": "tmandry",
        "timestamp": 1574103082
    },
    {
        "content": "<p>apart from the above, I think there are some other mappings we want</p>",
        "id": 181044205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103097
    },
    {
        "content": "<p>e.g.</p>",
        "id": 181044209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103098
    },
    {
        "content": "<p><code>Parameter&lt;TF&gt;</code> =&gt; <code>Kind&lt;'tcx&gt;</code> in rustc</p>",
        "id": 181044214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103106
    },
    {
        "content": "<p>similarly, anything with an embedded <code>Vec</code> or <code>Box</code> seems like trouble</p>",
        "id": 181044225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103116
    },
    {
        "content": "<p>I am debating just a bit now -- I guess I take that (mildly) back, it might be that it's ok to make vectors for now, and then it's just perf optimization to improve it</p>",
        "id": 181044311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103159
    },
    {
        "content": "<p>well I do think we really want to try and map <code>Parameter&lt;'tcx&gt;</code> to <code>Kind&lt;'tcx&gt;</code>,</p>",
        "id": 181044344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103191
    },
    {
        "content": "<p>and see if we can (therefore) map a vector of substitutions to <code>Substs&lt;'tcx&gt;</code></p>",
        "id": 181044361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103203
    },
    {
        "content": "<p>the reason is</p>",
        "id": 181044363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103204
    },
    {
        "content": "<p>this is what chalk gives <em>back</em> as answers to queries</p>",
        "id": 181044387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103226
    },
    {
        "content": "<p>I'd like it if we (basically) had some (potentially expensive) function that generates \"data\" from a <code>Ty&lt;'tcx&gt;</code></p>",
        "id": 181044446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103248
    },
    {
        "content": "<p>for those times that we call <code>ty.data()</code></p>",
        "id": 181044465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103261
    },
    {
        "content": "<p>this is basically doing the translation from rustc's representation to chalk's, and we can make that gradually cheaper</p>",
        "id": 181044475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103271
    },
    {
        "content": "<p>but ideally we wouldn't need such a translation on the way back</p>",
        "id": 181044485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103284
    },
    {
        "content": "<p>(along those lines, I see one potential problem with the existing type signatures...)</p>",
        "id": 181044567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103352
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">TF</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">TyData</span><span class=\"o\">&lt;</span><span class=\"n\">TF</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181044622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103374
    },
    {
        "content": "<p>if, in rustc, we are generating that <code>TyData</code> on the fly...</p>",
        "id": 181044636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103383
    },
    {
        "content": "<p>it's going to be hard to return borrowed data</p>",
        "id": 181044655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103397
    },
    {
        "content": "<p>well</p>",
        "id": 181044660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103398
    },
    {
        "content": "<p>I guess we can allocate it from the arena</p>",
        "id": 181044664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103402
    },
    {
        "content": "<p>i.e., generate it lazilly (and only once)</p>",
        "id": 181044672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103412
    },
    {
        "content": "<p>I think I remember now that is what I had in mind</p>",
        "id": 181044708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103441
    },
    {
        "content": "<p>ok, looking a bit deeper</p>",
        "id": 181044754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103481
    },
    {
        "content": "<p>obviously the types in rustc have a <em>lot</em> more variants than their chalk counterparts</p>",
        "id": 181044811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103499
    },
    {
        "content": "<p>but most of them are effectively type names of various kinds</p>",
        "id": 181044827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103510
    },
    {
        "content": "<blockquote>\n<p>but ideally we wouldn't need such a translation on the way back</p>\n</blockquote>\n<p>just making sure I follow.. in the converted type, we can just store a <code>Ty&lt;'tcx&gt;</code>that points back to the rustc type, right?</p>",
        "id": 181044926,
        "sender_full_name": "tmandry",
        "timestamp": 1574103578
    },
    {
        "content": "<p>assuming everything's stored in an arena with the same lifetime, it should work</p>",
        "id": 181045269,
        "sender_full_name": "tmandry",
        "timestamp": 1574103808
    },
    {
        "content": "<p>Sorry, mm,</p>",
        "id": 181045410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103893
    },
    {
        "content": "<p>what do you mean by the \"converted type\"?</p>",
        "id": 181045438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574103905
    },
    {
        "content": "<p>well, not sure =) <code>Ty</code> is what I was thinking of</p>",
        "id": 181045611,
        "sender_full_name": "tmandry",
        "timestamp": 1574104011
    },
    {
        "content": "<p>but we just have to implement things like <code>ty_data()</code></p>",
        "id": 181045667,
        "sender_full_name": "tmandry",
        "timestamp": 1574104052
    },
    {
        "content": "<p>and we can pass <code>Ty&lt;'tcx&gt;</code> straight through chalk?</p>",
        "id": 181045732,
        "sender_full_name": "tmandry",
        "timestamp": 1574104083
    },
    {
        "content": "<p>yes so</p>",
        "id": 181045743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104088
    },
    {
        "content": "<p>if you implemented <code>ty_data</code></p>",
        "id": 181045746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104093
    },
    {
        "content": "<p>you convert one type to chalk's representation -- \"up to\" embedded types</p>",
        "id": 181045757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104102
    },
    {
        "content": "<p>i.e., if you have <code>Vec&lt;u32&gt;</code>, that is two <code>Ty&lt;'tcx&gt;</code> values</p>",
        "id": 181045772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104115
    },
    {
        "content": "<p>that is, the <code>Vec</code> has a list (in rustc) of substitutions <code>Substs&lt;'tcx&gt;</code></p>",
        "id": 181045799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104147
    },
    {
        "content": "<p>in chalk (today) we have a <code>Vec&lt;Parameter&lt;TF&gt;&gt;</code>, and if you dig in a bit more, you'll see that <code>Parameter&lt;TF&gt;</code> embeds a <code>Ty&lt;TF&gt;</code> which is a newtype of  <code>TF::InternedTy</code></p>",
        "id": 181045830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104175
    },
    {
        "content": "<p>so the thing that rustc would have to create (if we made no further changes from what we have today) when you invoke <code>ty_data</code> on the <code>Vec&lt;u32&gt;</code> type would be these structures, and it would embed the <code>Ty&lt;'tcx&gt;</code> representing <code>u32</code></p>",
        "id": 181045929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104220
    },
    {
        "content": "<p>not sure if that is making sense</p>",
        "id": 181045937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104228
    },
    {
        "content": "<p>basically a <code>Ty&lt;TF&gt;</code> maps directly to an interned type in rustc (a <code>Ty&lt;'tcx&gt;</code>)</p>",
        "id": 181045963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104251
    },
    {
        "content": "<p>yeah, makes sense now</p>",
        "id": 181045981,
        "sender_full_name": "tmandry",
        "timestamp": 1574104265
    },
    {
        "content": "<p>we don't really <em>have</em> to make any further changes I don't thnk</p>",
        "id": 181045997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104275
    },
    {
        "content": "<p>right now chalk gives back (as its answers) a <code>Vec&lt;Parameter&lt;TF&gt;&gt;</code>, and we could construct a <code>Substs&lt;'tcx&gt;</code> from that, with some work</p>",
        "id": 181046017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104290
    },
    {
        "content": "<p>but it seems like it'd be nicer if pushed that <code>Vec</code> into the type family embedding</p>",
        "id": 181046042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104305
    },
    {
        "content": "<p>that said, looking a bit more, I think something we <em>do</em> have to do is to make <code>TypeName</code> generic</p>",
        "id": 181046124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104334
    },
    {
        "content": "<p>I'm actually a bit torn on this</p>",
        "id": 181046150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104360
    },
    {
        "content": "<p>how this should be handled</p>",
        "id": 181046158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104366
    },
    {
        "content": "<p>the other is that <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/enum.TyKind.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/enum.TyKind.html\"><code>TyKind</code> in rustc has a lot of variants</a></p>",
        "id": 181046199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104387
    },
    {
        "content": "<p>ah, interesting</p>",
        "id": 181046228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104411
    },
    {
        "content": "<p>yeah it's worth just looking at those and seeing how we would convert them to chalk's notion of <a href=\"http://rust-lang.github.io/chalk/chalk_ir/enum.TyData.html\" target=\"_blank\" title=\"http://rust-lang.github.io/chalk/chalk_ir/enum.TyData.html\"><code>TyData</code></a></p>",
        "id": 181046301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104446
    },
    {
        "content": "<p>seems like many of them would end up as <code>ApplicationTy</code></p>",
        "id": 181046355,
        "sender_full_name": "tmandry",
        "timestamp": 1574104497
    },
    {
        "content": "<p>yes the vast majority</p>",
        "id": 181046476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104573
    },
    {
        "content": "<p>the interesting one I hadn't thought about is GeneratorWitness</p>",
        "id": 181046483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104581
    },
    {
        "content": "<p>it is a kind of quantified type</p>",
        "id": 181046492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104589
    },
    {
        "content": "<blockquote>\n<p>seems like many of them would end up as <code>ApplicationTy</code></p>\n</blockquote>\n<p>anyway this is exactly why I was saying that we probably want <code>TypeName</code> to be generic or something</p>",
        "id": 181046499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104602
    },
    {
        "content": "<p>except that, <em>eventually</em>, I'd like that \"list\" of types to move from rustc into a (shared) type library</p>",
        "id": 181046515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104615
    },
    {
        "content": "<p>that is used by chalk and a (shared) type-checker and (hence) rustc + rust-analyzer</p>",
        "id": 181046532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104624
    },
    {
        "content": "<p>that <em>type-checker</em> probably cares more about these distinctions</p>",
        "id": 181046544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104634
    },
    {
        "content": "<p>in other words, we might want to sort of hard-code the list</p>",
        "id": 181046565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104651
    },
    {
        "content": "<p>into chalk's type-name</p>",
        "id": 181046578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104662
    },
    {
        "content": "<p>but I'm not sure yet</p>",
        "id": 181046581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104668
    },
    {
        "content": "<p>in terms of other interesting things...</p>",
        "id": 181046636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104687
    },
    {
        "content": "<p>it's worth thinking about refactorings we can do in rusc to make life a touch easier</p>",
        "id": 181046650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> already did some by changing how Closure/Generator work (they take a plain <code>SubstsRef&lt;'tcx&gt;</code>)</p>",
        "id": 181046672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104718
    },
    {
        "content": "<p>the <code>GeneratorWitness</code> is sort of a pain</p>",
        "id": 181046701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104742
    },
    {
        "content": "<p>although it's really just an <code>exists&lt;'a&gt; { .. .}</code> sort of type</p>",
        "id": 181046735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104769
    },
    {
        "content": "<p>we maybe want to add this to chalk</p>",
        "id": 181046831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104806
    },
    {
        "content": "<p>the other thing i'm pondering is -- types like <code>fn()</code> in rustc are one type</p>",
        "id": 181046842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104815
    },
    {
        "content": "<p>but in chalk they are two</p>",
        "id": 181046844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104818
    },
    {
        "content": "<p>a <code>ForAll</code> paired with an application</p>",
        "id": 181046865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104827
    },
    {
        "content": "<p>How does that matter?</p>",
        "id": 181046968,
        "sender_full_name": "detrumi",
        "timestamp": 1574104903
    },
    {
        "content": "<p>well</p>",
        "id": 181046975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104910
    },
    {
        "content": "<p>right now every <code>Ty&lt;TF&gt;</code> (in chalk) and <code>Ty&lt;'tcx&gt;</code> (in rustc) have to have a 1-to-1 correspondence</p>",
        "id": 181047039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104933
    },
    {
        "content": "<p>that said</p>",
        "id": 181047053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104943
    },
    {
        "content": "<p>I think we should just modify chalk a bit here</p>",
        "id": 181047085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104972
    },
    {
        "content": "<p>instead of having <code>QuantifiedTy</code> wrap exactly one type</p>",
        "id": 181047098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574104983
    },
    {
        "content": "<p>it should be more like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">QuantifiedType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">name</span>: <span class=\"nc\">QuantifiedTypeName</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">binders</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// number of bound regions</span>\n<span class=\"w\">    </span><span class=\"n\">parameters</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Parameter</span><span class=\"o\">&lt;</span><span class=\"n\">TF</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181047156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105035
    },
    {
        "content": "<p>really <code>name</code> and <code>binders</code> kind of overlap and could be merged</p>",
        "id": 181047210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105046
    },
    {
        "content": "<p>the <code>name</code> here would encode the various bits of information from the function signature</p>",
        "id": 181047251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105083
    },
    {
        "content": "<p>e.g., ABI etc</p>",
        "id": 181047258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105087
    },
    {
        "content": "<p>and the <code>parameters</code> listing would be the input/output types</p>",
        "id": 181047272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105096
    },
    {
        "content": "<p>it's a sort of genearlization of chalk's type today but same basic idea -- from POV of chalk, two such types are equal if (a) their names are equal and (b) all the parameters are equal, after instantiating the binders appropriately</p>",
        "id": 181047322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105138
    },
    {
        "content": "<p>I'm a bit lost on the <code>fn()</code> stuff -- what the two types represent in chalk, for example</p>",
        "id": 181047449,
        "sender_full_name": "tmandry",
        "timestamp": 1574105222
    },
    {
        "content": "<p>huh yeah, why is there an application in <code>fn()</code>?</p>",
        "id": 181047510,
        "sender_full_name": "detrumi",
        "timestamp": 1574105276
    },
    {
        "content": "<p>(sorry, multiplexing a few threads)</p>",
        "id": 181047694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105399
    },
    {
        "content": "<p>so today in chalk we effectively have</p>",
        "id": 181047772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105429
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>T = forall&lt;&#39;a, ..&gt; { T }\n</pre></div>",
        "id": 181047792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105443
    },
    {
        "content": "<p>and I am (first) proposing we genearlize this to</p>",
        "id": 181047800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105448
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>T = forall&lt;&#39;a, ...&gt; { T... }\n</pre></div>",
        "id": 181047817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105457
    },
    {
        "content": "<p>i.e., you quantify over multiple types</p>",
        "id": 181047842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105472
    },
    {
        "content": "<p>and second, then to add just a bit of a name</p>",
        "id": 181047846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105475
    },
    {
        "content": "<p>why? well, basically because it's not hard to do so, and it lets us map directly to rust's types</p>",
        "id": 181047860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105493
    },
    {
        "content": "<p>rust basically doesn't have a \"generic <code>forall</code>\" type</p>",
        "id": 181047872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105513
    },
    {
        "content": "<p>it has binders that are \"connected\" to specifiy sorts of types, such as <code>fn</code> types</p>",
        "id": 181047897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105523
    },
    {
        "content": "<p>plausibly we could just change chalk's <code>QuantifiedTy</code> to <code>FnPointer</code></p>",
        "id": 181047974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105560
    },
    {
        "content": "<p>since that's really the only thing that uses it</p>",
        "id": 181047986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105569
    },
    {
        "content": "<p>that's effectively what I'm proposing but with more confusing names :)</p>",
        "id": 181048000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105580
    },
    {
        "content": "<p>I guess that's just better</p>",
        "id": 181048018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105595
    },
    {
        "content": "<p>one other thing: chalk uses debruijn indices somewhat differently from rustc</p>",
        "id": 181048060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105632
    },
    {
        "content": "<p>in rustc, a bound variable is identified by a debruijn index (that indentifies the binder) <em>and</em> an internal index (within that binder); in chalk I think we just have the latter. Not sure how much of a pain this will be to reconcile. Probably we should try to adapt one or the other.</p>",
        "id": 181048155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105687
    },
    {
        "content": "<p>one place the difference shows up is exactly <code>fn</code> types --</p>",
        "id": 181048219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105725
    },
    {
        "content": "<p>in rustc they don't have to indicate how many lifetimes they introduce</p>",
        "id": 181048230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105734
    },
    {
        "content": "<p>e.g., <code>for&lt;'a, 'b&gt; fn(&amp;'a &amp;'b u32)</code> in chalk is a <code>QuantifiedTy</code> with <code>num_binders: 2</code></p>",
        "id": 181048257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105751
    },
    {
        "content": "<p>but in rustc we don't know how many such regions are bound unless we walk the types within</p>",
        "id": 181048305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105765
    },
    {
        "content": "<p>not sure if that's good, just true</p>",
        "id": 181048350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105795
    },
    {
        "content": "<blockquote>\n<p>plausibly we could just change chalk's <code>QuantifiedTy</code> to <code>FnPointer</code></p>\n</blockquote>\n<p>does this make sense, <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> / <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> ?</p>",
        "id": 181048363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105805
    },
    {
        "content": "<p>I think so</p>",
        "id": 181048409,
        "sender_full_name": "tmandry",
        "timestamp": 1574105847
    },
    {
        "content": "<p>hmm</p>",
        "id": 181048410,
        "sender_full_name": "detrumi",
        "timestamp": 1574105848
    },
    {
        "content": "<p>ah, they're both needed to uniquely identify the type, right?</p>",
        "id": 181048440,
        "sender_full_name": "detrumi",
        "timestamp": 1574105881
    },
    {
        "content": "<p>the debruijn index and the internal index</p>",
        "id": 181048505,
        "sender_full_name": "detrumi",
        "timestamp": 1574105903
    },
    {
        "content": "<p>yes, both are needed</p>",
        "id": 181048531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105929
    },
    {
        "content": "<p>..but not in chalk?</p>",
        "id": 181048562,
        "sender_full_name": "tmandry",
        "timestamp": 1574105951
    },
    {
        "content": "<p>well in chalk we have only one set of indices</p>",
        "id": 181048572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105960
    },
    {
        "content": "<p>let me give an example</p>",
        "id": 181048574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105962
    },
    {
        "content": "<p><code>for&lt;'a, 'b&gt; fn (&amp;'a u32, &amp;'b u32)</code> in chalk is like <code>fn(&amp;^1 u32, &amp;^0 u32)</code></p>",
        "id": 181048591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105981
    },
    {
        "content": "<p>but in rustc it would be <code>fn(&amp;^0.1 u32, &amp;0.0 u32)</code></p>",
        "id": 181048602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574105996
    },
    {
        "content": "<p>where the <code>^x</code> in chalk means \"bound value with index <code>x</code>\"</p>",
        "id": 181048651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106007
    },
    {
        "content": "<p>and in rustc <code>^x.y</code> means \"the <code>y</code>th type bound in binder with index <code>x</code>\"</p>",
        "id": 181048666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106028
    },
    {
        "content": "<p>right, and the <code>num_binders</code> in chalk helps you keep track which index belongs to which binder?</p>",
        "id": 181048689,
        "sender_full_name": "tmandry",
        "timestamp": 1574106051
    },
    {
        "content": "<p>in chalk yes</p>",
        "id": 181048698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106055
    },
    {
        "content": "<p>I think there is .. maybe one or two places we take advantage of this? but with the newer clause builder it's hopefully not all that hard to convert</p>",
        "id": 181048737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106086
    },
    {
        "content": "<p>I guess I don't know, I'd have to go look</p>",
        "id": 181048750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106101
    },
    {
        "content": "<p>I do think they should agree, it will make our lives easier</p>",
        "id": 181048757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106111
    },
    {
        "content": "<p>and it seems easier to change chalk than rustc :)</p>",
        "id": 181048763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106122
    },
    {
        "content": "<p>won't it be problematic to not know how many they bind though?</p>",
        "id": 181048829,
        "sender_full_name": "detrumi",
        "timestamp": 1574106147
    },
    {
        "content": "<p>not sure</p>",
        "id": 181048916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106222
    },
    {
        "content": "<p>I mean you can always recover that information</p>",
        "id": 181048929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106232
    },
    {
        "content": "<p>by walking the type</p>",
        "id": 181048930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106234
    },
    {
        "content": "<p>I think what rustc tends to do</p>",
        "id": 181049001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106266
    },
    {
        "content": "<p>well, so I think a side-effect -- where chalk tends to have a signature like</p>",
        "id": 181049010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106277
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>fn substitute(parameters: &amp;[ Parameter ])\n</pre></div>",
        "id": 181049026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106292
    },
    {
        "content": "<p>in rustc, you instead have to have a closure that (lazilly) computes the value for a given bound thing</p>",
        "id": 181049049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106306
    },
    {
        "content": "<p>since you usually don't know how many there are in advance, and so you kind of generate the substitution as you go</p>",
        "id": 181049059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106319
    },
    {
        "content": "<p>(there is a helper for this)</p>",
        "id": 181049088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106346
    },
    {
        "content": "<p>it may be that we can interconvert, but it seems like it will be a bit tricky, and require a bit of state to do</p>",
        "id": 181049102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106361
    },
    {
        "content": "<p>basically to create a chalk type from a rustc type, you'd have to know how many items were in each enclosing binder</p>",
        "id": 181049199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106424
    },
    {
        "content": "<p>and rustc doesn't know</p>",
        "id": 181049202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106427
    },
    {
        "content": "<p>I guess the obvious final thing that chalk needs to handle to truly handle rustc is constants</p>",
        "id": 181049255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106476
    },
    {
        "content": "<p>(for array types)</p>",
        "id": 181049385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106565
    },
    {
        "content": "<p>rustc's <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.Const.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.Const.html\"><code>Const</code></a> you mean?</p>",
        "id": 181049500,
        "sender_full_name": "detrumi",
        "timestamp": 1574106631
    },
    {
        "content": "<p>yes, I mean we have this type in rustc:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">Const</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181049527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106647
    },
    {
        "content": "<p>this is an application type in chalk</p>",
        "id": 181049542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106658
    },
    {
        "content": "<p>but one of the arguments is a <code>Const</code></p>",
        "id": 181049549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106661
    },
    {
        "content": "<p>this is clearly something we just have to add to chalk, a third kind (\"constants\") -- I dont' think it should be that difficult, but we'll have to experiment a bit to figure out how the interface around that should work (this is also a WIP in rustc)</p>",
        "id": 181049604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106706
    },
    {
        "content": "<p>see also <a href=\"#narrow/stream/144729-wg-traits/topic/lazy-normalization.20and.20const.20generics\" title=\"#narrow/stream/144729-wg-traits/topic/lazy-normalization.20and.20const.20generics\">this topic</a> :) -- where I owe a reply or two...</p>",
        "id": 181049618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106720
    },
    {
        "content": "<p>ok, but I think that's it</p>",
        "id": 181049684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106742
    },
    {
        "content": "<p>it's .. not trivial, but nothing seems that hard to me</p>",
        "id": 181049692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106749
    },
    {
        "content": "<p>I can probably turn the notes in <a href=\"https://hackmd.io/l7j-H0PeS2SCXTdpp-TQpA?edit\" target=\"_blank\" title=\"https://hackmd.io/l7j-H0PeS2SCXTdpp-TQpA?edit\">the hackmd</a> into concrete issues</p>",
        "id": 181049718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106774
    },
    {
        "content": "<p>though I'm a bit torn on the debruijn indices one (though some part of me wants to rip them out from everywhere in favor of \"names that never alias\")</p>",
        "id": 181049739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106813
    },
    {
        "content": "<p>we didn't look at the chalk-rust-ir adaptations that are needed but that's ok</p>",
        "id": 181049760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106833
    },
    {
        "content": "<p>I think that will be much easier because</p>",
        "id": 181049812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106848
    },
    {
        "content": "<p>there isn't the whole \"nesting\" side of things</p>",
        "id": 181049819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106857
    },
    {
        "content": "<p>i.e., you generate (say) a chalk <a href=\"http://rust-lang.github.io/chalk/chalk_rust_ir/struct.StructDatum.html\" target=\"_blank\" title=\"http://rust-lang.github.io/chalk/chalk_rust_ir/struct.StructDatum.html\">struct datum</a> from the rustc queries</p>",
        "id": 181049969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106966
    },
    {
        "content": "<p>but we never have to go back etc</p>",
        "id": 181049971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106968
    },
    {
        "content": "<p>and they don't embed other things except via def-ids</p>",
        "id": 181049977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574106974
    },
    {
        "content": "<p>Well, I have to run to something else, but that was kind of useful, hope it made sense to y'all -- any parting thoughts?</p>",
        "id": 181050046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107038
    },
    {
        "content": "<p>I guess the question is \"when/how will this work happen\"</p>",
        "id": 181050057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107049
    },
    {
        "content": "<p>I'm happy to try and create some issues, I think a lot of these refactors will be relatively simple, if grungy</p>",
        "id": 181050062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107061
    },
    {
        "content": "<p>(e.g., changing <code>QuantifiedTy</code> to <code>FnPointer</code> shouldn't be especially difficult..?)</p>",
        "id": 181050134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107094
    },
    {
        "content": "<p>was there anything else that needed to be done for fn pointers?</p>",
        "id": 181050191,
        "sender_full_name": "tmandry",
        "timestamp": 1574107141
    },
    {
        "content": "<p>I think that suffices, though we'll have to include some extra info for stuff like ABI</p>",
        "id": 181050225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107172
    },
    {
        "content": "<p>you said they're one type in rustc and two in chalk, not sure how changing the name of <code>QuantifiedTy</code> is going to change that, or if it matters</p>",
        "id": 181050234,
        "sender_full_name": "tmandry",
        "timestamp": 1574107183
    },
    {
        "content": "<p>it's not just changing the name of the type, in other words</p>",
        "id": 181050249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107196
    },
    {
        "content": "<p>it's also making it have a few extra fields and (in particular) take a <code>Vec&lt;Parameter&lt;TF&gt;&gt;</code> instead of a single <code>Ty&lt;TF&gt;</code></p>",
        "id": 181050323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107217
    },
    {
        "content": "<p>ah</p>",
        "id": 181050349,
        "sender_full_name": "tmandry",
        "timestamp": 1574107231
    },
    {
        "content": "<p>I'm still a bit torn on whether it should be called <code>ForAllApply</code> or something or <code>FnPointer</code></p>",
        "id": 181050381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107252
    },
    {
        "content": "<p>the latter seems... a lot more obvious :)</p>",
        "id": 181050385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107256
    },
    {
        "content": "<p>the only argument for the former is that <code>GeneratorWitness</code> is basically <code>ExistsApply</code></p>",
        "id": 181050406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107269
    },
    {
        "content": "<p>hmm that is kind of a decent-ish argument</p>",
        "id": 181050411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107277
    },
    {
        "content": "<p>but it's not a very strong one</p>",
        "id": 181050433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107297
    },
    {
        "content": "<p>sorry, I'm not being very clear</p>",
        "id": 181050448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107306
    },
    {
        "content": "<p>what I mean is</p>",
        "id": 181050450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107309
    },
    {
        "content": "<p>we have <code>Apply</code> types that do not introduce binders</p>",
        "id": 181050462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107314
    },
    {
        "content": "<p>we could have a <code>QuantifiedApply</code> or something that <em>does</em></p>",
        "id": 181050466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107321
    },
    {
        "content": "<p>and (depending on the <code>name</code> field) that might be a <code>fn()</code> type or it might be a generator witness</p>",
        "id": 181050531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107341
    },
    {
        "content": "<p>chalk doesn't really care either way</p>",
        "id": 181050538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107346
    },
    {
        "content": "<p>and neither do most part of the code</p>",
        "id": 181050548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107356
    },
    {
        "content": "<p>anyway it's a (relatively) minor detail</p>",
        "id": 181050556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107364
    },
    {
        "content": "<p>that is clearer, thank you :)</p>",
        "id": 181050564,
        "sender_full_name": "tmandry",
        "timestamp": 1574107373
    },
    {
        "content": "<p>Changing all <code>Apply</code>'s to <code>QuantifiedApply</code> probably is a bad option, right?</p>",
        "id": 181050566,
        "sender_full_name": "detrumi",
        "timestamp": 1574107375
    },
    {
        "content": "<p>yes, bad option</p>",
        "id": 181050574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107383
    },
    {
        "content": "<p>for one thing unifiying applied types is a lot more complex</p>",
        "id": 181050585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107394
    },
    {
        "content": "<p>basically in general the code <em>does</em> care if there are binders</p>",
        "id": 181050601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107406
    },
    {
        "content": "<p>so I think it should be a different variant</p>",
        "id": 181050606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107413
    },
    {
        "content": "<p>It feels like we're suddenly a lot closer to rustc-chalk integration, this was a very productive discussion <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 181050858,
        "sender_full_name": "detrumi",
        "timestamp": 1574107571
    },
    {
        "content": "<p>(though I suppose it was in niko's head all along)</p>",
        "id": 181050882,
        "sender_full_name": "detrumi",
        "timestamp": 1574107599
    },
    {
        "content": "<p>good to get it out</p>",
        "id": 181050927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107637
    },
    {
        "content": "<p>I'll try to take notes on the next few steps that I've been pondering after this too ...:)</p>",
        "id": 181050942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574107653
    }
]