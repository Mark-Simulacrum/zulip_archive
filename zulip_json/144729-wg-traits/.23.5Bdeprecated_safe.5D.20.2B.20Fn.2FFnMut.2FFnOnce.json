[
    {
        "content": "<p>hey, i'm popping over here are the recommendation of the lang team</p>\n<p>i have some questions about how the new <code>#[deprecated_safe]</code> (<a href=\"#narrow/stream/243200-t-lang.2Fmajor-changes/topic/Add.20.23.5Brustc_deprecated_safe.5D.20attribute.20to.20all.E2.80.A6.20lang-team.23147\">zulip stream</a>) will interact with traits (which was surprising to some that it would)</p>\n<p>this interacts with traits because now we need to allow an <code>unsafe fn</code> to become compatible with <code>Fn</code>/<code>FnMut</code>/<code>FnOnce</code> (unsoundly) as part of the backwards compatibility \"hack\"</p>\n<p>you can see some examples in my (<em>very ugly</em>) <a href=\"https://github.com/rust-lang/rust/blob/862a10960403fd414b3631c1c8ee8a8246838076/src/test/ui/deprecated-safe/deprecated-safe.rs\">current ui test</a></p>\n<p>the way i currently have this implemented is that <code>FnPointerCandidate</code> gets tainted with a new <code>is_deprecated_safe</code> bool that gets set to true when assembling an <code>FnPointerCandidate</code> from an <code>unsafe fn</code> due to the new attribute</p>\n<p>i also taint <code>BuiltinUnsizeCandidate</code> with a <code>is_deprecated_safe</code> bool when unsizing from an <code>unsafe fn</code> <code>FnDef</code> to one of the <code>Fn</code> traits</p>\n<p>i then lint when confirming a <code>FnPointerCandidate</code> or <code>BuiltinUnsizeCandidate</code> that has been tainted as coming from a deprecated safe function, with a check to make sure i don't lint twice if the tainted <code>FnPointerCandidate</code> is coming from a tainted <code>BuiltinUnsizeCandidate</code> higher up the obligation stack</p>\n<p>i'm not sure if this is a valid approach (this code is all new to me), and i also have no idea if this has implications  for other things... like chalk? i dunno <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n<p>some feedback from people \"in the know\" on traits would be great <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 276234158,
        "sender_full_name": "skippy",
        "timestamp": 1647973561
    },
    {
        "content": "<p>the reason i need to taint <code>BuiltinUnsizeCandidate</code> in addition to <code>FnPointerCandidate</code> is that <code>FnPointerCandidate</code> won't always get confirmed on every usage due to caching of a <code>BuiltinUnsizeCandidate</code> higher up in the stack, which is why i also need to check that i don't lint twice (although that \"twice\" check is currently somewhat kludgy)</p>",
        "id": 276235609,
        "sender_full_name": "skippy",
        "timestamp": 1647974142
    },
    {
        "content": "<p>my current work can also be seen here: <a href=\"https://github.com/rust-lang/rust/pull/95025\">https://github.com/rust-lang/rust/pull/95025</a></p>\n<p>warning that i've been force pushing to that a lot though to stash my working directory as i go, so i woudn't use github review comments just yet</p>",
        "id": 276237155,
        "sender_full_name": "skippy",
        "timestamp": 1647974816
    },
    {
        "content": "<p>Linting twice is fine. The actual user facing output deduplicates diagnostics. Ui tests however enable a special mode that doesn't deduplicate them.</p>",
        "id": 276240666,
        "sender_full_name": "bjorn3",
        "timestamp": 1647976416
    },
    {
        "content": "<p>ahhh, getting the ui test passing is why i added the logic to prevent duplicates, <del>is there a way to handle that in ui tests?</del> (figured it out, <code>~|</code>)</p>\n<p>i still find the <code>BuiltinUnsizeCandidate</code> check somewhat unsatisfactory since the check in <code>FnPointerCandidate</code> feels more natural, but i'm also very fussy <span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span></p>",
        "id": 276247002,
        "sender_full_name": "skippy",
        "timestamp": 1647979499
    },
    {
        "content": "<p>oh, i just double checked and i don't always end up with a <code>FnPointerCandidate</code> for every <code>BuiltinUnsizeCandidate</code>, so i think the check is actually necessary after all and it's not just caching</p>",
        "id": 276254029,
        "sender_full_name": "skippy",
        "timestamp": 1647983079
    },
    {
        "content": "<p>btw, my \"make sure i don't output duplicate lints\" check was the last piece of code that i was 100% certain wouldn't fly in production, so extra special thanks <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  for letting me remove that :)</p>",
        "id": 276261665,
        "sender_full_name": "skippy",
        "timestamp": 1647986998
    },
    {
        "content": "<p>i'm getting back to this after being away for a week and have another question</p>\n<p>one of my FIXMEs is around the fact that there are two <code>confirm_fn_pointer_candidate</code> functions, with one of them being related to \"projection\", and i'm trying to figure out if <code>#[deprecated_safe]</code> needs to support something here</p>\n<p>from what i understand, projection would apply in something like this example (which doesn't compile):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bla</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bla</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">set_var</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">std</span>::<span class=\"n\">ffi</span>::<span class=\"n\">OsString</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ffi</span>::<span class=\"n\">OsString</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is it actually possible to make something like what i've tried here that will compile? where i take a function and treat it as <code>Fn</code>/<code>FnMut</code>/<code>FnOnce</code> for the purposes of projection</p>",
        "id": 277354931,
        "sender_full_name": "skippy",
        "timestamp": 1648770709
    },
    {
        "content": "<p>i've also tried:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bla</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">ffi</span>::<span class=\"n\">OsString</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ffi</span>::<span class=\"n\">OsString</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bla</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">set_var</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but that doesn't work either:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">set_var</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">              </span><span class=\"o\">^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">type</span>\n</code></pre></div>",
        "id": 277357601,
        "sender_full_name": "skippy",
        "timestamp": 1648773267
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(type_alias_impl_trait)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ffi</span>::<span class=\"n\">OsString</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bla</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Tait</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">OsString</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OsString</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bla</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Tait</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Tait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">set_var</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=2501486ab1758e33061ae414a7597ae5\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=2501486ab1758e33061ae414a7597ae5</a></p>",
        "id": 277357823,
        "sender_full_name": "Jules Bertholet",
        "timestamp": 1648773487
    },
    {
        "content": "<p>thank you!!!!</p>\n<p>that does cause the secondary <code>project.rs</code>:<code>confirm_fn_pointer_candidate</code> function that i was curious about to get hit with my <code>#[deprecated_safe]</code> version of <code>set_var</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[deprecated_safe(since = </span><span class=\"s\">\"TBD\"</span><span class=\"cp\">, note = </span><span class=\"s\">\"reason\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">set_var</span><span class=\"o\">&lt;</span><span class=\"n\">K</span>: <span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"n\">OsStr</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"n\">OsStr</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">key</span>: <span class=\"nc\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">V</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">set_var</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bla</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Tait</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">OsString</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OsString</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bla</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Tait</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Tait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">set_var</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>interestingly my new lint already fires in this case, so i think i may be ok as is? (that's for me to explore <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span>)<br>\n<a href=\"/user_uploads/4715/nx-mqxkqBTxaYK5WxGfocciE/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/nx-mqxkqBTxaYK5WxGfocciE/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/nx-mqxkqBTxaYK5WxGfocciE/image.png\"></a></div><p>in <code>project.rs</code> there's no more <code>FnPointerCandidate</code> either, just <code>ImplSource::FnPointer</code>... which i think would always come from an <code>FnPointerCandidate</code> that i already linted about... so i think it already working may make sense</p>",
        "id": 277359080,
        "sender_full_name": "skippy",
        "timestamp": 1648774760
    }
]