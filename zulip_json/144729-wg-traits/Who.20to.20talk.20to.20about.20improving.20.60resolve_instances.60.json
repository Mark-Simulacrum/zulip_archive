[
    {
        "content": "<p>I've discovered the terrifically useful function <code>resolve_instance</code> which i'd like to use in my rustc plugin, but it has one minor issue: when the instance doesn't exist a threatening error is printed to stderr. This occurs because <code>resolve_instance</code> transitively calls <code>codegen_fulfill_obligation</code> which assumes it runs after type checking and that all instances will thus be found. </p>\n<p>I'd like to make it so <code>resolve_instance</code> doesn't print this error but instead returns a message in the error branch of the <code>Result</code>, but I'm not sure what the best approach is (I'm not familiar with this area of the compiler)</p>",
        "id": 247215241,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1627311956
    },
    {
        "content": "<p>I figured i would find the most informed people here, I'm happy to make any required changes but I'd love a little guidance on what would be the most idiomatic manner</p>",
        "id": 247215444,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1627312035
    },
    {
        "content": "<p>(ie: should I just replace <code>codegen_fulfill_obligation</code> with a version that doesn't print to stderr?)</p>",
        "id": 247215499,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1627312062
    },
    {
        "content": "<p>what <code>ParamEnv</code> are you using?</p>",
        "id": 247215785,
        "sender_full_name": "oli",
        "timestamp": 1627312198
    },
    {
        "content": "<p>Some things are less/more aggressive depending on the reveal mode of the param env</p>",
        "id": 247215917,
        "sender_full_name": "oli",
        "timestamp": 1627312246
    },
    {
        "content": "<p>I was using <code>txt.param_env</code> so I assume it’s <code>UserFacing</code></p>",
        "id": 247219747,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1627313832
    },
    {
        "content": "<p>I don’t have the code in front of me right now but I think that the error in <code>codegen_fulfill_obligation</code> isn’t conditional</p>",
        "id": 247219844,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1627313877
    },
    {
        "content": "<p>right... if it knows this is a failure for sure, it will still always error</p>",
        "id": 247224527,
        "sender_full_name": "oli",
        "timestamp": 1627315872
    },
    {
        "content": "<p>It is a failure in the context of codegen, but I’d like to use it outside that context</p>",
        "id": 247225903,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1627316529
    },
    {
        "content": "<p>In particular <code>resolve_instance</code> does a lot of work turning the result of instance selection into an <code>Instance</code></p>",
        "id": 247225975,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1627316571
    },
    {
        "content": "<p>I guess write an MCP to make it fallible?</p>",
        "id": 247226700,
        "sender_full_name": "oli",
        "timestamp": 1627316925
    },
    {
        "content": "<p>I don't see any strong reason against it, but it's an important piece of the compiler. we should at least inform everyone ahead of time that it's being changed in ways the compiler doesn't need, but that are great for driver users</p>",
        "id": 247226776,
        "sender_full_name": "oli",
        "timestamp": 1627316976
    },
    {
        "content": "<p>This might help rustdoc as well</p>",
        "id": 247228012,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627317565
    },
    {
        "content": "<p>Alright I'll write an MCP then</p>",
        "id": 247255996,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1627330650
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/compiler-team/issues/449\">https://github.com/rust-lang/compiler-team/issues/449</a> I filed an MCP two weeks ago for this issue and I've successfully implemented a version of this which works for my extension usecase</p>",
        "id": 248609515,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1628256097
    },
    {
        "content": "<p>I'd be curious for feedback on this MCP</p>",
        "id": 248609560,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1628256118
    },
    {
        "content": "<p>There's a thread dedicated for it: <a href=\"#narrow/stream/233931-xxx/topic/Make.20.60resolve_instance.60.20fallible.20compiler-team.23449\">https://rust-lang.zulipchat.com/#narrow/stream/233931-xxx/topic/Make.20.60resolve_instance.60.20fallible.20compiler-team.23449</a></p>",
        "id": 248617802,
        "sender_full_name": "Charles Lew",
        "timestamp": 1628260032
    }
]