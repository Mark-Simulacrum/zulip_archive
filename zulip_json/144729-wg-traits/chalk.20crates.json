[
    {
        "content": "<p>So I was thinking over what <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> wrote and I have a proposal for a simpler organization of the crates -- but to start, I filed <a href=\"https://github.com/rust-lang/chalk/issues/212\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/212\">https://github.com/rust-lang/chalk/issues/212</a> -- I thought <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> you might be interested in this as a \"starter refactoring\".</p>",
        "id": 163463589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555417172
    },
    {
        "content": "<p>Yeah sounds good. Coinductive traits sound a bit scary, but I see that they're documented in rustc-guide, so that helps <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 163463952,
        "sender_full_name": "detrumi",
        "timestamp": 1555417476
    },
    {
        "content": "<p>Heh, I've yet to find anyone who really claims to understand coinduction ;)</p>",
        "id": 163468348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555420946
    },
    {
        "content": "<p>heh, <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>, you're fast <a href=\"https://github.com/rust-lang/chalk/pull/213\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/213\">https://github.com/rust-lang/chalk/pull/213</a> :)</p>",
        "id": 163491412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555437391
    },
    {
        "content": "<p>I'm hoping to create some follow-up plans tonight</p>",
        "id": 163491429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555437411
    },
    {
        "content": "<p>You mentioned it would be straightforward, but I didn't expect it to be that easy</p>",
        "id": 163491778,
        "sender_full_name": "detrumi",
        "timestamp": 1555437616
    },
    {
        "content": "<p>Just a softball ;)</p>",
        "id": 163494046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555439209
    },
    {
        "content": "<p>OK, I started writing up <a href=\"https://github.com/rust-lang/chalk/issues/214\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/214\">https://github.com/rust-lang/chalk/issues/214</a> but I didn't finish</p>",
        "id": 163494623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555439622
    },
    {
        "content": "<p>will do a bit more later</p>",
        "id": 163494626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555439624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> am I correct that the <code>chalk</code> crate is actually a test harness for chalk?  Would it be a good idea to rename it to <code>chalk-tester</code>, and have the public API crate named just <code>chalk</code>?</p>",
        "id": 163494872,
        "sender_full_name": "matklad",
        "timestamp": 1555439776
    },
    {
        "content": "<p>Probably, yes</p>",
        "id": 163494909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555439798
    },
    {
        "content": "<p>Ok I finished my write-up in <a href=\"https://github.com/rust-lang/chalk/issues/214\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/214\">https://github.com/rust-lang/chalk/issues/214</a> (cc <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> -- not sure who else). I'm not sure how clear it is, though, and the final set of steps are in particular incomplete. This is because I am wondering. Maybe it makes sense, at least for now, to collapse chalk-solve and chalk-rules into one crate. This would simplify things somewhat, and might make the transition a bit easier too. At least there would be fewer crates and intermediaries.</p>\n<p>The main value I see in separating out the chalk-rules code is that we <em>might</em> be able to reuse it from rustc, with a bit more refactoring. But I'm not sure if that's a very good goal. Maybe it's better to shoot for having rustc (and chalk) share chalk-ir, so it can reuse the whole solver infrastructure, which would really be ideal (this is what I expect the RLS to do).</p>\n<p>Moreover, it might be worth collapsing them <strong>for now</strong> and then trying to tease them apart only if we later want rustc to reuse the chalk-rules code but not chalk-ir.</p>",
        "id": 163500028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555443501
    },
    {
        "content": "<p>The more I think about it, the more I think I should rewrite that, but with the perspective of merging chalk-solve and chalk-rules for now</p>",
        "id": 163501490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444549
    },
    {
        "content": "<p>I think it would make things mildly easier and we can always tease them apart again</p>",
        "id": 163501502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555444561
    },
    {
        "content": "<p>Don't really have  a lot of context here, but, <strong>if</strong> integrating with rls is far easier than with rustc, it makes sense to merge, integrate in rls, and then tease apart, <em>informed</em> by the integration experience.</p>",
        "id": 163501772,
        "sender_full_name": "matklad",
        "timestamp": 1555444745
    },
    {
        "content": "<p>/me really just wants cool completions in rust-analyzer :D</p>",
        "id": 163501801,
        "sender_full_name": "matklad",
        "timestamp": 1555444767
    },
    {
        "content": "<p>If we merge the two crates into one, I think the steps would be roughly like this:</p>\n<ul>\n<li>Merge the two crates directly, replacing <code>ChalkRulesDatabase</code> with <code>ChalkSolveDatabase</code>.</li>\n<li>Remove the <code>is_coinductive</code> method from <code>ChalkSolveDatabase</code>, since it can now be implemented directly in chalk-solve.</li>\n<li>Remove the <code>GoalSolver</code> trait -- instead, the <code>coherence/wf</code> code can take a <code>SolverChoice</code> (kind of like it used to, actually) and a <code>db: &amp;dyn ChalkSolveDatabase</code>.  It can then instantiate a solver explicitly.<ul>\n<li>we probably to keep the <code>ChalkDatabase</code> type having a <code>solve</code> method just like it does today, it just wouldn't implement <code>GoalSolver</code>, it would be an inherent method</li>\n</ul>\n</li>\n<li>Then we remove the <code>program_clauses_that_could_match</code> method and replace it with the more targeted code from rustc</li>\n</ul>",
        "id": 163509324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555450529
    },
    {
        "content": "<p>This is mildly easier than the other way because the chalk-rules code can require <code>ChalkSolveDatabase</code></p>",
        "id": 163509334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555450552
    },
    {
        "content": "<p>But I suppose it's not really all that different</p>",
        "id": 163509340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555450558
    },
    {
        "content": "<blockquote>\n<p>Coinductive traits sound a bit scary</p>\n</blockquote>\n<p>I wonder if \"coinductive trait\" is a bit of a misnomer, as there doesn't seem to be anything (co)inductive about traits at all</p>",
        "id": 163509455,
        "sender_full_name": "varkor",
        "timestamp": 1555450660
    },
    {
        "content": "<p>it's really the auto bounds that are checked corecursively</p>",
        "id": 163509515,
        "sender_full_name": "varkor",
        "timestamp": 1555450707
    },
    {
        "content": "<p>(I'm not sure where the naming came from initially, so maybe there's another reason behind it)</p>",
        "id": 163509549,
        "sender_full_name": "varkor",
        "timestamp": 1555450763
    },
    {
        "content": "<p>I confess I had not heard the term corecursive before</p>",
        "id": 163509624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555450811
    },
    {
        "content": "<p>I think there are other ways to think about auto traits, but from what I understand of co-induction, it seems like a reasonably good fit</p>",
        "id": 163509650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555450851
    },
    {
        "content": "<p>I think the terms recursion/induction are often used in very similar contexts anyway</p>",
        "id": 163509658,
        "sender_full_name": "varkor",
        "timestamp": 1555450854
    },
    {
        "content": "<p>Still, this would probably be a useful topic to discuss more deeply! (Though in a separate zulip topic, perhaps)</p>",
        "id": 163509669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555450864
    },
    {
        "content": "<p>(I think that one wouldn't call a normal trait \"inductive\", which is analogous to calling an auto trait \"coinductive\")</p>",
        "id": 163509700,
        "sender_full_name": "varkor",
        "timestamp": 1555450922
    },
    {
        "content": "<p>(but that's a tangential line of thought anyway <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> )</p>",
        "id": 163509778,
        "sender_full_name": "varkor",
        "timestamp": 1555450977
    },
    {
        "content": "<p>OK, I updated <a href=\"https://github.com/rust-lang-nursery/chalk/issues/214\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/214\">chalk#214</a> to a simpler proposal, including some implementation steps. <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> -- take a look, maybe you want to take that on?</p>",
        "id": 163510381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555451526
    },
    {
        "content": "<p>Gotta run for the time being</p>",
        "id": 163510383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555451531
    },
    {
        "content": "<p>For implementing <code>is_coinductive</code>directly in <code>chalk-solve</code> (assuming you mean <code>is_coinductive_trait</code>), would that become a method on <code>Program</code> then?</p>",
        "id": 163533275,
        "sender_full_name": "detrumi",
        "timestamp": 1555479719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> ah, yeah, I wasn't very specific about that. It should not be a method on <code>Program</code>, as chalk-solve has no access to <code>Program</code>. Rather, we would modify <a href=\"https://github.com/rust-lang/chalk/blob/eb1ed91c944b8e4f12b36299b3692b357724f596/chalk-solve/src/coinductive_goal.rs#L20\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/eb1ed91c944b8e4f12b36299b3692b357724f596/chalk-solve/src/coinductive_goal.rs#L20\">this call here</a> and inline the definition</p>",
        "id": 163544869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555493194
    },
    {
        "content": "<p>But inlining will also call <code>db.program_ir()</code>to get the <code>Program</code>, right?</p>",
        "id": 163545079,
        "sender_full_name": "detrumi",
        "timestamp": 1555493369
    },
    {
        "content": "<p>No</p>",
        "id": 163545313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555493537
    },
    {
        "content": "<p>it should just call <code>db.trait_datum()</code></p>",
        "id": 163545317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555493547
    },
    {
        "content": "<p>since <code>db</code> will now implement <code>RustIrSource</code></p>",
        "id": 163545323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555493553
    },
    {
        "content": "<p>Ah, of course</p>",
        "id": 163545388,
        "sender_full_name": "detrumi",
        "timestamp": 1555493637
    },
    {
        "content": "<p>Looking into rustc's <code>ChalkInferenceContext::program_clauses_impl</code> , I can see that <code>FromEnv</code> goals might be tricky, as they come from the environment</p>",
        "id": 163686120,
        "sender_full_name": "detrumi",
        "timestamp": 1555618011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> yes, but we should have the info we need</p>",
        "id": 163687692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555619118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> note that I had intended for that bit to be a separate PR</p>",
        "id": 163687707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555619128
    },
    {
        "content": "<p>though I may not have made that very clear :)</p>",
        "id": 163687716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555619132
    },
    {
        "content": "<p>i.e., I'd rather land the other changes and leave that one on its own</p>",
        "id": 163687726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555619145
    },
    {
        "content": "<p>as it's more complex</p>",
        "id": 163687728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555619147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> left a <a href=\"https://github.com/rust-lang/chalk/pull/215#discussion_r277009973\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/215#discussion_r277009973\">tiny nit</a>, but other than that, I think this PR is ready to land, yeah?</p>",
        "id": 163741488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555686536
    },
    {
        "content": "<p>Yes, should be ready to go!</p>",
        "id": 163744244,
        "sender_full_name": "detrumi",
        "timestamp": 1555689336
    },
    {
        "content": "<blockquote>\n<p>Looking into rustc's <code>ChalkInferenceContext::program_clauses_impl</code> , I can see that <code>FromEnv</code> goals might be tricky, as they come from the environment</p>\n</blockquote>\n<p>Do you feel like you understand what is going on here, <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>?</p>",
        "id": 163756214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555700038
    },
    {
        "content": "<p>If it would be helpful, I think either <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> or I could provide more details</p>",
        "id": 163756266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555700052
    },
    {
        "content": "<p>PS, I merged your PR, very nice work.</p>",
        "id": 163756279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555700065
    },
    {
        "content": "<p>(Also, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, I'm assuming you don't object to the simplified crate hierarchy I proposed)</p>",
        "id": 163757836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> no objection apart from thinking it is a good thing</p>",
        "id": 163758414,
        "sender_full_name": "scalexm",
        "timestamp": 1555701722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Well, I understand what these functions are doing at a high level, and it's not too difficult to port the big match on the goal. But for some of the details it feels more like guessing than really understanding it</p>",
        "id": 163758477,
        "sender_full_name": "detrumi",
        "timestamp": 1555701754
    },
    {
        "content": "<p>as I recall, we were half-guessing when we wrote it ;)</p>",
        "id": 163758531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701830
    },
    {
        "content": "<p>Like, I have no idea what the clause categories are in the rustc code, or what role the WellFormed checks play</p>",
        "id": 163758534,
        "sender_full_name": "detrumi",
        "timestamp": 1555701836
    },
    {
        "content": "<p>I think it's simple enough except for the environment case</p>",
        "id": 163758535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701836
    },
    {
        "content": "<p>This is tied in with \"implied bounds\", I'm not sure if that's a phrase you're familiar with?</p>",
        "id": 163758583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701853
    },
    {
        "content": "<p>I am now <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> yeah that sounds logical, doesn't surprise me that there's some bounds that aren't explicitly stated</p>",
        "id": 163758721,
        "sender_full_name": "detrumi",
        "timestamp": 1555702009
    },
    {
        "content": "<blockquote>\n<p>as I recall, we were half-guessing when we wrote it ;)</p>\n</blockquote>\n<p>I'm often translating the rustc code just by looking at the types and seeing where I can plug in things, but maybe that's good enough in this case</p>",
        "id": 163758842,
        "sender_full_name": "detrumi",
        "timestamp": 1555702116
    },
    {
        "content": "<p>the idea is something like this though</p>",
        "id": 163758915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702198
    },
    {
        "content": "<p>One thing that's also not clear yet is where this code will end up in Chalk, at the moment I'm still working in the <code>program_clauses_that_could_match</code> function, and just not using <code>self.environment()</code></p>",
        "id": 163758965,
        "sender_full_name": "detrumi",
        "timestamp": 1555702207
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span>: <span class=\"nc\">Baz</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163758970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702209
    },
    {
        "content": "<p>if you know have <code>where T: Foo</code>, you also know that <code>T: Bar</code> (and <code>T: Baz</code>)</p>",
        "id": 163758978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702223
    },
    {
        "content": "<p>so the loop is kind of elaborating those things</p>",
        "id": 163758981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702228
    },
    {
        "content": "<p>I don't remember <em>precisely</em> but that's the general context</p>",
        "id": 163758998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702256
    },
    {
        "content": "<p>what loop are we talking about?</p>",
        "id": 163759002,
        "sender_full_name": "detrumi",
        "timestamp": 1555702262
    },
    {
        "content": "<p>heh, good question. The last time I went looking for it I remember it took me a while to find it.</p>",
        "id": 163759030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702286
    },
    {
        "content": "<blockquote>\n<p>One thing that's also not clear yet is where this code will end up in Chalk, at the moment I'm still working in the <code>program_clauses_that_could_match</code> function, and just not using <code>self.environment()</code></p>\n</blockquote>\n<p>this seems like a good way to start</p>",
        "id": 163759144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702363
    },
    {
        "content": "<p>Haven't looked yet, but the point is that there's a place where more clauses are added to the environment, right?</p>",
        "id": 163759155,
        "sender_full_name": "detrumi",
        "timestamp": 1555702374
    },
    {
        "content": "<blockquote>\n<p>heh, good question. The last time I went looking for it I remember it took me a while to find it.</p>\n</blockquote>\n<p>ok so the <em>main code</em> is here, <a href=\"https://github.com/rust-lang/rust/blob/a2bbf7debaab60be33bd8008a71bca69576945a0/src/librustc_traits/chalk_context/program_clauses/mod.rs#L52-L56\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a2bbf7debaab60be33bd8008a71bca69576945a0/src/librustc_traits/chalk_context/program_clauses/mod.rs#L52-L56\">the <code>program_clauses_impl</code> fn</a></p>",
        "id": 163759254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702457
    },
    {
        "content": "<p>however, it includes an <a href=\"https://github.com/rust-lang/rust/blob/a2bbf7debaab60be33bd8008a71bca69576945a0/src/librustc_traits/chalk_context/program_clauses/mod.rs#L302\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a2bbf7debaab60be33bd8008a71bca69576945a0/src/librustc_traits/chalk_context/program_clauses/mod.rs#L302\">innocuous looking line at the end</a></p>",
        "id": 163759255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702463
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">env_clauses</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">program_clauses_for_env</span><span class=\"p\">(</span><span class=\"n\">canonical_environment</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163759263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702489
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/a2bbf7debaab60be33bd8008a71bca69576945a0/src/librustc_traits/lowering/environment.rs#L130-L133\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a2bbf7debaab60be33bd8008a71bca69576945a0/src/librustc_traits/lowering/environment.rs#L130-L133\">that function is here</a></p>",
        "id": 163759303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702524
    },
    {
        "content": "<p>Ah, I see a <code>while !last_round.is_empty()</code> loop with a visitor</p>",
        "id": 163759304,
        "sender_full_name": "detrumi",
        "timestamp": 1555702525
    },
    {
        "content": "<p>Yes.</p>",
        "id": 163759318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702537
    },
    {
        "content": "<p>As an aside, we really should have written more docs on these functions :)</p>",
        "id": 163759319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702543
    },
    {
        "content": "<p>but <a href=\"https://github.com/rust-lang/rust/blob/a2bbf7debaab60be33bd8008a71bca69576945a0/src/librustc_traits/lowering/environment.rs#L90-L102\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a2bbf7debaab60be33bd8008a71bca69576945a0/src/librustc_traits/lowering/environment.rs#L90-L102\">this is an example of the code I was talking about above</a></p>",
        "id": 163759383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702580
    },
    {
        "content": "<p>Well, the doc is basically <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and I :p</p>",
        "id": 163759395,
        "sender_full_name": "scalexm",
        "timestamp": 1555702600
    },
    {
        "content": "<p>i.e., we look in the environment --- if we see <code>FromEnv(T: Foo)</code>, that means there is an in-scope where clause for <code>T: Foo</code>. In that case, we fetch the definition of <code>Foo</code> and add some of its clauses in there</p>",
        "id": 163759399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702607
    },
    {
        "content": "<p>so in the next round we would find <code>FromEnv(T: Bar)</code> in the list, which would cause us to cover <code>Baz</code></p>",
        "id": 163759413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702620
    },
    {
        "content": "<p>and so forth</p>",
        "id": 163759418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702623
    },
    {
        "content": "<blockquote>\n<p>Well, the doc is basically <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> and I :p</p>\n</blockquote>\n<p>Can I read you like a book, too?</p>",
        "id": 163759424,
        "sender_full_name": "detrumi",
        "timestamp": 1555702624
    },
    {
        "content": "<p>there can be cycles here so we run until a fixed point</p>",
        "id": 163759439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702635
    },
    {
        "content": "<p>Ah ok, that's actually not too bad</p>",
        "id": 163759528,
        "sender_full_name": "detrumi",
        "timestamp": 1555702687
    },
    {
        "content": "<p>At least, the complexity of it. Getting the ordering to be similar might be difficult</p>",
        "id": 163759593,
        "sender_full_name": "detrumi",
        "timestamp": 1555702760
    },
    {
        "content": "<p>The ordering?</p>",
        "id": 163759620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702784
    },
    {
        "content": "<p>It shouldn't really matter what order</p>",
        "id": 163759623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702789
    },
    {
        "content": "<p>We are returning a vec, but the order of things in the vec are not that important</p>",
        "id": 163759695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702815
    },
    {
        "content": "<p>I meant visiting order, or doesn't that make a difference?</p>",
        "id": 163759710,
        "sender_full_name": "detrumi",
        "timestamp": 1555702834
    },
    {
        "content": "<p>I don't think that should matter</p>",
        "id": 163759755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702883
    },
    {
        "content": "<p>Ok, never mind then</p>",
        "id": 163759770,
        "sender_full_name": "detrumi",
        "timestamp": 1555702905
    },
    {
        "content": "<p>Thanks for the pointers, this gave me some confidence that I'm going the right way (and some context for the env part)</p>",
        "id": 163760350,
        "sender_full_name": "detrumi",
        "timestamp": 1555703472
    },
    {
        "content": "<p>Is canonicalization accessible outside of chalk_solve? all ways of canonicalizing seem to be <code>pub(crate)</code>, except for <code>GoalExt</code> which is \"Useful for REPLs and tests but not much else\".</p>",
        "id": 163806868,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1555772777
    },
    {
        "content": "<p>I've ported most of the env stuff over now, the tricky part is the type matches, since the variants don't match up. Very WIP PR: <a href=\"https://github.com/rust-lang/chalk/pull/216\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/216\">https://github.com/rust-lang/chalk/pull/216</a></p>",
        "id": 163865807,
        "sender_full_name": "detrumi",
        "timestamp": 1555877877
    },
    {
        "content": "<p>Rustc's <code>program_clauses_impl</code> does some filtering on <code>clause.category() == ProgramClauseCategory::WellFormed</code>, is there a Chalk-equivalent or does that need to be introduced?</p>",
        "id": 164061463,
        "sender_full_name": "detrumi",
        "timestamp": 1556092628
    },
    {
        "content": "<p>(most tests are failing on \"trait impl for ... does not meet well-formedness requirements\")</p>",
        "id": 164061513,
        "sender_full_name": "detrumi",
        "timestamp": 1556092704
    },
    {
        "content": "<p>Ah, missed the comments above <code>to_program_clauses</code>, so if I understand correctly, the relevant clauses are wrapped in <code>WellFormed</code> instead</p>",
        "id": 164061703,
        "sender_full_name": "detrumi",
        "timestamp": 1556092943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> I was perusing your PR as I drank my morning coffee <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span>  and I <a href=\"https://github.com/rust-lang/chalk/pull/216#pullrequestreview-230536153\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/216#pullrequestreview-230536153\">left some more notes here</a> -- make sense? </p>\n<p>One thing I was wondering is how familiar you are with the clause lowering -- i.e., do you understand roughly the logic behind what these functions are doing? I'm not clear on how well this part of the picture has been explained.</p>",
        "id": 164156352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556185414
    },
    {
        "content": "<p>(Also, independently, I realized something as I was reading this over -- once we complete <em>this</em> work, I suspect we're going to want to do a bit more refactoring to introduce salsa here, so that we can plausibly have some caching. But this would be more of an optimization -- and it might make sense to push more on the RLS integration before doing it.)</p>",
        "id": 164156435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556185502
    },
    {
        "content": "<p>Great feedback! I actually also thought about doing the <code>retain</code>, but decided against it in case it was set up that way for performance reasons. But it makes sense to just simplify it</p>",
        "id": 164167360,
        "sender_full_name": "detrumi",
        "timestamp": 1556197043
    },
    {
        "content": "<blockquote>\n<p>One thing I was wondering is how familiar you are with the clause lowering -- i.e., do you understand roughly the logic behind what these functions are doing? I'm not clear on how well this part of the picture has been explained.</p>\n</blockquote>\n<p>I must confess that some parts were translated by a mostly mechanical process of looking at the matched types and figuring out what the code is doing exactly. So there's probably some code there that's just plain wrong, and indeed I need to understand it a bit better.</p>",
        "id": 164167564,
        "sender_full_name": "detrumi",
        "timestamp": 1556197213
    },
    {
        "content": "<p>Ah, that's not very useful. let me try to write down my current understanding of the code, so that you can point out where my understanding is wrong/lacking</p>",
        "id": 164177145,
        "sender_full_name": "detrumi",
        "timestamp": 1556203883
    },
    {
        "content": "<p>The term lowering is already confusing, since it can mean both lowering AST to rust-ir, and rust-ir to logical rules (ProgramClauses, the one we're dealing with here)</p>",
        "id": 164178454,
        "sender_full_name": "detrumi",
        "timestamp": 1556204752
    },
    {
        "content": "<p>Ah I understand now, so both the database and the goal are talking about rust-ir, and we want to lower them both to logical rules to match them.</p>",
        "id": 164178776,
        "sender_full_name": "detrumi",
        "timestamp": 1556204954
    },
    {
        "content": "<p>Question: why can't we lower the goal itself first?</p>",
        "id": 164178895,
        "sender_full_name": "detrumi",
        "timestamp": 1556205018
    },
    {
        "content": "<p>As for the lowering itself: all the matching functions do in the end is just call the <code>to_program_clauses</code> for the ProgramClauses the goal is pointing at</p>",
        "id": 164181303,
        "sender_full_name": "detrumi",
        "timestamp": 1556206536
    },
    {
        "content": "<blockquote>\n<p>The term lowering is already confusing, since it can mean both lowering AST to rust-ir, and rust-ir to logical rules (ProgramClauses, the one we're dealing with here)</p>\n</blockquote>\n<p>well, lowering is just a general term for converting from one IR to another -- typically converting from some \"high-level\" IR to a more \"low-level\" IR</p>",
        "id": 164182553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556207283
    },
    {
        "content": "<blockquote>\n<p>Question: why can't we lower the goal itself first?</p>\n</blockquote>\n<p>the goal is .. lowered in some sense</p>",
        "id": 164182595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556207297
    },
    {
        "content": "<p>in rust, you don't have explicit goals like \"well-formed\" or what have you</p>",
        "id": 164182639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556207333
    },
    {
        "content": "<p>but basically we have these rules for converting bits of rust-ir into program clauses</p>",
        "id": 164182667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556207352
    },
    {
        "content": "<p>each of those clauses can be used to prove some particular kind of domain-goal</p>",
        "id": 164182690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556207375
    },
    {
        "content": "<p>so e.g. <code>impl Foo for Bar</code> generates a <code>Implemented(Bar: Foo) :- ...</code> clause</p>",
        "id": 164182710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556207393
    },
    {
        "content": "<p>so what this code is doing is looking at the thing we have to prove and figuring out whihc bits of rust-ir <em>might</em> contribute a clause that could be useful</p>",
        "id": 164182783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556207411
    },
    {
        "content": "<p>Right</p>",
        "id": 164182814,
        "sender_full_name": "detrumi",
        "timestamp": 1556207431
    },
    {
        "content": "<p>(the old code just lowered <em>everything</em> first, but we're trying to be more selective)</p>",
        "id": 164182816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556207435
    },
    {
        "content": "<p>the <em>specifics</em> of how the code works, then, comes from taking a look at the actual rules and just trying to figure it out</p>",
        "id": 164182857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556207466
    },
    {
        "content": "<p>So why does Chalk's DomainGoal have so many more variants than rustc's? Is it because rustc computes more stuff on the side, while Chalk explicitly stores it inside the goal?</p>",
        "id": 164183643,
        "sender_full_name": "detrumi",
        "timestamp": 1556207972
    },
    {
        "content": "<p>Chalk's domain goal includes some experiments that we've not yet tried to integrate into rustc</p>",
        "id": 164184842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556208872
    },
    {
        "content": "<p>Nor fully finished, really</p>",
        "id": 164184847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556208875
    },
    {
        "content": "<p>We also model things (like coherence) that rustc doesn't yet model</p>",
        "id": 164184853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556208882
    },
    {
        "content": "<p>Which requires some new sorts of domain goals</p>",
        "id": 164184858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556208887
    },
    {
        "content": "<p>Hmm, so I'm trying to figure out why some of the tests are failing. Take the <code>fundamental_types</code> test for example:</p>\n<div class=\"codehilite\"><pre><span></span>goal { forall &lt; T &gt; { not { IsLocal ( Box &lt; T &gt; ) } } }\nusing solver: SLG { max_size: 10 }\nexpected:\nNo possible solution\nactual:\nUnique; substitution [], lifetime constraints []\n</pre></div>\n\n\n<p>Details aside, I'm a bit confused as to why it's finding more solutions.<br>\nThe logic for checking whether it's local and such should be done in <code>to_program_clauses</code>.<br>\nBut calling <code>to_program_clauses</code> on too many things should only give less solutions, not more, right?<br>\nIf so, could this be an uncovered problem in <code>to_program_clauses</code>?</p>",
        "id": 164352788,
        "sender_full_name": "detrumi",
        "timestamp": 1556397831
    },
    {
        "content": "<p>Ah, or maybe it's missing some clauses instead, and that's why there's more solutions</p>",
        "id": 164352975,
        "sender_full_name": "detrumi",
        "timestamp": 1556398121
    },
    {
        "content": "<blockquote>\n<p>But calling <code>to_program_clauses</code> on too many things should only give less solutions, not more, right?<br>\nIf so, could this be an uncovered problem in <code>to_program_clauses</code>?</p>\n</blockquote>\n<p>not necessarily, because of negative logic</p>",
        "id": 164378727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556443993
    },
    {
        "content": "<p>That's weird, the environment seems to be empty...</p>",
        "id": 164404091,
        "sender_full_name": "detrumi",
        "timestamp": 1556481371
    },
    {
        "content": "<p>Ah yes, the old code was calling the <code>environment()</code> function in <code>query.rs</code>, and the <code>environment.clauses</code> that is used now in the <code>program_clauses</code> function is empty</p>",
        "id": 164404406,
        "sender_full_name": "detrumi",
        "timestamp": 1556481755
    },
    {
        "content": "<p>No wonder tests are failing, if env clauses like <code>IsLocal(Local)</code> are missing</p>",
        "id": 164404430,
        "sender_full_name": "detrumi",
        "timestamp": 1556481808
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> -- I'm wondering, would you like help with the \"last mile\" in <a href=\"https://github.com/rust-lang-nursery/chalk/issues/216\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/216\">chalk#216</a>?</p>",
        "id": 164468506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556556987
    },
    {
        "content": "<p>i.e., I was considering checking it out and pushing some commits, but didn't want to step on your toes</p>",
        "id": 164468582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556557041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yes, feel free to. I was a bit stuck on the environment stuff anyways, since that requires more knowledge of the high-level design</p>",
        "id": 164472323,
        "sender_full_name": "detrumi",
        "timestamp": 1556559764
    },
    {
        "content": "<p>And since this might be blocking rls2 integration, you working on it will help speed it up a bit (especially because the PR grew a bit in size)</p>",
        "id": 164472573,
        "sender_full_name": "detrumi",
        "timestamp": 1556559959
    },
    {
        "content": "<p>I've been fixing some of these cases FYI</p>",
        "id": 164485685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556569592
    },
    {
        "content": "<p>I just hit an interesting case (cc <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>) --</p>",
        "id": 164485693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556569600
    },
    {
        "content": "<p>in particular if you have a goal like <code>?T: Send</code>, and this is an auto-trait, we need to enumerate <em>all</em> structs to find the rules</p>",
        "id": 164485703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556569621
    },
    {
        "content": "<p>I guess not that interesting</p>",
        "id": 164485715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556569629
    },
    {
        "content": "<p>for now I think I will add the helpers to do that, but also a FIXME to address this better with 'non-enumerable' goals</p>",
        "id": 164485727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556569645
    },
    {
        "content": "<p>OK, we're down to these errors</p>\n<div class=\"codehilite\"><pre><span></span>failures:\n    test::coherence::downstream_impl_of_fundamental_43355\n    test::coherence::fundamental_traits\n    test::coherence::two_blanket_impls_open_ended\n    test::fundamental_types\n    test::gat_implied_bounds\n    test::slg::cached_answers_1\n    test::slg::cached_answers_2\n    test::slg::cached_answers_3\n    test::slg::contradiction\n    test::slg::example_2_1_EWFS\n    test::slg::example_2_2_EWFS\n    test::slg::example_2_3_EWFS\n    test::slg::example_3_3_EWFS\n    test::slg::negative_answer_delayed_literal\n    test::slg::negative_loop\n    test::unselected_projection_with_gat\n</pre></div>",
        "id": 164487243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556570802
    },
    {
        "content": "<p>I didn't try to look into coherence yet</p>",
        "id": 164487245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556570811
    },
    {
        "content": "<p>Oh, I bet I know what the slg* errors are</p>",
        "id": 164487274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556570839
    },
    {
        "content": "<p>OK, down to </p>\n<div class=\"codehilite\"><pre><span></span>failures:\n    test::coherence::downstream_impl_of_fundamental_43355\n    test::coherence::fundamental_traits\n    test::coherence::two_blanket_impls_open_ended\n    test::fundamental_types\n    test::gat_implied_bounds\n    test::slg::example_3_3_EWFS\n    test::unselected_projection_with_gat\n</pre></div>",
        "id": 164487576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556571034
    },
    {
        "content": "<p>Ah cool, didn't know of <code>PolarizedTraitRef</code></p>",
        "id": 164517888,
        "sender_full_name": "detrumi",
        "timestamp": 1556609539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> ok, tests pass now at least. Really makes me wonder if we could find a more automated way to do this. =)</p>",
        "id": 164525401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556617569
    },
    {
        "content": "<p>Nice work getting the tests green <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 164568117,
        "sender_full_name": "detrumi",
        "timestamp": 1556652436
    },
    {
        "content": "<p>Any work left for this PR, or is it mainly review + finishing things up?</p>",
        "id": 164568170,
        "sender_full_name": "detrumi",
        "timestamp": 1556652481
    },
    {
        "content": "<p>I was just wondering about that</p>",
        "id": 164568221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556652490
    },
    {
        "content": "<p>I <em>think</em> I'm inclined to land it roughly as is and then try to do further cleanups in separate PRs</p>",
        "id": 164568244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556652506
    },
    {
        "content": "<p>I wasn't happy with how complex the <a href=\"http://clauses.rs\" target=\"_blank\" title=\"http://clauses.rs\">clauses.rs</a> logic felt</p>",
        "id": 164568251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556652513
    },
    {
        "content": "<p>That..might just be what it is :)</p>",
        "id": 164568253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556652519
    },
    {
        "content": "<p>But I suspect we could at minimum refactor it a bit, and if not, we can at least document it better :)</p>",
        "id": 164568267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556652534
    },
    {
        "content": "<p>Interestingly, this logic is actually \"relevant\" to the language spec -- or it will be -- because it will determine which specialization setups result in a cycle error and which do not</p>",
        "id": 164568316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556652572
    },
    {
        "content": "<p>So it'd be nice to be able to document it more cleanly</p>",
        "id": 164568328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556652587
    },
    {
        "content": "<p>Anyway, as I said, I suspect that's \"future work\"</p>",
        "id": 164568341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556652599
    },
    {
        "content": "<p>Sure, but the rustc code here felt a bit hacky too, in places</p>",
        "id": 164568401,
        "sender_full_name": "detrumi",
        "timestamp": 1556652615
    },
    {
        "content": "<p>Oh, indeed</p>",
        "id": 164568405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556652620
    },
    {
        "content": "<p>It's no hackier than rustc</p>",
        "id": 164568411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556652624
    },
    {
        "content": "<p>But definitely something to improve upon</p>",
        "id": 164568418,
        "sender_full_name": "detrumi",
        "timestamp": 1556652628
    },
    {
        "content": "<p>Makes me wonder if we could express the <code>program_clauses</code> logic in some DSL and use that to derive <code>clauses.rs</code> too</p>",
        "id": 164568505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556652710
    },
    {
        "content": "<p>but that's <em>definitely</em> future work :)</p>",
        "id": 164568516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556652717
    },
    {
        "content": "<p>A DSL? You mean some intermediate data structure that'd talk about what clauses to collect, without actually querying them from the database?</p>",
        "id": 164568669,
        "sender_full_name": "detrumi",
        "timestamp": 1556652836
    },
    {
        "content": "<p>I don't know exactly what I mean :)</p>",
        "id": 164572270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556654994
    },
    {
        "content": "<p>but in general the <a href=\"http://clauses.rs\" target=\"_blank\" title=\"http://clauses.rs\">clauses.rs</a> logic feels like it ought to be automatically derivable</p>",
        "id": 164572341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655012
    },
    {
        "content": "<p>although, as I said, it has lang implications, so it's not clear to me</p>",
        "id": 164572364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655029
    },
    {
        "content": "<p><em>anyway</em>, yeah, let's land the PR</p>",
        "id": 164572374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> -- do you happen to be around? do you want to look over <a href=\"https://github.com/rust-lang/chalk/pull/216\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/216\">https://github.com/rust-lang/chalk/pull/216</a> or are you happy if I just land it? :)</p>",
        "id": 164572395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> could you wait tomorrow? I’ll give it a look in the morning</p>",
        "id": 164572883,
        "sender_full_name": "scalexm",
        "timestamp": 1556655403
    },
    {
        "content": "<p>Well anyway let’s land it, I’ll look at it in depth tomorrow and if anything stands out we can still make adjustments later, but I guess this won’t be necessary</p>",
        "id": 164573159,
        "sender_full_name": "scalexm",
        "timestamp": 1556655570
    },
    {
        "content": "<p>no great rush</p>",
        "id": 164573493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655796
    },
    {
        "content": "<p>I think it can wait until tomorrow :)</p>",
        "id": 164573497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556655803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I made the change you suggested, can I merge <a href=\"https://github.com/rust-lang/chalk/pull/216\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/216\">https://github.com/rust-lang/chalk/pull/216</a> ?</p>",
        "id": 164825016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556913393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes looks good</p>",
        "id": 164825034,
        "sender_full_name": "scalexm",
        "timestamp": 1556913412
    },
    {
        "content": "<p>Merged, nice work <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>!</p>",
        "id": 164825406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556913670
    },
    {
        "content": "<p>Hello - I'm interested in getting involved with this working group</p>",
        "id": 167603445,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1559933730
    }
]