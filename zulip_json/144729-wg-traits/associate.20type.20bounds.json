[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I have a few minutes. I still think it's related to the parent def-id, however. (Though there may be a few other edits required)</p>\n<p>In particular, the error that you <a href=\"https://github.com/rust-lang/rust/pull/57428#issuecomment-457432532\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57428#issuecomment-457432532\">mention here</a> comes because the <code>TyOpaque</code> was not replaced with an inference variable in the right places. That \"instantiation logic\" I believe at least <em>interacts</em> with the parent def-id -- but it may be that we also have to invoke it at the right spot</p>",
        "id": 156873573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548441732
    },
    {
        "content": "<p>But you mentioned having a bit more debugging to note down?</p>",
        "id": 156873583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548441749
    },
    {
        "content": "<p>Okay thanks. So I made the change you suggested (and even stopped ConstraintLocator looking within the outermost existential node), but same error...</p>",
        "id": 156873658,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548441823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what would the \"right spot\" be here? I haven't done a lot of work with inference.</p>",
        "id": 156873703,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548441843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> have you pushed said changes?</p>",
        "id": 156873927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> no, let me do so now</p>",
        "id": 156873944,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548442030
    },
    {
        "content": "<p>OK. I mean, the next thing is to try and track a bit the origin of the error. It can be an annoying process. One thing that may help is <code>-Ztreat-err-as-bug</code> and <code>RUST_BACKTRACE</code>, which I think in this case should give you a good picture of the backtrace</p>",
        "id": 156874003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442076
    },
    {
        "content": "<p>but if you push I can certainly take a look</p>",
        "id": 156874050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah I tried that</p>",
        "id": 156874152,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548442172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://gist.github.com/d35867024089dc1c3097307f75c77267\" target=\"_blank\" title=\"https://gist.github.com/d35867024089dc1c3097307f75c77267\">https://gist.github.com/d35867024089dc1c3097307f75c77267</a></p>",
        "id": 156874260,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548442219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I don't see any new commits on <code>alexreg/associated_type_bounds</code> yet</p>",
        "id": 156874913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442606
    },
    {
        "content": "<p>also, i'm not sure that gist is what you meant to send...?</p>",
        "id": 156874957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sorry, was cleaning up the commit history for you. pushed now.</p>",
        "id": 156876186,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548443443
    },
    {
        "content": "<p>oops</p>",
        "id": 156876191,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548443453
    },
    {
        "content": "<p>stupid command-line Gist ;-)</p>",
        "id": 156876215,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548443477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://gist.github.com/alexreg/6a944716d4bc6b535daa587d31e5afb9\" target=\"_blank\" title=\"https://gist.github.com/alexreg/6a944716d4bc6b535daa587d31e5afb9\">https://gist.github.com/alexreg/6a944716d4bc6b535daa587d31e5afb9</a></p>",
        "id": 156876310,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548443537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sorry some nasty debugging code is still in there... hopefully it's okay for you though! you can still pick out the relevant changes easily enough I think.</p>",
        "id": 156877586,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548444400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so the question is, where do we instantiate the inference var? (if indeed we do) :-)</p>",
        "id": 156878536,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548445121
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> from what I can tell from looking at your branch, the problem is still that you have the wrong parent.</p>\n<p>I <em>think</em> at least that the error arises because, when we are running <code>check_fn</code> on the function that winds up defining all the things, it invokes <code>fcx.instantiate_opaque_types_from_value(fn_id, &amp;declared_ret_ty)</code>. This will iterate down in the <code>instantiate_opaque_types_in_map</code> fn, walking down the value. </p>\n<p>It will encounter the existential type <code>Bar</code>.  and then it will check if <code>Bar</code> is \"in scope\" -- i.e., this is a defining use. It determines <em>yes</em>. So it invokes <code>fold_opaque_ty</code>.</p>\n<p>This will create a type inference variable (<code>opaque_types/mod.rs:759</code>, on your branch). It then gets the bounds for the existential type:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">predicates_of</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and (later) iterates over them:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"p\">.</span><span class=\"n\">predicates</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Change the predicate to refer to the type variable,</span>\n<span class=\"w\">            </span><span class=\"c1\">// which will be the concrete type instead of the opaque type.</span>\n<span class=\"w\">            </span><span class=\"c1\">// This also instantiates nested instances of `impl Trait`.</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">instantiate_opaque_types_in_map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">predicate</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>note that, in the process, it is instantiating any opaque types that appear in <strong>those</strong> bounds. This should cover your <code>impl Trait</code> -- but I think it <em>doesn't</em>, because the \"parent\" value is not correct, and so <code>instantiate_opaque_types_in_map</code> does not treat this as a defining use.</p>",
        "id": 156889467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548454420
    },
    {
        "content": "<p>hmm</p>",
        "id": 156889697,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548454573
    },
    {
        "content": "<p>let me think!</p>",
        "id": 156889699,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548454575
    },
    {
        "content": "<p>sounds like you have a point though, on first sight</p>",
        "id": 156889709,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548454592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> where is the parent node set for the nested existential type node? isn't it where I just edited the code?</p>",
        "id": 156889991,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548454804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> solved. the key was the <code>may_define_existential_type</code> fn. thanks for your help!</p>",
        "id": 156951562,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548555566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> great!</p>",
        "id": 157037784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548693089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah, seems to be working nicely. (Centril is writing up some test cases, but what I've tested so far looks good. Thanks a lot for the advice.) So, I'm now just working on the last remaining big case for this PR, which is <code>impl Trait</code> in associated types.</p>",
        "id": 157037877,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693154
    },
    {
        "content": "<p>it's a bit trickier, but I figured out how to do it I think</p>",
        "id": 157037885,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693162
    },
    {
        "content": "<p>a couple of small questions, which maybe you can help with:</p>",
        "id": 157037898,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693174
    },
    {
        "content": "<p>ok</p>",
        "id": 157037925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548693209
    },
    {
        "content": "<p>can I generate a self <code>Ty</code> during HIR lowering?</p>",
        "id": 157038028,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693277
    },
    {
        "content": "<p>(and if so, how?)</p>",
        "id": 157038029,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693280
    },
    {
        "content": "<p>and secondly, I need to generate a unique ident for the fresh associated type. I was thinking of using the \"Path\" of the <code>impl Trait</code> within the original associated type, but wasn't exactly sure.</p>",
        "id": 157038080,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693339
    },
    {
        "content": "<p>a nice deterministic way like this would be cool, since I can use that for impls of the trait</p>",
        "id": 157038145,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693369
    },
    {
        "content": "<blockquote>\n<p>can I generate a self <code>Ty</code> during HIR lowering?</p>\n</blockquote>\n<p>what do you mean by a \"self ty\"?</p>",
        "id": 157038167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548693391
    },
    {
        "content": "<p>also, it would help me a bit if you gave me a concrete example of what you are trying to do</p>",
        "id": 157038192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548693420
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// like this, I guess?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157038217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548693447
    },
    {
        "content": "<blockquote>\n<p>and secondly, I need to generate a unique ident for the fresh associated type. I was thinking of using the \"Path\" of the <code>impl Trait</code> within the original associated type, but wasn't exactly sure.</p>\n</blockquote>\n<p>yeah hmm not sure -- say more about the role of this identifier?</p>",
        "id": 157038232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548693466
    },
    {
        "content": "<p>sorry, yeah, let me be specific</p>",
        "id": 157038322,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693538
    },
    {
        "content": "<p>for self ty... I want to generate a <code>Path</code> to <code>Self::GeneratedAssocType</code></p>",
        "id": 157038343,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693560
    },
    {
        "content": "<p>we're doing desugaring like:</p>",
        "id": 157038348,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693566
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// alternatively &lt;Item: Display&gt;</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">_0</span>: <span class=\"nc\">Display</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157038427,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693623
    },
    {
        "content": "<p>right</p>",
        "id": 157038442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548693651
    },
    {
        "content": "<p>so you want a path like <code>Self::_0</code>?</p>",
        "id": 157038449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548693661
    },
    {
        "content": "<p>then we'd have an impl like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SomeStruct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ConcreteIterator</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>desugared to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SomeStruct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ConcreteIterator</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">inferred</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157038547,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693737
    },
    {
        "content": "<p>yep</p>",
        "id": 157038550,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693740
    },
    {
        "content": "<p>that</p>",
        "id": 157038552,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693743
    },
    {
        "content": "<p>at least, that's how I think we want to do desugaring in the impl case</p>",
        "id": 157038581,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693798
    },
    {
        "content": "<p>it seems like that should be possible</p>",
        "id": 157038607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548693826
    },
    {
        "content": "<p>I'm skimming the HIR structs a bit</p>",
        "id": 157038613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548693838
    },
    {
        "content": "<p>sure</p>",
        "id": 157038653,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693844
    },
    {
        "content": "<p>sadly the \"usual\" way to generate a self ty is through the tcx methods</p>",
        "id": 157038667,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693862
    },
    {
        "content": "<p>which isn't available during lowering of course</p>",
        "id": 157038672,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548693870
    },
    {
        "content": "<p>well</p>",
        "id": 157038713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548693919
    },
    {
        "content": "<p>that's true</p>",
        "id": 157038738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548693956
    },
    {
        "content": "<p>there are some options</p>",
        "id": 157038772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548693962
    },
    {
        "content": "<p>I'm debating the best course here</p>",
        "id": 157038795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548693977
    },
    {
        "content": "<p>so, for example, when we lower <code>-&gt; impl Foo</code> to <code>-&gt; X</code> (where <code>X</code> is a new existential type), we don't generate a \"synthesized\" path, but rather make a <code>TyKind:Def(...)</code></p>",
        "id": 157038823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694014
    },
    {
        "content": "<p>one could imagine adding some similar thing</p>",
        "id": 157038842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694026
    },
    {
        "content": "<p>yes</p>",
        "id": 157038850,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694041
    },
    {
        "content": "<p>alternatively, you could make a <code>QPath</code>, which is fine</p>",
        "id": 157038854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694047
    },
    {
        "content": "<p>I wonder if that may be problematic here though</p>",
        "id": 157038860,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694051
    },
    {
        "content": "<p><code>QPath::Resolved</code>, I imagine</p>",
        "id": 157038866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694058
    },
    {
        "content": "<p>but we need to specify the self type</p>",
        "id": 157038870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694062
    },
    {
        "content": "<p>also, the inference for the concrete type is the impl is still not clear to me</p>",
        "id": 157038885,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694074
    },
    {
        "content": "<p>which is I think just a path</p>",
        "id": 157038948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694109
    },
    {
        "content": "<p>(when a user types it, anyway)</p>",
        "id": 157038951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694118
    },
    {
        "content": "<p>yeah</p>",
        "id": 157038963,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694131
    },
    {
        "content": "<blockquote>\n<p>also, the inference for the concrete type is the impl is still not clear to me</p>\n</blockquote>\n<p>concrete type <strong>in</strong> the impl?</p>",
        "id": 157038965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694132
    },
    {
        "content": "<blockquote>\n<p>which is I think just a path</p>\n</blockquote>\n<p>(but you could potentially use <code>TyKind::Def</code> with the id of the <code>Self</code> type parameter)</p>",
        "id": 157038990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694163
    },
    {
        "content": "<p>yeah. the concrete type for the associated type</p>",
        "id": 157038992,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694168
    },
    {
        "content": "<p>(in my above example)</p>",
        "id": 157038998,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694181
    },
    {
        "content": "<p>well</p>",
        "id": 157039013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694198
    },
    {
        "content": "<p>your example is probably not the correct desugaring, really</p>",
        "id": 157039058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694204
    },
    {
        "content": "<p>in particular, <code>type _0 = &lt;inferred&gt;</code> is not, I think, what we want</p>",
        "id": 157039069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694217
    },
    {
        "content": "<p>because that was \"expose\" what <code>_0</code> is</p>",
        "id": 157039075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694222
    },
    {
        "content": "<p>yeah. I was actually wondering about that as soon as I typed it.</p>",
        "id": 157039078,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694223
    },
    {
        "content": "<p>it's what Centril wrote in his PR.</p>",
        "id": 157039083,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694230
    },
    {
        "content": "<p>but I'm doubtful now</p>",
        "id": 157039088,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694234
    },
    {
        "content": "<p>yes, it's just not correct</p>",
        "id": 157039091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694237
    },
    {
        "content": "<p>so how do you propose we do it?</p>",
        "id": 157039139,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694276
    },
    {
        "content": "<p>I don't thing we can desugar to normal <code>existential type</code>s though... can we?</p>",
        "id": 157039155,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694290
    },
    {
        "content": "<p>(or associated existential types, rather)</p>",
        "id": 157039173,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694307
    },
    {
        "content": "<p>I think what we want is something closer to this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">existential</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">_0</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SomeStruct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ConcreteIterator</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157039174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694309
    },
    {
        "content": "<p>aha</p>",
        "id": 157039183,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694318
    },
    {
        "content": "<p>(where the scope of the <code>existential</code> is not the enclosing module, but the impl)</p>",
        "id": 157039185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694319
    },
    {
        "content": "<p>much like how </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Blah</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>desugars to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">existential</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but where <code>X</code> is scoped to the <code>fn</code></p>",
        "id": 157039247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694344
    },
    {
        "content": "<p>HIR and later stages might allow existential types in the module already? not sure. of course, syntax doesn't.</p>",
        "id": 157039262,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694359
    },
    {
        "content": "<p>only in traits</p>",
        "id": 157039265,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694361
    },
    {
        "content": "<blockquote>\n<p>HIR and later stages might allow existential types in the module already? not sure. of course, syntax doesn't.</p>\n</blockquote>\n<p>why do you say syntax doesn't?</p>",
        "id": 157039276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694379
    },
    {
        "content": "<p>check out e.g. <code>src/test/ui/existential_types/bound_reduction.rs</code></p>",
        "id": 157039321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694438
    },
    {
        "content": "<p>(just picked at random)</p>",
        "id": 157039332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694442
    },
    {
        "content": "<p>that's not scoped to an impl though</p>",
        "id": 157039442,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694552
    },
    {
        "content": "<p>I mean...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">existential</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span>: <span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// not allowed now</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 157039497,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694567
    },
    {
        "content": "<p>yes, it is scoped too large</p>",
        "id": 157039509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694583
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=48ce0fef72363d9a9e1bb25083fedb06\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=48ce0fef72363d9a9e1bb25083fedb06\">also, this does not compile</a> -- I'm a <em>bit</em> surprised by that.</p>",
        "id": 157039531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694604
    },
    {
        "content": "<p>syntax doesn't allow this scoping, is what I mean, but maybe HIR and later copes with it fine?</p>",
        "id": 157039534,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694606
    },
    {
        "content": "<p>I suspect it is because of when the impl checks are done</p>",
        "id": 157039540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694609
    },
    {
        "content": "<blockquote>\n<p>syntax doesn't allow this scoping, is what I mean, but maybe HIR and later copes with it fine?</p>\n</blockquote>\n<p>ah, yes, correct. but that's somehow a secondary problem to the one I just raised =)</p>",
        "id": 157039556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694625
    },
    {
        "content": "<p>right now, the scoping I think is either enclosing mod or -- for <code>impl Trait</code> desugarings -- enclosing fn, I'd have to review the code to see how general the HIR setup is</p>",
        "id": 157039581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694647
    },
    {
        "content": "<p>but we can presumably generalize it</p>",
        "id": 157039582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694649
    },
    {
        "content": "<p>still, scoping the enclosing module should work</p>",
        "id": 157039589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694655
    },
    {
        "content": "<p>(but doesn't)</p>",
        "id": 157039591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694662
    },
    {
        "content": "<p>so I'd probably start by trying to solve <em>that</em></p>",
        "id": 157039596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694667
    },
    {
        "content": "<p>that's a bit worrying yes!</p>",
        "id": 157039644,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694683
    },
    {
        "content": "<p>I also think you may be biting off more than you have to chew in this partcular PR</p>",
        "id": 157039657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694700
    },
    {
        "content": "<p>that is, I would encourage you to try to land the PR if it is at a coherent point</p>",
        "id": 157039665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694715
    },
    {
        "content": "<p>vs trying to fix all the things in one PR</p>",
        "id": 157039670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694721
    },
    {
        "content": "<p>yeah, maybe a fair point!</p>",
        "id": 157039741,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694791
    },
    {
        "content": "<p>gotta run now (meetings), but hopefully that helps a bit :)</p>",
        "id": 157039800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694805
    },
    {
        "content": "<p>we don't want another const generics PR</p>",
        "id": 157039801,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694808
    },
    {
        "content": "<p>one more small questions...</p>",
        "id": 157039810,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694813
    },
    {
        "content": "<p>(go for it)</p>",
        "id": 157039815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548694817
    },
    {
        "content": "<p>(thanks, it does)</p>",
        "id": 157039816,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694817
    },
    {
        "content": "<p>can you compile those notes on impl-trait-in-bindings soon? :-)</p>",
        "id": 157039830,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694827
    },
    {
        "content": "<p>from chat, github, etc.</p>",
        "id": 157039832,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694831
    },
    {
        "content": "<p>gist</p>",
        "id": 157039835,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694833
    },
    {
        "content": "<p>I can help try to locate them if you like</p>",
        "id": 157039841,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694841
    },
    {
        "content": "<p>then maybe you could collate them if you don't mind?</p>",
        "id": 157039845,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 157039999,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548694994
    },
    {
        "content": "<p>uuuuuuuh ok :) I sort of forgot, were you waiting on notes?</p>",
        "id": 157040156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548695130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah. just a compilation of your previous notes really, which I think were converging on a good solution. I may have offered some input, but it was mainly you. :-) do you want me to help dig up the various bits and pieces for you to collate into something more coherent and self-contained? I may miss something but happy to try.</p>",
        "id": 157040990,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548695854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> still around by chance? :-)</p>",
        "id": 157061227,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548712645
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> -- did you see <a href=\"https://github.com/rust-lang/rust/issues/57961\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57961\">https://github.com/rust-lang/rust/issues/57961</a> by chance?</p>",
        "id": 157117846,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548780070
    },
    {
        "content": "<p>I didn't see it yet; I do think we want something like it to work, I haven't looked closely at why it doesn't, though I have some theories</p>",
        "id": 157120917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548782424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it's basically just because only function return types are currently considered defining uses, like Oli was saying, I think.</p>",
        "id": 157127725,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548787704
    },
    {
        "content": "<p>If you could confirm/deny whether it needs an RFC, that would be great. (Hopefully not, despite what he says, but if we need one, we need one...)</p>",
        "id": 157127748,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548787735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ok <a href=\"https://github.com/rust-lang/rust/issues/57961#issuecomment-458695187\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57961#issuecomment-458695187\">replied</a></p>",
        "id": 157135381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548793862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks for that.</p>",
        "id": 157148840,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548805187
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>... I have a question about this, if you have just a few minutes.</p>",
        "id": 160107043,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551887336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> what's your question</p>",
        "id": 160109373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551888826
    },
    {
        "content": "<p>I will be on and off today but I'll try to answer when I can =)</p>",
        "id": 160109394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551888836
    },
    {
        "content": "<p>so.... for this feature, I want to do something like the following: <a href=\"https://gist.github.com/alexreg/f073d737ae1db10034082e1a3e9c906e\" target=\"_blank\" title=\"https://gist.github.com/alexreg/f073d737ae1db10034082e1a3e9c906e\">https://gist.github.com/alexreg/f073d737ae1db10034082e1a3e9c906e</a></p>",
        "id": 160109457,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551888852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> but ideally (I think) we avoid creating new names for new associated types</p>",
        "id": 160109480,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551888868
    },
    {
        "content": "<p>or do we?</p>",
        "id": 160109483,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551888870
    },
    {
        "content": "<p>the choices seem to be</p>",
        "id": 160109487,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551888872
    },
    {
        "content": "<p>A) embed the desugared associated types within the existing associated types</p>",
        "id": 160109510,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551888888
    },
    {
        "content": "<p>B) generate new ones with unique names (perhaps the name of the DefId for the impl Trait)</p>",
        "id": 160109543,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551888907
    },
    {
        "content": "<p>do you know what I mean?</p>",
        "id": 160109719,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551888999
    },
    {
        "content": "<p>btw, in these desugarings, if you gensym, don't forget to ensure that this doesn't creep into diagnostics</p>",
        "id": 160109871,
        "sender_full_name": "centril",
        "timestamp": 1551889079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> Hmm, I don't think you have to do quite that desugaring</p>",
        "id": 160110041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551889158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I still don't undestand what gensyming is about</p>",
        "id": 160110075,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551889186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> \"generate unique names\" is what I mean by that</p>",
        "id": 160110151,
        "sender_full_name": "centril",
        "timestamp": 1551889209
    },
    {
        "content": "<p>Presently, if we have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span>: <span class=\"nb\">Iterator</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>this is <strong>already</strong> desugared, to some extent, to the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Bar</span>: <span class=\"nb\">Iterator</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160110180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551889223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well does that account for implied bounds? if you write the latter explicitly it won't</p>",
        "id": 160110212,
        "sender_full_name": "centril",
        "timestamp": 1551889246
    },
    {
        "content": "<p>you could imagine desugaring the example you gave instead to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Bar</span>: <span class=\"nb\">Iterator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span>: <span class=\"nb\">Send</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160110269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551889285
    },
    {
        "content": "<p>we certainly won't be smart enough to track that all properly right now though</p>",
        "id": 160110277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551889296
    },
    {
        "content": "<p>but chalk would, I think</p>",
        "id": 160110284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551889301
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> well does that account for implied bounds? if you write the latter explicitly it won't</p>\n</blockquote>\n<p>I don't recall the specifics, have to check. In chalk, we would handle the implied bounds equivalently in either case (and in fact we don't have a way to represent apart from the desugaring I gave), in rustc maybe not</p>",
        "id": 160110364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551889335
    },
    {
        "content": "<p>Point is, I'm not sure that introducing \"fictitious\" associated types is actually what we want to do</p>",
        "id": 160110399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551889362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  The RFC specified the semantics in terms of generated associated types but noted that with the implied bounds rfc, the usual <code>where</code> clause desugaring would work; I think the latter is ideal and the former is perhaps an acceptable temporary solution</p>",
        "id": 160110523,
        "sender_full_name": "centril",
        "timestamp": 1551889442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> the following <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=cabcb7d95f93125bc059a144464dce2a\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=cabcb7d95f93125bc059a144464dce2a\">compiles</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Bar</span>: <span class=\"nb\">Iterator</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">something</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">T</span>::<span class=\"n\">Bar</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160110549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551889456
    },
    {
        "content": "<p>odd...</p>",
        "id": 160110579,
        "sender_full_name": "centril",
        "timestamp": 1551889485
    },
    {
        "content": "<p>(afk for a bit)</p>",
        "id": 160110594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551889496
    },
    {
        "content": "<p>but this doesn't:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Bar</span>: <span class=\"nb\">Iterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span>: <span class=\"nb\">Copy</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">use_foo</span><span class=\"o\">&lt;</span><span class=\"n\">X</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"nc\">X</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">assert_copy</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_copy</span>::<span class=\"o\">&lt;&lt;&lt;</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160111171,
        "sender_full_name": "centril",
        "timestamp": 1551889905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are you sure it isn't? I don't see a good alternative, at least until we have implied bounds</p>",
        "id": 160111622,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551890280
    },
    {
        "content": "<p>One possible option is the <code>where</code>-clause desugaring as a temporary solution; that gives you worse usability but is probably cleaner... once we get implied bounds we get the usability improvements</p>",
        "id": 160111749,
        "sender_full_name": "centril",
        "timestamp": 1551890376
    },
    {
        "content": "<p>maybe yes...</p>",
        "id": 160113305,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551891547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I may end up going that way in fact, now that you say it</p>",
        "id": 160113329,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551891572
    },
    {
        "content": "<p>it's a good stop-gap</p>",
        "id": 160113338,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551891574
    },
    {
        "content": "<p>yup</p>",
        "id": 160113417,
        "sender_full_name": "centril",
        "timestamp": 1551891607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> so make sure you note which tests you're writing require the fully-correct implemention, so we can comment them out for now ;-)</p>",
        "id": 160114498,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551892418
    },
    {
        "content": "<p>oh dear; I'm focusing on dishing out as many tests as possible now; I think those tests are limited to one file tho</p>",
        "id": 160114587,
        "sender_full_name": "centril",
        "timestamp": 1551892466
    },
    {
        "content": "<p>heh</p>",
        "id": 160116269,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551893612
    },
    {
        "content": "<p>multiple files is fine to be honest...</p>",
        "id": 160116270,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551893613
    },
    {
        "content": "<p>we can great a new dir</p>",
        "id": 160116275,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551893617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> so something like this? (<code>desugared-2.rs</code>) -- <a href=\"https://gist.github.com/alexreg/f073d737ae1db10034082e1a3e9c906e\" target=\"_blank\" title=\"https://gist.github.com/alexreg/f073d737ae1db10034082e1a3e9c906e\">https://gist.github.com/alexreg/f073d737ae1db10034082e1a3e9c906e</a></p>",
        "id": 160116841,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551893983
    },
    {
        "content": "<p>does this have any implications for object safety compared to <code>desugared.rs</code>?</p>",
        "id": 160116863,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551893998
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Bar</span>: <span class=\"nb\">Iterator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span>::<span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span>: <span class=\"nb\">Send</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Iteerator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160117004,
        "sender_full_name": "centril",
        "timestamp": 1551894080
    },
    {
        "content": "<p>(the impl isn't relevant)</p>",
        "id": 160117040,
        "sender_full_name": "centril",
        "timestamp": 1551894119
    },
    {
        "content": "<p>yeah I know, I just left it in for completeness</p>",
        "id": 160117094,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551894131
    },
    {
        "content": "<p>hmm</p>",
        "id": 160117095,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551894132
    },
    {
        "content": "<p>offhand idk about object safety; hear with Niko on that <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 160117139,
        "sender_full_name": "centril",
        "timestamp": 1551894172
    },
    {
        "content": "<p>I think <code>Bar: Iterator</code> is \"desugared\" at a later point though</p>",
        "id": 160117140,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551894173
    },
    {
        "content": "<p><code>type Bar: Iterator;</code> is allowed though, surely?</p>",
        "id": 160117166,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551894191
    },
    {
        "content": "<p>presumably you do some recursive expansion?</p>",
        "id": 160117176,
        "sender_full_name": "centril",
        "timestamp": 1551894201
    },
    {
        "content": "<p>no</p>",
        "id": 160117181,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551894206
    },
    {
        "content": "<p>because <code>type Bar: Iterator&lt;Item = Type&gt;</code> is currently left alone during HIR lowerinfg</p>",
        "id": 160117204,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551894230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah, do give us your thoughts on object safety when you're back</p>",
        "id": 160117214,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551894237
    },
    {
        "content": "<p>how do you deal with <code>trait Foo { type Assoc: Iterator&lt;Item: Iterator&lt;Item: Copy&gt;&gt;; }</code> if not with a recursive expansion?</p>",
        "id": 160117275,
        "sender_full_name": "centril",
        "timestamp": 1551894257
    },
    {
        "content": "<p>well, that's recursive... but I mean, only the associated bounds are dealt with specially</p>",
        "id": 160117344,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551894308
    },
    {
        "content": "<p>ah; well... it doesn't matter much anyways; they are equivalent ^^</p>",
        "id": 160117363,
        "sender_full_name": "centril",
        "timestamp": 1551894330
    },
    {
        "content": "<p>okay. :-)</p>",
        "id": 160118699,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551895276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> there's more work to be done with this, but here's a set of tests that should cover many things: <a href=\"https://gist.github.com/Centril/2470b7f89657da457ed25078a9cdab72\" target=\"_blank\" title=\"https://gist.github.com/Centril/2470b7f89657da457ed25078a9cdab72\">https://gist.github.com/Centril/2470b7f89657da457ed25078a9cdab72</a> ; it primarily lacks compile-fail tests as well as some of the things noted in the checkboxes... I probably forgot other things too</p>",
        "id": 160120381,
        "sender_full_name": "centril",
        "timestamp": 1551896475
    },
    {
        "content": "<p>but... I've worked enough on this for 2+ days so I need a break :P</p>",
        "id": 160120525,
        "sender_full_name": "centril",
        "timestamp": 1551896571
    },
    {
        "content": "<p>thanks, will take a look soon :-)</p>",
        "id": 160127287,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551900989
    },
    {
        "content": "<p>oh wow. that long?</p>",
        "id": 160127290,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551900992
    },
    {
        "content": "<p>sounds good anyway!</p>",
        "id": 160127292,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551900996
    },
    {
        "content": "<p>There's a lot of cases ;)</p>",
        "id": 160128126,
        "sender_full_name": "centril",
        "timestamp": 1551901644
    },
    {
        "content": "<p>We can iterate on them and add them iteratively ^^</p>",
        "id": 160128213,
        "sender_full_name": "centril",
        "timestamp": 1551901697
    },
    {
        "content": "<p>heh</p>",
        "id": 160133913,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551905932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw, any elaboration on where/how associated types are converted into predicates on traits would be be appreciated. I presume this is only during type checking, and not HIR lowering?</p>",
        "id": 160159288,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551920717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> hey, did you see the above by chance? :-)</p>",
        "id": 160213980,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551976611
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> yeah, do give us your thoughts on object safety when you're back</p>\n</blockquote>\n<p>say a bit more -- can you extract the specific question?</p>",
        "id": 160223698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551983432
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> btw, any elaboration on where/how associated types are converted into predicates on traits would be be appreciated. I presume this is only during type checking, and not HIR lowering?</p>\n</blockquote>\n<p>I think this is done during the <code>predicates_of</code> query, let me go look</p>",
        "id": 160223722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551983450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> <a href=\"https://github.com/rust-lang/rust/blob/88f755f8a84df1d9e6b17cf10c96ae8b93481b2e/src/librustc_typeck/collect.rs#L2121-L2144\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/88f755f8a84df1d9e6b17cf10c96ae8b93481b2e/src/librustc_typeck/collect.rs#L2121-L2144\">this is where we convert the associated type bounds into trait bounds</a></p>",
        "id": 160223895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551983569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you see the Gist link? are their differences in object safety between the two desugarings?</p>",
        "id": 160226218,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551985152
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124069\">Alexander Regueiro</span> <a href=\"https://github.com/rust-lang/rust/blob/88f755f8a84df1d9e6b17cf10c96ae8b93481b2e/src/librustc_typeck/collect.rs#L2121-L2144\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/88f755f8a84df1d9e6b17cf10c96ae8b93481b2e/src/librustc_typeck/collect.rs#L2121-L2144\">this is where we convert the associated type bounds into trait bounds</a></p>\n</blockquote>\n<p>that makes perfect sense. I wonder, in the case we have associated type bounds within traits (i.e. within associated type definitions), should we leave things like <code>Iterator&lt;Item: Send&gt;</code> alone until typeck time? i.e. have an HIR representation for it?</p>",
        "id": 160226576,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551985301
    },
    {
        "content": "<p>seems easier...</p>",
        "id": 160226587,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551985311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw did you see the issue about trait alias I tagged you in recently?</p>",
        "id": 160235694,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551991327
    },
    {
        "content": "<blockquote>\n<p>btw did you see the issue about trait alias I tagged you in recently?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> unlikely, I've had no time for GH notifications in weeks :(</p>",
        "id": 160243920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997699
    },
    {
        "content": "<p>heh no worries</p>",
        "id": 160243933,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551997710
    },
    {
        "content": "<blockquote>\n<p>do you see the Gist link? are their differences in object safety between the two desugarings?</p>\n</blockquote>\n<p>do you mean <a href=\"https://gist.github.com/alexreg/f073d737ae1db10034082e1a3e9c906e#file-desugared-2-rs\" target=\"_blank\" title=\"https://gist.github.com/alexreg/f073d737ae1db10034082e1a3e9c906e#file-desugared-2-rs\">this gist</a>?</p>",
        "id": 160243954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> no? that links to something in wg-polonius</p>",
        "id": 160243994,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551997780
    },
    {
        "content": "<p>In that gist, <a href=\"http://desugared-2.rs\" target=\"_blank\" title=\"http://desugared-2.rs\">desugared-2.rs</a> doesn't look quite right</p>",
        "id": 160243997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997783
    },
    {
        "content": "<blockquote>\n<p>no? that links to something in wg-polonius</p>\n</blockquote>\n<p>so it does..fixed</p>",
        "id": 160244006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997801
    },
    {
        "content": "<p>in particular, <a href=\"http://desugared-2.rs\" target=\"_blank\" title=\"http://desugared-2.rs\">desugared-2.rs</a> says:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Self</span>::<span class=\"n\">Bar</span>: <span class=\"nb\">Send</span> <span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but I think it should be </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Self</span>::<span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span>: <span class=\"nb\">Send</span> <span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160244075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was just curious what the plan was for trait integrating my changes from that outstanding that detect multi-trait objects via trait aliases (which is permitted but ICEs right now!)</p>",
        "id": 160244093,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551997852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh, yes. centril already corrected that. makes sense.</p>",
        "id": 160244110,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551997865
    },
    {
        "content": "<p>is it otherwise equivalent insofar as object safety is concerned?</p>",
        "id": 160244120,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551997875
    },
    {
        "content": "<p>In any case, I think that .. there are definitely <em>potential</em> differences w/r/t object safety</p>",
        "id": 160244126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997880
    },
    {
        "content": "<p>at present, object types require all the associated types to be named in the object type</p>",
        "id": 160244149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997899
    },
    {
        "content": "<p>right</p>",
        "id": 160244168,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551997917
    },
    {
        "content": "<p>in principle, this restriction can be lifted, but it's tricky</p>",
        "id": 160244169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997918
    },
    {
        "content": "<p>doesn't the Self bound affect things too?</p>",
        "id": 160244213,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551997926
    },
    {
        "content": "<p>so I don't really see any way that the first desugar could be made object-safe</p>",
        "id": 160244222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997932
    },
    {
        "content": "<p>mhm</p>",
        "id": 160244228,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551997939
    },
    {
        "content": "<p>that said, the second one is not object safe either :)</p>",
        "id": 160244234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997941
    },
    {
        "content": "<p>and sort of for the same underlying reason</p>",
        "id": 160244246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997949
    },
    {
        "content": "<p>well, let me think</p>",
        "id": 160244260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997961
    },
    {
        "content": "<p>I take that back somewhat</p>",
        "id": 160244267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997971
    },
    {
        "content": "<p>I suspect the current object safety rules probably <em>would</em> reject it <em>but</em></p>",
        "id": 160244278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997982
    },
    {
        "content": "<p>I think it would be easier to accept it</p>",
        "id": 160244290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997985
    },
    {
        "content": "<p>in particular, in the first desugaring,</p>",
        "id": 160244296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551997994
    },
    {
        "content": "<p>yeah. I suppose there are plans to relax object safety rules in the near future?</p>",
        "id": 160244305,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998006
    },
    {
        "content": "<p>the compiler doesn't know that <code>_0</code> is really a \"type alias\", so to speak</p>",
        "id": 160244313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998010
    },
    {
        "content": "<p>i.e., it is <strong>always</strong> equal to the <code>Item</code></p>",
        "id": 160244321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998020
    },
    {
        "content": "<p>of <code>Self::Bar</code></p>",
        "id": 160244325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998025
    },
    {
        "content": "<p>I presume you've seen what dtolnay did with erased-serde? that's kind of interesting, and magical (almost)</p>",
        "id": 160244332,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998030
    },
    {
        "content": "<p>yeah</p>",
        "id": 160244338,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998036
    },
    {
        "content": "<p>whereas that is explicit in the second form, I feel like we could probably permit those sorts of where clauses in object safety and it would work out ok</p>",
        "id": 160244340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998041
    },
    {
        "content": "<p>we might even do so now, though I bet we don't</p>",
        "id": 160244386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998046
    },
    {
        "content": "<p>we have a kind of filter on where <code>Self</code> can appear, I think this falls outside the current rules, but I <strong>think</strong> (at least off hand...) that the rules could be extended to include this sort of case</p>",
        "id": 160244410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998070
    },
    {
        "content": "<p>yeah, I don't know; haven't tested... but I suspect not too</p>",
        "id": 160244412,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998072
    },
    {
        "content": "<p>okay :-)</p>",
        "id": 160244424,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998082
    },
    {
        "content": "<p>the basic idea is</p>",
        "id": 160244425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998083
    },
    {
        "content": "<p>if you were to replace <code>Self</code> with <code>dyn Foo&lt;Bar=X&gt;</code></p>",
        "id": 160244437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998097
    },
    {
        "content": "<p>would that cause a soundness problem of some kind or get us into \"existential types\"</p>",
        "id": 160244471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998122
    },
    {
        "content": "<p>in this case, if we did that, we would have <code>&lt;&lt;dyn Foo&lt;Bar=X&gt; as Foo&gt;::Bar as Iterator&gt;::Item: Send</code></p>",
        "id": 160244486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998143
    },
    {
        "content": "<p>the inner type there is equivalent to just <code>X</code></p>",
        "id": 160244491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998149
    },
    {
        "content": "<p>so you get <code>&lt;X as Iterator&gt;::Item: Send</code></p>",
        "id": 160244497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998154
    },
    {
        "content": "<p>basically, the only thing we are doing with <code>Self</code> is projecting associated types out of it</p>",
        "id": 160244554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998176
    },
    {
        "content": "<p>which we already permit</p>",
        "id": 160244556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998178
    },
    {
        "content": "<p>this is my intuition, anyway</p>",
        "id": 160244568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998185
    },
    {
        "content": "<p>(we permit it precisely because their values are all specified in the <code>dyn</code> type)</p>",
        "id": 160244578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998192
    },
    {
        "content": "<p>hmm</p>",
        "id": 160244601,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998208
    },
    {
        "content": "<p>makes sense, I think</p>",
        "id": 160244609,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998215
    },
    {
        "content": "<p>(whereas in the other desugaring, we would need to permit projecting an associated type out when its value is <strong>not</strong> specified in the <code>dyn</code> type)</p>",
        "id": 160244611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998217
    },
    {
        "content": "<p>yeah, which sounds harder</p>",
        "id": 160244626,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998233
    },
    {
        "content": "<p>would this require Chalk in either case?</p>",
        "id": 160244630,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998240
    },
    {
        "content": "<blockquote>\n<p>which we already permit</p>\n</blockquote>\n<p>in particular we permit things like <code>trait Trait where Self::Foo: Bar { .. }</code> to be object safe</p>",
        "id": 160244642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998248
    },
    {
        "content": "<blockquote>\n<p>would this require Chalk in either case?</p>\n</blockquote>\n<p>well, it's really an existential type sort of situation, I'd certainly rather reason about it in a Chalk-like setting, but I'm not really sure what would be required</p>",
        "id": 160244659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998268
    },
    {
        "content": "<p>it'd be kind of like scala's \"path-dependent types\"</p>",
        "id": 160244669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998281
    },
    {
        "content": "<p>it can certainly be left for a follow-up PR I'd imagine</p>",
        "id": 160244720,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998288
    },
    {
        "content": "<p>unless we desugared it somewhere</p>",
        "id": 160244722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998290
    },
    {
        "content": "<blockquote>\n<p>it can certainly be left for a follow-up PR I'd imagine</p>\n</blockquote>\n<p>what do you mean?</p>",
        "id": 160244727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998295
    },
    {
        "content": "<p>making it object-safe</p>",
        "id": 160244736,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998305
    },
    {
        "content": "<p>ah, ok, sure</p>",
        "id": 160244740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998308
    },
    {
        "content": "<blockquote>\n<p>(whereas in the other desugaring, we would need to permit projecting an associated type out when its value is <strong>not</strong> specified in the <code>dyn</code> type)</p>\n</blockquote>\n<p>this is more than PR :)</p>",
        "id": 160244745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998313
    },
    {
        "content": "<p>but leaving the object safety problem for later seems fine</p>",
        "id": 160244758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551998324
    },
    {
        "content": "<p>heh</p>",
        "id": 160244759,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998324
    },
    {
        "content": "<p>okay... good. but I agree with you, that reasoning about projecting associated types out of a dyn seems fine to me.</p>",
        "id": 160244812,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998367
    },
    {
        "content": "<p>we can note it on the tracking issue when I submit the PR (presuming it doesn't tackle that, which I don't think it will)</p>",
        "id": 160244842,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so... the question about desugaring during the typeck phase rather than HIR lowering -- does that make sense to you?</p>",
        "id": 160244921,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998412
    },
    {
        "content": "<p>(associated type bounds outside of traits would still be desugared in HIR lowering)</p>",
        "id": 160244940,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1551998427
    },
    {
        "content": "<blockquote>\n<p>so... the question about desugaring during the typeck phase rather than HIR lowering -- does that make sense to you?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> which question is that, sorry?</p>",
        "id": 160321820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552076228
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124069\">Alexander Regueiro</span> <a href=\"https://github.com/rust-lang/rust/blob/88f755f8a84df1d9e6b17cf10c96ae8b93481b2e/src/librustc_typeck/collect.rs#L2121-L2144\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/88f755f8a84df1d9e6b17cf10c96ae8b93481b2e/src/librustc_typeck/collect.rs#L2121-L2144\">this is where we convert the associated type bounds into trait bounds</a></p>\n</blockquote>\n<p>that makes perfect sense. I wonder, in the case we have associated type bounds within traits (i.e. within associated type definitions), should we leave things like <code>Iterator&lt;Item: Send&gt;</code> alone until typeck time? i.e. have an HIR representation for it?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this message I think. (there may have been another one)</p>",
        "id": 160321869,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552076277
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 160322635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552076848
    },
    {
        "content": "<p>Hmm</p>",
        "id": 160322638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552076851
    },
    {
        "content": "<p>I think I would expect to have a HIR representation for it, yes</p>",
        "id": 160322679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552076882
    },
    {
        "content": "<p>I don't see a \"reasonable desugaring\" apart from moving the bounds from the associated type up into the trait level</p>",
        "id": 160322717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552076910
    },
    {
        "content": "<p>and that doesn't .. 100% feel right to me, especially because in GAT-like cases I don't know that we can always do that</p>",
        "id": 160322735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552076933
    },
    {
        "content": "<p>can't always do what?</p>",
        "id": 160322874,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552077020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 160322878,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552077024
    },
    {
        "content": "<p>can't always readily do the desugaring at the HIR level</p>",
        "id": 160324269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552078174
    },
    {
        "content": "<p>maybe you can, but certainly if you were going to do the desugaring, it involves moving things to \"different parts of the IR\" -- it basically feels a bit too non-local for me</p>",
        "id": 160324350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552078206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ah yes, exactly. I mean, I think you <em>could</em> at least in the non-GAT case, but it would be messy</p>",
        "id": 160325073,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552078731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes, this is precisely my reasoning. :-)</p>",
        "id": 160325087,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552078741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> still happy with doing HIR-level desugaring for associated type bounds outside of traits though, yeah?</p>",
        "id": 160325115,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1552078769
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> -- your PR is almost ready, you were saying?</p>",
        "id": 161483267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553288285
    },
    {
        "content": "<p>yep!</p>",
        "id": 161483274,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553288291
    },
    {
        "content": "<p>I could do with some advice on a diagnostics message, but that's literally it</p>",
        "id": 161483284,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553288303
    },
    {
        "content": "<p>Dear <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span>, I was thinking that, instead of having me review this solo, maybe we could find somebody else to review it. It could be a good mentoring opportunity. We could do this many ways -- e.g., you could do a pre-pass, find questions, and then we can discuss them together. Or we could schedule some time to do a first review, etc. But I'd like to not be on the hook entirely :) especially as I'll be traveling a lot next week.</p>",
        "id": 161483331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553288345
    },
    {
        "content": "<p>I volunteer as tribute :P</p>",
        "id": 161483376,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1553288376
    },
    {
        "content": "<p>sounds good</p>",
        "id": 161483465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553288412
    },
    {
        "content": "<p>we can discuss exact strategy next week :)</p>",
        "id": 161483484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553288424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in the meanwhile I'll probably move on to investigating the impl Trait lifetime issue</p>",
        "id": 161483534,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553288467
    },
    {
        "content": "<p>hmm, ok, seems fine, but we should also consider what is best choice</p>",
        "id": 161483572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553288503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well you've not really been available for technical discussion the last couple of weeks, and it looks like you won't for at least 10 more days? maybe best for you just to look at it and give a nod or not, since you're so busy. :-)</p>",
        "id": 161484091,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1553288857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> cool; I made a shit tonne of tests for the PR for you to read :P</p>",
        "id": 161487971,
        "sender_full_name": "centril",
        "timestamp": 1553292308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay so I'm almost through with a pre-pass through the code</p>",
        "id": 164592526,
        "sender_full_name": "tmandry",
        "timestamp": 1556675088
    },
    {
        "content": "<p>maybe we can schedule time to chat through the \"interesting\" bits</p>",
        "id": 164592540,
        "sender_full_name": "tmandry",
        "timestamp": 1556675109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> happy to join you</p>",
        "id": 164598709,
        "sender_full_name": "centril",
        "timestamp": 1556684130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> when are you free to chat this week? I'm free from 1:30-6pm PST today, tomorrow, and most of wednesday</p>",
        "id": 165015705,
        "sender_full_name": "tmandry",
        "timestamp": 1557174167
    },
    {
        "content": "<p>I can also do friday morning</p>",
        "id": 165015946,
        "sender_full_name": "tmandry",
        "timestamp": 1557174357
    },
    {
        "content": "<p>Wednesday seems good</p>",
        "id": 165016009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557174379
    },
    {
        "content": "<p>I could do 12:30-13:30 Boston time</p>",
        "id": 165016047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557174419
    },
    {
        "content": "<p>that works</p>",
        "id": 165016348,
        "sender_full_name": "tmandry",
        "timestamp": 1557174652
    },
    {
        "content": "<p>can we please use UTC? :D</p>",
        "id": 165016380,
        "sender_full_name": "centril",
        "timestamp": 1557174679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> 16:30-17:30 UTC :)</p>",
        "id": 165016458,
        "sender_full_name": "tmandry",
        "timestamp": 1557174740
    },
    {
        "content": "<p>17:30 Monday, Central European Time (CET)  works for me</p>",
        "id": 165016504,
        "sender_full_name": "centril",
        "timestamp": 1557174783
    },
    {
        "content": "<p>(I mean wednesday)</p>",
        "id": 165016516,
        "sender_full_name": "centril",
        "timestamp": 1557174790
    },
    {
        "content": "<p>I can only do that one slot, basically, or possibly much later.</p>",
        "id": 165016747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557174974
    },
    {
        "content": "<p>So I think either</p>\n<ul>\n<li>12:30 UTC-04:00 or</li>\n<li>14:30 UTC-04:00</li>\n</ul>",
        "id": 165016807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557175039
    },
    {
        "content": "<p>not <em>that</em> much later</p>",
        "id": 165016812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557175043
    },
    {
        "content": "<p>17:30 CET == 16:30 UTC, so I think we're good</p>",
        "id": 165016816,
        "sender_full_name": "tmandry",
        "timestamp": 1557175048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I believe both times work for me</p>",
        "id": 165016890,
        "sender_full_name": "centril",
        "timestamp": 1557175095
    },
    {
        "content": "<p>but please make a calendar entry because I'm a forgetful person :D</p>",
        "id": 165016900,
        "sender_full_name": "centril",
        "timestamp": 1557175113
    },
    {
        "content": "<p>Oh, I didn't notice that <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> switched from UTC to CET =)</p>",
        "id": 165016906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557175124
    },
    {
        "content": "<p>ok</p>",
        "id": 165016907,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557175125
    },
    {
        "content": "<p>Looks like <a href=\"https://github.com/zulip/zulip/issues/5176\" target=\"_blank\" title=\"https://github.com/zulip/zulip/issues/5176\">https://github.com/zulip/zulip/issues/5176</a> might be close to landing :)</p>",
        "id": 165016951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557175167
    },
    {
        "content": "<p>/me hopes</p>",
        "id": 165016955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557175168
    },
    {
        "content": "<p>Hmm, maybe not</p>",
        "id": 165016967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557175187
    },
    {
        "content": "<p>...actually, can we do the second slot <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>? :)</p>",
        "id": 165017049,
        "sender_full_name": "tmandry",
        "timestamp": 1557175230
    },
    {
        "content": "<p>OK</p>",
        "id": 165017110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557175294
    },
    {
        "content": "<p>sent calendar invites</p>",
        "id": 165017120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557175307
    },
    {
        "content": "<p>cheers; btw, I haven't checked the implementation but I wrote a lot of the tests; per my second to last comment on the PR I think some more tests may be needed</p>",
        "id": 165017200,
        "sender_full_name": "centril",
        "timestamp": 1557175349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> are we using Zoom?</p>",
        "id": 165187567,
        "sender_full_name": "centril",
        "timestamp": 1557339690
    },
    {
        "content": "<p>would be nice</p>",
        "id": 165187574,
        "sender_full_name": "centril",
        "timestamp": 1557339697
    },
    {
        "content": "<p>That works for me. FYI I may be a few minutes late</p>",
        "id": 165187876,
        "sender_full_name": "tmandry",
        "timestamp": 1557339895
    },
    {
        "content": "<p>Okay I'm around <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span></p>",
        "id": 165188713,
        "sender_full_name": "tmandry",
        "timestamp": 1557340521
    },
    {
        "content": "<p>link to PR: <a href=\"https://github.com/rust-lang/rust/pull/57428\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57428\">https://github.com/rust-lang/rust/pull/57428</a></p>",
        "id": 165189231,
        "sender_full_name": "tmandry",
        "timestamp": 1557340911
    },
    {
        "content": "<p>Hey, I'm here</p>",
        "id": 165189306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557340947
    },
    {
        "content": "<p>Previous meeting ran over</p>",
        "id": 165189312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557340953
    },
    {
        "content": "<p>gimme a second</p>",
        "id": 165189341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557340984
    },
    {
        "content": "<p>ok <a href=\"https://mozilla.zoom.us/j/603998437\" target=\"_blank\" title=\"https://mozilla.zoom.us/j/603998437\">https://mozilla.zoom.us/j/603998437</a></p>",
        "id": 165189658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557341249
    },
    {
        "content": "<p>So I think that <a href=\"https://github.com/rust-lang/rust/pull/57428\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57428\">https://github.com/rust-lang/rust/pull/57428</a> is ready to land, but I'd prefer to leave an \"unresovled question\" with a link to the test case around nested quantification -- as I noted earlier I think it's probably fine as is, but I haven't had time to think deeply or examine the code about it and I don't know that I will for a bit. <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> or <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> do you have a link to the test? (I think maybe it was removed from the repo? I'd probably prefer to keep it in...)</p>",
        "id": 167423191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559763548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <a href=\"https://github.com/rust-lang/rust/pull/57428/commits/8b23ecf34225a916529e50ccc1eacacdcefe1c3d\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57428/commits/8b23ecf34225a916529e50ccc1eacacdcefe1c3d\">https://github.com/rust-lang/rust/pull/57428/commits/8b23ecf34225a916529e50ccc1eacacdcefe1c3d</a></p>",
        "id": 167423236,
        "sender_full_name": "centril",
        "timestamp": 1559763597
    },
    {
        "content": "<p>I guess as long as we keep it in the history we can link to that =)</p>",
        "id": 167423307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559763621
    },
    {
        "content": "<p>There is probably an alternate desugaring that would</p>",
        "id": 167423321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559763637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I would suggest preemptively copying the test =P</p>",
        "id": 167423333,
        "sender_full_name": "centril",
        "timestamp": 1559763659
    },
    {
        "content": "<p>and storing a backup elsewhere</p>",
        "id": 167423337,
        "sender_full_name": "centril",
        "timestamp": 1559763661
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">nested_bounds_desugared</span><span class=\"o\">&lt;</span><span class=\"n\">_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">D</span>: <span class=\"nb\">Clone</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_2</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_2</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span>: <span class=\"nc\">Lam</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">App</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR nested quantification of lifetimes [E0316]</span>\n<span class=\"w\">    </span><span class=\"n\">_0</span>: <span class=\"nc\">Debug</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167423339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559763661
    },
    {
        "content": "<p>basically that</p>",
        "id": 167423352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559763666
    },
    {
        "content": "<p>I think what I would prefer is to keep the test with an alternate desugaring</p>",
        "id": 167423364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559763684
    },
    {
        "content": "<p>(and hence no error)</p>",
        "id": 167423368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559763689
    },
    {
        "content": "<p>seems slightly more complicated</p>",
        "id": 167423382,
        "sender_full_name": "centril",
        "timestamp": 1559763711
    },
    {
        "content": "<p>I'm actually not even sure if we need more follow-up -- I mostly wanted to trace through the code to convince myself it was handling the binders correctly, I guess</p>",
        "id": 167423384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559763713
    },
    {
        "content": "<p>but sure</p>",
        "id": 167423385,
        "sender_full_name": "centril",
        "timestamp": 1559763714
    },
    {
        "content": "<p>maybe we should lift the syntactic restriction around nesting everywhere?</p>",
        "id": 167423445,
        "sender_full_name": "centril",
        "timestamp": 1559763733
    },
    {
        "content": "<p>plausibly</p>",
        "id": 167423455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559763740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> there are other tests missing: <a href=\"https://github.com/rust-lang/rust/pull/57428#issuecomment-489336637\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57428#issuecomment-489336637\">https://github.com/rust-lang/rust/pull/57428#issuecomment-489336637</a></p>",
        "id": 167423473,
        "sender_full_name": "centril",
        "timestamp": 1559763751
    },
    {
        "content": "<p>but we can add those later</p>",
        "id": 167423479,
        "sender_full_name": "centril",
        "timestamp": 1559763757
    },
    {
        "content": "<p>a checkbox for that would be nice</p>",
        "id": 167423484,
        "sender_full_name": "centril",
        "timestamp": 1559763760
    },
    {
        "content": "<p>sounds right</p>",
        "id": 167423627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559763873
    },
    {
        "content": "<p>it seems like we should land this branch</p>",
        "id": 167423635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559763877
    },
    {
        "content": "<p>I'd be happy with some checkboxes listing tests we want (possibly including the above one)</p>",
        "id": 167423642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559763887
    },
    {
        "content": "<p>and not blocking this branch anymore</p>",
        "id": 167423644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559763892
    },
    {
        "content": "<p>( maybe you or <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> can do that? )</p>",
        "id": 167423656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559763904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Yep; I've been meaning to write those tests but as always one wishes one had 4 hands :P</p>",
        "id": 167423826,
        "sender_full_name": "centril",
        "timestamp": 1559763991
    },
    {
        "content": "<p>I agree we should land ASAP</p>",
        "id": 167423833,
        "sender_full_name": "centril",
        "timestamp": 1559763997
    },
    {
        "content": "<p>and then iterate</p>",
        "id": 167423836,
        "sender_full_name": "centril",
        "timestamp": 1559764002
    },
    {
        "content": "<p>just making a list of the tests that are needed seems fine</p>",
        "id": 167423896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559764081
    },
    {
        "content": "<p>and putting them in the tracking issue header</p>",
        "id": 167423941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559764090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> sounds fair on both counts</p>",
        "id": 167424171,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1559764293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  added to the tracking issue, <a href=\"https://github.com/rust-lang/rust/issues/52662\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52662\">https://github.com/rust-lang/rust/issues/52662</a></p>",
        "id": 167424674,
        "sender_full_name": "centril",
        "timestamp": 1559764653
    },
    {
        "content": "<p>seems like I broke the branch <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> -- kind of disappointed to learn that a function named <code>xxx_inner</code> is public</p>",
        "id": 167425107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559764935
    },
    {
        "content": "<p>but I guess that's most likely pre-existing</p>",
        "id": 167425114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559764940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  btw, did y'all split the feature gates in the end?</p>",
        "id": 167425180,
        "sender_full_name": "centril",
        "timestamp": 1559764994
    },
    {
        "content": "<p>(dyn, not dyn)</p>",
        "id": 167425185,
        "sender_full_name": "centril",
        "timestamp": 1559764998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah that was pre-existing heh. inner is a bad name for it I think.</p>",
        "id": 167425864,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1559765445
    },
    {
        "content": "<p>want me to change it?</p>",
        "id": 167425871,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1559765449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> thanks fro adding the checkboxoes</p>",
        "id": 167425928,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1559765486
    },
    {
        "content": "<p>np</p>",
        "id": 167425944,
        "sender_full_name": "centril",
        "timestamp": 1559765502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> should I just make it <code>pub(super)</code> for now?</p>",
        "id": 167426048,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1559765563
    },
    {
        "content": "<p>ah, that's what it was beforee</p>",
        "id": 167426619,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1559765918
    },
    {
        "content": "<p>just remove this commit for now?</p>",
        "id": 167426626,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1559765926
    },
    {
        "content": "<p>sure</p>",
        "id": 167427206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559766345
    }
]