[
    {
        "content": "<p>1- There are chalk-specific compiletests in <code>chalkify/</code>, the rest of tests aren't run with chalk at all in CI, right? However, many of them do pass with -Zchalk. Would it make sense to have some header saying \"this test should pass both without and with chalk\" so that if one regresses, we notice?<br>\n2- Is there a way to see which (non-chalkify) tests start/stop passing after a change to chalk? the \"compare\" thing compares \"non-chalk\" vs \"chalk\", I want to compare \"chalk\" vs \"chalk with patch\"</p>",
        "id": 273703752,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646165779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348152\">Dario Nieuwenhuis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/chalk.20compiletests/near/273703752\">said</a>:</p>\n<blockquote>\n<p>Would it make sense to have some header saying \"this test should pass both without and with chalk\" so that if one regresses, we notice?</p>\n</blockquote>\n<p>This is just running <code>compare-mode=chalk</code> in CI in combination with  <code>ignore-compare-mode-chalk</code> where needed. Too many tests don't pass right now though for this to be realistic</p>",
        "id": 273703999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646165930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348152\">Dario Nieuwenhuis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/chalk.20compiletests/near/273703752\">said</a>:</p>\n<blockquote>\n<p>I want to compare \"chalk\" vs \"chalk with patch\"</p>\n</blockquote>\n<p>This is just running <code>compare-mode=chalk</code> with your patch. If there is a change in test output, then <code>*.chalk.stderr</code> will change</p>",
        "id": 273704107,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646165986
    },
    {
        "content": "<p>What I do locally for such situations is to build once before the patch and put that command line text into a file that I stage. Further changes will now give me a diff, which works really well for the ui test summary of the failing tests</p>",
        "id": 273704259,
        "sender_full_name": "oli",
        "timestamp": 1646166052
    },
    {
        "content": "<p><code>compare-mode=chalk</code> will run everything and then spit endless output of all the tests that don't pass with chalk. I'd like to ignore all tests that didn't pass before or after</p>",
        "id": 273704329,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646166084
    },
    {
        "content": "<p>oh the diff is a nice trick, will try that, thanks!</p>",
        "id": 273704345,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646166093
    },
    {
        "content": "<p>So, you want to know what tests get fixed or start failing?</p>",
        "id": 273704457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646166140
    },
    {
        "content": "<p>exactly</p>",
        "id": 273704477,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646166147
    },
    {
        "content": "<p>I mean, you can always save the failing tests to a file and then do some filtering with <em>insert your favorite scripting language</em></p>",
        "id": 273704637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646166230
    },
    {
        "content": "<p>like, pick a broken test that looks feasible to fix to me as a noob, fix it, then check it at least doesn't break others</p>",
        "id": 273704724,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646166250
    },
    {
        "content": "<p>which is why I was asking about non-chalk tests: if I fix one what do I do to make sure it doesn't regress, copy it to <code>chalkify/</code>?</p>",
        "id": 273704880,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646166318
    },
    {
        "content": "<p>In general, in the past, I've just looked at the # of tests passing/failing in compare-mode=chalk as a measure</p>",
        "id": 273704894,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646166321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348152\">Dario Nieuwenhuis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/chalk.20compiletests/near/273704880\">said</a>:</p>\n<blockquote>\n<p>which is why I was asking about non-chalk tests: if I fix one what do I do to make sure it doesn't regress, copy it to <code>chalkify/</code>?</p>\n</blockquote>\n<p>Regress with <code>-Z chalk</code> but get fixed without? Either <code>/chalkify</code> or just not worry about it</p>",
        "id": 273705033,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646166379
    },
    {
        "content": "<p>okay!</p>",
        "id": 273705058,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646166406
    },
    {
        "content": "<p>thanks :D</p>",
        "id": 273705062,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646166409
    },
    {
        "content": "<p>many failures are just different diagnostics:</p>\n<div class=\"codehilite\"><pre><span></span><code>-   error[E0271]: type mismatch resolving `&lt;ModelU as Vehicle&gt;::Color == Black`\n+   error[E0280]: the requirement `&lt;ModelU as Vehicle&gt;::Color == Black` is not satisfied\n</code></pre></div>",
        "id": 273726256,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646176407
    },
    {
        "content": "<p>or same diagnostics but different spans</p>",
        "id": 273726339,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646176454
    },
    {
        "content": "<p>That's not quite the same error</p>",
        "id": 273726347,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646176466
    },
    {
        "content": "<p>what's the difference?</p>",
        "id": 273726361,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646176482
    },
    {
        "content": "<p>oh, \"type mismatch\" means it knows <code>&lt;ModelU as Vehicle&gt;::Color</code> is something else, while \"not satisfied\" means it doesn't know</p>",
        "id": 273726508,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646176577
    },
    {
        "content": "<p>okay, nevermind then! D:</p>",
        "id": 273726527,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646176597
    },
    {
        "content": "<p>hmm, well actually, not sure</p>",
        "id": 273726780,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646176788
    },
    {
        "content": "<p>I was thinking the first is unable to normalize, whereas the second normalizes but isn't the same</p>",
        "id": 273726841,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646176806
    },
    {
        "content": "<p>full diff is </p>\n<div class=\"codehilite\"><pre><span></span><code>-   error[E0271]: type mismatch resolving `&lt;ModelT as Vehicle&gt;::Color == Blue`\n+   error[E0280]: the requirement `&lt;ModelT as Vehicle&gt;::Color == Blue` is not satisfied\n2     --&gt; $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:31:10\n3      |\n4   LL | fn b() { blue_car(ModelT); }\n\n-      |          ^^^^^^^^ type mismatch resolving `&lt;ModelT as Vehicle&gt;::Color == Blue`\n+      |          ^^^^^^^^\n6      |\n-   note: expected this to be `Blue`\n-     --&gt; $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:16:40\n-      |\n-   LL | impl Vehicle for ModelT { type Color = Black; }\n-      |                                        ^^^^^\n12  note: required by a bound in `blue_car`\n13    --&gt; $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:27:19\n14     |\n\n15  LL | fn blue_car&lt;C:Car&lt;Color=Blue&gt;&gt;(c: C) {\n16     |                   ^^^^^^^^^^ required by this bound in `blue_car`\n17\n-   error[E0271]: type mismatch resolving `&lt;ModelU as Vehicle&gt;::Color == Black`\n+   error[E0280]: the requirement `&lt;ModelU as Vehicle&gt;::Color == Black` is not satisfied\n19    --&gt; $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:10\n20     |\n21  LL | fn c() { black_car(ModelU); }\n\n-      |          ^^^^^^^^^ type mismatch resolving `&lt;ModelU as Vehicle&gt;::Color == Black`\n+      |          ^^^^^^^^^\n23     |\n-   note: expected this to be `Black`\n-     --&gt; $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:21:40\n-      |\n-   LL | impl Vehicle for ModelU { type Color = Blue; }\n-      |                                        ^^^^\n29  note: required by a bound in `black_car`\n30    --&gt; $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:24:20\n31     |\n\n34\n35  error: aborting due to 2 previous errors\n36\n-   For more information about this error, try `rustc --explain E0271`.\n38\n</code></pre></div>",
        "id": 273726923,
        "sender_full_name": "Dario Nieuwenhuis",
        "timestamp": 1646176864
    },
    {
        "content": "<p>not sure. Would have to look deeper</p>",
        "id": 273731604,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646179384
    }
]