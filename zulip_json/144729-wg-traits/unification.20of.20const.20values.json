[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> :</p>\n<p>I am looking at the code that handles unification of const values, and I have a question. <a href=\"https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src/librustc/ty/relate.rs#L575-L582\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e3cb9ea15a2082f39d4d4f10a22e779701dd0d64/src/librustc/ty/relate.rs#L575-L582\">Currently it does this</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">a_val</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"n\">ConstValue</span>::<span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">Scalar</span>::<span class=\"n\">Raw</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">b_val</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">a_val</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">b_val</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">mk_const</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">val</span>: <span class=\"nc\">a_val</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ty</span>: <span class=\"nc\">a</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This kind of surprises me. I would expect two scalars to be relatable, but this seems to \"equate\" a scalar with any other constant value. <em>Oh</em>, I see, it's relating <code>a_val == b_val</code></p>",
        "id": 177525581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570459371
    },
    {
        "content": "<p>I guess it would be equivalent to do something like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"n\">ConstValue</span>::<span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">a_val</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">..),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">constValue</span>::<span class=\"n\">Scalar</span><span class=\"p\">(</span><span class=\"n\">b_val</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">..)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">a_val</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">b_val</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 177525649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570459413
    },
    {
        "content": "<p>I guess this FIXME answers my next question:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"c1\">// FIXME(const_generics): we should either handle `Scalar::Ptr` or add a comment</span>\n<span class=\"w\">        </span><span class=\"c1\">// saying that we&#39;re not handling it intentionally.</span>\n</pre></div>\n\n\n<p>which was basically \"what about Ptr?\"</p>",
        "id": 177525810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570459502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>: yes, that's right â€” what you've written is clearer</p>",
        "id": 177570385,
        "sender_full_name": "varkor",
        "timestamp": 1570490411
    },
    {
        "content": "<p>see <a href=\"https://github.com/rust-lang/rust/pull/64986/files#diff-af1c8bc6ae3623b749b5aebeaa1e0bffR575-R578\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64986/files#diff-af1c8bc6ae3623b749b5aebeaa1e0bffR575-R578\">https://github.com/rust-lang/rust/pull/64986/files#diff-af1c8bc6ae3623b749b5aebeaa1e0bffR575-R578</a> also, which refactors that method a little bit</p>",
        "id": 177570393,
        "sender_full_name": "varkor",
        "timestamp": 1570490427
    },
    {
        "content": "<p>it seems more readable there</p>",
        "id": 177570417,
        "sender_full_name": "varkor",
        "timestamp": 1570490465
    }
]