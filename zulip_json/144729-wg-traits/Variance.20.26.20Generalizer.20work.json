[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218710\">@David Ross</span>  and I have been working on on the <a href=\"https://github.com/rust-lang/chalk/issues/365\">.chalk syntax writer</a> for the last couple months. While there are still remaining work items for the syntax writer, we are interested in branching out into some of the core solver functionality.  Does anyone have a suggestion for a good \"second\" issue that is a little more advanced, focused on the solver code, and has a clear direction to head in?</p>",
        "id": 206377895,
        "sender_full_name": "Super Tuple",
        "timestamp": 1596946540
    },
    {
        "content": "<p>Hmm</p>",
        "id": 206409351,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597002952
    },
    {
        "content": "<p>The \"has a clear direction\" point is probably the hardest to satisfy</p>",
        "id": 206409392,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597002981
    },
    {
        "content": "<p>It would be nice to get the Variance work pushed over the edge: <a href=\"https://github.com/rust-lang/chalk/pull/520\">https://github.com/rust-lang/chalk/pull/520</a></p>",
        "id": 206409401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003025
    },
    {
        "content": "<p>I don't have a ton of time at the moment</p>",
        "id": 206409409,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003057
    },
    {
        "content": "<p>I think the big thing that needs to be done for that is porting the Generalizer from rustc</p>",
        "id": 206409452,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003103
    },
    {
        "content": "<p>And tests</p>",
        "id": 206409463,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003136
    },
    {
        "content": "<p>There's also the canonicalization of placeholders</p>",
        "id": 206409472,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003179
    },
    {
        "content": "<p>Both <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> and I have a branch for that though that only needs a bit of work</p>",
        "id": 206409476,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003199
    },
    {
        "content": "<p>Maybe specialization support?</p>",
        "id": 206409526,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003223
    },
    {
        "content": "<p>But I really don't know how much support is there already/what the status is and what needs to be done</p>",
        "id": 206409540,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would know more</p>",
        "id": 206409541,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003282
    },
    {
        "content": "<p>(issue <a href=\"https://github.com/rust-lang-nursery/chalk/issues/9\">chalk#9</a>)</p>",
        "id": 206409546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003308
    },
    {
        "content": "<p>If you two are interested, there's a some work on the rustc side to do</p>",
        "id": 206409588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003344
    },
    {
        "content": "<p>some towards to \"type library\"</p>",
        "id": 206409593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003374
    },
    {
        "content": "<p>but also, region/lifetime stuff (specifically around late-bound regions and hrtb),</p>",
        "id": 206409660,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003559
    },
    {
        "content": "<p>also, around <code>Param</code>s and what to do with those</p>",
        "id": 206409699,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003584
    },
    {
        "content": "<p>There's also changing <code>RustIrDatabase</code> to be \"modular\" (<a href=\"https://github.com/rust-lang-nursery/chalk/issues/506\">chalk#506</a>), which essentially means removing a lot of the structs in <code>rust_ir</code> and make <code>RustIrDatabase</code> returns bits and pieces as needed. Similar to the queries in <code>TyCtxt</code></p>",
        "id": 206409766,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597003736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> Thanks for listing the options, we looked at a couple of them, and we are interested in taking on the Variance work.</p>",
        "id": 207047109,
        "sender_full_name": "Super Tuple",
        "timestamp": 1597538734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271698\">@Super Tuple</span> oh nice!</p>",
        "id": 207154447,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597676556
    },
    {
        "content": "<p>Um, let me make a note to myself to write up some mentoring notes for this sometime this week</p>",
        "id": 207154504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597676580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> We've rebased onto master, and are trying to figure out more about Generalizer really is and what's missing about it in chalk. However, we're having a really hard time coming up with failing test cases - any tips?</p>\n<p>I think we've identified unify_var_ty (at <a href=\"https://github.com/rust-lang/chalk/blob/99b2db851029ea7b4d25b337d8f5d71d324a8f31/chalk-solve/src/infer/unify.rs#L282\">https://github.com/rust-lang/chalk/blob/99b2db851029ea7b4d25b337d8f5d71d324a8f31/chalk-solve/src/infer/unify.rs#L282</a>) as the thing which needs to change for this.</p>\n<p>However, we're stuck at the step of figuring out exactly why the current code is wrong. We've both attempted to create failing tests, since that would be an easy proof of wrongness/our correcting it, but... that's been less than successful.</p>\n<p>I've tried to port <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/type-infer-generalize-ty-var.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/type-infer-generalize-ty-var.rs</a> over in order to get a failing chalk test, but actually turning those expressions it into chalk syntax is difficult. And <span class=\"user-mention\" data-user-id=\"271698\">@Super Tuple</span> has been trying to create fresh test cases which fail</p>",
        "id": 207749210,
        "sender_full_name": "David Ross",
        "timestamp": 1598144122
    },
    {
        "content": "<p>Let me look at this tomorrow. I had planned to write some notes on this earlier this week, but didn't get to it. Sorry :(</p>",
        "id": 207751357,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598148530
    },
    {
        "content": "<p>Just quickly (if either of you see this, but I am on mobile): the Generalizer is in rustc (don't remember exactly where atm)</p>",
        "id": 207751363,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598148578
    },
    {
        "content": "<p>I'll go into a bit more detail tomorrow, but IIRC, we need it because of unifying something but I don't remember what exactly atm</p>",
        "id": 207751408,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598148634
    },
    {
        "content": "<p>I too, was a bit lacking on test cases. In general, one area here that needs work is defining a system to actually defining variance of types in tests, then testing that those variances are upheld</p>",
        "id": 207751419,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598148719
    },
    {
        "content": "<p>I don't know how around <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> will be next week, but maybe he can come up with a few test cases. I'll look at that linked test tomorrow too</p>",
        "id": 207751462,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598148771
    },
    {
        "content": "<p>Alright, I didn't get to this again this week</p>",
        "id": 208449469,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598728693
    },
    {
        "content": "<p>but I'll write some now</p>",
        "id": 208449470,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598728698
    },
    {
        "content": "<p>The<code>Generalizer</code> that needs to be ported is here: <a href=\"https://github.com/rust-lang/rust/blob/668ef72f4429059240ee361a2f0f748558a5326f/src/librustc_infer/infer/combine.rs#L415\">https://github.com/rust-lang/rust/blob/668ef72f4429059240ee361a2f0f748558a5326f/src/librustc_infer/infer/combine.rs#L415</a></p>",
        "id": 208449504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598728791
    },
    {
        "content": "<p>And it would be used here: <a href=\"https://github.com/rust-lang/chalk/blob/af079c010a5569c99ac5f7afd3f4b6ecb0ca9d27/chalk-solve/src/infer/unify.rs#L129\">https://github.com/rust-lang/chalk/blob/af079c010a5569c99ac5f7afd3f4b6ecb0ca9d27/chalk-solve/src/infer/unify.rs#L129</a></p>",
        "id": 208449962,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598729452
    },
    {
        "content": "<p>This blog post from Niko is helpful: <a href=\"http://smallcultfollowing.com/babysteps/blog/2014/07/09/an-experimental-new-type-inference-scheme-for-rust/\">http://smallcultfollowing.com/babysteps/blog/2014/07/09/an-experimental-new-type-inference-scheme-for-rust/</a></p>",
        "id": 208450030,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598729523
    },
    {
        "content": "<p>The <code>type-infer-generalize-ty-var</code> test is good to port</p>",
        "id": 208450049,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598729597
    },
    {
        "content": "<p>It would be interesting to try to port the <code>println!()</code> case</p>",
        "id": 208450108,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598729698
    },
    {
        "content": "<p>Specifically this case: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/chalkify/println.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/chalkify/println.rs</a></p>",
        "id": 208450195,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598729789
    },
    {
        "content": "<p>Though, that passes using the <em>current</em> PR</p>",
        "id": 208450200,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598729800
    },
    {
        "content": "<p>so, I'm not sure what exactly would fail without the <code>Generalizer</code></p>",
        "id": 208450219,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598729821
    },
    {
        "content": "<p>Here's another test: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/regions/regions-scope-chain-example.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/regions/regions-scope-chain-example.rs</a></p>",
        "id": 208450945,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598730840
    },
    {
        "content": "<p>Hmm, I wonder how worth it would be to just see how many tests in <a href=\"https://github.com/rust-lang/rust/tree/master/src/test/ui/regions\">https://github.com/rust-lang/rust/tree/master/src/test/ui/regions</a> pass (in the rustc integration) with/without the subtyping changes and with/without the <code>Generlizer</code></p>",
        "id": 208451272,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598731239
    },
    {
        "content": "<p>But yeah, any tests in that dir with \"subtyping\" probably should have some related test in Chalk</p>",
        "id": 208451293,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598731287
    },
    {
        "content": "<p>Thanks for that info. We weren't able to go through it in detail yet, but it looks very useful!</p>\n<p>While we didn't spend much time working on chalk today, we did spend some time trying to figure out how to port the regions scope chain example, but we didn't get very far. Ultimately, I think we need to learn quite a bit more about lowering to port these tests, which we will work on.</p>\n<p>Next week we are planning to try and implement the generalizer logic w/o test cases. We will use the rustc code you linked, rather than working out what is needed based on test cases.</p>",
        "id": 208470583,
        "sender_full_name": "Super Tuple",
        "timestamp": 1598767366
    },
    {
        "content": "<p>No problem! Let me know if there's any other questions.</p>",
        "id": 208471003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598768298
    },
    {
        "content": "<p>Since we've been having quite a hard time figuring out the rustc generalizer tests, and haven't gotten tests from <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, we've just worked today on writing a rough draft.</p>\n<p>We're currently stuck on an issue with the way we deal with universes, but should be able to put more time into that next week! It's going a lot faster now that we're working on actually writing code, rather than trying N different ways to understand and port the rustc generalizer tests to chalk.</p>",
        "id": 209918390,
        "sender_full_name": "David Ross",
        "timestamp": 1599982027
    },
    {
        "content": "<p>I was hoping to make some tests today</p>",
        "id": 210059158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600115544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218710\">@David Ross</span>should I be looking at <a href=\"https://github.com/rust-lang/chalk/pull/609\">https://github.com/rust-lang/chalk/pull/609</a> ?</p>",
        "id": 210059267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600115601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that's the right PR</p>",
        "id": 210061052,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600116460
    },
    {
        "content": "<p>So how do we specify the variance for structs btw?</p>",
        "id": 210067909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600120434
    },
    {
        "content": "<p>or did we not implement that yet in chalk :)</p>",
        "id": 210067912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600120439
    },
    {
        "content": "<p>ok I have to kick off but I'll push a few tests</p>",
        "id": 210069092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600121373
    },
    {
        "content": "<p>so far I think it is <em>mostly</em> performing as expecte</p>",
        "id": 210069102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600121389
    },
    {
        "content": "<p>I need to sit down and make more rigorous tests</p>",
        "id": 210069109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600121396
    },
    {
        "content": "<p>Re variance for structs: there's a method <code>adt_variance</code> on the new <code>UnificationDatabase</code> trait which we call for determining this. It's hard coded to \"Invariant\" on everything in chalk, though I imagine we could also calculate it based on struct fields?</p>",
        "id": 210074111,
        "sender_full_name": "David Ross",
        "timestamp": 1600125372
    },
    {
        "content": "<p>Well, for tests, we need to be able to define the variance of specific adts. That's just not implemented yet</p>",
        "id": 210083065,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600134368
    },
    {
        "content": "<p>probably we want to be able to write it out in the syntax, e.g., <code>struct Foo&lt;+T&gt;</code> (for covariant)</p>",
        "id": 210126807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600175541
    },
    {
        "content": "<p>the usual notation is <code>+</code> (co), <code>-</code> (contra) and <code>=</code>(in)</p>",
        "id": 210126825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600175554
    },
    {
        "content": "<p>Thanks for adding the test to the PR! We didn't get past fixing the universes issue, but once that has been resolved, we can work towards adding variance annotations.</p>",
        "id": 211404298,
        "sender_full_name": "Super Tuple",
        "timestamp": 1601193651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271698\">@Super Tuple</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> do you need help tracking down this universes issue, what is it exactly?</p>",
        "id": 211679253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> It's mostly some failing tests we were/are failing to figure out - specifically <code>dyn_lifetime_bound</code>. We're handling generalizing <code>dyn Trait</code> badly, in a way that ruins its structure.</p>\n<p>I think we're on a track to solve it, but if we don't get it done by the end of today I'll send an update with everything we've got so far.</p>",
        "id": 212189064,
        "sender_full_name": "David Ross",
        "timestamp": 1601757923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yes, some help understanding what is going on would definitely give us a boost. Do you think it would be possible to have a synchronous discussion about the generalizer? Would the hour after the Tuesday meeting work for you?</p>",
        "id": 212207402,
        "sender_full_name": "Super Tuple",
        "timestamp": 1601790164
    },
    {
        "content": "<p>I wonder if there is a subset of <a href=\"https://github.com/rust-lang-nursery/chalk/issues/609\">chalk#609</a> that we can get merged into master. I know at least with my original PR, it fixes quite a bit of the rustc test suite</p>",
        "id": 212241114,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601844480
    },
    {
        "content": "<p>I think we could? Specifically, removing the generalizer commit and rebasing it should be pretty simple. Adding in the generalizer correctly without breaking existing tests has been the hardest part of this, and the code before that commit works (and passes nikmatsakis's added tests).</p>",
        "id": 212294223,
        "sender_full_name": "David Ross",
        "timestamp": 1601902287
    },
    {
        "content": "<p>Can we do that? I didn't know that the code before the generalizer was added passes the tests</p>",
        "id": 212302665,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601906445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271698\">@Super Tuple</span> the hour after the meeting doesn't work this week but</p>",
        "id": 212476459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602014006
    },
    {
        "content": "<p>I could schedule some time for friday perhaps, or next monday</p>",
        "id": 212476465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602014011
    },
    {
        "content": "<p>I think scheduling time is a good idea</p>",
        "id": 212476477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602014020
    },
    {
        "content": "<p>I am working to make Mondays (I think) my \"traits time\"</p>",
        "id": 212476493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602014025
    },
    {
        "content": "<p>stuff keeps coming up but I'm hopeful it will work \"Any Day Now\"</p>",
        "id": 212476510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602014033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Both Monday and Friday should work. Friday would have the advantage of proceeding <span class=\"user-mention\" data-user-id=\"218710\">@David Ross</span> and I's work time on Saturday.</p>",
        "id": 212479411,
        "sender_full_name": "Super Tuple",
        "timestamp": 1602015266
    },
    {
        "content": "<p>let's schedule some time on friday then</p>",
        "id": 212480252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602015594
    },
    {
        "content": "<p>afternoon Eastern time ok?</p>",
        "id": 212480362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602015636
    },
    {
        "content": "<p>I can do sometime after 3pm EST on Friday. <span class=\"user-mention\" data-user-id=\"218710\">@David Ross</span> What works for you?</p>",
        "id": 212480647,
        "sender_full_name": "Super Tuple",
        "timestamp": 1602015797
    },
    {
        "content": "<p>I'm going to block out 3pm-5pm as another \"chalk time\"</p>",
        "id": 212483364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602017129
    },
    {
        "content": "<p>so y'all can ping me then</p>",
        "id": 212483399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602017147
    },
    {
        "content": "<p>hopefully that works</p>",
        "id": 212483405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602017149
    },
    {
        "content": "<p>Don't know if still planning on meeting today <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"271698\">@Super Tuple</span> <span class=\"user-mention\" data-user-id=\"218710\">@David Ross</span>, but I'm around too</p>",
        "id": 212864164,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602270271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm here! I haven't received positive confirmation from <span class=\"user-mention\" data-user-id=\"218710\">@David Ross</span> If he is going to make it.</p>",
        "id": 212864274,
        "sender_full_name": "Super Tuple",
        "timestamp": 1602270344
    },
    {
        "content": "<p>Niko doesn't seem to be on</p>",
        "id": 212864347,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602270366
    },
    {
        "content": "<p>But don't know if you saw, but I added a commit to your PR</p>",
        "id": 212864363,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602270381
    },
    {
        "content": "<p>For specifying the variance of adts and fn_defs in tests</p>",
        "id": 212864386,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602270402
    },
    {
        "content": "<p>I haven't seen that - I'll take a look at it now.</p>",
        "id": 212864744,
        "sender_full_name": "Super Tuple",
        "timestamp": 1602270642
    },
    {
        "content": "<p>Let me know if you have any questions in general here</p>",
        "id": 212865445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602271150
    },
    {
        "content": "<p>Even if <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> isn't around, I <em>might</em> be able to answer some</p>",
        "id": 212865456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602271165
    },
    {
        "content": "<p>We made progress fixing the issues uncovered by the existing tests today, only four of the tests are failing now.</p>\n<p>Three of them are producing the correct result, albeit the generated lifetime constraints don't match. Is the difference in lifetime constraints an issue? If so, how should we approach fixing them?</p>\n<div class=\"codehilite\"><pre><span></span><code>test::existential_types::dyn_associated_type_binding\ntest::existential_types::dyn_binders_reverse\ntest::unify::forall_equality\n</code></pre></div>\n\n\n<p>We've also temporarily added two simplified versions of the failing tests to the PR for debugging purposes</p>\n<div class=\"codehilite\"><pre><span></span><code>test::unify::forall_equality_solveable_simple\ntest::unify::forall_equality_unsolveable_simple\n</code></pre></div>\n\n\n<p>The other failing test is a lowering involving specialization (<code>test::coherence::overlapping_assoc_types</code>). Chalk attempts to solve two goals to prove the impl is a specialization, one of which is supposed to succeed. However, neither of them are succeeding, causing the test to fail. We extracted the goal into a test, however, the test produced the expected result! We believe this may be because the solver isn't fresh when doing the tests like it is during specialization checks, but haven't confirmed yet.</p>",
        "id": 212950562,
        "sender_full_name": "Super Tuple",
        "timestamp": 1602395575
    },
    {
        "content": "<p>For reference, full test output: <a href=\"https://gist.github.com/daboross/d93c33841a3707dbe08e2ee919d39435\">https://gist.github.com/daboross/d93c33841a3707dbe08e2ee919d39435</a>, and output from each test with CHALK_DEBUG set: <a href=\"https://gist.github.com/daboross/0d0cd361b0fac60fa40e108a05595c5d\">https://gist.github.com/daboross/0d0cd361b0fac60fa40e108a05595c5d</a></p>",
        "id": 212950716,
        "sender_full_name": "David Ross",
        "timestamp": 1602395913
    },
    {
        "content": "<p>As a last note - the fix for the issue we were stuck on last week, about universes, ended up being deceptively simple. We were generalizing the <code>Self</code> parameter implicit in <code>dyn Trait</code> types, and not generalizing it fixed that.</p>",
        "id": 212950754,
        "sender_full_name": "David Ross",
        "timestamp": 1602396002
    },
    {
        "content": "<p>Some of the new lifetime constraints look wrong. I've left a comment on the PR explaining a change to<code>relate_binders</code> that should fix this.</p>",
        "id": 212962559,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602417353
    },
    {
        "content": "<p>Ooh nice! I'm gonna pull the branch locally and see how those changes affect tests</p>",
        "id": 212981637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602450347
    },
    {
        "content": "<p>Hey y'all I'm so sorry, something last minute came up on Friday, I've been meaning to come on and apologize. I do expect to be around later today and will review and leave comments.</p>",
        "id": 213040348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602510527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> btw I'm finishing up a few tasks from lang-team meeting but I plan to do some chalk stuff at ~4:30</p>",
        "id": 213082110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1602534096
    },
    {
        "content": "<p>Awesome. I'm looking over the variance PR.</p>",
        "id": 213082182,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602534131
    },
    {
        "content": "<p>Okay, so I pulled this branch</p>",
        "id": 213089882,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602539488
    },
    {
        "content": "<p>There are a few tests failing:</p>",
        "id": 213089885,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602539495
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    test::existential_types::dyn_associated_type_binding\n    test::existential_types::dyn_binders_reverse\n    test::unify::forall_equality\n    test::unify::forall_equality_solveable_simple\n    test::unify::forall_equality_unsolveable_simple\n</code></pre></div>",
        "id": 213089889,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602539499
    },
    {
        "content": "<p><code>dyn_binders_reverse</code> actually <em>fixes</em> the test, since it's broken for SLG because of <a href=\"https://github.com/rust-lang-nursery/chalk/issues/234\">chalk#234</a></p>",
        "id": 213089972,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602539570
    },
    {
        "content": "<p>But all the others look related to <code>forall</code></p>",
        "id": 213090006,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602539610
    },
    {
        "content": "<p>But...these constraints might be...correct?</p>",
        "id": 213090457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602540017
    },
    {
        "content": "<p>Okay so I did some more work on this.</p>",
        "id": 213252121,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602658620
    },
    {
        "content": "<p>I've gotten all the tests to pass</p>",
        "id": 213252130,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602658629
    },
    {
        "content": "<p>But...the output for <code>dyn_binders_reverse</code> test (the universes) changed</p>",
        "id": 213252218,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602658689
    },
    {
        "content": "<p>This is because we relate two <code>dyn</code> types, create new universes, don't reference them, but then relate others later</p>",
        "id": 213252266,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602658743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Think you could take a look at the branch?</p>",
        "id": 213252290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602658765
    },
    {
        "content": "<p>But, this got me thinking a bit. The way we handle universes doesn't seem...quite right.</p>",
        "id": 213252323,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602658796
    },
    {
        "content": "<p>Take this example:</p>\n<div class=\"codehilite\"><pre><span></span><code>program {\n            trait Eq&lt;T&gt; { }\n            impl&lt;T&gt; Eq&lt;T&gt; for T { }\n\n            struct Unit { }\n            struct Ref&lt;&#39;a, T&gt; { }\n}\ngoal { for&lt;&#39;a, &#39;b&gt; fn(Ref&lt;&#39;a, Ref&lt;&#39;b, Ref&lt;&#39;a, Unit&gt;&gt;&gt;): Eq&lt;for&lt;&#39;c, &#39;d&gt; fn(Ref&lt;&#39;c, Ref&lt;&#39;d, Ref&lt;&#39;d, Unit&gt;&gt;&gt;)&gt; }\n</code></pre></div>",
        "id": 213252420,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602658868
    },
    {
        "content": "<p>The solution we get back has the constraints <code>'!1_0: '!1_1</code>, <code>'!1_1: '!1_0</code>, <code>'!2_0: '!2_1</code>, and <code>'!2_1: '!2_0</code></p>",
        "id": 213252515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602658929
    },
    {
        "content": "<p>Basically that <code>'a ='b</code> and <code>'c = 'd</code></p>",
        "id": 213252529,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602658949
    },
    {
        "content": "<p>Which makes sense</p>",
        "id": 213252535,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602658958
    },
    {
        "content": "<p><em>but</em></p>",
        "id": 213252540,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602658961
    },
    {
        "content": "<p>The way these universes are numbered and by the rules we've established, universe 2 can see/name universe 1</p>",
        "id": 213252581,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602659000
    },
    {
        "content": "<p>But they're under separate binders!</p>",
        "id": 213252590,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602659018
    },
    {
        "content": "<p>This confuses me and I don't know enough here to know if this is actually what we want (in a perfect world)</p>",
        "id": 213252675,
        "sender_full_name": "Jack Huey",
        "timestamp": 1602659081
    },
    {
        "content": "<p>Hmm</p>",
        "id": 213808535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603123697
    },
    {
        "content": "<p>So</p>",
        "id": 213808539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603123698
    },
    {
        "content": "<p>Oh, I think I see what you're confused about</p>",
        "id": 213808577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603123721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> it's a bit more subtle than that</p>",
        "id": 213808581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603123727
    },
    {
        "content": "<p>it's true that U2 can \"see\" U1</p>",
        "id": 213808587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603123730
    },
    {
        "content": "<p>however</p>",
        "id": 213808594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603123732
    },
    {
        "content": "<p>they will never actually directly come into contact</p>",
        "id": 213808634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603123753
    },
    {
        "content": "<p>I wrote something about this</p>",
        "id": 213808839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603123851
    },
    {
        "content": "<p>check out <a href=\"https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/placeholders_and_universes.html#what-is-a-universe\">this section of the rustc-dev-guide</a></p>",
        "id": 213808960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603123913
    },
    {
        "content": "<p>Oh, I'll check it out</p>",
        "id": 213809037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603123935
    },
    {
        "content": "<p>in particular <strong>Representing universes with just a counter</strong></p>",
        "id": 213809085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603123963
    },
    {
        "content": "<p>basically this is an optimization that lets us avoid using a full tree and instead use just a counter</p>",
        "id": 213809123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603123985
    },
    {
        "content": "<p>Cool okay</p>",
        "id": 213809328,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603124070
    },
    {
        "content": "<p>So, I guess two questions then:</p>",
        "id": 213809336,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603124075
    },
    {
        "content": "<p>They're somewhat related</p>",
        "id": 213809354,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603124089
    },
    {
        "content": "<p>1) Does it actually matter the number that we assign to the variables? In my example above, in the test, does it matter that the output changes?</p>",
        "id": 213809435,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603124124
    },
    {
        "content": "<p>not really</p>",
        "id": 213809477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603124150
    },
    {
        "content": "<p>2) When we give back constraints to the caller after solving, how does the caller know which variables are which</p>",
        "id": 213809541,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603124167
    },
    {
        "content": "<p>maybe the question is, how/why does it care</p>",
        "id": 213809608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603124209
    },
    {
        "content": "<p>however, there is another question</p>",
        "id": 213809618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603124216
    },
    {
        "content": "<p>which is how \"eagerly\" we should be solving these constraints</p>",
        "id": 213809633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603124223
    },
    {
        "content": "<p>I've been leaning towards a shift that makes it more eager -- that is, that makes chalk try to resolve higher-ranked constraints like these and not give them back to rustc</p>",
        "id": 213809667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603124244
    },
    {
        "content": "<p>but let's leave that aside for a second</p>",
        "id": 213809685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603124252
    },
    {
        "content": "<p>That might be useful</p>",
        "id": 213809712,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603124265
    },
    {
        "content": "<p>if the variables are part of universes that do not exist in the query</p>",
        "id": 213809717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603124268
    },
    {
        "content": "<p>then the idea is that the query response, when instantiated in the caller's environment, will create fresh universes and fresh variables</p>",
        "id": 213809835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603124311
    },
    {
        "content": "<p>but it's true the caller doesn't know which lexical names they corresponded to</p>",
        "id": 213809842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603124319
    },
    {
        "content": "<p>it only knows that there was \"some variable\" in universe X etc</p>",
        "id": 213809867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603124332
    },
    {
        "content": "<p>Hmm</p>",
        "id": 213810036,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603124409
    },
    {
        "content": "<p>Okay, well, I think the variance PR is ready for another look, if you have time <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 213810275,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603124509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ok!</p>",
        "id": 213814249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603126374
    },
    {
        "content": "<p>Thanks so much for working on this! Recursing into tys to only generalize the lifetimes seems like a good change to make, much more efficient.</p>\n<p>We've been working on more tests for this, and I had a question regarding what we expect to happen with the generalizer, and inference var lifetimes. Specifically, I have a test like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>forall&lt;&#39;a, &#39;b&gt; {\n    exists&lt;U&gt; {\n        Subtype(&amp;&#39;a u32, U),\n        Subtype(&amp;&#39;b u32, U)\n    }\n}\n</code></pre></div>\n\n\n<p>From my understanding of how the generalizer is supposed to work, I expect this to output something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>Unique; for&lt;?U1&gt; { substitution [?0 := &amp;&#39;?1 Uint(U32)], lifetime constraints [\n    InEnvironment { environment: Env([]), goal: &#39;?1: &#39;!1_0},\n    InEnvironment { environment: Env([]), goal: &#39;?1: &#39;!1_1}\n] }\n</code></pre></div>\n\n\n<p>However, instead, it just outputs a single lifetime constraint relating <code>'!1_1: '!1_0</code>. This led me to think the generalizer _wasn't_ working, but turns out the variables are generalized, it's just that <code>unify_lifetime_var</code> unconditionally removes the generalized inference var, setting it to the lifetime it is related to. I tried changing that, but then the engine just goes in circles,  and errors with NoPossibleSolution rather than outputting a constraint involving the new inference var. Specifically, it reaches this point, which I would consider a success:</p>\n<div class=\"codehilite\"><pre><span></span><code>  0ms DEBUG starting next strand = Strand {\n      ex_clause: ExClause {\n          subst: [?0 := (&amp;&#39;?0 Uint(U32))],\n          ambiguous: false,\n          constraints: [],\n          subgoals: [\n              Positive(\n                  InEnvironment {\n                      environment: Env([]),\n                      goal: &#39;?0: &#39;!1_1,\n                  },\n              ),\n              Positive(\n                  InEnvironment {\n                      environment: Env([]),\n                      goal: &#39;?0: &#39;!1_0,\n                  },\n              ),\n          ],\n          delayed_subgoals: [],\n          answer_time: TimeStamp {\n              clock: 0,\n          },\n          floundered_subgoals: [],\n      },\n      selected_subgoal: None,\n  }\n</code></pre></div>\n\n\n<p>but instead of returning it, it tries to solve the lifetime constraints, and fails. Any ideas for where my reasoning is wrong here, or if it's correct, how I can get the engine to actually output those subgoals rather than try to solve them itself and fail?</p>",
        "id": 214447706,
        "sender_full_name": "David Ross",
        "timestamp": 1603571168
    },
    {
        "content": "<p>Hold on, reading this</p>",
        "id": 214448853,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603572716
    },
    {
        "content": "<p><code>?0 := (&amp;'?0 Uint(U32))</code> so that's obviously wrong</p>",
        "id": 214448922,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603572786
    },
    {
        "content": "<blockquote>\n<p>unify_lifetime_var unconditionally removes the generalized inference var, setting it to the lifetime it is related to</p>\n</blockquote>",
        "id": 214450090,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603574358
    },
    {
        "content": "<p>You mean, it ignores variance?</p>",
        "id": 214450095,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603574367
    },
    {
        "content": "<p>So, pushed some changes that should fix that!</p>",
        "id": 214459278,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603587277
    },
    {
        "content": "<blockquote>\n<p>So, pushed some changes that should fix that!</p>\n</blockquote>\n<p>Awesome!</p>\n<p>Looks like one of the tests had an extra comma, so I pushed a fix for that. But otherwise this looks good. I think the difference which caused our secondary error was just removing the <code>unify_var_value</code> branch in <code>unify_lifetime_var</code> entirely, rather than gating it behind <code>variance == Variance::Invariant</code>.</p>\n<p>Besides more tests, is there anything else you know of that this PR needs to be mergeable?</p>",
        "id": 214467190,
        "sender_full_name": "David Ross",
        "timestamp": 1603599150
    },
    {
        "content": "<p>Not entirely sure. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is going to review when he has time</p>",
        "id": 214467876,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603600239
    },
    {
        "content": "<p>I will put some time into this today I thnk</p>",
        "id": 214576865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603720984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> awesome. I'm around to discuss if you need</p>",
        "id": 214579815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603722302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm guessing you didn't get to this today?</p>",
        "id": 214635625,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603747755
    },
    {
        "content": "<p>Heh, I just finished up the lang-team work I was doing and was going to put in a bit of time here now</p>",
        "id": 214635654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603747777
    },
    {
        "content": "<p>I've not been doing a great job holding out the time slots I defined for chalk :(</p>",
        "id": 214635668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603747790
    },
    {
        "content": "<p>but it's a useful tension</p>",
        "id": 214635671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603747794
    },
    {
        "content": "<p>anyway, let me read a bit back</p>",
        "id": 214635697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603747804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> this is <a href=\"https://github.com/rust-lang/chalk/pull/609\">https://github.com/rust-lang/chalk/pull/609</a>, right ?</p>",
        "id": 214636225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603748067
    },
    {
        "content": "<p>just to make sure I'm not reading deeply into the wrong thing :P</p>",
        "id": 214636238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603748074
    },
    {
        "content": "<p>yes</p>",
        "id": 214636247,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603748079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> one thing I notice as I read</p>",
        "id": 214638950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603749737
    },
    {
        "content": "<p>in the Rust code, if the variance is <code>Invariant</code>, the generalizer doesn't always generalize :)</p>",
        "id": 214638965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603749749
    },
    {
        "content": "<p>although hmm I think I remember that this was potentially a bug in some cases</p>",
        "id": 214638984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603749766
    },
    {
        "content": "<p>well, we certainly do it though</p>",
        "id": 214639249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603749948
    },
    {
        "content": "<p>e.g., <a href=\"https://github.com/rust-lang/rust/blob/0da6d42f297642a60f2640ec313b879b376b9ad8/compiler/rustc_infer/src/infer/combine.rs#L615-L633\">here</a></p>",
        "id": 214639706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603750216
    },
    {
        "content": "<p>Yes</p>",
        "id": 214640466,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603750769
    },
    {
        "content": "<p>I remember seeing that</p>",
        "id": 214640474,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603750775
    },
    {
        "content": "<p>And I'm trying to remember what I did</p>",
        "id": 214640485,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603750784
    },
    {
        "content": "<p>I think I ignored that because we aren't tracking variance when generalizing</p>",
        "id": 214640546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603750808
    },
    {
        "content": "<p>I'm a bit surprised by the numbers we assign</p>",
        "id": 214640997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603751169
    },
    {
        "content": "<p>I'd have expected <code>for&lt;'a, 'b&gt;</code> to call <code>'a</code> <code>'!1_0</code> and <code>'b = '!1_1</code></p>",
        "id": 214641016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603751185
    },
    {
        "content": "<p>ah, wait, maybe it does</p>",
        "id": 214641061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603751226
    },
    {
        "content": "<p>and maybe the code in <code>push_lifetime_eq_goals</code> is just not right</p>",
        "id": 214641087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603751241
    },
    {
        "content": "<p>(also the name of that function is not right)</p>",
        "id": 214641092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603751245
    },
    {
        "content": "<p>heh you might hate me for this</p>",
        "id": 214641127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603751279
    },
    {
        "content": "<p>there are a few definitions of variance that we use in Rust</p>",
        "id": 214641166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603751285
    },
    {
        "content": "<p>well, just 1, but polonius has a \"mildly different take\"</p>",
        "id": 214641181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603751295
    },
    {
        "content": "<p>anyway point is that if you say that <code>&amp;'a u32 &lt;: &amp;'b u32</code>, you want <code>'a: 'b</code> as the condition</p>",
        "id": 214641205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603751307
    },
    {
        "content": "<p>in rust we call this <em>contravariance</em> because <code>'a: 'b</code> means <code>'a &gt;= 'b</code> in terms of lifetime</p>",
        "id": 214641230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603751324
    },
    {
        "content": "<p>(but <code>&lt;:</code> is like <code>&lt;=</code> in terms of \"sets of values\")</p>",
        "id": 214641244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603751335
    },
    {
        "content": "<p>point is, this code:</p>",
        "id": 214641262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603751356
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">matches</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">variance</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Variance</span>::<span class=\"n\">Invariant</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Variance</span>::<span class=\"n\">Contravariant</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">goals</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">InEnvironment</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">environment</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">WhereClause</span>::<span class=\"n\">LifetimeOutlives</span><span class=\"p\">(</span><span class=\"n\">LifetimeOutlives</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">a</span><span class=\"w\"> </span><span class=\"p\">}).</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">interner</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>probably wants to be <code>LifetimeOutlives { a, b }</code></p>",
        "id": 214641275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603751367
    },
    {
        "content": "<p>oh, hmm, it seems like <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> has made the same comment :) also pointed out that the name <code>push_lifetime_eq_goal</code> is not accurate anymore</p>",
        "id": 214641585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603751577
    },
    {
        "content": "<p>Yep haha</p>",
        "id": 214642037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603751989
    },
    {
        "content": "<p>Possibly-quick question: do we really want to be generalizing consts?</p>\n<p>I've been trying to come up with a test case for this, but I can't really think of one. Is there ever a situation where const generics have subtype relationships and we might want to output \"const constraints\" similar to lifetime constraints, or where generalizing a const is useful from rustc's perspective?</p>",
        "id": 215204299,
        "sender_full_name": "David Ross",
        "timestamp": 1604168113
    },
    {
        "content": "<p>const generics do not have subtype relations (yet)</p>",
        "id": 215204315,
        "sender_full_name": "lcnr",
        "timestamp": 1604168146
    },
    {
        "content": "<p>don't know enough about the rest of your question though. What's the job of the generalizer?</p>",
        "id": 215204368,
        "sender_full_name": "lcnr",
        "timestamp": 1604168193
    },
    {
        "content": "<p>Ah - the generalizer ensures that we avoid forcing equality on things which should be allowed to be subtypes</p>\n<p>So if we check something like Subtype(Foo&lt;3&gt;, U) in a covariant context, without the generalizer we just set U to Foo&lt;3&gt;. But with the generalizer, we set U to Foo&lt;T&gt;, and introduce a T: 3 constraint</p>",
        "id": 215204701,
        "sender_full_name": "David Ross",
        "timestamp": 1604168598
    },
    {
        "content": "<p>yeah, you can mostly force equality then</p>",
        "id": 215204769,
        "sender_full_name": "lcnr",
        "timestamp": 1604168644
    },
    {
        "content": "<p>afaik chalk doesn't yet deal with unevaluated constants, so that shouldn't matter yet</p>",
        "id": 215204839,
        "sender_full_name": "lcnr",
        "timestamp": 1604168750
    },
    {
        "content": "<p>yeah - that's fair!</p>\n<p>If it _is_ something we want in the future though, I think we could just leave the generalizer in? Only harm it's doing right now is introducing a few more variables which are immediately resolved</p>",
        "id": 215204930,
        "sender_full_name": "David Ross",
        "timestamp": 1604168827
    },
    {
        "content": "<p>Generalizer for consts, I mean. We need it in general since generalizing lifetimes is required</p>",
        "id": 215204940,
        "sender_full_name": "David Ross",
        "timestamp": 1604168849
    },
    {
        "content": "<p>hmm, i think it's fine. But it will be a long time until even rustc will allow const subtyping, if ever</p>",
        "id": 215205021,
        "sender_full_name": "lcnr",
        "timestamp": 1604168939
    },
    {
        "content": "<p>even unevaluated constants don't need subtyping, but do lazily emit <code>ConstEquate(a, b)</code> predicates to prevent some potential cycles in rustc - so you can't just equate them</p>",
        "id": 215205117,
        "sender_full_name": "lcnr",
        "timestamp": 1604169067
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> -- are you happy with <a href=\"https://github.com/rust-lang/chalk/pull/609\">https://github.com/rust-lang/chalk/pull/609</a> ? I didn't re-read it in depth but I think the major things I saw the first time were fixed</p>",
        "id": 216155865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604964298
    },
    {
        "content": "<p>it'll need a rebase for erased and empty lifetimes, but that should be pretty easy</p>",
        "id": 216156025,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604964414
    },
    {
        "content": "<p>I'm happy with it.</p>",
        "id": 216179691,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1604994534
    },
    {
        "content": "<p>ok r=me then</p>",
        "id": 216273667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605042051
    },
    {
        "content": "<p>I'll try to rebase later tonight</p>",
        "id": 216273742,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605042096
    }
]