[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> have you thought at all about <a href=\"https://github.com/rust-lang/rust/pull/55921#issuecomment-441508657\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55921#issuecomment-441508657\">the performance regression</a> you pointed me at?</p>",
        "id": 148386181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543256356
    },
    {
        "content": "<p>I was going to take a look</p>",
        "id": 148386185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543256366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I opened a PR with a perf run</p>",
        "id": 148386192,
        "sender_full_name": "scalexm",
        "timestamp": 1543256375
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/56234\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56234\">https://github.com/rust-lang/rust/pull/56234</a></p>",
        "id": 148386195,
        "sender_full_name": "scalexm",
        "timestamp": 1543256380
    },
    {
        "content": "<p>not sure if this will do</p>",
        "id": 148386251,
        "sender_full_name": "scalexm",
        "timestamp": 1543256408
    },
    {
        "content": "<p>hard to imagine that this is the bottleneck</p>",
        "id": 148386256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543256411
    },
    {
        "content": "<p>well</p>",
        "id": 148386266,
        "sender_full_name": "scalexm",
        "timestamp": 1543256418
    },
    {
        "content": "<p>according to the original comment</p>",
        "id": 148386268,
        "sender_full_name": "scalexm",
        "timestamp": 1543256423
    },
    {
        "content": "<p>I am wondering if the lack of \"universe canonicalization\" is causing problems</p>",
        "id": 148386273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543256427
    },
    {
        "content": "<p>i.e., we're getting poorer cache behavior or something</p>",
        "id": 148386297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543256444
    },
    {
        "content": "<p>it seems like a lot of time is spent entering and exiting <code>create_next_universe</code></p>",
        "id": 148386301,
        "sender_full_name": "scalexm",
        "timestamp": 1543256446
    },
    {
        "content": "<p>yeah; my guess is more that the caller is executing too often</p>",
        "id": 148386308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543256459
    },
    {
        "content": "<p>vs <code>create_next_universe</code> itself being too expensive</p>",
        "id": 148386321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543256467
    },
    {
        "content": "<p>still, worth checking ;)</p>",
        "id": 148386328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543256474
    },
    {
        "content": "<p>mmh in that case that perf regression may have appeared earlier no?</p>",
        "id": 148386378,
        "sender_full_name": "scalexm",
        "timestamp": 1543256506
    },
    {
        "content": "<p>I mean earlier <code>create_next_universe</code> was not even called because the map was only <code>[ty::UniverseIndex::from(0)]</code></p>",
        "id": 148386430,
        "sender_full_name": "scalexm",
        "timestamp": 1543256528
    },
    {
        "content": "<p>hmm</p>",
        "id": 148386556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543256643
    },
    {
        "content": "<p>maybe so</p>",
        "id": 148386588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543256710
    },
    {
        "content": "<p>it's clearly that PR at fault:</p>",
        "id": 148386592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543256715
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/hUQGh8Axe6zKoxp4vG7dmdI-/Screen-Shot-2018-11-26-at-1.25.05-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-11-26-at-1.25.05-PM.png\">Screen-Shot-2018-11-26-at-1.25.05-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/hUQGh8Axe6zKoxp4vG7dmdI-/Screen-Shot-2018-11-26-at-1.25.05-PM.png\" target=\"_blank\" title=\"Screen-Shot-2018-11-26-at-1.25.05-PM.png\"><img src=\"/user_uploads/4715/hUQGh8Axe6zKoxp4vG7dmdI-/Screen-Shot-2018-11-26-at-1.25.05-PM.png\"></a></div>",
        "id": 148386596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543256724
    },
    {
        "content": "<p>so to be clear</p>",
        "id": 148386696,
        "sender_full_name": "scalexm",
        "timestamp": 1543256829
    },
    {
        "content": "<p>there's something I cannot remember</p>",
        "id": 148386700,
        "sender_full_name": "scalexm",
        "timestamp": 1543256834
    },
    {
        "content": "<p>there was this comment above the creation of the universes map</p>",
        "id": 148386710,
        "sender_full_name": "scalexm",
        "timestamp": 1543256847
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>         // For each universe that is referred to in the incoming\n        // query, create a universe in our local inference context. In\n        // practice, as of this writing, all queries have no universes\n        // in them, so this code has no effect, but it is looking\n        // forward to the day when we *do* want to carry universes\n        // through into queries.\n</pre></div>",
        "id": 148386715,
        "sender_full_name": "scalexm",
        "timestamp": 1543256854
    },
    {
        "content": "<p>I think this was still true before my placeholders PR</p>",
        "id": 148386730,
        "sender_full_name": "scalexm",
        "timestamp": 1543256872
    },
    {
        "content": "<p>or maybe it was stale already because of <a href=\"https://github.com/rust-lang/rust/pull/55305\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55305\">https://github.com/rust-lang/rust/pull/55305</a> (universes refactor 3)</p>",
        "id": 148386783,
        "sender_full_name": "scalexm",
        "timestamp": 1543256890
    },
    {
        "content": "<p>I believe we are currently putting all region variables into the root universe</p>",
        "id": 148386882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543256997
    },
    {
        "content": "<p>when canonicalizing the query</p>",
        "id": 148386927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257003
    },
    {
        "content": "<p>yes, and that will change only with your universes PR, right?</p>",
        "id": 148386950,
        "sender_full_name": "scalexm",
        "timestamp": 1543257010
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">CanonicalizeAllFreeRegions</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">CanonicalizeRegionMode</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CanonicalizeAllFreeRegions</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">canonicalize_free_region</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">canonicalizer</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Canonicalizer</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">r</span>: <span class=\"nc\">ty</span>::<span class=\"n\">Region</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ty</span>::<span class=\"n\">Region</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">canonicalizer</span><span class=\"p\">.</span><span class=\"n\">canonical_var_for_region_in_root_universe</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">any</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148386952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257013
    },
    {
        "content": "<p>so it was probably true</p>",
        "id": 148386963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257019
    },
    {
        "content": "<p>my universes PR actually doesn't change this, but I am now wondering if it should, at least in combination with your PR</p>",
        "id": 148386977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257031
    },
    {
        "content": "<p>Ok so the real change before the placeholders PR and after the placeholders PR is that the map is no more always equal to <code>[UniverseIndex::ROOT]</code></p>",
        "id": 148387015,
        "sender_full_name": "scalexm",
        "timestamp": 1543257075
    },
    {
        "content": "<p>we may want to back out the PR</p>",
        "id": 148387097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257130
    },
    {
        "content": "<p>so we can optimize \"in peace\"</p>",
        "id": 148387103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257133
    },
    {
        "content": "<p>still, I'm surprised that keccak is so heavily affected</p>",
        "id": 148387117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257153
    },
    {
        "content": "<p>I'm going to do a bit more digging I guess</p>",
        "id": 148387123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257161
    },
    {
        "content": "<p>so the only ways I can think this would have regressed perf is:</p>\n<ul>\n<li>either the allocation of the universes map</li>\n<li>or calling <code>create_next_universe</code> a lot of times</li>\n</ul>",
        "id": 148387133,
        "sender_full_name": "scalexm",
        "timestamp": 1543257177
    },
    {
        "content": "<p>I'm trying to remember, when are we even creating bound type variables?</p>",
        "id": 148387247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257249
    },
    {
        "content": "<p>I didn't expect this to happen much outside of chalk</p>",
        "id": 148387258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257257
    },
    {
        "content": "<p>we are not, however <code>InferCtxt</code> tracks the universe where each type inference variable was created</p>",
        "id": 148387288,
        "sender_full_name": "scalexm",
        "timestamp": 1543257297
    },
    {
        "content": "<p>ok I see</p>",
        "id": 148387346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257360
    },
    {
        "content": "<p>and <em>those</em> are now preserved</p>",
        "id": 148387384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257364
    },
    {
        "content": "<p>makes sense</p>",
        "id": 148387400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257380
    },
    {
        "content": "<p>yes, unlike regions which are always put in the <code>ROOT</code> universe</p>",
        "id": 148387408,
        "sender_full_name": "scalexm",
        "timestamp": 1543257385
    },
    {
        "content": "<p>(when canonicalizing)</p>",
        "id": 148387417,
        "sender_full_name": "scalexm",
        "timestamp": 1543257395
    },
    {
        "content": "<p>seems likely that universe canon would also help here</p>",
        "id": 148387439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257422
    },
    {
        "content": "<p>this does suggest that we could, in an emergency, land a PR that puts type variables into ROOT univese</p>",
        "id": 148387454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257437
    },
    {
        "content": "<p>to be fixed in a follow-up</p>",
        "id": 148387463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257443
    },
    {
        "content": "<p>yes</p>",
        "id": 148387464,
        "sender_full_name": "scalexm",
        "timestamp": 1543257445
    },
    {
        "content": "<p>that'd be nicer than having to back that big PR out</p>",
        "id": 148387471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257458
    },
    {
        "content": "<p>I'm just waiting for the perf run to finish and if that does not solve the problem, let's do that</p>",
        "id": 148387488,
        "sender_full_name": "scalexm",
        "timestamp": 1543257479
    },
    {
        "content": "<p>sounds good</p>",
        "id": 148387551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543257507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://perf.rust-lang.org/compare.html?start=b51632e3f0856ea444f5e59819538e85947673fc&amp;end=bb9bcfd67d1be59a17b58b07b9fa152266ef763f\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=b51632e3f0856ea444f5e59819538e85947673fc&amp;end=bb9bcfd67d1be59a17b58b07b9fa152266ef763f\">https://perf.rust-lang.org/compare.html?start=b51632e3f0856ea444f5e59819538e85947673fc&amp;end=bb9bcfd67d1be59a17b58b07b9fa152266ef763f</a> I never understand how to read this table</p>",
        "id": 148390510,
        "sender_full_name": "scalexm",
        "timestamp": 1543259805
    },
    {
        "content": "<p>does this mean that my PR actually decreased perfs by 50% more?</p>",
        "id": 148390529,
        "sender_full_name": "scalexm",
        "timestamp": 1543259825
    },
    {
        "content": "<p>yes</p>",
        "id": 148390537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543259835
    },
    {
        "content": "<p>which is a bit confusing :)</p>",
        "id": 148390539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543259839
    },
    {
        "content": "<p>perf is ready looks red oh alexandre writing at the same time damn phone typing :3</p>",
        "id": 148390542,
        "sender_full_name": "lqd",
        "timestamp": 1543259844
    },
    {
        "content": "<p>lol</p>",
        "id": 148390543,
        "sender_full_name": "scalexm",
        "timestamp": 1543259844
    },
    {
        "content": "<p>that was unexpected</p>",
        "id": 148390555,
        "sender_full_name": "scalexm",
        "timestamp": 1543259857
    },
    {
        "content": "<p>indeed</p>",
        "id": 148390624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543259883
    },
    {
        "content": "<p>I made a local build btw</p>",
        "id": 148390635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543259888
    },
    {
        "content": "<p>to do some experimenting</p>",
        "id": 148390638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543259891
    },
    {
        "content": "<p>though I realize now it's not optimized, so i can't compare perf measurements directly</p>",
        "id": 148390644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543259898
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I added some quick checks:</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2018-11-26T19:26:47Z: rustc_traits::evaluate_obligation: evaluate_obligation(canonical_goal=Canonical {\n    max_universe: U10992,\n    variables: [\n        CanonicalVarInfo {\n            kind: Ty(\n                General(\n                    U10992\n                )\n            )\n        }\n    ],\n    value: ParamEnvAnd {\n        param_env: ParamEnv {\n            caller_bounds: [],\n            reveal: UserFacing\n        },\n        value: Binder(TraitPredicate(&lt;[u64] as core::ops::Index&lt;^1_0&gt;&gt;))\n    }\n})\n</pre></div>",
        "id": 148391425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543260422
    },
    {
        "content": "<p>I'd say we need to do univ canonicalization :P</p>",
        "id": 148391433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543260430
    },
    {
        "content": "<p>lol ok</p>",
        "id": 148391448,
        "sender_full_name": "scalexm",
        "timestamp": 1543260452
    },
    {
        "content": "<p>I'd be up for trying to do that</p>",
        "id": 148391450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543260454
    },
    {
        "content": "<p>but i'm also up for someone else to do it</p>",
        "id": 148391462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543260460
    },
    {
        "content": "<p>trying to guesstimate my avail time this week:)</p>",
        "id": 148391472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543260464
    },
    {
        "content": "<p>in <em>theory</em> I have more</p>",
        "id": 148391481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543260469
    },
    {
        "content": "<p>so I guess the perf problem just comes from the construction + allocation of the map</p>",
        "id": 148391534,
        "sender_full_name": "scalexm",
        "timestamp": 1543260490
    },
    {
        "content": "<p>I'll open a PR for putting back all type existentials in <code>ROOT</code> if <code>-Z chalk</code> is not there as you suggested</p>",
        "id": 148391589,
        "sender_full_name": "scalexm",
        "timestamp": 1543260546
    },
    {
        "content": "<p>we can land it with p=1, please send me a link on zulip</p>",
        "id": 148391693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543260604
    },
    {
        "content": "<p>OK, well, I think i'm going to go try and do reviews now.</p>",
        "id": 148391749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543260633
    },
    {
        "content": "<p>still in \"catch up\" mode from vacation last week</p>",
        "id": 148391753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543260639
    },
    {
        "content": "<p>I'll fix the universe PR though</p>",
        "id": 148391773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543260652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/pull/56251\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56251\">https://github.com/rust-lang/rust/pull/56251</a> I think that should do it</p>",
        "id": 148392356,
        "sender_full_name": "scalexm",
        "timestamp": 1543261164
    },
    {
        "content": "<p>should we do a perf run?</p>",
        "id": 148392473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543261238
    },
    {
        "content": "<p>/me sends bors try</p>",
        "id": 148392479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543261242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> perf is green again</p>",
        "id": 148409141,
        "sender_full_name": "scalexm",
        "timestamp": 1543277769
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/56270\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56270\">#56270</a> seems related</p>",
        "id": 148618393,
        "sender_full_name": "memoryruins",
        "timestamp": 1543296832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> if you have a build of the PR, maybe you can test <a href=\"https://github.com/rust-lang/rust/issues/56270\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56270\">#56270</a>?</p>",
        "id": 148644645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543332211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> mmh I haven't one :p</p>",
        "id": 148644740,
        "sender_full_name": "scalexm",
        "timestamp": 1543332275
    },
    {
        "content": "<p>but 99% sure this is the same issue</p>",
        "id": 148644768,
        "sender_full_name": "scalexm",
        "timestamp": 1543332308
    },
    {
        "content": "<p>there was <a href=\"https://github.com/rust-lang/rust/issues/56274\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56274\">#56274</a> too</p>",
        "id": 148644783,
        "sender_full_name": "scalexm",
        "timestamp": 1543332323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  oh maybe you meant a build of the placeholders PR, not a build of the fix</p>",
        "id": 148644939,
        "sender_full_name": "scalexm",
        "timestamp": 1543332450
    },
    {
        "content": "<p>I meant the fix</p>",
        "id": 148645672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543333201
    },
    {
        "content": "<p>:) <a href=\"/user_uploads/4715/jQ3ZkDpi5g0V5AKkHil4KZ9K/keccak-perf.png\" target=\"_blank\" title=\"keccak-perf.png\">keccak-perf.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/jQ3ZkDpi5g0V5AKkHil4KZ9K/keccak-perf.png\" target=\"_blank\" title=\"keccak-perf.png\"><img src=\"/user_uploads/4715/jQ3ZkDpi5g0V5AKkHil4KZ9K/keccak-perf.png\"></a></div>",
        "id": 148675605,
        "sender_full_name": "memoryruins",
        "timestamp": 1543360342
    }
]