[
    {
        "content": "<p>This code fails:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(specialization)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ToWrapper</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Inner</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">to_wrap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span>::<span class=\"n\">Inner</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">default</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ToWrapper</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Inner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">to_wrap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span>::<span class=\"n\">Inner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Wrapper</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>From <a href=\"https://stackoverflow.com/q/51022636/155423\" target=\"_blank\" title=\"https://stackoverflow.com/q/51022636/155423\">this Q&amp;A</a>, it's stated that's because we might specialize either <code>Inner</code> or <code>to_wrap</code> separately from the other, which means that the default implementation might be broken.</p>",
        "id": 162253507,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1554135229
    },
    {
        "content": "<p>That much makes sense to me, but is there a way of stating that an associated type and method must be specialized together?</p>",
        "id": 162253590,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1554135266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  see discussion in <a href=\"https://github.com/rust-lang/rfcs/pull/2532\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2532\">https://github.com/rust-lang/rfcs/pull/2532</a></p>",
        "id": 162253783,
        "sender_full_name": "centril",
        "timestamp": 1554135382
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2532#issuecomment-453719623\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2532#issuecomment-453719623\">A Graydon approval</a>, nice</p>",
        "id": 162253949,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1554135532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> the only relevant comment I see that mentions specialization is <a href=\"https://github.com/rust-lang/rfcs/pull/2532#issuecomment-429128002\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2532#issuecomment-429128002\">this one</a></p>",
        "id": 162254003,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1554135576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> and read the RFC <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 162254072,
        "sender_full_name": "centril",
        "timestamp": 1554135602
    },
    {
        "content": "<p>especially \"future work\"</p>",
        "id": 162254109,
        "sender_full_name": "centril",
        "timestamp": 1554135615
    },
    {
        "content": "<blockquote>\n<p>GitHub Pages is temporarily down for maintenance.</p>\n</blockquote>\n<p>sigh</p>",
        "id": 162254144,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1554135645
    },
    {
        "content": "<p>So the answer is \"no\"</p>",
        "id": 162254298,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1554135763
    },
    {
        "content": "<p>Any feelings on when the future work might be considered again?</p>",
        "id": 162254427,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1554135854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I think the RFC should be stabilized first before we reconsider</p>",
        "id": 162256047,
        "sender_full_name": "centril",
        "timestamp": 1554137018
    }
]