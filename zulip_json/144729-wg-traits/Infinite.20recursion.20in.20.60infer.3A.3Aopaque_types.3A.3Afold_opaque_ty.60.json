[
    {
        "content": "<p>I was adding tests for <a href=\"https://github.com/rust-lang/rust/pull/93582\"><code>impl Fn() -&gt; impl Trait</code> PR</a> and I've found a segfault on this function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Upon further investigation I've found an infinite recursion in <code>rustc_infer::infer::opaque_types::fold_opaque_ty</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>┐rustc_infer::infer::opaque_types::fold_opaque_ty ty=impl Fn(&amp;'a u8)-&gt; for&lt;'a&gt; Opaque(DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })]), opaque_type_key=OpaqueTypeKey { def_id: DefId(0:7 ~ impl_fn_associativity2[4a39]::f::{opaque#0}), substs: [] }, origin=FnReturn(DefId(0:6 ~ impl_fn_associativity2[4a39]::f))\n├─0ms DEBUG rustc_infer::infer::type_variable new_var(index=_#0t, universe=U0, origin=TypeVariableOrigin { kind: TypeInference, span: src/test/ui/impl-trait/impl_fn_associativity2.rs:10:11: 10:55 (#0) })\n├─0ms DEBUG rustc_infer::infer::opaque_types generated new type inference var Infer(_#0t)\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl Fn(&amp;'a u8)-&gt; for&lt;'a&gt; Opaque(DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })]) as std::marker::Sized&gt;, polarity:Positive), [])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl Fn(&amp;'a u8)-&gt; for&lt;'a&gt; Opaque(DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })]) as std::marker::Sized&gt;, polarity:Positive), [])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;_ as std::marker::Sized&gt;, polarity:Positive), [])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;_ as std::marker::Sized&gt;, polarity:Positive), [])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl Fn(&amp;'a u8)-&gt; for&lt;'a&gt; Opaque(DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })]) as std::ops::Fn&lt;(&amp;'a u8,)&gt;&gt;, polarity:Positive), [Region(BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a))])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl Fn(&amp;'a u8)-&gt; for&lt;'a&gt; Opaque(DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })]) as std::ops::Fn&lt;(&amp;'a u8,)&gt;&gt;, polarity:Positive), [Region(BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a))])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;_ as std::ops::Fn&lt;(&amp;'a u8,)&gt;&gt;, polarity:Positive), [Region(BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a))])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;_ as std::ops::Fn&lt;(&amp;'a u8,)&gt;&gt;, polarity:Positive), [Region(BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a))])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [impl Fn(&amp;'a u8)-&gt; for&lt;'a&gt; Opaque(DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })]), (&amp;'a u8,)], item_def_id: DefId(2:3286 ~ core[5484]::ops::function::FnOnce::Output) }, Ty(impl std::fmt::Debug)), [Region(BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a))])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [impl Fn(&amp;'a u8)-&gt; for&lt;'a&gt; Opaque(DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })]), (&amp;'a u8,)], item_def_id: DefId(2:3286 ~ core[5484]::ops::function::FnOnce::Output) }, Ty(impl std::fmt::Debug)), [Region(BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a))])\n├─┐rustc_infer::infer::opaque_types::fold_opaque_ty ty=impl std::fmt::Debug, opaque_type_key=OpaqueTypeKey { def_id: DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), substs: [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })] }, origin=FnReturn(DefId(0:6 ~ impl_fn_associativity2[4a39]::f))\n│ ├─0ms DEBUG rustc_infer::infer::type_variable new_var(index=_#1t, universe=U0, origin=TypeVariableOrigin { kind: TypeInference, span: src/test/ui/impl-trait/impl_fn_associativity2.rs:10:11: 10:55 (#0) })\n│ ├─0ms DEBUG rustc_infer::infer::opaque_types generated new type inference var Infer(_#1t)\n│ ├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl std::fmt::Debug as std::marker::Sized&gt;, polarity:Positive), [])\n│ ├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl std::fmt::Debug as std::marker::Sized&gt;, polarity:Positive), [])\n│ ├─┐rustc_infer::infer::opaque_types::fold_opaque_ty ty=impl std::fmt::Debug, opaque_type_key=OpaqueTypeKey { def_id: DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), substs: [ReLateBound(DebruijnIndex(1), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })] }, origin=FnReturn(DefId(0:6 ~ impl_fn_associativity2[4a39]::f))\n│ │ ├─0ms DEBUG rustc_infer::infer::type_variable new_var(index=_#2t, universe=U0, origin=TypeVariableOrigin { kind: TypeInference, span: src/test/ui/impl-trait/impl_fn_associativity2.rs:10:11: 10:55 (#0) })\n│ │ ├─0ms DEBUG rustc_infer::infer::opaque_types generated new type inference var Infer(_#2t)\n│ │ ├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl std::fmt::Debug as std::marker::Sized&gt;, polarity:Positive), [])\n│ │ ├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl std::fmt::Debug as std::marker::Sized&gt;, polarity:Positive), [])\n│ │ ├─┐rustc_infer::infer::opaque_types::fold_opaque_ty ty=impl std::fmt::Debug, opaque_type_key=OpaqueTypeKey { def_id: DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), substs: [ReLateBound(DebruijnIndex(2), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })] }, origin=FnReturn(DefId(0:6 ~ impl_fn_associativity2[4a39]::f))\n│ │ │ ├─0ms DEBUG rustc_infer::infer::type_variable new_var(index=_#3t, universe=U0, origin=TypeVariableOrigin { kind: TypeInference, span: src/test/ui/impl-trait/impl_fn_associativity2.rs:10:11: 10:55 (#0) })\n│ │ │ ├─0ms DEBUG rustc_infer::infer::opaque_types generated new type inference var Infer(_#3t)\n│ │ │ ├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl std::fmt::Debug as std::marker::Sized&gt;, polarity:Positive), [])\n│ │ │ ├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl std::fmt::Debug as std::marker::Sized&gt;, polarity:Positive), [])\n...\n</code></pre></div>",
        "id": 275899039,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1647680249
    },
    {
        "content": "<p>Any ideas why this might happen?</p>",
        "id": 275899263,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1647680490
    },
    {
        "content": "<p>It seems like recursion happens somewhere here: <a href=\"https://github.com/rust-lang/rust/blob/feac2ecf1cae1dd0f56bed1cecc6e109c64b3d4f/compiler/rustc_infer/src/infer/opaque_types.rs#L552-L585\">https://github.com/rust-lang/rust/blob/feac2ecf1cae1dd0f56bed1cecc6e109c64b3d4f/compiler/rustc_infer/src/infer/opaque_types.rs#L552-L585</a></p>",
        "id": 275907503,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1647691969
    },
    {
        "content": "<p>Probably fixed by lazy type alias impl trait as that removes all these recursive ops</p>",
        "id": 275961397,
        "sender_full_name": "oli",
        "timestamp": 1647774336
    },
    {
        "content": "<p>I can add your test to my PR</p>",
        "id": 275961452,
        "sender_full_name": "oli",
        "timestamp": 1647774376
    },
    {
        "content": "<p>This only ICEs when allowing <code>impl Debug</code> in that position, so adding this to your PR won't do anything, I think</p>",
        "id": 276015172,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1647848971
    },
    {
        "content": "<p>I thought it segfaults due to stack overflow due to infinite recursion? This recursion is removed in my PR. We may run into other issues of course, but at least the segfault should be gone</p>",
        "id": 276024337,
        "sender_full_name": "oli",
        "timestamp": 1647855109
    },
    {
        "content": "<p>Yeah, but without my PR it isn't accepted while parsing, so type check doesn't even start with it :D</p>",
        "id": 276040778,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1647864811
    },
    {
        "content": "<p>Aaah xD</p>",
        "id": 276068245,
        "sender_full_name": "oli",
        "timestamp": 1647876459
    },
    {
        "content": "<p>Yea, I guess you need to wait until after my PR or mark the test as known-bug</p>",
        "id": 276068349,
        "sender_full_name": "oli",
        "timestamp": 1647876487
    },
    {
        "content": "<p>lazy taits fixed the overflow, yay!</p>\n<p>Though I now get another ICE :D</p>",
        "id": 277328283,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1648754570
    },
    {
        "content": "<p>Heh, yea, unexplored territory</p>",
        "id": 277328549,
        "sender_full_name": "oli",
        "timestamp": 1648754757
    },
    {
        "content": "<p>Got any details?</p>",
        "id": 277328654,
        "sender_full_name": "oli",
        "timestamp": 1648754811
    },
    {
        "content": "<p>I get <code>escaping bound vars in predicate Obligation(predicate=Binder(TraitPredicate(&lt;impl std::fmt::Debug as std::marker::Sized&gt;, polarity:Positive), []), depth=0)</code></p>",
        "id": 277329152,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1648755089
    },
    {
        "content": "<p>Here is the traceback that annoyingly doesn't fit in a message:</p>\n<p><a href=\"/user_uploads/4715/_QTd3nt81iA97nTV88-QLZDy/traceback.txt\">traceback.txt</a></p>",
        "id": 277329331,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1648755178
    },
    {
        "content": "<p>oic how it is... twitter gets this info first <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 277330405,
        "sender_full_name": "oli",
        "timestamp": 1648755755
    },
    {
        "content": "<p>I guess we had that ice coming... we played dangerously with binders and got bitten</p>",
        "id": 277330510,
        "sender_full_name": "oli",
        "timestamp": 1648755829
    },
    {
        "content": "<p>Should be a bottom up folder close to where the recursion segfault was before. Same file as <code>handle_opaque_type</code></p>",
        "id": 277330628,
        "sender_full_name": "oli",
        "timestamp": 1648755894
    },
    {
        "content": "<p>That folder is not handing binders and replacing types without considering binders</p>",
        "id": 277330684,
        "sender_full_name": "oli",
        "timestamp": 1648755933
    },
    {
        "content": "<p>No clue what the fix is, but that guess could make tracing dumps easier to read</p>",
        "id": 277330784,
        "sender_full_name": "oli",
        "timestamp": 1648755993
    },
    {
        "content": "<p>So, quick analysis: the 'a is not shown in the error message, but it's there. The binder has no bound lifetimes tho. That's causing the ice. This obligation is coming from the return type projection on the outer opaque type. Which incidentally has a match arm in the BottomUpFolder...</p>",
        "id": 277331337,
        "sender_full_name": "oli",
        "timestamp": 1648756287
    },
    {
        "content": "<p>On mobile, so can't look at code, but I think I remember some binder shenanigans in the function called to generate the projection obligation</p>",
        "id": 277331469,
        "sender_full_name": "oli",
        "timestamp": 1648756341
    },
    {
        "content": "<p>Thanks, I'll try to investigate this :)</p>",
        "id": 277332523,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1648756862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I've found a new ICE that works on nightly!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error: internal compiler error: compiler/rustc_trait_selection/src/opaque_types.rs:157:17: unexpected region kind in opaque type: RePlaceholder(Placeholder { universe: U2, name: BrNamed(DefId(0:11 ~ playground[302b]::g::{opaque#0}::'a), 'a) })\n\nthread 'rustc' panicked at 'Box&lt;dyn Any&gt;', compiler/rustc_errors/src/lib.rs:1279:9\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=2045d01c52c448330fba40b524b2ff50\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=2045d01c52c448330fba40b524b2ff50</a></p>",
        "id": 277736816,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649081702
    },
    {
        "content": "<p>Weirdly enough <code>type Output = ();</code> works fine</p>",
        "id": 277737096,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649081833
    },
    {
        "content": "<p><span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 277737173,
        "sender_full_name": "oli",
        "timestamp": 1649081870
    },
    {
        "content": "<p>yea, the problem is the projection</p>",
        "id": 277737189,
        "sender_full_name": "oli",
        "timestamp": 1649081881
    },
    {
        "content": "<p>we convert this to <code>__hidden_type__: for&lt;'a&gt; Tr&lt;&amp;'a u8&gt;</code> and <code>&lt;__hidden_type__ as for&lt;'a&gt; Tr&lt;&amp;'a u8&gt;&gt;::Output == ...</code>, and the <code>...</code> part is where we muck up the binders</p>",
        "id": 277737433,
        "sender_full_name": "oli",
        "timestamp": 1649081970
    },
    {
        "content": "<p>something something <a href=\"https://github.com/rust-lang/rust/blob/ffaf6f0d0ccfbc76da00baded073d10f05ffcbd1/compiler/rustc_infer/src/infer/opaque_types.rs#L567\">https://github.com/rust-lang/rust/blob/ffaf6f0d0ccfbc76da00baded073d10f05ffcbd1/compiler/rustc_infer/src/infer/opaque_types.rs#L567</a> is hacky</p>",
        "id": 277737638,
        "sender_full_name": "oli",
        "timestamp": 1649082045
    },
    {
        "content": "<p>Should I open an issue or something?</p>",
        "id": 277738037,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649082197
    },
    {
        "content": "<p>yea, tracking this is good, even if I'm not sure we'll try to do anything about it any time soon</p>",
        "id": 277738109,
        "sender_full_name": "oli",
        "timestamp": 1649082229
    },
    {
        "content": "<p>:(</p>",
        "id": 277738220,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649082268
    },
    {
        "content": "<p>(if it is blocking your work, that's another story)</p>",
        "id": 277739020,
        "sender_full_name": "oli",
        "timestamp": 1649082602
    },
    {
        "content": "<p>oh, this is the minification of your issue</p>",
        "id": 277739133,
        "sender_full_name": "oli",
        "timestamp": 1649082636
    },
    {
        "content": "<p>ok, time to bump the priority</p>",
        "id": 277739150,
        "sender_full_name": "oli",
        "timestamp": 1649082643
    },
    {
        "content": "<p>was <code>&lt;type as for&lt;'a&gt; Trait&lt;'a&gt;&gt;::Assoc</code> a typo or is the binder really there <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 277739204,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649082665
    },
    {
        "content": "<p><code>T as for&lt;'a&gt; Trait&lt;'a&gt;</code> makes no sense right? lol</p>",
        "id": 277739256,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1649082694
    },
    {
        "content": "<p>It actually seems like these are a bit distinct issues (at least the ICE message is different), but I'm not sure</p>",
        "id": 277739336,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649082723
    },
    {
        "content": "<p>But yeah, I've got there trying to understand what is special here about <code>Fn</code></p>",
        "id": 277739479,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649082789
    },
    {
        "content": "<p>Opened an issue: <a href=\"https://github.com/rust-lang/rust/issues/95647\">https://github.com/rust-lang/rust/issues/95647</a></p>",
        "id": 277741115,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649083465
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>thread 'rustc' panicked at 'assertion failed: self.scc_universes[scc] == ty::UniverseIndex::ROOT', compiler/rustc_borrowck/src/region_infer/mod.rs:708:9\n</code></pre></div>\n<p>AND ANOTHER ONE</p>",
        "id": 277741897,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649083754
    },
    {
        "content": "<p><span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 277742250,
        "sender_full_name": "oli",
        "timestamp": 1649083883
    },
    {
        "content": "<p>no wonder I never got this code, it has been broken forever</p>",
        "id": 277742291,
        "sender_full_name": "oli",
        "timestamp": 1649083898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Infinite.20recursion.20in.20.60infer.3A.3Aopaque_types.3A.3Afold_opaque_ty.60/near/277737433\">said</a>:</p>\n<blockquote>\n<p>we convert this to <code>__hidden_type__: for&lt;'a&gt; Tr&lt;&amp;'a u8&gt;</code> and <code>&lt;__hidden_type__ as for&lt;'a&gt; Tr&lt;&amp;'a u8&gt;&gt;::Output == ...</code>, and the <code>...</code> part is where we muck up the binders</p>\n</blockquote>\n<p>ugh, there's a bug in FnPtr confirmation in <a href=\"https://github.com/rust-lang/rust/issues/95421\">#95421</a> that looks almost the same way, in we have <code>for&lt;'b&gt; &lt;for&lt;'a&gt; fn(&amp;'a ()) -&gt; &amp;'a () as Fn(&amp;'b ())&gt;::Output = &amp;'b ()</code></p>",
        "id": 277755935,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649089169
    },
    {
        "content": "<p>confusing to have binders on predicates, then also have binders that are inherent to a Ty (and sometimes selection uses the binder inherent to the ty, and throws away the outer binder...)</p>",
        "id": 277756057,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649089204
    },
    {
        "content": "<p>I'll take a look at <a href=\"https://github.com/rust-lang/rust/issues/95647\">#95647</a> after work, if only to write up an explanation why we're getting a bound region to point to the wrong thing...</p>",
        "id": 277756184,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649089265
    },
    {
        "content": "<p>(I renamed the thread and now there are two threads :( )</p>",
        "id": 277759331,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649090504
    },
    {
        "content": "<p>zulip bug? i only see one thread (this one) in wg-traits</p>",
        "id": 277762024,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649091551
    },
    {
        "content": "<p>uhhh, maybe <a href=\"/user_uploads/4715/iKWO-eGbfswJ4KY5U3Z5Jy0_/2022-04-04_21-02.png\">2022-04-04_21-02.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/iKWO-eGbfswJ4KY5U3Z5Jy0_/2022-04-04_21-02.png\" title=\"2022-04-04_21-02.png\"><img src=\"/user_uploads/4715/iKWO-eGbfswJ4KY5U3Z5Jy0_/2022-04-04_21-02.png\"></a></div>",
        "id": 277762556,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1649091724
    },
    {
        "content": "<p><span aria-label=\"surprise\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"surprise\">:surprise:</span> I don't even see that  new one (or is \"new ices\" the old one?) <a href=\"/user_uploads/4715/htiIUh3gZQ5iiNTYpxd0n3k7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/htiIUh3gZQ5iiNTYpxd0n3k7/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/htiIUh3gZQ5iiNTYpxd0n3k7/image.png\"></a></div>",
        "id": 277762684,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649091777
    },
    {
        "content": "<p>oh nvm I see it when I expand the full topic list...</p>",
        "id": 277762777,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649091807
    }
]