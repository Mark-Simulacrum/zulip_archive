[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span>, meeting in 3ish minutes</p>",
        "id": 201066070,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337467
    },
    {
        "content": "<p>Link to agenda hackmd: <a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg\">https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg</a></p>",
        "id": 201066137,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337482
    },
    {
        "content": "<p>Link to sprint goals: <a href=\"https://hackmd.io/D_wskAmRT52zL9xmhmg0Kg\">https://hackmd.io/D_wskAmRT52zL9xmhmg0Kg</a></p>",
        "id": 201066160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337492
    },
    {
        "content": "<p>Nothing on the agenda today</p>",
        "id": 201066276,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337555
    },
    {
        "content": "<p>But I figure one thing we could talk about is <a href=\"https://github.com/rust-lang/chalk/pull/526\">https://github.com/rust-lang/chalk/pull/526</a>, and the impact of negative cycles</p>",
        "id": 201066360,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337587
    },
    {
        "content": "<p>Ok <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> meeting time</p>",
        "id": 201066442,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337608
    },
    {
        "content": "<p>Let's start with announcements and updates first?</p>",
        "id": 201066479,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337622
    },
    {
        "content": "<p>11 PRs merged in the last week</p>",
        "id": 201066560,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337656
    },
    {
        "content": "<p>I've been messing about with the skill-tree repo -- I think I had an mdbook preprocessor working</p>",
        "id": 201066587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592337671
    },
    {
        "content": "<p>so that you can do <code>skill-tree...</code> and have it render</p>",
        "id": 201066601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592337679
    },
    {
        "content": "<p>I want to try and \"upgrade\" the skill-tree to be less fine-grained</p>",
        "id": 201066631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592337691
    },
    {
        "content": "<p>that's awesome</p>",
        "id": 201066636,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337692
    },
    {
        "content": "<p>and more like \"each item is a tracking issue\"</p>",
        "id": 201066647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592337695
    },
    {
        "content": "<p>ideally integrated with the github API so that it queries the issue to find the number of checked boxes</p>",
        "id": 201066669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592337712
    },
    {
        "content": "<p>and can show you the overall progress as a percentage :)</p>",
        "id": 201066678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592337718
    },
    {
        "content": "<p>I know there was a mention elsewhere that someone liked it and thinks it could be a good idea for rust in general</p>",
        "id": 201066679,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337719
    },
    {
        "content": "<p>but that...can wait</p>",
        "id": 201066682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592337720
    },
    {
        "content": "<p>this would be closer to the \"classic Lin Clark skill tree\" I think</p>",
        "id": 201066742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592337735
    },
    {
        "content": "<p>anyway, this is what I did in the last 30 minutes because I was too fried to do anything else :)</p>",
        "id": 201066763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592337748
    },
    {
        "content": "<p>/me embarassed to admit how long it takes him to get JS to actually run in a web page</p>",
        "id": 201066826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592337788
    },
    {
        "content": "<p>I've done some work on generators locally - though I've been holding off for the closures PR, so I don't duplicate work on upvar handling</p>",
        "id": 201066851,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592337806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> I think Chalk will actually do very little in terms of upvars</p>",
        "id": 201066984,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337861
    },
    {
        "content": "<p>I'll have a PR open soon, then</p>",
        "id": 201067053,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592337890
    },
    {
        "content": "<p>Closures are getting pretty close</p>",
        "id": 201067077,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337904
    },
    {
        "content": "<p>Trying to update the rustc implementation for the lastest changes and tests are failing, so I have to dig into why</p>",
        "id": 201067134,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337931
    },
    {
        "content": "<p>Also, we now have Tracing in Chalk :)</p>",
        "id": 201067273,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337994
    },
    {
        "content": "<p>(finally)</p>",
        "id": 201067284,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592337999
    },
    {
        "content": "<p>I'm pretty excited to start playing with it</p>",
        "id": 201067335,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338032
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is elsewhere</p>",
        "id": 201067379,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338055
    },
    {
        "content": "<p>whoops, sorry, back :)</p>",
        "id": 201067409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338067
    },
    {
        "content": "<p>I have a question about the tracing support</p>",
        "id": 201067448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338082
    },
    {
        "content": "<p>Can you give a quick rundown on what does tracing enable?</p>",
        "id": 201067480,
        "sender_full_name": "Areredify",
        "timestamp": 1592338087
    },
    {
        "content": "<p>does it still do \"indenting\"?</p>",
        "id": 201067481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338088
    },
    {
        "content": "<p>Hmm</p>",
        "id": 201067511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338105
    },
    {
        "content": "<p>I think that's dependent on the formatting</p>",
        "id": 201067520,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span> ^</p>",
        "id": 201067557,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338144
    },
    {
        "content": "<p>that seems pretty important</p>",
        "id": 201067583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338171
    },
    {
        "content": "<p>It doesn't do indenting as it is, but we can write a custom formatter if we want that</p>",
        "id": 201067614,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1592338193
    },
    {
        "content": "<p>I think we need to use <a href=\"https://github.com/davidbarsky/tracing-tree\">https://github.com/davidbarsky/tracing-tree</a></p>",
        "id": 201067616,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338194
    },
    {
        "content": "<p>I think we definitely want that, yeah</p>",
        "id": 201067687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338221
    },
    {
        "content": "<p>I saw there were some documentation edits</p>",
        "id": 201067709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338229
    },
    {
        "content": "<p>we should be sure to document the most convenient flow</p>",
        "id": 201067715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338237
    },
    {
        "content": "<p>(for getting indenting etc)</p>",
        "id": 201067730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span> think you can a followup PR to add <code>tracing-tree</code>?</p>",
        "id": 201067754,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338264
    },
    {
        "content": "<p>I at least make heavy use of the (old) \"CHALK_DEBUG=1\" functionality, to just get an \"overview\" of what the solver is doing at each step etc</p>",
        "id": 201067760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338267
    },
    {
        "content": "<p>Wouldn't some kind of indenting be the default?</p>",
        "id": 201067772,
        "sender_full_name": "detrumi",
        "timestamp": 1592338276
    },
    {
        "content": "<p>(I know we still have the info level)</p>",
        "id": 201067779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338279
    },
    {
        "content": "<p>(if tracing is enabled)</p>",
        "id": 201067780,
        "sender_full_name": "detrumi",
        "timestamp": 1592338280
    },
    {
        "content": "<p>yes</p>",
        "id": 201067781,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.2006.2E16.2E2020/near/201067754\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"230601\">Nathan Whitaker</span> think you can a followup PR to add <code>tracing-tree</code>?</p>\n</blockquote>\n<p>Yup! Shouldn't be too difficult I think</p>",
        "id": 201067835,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1592338311
    },
    {
        "content": "<p>it should be a one-line change</p>",
        "id": 201067844,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338321
    },
    {
        "content": "<p>Can't get much easier than that</p>",
        "id": 201067914,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1592338352
    },
    {
        "content": "<p>But <code>CHALK_DEBUG</code> should still work when running tests</p>",
        "id": 201067921,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338358
    },
    {
        "content": "<p>for rustc, I'll have to add support</p>",
        "id": 201067958,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338378
    },
    {
        "content": "<p>I think tracing will require some getting used to and adjusting the workflow but ultimatelly it can provide a lot more flexibility. Things like <a href=\"https://github.com/yaahc/color-spantrace\">https://github.com/yaahc/color-spantrace</a> can be quite neat</p>",
        "id": 201067969,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1592338384
    },
    {
        "content": "<p>and for the record I do like the CHALK_DEBUG=1 as well</p>",
        "id": 201067990,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1592338398
    },
    {
        "content": "<p>yeah I mean the old output was pretty terrible</p>",
        "id": 201068006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338411
    },
    {
        "content": "<p>it'd be great at some point to have some way to more easily (e.g.) collapse trees and walk through the results, idk</p>",
        "id": 201068031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338433
    },
    {
        "content": "<p>I think just making the jump was/is the right decision</p>",
        "id": 201068032,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338433
    },
    {
        "content": "<p>(e.g., perhaps with a html rendering)</p>",
        "id": 201068090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338447
    },
    {
        "content": "<p>and it seems clear that hooking into an existing ecosystem is going to get us much further in that direction</p>",
        "id": 201068109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338460
    },
    {
        "content": "<p>Oh, it would be super interesting to generate something like a flamegraph from the tracing data</p>",
        "id": 201068159,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338489
    },
    {
        "content": "<p>ah yeah that'd be a great visualization</p>",
        "id": 201068186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338504
    },
    {
        "content": "<p>something like that anyway...</p>",
        "id": 201068196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338512
    },
    {
        "content": "<p>Anyways</p>",
        "id": 201068211,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338519
    },
    {
        "content": "<p>Do we want to discuss <a href=\"https://github.com/rust-lang/chalk/pull/526\">https://github.com/rust-lang/chalk/pull/526</a> a bit?</p>",
        "id": 201068224,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338528
    },
    {
        "content": "<p>Specifically, I'm not sure if I quite understand what we might need negative cycle support for</p>",
        "id": 201068266,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338552
    },
    {
        "content": "<p>(I quickly looked at the comment <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> linked but didn't fully grok it)</p>",
        "id": 201068328,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592338571
    },
    {
        "content": "<p>Yeah we can talk about it</p>",
        "id": 201068343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338583
    },
    {
        "content": "<p>Agreed, it seems like there a handful of good reasons to <em>not</em> support them, but is there a solid reason why we <em>should</em>?</p>",
        "id": 201068344,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1592338583
    },
    {
        "content": "<p>it would also be nice to explain the connection between negative cycles support and salsa integration</p>",
        "id": 201068419,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1592338627
    },
    {
        "content": "<p>Is specialization the only place where negative cycles might occur, or are the other posibilities?</p>",
        "id": 201068425,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592338632
    },
    {
        "content": "<p>OK, let's back up a little</p>",
        "id": 201068439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338640
    },
    {
        "content": "<p>So -- chalk supports <code>not { G }</code> goals in its internal structure, but obviously Rust doesn't directly offer users a way to write that sort of thing, and if we did there are different things that it might mean.</p>",
        "id": 201068481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338672
    },
    {
        "content": "<p>Actually even with chalk there are some interesting questions about what one might want it to mean...</p>",
        "id": 201068555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338697
    },
    {
        "content": "<p>...but we can ignore those for the moment. The primary problem is that if you have <code>not { G }</code> goals, you introduce the possibility of negative cycles, and they add a host of complications (although not nearly as many for the recursive solver, at least until we start talking about salsa, which we'll get to)</p>",
        "id": 201068644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338745
    },
    {
        "content": "<p>but rustc does use a limited amount of negative reasoning today</p>",
        "id": 201068701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338790
    },
    {
        "content": "<p>particularly in coherence</p>",
        "id": 201068706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338794
    },
    {
        "content": "<p>if you have two potentially overlapping impls:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">SomeTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">U</span>: <span class=\"nc\">AnotherTrait</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">SomeTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201068789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338823
    },
    {
        "content": "<p>that is allowed if, essentially, <code>not { Vec&lt;T&gt;: AnotherTrait }</code></p>",
        "id": 201068829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338851
    },
    {
        "content": "<p>(subject to some caveats and limitations that I'll gloss over for now)</p>",
        "id": 201068851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338866
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> that kind of answers your first question -- aside from specialization, I believe that this is the only place that negative goals appear in Rust today, and notably they can't be recursive in this location (coherence overlap checks)</p>",
        "id": 201068911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338905
    },
    {
        "content": "<p>in particular, they never appear in any program clauses that we produce, <em>except</em> for potentially specialization</p>",
        "id": 201069018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338942
    },
    {
        "content": "<p>i.e., we never say \"this is true if that is not true\"</p>",
        "id": 201069032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592338950
    },
    {
        "content": "<p>They appear in coherence check for <code>Copy</code> impls (checking that <code>Drop</code> is not implemented)</p>",
        "id": 201069079,
        "sender_full_name": "Areredify",
        "timestamp": 1592338977
    },
    {
        "content": "<p>OK, but that's still a top-level goal (and actually I think it's a bit \"special\" in some other respects too)</p>",
        "id": 201069131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339004
    },
    {
        "content": "<p>i.e., we are rather limiting about the kinds of things you can write <code>Copy</code> and <code>Drop</code> impls for (although I guess the stdlib has a bit more range)</p>",
        "id": 201069169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339023
    },
    {
        "content": "<p>so the question is, what about specialization? that's I think the place where things get a bit trickier</p>",
        "id": 201069264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339055
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">default</span> <span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Debug</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201069346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339098
    },
    {
        "content": "<p>consider an example like that one</p>",
        "id": 201069352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339102
    },
    {
        "content": "<p><em>at least during code generation</em> (not during type-checking, interestingly), we want to be able to say something like <code>&lt;MyType&lt;T&gt; as Iterator&gt;::Item</code> is <code>u32</code> is <code>T: Debug</code> is implemented, and <code>bool</code> otherwise. The otherwise part is effectively saying \"it is bool if <code>not { T: Debug }</code>\"</p>",
        "id": 201069516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339172
    },
    {
        "content": "<p>In other words, we sort of want a rule that works out to the equivalent of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">ProjectionEq</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">MyType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>:<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Implemented</span><span class=\"p\">(</span><span class=\"n\">T</span>: <span class=\"nc\">Debug</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201069627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339245
    },
    {
        "content": "<p>along with another rule like</p>",
        "id": 201069637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339255
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">ProjectionEq</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">MyType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>:<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Implemented</span><span class=\"p\">(</span><span class=\"n\">T</span>: <span class=\"nc\">Debug</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201069666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339276
    },
    {
        "content": "<p>anyway this starts to be a problem, because maybe proving <code>Implemented(T: Debug)</code> winds up requiring us to prove something about <code>&lt;MyType&lt;T&gt; as Iterator&gt;::Item</code>?</p>",
        "id": 201069761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339319
    },
    {
        "content": "<p>then we would have a negative cycle</p>",
        "id": 201069782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339331
    },
    {
        "content": "<p><em>however</em>, there is one other caveat...</p>",
        "id": 201069834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339362
    },
    {
        "content": "<p>at least in rustc today, we construct this \"specialization tree\" that is showing the relationship between impls, and it is testing exactly these sorts of conditions (much like coherence does)</p>",
        "id": 201069872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339386
    },
    {
        "content": "<p>and we wind up giving a kind of cycle error if figuring out the specialization relationship between two iterator impls</p>",
        "id": 201069993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339410
    },
    {
        "content": "<p>winds up requiring that same tree to be constructed</p>",
        "id": 201070041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339444
    },
    {
        "content": "<p>anyway I have to go review <em>exactly</em> how the code works here, I haven't looked at it in a while, and anyway things are unstable, but basically I'm wondering if maybe we can prevent a negative cycle through other means</p>",
        "id": 201070094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339475
    },
    {
        "content": "<p>and indeed maybe we kind of <em>have</em> to..?</p>",
        "id": 201070117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339487
    },
    {
        "content": "<p>that would be kind of nice</p>",
        "id": 201070165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339511
    },
    {
        "content": "<p>because negative cycles are sort of a pain, and I guess I can cover a bit about the salsa complications I was alluding to, but let me stop here first to ask if this all made sense so far?</p>",
        "id": 201070222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339533
    },
    {
        "content": "<p>So, I'm looking at the example you gave here: <a href=\"https://github.com/rust-lang/chalk/issues/219#issuecomment-564721443\">https://github.com/rust-lang/chalk/issues/219#issuecomment-564721443</a></p>",
        "id": 201070232,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592339540
    },
    {
        "content": "<p>I can't see how that <em>should</em> compile</p>",
        "id": 201070253,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592339558
    },
    {
        "content": "<p>(PS this is one of the reasons that I would not support adding <code>T: !Trait</code> to user-syntax unless we gave it a very particular meaning that is not, in fact, much like <code>not { G }</code> at all)</p>",
        "id": 201070273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.2006.2E16.2E2020/near/201070253\">said</a>:</p>\n<blockquote>\n<p>I can't see how that <em>should</em> compile</p>\n</blockquote>\n<p>yeah indeed</p>",
        "id": 201070309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339596
    },
    {
        "content": "<p>I guess one question is whether I can construct a more \"sensical\" example</p>",
        "id": 201070358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339627
    },
    {
        "content": "<p>A negative cycle very much seems like a regular cycle right now in that they aren't provable</p>",
        "id": 201070382,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592339641
    },
    {
        "content": "<p>but...</p>",
        "id": 201070427,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592339646
    },
    {
        "content": "<p>eh</p>",
        "id": 201070428,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592339647
    },
    {
        "content": "<p>It gets back to <code>not</code></p>",
        "id": 201070442,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592339655
    },
    {
        "content": "<p>in what way is a regular cycle not provable?</p>",
        "id": 201070445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339657
    },
    {
        "content": "<p>well, unless it's coinductive</p>",
        "id": 201070489,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592339676
    },
    {
        "content": "<p>well you can still make it work</p>",
        "id": 201070506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339685
    },
    {
        "content": "<p>but it's tricky because it does tend to produce an infinite stream of answers unless you construct things very carefully</p>",
        "id": 201070527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339697
    },
    {
        "content": "<p>e.g. <a href=\"http://rust-lang.github.io/chalk/book/recursive/inductive_cycles.html#inductive-cycles-when-do-we-ever-terminate\">this example has a unique answer though</a></p>",
        "id": 201070577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339726
    },
    {
        "content": "<p>maybe kind of artificial</p>",
        "id": 201070605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339744
    },
    {
        "content": "<p>well, not maybe :)</p>",
        "id": 201070618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339761
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">C</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>with the goal of <code>Implemented(?X: C)</code></p>",
        "id": 201070699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339791
    },
    {
        "content": "<p>well that's not a very good illustration</p>",
        "id": 201070763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339837
    },
    {
        "content": "<p>mhm</p>",
        "id": 201070796,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592339861
    },
    {
        "content": "<p>but anyway your point is true that, apart from coinduction, we can't have a cycle if we know all the types involved, but the main thing I wanted to say is that sometimes we get cycles because of inference variables, and it's possible (esp. in the SLG solver) to build one answer atop another</p>",
        "id": 201070803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339871
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>with the goal <code>?X: A</code> has infinite answers</p>",
        "id": 201070901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339911
    },
    {
        "content": "<p><code>u32</code>, <code>Vec&lt;u32&gt;</code>, <code>Vec&lt;Vec&lt;u32&gt;&gt;</code> etc...</p>",
        "id": 201070918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339925
    },
    {
        "content": "<p>anyway</p>",
        "id": 201070920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339926
    },
    {
        "content": "<p>Right so, where does that leave us</p>",
        "id": 201070963,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592339959
    },
    {
        "content": "<p>side question - when do we generate goals like <code>Implemented(?X: Trait)</code> in rustc?</p>",
        "id": 201070972,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592339966
    },
    {
        "content": "<p>heh all the time</p>",
        "id": 201070984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339973
    },
    {
        "content": "<p>however, we never try to prove them, because we consider it too ambiguous--</p>",
        "id": 201070996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339984
    },
    {
        "content": "<p>we just wait until <code>?X</code> gets constrained by some other means <em>but</em></p>",
        "id": 201071008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592339992
    },
    {
        "content": "<p>you can make very similar examples by making the top-level goal be <code>Vec&lt;?X&gt;: Trait</code> and things like that</p>",
        "id": 201071060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340003
    },
    {
        "content": "<p>an example of where we would create such a goal is</p>",
        "id": 201071076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340018
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Debug</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// type of `x` is `?T`, and we know that `Implemented(?T: Debug)` must hold</span>\n</code></pre></div>",
        "id": 201071095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340040
    },
    {
        "content": "<p>or perhaps just <code>Default::default()</code>, which would yield a value of type <code>?X</code> and create the goal <code>?X: Default</code></p>",
        "id": 201071118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.2006.2E16.2E2020/near/201070963\">said</a>:</p>\n<blockquote>\n<p>Right so, where does that leave us</p>\n</blockquote>\n<p>well, I could talk a bit about the salsa stuff</p>",
        "id": 201071180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340096
    },
    {
        "content": "<p>yeah, I guess that's the other side of the coin</p>",
        "id": 201071195,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592340107
    },
    {
        "content": "<p>I guess though that it leaves us more or less saying \"it'd be nice to figure out if we really need negative cycles\", and I'm not sure, but the answer has everything to do w/ specialization in the end</p>",
        "id": 201071219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340118
    },
    {
        "content": "<p>talking about the salsa stuff is valuable regardless, because I think it's useful for us to talk about caching and chalk</p>",
        "id": 201071271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340132
    },
    {
        "content": "<p>(and incremental compilation)</p>",
        "id": 201071303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340159
    },
    {
        "content": "<p>about how having 2 query systems in the compiler could go wrong?</p>",
        "id": 201071340,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592340200
    },
    {
        "content": "<p>I'm not sure how familiar people are with the model for incremental compilation that rustc/rust-analyzer are using; I'm going to assume at least somewhat. Basically memoized functions and we track the inputs it used and try to figure out if they are dirty.</p>",
        "id": 201071342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> chalk doesn't direectly use salsa, and it's meant to be embedded into either rustc or rust-analyzer, but I'm using salsa as a shorthand here</p>",
        "id": 201071374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340232
    },
    {
        "content": "<p>rustc would of course have be extended with similar capabilities</p>",
        "id": 201071434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340244
    },
    {
        "content": "<p>(in any case I do hope that we can port rustc and rust-analyzer to some common system at some point)</p>",
        "id": 201071461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340263
    },
    {
        "content": "<p>(although I could believe that this actually doesn't make sense because they have different requirements)</p>",
        "id": 201071475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340277
    },
    {
        "content": "<p>anyway the high-level thing I would like to have is that you can execute a query like \"solve this goal\" and we can cache it incrementally, such that if the user adds some new impls, we might not have to re-execute that query</p>",
        "id": 201071539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340321
    },
    {
        "content": "<p>depending on whether they would've been relevant</p>",
        "id": 201071576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340339
    },
    {
        "content": "<p>the recursive solver actually offered what seemed like an intriguing integration opportunity there</p>",
        "id": 201071669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340378
    },
    {
        "content": "<p>That would require having clear inputs for the queries, which I'm not sure is the case</p>",
        "id": 201071684,
        "sender_full_name": "detrumi",
        "timestamp": 1592340385
    },
    {
        "content": "<p>it is</p>",
        "id": 201071691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340389
    },
    {
        "content": "<p>that's what the <code>RustIrDatabase</code> is</p>",
        "id": 201071700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340395
    },
    {
        "content": "<p>basically the high-level idea is</p>",
        "id": 201071724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340403
    },
    {
        "content": "<p>as the query executes, it needs to construct program clauses, and to do that, it invokes calls to <code>RustIrDatabase</code>, asking for details about a given trait or impl</p>",
        "id": 201071776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340426
    },
    {
        "content": "<p>(we can be more selective about which details we ask for, we make some effort now but not much)</p>",
        "id": 201071801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340440
    },
    {
        "content": "<p>but regardless the query system is made precisely to do this sort of tracking -- it can track what we requested</p>",
        "id": 201071817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340452
    },
    {
        "content": "<p>those methods in the <code>RustIrDatabase</code> would be (in turn) salsa queries, so we know <em>their</em> inputs, and hence we can determine if they are dirty</p>",
        "id": 201071927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340485
    },
    {
        "content": "<p>or, in the limit, we can re-execute them and see if they give the same result (without having to do all the other work)</p>",
        "id": 201071938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340494
    },
    {
        "content": "<p>(make sense?)</p>",
        "id": 201071991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340527
    },
    {
        "content": "<p>Okay, so how do negative cycles play into this</p>",
        "id": 201071992,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592340527
    },
    {
        "content": "<p>yeah so the first tricky part is any cycles at all</p>",
        "id": 201072009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340538
    },
    {
        "content": "<p>in some sense the \"best\" integration would be if the recursive solver, whihc internally has as its 'main operation' a \"solve-goal\" method</p>",
        "id": 201072066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340563
    },
    {
        "content": "<p>if that method were indeed just a salsa query</p>",
        "id": 201072077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340570
    },
    {
        "content": "<p>basically part of the <code>RustIrDatabase</code> trait, if you will</p>",
        "id": 201072096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340582
    },
    {
        "content": "<p>it would call back to a helper function like <code>solve_goal_impl</code> implemented in chalk somewhere</p>",
        "id": 201072116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340596
    },
    {
        "content": "<p>and we would be piggy-backing on salsa to do the caching</p>",
        "id": 201072163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340603
    },
    {
        "content": "<p>this is the design I was shooting for and I think it can largely work</p>",
        "id": 201072194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.2006.2E16.2E2020/near/201068159\">said</a>:</p>\n<blockquote>\n<p>Oh, it would be super interesting to generate something like a flamegraph from the tracing data</p>\n</blockquote>\n<p>sorry to butt in, but that's already a thing: <a href=\"https://tracing.rs/tracing_flame/\">https://tracing.rs/tracing_flame/</a> thanks to <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>.</p>\n<p>(lemme know if you run into issues with <code>tracing-tree</code>.)</p>",
        "id": 201072208,
        "sender_full_name": "David Barsky",
        "timestamp": 1592340627
    },
    {
        "content": "<p><a href=\"https://hackmd.io/FCrUiW27TnKw3MTvRtfPjQ\">I wrote some notes about it here</a></p>",
        "id": 201072256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340659
    },
    {
        "content": "<p>anyway if there were no cycles this would actually work pretty trivially</p>",
        "id": 201072276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340671
    },
    {
        "content": "<p>but yeah there are cycles and sometimes we have to deal with that, without reporting an error</p>",
        "id": 201072319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340693
    },
    {
        "content": "<p>so the idea was to extend salsa to have a notion of a \"monotonic\" query</p>",
        "id": 201072335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340704
    },
    {
        "content": "<p>such that if <code>solve_goal(K)</code> winds up invoking itself through some series of <code>solve_goal</code> calls, we basically do the same thing the recursive solver does, but we move that to salsa -- that is, we return an intermediate result and flag it as a cycle. Then we re-execute iteratively until we reach a fixed point.</p>",
        "id": 201072454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340754
    },
    {
        "content": "<p>The job of the <em>chalk</em> there is not to do the iteration, but to define the function for \"one iteration of the loop\", and the \"merging\" function that helps salsa know when fixed point has been reached done</p>",
        "id": 201072483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340781
    },
    {
        "content": "<p>I think this is a kind of clean formulation because the idea of a \"monotonic thing that runs until a fixed point is reached\" is more general than just chalk, though I'm not sure what else you would use it for right now...</p>",
        "id": 201072570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340842
    },
    {
        "content": "<p>...the challenge with <em>negative cycles</em> is that they kind of break this logic and add a bunch more considerations.</p>",
        "id": 201072679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340891
    },
    {
        "content": "<p>(oh, chalk would also have to define the initial value)</p>",
        "id": 201072702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340907
    },
    {
        "content": "<p>anyway it's not that I <em>can't</em> imagine modeling this in salsa, it's just that it seems a lot more tailored to chalk.</p>",
        "id": 201072777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340953
    },
    {
        "content": "<p>which I guess is \"ok\"</p>",
        "id": 201072782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340955
    },
    {
        "content": "<p>but less appealing to me</p>",
        "id": 201072828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592340965
    },
    {
        "content": "<p>It sounds...similar to the problem of \"delayed subgoals\" in the slg solver</p>",
        "id": 201072870,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592340994
    },
    {
        "content": "<p>Is that initial value for the case where it reaches the fixed point in the first iteration?</p>",
        "id": 201072882,
        "sender_full_name": "detrumi",
        "timestamp": 1592341001
    },
    {
        "content": "<p>I realize now that I should try to sketch out this integration idea in a bit more detail, it seems really quite elegant to me, and it's one of the main reasons I've been so interested in the recursive solver and less so in the SLG solver (because integrating the SLG solver feels a lot more complex)</p>",
        "id": 201072894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341008
    },
    {
        "content": "<p>unless I'm just completely misunderstanding</p>",
        "id": 201072901,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.2006.2E16.2E2020/near/201072870\">said</a>:</p>\n<blockquote>\n<p>It sounds...similar to the problem of \"delayed subgoals\" in the slg solver</p>\n</blockquote>\n<p>yeah they are very realted</p>",
        "id": 201072905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341016
    },
    {
        "content": "<p>I mean</p>",
        "id": 201072918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341024
    },
    {
        "content": "<p>delayed subgoals were introduced to handle negative cycles :)</p>",
        "id": 201072925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341030
    },
    {
        "content": "<p>mmm no</p>",
        "id": 201072952,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341040
    },
    {
        "content": "<p>then we sort of adapted them to handle coinduction</p>",
        "id": 201072956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341044
    },
    {
        "content": "<p>delayed subgoals were introduced for coinduction</p>",
        "id": 201072961,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341049
    },
    {
        "content": "<p>delayed \"literals\" on the other hand...</p>",
        "id": 201072978,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341058
    },
    {
        "content": "<p>hehe</p>",
        "id": 201072979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341059
    },
    {
        "content": "<p>yeah, ok</p>",
        "id": 201072989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.2006.2E16.2E2020/near/201072882\">said</a>:</p>\n<blockquote>\n<p>Is that initial value for the case where it reaches the fixed point in the first iteration?</p>\n</blockquote>\n<p>no, it's the value that you get when a cycle arises</p>",
        "id": 201073103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341106
    },
    {
        "content": "<p>the first time, anyway</p>",
        "id": 201073119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341113
    },
    {
        "content": "<p>it's normally \"error\", but for coinductive goals, it should be \"success\", I wrote some about that in <a href=\"https://github.com/rust-lang-nursery/chalk/issues/399\">chalk#399</a></p>",
        "id": 201073166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341136
    },
    {
        "content": "<p>which reminds me that <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> raised an important concern there that we could've also talked about, which has been a bit on my mind, but we're out of time I guess :)</p>",
        "id": 201073225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341169
    },
    {
        "content": "<p>(in particular, the priority mechanism we use to resolve <code>T::Item</code> does kind of mean that things aren't necessarily as monotonic as they are conceptually)</p>",
        "id": 201073277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341195
    },
    {
        "content": "<p>Yeah, I feel this is somewhat the same problem we have in SLG</p>",
        "id": 201073363,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341218
    },
    {
        "content": "<p>(though I want to spend some time trying to craft problematic examples, and I have some hopes that we can overcome that without the mechanism we're currently using to guarantee termination)</p>",
        "id": 201073401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341238
    },
    {
        "content": "<p>That makes implementing a \"priority\" system harder</p>",
        "id": 201073409,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592341243
    },
    {
        "content": "<p>yeah I mean fundamentally priority is kind of ... wrong in a <em>way</em>. certainly it can't be used lightly, it has to be part of a \"well-constructed system\" that makes it ok to disregard the other answer</p>",
        "id": 201073464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341276
    },
    {
        "content": "<p>anyway, I guess we're out of time, hopefully that was useful background :)</p>",
        "id": 201073728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592341413
    }
]