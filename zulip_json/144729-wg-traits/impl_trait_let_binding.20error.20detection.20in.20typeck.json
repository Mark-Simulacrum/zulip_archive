[
    {
        "content": "<p>do someone know why this <a href=\"https://github.com/rust-lang/rust/blob/26366828a40403c83d6cc29bf5614a6e0388354c/compiler/rustc_typeck/src/check/gather_locals.rs#L64\">https://github.com/rust-lang/rust/blob/26366828a40403c83d6cc29bf5614a6e0388354c/compiler/rustc_typeck/src/check/gather_locals.rs#L64</a> is checked using the feature flag there?</p>",
        "id": 246146941,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626378922
    },
    {
        "content": "<p>and same for</p>",
        "id": 246146946,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626378925
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/26366828a40403c83d6cc29bf5614a6e0388354c/compiler/rustc_typeck/src/check/mod.rs#L563\">https://github.com/rust-lang/rust/blob/26366828a40403c83d6cc29bf5614a6e0388354c/compiler/rustc_typeck/src/check/mod.rs#L563</a></p>",
        "id": 246147093,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626378989
    },
    {
        "content": "<p>I meant, I want to remove the feature flag and can't check that in that way anymore</p>",
        "id": 246147221,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626379058
    },
    {
        "content": "<p>I could pass some other enum or something to provide the same kind of check and move forward</p>",
        "id": 246147317,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626379090
    },
    {
        "content": "<p>but I wonder ... shouldn't we handle this at the HIR level using <code>ImplTraitContext::Disallowed</code> somehow</p>",
        "id": 246147546,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626379198
    },
    {
        "content": "<p>and have the compiler not even try to typeck invalid code</p>",
        "id": 246147659,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626379222
    },
    {
        "content": "<p>to me it seems like because there are two different feature flags that trigger this behaviour/check, and the error message needs to know which of the two triggered it</p>",
        "id": 246158231,
        "sender_full_name": "lqd",
        "timestamp": 1626384111
    },
    {
        "content": "<p>yeah but I wonder why don't we error before using <code>Disallowed</code>?</p>",
        "id": 246158371,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626384183
    },
    {
        "content": "<p>in oli's <a href=\"https://github.com/rust-lang/rust/commit/4a6dc8e20328ecb627a519c6704afadcf378a72b\">https://github.com/rust-lang/rust/commit/4a6dc8e20328ecb627a519c6704afadcf378a72b</a> there's the <code>impl_trait_in_bindings</code> you linked above, and <a href=\"https://github.com/rust-lang/rust/commit/4a6dc8e20328ecb627a519c6704afadcf378a72b#diff-1d1a5e417e4d67a3158bf9cbbd88332862840de772f1c345385d2ac34dede737R90-R109\"><code>type_alias_impl_trait</code></a></p>",
        "id": 246158473,
        "sender_full_name": "lqd",
        "timestamp": 1626384241
    },
    {
        "content": "<p>ah, this I have no idea :)</p>",
        "id": 246158544,
        "sender_full_name": "lqd",
        "timestamp": 1626384270
    },
    {
        "content": "<p>I think we can just remove the entire function call? If we stop allowing opaque types here, then we should not call the instantiate_opaque_types_from_value function</p>",
        "id": 246211330,
        "sender_full_name": "oli",
        "timestamp": 1626434928
    },
    {
        "content": "<p>just keep the type used as input for the function as it is and use it wherever the output is used</p>",
        "id": 246211360,
        "sender_full_name": "oli",
        "timestamp": 1626434955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> the thing is if I pass <code>None</code> or remove things the code does compile</p>",
        "id": 246214052,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437010
    },
    {
        "content": "<p>I meant, code that shouldn't compile, compiles</p>",
        "id": 246214058,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/impl_trait_let_binding.20error.20detection.20in.20typeck/near/246214052\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> the thing is if I pass <code>None</code> or remove things the code does compile</p>\n</blockquote>\n<p>None means \"no feature gate required\"</p>",
        "id": 246214076,
        "sender_full_name": "oli",
        "timestamp": 1626437031
    },
    {
        "content": "<p>right</p>",
        "id": 246214082,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437040
    },
    {
        "content": "<p>yeah I know</p>",
        "id": 246214133,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437048
    },
    {
        "content": "<p>but removing it not doing anything is odd</p>",
        "id": 246214139,
        "sender_full_name": "oli",
        "timestamp": 1626437053
    },
    {
        "content": "<p>it doesn't make sense to pass <code>None</code> either</p>",
        "id": 246214142,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437055
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(min_type_alias_impl_trait)]</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALUE</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246214153,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437064
    },
    {
        "content": "<p>that code fails based on the checks there</p>",
        "id": 246214163,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437072
    },
    {
        "content": "<p>I meant, what I can do is use a new enum</p>",
        "id": 246214175,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437084
    },
    {
        "content": "<p>and solve the problem</p>",
        "id": 246214178,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437087
    },
    {
        "content": "<p>but I don't know, it seems a bit odd to me</p>",
        "id": 246214191,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437093
    },
    {
        "content": "<p>shouldn't we reject this code before getting into typeck?</p>",
        "id": 246214222,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437109
    },
    {
        "content": "<p>yea, but... why is passing <code>None</code> equivalent to not doing the instantiation?</p>",
        "id": 246214232,
        "sender_full_name": "oli",
        "timestamp": 1626437114
    },
    {
        "content": "<p>ahh no, I didn't try to say that</p>",
        "id": 246214277,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437135
    },
    {
        "content": "<p>oh XD what's the difference?</p>",
        "id": 246214298,
        "sender_full_name": "oli",
        "timestamp": 1626437146
    },
    {
        "content": "<p>well, maybe you're right, if we don't call that we get an error?</p>",
        "id": 246214313,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437154
    },
    {
        "content": "<p>probably not the one we're currently getting but I guess we could adjust it somehow</p>",
        "id": 246214401,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437191
    },
    {
        "content": "<p>yea, I'd expect a different error</p>",
        "id": 246214472,
        "sender_full_name": "oli",
        "timestamp": 1626437245
    },
    {
        "content": "<p>right</p>",
        "id": 246214506,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437273
    },
    {
        "content": "<p>yeah I was going to remove the call at some point</p>",
        "id": 246214512,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437279
    },
    {
        "content": "<p>but wanted to make moves with more tiny steps</p>",
        "id": 246214582,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437302
    },
    {
        "content": "<p>anyway, I see that doesn't make sense what I was aiming for :P</p>",
        "id": 246214588,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can you explain more or less the purpose of the visit there?</p>",
        "id": 246214899,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437559
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/check/gather_locals.rs#L55\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/check/gather_locals.rs#L55</a></p>",
        "id": 246214902,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437562
    },
    {
        "content": "<p>in particular, if we don't call <code>instantiate_opaque_types_from_value</code>, we don't have a <code>revealed_ty</code></p>",
        "id": 246215107,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437702
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/check/gather_locals.rs#L83\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/check/gather_locals.rs#L83</a></p>",
        "id": 246215142,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/impl_trait_let_binding.20error.20detection.20in.20typeck/near/246215107\">said</a>:</p>\n<blockquote>\n<p>in particular, if we don't call <code>instantiate_opaque_types_from_value</code>, we don't have a <code>revealed_ty</code></p>\n</blockquote>\n<p>replace all uses of <code>revealed_ty</code> with <code>o_ty</code> ^^</p>",
        "id": 246215240,
        "sender_full_name": "oli",
        "timestamp": 1626437778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/impl_trait_let_binding.20error.20detection.20in.20typeck/near/246211360\">said</a>:</p>\n<blockquote>\n<p>just keep the type used as input for the function as it is and use it wherever the output is used</p>\n</blockquote>\n<p>I could have written this in a way that actually is understandable</p>",
        "id": 246215267,
        "sender_full_name": "oli",
        "timestamp": 1626437798
    },
    {
        "content": "<p>basically the instantiate rewires the type if it is an opaque type, and just returns the original type if it is not. So now we just always use the original type, keeping the opaque type uninstantiated</p>",
        "id": 246215320,
        "sender_full_name": "oli",
        "timestamp": 1626437846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/impl_trait_let_binding.20error.20detection.20in.20typeck/near/246215240\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/impl_trait_let_binding.20error.20detection.20in.20typeck/near/246215107\">said</a>:</p>\n<blockquote>\n<p>in particular, if we don't call <code>instantiate_opaque_types_from_value</code>, we don't have a <code>revealed_ty</code></p>\n</blockquote>\n<p>replace all uses of <code>revealed_ty</code> with <code>o_ty</code> ^^</p>\n</blockquote>\n<p>yeah was going to do that but wasn't sure was the right thing to do</p>",
        "id": 246215495,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437960
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, gonna debug a bit to see what's going on</p>",
        "id": 246215513,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626437971
    },
    {
        "content": "<p>before we were getting</p>",
        "id": 246216648,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626438723
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0658]: type alias impl trait is not permitted here\n --&gt; test.rs:7:20\n  |\n7 | const VALUE: Foo = A;\n  |                    ^\n  |\n  = note: see issue #63065 &lt;https://github.com/rust-lang/rust/issues/63065&gt; for more information\n  = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0658`.\n</code></pre></div>",
        "id": 246216674,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626438726
    },
    {
        "content": "<p>and after doing this ...</p>",
        "id": 246216680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626438731
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago rust3 (remove_impl_trait_in_bindings)]$ rustc +rust3-stage1 test.rs\nerror[E0308]: mismatched types\n --&gt; test.rs:7:20\n  |\n3 | type Foo = impl Send;\n  |            --------- the expected opaque type\n...\n7 | const VALUE: Foo = A;\n  |                    ^ expected opaque type, found struct `A`\n  |\n  = note: expected opaque type `impl Send`\n                  found struct `A`\n\nerror: could not find defining uses\n --&gt; test.rs:3:12\n  |\n3 | type Foo = impl Send;\n  |            ^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n</code></pre></div>",
        "id": 246216689,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626438740
    },
    {
        "content": "<p>makes sense!</p>",
        "id": 246216934,
        "sender_full_name": "oli",
        "timestamp": 1626438955
    },
    {
        "content": "<p>it's not a defining use anymore, so we error because we can't figure out <code>A</code> and <code>Foo</code>are the same</p>",
        "id": 246217007,
        "sender_full_name": "oli",
        "timestamp": 1626438992
    },
    {
        "content": "<p>yeah</p>",
        "id": 246219471,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626440530
    },
    {
        "content": "<p>need to adjust tests and this is ready</p>",
        "id": 246219494,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626440543
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>diff --git a/src/test/ui/type-alias-impl-trait/structural-match.min_tait.stderr b/src/test/ui/type-alias-impl-trait/structural-match.min_tait.stderr\nindex 36c49a954bd..f63b1fb23df 100644\n--- a/src/test/ui/type-alias-impl-trait/structural-match.min_tait.stderr\n+++ b/src/test/ui/type-alias-impl-trait/structural-match.min_tait.stderr\n@@ -1,12 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --&gt; $DIR/structural-match.rs:16:20\n+error: `impl Send` cannot be used in patterns\n+  --&gt; $DIR/structural-match.rs:19:9\n    |\n-LL | const VALUE: Foo = value();\n-   |                    ^^^^^^^\n-   |\n-   = note: see issue #63065 &lt;https://github.com/rust-lang/rust/issues/63065&gt; for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+LL |         VALUE =&gt; (),\n+   |         ^^^^^\n\n error: aborting due to previous error\n\n-For more information about this error, try `rustc --explain E0658`.\ndiff --git a/src/test/ui/type-alias-impl-trait/structural-match.rs b/src/test/ui/type-alias-impl-trait/structural-match.rs\nindex daf914cc494..aed9334b3cc 100644\n--- a/src/test/ui/type-alias-impl-trait/structural-match.rs\n+++ b/src/test/ui/type-alias-impl-trait/structural-match.rs\n@@ -1,9 +1,8 @@\n #![feature(const_impl_trait)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n\n type Foo = impl Send;\n\n@@ -13,12 +12,12 @@\n const fn value() -&gt; Foo {\n     A\n }\n-const VALUE: Foo = value(); //[min_tait]~ ERROR not permitted here\n+const VALUE: Foo = value();\n\n fn test() {\n     match todo!() {\n         VALUE =&gt; (),\n-        //[full_tait]~^ `impl Send` cannot be used in patterns\n+        //~^ `impl Send` cannot be used in patterns\n         _ =&gt; (),\n     }\n }\n</code></pre></div>",
        "id": 246228977,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626445186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 246229000,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626445194
    },
    {
        "content": "<p>basically a reduced test case is ...</p>",
        "id": 246229399,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626445360
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_impl_trait)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#![feature(min_type_alias_impl_trait)]</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALUE</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">value</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">A</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246229406,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626445363
    },
    {
        "content": "<p>this compiles with the changes I'm introducing but shouldn't</p>",
        "id": 246229454,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626445384
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago rust3 (remove_impl_trait_in_bindings)]$ rustc test.rs\nerror[E0658]: type alias impl trait is not permitted here\n --&gt; test.rs:9:20\n  |\n9 | const VALUE: Foo = value();\n  |                    ^^^^^^^\n  |\n  = note: see issue #63065 &lt;https://github.com/rust-lang/rust/issues/63065&gt; for more information\n  = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0658`.\n[santiago@galago rust3 (remove_impl_trait_in_bindings)]$ rustc +rust3-stage1 test.rs\nwarning: type alias is never used: `Foo`\n --&gt; test.rs:5:1\n  |\n5 | type Foo = impl Send;\n  | ^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(dead_code)]` on by default\n\nwarning: struct is never constructed: `A`\n --&gt; test.rs:7:8\n  |\n7 | struct A;\n  |        ^\n\nwarning: constant is never used: `VALUE`\n --&gt; test.rs:9:1\n  |\n9 | const VALUE: Foo = value();\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: function is never used: `value`\n  --&gt; test.rs:11:11\n   |\n11 |  const fn value() -&gt; Foo {\n   |           ^^^^^\n\nwarning: 4 warnings emitted\n</code></pre></div>",
        "id": 246229486,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626445402
    },
    {
        "content": "<p>I think this should be prevented in hir lowering</p>",
        "id": 246231849,
        "sender_full_name": "oli",
        "timestamp": 1626446435
    },
    {
        "content": "<p>or... wait it's not <code>const FOO: impl Trait</code></p>",
        "id": 246231878,
        "sender_full_name": "oli",
        "timestamp": 1626446457
    },
    {
        "content": "<p>hmm</p>",
        "id": 246231885,
        "sender_full_name": "oli",
        "timestamp": 1626446460
    },
    {
        "content": "<p>let's just allow it under <code>min_type_alias_impl_trait</code></p>",
        "id": 246232004,
        "sender_full_name": "oli",
        "timestamp": 1626446521
    },
    {
        "content": "<p>and add an entry to the tracking issue so we talk about it</p>",
        "id": 246232081,
        "sender_full_name": "oli",
        "timestamp": 1626446552
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 246236088,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626448131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/impl_trait_let_binding.20error.20detection.20in.20typeck/near/246232081\">said</a>:</p>\n<blockquote>\n<p>and add an entry to the tracking issue so we talk about it</p>\n</blockquote>\n<p>to <code>min_type_alias_impl_trait</code> tracking issue you meant?</p>",
        "id": 246236111,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626448147
    },
    {
        "content": "<p>yea</p>",
        "id": 246236152,
        "sender_full_name": "oli",
        "timestamp": 1626448178
    },
    {
        "content": "<p>(didn't read this topic, let me know if there are any questions for me here :)</p>",
        "id": 246348498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626562647
    }
]