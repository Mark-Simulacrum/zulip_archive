[
    {
        "content": "<p>Any interests in doing a formal version of the solver in theorem provers like Coq? I see similar things being mentioned in the Chalk pages</p>",
        "id": 234026810,
        "sender_full_name": "kentrixy",
        "timestamp": 1618129144
    },
    {
        "content": "<p>That's a good question for which I'd like to hear the answer as well. Although, I would expect that the lowering process and the resulting clauses, that essentially encode Rusts trait system, would make a better formalization target than the solvers themselves.</p>",
        "id": 234028283,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1618130741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"365822\">FireFighterDuck</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Trait.20solver.20in.20Coq/near/234028283\">said</a>:</p>\n<blockquote>\n<p>That's a good question for which I'd like to hear the answer as well. Although, I would expect that the lowering process and the resulting clauses, that essentially encode Rusts trait system, would make a better formalization target than the solvers themselves.</p>\n</blockquote>\n<p>Thanks. I think it would interesting to see a formallisation of the trait system in coq would look like</p>",
        "id": 234124266,
        "sender_full_name": "kentrixy",
        "timestamp": 1618217438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389506\">kentrixy</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Trait.20solver.20in.20Coq/near/234026810\">said</a>:</p>\n<blockquote>\n<p>Any interests in doing a formal version of the solver in theorem provers like Coq? I see similar things being mentioned in the Chalk pages</p>\n</blockquote>\n<p>Any more interests in this?<br>\n :)</p>",
        "id": 234294984,
        "sender_full_name": "kentrixy",
        "timestamp": 1618306342
    },
    {
        "content": "<p>If it's been talked about, it would have been discussed before I was around. I'm not 100% what additional benefit we would get. I think longer-term, we want to essentially try to distill the Rust trait system in to a set of clauses (as Chalk does) and write that formally. Currently, there are some things that we can't express solely as clauses; it would be interesting if we <em>could</em> one day, but not sure. I think either way, trying to do a \"formal version\" is several years off</p>",
        "id": 234390327,
        "sender_full_name": "Jack Huey",
        "timestamp": 1618343763
    },
    {
        "content": "<p>I think writing a formal statement of the trait system is very valuable, whether it's written in Coq, as datalog clauses, or something else, and proving things about that statement is not a requirement. It's a necessary component of eventual specification, and certainly it will make it easier for people who want to try proving something about the system to have a basis on which to work with some reasonable connection to the real thing</p>",
        "id": 234431172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618366699
    },
    {
        "content": "<p>I don't think it is a several years project. A month sounds about right, but that's assuming the actual semantics are known. The most likely stalling point would be in areas where no one knows what we actually want to do and we hesitate to certify what rustc currently does as official</p>",
        "id": 234431316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618366827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Trait.20solver.20in.20Coq/near/234431172\">said</a>:</p>\n<blockquote>\n<p>I think writing a formal statement of the trait system is very valuable, whether it's written in Coq, as datalog clauses, or something else, and proving things about that statement is not a requirement. It's a necessary component of eventual specification, and certainly it will make it easier for people who want to try proving something about the system to have a basis on which to work with some reasonable connection to the real thing</p>\n</blockquote>\n<p>Thanks. I believe such a system would not be a multi year project either. What I'd like to think is how such a formal system would be of help to the language designer/compiler people. However, With no formal spec of Rust language itself, it can be quite a open problem.</p>",
        "id": 234437864,
        "sender_full_name": "kentrixy",
        "timestamp": 1618372850
    },
    {
        "content": "<p>The obvious utility of formalizing these things to language designer / compiler people is that it requires asking hard questions about what to do in various edge cases that may not have been considered, as well as drawing a high level picture of the situation that may reveal certain design inconsistencies that were not originally obvious at the individual-bug-fixes level</p>",
        "id": 234442968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618377953
    }
]