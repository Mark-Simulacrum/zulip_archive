[
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-compiler-traits</span> ! (oh, and <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>, who I don't think is on that alias yet) As discussed yesterday, we'll be doing a kind of walkthrough on this topic + problem today</p>",
        "id": 158133106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549990785
    },
    {
        "content": "<p>as ever :P I didn't get as much time to prepare as I would like, so i'm spending a few minutes <a href=\"https://paper.dropbox.com/doc/Universes-and-57639--AXbYe7QtztADd1Ymt1UE2kprAg-vVrMCkndUoXzyrHCOQdq8\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Universes-and-57639--AXbYe7QtztADd1Ymt1UE2kprAg-vVrMCkndUoXzyrHCOQdq8\">dropping notes into a paper document</a></p>",
        "id": 158133196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549990814
    },
    {
        "content": "<p>However, part of the point of having people involved, is that this is supposed to be a bit of an interactive walk</p>",
        "id": 158133224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549990832
    },
    {
        "content": "<p>with you the audience helping control the flow of instruction :)</p>",
        "id": 158133232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549990839
    },
    {
        "content": "<p>so that's sort of by design I guess...</p>",
        "id": 158133236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549990843
    },
    {
        "content": "<p>Meeting link: <a href=\"https://zoom.us/j/417259692\" target=\"_blank\" title=\"https://zoom.us/j/417259692\">https://zoom.us/j/417259692</a></p>",
        "id": 158133276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549990877
    },
    {
        "content": "<p>/me wishes there was a free service that transcribed this in real time in order to follow along at home</p>",
        "id": 158133556,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549991067
    },
    {
        "content": "<p>have fun! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 158133565,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549991078
    },
    {
        "content": "<p>surprisingly, I'm available!</p>",
        "id": 158137323,
        "sender_full_name": "Josh Huber",
        "timestamp": 1549993984
    },
    {
        "content": "<p>if i can figure out how to use software.</p>",
        "id": 158137350,
        "sender_full_name": "Josh Huber",
        "timestamp": 1549994009
    },
    {
        "content": "<p>(Oops, I'll just watch the video later :)</p>",
        "id": 158137666,
        "sender_full_name": "Josh Huber",
        "timestamp": 1549994249
    },
    {
        "content": "<p>dang it, I forgot to use my microphone</p>",
        "id": 158380039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549999790
    },
    {
        "content": "<p>voice quality is so much worse when using the headphone mic</p>",
        "id": 158380049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1549999801
    },
    {
        "content": "<p>I'll try to get the video up today but also we need to schedule a follow-up session</p>",
        "id": 158443459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550067704
    },
    {
        "content": "<p>tomorrow is pretty open for me, I think</p>",
        "id": 158462207,
        "sender_full_name": "tmandry",
        "timestamp": 1550080864
    },
    {
        "content": "<blockquote>\n<p>I'll try to get the video up today but also we need to schedule a follow-up session</p>\n</blockquote>\n<p>editing video on windows has proven kind of annoying</p>",
        "id": 158468274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550085088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> FWIW, we use <a href=\"https://www.blackmagicdesign.com/products/davinciresolve\" target=\"_blank\" title=\"https://www.blackmagicdesign.com/products/davinciresolve\">Davinci Resolve</a> for our video series. It's pretty amazing and free. It supports at least Mac and Windows</p>",
        "id": 158471036,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1550087077
    },
    {
        "content": "<blockquote>\n<p>editing video on windows has proven kind of annoying</p>\n</blockquote>\n<p>Is Windows Movie Maker still a thing? I remember that being easy for simple edits like trimming video, etc.</p>",
        "id": 158471187,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1550087212
    },
    {
        "content": "<p>maybe virtualdub, but I don't know about the codec support</p>",
        "id": 158476781,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1550091794
    },
    {
        "content": "<p><a href=\"https://youtu.be/iV1Z0xYXkck\" target=\"_blank\" title=\"https://youtu.be/iV1Z0xYXkck\">The \"Universes\" video is now available on YouTube</a>, although I think processing is not yet complete. I also created a Playlist there.</p>",
        "id": 158533698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550155537
    },
    {
        "content": "<p>For the next session: How about tomorrow at 14:00 EST?</p>\n<p>(cc <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>, <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span>, <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>, who participated in last video)</p>",
        "id": 158549987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550167432
    },
    {
        "content": "<p>perfect!</p>",
        "id": 158550050,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550167463
    },
    {
        "content": "<p>That won't work for me, but I can always watch the video</p>",
        "id": 158550063,
        "sender_full_name": "tmandry",
        "timestamp": 1550167484
    },
    {
        "content": "<p>ok. I'm actually pretty flexible that day.</p>",
        "id": 158550078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550167499
    },
    {
        "content": "<p>same</p>",
        "id": 158550118,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550167520
    },
    {
        "content": "<p>For me, earlier in the morning (before 11am EST) or perhaps late in the afternoon is pretty free</p>",
        "id": 158550163,
        "sender_full_name": "tmandry",
        "timestamp": 1550167559
    },
    {
        "content": "<p>..that's probably not great given everyone's time zones, so I'll sit this one out</p>",
        "id": 158550997,
        "sender_full_name": "tmandry",
        "timestamp": 1550168207
    },
    {
        "content": "<p>earlier is just fine for me!</p>",
        "id": 158551527,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550168584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> I'd really prefer to have both of you if possible -- would 10am or 10:30am work for either of you?</p>",
        "id": 158571458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550183544
    },
    {
        "content": "<p>I'm actually quite flexible, it's more <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> that I'm concerned about, as that is 7am west coast time</p>",
        "id": 158571463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550183561
    },
    {
        "content": "<p>I could also do the afternoon tbh</p>",
        "id": 158571475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550183571
    },
    {
        "content": "<p>That works for me, I just might have to leave by 11:30</p>",
        "id": 158571675,
        "sender_full_name": "tmandry",
        "timestamp": 1550183760
    },
    {
        "content": "<p>10 am or 10:30 work for me :)</p>",
        "id": 158572354,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1550184375
    },
    {
        "content": "<p>If not does 4:30pm or (preferably) 5pm work for you <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>?</p>",
        "id": 158578647,
        "sender_full_name": "tmandry",
        "timestamp": 1550190705
    },
    {
        "content": "<p>(sorry, tomorrow's not the best day for me; mon and tues are also bad but I have some availability over the weekend)</p>",
        "id": 158578818,
        "sender_full_name": "tmandry",
        "timestamp": 1550190918
    },
    {
        "content": "<p>Welp, having not heard from <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>, I guess we're not doing it at 11 am =)</p>",
        "id": 158625308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550246829
    },
    {
        "content": "<p>But also I wound up with some last minute meetings and things</p>",
        "id": 158625327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550246842
    },
    {
        "content": "<p>bah, sorry! wouldn't've been able to do that time anyway</p>",
        "id": 158632140,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550251881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are we sticking with the currently-scheduled invite, or gonna shoot for next week to catch <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span>?</p>",
        "id": 158635047,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550253797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>, <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> -- I'm debating about moving that to early next week</p>",
        "id": 158638782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550256642
    },
    {
        "content": "<p>today proved to be a lot more full than expected</p>",
        "id": 158638790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550256646
    },
    {
        "content": "<p>and I'm only sitting down <em>now</em> to do some of the work I had planned to do <em>earlier</em></p>",
        "id": 158638801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550256655
    },
    {
        "content": "<p>but also I at the co-working space and don't have the good microphone I wanted to use :P</p>",
        "id": 158638821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550256668
    },
    {
        "content": "<p>are  you thinking you'll pursue a stop-gap fix for the time being?</p>",
        "id": 158638833,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550256677
    },
    {
        "content": "<p>well, I'm trying to decide what work to do now actually</p>",
        "id": 158638853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550256694
    },
    {
        "content": "<p>I think the first thing is to catalog the problems</p>",
        "id": 158638865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550256706
    },
    {
        "content": "<p>but also maybe to try and game out a possible stop-gap fix</p>",
        "id": 158638872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550256711
    },
    {
        "content": "<p>I guess to that end, I would be game to do a video chat now-ish (even recorded, doesn't matter) just to \"rubber duck\" and talk out the situation</p>",
        "id": 158638934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550256731
    },
    {
        "content": "<p>i'm down for that if it seems helpful <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 158638962,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550256753
    },
    {
        "content": "<p>though I do think a dedicated call trying to more thoroughly explain \"how current system works\" is a good idea</p>",
        "id": 158638965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550256756
    },
    {
        "content": "<p>agreed</p>",
        "id": 158638967,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550256761
    },
    {
        "content": "<p>(but that can wait a day or two)</p>",
        "id": 158638971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550256764
    },
    {
        "content": "<p>ok, what the heck, let me see if there's a 'phonebooth' available</p>",
        "id": 158638976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550256777
    },
    {
        "content": "<p>actually, <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>, there isn't right now, but I bet we could do this just as well on zulip</p>",
        "id": 158639222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550256970
    },
    {
        "content": "<p>wfm!</p>",
        "id": 158639229,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550256985
    },
    {
        "content": "<p>I believe there are three universe related errors:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/57639\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57639\">#57639</a></li>\n<li>the ICE <a href=\"https://github.com/rust-lang/rust/issues/58451\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58451\">#58451</a></li>\n<li>and <a href=\"https://github.com/rust-lang/rust/issues/46989\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46989\">#46989</a>, the fn pointer universe thing</li>\n</ul>",
        "id": 158639362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257091
    },
    {
        "content": "<p>I think the middle one is not particularly bothersome</p>",
        "id": 158639375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257104
    },
    {
        "content": "<p>though I have 24 messages still to read in that thread, where <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> and <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> were digging into it some</p>",
        "id": 158639399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257117
    },
    {
        "content": "<p>but I am like 99% sure the problem is a in the region error reporting code, basically that it wasn't fully generalized to account for universes (we had a similar bug in NLL)</p>",
        "id": 158639425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257144
    },
    {
        "content": "<p>let me refresh my memory a bit about <a href=\"https://github.com/rust-lang/rust/issues/57639\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57639\">#57639</a>...</p>",
        "id": 158639441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257159
    },
    {
        "content": "<p>Ah, right. So the basic problem here is an old one</p>",
        "id": 158639574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257235
    },
    {
        "content": "<p>I <a href=\"https://github.com/rust-lang/rust/issues/57639#issuecomment-455685861\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57639#issuecomment-455685861\">summarized it here</a></p>",
        "id": 158639594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257253
    },
    {
        "content": "<p>in short, we have a where-clause in scope, but that where clause is less general than the impl</p>",
        "id": 158639636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257289
    },
    {
        "content": "<p>well, in this case, it's not the impl</p>",
        "id": 158639651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257303
    },
    {
        "content": "<p>but we have a candidate from the where clause, and one from the trait definition</p>",
        "id": 158639665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257313
    },
    {
        "content": "<p>example test:</p>",
        "id": 158639666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257315
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>::<span class=\"n\">Item</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 158639722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257331
    },
    {
        "content": "<p>in this case, the trait definition supplies <code>for&lt;'a&gt; &lt;X as Bar&gt;::Item: Foo&lt;'a&gt;</code>, basically</p>",
        "id": 158639894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257454
    },
    {
        "content": "<p>in the older system that predates universes -- the \"leak check\" --  we used to wind up with a \"unification failure\" when considering the where clause</p>",
        "id": 158639921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257485
    },
    {
        "content": "<p>because it would refuse to instantiate the HRTB?</p>",
        "id": 158640001,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550257534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> do you remember how the leak check worked?</p>",
        "id": 158640135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257609
    },
    {
        "content": "<p>basically the idea was that we would scan the resulting region obligations</p>",
        "id": 158640148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257620
    },
    {
        "content": "<p>you can kind of reframe it in universe terms</p>",
        "id": 158640166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257631
    },
    {
        "content": "<p>effectively it would find all the things that a placeholder was \"related\" to -- the code (incorrectly) didn't distinguish between <code>R: P</code> and <code>P: R</code>, where <code>P</code> is a placeholder</p>",
        "id": 158640192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257652
    },
    {
        "content": "<p>if any of those regions <code>R</code> were from an \"outer universe\" -- the way the actual code worked, this meant \"pre-existed the region computation\", more or less -- it would report a unification error</p>",
        "id": 158640276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257690
    },
    {
        "content": "<p>so in this case, since we are trying to prove that <code>for&lt;'a&gt; T::Item: Foo&lt;'a&gt;</code>...</p>",
        "id": 158640320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257726
    },
    {
        "content": "<p>we would create a placeholder for <code>'a</code>...</p>",
        "id": 158640325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257730
    },
    {
        "content": "<p>resulting in a where-clause of <code>T::Item: Foo&lt;'!1&gt;</code></p>",
        "id": 158640344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257746
    },
    {
        "content": "<p>we would then try to unify with the where clause, <code>T::Item: Foo&lt;'a&gt;</code></p>",
        "id": 158640356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257763
    },
    {
        "content": "<p>then we would scan the reuslting region obligation and observe that <code>'a == '!1</code> was required, and give a hard error</p>",
        "id": 158640374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257777
    },
    {
        "content": "<p>got it</p>",
        "id": 158640381,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550257783
    },
    {
        "content": "<p>so basically we could do something similar</p>",
        "id": 158640389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257791
    },
    {
        "content": "<p>the question is just kind of .. where to do it</p>",
        "id": 158640405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257802
    },
    {
        "content": "<p>this is also why the coherence rules changed</p>",
        "id": 158640454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257811
    },
    {
        "content": "<p>certainly one of my goals with this PR <em>was</em> to change the way this worked</p>",
        "id": 158640464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257821
    },
    {
        "content": "<p>right, i was going to ask, i don't quite understand why we'd <em>want</em> to make the unification fail</p>",
        "id": 158640491,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550257848
    },
    {
        "content": "<p>(oh, I think that's another \"regression report\", though I'm not sure it has an issue number)</p>",
        "id": 158640493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257851
    },
    {
        "content": "<p>there are some reasons we <em>don't</em></p>",
        "id": 158640509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257866
    },
    {
        "content": "<p>among them, it means that -- in principle, at least -- we can have a more efficient type check</p>",
        "id": 158640532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257881
    },
    {
        "content": "<p>since it can ignore regions, bound or unbound</p>",
        "id": 158640539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257889
    },
    {
        "content": "<p>also, there are some other concerns</p>",
        "id": 158640541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257894
    },
    {
        "content": "<p>e.g., eventually I want us to get smarter and extend the system to include implication</p>",
        "id": 158640550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257905
    },
    {
        "content": "<p>so e.g. <code>for&lt;'a&gt; { if ('a: 'b) { 'a: 'b } }</code> should be provable</p>",
        "id": 158640558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257920
    },
    {
        "content": "<p>the idea being that if you have a function type like <code>for&lt;'a&gt; fn(&amp;'b &amp;'a u32)</code>, we might infer that <code>if ('b: 'a) { .. }</code> as part of its WF condition or whatever</p>",
        "id": 158640637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257966
    },
    {
        "content": "<p>because that's what it takes for the fn arugments to be WF</p>",
        "id": 158640642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257973
    },
    {
        "content": "<p>this obviously realtes to that bug you found way back when :)</p>",
        "id": 158640650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550257981
    },
    {
        "content": "<p>yup, was just thinking about that</p>",
        "id": 158640669,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550257993
    },
    {
        "content": "<p>all of that said, the current trait checker is pretty dumb here</p>",
        "id": 158640681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258007
    },
    {
        "content": "<p>so it's behavior is not very good</p>",
        "id": 158640685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258010
    },
    {
        "content": "<p>I had hoped that in a chalk-enabled future,</p>",
        "id": 158640696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258023
    },
    {
        "content": "<p>ok so just to be clear,  the issue here currently is that the less general <code>where</code> clause ends up obstructing the trait's internal bound, but that in  turn makes WF fail?</p>",
        "id": 158640700,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258027
    },
    {
        "content": "<p>we would figure out that the reuslting region constraint is actually more complex, and includes an <code>||</code> basically</p>",
        "id": 158640708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258039
    },
    {
        "content": "<blockquote>\n<p>ok so just to be clear,  the issue here currently is that the less general <code>where</code> clause ends up obstructing the trait's internal bound, but that in  turn makes WF fail?</p>\n</blockquote>\n<p>right</p>",
        "id": 158640749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258045
    },
    {
        "content": "<p>so what <em>chalk</em> would do here is explore both, and -- if suitably extended -- we could produce a region constraint like <code>'a == '0 || for&lt;'b&gt; { '0 == 'b }</code>, where only the second half fails</p>",
        "id": 158640804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258089
    },
    {
        "content": "<p>and is that roughly because, since we're trying to push region checking stuff to a separate phase, the <code>where</code> clause looks \"good enough\" to unify, but then turns out not to be good enough when regions are being checked?</p>",
        "id": 158640806,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258090
    },
    {
        "content": "<p>right</p>",
        "id": 158640824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258104
    },
    {
        "content": "<p>I feel like it might be worth digging a bit into what is going on with <a href=\"https://github.com/rust-lang/rust/issues/46989\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46989\">#46989</a></p>",
        "id": 158640845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258120
    },
    {
        "content": "<p>since that seems a bit odd, and mabe just flat out wrong</p>",
        "id": 158640865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258136
    },
    {
        "content": "<p>i.e., not a \"completeness\" problem but a \"soundness\" problem</p>",
        "id": 158640877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258152
    },
    {
        "content": "<p>OK</p>",
        "id": 158640942,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258178
    },
    {
        "content": "<p>I'm going to try to make a more self-contained example real quick</p>",
        "id": 158641006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258232
    },
    {
        "content": "<p>i'm still chewing a bit on the other --  it seems tricky to find a better solution that fits into our general algorithmic approach here. basically we'd need to be more conservative about deciding that a given source of facts is <em>the</em> one to choose if it entails region constraints</p>",
        "id": 158641018,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258244
    },
    {
        "content": "<p>but it seems really hard to  do  that without going  all the  way to  full search</p>",
        "id": 158641035,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258254
    },
    {
        "content": "<p>like i'm wondering to what extent this  might  just be a fundamental issue with  treating region checking entirely separately</p>",
        "id": 158641048,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258271
    },
    {
        "content": "<p>i can see ways to special-case this particular scenario heuristically</p>",
        "id": 158641099,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258289
    },
    {
        "content": "<p>self-contained example (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=62ceddd2a60d21bdddd14c00d66fda2e\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=62ceddd2a60d21bdddd14c00d66fda2e\">playground</a>):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">assert_foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_foo</span>::<span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 158641116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258308
    },
    {
        "content": "<p>like, before we decide on a  particular source of a fact (here, the <code>where</code> clause), we search for a more general version of  the fact</p>",
        "id": 158641133,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258331
    },
    {
        "content": "<p>hmm</p>",
        "id": 158641158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258355
    },
    {
        "content": "<p>(i'm not sure if my terminology here is clear -- i remember things like \"candidates\" and \"confirmation\" steps, not sure how current that is)</p>",
        "id": 158641166,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258367
    },
    {
        "content": "<p>so I was going to say that going to full search is more-or-less what I was proposing</p>",
        "id": 158641167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258370
    },
    {
        "content": "<p>that's kind of roughly what chalk <em>does</em></p>",
        "id": 158641175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258378
    },
    {
        "content": "<p>but there are some implications I don't love from that :)</p>",
        "id": 158641180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258383
    },
    {
        "content": "<p>hm</p>",
        "id": 158641185,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258386
    },
    {
        "content": "<p>well so, to be more explicit</p>",
        "id": 158641187,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258392
    },
    {
        "content": "<p>generally if  we find a candidate that seems to work to prove something, modulo region constraints, we just choose it and stop looking elsewhere</p>",
        "id": 158641256,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258416
    },
    {
        "content": "<p>but there may be other candidates that also prove that thing while giving different region constraints</p>",
        "id": 158641280,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258436
    },
    {
        "content": "<p>to clarify, are you saying that it will be hard to adapt the <em>current solver</em> here?</p>",
        "id": 158641281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258440
    },
    {
        "content": "<p>(the candidate etc stuff is definitely still how things work)</p>",
        "id": 158641294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258453
    },
    {
        "content": "<p>no, i'm thinking more generally in terms of my understanding of greedy search plus separating out region checking</p>",
        "id": 158641317,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258477
    },
    {
        "content": "<p>like fundamentally we don't want region checking to inform our search</p>",
        "id": 158641340,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258494
    },
    {
        "content": "<p>but to handle this case, we might want to look  for the \"best\" proof of a fact</p>",
        "id": 158641350,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258509
    },
    {
        "content": "<p>right -- although I'm not 100% convinced of this also</p>",
        "id": 158641353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258514
    },
    {
        "content": "<p>rather than accepting the first one that looks plausible</p>",
        "id": 158641356,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258518
    },
    {
        "content": "<blockquote>\n<p>but to handle this case, we might want to look  for the \"best\" proof of a fact</p>\n</blockquote>\n<p>well, this is what I meant by disjunction</p>",
        "id": 158641358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258521
    },
    {
        "content": "<p>so what I meant was</p>",
        "id": 158641406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258531
    },
    {
        "content": "<p>ok, i thought maybe, though i don't fully grasp how  that would look</p>",
        "id": 158641411,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258537
    },
    {
        "content": "<p>are you suggesting that we basically bundle up <em>all</em> possible proofs of a fact, tracking the needed region constraints?</p>",
        "id": 158641509,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258623
    },
    {
        "content": "<p>imagine you have two rules to prove something. I'll go a \"touch\" more abstract.</p>\n<div class=\"codehilite\"><pre><span></span>Foo(&#39;a). // for some &quot;free&quot; region &#39;a\nfor&lt;&#39;a&gt; Foo(&#39;a).\n</pre></div>\n\n\n<p>and you have a goal to prove <code>for&lt;'b&gt; Foo('b)</code>. </p>\n<p>Trying the first option gives you a region constraint of <code>for&lt;'b&gt; { 'a = 'b }</code>. Trying the second option gives you a region constraint of <code>for&lt;'b&gt; { exists&lt;'a&gt; { 'b = 'a } }</code>. You could then say that the result is yes, if the constraint:</p>\n<div class=\"codehilite\"><pre><span></span>for&lt;&#39;b&gt; { &#39;a = &#39;b } OR for&lt;&#39;b&gt; { exists&lt;&#39;a&gt; { &#39;b = &#39;a } }\n</pre></div>\n\n\n<p>is solved.</p>",
        "id": 158641579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258649
    },
    {
        "content": "<p>There are other things that can give rise to this too</p>",
        "id": 158641589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258658
    },
    {
        "content": "<p>for example, <code>where T: Foo&lt;'a&gt;, T: Foo&lt;'b&gt;</code></p>",
        "id": 158641598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258664
    },
    {
        "content": "<p>now, dealing with <code>OR</code> is annoying</p>",
        "id": 158641611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258675
    },
    {
        "content": "<p>though in this <em>particular</em> case not that annoying</p>",
        "id": 158641622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258684
    },
    {
        "content": "<p>ok so, that's what i thought you were suggesting, but i have questions</p>",
        "id": 158641638,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258694
    },
    {
        "content": "<p>most importantly: in general deciding to go with a particular candidate may entail other  proof  obligations, beyond just the region constraints, right?</p>",
        "id": 158641665,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258727
    },
    {
        "content": "<p>yes</p>",
        "id": 158641683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258748
    },
    {
        "content": "<p>or are  you imagining limiting this disjunctive combination to \"base\" facts somehow?</p>",
        "id": 158641685,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258750
    },
    {
        "content": "<p>well</p>",
        "id": 158641692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258757
    },
    {
        "content": "<p>no</p>",
        "id": 158641695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258760
    },
    {
        "content": "<p>I mean, yes, that is correct, but</p>",
        "id": 158641737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258764
    },
    {
        "content": "<p>in the chalk solver, at least, there isn't like a \"single thread\" of proof obligations</p>",
        "id": 158641752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258780
    },
    {
        "content": "<p>so it's not that we have to commit to one choice before we've explored those further proof obligations</p>",
        "id": 158641780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258799
    },
    {
        "content": "<blockquote>\n<p>or are  you imagining limiting this disjunctive combination to \"base\" facts somehow?</p>\n</blockquote>\n<p>not sure what a \"base\" fact is</p>",
        "id": 158641791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258813
    },
    {
        "content": "<p>I guess maybe by \"base fact\" you mean a region constriant?</p>",
        "id": 158641813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258827
    },
    {
        "content": "<p>just one that you get without introducting any additional non-region obligations</p>",
        "id": 158641815,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258831
    },
    {
        "content": "<p>yeah</p>",
        "id": 158641825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258841
    },
    {
        "content": "<p>in <em>some sense</em>, there isn't much <em>special</em> about region constraints</p>",
        "id": 158641839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258853
    },
    {
        "content": "<p>so the thing is, in general we could end  up with a disjunction that has some region constraints, and some trait constraints, right?</p>",
        "id": 158641847,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258858
    },
    {
        "content": "<p>but to \"finish\" the trait side we need to pick <em>one</em> proof and set of region obligations</p>",
        "id": 158641857,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258874
    },
    {
        "content": "<p>but we don't know which one to pick, since the deciding factor is the region constraints</p>",
        "id": 158641919,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258892
    },
    {
        "content": "<p>right.</p>",
        "id": 158641930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258904
    },
    {
        "content": "<p>certainly this is the problem with present solver strategy</p>",
        "id": 158641963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258932
    },
    {
        "content": "<p>and it's generally a tricky scenario</p>",
        "id": 158641970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258938
    },
    {
        "content": "<blockquote>\n<p>but to \"finish\" the trait side we need to pick <em>one</em> proof and set of region obligations</p>\n</blockquote>\n<p>this part I am not sure is true</p>",
        "id": 158641994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258955
    },
    {
        "content": "<p>it depends on what you mean by \"need\" and \"pick\" and \"one\" :)</p>",
        "id": 158642001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258964
    },
    {
        "content": "<p>hahahaha</p>",
        "id": 158642009,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258968
    },
    {
        "content": "<p>ok, one is pretty clear</p>",
        "id": 158642010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550258969
    },
    {
        "content": "<p>ok so, i was imagining a relatively strict phase separation</p>",
        "id": 158642041,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550258995
    },
    {
        "content": "<p>between trait checking and region checking</p>",
        "id": 158642043,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259000
    },
    {
        "content": "<p>hmm so i think maybe a way to think of it is like a \"value\" being a \"Fully evaluated expression \"in lambda calculus</p>",
        "id": 158642095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259012
    },
    {
        "content": "<p>i.e., the region constraint <em>is</em> a contraint just as a \"value\" <em>is</em> an expression</p>",
        "id": 158642127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259034
    },
    {
        "content": "<p>sure</p>",
        "id": 158642134,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259043
    },
    {
        "content": "<p>so like in a typical prolog solver it basically does a DFS over the proof tree</p>",
        "id": 158642165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259074
    },
    {
        "content": "<p>i guess my question is, are we OK  with doing trait solving, then winnowing proofs using region solving, then going <em>back</em> to do more trait solving?</p>",
        "id": 158642186,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259087
    },
    {
        "content": "<p>I don't think we have to do that</p>",
        "id": 158642194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259099
    },
    {
        "content": "<p>(i thought we were trying to avoid that interleaving in favor of a strict phase split)</p>",
        "id": 158642195,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259099
    },
    {
        "content": "<p>that's what I'm trying to say</p>",
        "id": 158642206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259105
    },
    {
        "content": "<p>ok, but i don't see how to avoid that if we allow trait solving to produce <em>arbitrary</em> disjunctions that mix both trait and region constraints</p>",
        "id": 158642218,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259121
    },
    {
        "content": "<p>( though I think one could imagine doing that )</p>",
        "id": 158642242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259123
    },
    {
        "content": "<p>the idea is that you would explore fully the trait constraints</p>",
        "id": 158642285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259143
    },
    {
        "content": "<p>ahhhh</p>",
        "id": 158642293,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259153
    },
    {
        "content": "<p>producing a (potentially complex) region constraint</p>",
        "id": 158642294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259159
    },
    {
        "content": "<p>so exhaustively search and \"bottom out\" in region constraints</p>",
        "id": 158642296,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259164
    },
    {
        "content": "<p>right</p>",
        "id": 158642299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259167
    },
    {
        "content": "<p>that said</p>",
        "id": 158642303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259173
    },
    {
        "content": "<p>basically work out the entire proof tree in all possible cases</p>",
        "id": 158642311,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259177
    },
    {
        "content": "<p>given that region constraints -- at least <em>some</em> of the time -- can be seen to be unsolveable</p>",
        "id": 158642342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259198
    },
    {
        "content": "<p>are you worried about efficiency though?</p>",
        "id": 158642345,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259200
    },
    {
        "content": "<p>maybe it'd be useful to take advatnage of that</p>",
        "id": 158642346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259201
    },
    {
        "content": "<p>yeahok</p>",
        "id": 158642349,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259204
    },
    {
        "content": "<blockquote>\n<p>are you worried about efficiency though?</p>\n</blockquote>\n<p>I am</p>",
        "id": 158642355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259207
    },
    {
        "content": "<p>:)</p>",
        "id": 158642357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259208
    },
    {
        "content": "<p>like we can incorporate shortcut heuristics</p>",
        "id": 158642364,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259211
    },
    {
        "content": "<p>to prune things  that are \"obviously dumb\"</p>",
        "id": 158642376,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259222
    },
    {
        "content": "<p>yeah</p>",
        "id": 158642378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259225
    },
    {
        "content": "<p>this is why I said:</p>",
        "id": 158642384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259228
    },
    {
        "content": "<p>ok</p>",
        "id": 158642386,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259228
    },
    {
        "content": "<p>this is now making sense to me</p>",
        "id": 158642428,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259243
    },
    {
        "content": "<blockquote>\n<p>though in this <em>particular</em> case not that annoying</p>\n</blockquote>",
        "id": 158642445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259246
    },
    {
        "content": "<p>referring to</p>",
        "id": 158642447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259250
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>for&lt;&#39;b&gt; { &#39;a = &#39;b } OR for&lt;&#39;b&gt; { exists&lt;&#39;a&gt; { &#39;b = &#39;a } }\n</pre></div>",
        "id": 158642461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259264
    },
    {
        "content": "<p>because in some sense the left-hand side obviously yields no sol'n</p>",
        "id": 158642474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259275
    },
    {
        "content": "<p>right</p>",
        "id": 158642475,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259277
    },
    {
        "content": "<p>one annoying thing about this</p>",
        "id": 158642486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259289
    },
    {
        "content": "<p>we can basically have a highly approximated version of region checking embedded in the trait solver</p>",
        "id": 158642487,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259290
    },
    {
        "content": "<p>which is not true in chalk today</p>",
        "id": 158642496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259295
    },
    {
        "content": "<p>to help quickly prune</p>",
        "id": 158642497,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259297
    },
    {
        "content": "<p>well basically</p>",
        "id": 158642525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259308
    },
    {
        "content": "<p>it just makes it harder to know when to stop</p>",
        "id": 158642529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259312
    },
    {
        "content": "<p>i.e., if you've found some sol'n with a region constraint like <code>'a: 'b</code> -- you don't know if maybe there is a better one to be found with a more minimal RC</p>",
        "id": 158642562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259338
    },
    {
        "content": "<p>right</p>",
        "id": 158642566,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259344
    },
    {
        "content": "<p>so that is a concern of mine</p>",
        "id": 158642574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259352
    },
    {
        "content": "<p>it's also true that, at least today, we <em>do</em> know the \"binder\" information in the type check</p>",
        "id": 158642644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259377
    },
    {
        "content": "<p>somewhat related: it feels like we'd want a  DAG-ish structure for the proof \"forest\" we produce -- maybe that falls out from caching though?</p>",
        "id": 158642648,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259381
    },
    {
        "content": "<p>(like if multiple avenues of proof wind up generating the same sub-obligations)</p>",
        "id": 158642663,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259396
    },
    {
        "content": "<p>that should fall out from caching</p>",
        "id": 158642669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259405
    },
    {
        "content": "<p>if I understand you</p>",
        "id": 158642676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259410
    },
    {
        "content": "<p>I don't think you wre at the chalk session at all hands, right?</p>",
        "id": 158642680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259415
    },
    {
        "content": "<p>I kind of gave a brief overview of how chalk solver works</p>",
        "id": 158642682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259420
    },
    {
        "content": "<p>i wasn't; i have some recollection of how it <em>used</em> to work when i was hacking on it, not sure how much it's changed</p>",
        "id": 158642704,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259442
    },
    {
        "content": "<p>a lot ;)</p>",
        "id": 158642710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259447
    },
    {
        "content": "<p>haha ok</p>",
        "id": 158642712,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259450
    },
    {
        "content": "<p>I rewrote it completely</p>",
        "id": 158642713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259452
    },
    {
        "content": "<p>based on some papers I was reading</p>",
        "id": 158642723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259465
    },
    {
        "content": "<p>the thing is though</p>",
        "id": 158642729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259474
    },
    {
        "content": "<p>is the rewrite explained on your blog?</p>",
        "id": 158642730,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259475
    },
    {
        "content": "<p>I did write a blog post on it</p>",
        "id": 158642735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259481
    },
    {
        "content": "<p>i plan to go re-read all the posts at some point soon</p>",
        "id": 158642736,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259482
    },
    {
        "content": "<p>hm</p>",
        "id": 158642798,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259498
    },
    {
        "content": "<p>how much do you know about SMT solving?</p>",
        "id": 158642803,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259504
    },
    {
        "content": "<p><a href=\"http://smallcultfollowing.com/babysteps/blog/2018/01/31/an-on-demand-slg-solver-for-chalk/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2018/01/31/an-on-demand-slg-solver-for-chalk/\">\"an on-demand SLG solver for chalk\"</a></p>",
        "id": 158642804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259505
    },
    {
        "content": "<p>heh, not a lot, but I've been wondering whether I should go try to learn more</p>",
        "id": 158642815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259518
    },
    {
        "content": "<p>it feels related</p>",
        "id": 158642817,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259523
    },
    {
        "content": "<p>i don't have a full grasp on the details of how it's done,</p>",
        "id": 158642824,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259533
    },
    {
        "content": "<p>I've read a lot into prolog solving techniques but I feel like there are very related techniques in other areas that I am not versed in</p>",
        "id": 158642828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259538
    },
    {
        "content": "<p>I also feel like -- I feel sort of uneasy about the whole approach to region solving</p>",
        "id": 158642845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259554
    },
    {
        "content": "<p>like I'd like a crisp explanation for <em>why</em> it is quite this way and I find it hard to produce it</p>",
        "id": 158642854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259569
    },
    {
        "content": "<p>but the setup is like: you have a core SAT solver which understands logical operators, but not domain-specific facts; you then have various \"theory solvers\" that can deal with specific kinds of constraints. the SMT solver coordinates back and forth between doing SAT solving and theory solving to find its way quickly to a proof</p>",
        "id": 158642866,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259586
    },
    {
        "content": "<p>so you're interleaving different kinds of proof/constraint solving, in a hopefully smart way</p>",
        "id": 158642941,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259615
    },
    {
        "content": "<p>that said, I was exploring this in a series of blog posts (<a href=\"http://smallcultfollowing.com/babysteps/blog/2019/01/17/polonius-and-region-errors/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2019/01/17/polonius-and-region-errors/\">polonius + region errors</a> and <a href=\"http://smallcultfollowing.com/babysteps/blog/2019/01/21/hereditary-harrop-region-constraints/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2019/01/21/hereditary-harrop-region-constraints/\">polonius + hereditary harrop</a>) and I feel like a phase separation is in some sense very useful for interfacing between \"polonius\" plus \"trait solving\"</p>",
        "id": 158642965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259637
    },
    {
        "content": "<p>interesting</p>",
        "id": 158642984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259651
    },
    {
        "content": "<p>now,  my recollection from a long  while ago is that you were hoping to  get a strict separation, <em>somewhere</em>, between trait and region solving so that for trait solving we could work on erased regions, basically</p>",
        "id": 158642996,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259662
    },
    {
        "content": "<p>right, so that is part of it</p>",
        "id": 158643007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259671
    },
    {
        "content": "<p>but it feels like it's not strictly <strong>necessary</strong></p>",
        "id": 158643021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259683
    },
    {
        "content": "<p>right</p>",
        "id": 158643027,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259687
    },
    {
        "content": "<p>but it's tied up  with whether we \"interleave\", right?</p>",
        "id": 158643036,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259694
    },
    {
        "content": "<p>like, if we <em>could</em> interleave, then instead of bottoming out \"all the proofs\" we could just jump into region solving to help narrow</p>",
        "id": 158643054,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259714
    },
    {
        "content": "<p>yeah, right. We have to be able to convince ourselves that region solving is not influencing our decisions in some way that would go differently at codegen time</p>",
        "id": 158643062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259721
    },
    {
        "content": "<blockquote>\n<p>like, if we <em>could</em> interleave, then instead of bottoming out \"all the proofs\" we could just jump into region solving to help narrow</p>\n</blockquote>\n<p>the thing is...</p>",
        "id": 158643111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259734
    },
    {
        "content": "<p>...what exactly is region <em>solving</em>?</p>",
        "id": 158643124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259744
    },
    {
        "content": "<p>But also, if the solving we are talking about is mostly about higher-ranked things</p>",
        "id": 158643135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259753
    },
    {
        "content": "<p>e.g., universe-style violations</p>",
        "id": 158643141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259757
    },
    {
        "content": "<p>we can actually detect it earlier</p>",
        "id": 158643143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259760
    },
    {
        "content": "<p>right</p>",
        "id": 158643146,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259764
    },
    {
        "content": "<p>which is what we do today, just poorly</p>",
        "id": 158643156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259771
    },
    {
        "content": "<p>er, pre-universe I mean</p>",
        "id": 158643179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259788
    },
    {
        "content": "<p>yeah</p>",
        "id": 158643189,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259798
    },
    {
        "content": "<p>\"yesterday\"</p>",
        "id": 158643192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259801
    },
    {
        "content": "<p>I think this example is also quite relevant</p>",
        "id": 158643209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259818
    },
    {
        "content": "<p>since we're talking about this topic at a pretty general elvel</p>",
        "id": 158643217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259824
    },
    {
        "content": "<p>level</p>",
        "id": 158643221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259826
    },
    {
        "content": "<p>ok so i think we understand each other, and i think i agree with your instincts about \"bottom out all potential proofs into a 'residue' of region constraints, which may include disjunction\"</p>",
        "id": 158643226,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259832
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">bar</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"c1\">// what do we infer the `&#39;_` to be? `&#39;a` or `&#39;b`?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 158643295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259859
    },
    {
        "content": "<blockquote>\n<p>ok so i think we understand each other, and i think i agree with your instincts about \"bottom out all potential proofs into a 'residue' of region constraints, which may include disjunction\"</p>\n</blockquote>\n<p>yeah, it's at least a viable path. it may be inefficient.</p>",
        "id": 158643310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259877
    },
    {
        "content": "<p>(it seems ok in part because i think it will generally be fairly unusual to have multiple, substantially different ways of proving a given obligation, so the extra searching here will  be minimal in practice)</p>",
        "id": 158643313,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550259878
    },
    {
        "content": "<p>that is my guess, yes</p>",
        "id": 158643325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259886
    },
    {
        "content": "<p>that said</p>",
        "id": 158643327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259890
    },
    {
        "content": "<p>if we pop the stack</p>",
        "id": 158643331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259893
    },
    {
        "content": "<p>and we look at <a href=\"https://github.com/rust-lang/rust/issues/46989\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46989\">#46989</a>, and the example I produced for it</p>",
        "id": 158643332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259899
    },
    {
        "content": "<p>it seems pretty clear that the universe code <em>itself</em> has a bug</p>",
        "id": 158643345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259907
    },
    {
        "content": "<p>i.e., I don't expect this code to typecheck (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=62ceddd2a60d21bdddd14c00d66fda2e\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=62ceddd2a60d21bdddd14c00d66fda2e\">playground</a>)</p>",
        "id": 158643354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259923
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">assert_foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_foo</span>::<span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 158643369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259943
    },
    {
        "content": "<p>let me double check my thinking</p>",
        "id": 158643383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259955
    },
    {
        "content": "<p>specifically this would require that <code>exists&lt;A&gt; { (for&lt;'a&gt; fn(&amp;'a i32)) = fn(A) }</code></p>",
        "id": 158643462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550259986
    },
    {
        "content": "<p>yes</p>",
        "id": 158643482,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550260010
    },
    {
        "content": "<p>and it feels like that should fail because the binders are nested wrong</p>",
        "id": 158643484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260011
    },
    {
        "content": "<p>oh wait</p>",
        "id": 158643488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260015
    },
    {
        "content": "<p>yes</p>",
        "id": 158643489,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550260015
    },
    {
        "content": "<p>I have a pending PR</p>",
        "id": 158643493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260017
    },
    {
        "content": "<p>that I think fixes this</p>",
        "id": 158643495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260019
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/58056\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58056\">https://github.com/rust-lang/rust/pull/58056</a></p>",
        "id": 158643534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260052
    },
    {
        "content": "<p>I had kind of forgotten about that</p>",
        "id": 158643542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260063
    },
    {
        "content": "<p>let me double check that</p>",
        "id": 158643610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260089
    },
    {
        "content": "<p>that would be a relief, since I'd hate for things to be <em>unsound</em></p>",
        "id": 158643619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260102
    },
    {
        "content": "<p>indeed</p>",
        "id": 158643627,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550260108
    },
    {
        "content": "<p>though I still think it's worth talking about how to restore the old behavior, perhaps with a warning period</p>",
        "id": 158643640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260118
    },
    {
        "content": "<p>e.g., I think some code in servo was relying on the old behavior</p>",
        "id": 158643655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260127
    },
    {
        "content": "<p>which actually I knew about</p>",
        "id": 158643657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260129
    },
    {
        "content": "<p>and meant to reach out to Simon Sapin</p>",
        "id": 158643659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260133
    },
    {
        "content": "<p>but forgot, in the moment</p>",
        "id": 158643668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260139
    },
    {
        "content": "<p>relies on it for coherence in particular?</p>",
        "id": 158643696,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550260163
    },
    {
        "content": "<p>yeah, but I forgot the details of exactly why</p>",
        "id": 158643713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260178
    },
    {
        "content": "<p>it was kind of hack</p>",
        "id": 158643717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260181
    },
    {
        "content": "<p>a workaround for some other thing</p>",
        "id": 158643726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260187
    },
    {
        "content": "<p>gotcha</p>",
        "id": 158643732,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550260193
    },
    {
        "content": "<p>some other time we broke their code ;)</p>",
        "id": 158643741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260199
    },
    {
        "content": "<p>I think it was from when method dispatch was rewritten</p>",
        "id": 158643807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260219
    },
    {
        "content": "<p>lol</p>",
        "id": 158643814,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550260226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> ok I'm building that branch from that PR, which apparently I no longer had an active checkout for</p>",
        "id": 158644440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260709
    },
    {
        "content": "<p>so I will test that it fixes this example</p>",
        "id": 158644448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260712
    },
    {
        "content": "<p>(and perhaps try to figure out what is blocking the PR in the first place)</p>",
        "id": 158644453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260719
    },
    {
        "content": "<p>but now we can return to the question of what to do about the region checking etc in the shorter term...</p>",
        "id": 158644466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260731
    },
    {
        "content": "<p>OK, sounds good</p>",
        "id": 158644467,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550260731
    },
    {
        "content": "<p>let me see if I can fish up a comment from Simon</p>",
        "id": 158644480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260740
    },
    {
        "content": "<p>but basically what I am imagining</p>",
        "id": 158644494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260749
    },
    {
        "content": "<p>is that you could definitely imagine re-introducing the \"leak check\" but built atop the universes formulation</p>",
        "id": 158644513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260768
    },
    {
        "content": "<p>there are a few points where we could do this</p>",
        "id": 158644519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260776
    },
    {
        "content": "<p>I'm not like super eager to do it</p>",
        "id": 158644540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260794
    },
    {
        "content": "<p>otoh a compatibility grace period at minimum seems wise</p>",
        "id": 158644609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550260813
    },
    {
        "content": "<p>so,  to be clear, this leak check would (sort of by luck) rule out the <code>where</code> clause as a candidate, so that the trait's direct bound on  the associated type would be used instead?</p>",
        "id": 158644670,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550260881
    },
    {
        "content": "<p>re: compatibility warning, it seems like in the long run we'll want to <em>accept</em> this code (as we do on stable today)</p>",
        "id": 158644752,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550260924
    },
    {
        "content": "<p>NB i'm talking about:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>::<span class=\"n\">Item</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 158644763,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550260935
    },
    {
        "content": "<p>so with what's on master right now, we reject this due to being overly greedy; but in the long run if we follow the disjunction strategy we talked about above, we will <em>accept</em> this again</p>",
        "id": 158644813,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550260998
    },
    {
        "content": "<p>which is all to say:  a compatbility warning doesn't actually seem like what we want here</p>",
        "id": 158644824,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261008
    },
    {
        "content": "<blockquote>\n<p>re: compatibility warning, it seems like in the long run we'll want to <em>accept</em> this code (as we do on stable today)</p>\n</blockquote>\n<p>confirm</p>",
        "id": 158644939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261110
    },
    {
        "content": "<blockquote>\n<p>which is all to say:  a compatbility warning doesn't actually seem like what we want here</p>\n</blockquote>\n<p>yes, sorry, I was thinking more about coherence</p>",
        "id": 158644952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261125
    },
    {
        "content": "<p>so this is actually an interesting point though</p>",
        "id": 158644955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261128
    },
    {
        "content": "<p>i.e., we might be able to use these \"universe tests\" to inform the <strong>trait selection</strong> aspect of things</p>",
        "id": 158644963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261144
    },
    {
        "content": "<p>without worry</p>",
        "id": 158644964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261145
    },
    {
        "content": "<p>as quick-pruning heuristics? i agree --</p>",
        "id": 158645038,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261187
    },
    {
        "content": "<p>and that could be a stopgap for doing the complete search</p>",
        "id": 158645044,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261197
    },
    {
        "content": "<p>right, in the \"candidate\" phase</p>",
        "id": 158645051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261201
    },
    {
        "content": "<p>that would fix <a href=\"https://github.com/rust-lang/rust/issues/57639\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57639\">#57639</a></p>",
        "id": 158645054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261206
    },
    {
        "content": "<p>but to be clear, the old tests here were <em>too aggressive</em></p>",
        "id": 158645058,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261211
    },
    {
        "content": "<p>interestingly, we could ALSO do this check in coherence, but issue warnings</p>",
        "id": 158645060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261212
    },
    {
        "content": "<blockquote>\n<p>but to be clear, the old tests here were <em>too aggressive</em></p>\n</blockquote>\n<p>yes, they were, <em>but</em> I don't think that's relevant to this example</p>",
        "id": 158645071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261227
    },
    {
        "content": "<p>ok</p>",
        "id": 158645080,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261232
    },
    {
        "content": "<p>an example where they were wrong</p>",
        "id": 158645089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261240
    },
    {
        "content": "<p>actually a pretty interesting one to me :)</p>",
        "id": 158645097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261246
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">T1</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">T2</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>",
        "id": 158645116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261266
    },
    {
        "content": "<p>those two types are actually <em>equal</em></p>",
        "id": 158645124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261274
    },
    {
        "content": "<p>if I got that right ;)</p>",
        "id": 158645134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261282
    },
    {
        "content": "<p>but the old code didn't think so</p>",
        "id": 158645167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261285
    },
    {
        "content": "<p>wait so these are equated in master?</p>",
        "id": 158645193,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261326
    },
    {
        "content": "<p>yeah, I think so</p>",
        "id": 158645198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261338
    },
    {
        "content": "<p>let's work it out together ;)</p>",
        "id": 158645209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261345
    },
    {
        "content": "<p>that seems bad...</p>",
        "id": 158645211,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261347
    },
    {
        "content": "<p>just to double check</p>",
        "id": 158645212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261347
    },
    {
        "content": "<p>well, they are actually equivalent in every way</p>",
        "id": 158645218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261354
    },
    {
        "content": "<p>really? because the LUB always works?</p>",
        "id": 158645236,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261384
    },
    {
        "content": "<p>i guess that makes sense</p>",
        "id": 158645297,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261404
    },
    {
        "content": "<p>but like, if you added <code>-&gt;  &amp;'a u32</code> and <code>-&gt; 'c  u32</code> respectively, they would <em>not</em> be equal in master?</p>",
        "id": 158645330,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261444
    },
    {
        "content": "<p>confirm</p>",
        "id": 158645339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261450
    },
    {
        "content": "<p>ok <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 158645341,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261454
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>T1 &lt;: T2\n\nforall&lt;&#39;c&gt; {\n  exists&lt;&#39;a, &#39;b&gt; {\n    &#39;c: &#39;a &amp;&amp; &#39;c: &#39;b\n  }\n}\n\nT2 &lt;: T1\n\nforall&lt;&#39;a, &#39;b&gt; {\n  exists&lt;&#39;c&gt; {\n    &#39;a: &#39;c &amp;&amp; &#39;b: &#39;c\n  }\n}\n</pre></div>",
        "id": 158645365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261467
    },
    {
        "content": "<p>I think those are the region constraints? I should have \"shown my work\" prob</p>",
        "id": 158645372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261479
    },
    {
        "content": "<p>it depensd on whether you consider an \"emptyregion\" valid though</p>",
        "id": 158645380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261485
    },
    {
        "content": "<p>the code sort of does</p>",
        "id": 158645382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261488
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 158645383,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261490
    },
    {
        "content": "<p>but I think it also makes sense because, intuitively</p>",
        "id": 158645389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261497
    },
    {
        "content": "<p>like if you can cough up both arguments, there has to be some (nonempty?) lifetime that contains both of them</p>",
        "id": 158645402,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261520
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// OK &#39;c is the intersecton</span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// OK == &#39;a =&#39;c, &#39;b = &#39;c</span>\n</pre></div>",
        "id": 158645449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261531
    },
    {
        "content": "<p>right</p>",
        "id": 158645455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261539
    },
    {
        "content": "<p>yeah</p>",
        "id": 158645456,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261540
    },
    {
        "content": "<p>ok i'm with you</p>",
        "id": 158645461,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261543
    },
    {
        "content": "<p>anyway this comes up in toehr cases</p>",
        "id": 158645473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261557
    },
    {
        "content": "<p>similar things</p>",
        "id": 158645479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261560
    },
    {
        "content": "<p>where we used to error out instead of inferring <code>'static</code></p>",
        "id": 158645486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261565
    },
    {
        "content": "<p>etc</p>",
        "id": 158645487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261566
    },
    {
        "content": "<p>yes</p>",
        "id": 158645490,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261571
    },
    {
        "content": "<p>i  remember that came up during our Zoom call</p>",
        "id": 158645497,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261579
    },
    {
        "content": "<p><em>anyway</em> so -- backing up -- one option might be to add some check into the candidate evaluation</p>",
        "id": 158645542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261625
    },
    {
        "content": "<p>as well as (potentially )a check in coherence</p>",
        "id": 158645548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261637
    },
    {
        "content": "<p>I am a bit nervous about the latter</p>",
        "id": 158645557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261641
    },
    {
        "content": "<p>well it requires the former</p>",
        "id": 158645607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261646
    },
    {
        "content": "<p>i.e., if we permit <code>impl&lt;'a&gt; fn(&amp;'a u32)</code> and <code>impl for&lt;'a&gt; fn(&amp;'a u32)</code></p>",
        "id": 158645636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261675
    },
    {
        "content": "<p>we will have to be able to distinguish between them during trait selection</p>",
        "id": 158645643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261683
    },
    {
        "content": "<p>yes. and if we <em>don't</em> permit them, we have an expressivity gap</p>",
        "id": 158645701,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261750
    },
    {
        "content": "<p>say more?</p>",
        "id": 158645750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261770
    },
    {
        "content": "<p>well, I mean we permit one \"exclusive or\" the other today</p>",
        "id": 158645766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261785
    },
    {
        "content": "<p>but not both</p>",
        "id": 158645776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261795
    },
    {
        "content": "<blockquote>\n<p>yes. and if we <em>don't</em> permit them, we have an expressivity gap</p>\n</blockquote>\n<p>but perhaps you meant like .. long term, one could want both</p>",
        "id": 158645784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261806
    },
    {
        "content": "<p>well so earlier we were talking about the <code>fn</code> case,  and how <code>impl&lt;A&gt; Foo for fn(A)</code> doesn't imply <code>(for&lt;'a&gt; fn(&amp;'a u32)): Foo</code></p>",
        "id": 158645797,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261817
    },
    {
        "content": "<p>it's definitely an \"awkward area\"</p>",
        "id": 158645800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261819
    },
    {
        "content": "<p>so what i'm thinking about is</p>",
        "id": 158645813,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261826
    },
    {
        "content": "<p>ah, yes. that's a problem also today</p>",
        "id": 158645816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261829
    },
    {
        "content": "<p>if you're forced to choose</p>",
        "id": 158645820,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261830
    },
    {
        "content": "<p>i.e., there is actually no way to write the impls in question the way you want to</p>",
        "id": 158645832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261841
    },
    {
        "content": "<p>then you can find yourself in a situation where you <em>want</em> to use the HRTB version</p>",
        "id": 158645833,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261844
    },
    {
        "content": "<p>but you can't because coherence prevents you</p>",
        "id": 158645841,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261856
    },
    {
        "content": "<p>basically different parts of the type system would disagree about whether there is overlap</p>",
        "id": 158645863,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261880
    },
    {
        "content": "<p>ok yeah so <em>today</em> at least, you could have one impl for all <code>A</code>, and then more impls that are specific but contain bound regions</p>",
        "id": 158645864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261882
    },
    {
        "content": "<p>so hm</p>",
        "id": 158645936,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261910
    },
    {
        "content": "<blockquote>\n<p>basically different parts of the type system would disagree about whether there is overlap</p>\n</blockquote>\n<p>definitely this is what I'm trying to think through and avoid, if we try to loosen any rules here</p>",
        "id": 158645941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261913
    },
    {
        "content": "<p>Im feeling a bit confused about what you are saying though</p>",
        "id": 158645949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261923
    },
    {
        "content": "<p>well  so  imagine you have <code>fn  foo&lt;T: Foo&gt;(t: T) -&gt; T</code></p>",
        "id": 158645968,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261942
    },
    {
        "content": "<p>that is, are you saying \"it is GOOD to permit both <code>fn(&amp;'a u32)</code> and <code>for&lt;'a&gt; fn(&amp;'a u32)</code>, because otherwise we have an expressiveness gap\"?</p>",
        "id": 158645973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261945
    },
    {
        "content": "<p>if so, my feeling is sort of... I would rather close that gap another way</p>",
        "id": 158645990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261960
    },
    {
        "content": "<p>but I don't have a specific proposal :)</p>",
        "id": 158646001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261967
    },
    {
        "content": "<p>that is not what i'm saying</p>",
        "id": 158646002,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261969
    },
    {
        "content": "<p>ok</p>",
        "id": 158646005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261971
    },
    {
        "content": "<p>/me listens</p>",
        "id": 158646012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550261979
    },
    {
        "content": "<p>i think what i'm saying is, we need the ability to have the trait implemented for both the HRTB and the \"ground\" version</p>",
        "id": 158646025,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550261995
    },
    {
        "content": "<p>otherwise you can get yourself trapped</p>",
        "id": 158646075,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262005
    },
    {
        "content": "<p>but HOW we do that is up for grabs</p>",
        "id": 158646082,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262011
    },
    {
        "content": "<blockquote>\n<p>i think what i'm saying is, we need the ability to have the trait implemented for both the HRTB and the \"ground\" version</p>\n</blockquote>\n<p>let me rephrase</p>",
        "id": 158646115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262041
    },
    {
        "content": "<p>from a lang design perspective</p>",
        "id": 158646117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262045
    },
    {
        "content": "<p>we want the ability to say \"I implement this for any fn of 1 argument\"</p>",
        "id": 158646124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262052
    },
    {
        "content": "<p>so for example, i think i'd prefer that if you do <code>impl &lt;'a&gt; Foo for fn(&amp;'a u32)</code> that also implies that <code>(for&lt;'a&gt; fn(&amp;'a u32)): Foo</code></p>",
        "id": 158646130,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262057
    },
    {
        "content": "<p>and/or probably a way to say \"I implement this for any fn of any number of arguments\"?</p>",
        "id": 158646148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262068
    },
    {
        "content": "<p>I actually am not sure if the first thing is true</p>",
        "id": 158646157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262075
    },
    {
        "content": "<p>I think the second thing is definitely true</p>",
        "id": 158646163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262078
    },
    {
        "content": "<blockquote>\n<p>so for example, i think i'd prefer that if you do <code>impl &lt;'a&gt; Foo for fn(&amp;'a u32)</code> that also implies that <code>(for&lt;'a&gt; fn(&amp;'a u32)): Foo</code></p>\n</blockquote>\n<p>yes, I've wondered about this.</p>",
        "id": 158646176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262092
    },
    {
        "content": "<p>it feels like it ... almost does</p>",
        "id": 158646194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262105
    },
    {
        "content": "<p>maybe it actually does, so long as the <code>'a</code> doesn't appear anywhere else</p>",
        "id": 158646201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262112
    },
    {
        "content": "<p>i.e.., clearly <code>impl&lt;'a&gt; Foo&lt;'a&gt; for fn(&amp;'a u32)</code> is not sound to do that</p>",
        "id": 158646255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262130
    },
    {
        "content": "<p>put differently: <code>for&lt;'a&gt; (T: Foo)</code> versus <code>(for&lt;'a&gt; T): Foo</code></p>",
        "id": 158646261,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262136
    },
    {
        "content": "<p>it seems like these should  be equivalent</p>",
        "id": 158646275,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262159
    },
    {
        "content": "<p>I am trying to decide if that is correct</p>",
        "id": 158646312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262210
    },
    {
        "content": "<p>in particular, the <code>for</code> part</p>",
        "id": 158646313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262214
    },
    {
        "content": "<blockquote>\n<p>i.e.., clearly <code>impl&lt;'a&gt; Foo&lt;'a&gt; for fn(&amp;'a u32)</code> is not sound to do that</p>\n</blockquote>\n<p>you see what I mean about this?</p>",
        "id": 158646334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262238
    },
    {
        "content": "<p>yes</p>",
        "id": 158646414,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262285
    },
    {
        "content": "<p>(on a related note, i would like us to think about what it means to have <code>exists</code> and <code>for</code> attached to arbitrary types -- <code>exists</code> in particular feels like it could be useful around thinking about impl trait and some of the associated lifetime issues)</p>",
        "id": 158646415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262287
    },
    {
        "content": "<p>it's a scope violation</p>",
        "id": 158646418,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262289
    },
    {
        "content": "<p>right so I guess I'm thinking about like</p>",
        "id": 158646431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262299
    },
    {
        "content": "<p>hmm</p>",
        "id": 158646445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262309
    },
    {
        "content": "<p>I can't figure out how to talk about this :)</p>",
        "id": 158646464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262329
    },
    {
        "content": "<p>but let's move to a very \"operational\" view</p>",
        "id": 158646471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262336
    },
    {
        "content": "<p>when you have <code>impl&lt;'a&gt; ...</code>, we basically instantiate the region parameter <code>'a</code> <em>before</em> unifying the types</p>",
        "id": 158646484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262353
    },
    {
        "content": "<p>this then becomes a problem because when you have a <code>for&lt;...&gt;</code> type, we create placeholders</p>",
        "id": 158646533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262367
    },
    {
        "content": "<p>and thus <code>'a</code> cannot be inferred to those placeholders</p>",
        "id": 158646542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262377
    },
    {
        "content": "<p>yes</p>",
        "id": 158646550,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262385
    },
    {
        "content": "<p>ok so i'm seeing part of the challenge here</p>",
        "id": 158646591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262431
    },
    {
        "content": "<p>oh hm, i'm having doubts about equating these, lemme think for a sec</p>",
        "id": 158646597,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262443
    },
    {
        "content": "<p>if <code>impl&lt;'a&gt; ...</code> was sort of equated with <code>for&lt;'a&gt; fn(&amp;'a u32)</code> in the self type</p>",
        "id": 158646599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262443
    },
    {
        "content": "<blockquote>\n<p>oh hm, i'm having doubts about equating these, lemme think for a sec</p>\n</blockquote>\n<p>I too have doubts ;)</p>",
        "id": 158646618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262466
    },
    {
        "content": "<p>I'm trying to put them into words though.</p>",
        "id": 158646635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262482
    },
    {
        "content": "<p>The code as it is today would (e.g.) assume that <code>'a</code> outlives the fn body of each fn in the impl</p>",
        "id": 158646690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262499
    },
    {
        "content": "<p>because we assume it is \"free\"</p>",
        "id": 158646695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262503
    },
    {
        "content": "<p>i'm not sure quite where that goes wrong</p>",
        "id": 158646701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262509
    },
    {
        "content": "<p>well so, if you impl for <code>for&lt;'a&gt; T: Foo</code>  as a type, the impl can use <code>T</code> at <em>different</em> choices of <code>'a</code></p>",
        "id": 158646713,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262530
    },
    {
        "content": "<p>or, alternatively, if you have <code>impl ... for for&lt;'a&gt; fn(&amp;'a u32)</code>, then you have a fn that you can give references to which do NOT outlive your fn body</p>",
        "id": 158646718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262537
    },
    {
        "content": "<blockquote>\n<p>well so, if you impl for <code>for&lt;'a&gt; T: Foo</code>  as a type, the impl can use <code>T</code> at <em>different</em> choices of <code>'a</code></p>\n</blockquote>\n<p>yes, that's what I mean</p>",
        "id": 158646724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262542
    },
    {
        "content": "<p>I feel like there must be some way to create some incoherent setup</p>",
        "id": 158646739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262553
    },
    {
        "content": "<p>yes</p>",
        "id": 158646743,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262558
    },
    {
        "content": "<p>but i think that</p>",
        "id": 158646750,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262565
    },
    {
        "content": "<p>there should be an implication</p>",
        "id": 158646758,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262570
    },
    {
        "content": "<p>that is,  if you have <code>impl&lt;'a&gt; Foo for T</code> you should get that <code>(for&lt;'a&gt; T): Foo</code></p>",
        "id": 158646775,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262588
    },
    {
        "content": "<p>but not the other way around</p>",
        "id": 158646781,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262593
    },
    {
        "content": "<p>intuitively, because the for can be opened</p>",
        "id": 158646997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262749
    },
    {
        "content": "<p>right</p>",
        "id": 158647008,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262760
    },
    {
        "content": "<p>I was wondering about it</p>",
        "id": 158647013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262765
    },
    {
        "content": "<p>it feels like there has to be a problem</p>",
        "id": 158647017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262773
    },
    {
        "content": "<p>hahaha yeah</p>",
        "id": 158647020,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262777
    },
    {
        "content": "<p>but let's see if we can find it somehow</p>",
        "id": 158647021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262777
    },
    {
        "content": "<p>I mean maybe not</p>",
        "id": 158647041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262805
    },
    {
        "content": "<p>but we would have to ensure</p>",
        "id": 158647046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262816
    },
    {
        "content": "<p>that e.g. if <code>Self</code> type appears in various places</p>",
        "id": 158647051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262822
    },
    {
        "content": "<p>probably it has to be the .. opened version?</p>",
        "id": 158647055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262830
    },
    {
        "content": "<p>or something?</p>",
        "id": 158647058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262832
    },
    {
        "content": "<p>i.e., in some sense, the \"upcast\" here is not in the <em>trait</em> system</p>",
        "id": 158647114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262849
    },
    {
        "content": "<p>but rather in the one <em>using</em> the trait system</p>",
        "id": 158647119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262854
    },
    {
        "content": "<p>right, i think like  <code>Self</code> appearing in multiple places is likely to pose the key problem</p>",
        "id": 158647130,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550262872
    },
    {
        "content": "<p>like, if I am trying to prove that <code>fn(&amp;u32): Trait</code> -- why am I doing that? It probably comes from some method call like <code>Trait::foo(x)</code> where <code>x: fn(&amp;u32)</code></p>",
        "id": 158647147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262894
    },
    {
        "content": "<p>and I could certainly upcast <code>x</code> <em>there</em> to <code>exists&lt;'a&gt; fn(&amp;'a u32)</code></p>",
        "id": 158647154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262903
    },
    {
        "content": "<p>right now, the compiler fails to do that for a variety of reasons</p>",
        "id": 158647173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550262925
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// this CANNOT imply that `(for&lt;&#39;a&gt; fn(&amp;&#39;a u32)): Foo`,</span>\n<span class=\"c1\">// because we have no way to normalize</span>\n<span class=\"c1\">// `&lt;(for&lt;&#39;a&gt; fn(&amp;&#39;a u32)) as Foo&gt;::Output`</span>\n</pre></div>",
        "id": 158647810,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550263457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> i'm gonna run to lunch, but lemme know your  thoughts on ^ when you have a chance</p>",
        "id": 158647914,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550263545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> yes so this intersects a <em>separate</em> thing</p>",
        "id": 158647994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263604
    },
    {
        "content": "<p>In <a href=\"https://rust-lang.github.io/rfcs/1214-projections-lifetimes-and-wf.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rfcs/1214-projections-lifetimes-and-wf.html\">RFC 1214</a>, we specified that lifetime parameters like <code>'a</code> can only appear in an associated type if they also appear (syntactically) in an input type. That would mean that the above impl is accepted. <strong>However,</strong> I have come to regret that decision. I think we should have said that a lifetime parameter like <code>'a</code> can only appear in an associated type value if it is <strong>constrained</strong> by an input type, where <strong>constrained</strong> would exclude fn parameter arguments and other contravariant positions (e.g., trait objects).</p>",
        "id": 158648179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263781
    },
    {
        "content": "<p>Actually variance is an \"imperfect\" fit</p>",
        "id": 158648183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263788
    },
    {
        "content": "<p>but basically the motivation is that it would be nice if <code>fn(&amp;'a u32): 'static</code> were true</p>",
        "id": 158648244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263809
    },
    {
        "content": "<p>presently it is not, and this is because of the above rule</p>",
        "id": 158648250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263815
    },
    {
        "content": "<p>specifically because we want to know that <code>T::Output: 'x</code> if <code>T: 'x</code></p>",
        "id": 158648257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263828
    },
    {
        "content": "<p>but e.g. in your example if <code>fn(&amp;'a u32): 'static</code>, we could conclude that <code>&lt;fn(&amp;'a u32) as Trait&gt;::Output: 'static</code>, which is wrong</p>",
        "id": 158648303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263868
    },
    {
        "content": "<p>I've wondered -- but not tried to evaluate -- if we could get away with changing this rule</p>",
        "id": 158648319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263883
    },
    {
        "content": "<p>Seems probable but not guaranteed</p>",
        "id": 158648323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263886
    },
    {
        "content": "<blockquote>\n<p>but basically the motivation is that it would be nice if <code>fn(&amp;'a u32): 'static</code> were true</p>\n</blockquote>\n<p>but the fact that this is untrue in current Rust feels sorta like a bug</p>",
        "id": 158648344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550263909
    },
    {
        "content": "<p>yeah that's annoying</p>",
        "id": 158653542,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550268140
    },
    {
        "content": "<p>(I followed most of this, fyi)</p>",
        "id": 158769988,
        "sender_full_name": "tmandry",
        "timestamp": 1550457591
    }
]