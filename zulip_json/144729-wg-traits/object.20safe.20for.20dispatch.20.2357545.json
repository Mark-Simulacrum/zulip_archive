[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> -- I am curious to get your thoughts on something. Have you seen <a href=\"https://rust-lang.github.io/rfcs/2027-object_safe_for_dispatch.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rfcs/2027-object_safe_for_dispatch.html\">RFC 2027</a>? It proposes a change to the way that <code>dyn Foo</code> types work, <a href=\"https://rust-lang.github.io/rfcs/2027-object_safe_for_dispatch.html#detailed-design\" target=\"_blank\" title=\"https://rust-lang.github.io/rfcs/2027-object_safe_for_dispatch.html#detailed-design\">summarized here</a>. In short the idea is this:</p>\n<p>Today, the type <code>dyn Foo</code> is only legal if the trait <code>Foo</code> is object-safe, and <code>dyn Foo: Foo</code> always holds.</p>\n<p>Under this proposal, <code>dyn Foo</code> is always well-formed as a type, but <code>dyn Foo: Foo</code> only holds if <code>Foo</code> is object safe.</p>",
        "id": 163751974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555696686
    },
    {
        "content": "<p>One of the things that we've been talking about is the interaction of <code>dyn Foo</code> and implied bounds, and I wanted to bring this to your attention.</p>",
        "id": 163751985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555696703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I’ve read it, and I think I concluded it was impossible to implement it soundly, but I can’t remember how I got to that conclusion</p>",
        "id": 163752076,
        "sender_full_name": "scalexm",
        "timestamp": 1555696800
    },
    {
        "content": "<p>that sounds like a concern :)</p>",
        "id": 163752137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555696811
    },
    {
        "content": "<p>I sort of have this nagging feeling too</p>",
        "id": 163752141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555696817
    },
    {
        "content": "<p>I think it was (as always) related with the <code>dyn Animal&lt;‘static&gt;</code> thing</p>",
        "id": 163752153,
        "sender_full_name": "scalexm",
        "timestamp": 1555696835
    },
    {
        "content": "<p>Yes, presumably.</p>",
        "id": 163752159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555696841
    },
    {
        "content": "<p>I’m in a train right now, basically doing nothing, so I can try to recollect the details</p>",
        "id": 163752271,
        "sender_full_name": "scalexm",
        "timestamp": 1555696926
    },
    {
        "content": "<p>Ok so the setup was:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Animal</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"o\">&gt;</span>: <span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and how to think about <code>dyn Animal&lt;&amp;'a i32&gt;</code></p>",
        "id": 163752770,
        "sender_full_name": "scalexm",
        "timestamp": 1555697352
    },
    {
        "content": "<p>If you have that those two things to hold:</p>\n<ul>\n<li><code>dyn Animal&lt;&amp;'i32&gt;</code> is not considered ill-formed</li>\n<li><code>Implemented(dyn Animal&lt;&amp;'a i32&gt;: Animal&lt;&amp;'a i32&gt;)</code> is considered to hold</li>\n</ul>\n<p>Then this is unsound (because of the <code>Projector</code> trick)</p>",
        "id": 163752891,
        "sender_full_name": "scalexm",
        "timestamp": 1555697440
    },
    {
        "content": "<p>So under the RFC, the first point must be always true, so we must ensure that the second point does not hold</p>",
        "id": 163752913,
        "sender_full_name": "scalexm",
        "timestamp": 1555697460
    },
    {
        "content": "<p>And I don’t know how to do that</p>",
        "id": 163752934,
        "sender_full_name": "scalexm",
        "timestamp": 1555697476
    },
    {
        "content": "<p>So probably I did not actually get to a firm conclusion « this is impossible to implement it soundly », more like « I don’t know how to make it sound » :)</p>",
        "id": 163753046,
        "sender_full_name": "scalexm",
        "timestamp": 1555697562
    },
    {
        "content": "<p>Especially under the model I described for trait objects to fix the above soundness problem, the RFC could not work as <code>dyn Animal&lt;&amp;'a i32&gt;</code> would not be considered well formed</p>",
        "id": 163753082,
        "sender_full_name": "scalexm",
        "timestamp": 1555697601
    },
    {
        "content": "<p>This reminds me, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, that I think it'd be a good idea for us to try and do some \"design presentations\" on implied bounds. Basically spelling out how the current lowering works and what its effects are, to try and make sure people understand it. (And then, as a capstone, we could dive into the trait object questions.)</p>",
        "id": 163753641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555698004
    },
    {
        "content": "<p>I would like to make a kind of list of \"complex questions to tackle\" around traits</p>",
        "id": 163753650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555698012
    },
    {
        "content": "<p>So far we said that on monday we'll start digging into the built-in bounds problem, starting by explaining the SLG solve etc</p>",
        "id": 163753658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555698024
    },
    {
        "content": "<p>Which seems good -- and I suspect we should just keep our focus there until we feel like we've worked out the things that arise</p>",
        "id": 163753674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555698040
    },
    {
        "content": "<p>But maybe then we can turn to implied bounds a bit</p>",
        "id": 163753680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555698044
    },
    {
        "content": "<blockquote>\n<p>So under the RFC, the first point must be always true, so we must ensure that the second point does not hold</p>\n</blockquote>\n<p>it's not <em>entirely</em> clear to me that the first point must be true</p>",
        "id": 163753690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555698057
    },
    {
        "content": "<p>i.e., that trait is presumably object safe anyway</p>",
        "id": 163753707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555698072
    },
    {
        "content": "<p>(right?)</p>",
        "id": 163753715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555698080
    },
    {
        "content": "<p>so it's not clear why this RFC even matters when it comes to this example</p>",
        "id": 163753727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555698094
    },
    {
        "content": "<p>I mean, the RFC states that <code>dyn Trait</code> must always be well-formed</p>",
        "id": 163753805,
        "sender_full_name": "scalexm",
        "timestamp": 1555698136
    },
    {
        "content": "<p>So if we want to fix the soundness issue under the RFC, we must ensure that we cannot prove <code>dyn Animal&lt;&amp;'a i32&gt;: Animal&lt;&amp;'a i32&gt;</code></p>",
        "id": 163753852,
        "sender_full_name": "scalexm",
        "timestamp": 1555698181
    },
    {
        "content": "<blockquote>\n<p>I mean, the RFC states that <code>dyn Trait</code> must always be well-formed</p>\n</blockquote>\n<p>I'm not clear that it states this, or meant to state this</p>",
        "id": 163753972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555698254
    },
    {
        "content": "<p>I'm also not clear on whether this RFC still makes sense</p>",
        "id": 163753977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555698261
    },
    {
        "content": "<p>yes maybe it does not say that after all indeed</p>",
        "id": 163754071,
        "sender_full_name": "scalexm",
        "timestamp": 1555698343
    },
    {
        "content": "<p>But at least it is definitely incompatible with the trait objects model I though about; as under that model you somehow had:<br>\n<code>WellFormed(dyn Trait)</code> iff <code>dyn Trait: Trait &amp;&amp; ObjectSafe(Trait)</code></p>",
        "id": 163754186,
        "sender_full_name": "scalexm",
        "timestamp": 1555698414
    },
    {
        "content": "<p>The iff was there to make implied bounds work correctly</p>",
        "id": 163754211,
        "sender_full_name": "scalexm",
        "timestamp": 1555698427
    },
    {
        "content": "<p>To put that model I thought of back in cache, the idea was the following:</p>\n<ul>\n<li>Object safe traits can only have supertraits and bound on type parameters</li>\n<li>we have one rule: <code>WellFormed(dyn Trait&lt;X&gt;) :- WellFormed(dyn Trait&lt;X&gt;: Trait&lt;X&gt;) &amp;&amp; ObjectSafe(Trait)</code></li>\n<li>we have one reverse rule: <code>FromEnv(dyn Trait&lt;X&gt;: Trait&lt;X&gt;) :- FromEnv(dyn Trait&lt;X&gt;)</code></li>\n<li>we can easily get the set of all super traits of a trait <code>trait Trait&lt;X&gt;</code></li>\n<li>for all that super traits (including the trait itself), we would generate a synthetic impl: <code>impl&lt;X&gt; SuperTrait&lt;...&gt; for dyn Trait&lt;X&gt;</code>: these impls are <em>always</em> legal thanks to the <code>FromEnv</code> rule</li>\n</ul>",
        "id": 163754794,
        "sender_full_name": "scalexm",
        "timestamp": 1555698906
    },
    {
        "content": "<p>This all plays nicely with implied bounds (i.e. if you have <code>dyn Trait</code> as an input type you get all the bounds), <em>but</em> the constraint that you need to prove <code>WellFormed(dyn Trait: Trait)</code> to prove <code>WellFormed(dyn Trait)</code> fixes the <code>Animal&lt;&amp;'a i32&gt;</code> issue</p>",
        "id": 163754891,
        "sender_full_name": "scalexm",
        "timestamp": 1555698999
    },
    {
        "content": "<p>For some reason I'm having some trouble following this setup :)</p>",
        "id": 163754962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699075
    },
    {
        "content": "<p>Because in that case proving <code>WellFormed(dyn Animal&lt;&amp;'a i32&gt;: Animal&lt;&amp;'a i32&gt;)</code> would eventually reduce to proving <code>dyn Animal&lt;&amp;'a i32&gt;: 'static</code> which you cannot do</p>",
        "id": 163755013,
        "sender_full_name": "scalexm",
        "timestamp": 1555699090
    },
    {
        "content": "<p>I think I have to remember what you mean by <code>WellFormed(TraitRef)</code> =)</p>",
        "id": 163755086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699175
    },
    {
        "content": "<p>That's..part of it</p>",
        "id": 163755088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699178
    },
    {
        "content": "<p>we never did settle on the best names for these things I think</p>",
        "id": 163755099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699192
    },
    {
        "content": "<p>Yeah <code>WellForme(TraitRef)</code> still means « all the transitive super bounds hold »</p>",
        "id": 163755174,
        "sender_full_name": "scalexm",
        "timestamp": 1555699220
    },
    {
        "content": "<p>Including <code>Implemented(TraitRef)</code> itself</p>",
        "id": 163755192,
        "sender_full_name": "scalexm",
        "timestamp": 1555699239
    },
    {
        "content": "<p>Right, ok. <code>FullyImplemented</code> or something like that</p>",
        "id": 163755201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699257
    },
    {
        "content": "<p>was another name we had kicked about</p>",
        "id": 163755207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699261
    },
    {
        "content": "<p>although I sort of recall thinking we should just call it <code>Implemented</code> and instead have <code>ShallowImplemented</code> for \"I found an impl\". Anyway.</p>",
        "id": 163755227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699277
    },
    {
        "content": "<p>In the <code>Animal</code> case, the <code>Implemented</code> part is covered by the synthetic impl, however the <code>'static</code> part is fully syntactic and cannot be proven</p>",
        "id": 163755234,
        "sender_full_name": "scalexm",
        "timestamp": 1555699287
    },
    {
        "content": "<p>Yeah right</p>",
        "id": 163755238,
        "sender_full_name": "scalexm",
        "timestamp": 1555699290
    },
    {
        "content": "<p>I guess for full clarity we can just do <code>FullyImplemented</code> and <code>ShallowImplemented</code></p>",
        "id": 163755256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699317
    },
    {
        "content": "<p>(or <code>Deeply</code>)</p>",
        "id": 163755262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699322
    },
    {
        "content": "<p>Sounds good indeed</p>",
        "id": 163755308,
        "sender_full_name": "scalexm",
        "timestamp": 1555699330
    },
    {
        "content": "<p>I still have this issue in chalk with a lot of examples: <a href=\"https://github.com/rust-lang/chalk/issues/203\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/203\">https://github.com/rust-lang/chalk/issues/203</a></p>",
        "id": 163755363,
        "sender_full_name": "scalexm",
        "timestamp": 1555699395
    },
    {
        "content": "<p>(Regarding trait objects)</p>",
        "id": 163755376,
        "sender_full_name": "scalexm",
        "timestamp": 1555699408
    },
    {
        "content": "<p>To me, that setup is not that different from rustc’s current setup (we do have synthetic impls for all super traits of a trait objet)</p>",
        "id": 163755401,
        "sender_full_name": "scalexm",
        "timestamp": 1555699440
    },
    {
        "content": "<p>In any case, the problem I guess is that where you had</p>\n<div class=\"codehilite\"><pre><span></span>WellFormed(dyn Trait&lt;X&gt;) :- DeeplyImplemented(dyn Trait&lt;X&gt;: Trait&lt;X&gt;) &amp;&amp; ObjectSafe(Trait)\n</pre></div>\n\n\n<p>we would want to change this to remove the <code>ObjectSafe</code> part, but of course it is really just <em>moving</em> into the <code>DeeplyImplemented(dyn Trait&lt;X&gt;: Trait&lt;X&gt;)</code> predicate, so we would still have that <code>WellFormed(dyn Trait&lt;X&gt;)</code> does not hold.</p>",
        "id": 163755403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699441
    },
    {
        "content": "<p>The new part is the well-formedness rule of a trait object</p>",
        "id": 163755459,
        "sender_full_name": "scalexm",
        "timestamp": 1555699454
    },
    {
        "content": "<p>What we sort of want would be something like <code>WellFormed(dyn Trait&lt;X&gt;) :- \"predicates of Trait&lt;X&gt; apply\"</code>..maybe?</p>",
        "id": 163755492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699479
    },
    {
        "content": "<p>which might in turn give the error you are looked for?</p>",
        "id": 163755498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699485
    },
    {
        "content": "<p>Yes but under the RFC, <code>DeeplyImplemented(dyn Trait: Trait)</code> would <em>not</em> hold if the trait isn’t object safe</p>",
        "id": 163755511,
        "sender_full_name": "scalexm",
        "timestamp": 1555699496
    },
    {
        "content": "<p>That the whole point of the RFC, I think</p>",
        "id": 163755519,
        "sender_full_name": "scalexm",
        "timestamp": 1555699503
    },
    {
        "content": "<p>Right</p>",
        "id": 163755527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699506
    },
    {
        "content": "<p>But what I'm saying is</p>",
        "id": 163755532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699509
    },
    {
        "content": "<p>Ah</p>",
        "id": 163755546,
        "sender_full_name": "scalexm",
        "timestamp": 1555699522
    },
    {
        "content": "<p>DeeplyImplemented proves:</p>\n<ul>\n<li>the trait is implemented (which would no longer hold, per the RFC)</li>\n<li>all where clauses from the trait are satisfied (that's the deep part)</li>\n</ul>",
        "id": 163755549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699524
    },
    {
        "content": "<p>but in some sense we might just want the second part?</p>",
        "id": 163755557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699529
    },
    {
        "content": "<p>Yes just strict super predicates</p>",
        "id": 163755569,
        "sender_full_name": "scalexm",
        "timestamp": 1555699537
    },
    {
        "content": "<p>Maybe that would work</p>",
        "id": 163755583,
        "sender_full_name": "scalexm",
        "timestamp": 1555699555
    },
    {
        "content": "<p>And in the <code>FromEnv(dyn Trait)</code> reverse rule you would only include the strict super predicates as well</p>",
        "id": 163755885,
        "sender_full_name": "scalexm",
        "timestamp": 1555699757
    },
    {
        "content": "<p>Presumably, right</p>",
        "id": 163755905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699784
    },
    {
        "content": "<p>BTW, I wonder --</p>",
        "id": 163755910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699793
    },
    {
        "content": "<p>One of the challenges we've yet to discuss is extending to <code>dyn (Trait1 + Trait2)</code></p>",
        "id": 163755974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699812
    },
    {
        "content": "<p>But I wonder if we could think instead about having a general <code>T = T1 &amp;&amp; T2</code> (I'm switching to intersection here, since the <code>+</code> is really \"and\", nor the \"disjoint or\" meaning it often has...)</p>",
        "id": 163755994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699837
    },
    {
        "content": "<p>And then have <code>dyn Trait1 &amp;&amp; dyn Trait2</code></p>",
        "id": 163756003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699846
    },
    {
        "content": "<p>Not sure how relevant that is, just occurred to me that it might be in some way easier</p>",
        "id": 163756017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699857
    },
    {
        "content": "<p>i.e., <code>FromEnv(T1 &amp;&amp; T2) :- FromEnv(T1); FromEnv(T2).</code> and so forth</p>",
        "id": 163756036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699871
    },
    {
        "content": "<p>basically it wouldn't require us to quantify over \"things within types\"</p>",
        "id": 163756042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555699883
    },
    {
        "content": "<p>Ah I see</p>",
        "id": 163756049,
        "sender_full_name": "scalexm",
        "timestamp": 1555699900
    },
    {
        "content": "<p>Yes I think that would work indeed</p>",
        "id": 163756158,
        "sender_full_name": "scalexm",
        "timestamp": 1555699975
    },
    {
        "content": "<p>Ok so regarding the RFC, just including strict predicates in the rule probably works indeed + moving the <code>ObjectSafe</code> bound to the synthetic impl for the trait itself</p>",
        "id": 163756360,
        "sender_full_name": "scalexm",
        "timestamp": 1555700138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok then you’re right the RFC seems doable</p>",
        "id": 163757529,
        "sender_full_name": "scalexm",
        "timestamp": 1555700953
    },
    {
        "content": "<p>good, I guess</p>",
        "id": 163757691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701106
    },
    {
        "content": "<p>bad because it means I have to put more work into reviewing this PR :P</p>",
        "id": 163757699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> lol</p>",
        "id": 163758238,
        "sender_full_name": "scalexm",
        "timestamp": 1555701553
    },
    {
        "content": "<p>I wasn’t expecting to have it implemented before we actually fix trait objects, but I think that shouldn’t hurt</p>",
        "id": 163758269,
        "sender_full_name": "scalexm",
        "timestamp": 1555701593
    },
    {
        "content": "<p>Also we probably won’t be able to stabilize until we do fix trait objects</p>",
        "id": 163758288,
        "sender_full_name": "scalexm",
        "timestamp": 1555701602
    },
    {
        "content": "<p>To be sure there are no bad interactions</p>",
        "id": 163758329,
        "sender_full_name": "scalexm",
        "timestamp": 1555701614
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, one other thing. For better or worse, <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=069fafa83436f65196ad6abefc83857d\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=069fafa83436f65196ad6abefc83857d\">this code compiles today</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Animal</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"o\">&gt;</span>: <span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Animal</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163758605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701897
    },
    {
        "content": "<p>Yes that does not surprise me</p>",
        "id": 163758622,
        "sender_full_name": "scalexm",
        "timestamp": 1555701921
    },
    {
        "content": "<p>So it seems like that type cannot be made to be not well-formed</p>",
        "id": 163758625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701927
    },
    {
        "content": "<p>(Unless maybe I didn't quite understand what you were proposing)</p>",
        "id": 163758643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701952
    },
    {
        "content": "<p>Mmh you mean because it would break code?</p>",
        "id": 163758692,
        "sender_full_name": "scalexm",
        "timestamp": 1555701966
    },
    {
        "content": "<p>Yes.</p>",
        "id": 163758697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701971
    },
    {
        "content": "<p>I was expecting to break code anyway</p>",
        "id": 163758704,
        "sender_full_name": "scalexm",
        "timestamp": 1555701982
    },
    {
        "content": "<p>I suppose it could be considered a bug fix</p>",
        "id": 163758705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555701984
    },
    {
        "content": "<p>Yes</p>",
        "id": 163758708,
        "sender_full_name": "scalexm",
        "timestamp": 1555701989
    },
    {
        "content": "<p>But there's a real possibility we couldn't get away with that :)</p>",
        "id": 163758715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702004
    },
    {
        "content": "<p>But we should evaluate how big the breakage would be indeed</p>",
        "id": 163758725,
        "sender_full_name": "scalexm",
        "timestamp": 1555702019
    },
    {
        "content": "<p>That said, I'm <em>also</em> not very happy with the outlives rules on trait objects</p>",
        "id": 163758732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702023
    },
    {
        "content": "<p>Which seems related here</p>",
        "id": 163758739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702028
    },
    {
        "content": "<p>Changing them would probably <em>also</em> be a breaking change</p>",
        "id": 163758759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702061
    },
    {
        "content": "<p>(I wonder if it could be done with an edition, actually)</p>",
        "id": 163758821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702085
    },
    {
        "content": "<p>Presumably it could</p>",
        "id": 163758825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702087
    },
    {
        "content": "<p>Changing the outlives rules for <code>fn</code> types (which I would also like to do) cannot be done w/ an edition though</p>",
        "id": 163758836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702108
    },
    {
        "content": "<p>Ah, you mean things like: <code>dyn Trait&lt;&amp;'a i32&gt; + 'static</code> being WF but <em>not</em> actually outliving <code>'static</code>?</p>",
        "id": 163758837,
        "sender_full_name": "scalexm",
        "timestamp": 1555702109
    },
    {
        "content": "<p>right now they don't outlive <code>'static</code> but they could</p>",
        "id": 163758857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702132
    },
    {
        "content": "<p>Because that one is an annoying one which I did hit a few times in my code when multiple lifetimes and trait objects come to play</p>",
        "id": 163758863,
        "sender_full_name": "scalexm",
        "timestamp": 1555702136
    },
    {
        "content": "<p>(in some universe)</p>",
        "id": 163758868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702140
    },
    {
        "content": "<p>it's more obvious to see with a type like <code>fn(&amp;'a u32)</code> -- like, there is no region data in there, so in some sense it should be <code>'static</code></p>",
        "id": 163758892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702163
    },
    {
        "content": "<p>but the same applies to the <code>X</code> in <code>dyn Trait&lt;X&gt;</code> -- it doesn't necessarily represent closed over data</p>",
        "id": 163758904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702180
    },
    {
        "content": "<p>Yes, but the <code>Projector</code> trick prevents it, unless you say that the arg type is not covered and you cannot implement generic impls for that fn type</p>",
        "id": 163758912,
        "sender_full_name": "scalexm",
        "timestamp": 1555702193
    },
    {
        "content": "<p>Yes I see</p>",
        "id": 163758916,
        "sender_full_name": "scalexm",
        "timestamp": 1555702199
    },
    {
        "content": "<p>It could make things simpler indeed, but this would break a lot of code for sure</p>",
        "id": 163759019,
        "sender_full_name": "scalexm",
        "timestamp": 1555702273
    },
    {
        "content": "<p>Whereas about making <code>dyn Animal&lt;&amp;'a i32&gt;</code> not WF maybe not as much breakage, as this soundness bug has remained hidden for a long time so I don’t think a lot of people rely on it</p>",
        "id": 163759119,
        "sender_full_name": "scalexm",
        "timestamp": 1555702335
    },
    {
        "content": "<p>So yeah maybe for another edition</p>",
        "id": 163759143,
        "sender_full_name": "scalexm",
        "timestamp": 1555702361
    },
    {
        "content": "<blockquote>\n<p>It could make things simpler indeed, but this would break a lot of code for sure</p>\n</blockquote>\n<p>not entirely clear to me</p>",
        "id": 163759466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702664
    },
    {
        "content": "<p>but maybe :)</p>",
        "id": 163759477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702676
    },
    {
        "content": "<p>we could perhaps do a relatively...tailored rule</p>",
        "id": 163759488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702682
    },
    {
        "content": "<p>e.g., this impl would be legal</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but this one illegal</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>i.e., a generic type parameter (here, <code>T</code>) cannot appear in the value of an associated type unless it appears in some input type in a suitably constrained position (and fn/trait parameters do not count).</p>",
        "id": 163759564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702736
    },
    {
        "content": "<p>I'm not sure how often that happens.</p>",
        "id": 163759565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702740
    },
    {
        "content": "<p>In the trait case, we could do it with an edition for sure.</p>",
        "id": 163759589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702756
    },
    {
        "content": "<p>Since we could use the older rules for older traits.</p>",
        "id": 163759596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702762
    },
    {
        "content": "<p>Whether we <em>should</em> I don't know, butI think the curent rules are limiting.</p>",
        "id": 163759608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702772
    },
    {
        "content": "<p>Yes ok the assoc type value is the problematic one and is probably less used indeed</p>",
        "id": 163759681,
        "sender_full_name": "scalexm",
        "timestamp": 1555702805
    },
    {
        "content": "<p>It's at least <em>plausible</em></p>",
        "id": 163759709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702831
    },
    {
        "content": "<p>wish I had thought of that before</p>",
        "id": 163759711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702834
    },
    {
        "content": "<p>I was never very happy with that part of the RFC, but it never occurred to me to make it this tailored.</p>",
        "id": 163759722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555702846
    }
]