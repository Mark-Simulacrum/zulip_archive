[
    {
        "content": "<p>The PR (<a href=\"https://github.com/rust-lang/rust/pull/72936#issuecomment-643642823\">https://github.com/rust-lang/rust/pull/72936#issuecomment-643642823</a>) to upgrade chalk has failed due to OOM issues (cc <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> )</p>",
        "id": 200773933,
        "sender_full_name": "DPC",
        "timestamp": 1592065621
    },
    {
        "content": "<p>I was previously getting an OOM with <code>parallel-compiler = true</code></p>",
        "id": 200775338,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592067579
    },
    {
        "content": "<p>in the first Chalk integration PR</p>",
        "id": 200775340,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592067585
    },
    {
        "content": "<p>This was the repro for that <a href=\"https://github.com/jackh726/rust/commit/79ed869cc697d4a41ae52e717522e5673fc1ba8a\">https://github.com/jackh726/rust/commit/79ed869cc697d4a41ae52e717522e5673fc1ba8a</a></p>",
        "id": 200775396,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592067618
    },
    {
        "content": "<p>I imagine they are probably related</p>",
        "id": 200775400,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592067628
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/rust-lang/rust/issues/73452\">#73452</a> to fix the oom when adding Chalk types to the interner.</p>",
        "id": 201186846,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592420855
    },
    {
        "content": "<p><span aria-label=\"hearts\" class=\"emoji emoji-2665\" role=\"img\" title=\"hearts\">:hearts:</span></p>",
        "id": 201187331,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592421090
    },
    {
        "content": "<p>This isn't the same problem as the rustdoc one?</p>",
        "id": 201187415,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592421137
    },
    {
        "content": "<p>Maybe this fixes the doc issue as well. It's probably a similar issue.</p>",
        "id": 201187607,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592421266
    },
    {
        "content": "<p>Can you try the test <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> has in their PR? <a href=\"https://github.com/rust-lang/rust/pull/73335/files#diff-8b057ddb827ab1e1035fcc1625d2f67e\">https://github.com/rust-lang/rust/pull/73335/files#diff-8b057ddb827ab1e1035fcc1625d2f67e</a></p>",
        "id": 201187803,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592421382
    },
    {
        "content": "<p>that probably will fix the rustdoc issue</p>",
        "id": 201187971,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592421479
    },
    {
        "content": "<p>since the underlying issue was reproducible in rustc, and was caused by an overflow when evaluating auto-trait predicates</p>",
        "id": 201188052,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592421517
    },
    {
        "content": "<p>the OOM was caused by new un-unified type variables getting created in each loop iteration</p>",
        "id": 201188107,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592421552
    },
    {
        "content": "<p>/me builds rustdoc...</p>",
        "id": 201188314,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592421666
    },
    {
        "content": "<p>Also while making sure that adding chalk types to the interners actually works I ran into issues where some things don't implement <code>Copy</code> which can. Should I open a PR to add those impls?</p>",
        "id": 201189742,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592422497
    },
    {
        "content": "<p>Also having to return references to things from <code>Interner</code> is annoying.</p>",
        "id": 201189803,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592422524
    },
    {
        "content": "<p>What needs to be <code>Copy</code> that isn't?</p>",
        "id": 201190052,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592422645
    },
    {
        "content": "<p>And do you meant the reference here? <code>fn ty_data&lt;'a&gt;(&amp;self, ty: &amp;'a Self::InternedType) -&gt; &amp;'a TyData&lt;Self&gt;</code></p>",
        "id": 201190217,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592422714
    },
    {
        "content": "<p>I really mean the one here:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">generic_arg_data</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">lifetime</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">InternedGenericArg</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">GenericArgData</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201190292,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592422761
    },
    {
        "content": "<p>Why is that a problem?</p>",
        "id": 201190413,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592422822
    },
    {
        "content": "<p>This is the current definition of <code>GenericArg</code> in rustc:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">GenericArg</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span>: <span class=\"nc\">NonZeroUsize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">marker</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">Region</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">Const</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>It's not an interned reference to an enum.</p>",
        "id": 201190520,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592422908
    },
    {
        "content": "<p>It's fine for experimenting, but I don't think that rustc wants another layer of indirection in the long term.</p>",
        "id": 201190623,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592422963
    },
    {
        "content": "<p>So, the <code>InternedGenericArg</code> would be a <code>&amp;'tcx chalk_ir::GenericArgData</code></p>",
        "id": 201190815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592423067
    },
    {
        "content": "<p>Definitely in the long run, with the shared type library, they will be merged</p>",
        "id": 201190874,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592423101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Chalk.20upgrade.20failing.20on.20rustc.20due.20to.20oom/near/201190052\">said</a>:</p>\n<blockquote>\n<p>What needs to be <code>Copy</code> that isn't?</p>\n</blockquote>\n<p><code>Binder</code> and <code>WhereClause</code></p>",
        "id": 201191403,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592423383
    },
    {
        "content": "<p>Sure</p>",
        "id": 201191662,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592423518
    },
    {
        "content": "<p>For <code>WhereClause</code> to derive <code>Copy</code>, so will <code>TraitRef</code>, <code>AliasEq</code>, and so on</p>",
        "id": 201191752,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592423560
    },
    {
        "content": "<p>looking at it, a lot of types in <code>chalk-ir</code> should probably derive <code>Copy</code> that don't</p>",
        "id": 201191807,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592423603
    },
    {
        "content": "<p>They might need manual impls because derive isn't clever enough, but yes.</p>",
        "id": 201191967,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592423695
    },
    {
        "content": "<p>well, they won't always be <code>Copy</code>, only when the interned types are</p>",
        "id": 201192133,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592423782
    },
    {
        "content": "<p>not sure if that's what you mean by derive not being clever</p>",
        "id": 201192208,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592423826
    },
    {
        "content": "<p>For example, the impl <code>impl&lt;I: Interner&gt; Copy for LifetimeOutlives&lt;I&gt; where I::InternedLifetime: Copy {}</code> has to be written by hand because <code>derive</code> won't add the where clause for you.</p>",
        "id": 201192931,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592424169
    },
    {
        "content": "<p>ah right</p>",
        "id": 201192983,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592424193
    },
    {
        "content": "<p>This PR fixes the rustdoc issue as well.</p>",
        "id": 201197896,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592426632
    }
]