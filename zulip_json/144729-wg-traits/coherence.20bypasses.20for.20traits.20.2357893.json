[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  created this topic for discussion on  <a href=\"https://github.com/rust-lang/rust/issues/57893\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57893\">https://github.com/rust-lang/rust/issues/57893</a></p>",
        "id": 175591173,
        "sender_full_name": "blitzerr",
        "timestamp": 1568346142
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> -- sounds good. I wanted to point you to this branch on my repository:</p>",
        "id": 175656571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568402858
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/rust/tree/degenerate-object-safe-issue-57893\" target=\"_blank\" title=\"https://github.com/nikomatsakis/rust/tree/degenerate-object-safe-issue-57893\">https://github.com/nikomatsakis/rust/tree/degenerate-object-safe-issue-57893</a></p>",
        "id": 175656635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568402885
    },
    {
        "content": "<p>I went up taking a <em>slightly</em> different path than what I described in those mentoring instructions, in that I rearranged the ordering. I think the code is mostly prepared now for the so-called \"degenerate\" cases, but the function that looks for them needs to be written still.</p>",
        "id": 175656677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568402938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> nice points re. <code>dyn trait A</code> as sugar for <code>trait A</code> + <code>where dyn A: A</code> &amp; re. <code>dyn trait Iterator { ... }</code></p>",
        "id": 175657153,
        "sender_full_name": "centril",
        "timestamp": 1568403297
    },
    {
        "content": "<p>this fits nicely together with 2027</p>",
        "id": 175657181,
        "sender_full_name": "centril",
        "timestamp": 1568403328
    },
    {
        "content": "<p>(the other zulip thread is <a href=\"#narrow/stream/131828-t-compiler/topic/.2357893.20coherence.20and.20traits/near/169073560\" title=\"#narrow/stream/131828-t-compiler/topic/.2357893.20coherence.20and.20traits/near/169073560\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/.2357893.20coherence.20and.20traits/near/169073560</a> which has other examples due to <span class=\"user-mention\" data-user-id=\"228094\">@Ariel Ben-Yehuda</span>)</p>",
        "id": 175657314,
        "sender_full_name": "centril",
        "timestamp": 1568403440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  thanks for the link. Will look into it.</p>",
        "id": 175659318,
        "sender_full_name": "blitzerr",
        "timestamp": 1568404987
    },
    {
        "content": "<p>This approach looks right to me</p>",
        "id": 175659447,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1568405065
    },
    {
        "content": "<p>And I don't think we need to change anything but selection - projection won't use an object candidate if selection doesn't return one.</p>",
        "id": 175659502,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1568405108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I don't how can I check if user has already implemented a variant that can be used for <code>Trait Object</code> ?</p>",
        "id": 176332567,
        "sender_full_name": "blitzerr",
        "timestamp": 1569199531
    },
    {
        "content": "<p>How do I write the logic solver for <code>impl_potentially_overlapping_dyn_trait</code> ? Is there an example I can look at ?</p>",
        "id": 176332936,
        "sender_full_name": "blitzerr",
        "timestamp": 1569200369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228094\">@Ariel Ben-Yehuda</span>  ^</p>",
        "id": 176337623,
        "sender_full_name": "blitzerr",
        "timestamp": 1569209698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span></p>",
        "id": 176405396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269871
    },
    {
        "content": "<p>What I had in mind was to start with a fairly dumb check</p>",
        "id": 176405456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269884
    },
    {
        "content": "<p>hi <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 176405482,
        "sender_full_name": "blitzerr",
        "timestamp": 1569269898
    },
    {
        "content": "<p>In particular, I wrote the following in the issue</p>\n<blockquote>\n<p>So clearly the (semi-)syntactic check I was <em>first</em> envisioning is too simplistic. What we want is to see whether there is some impl of <code>SomeTrait</code> whose self type <em>could</em> be <code>dyn SomeTrait</code> (or equivalent to it). This can happen in basically three ways:</p>\n<p>- a type parameter that is <code>?Sized</code><br>\n- an associated type projection (with any parameters) that is <code>?Sized</code><br>\n- a <code>dyn SomeTrait</code> type (which we already check for)<br>\n- an opaque type, but those are disallowed and the semantics are unclear anyway<br>\n- a type alias that equates to one of those things</p>\n</blockquote>",
        "id": 176405564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269956
    },
    {
        "content": "<p>So, the idea would be this. We will iterate over the impls of the trait</p>",
        "id": 176405588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269972
    },
    {
        "content": "<p>and we will look at the \"self-type\" of each impl</p>",
        "id": 176405591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269977
    },
    {
        "content": "<p>we can basically do <code>match self_ty.sty { ... }</code></p>",
        "id": 176405609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569269990
    },
    {
        "content": "<p>and then try to look for those cases I listed</p>",
        "id": 176405626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270001
    },
    {
        "content": "<blockquote>\n<p>So, the idea would be this. We will iterate over the impls of the trait</p>\n</blockquote>\n<p>so let's start with this</p>",
        "id": 176405703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270030
    },
    {
        "content": "<p>we have this function</p>",
        "id": 176405714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270047
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">impl_potentially_overlapping_dyn_trait</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trait_def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span>\n</pre></div>",
        "id": 176405722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270055
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 176405732,
        "sender_full_name": "blitzerr",
        "timestamp": 1569270065
    },
    {
        "content": "<p>we can get the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/trait_def/struct.TraitDef.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/trait_def/struct.TraitDef.html\"><code>TraitDef</code></a> for the given id by invoking <code>tcx.trait_def(trait_def_id)</code></p>",
        "id": 176405750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270080
    },
    {
        "content": "<p>this has a method already calls <code>for_each_impl</code></p>",
        "id": 176405791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270111
    },
    {
        "content": "<p>this is .. probably not what we <em>really</em> want to use, because it's kind of inefficient, but it's ok to start</p>",
        "id": 176405856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270129
    },
    {
        "content": "<p>so you can do <code>trait_def.for_each_impl(|impl_def_id| { ... })</code></p>",
        "id": 176405892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270149
    },
    {
        "content": "<blockquote>\n<p>this is .. probably not what we <em>really</em> want to use, because it's kind of inefficient, but it's ok to start</p>\n</blockquote>\n<p>it's inefficient because it literally iterates over <em>all</em> impls. But most of them are clearly not relevant -- e.g., an impl like <code>impl Foo for u32</code> doesn't apply. We have the impls sorted by their \"approximate self-type\" precisely to make this sort of check faster. But, as I said, we can worry about that a bit later.</p>",
        "id": 176405966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270198
    },
    {
        "content": "<p>Once you have the <code>impl</code>, you can get its precise self type by using the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.TyCtxt.html#method.type_of\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.TyCtxt.html#method.type_of\"><code>type_of(impl_def_id)</code></a> query</p>",
        "id": 176406117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270286
    },
    {
        "content": "<p>then we can try matching that</p>",
        "id": 176406126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270295
    },
    {
        "content": "<p>so now we have something like</p>",
        "id": 176406130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270298
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">found_match</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">trait_def</span><span class=\"p\">(</span><span class=\"n\">trait_def_id</span><span class=\"p\">).</span><span class=\"n\">for_each_impl</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">impl_def_id</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">impl_self_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">type_of</span><span class=\"p\">(</span><span class=\"n\">impl_def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">impl_self_ty</span><span class=\"p\">.</span><span class=\"n\">sty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ty</span>::<span class=\"n\">Param</span><span class=\"p\">(</span><span class=\"n\">param_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">...,</span><span class=\"w\"> </span><span class=\"c1\">// one line for each of the cases above</span>\n<span class=\"w\">        </span><span class=\"p\">...,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176406284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270413
    },
    {
        "content": "<p>rustdoc for <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/sty/enum.TyKind.html#variant.Param\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/sty/enum.TyKind.html#variant.Param\"><code>ty::Param</code></a></p>",
        "id": 176406306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270427
    },
    {
        "content": "<p>so that match above will match any type parameter, but we want only <code>?Sized</code> type parameters</p>",
        "id": 176406333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270454
    },
    {
        "content": "<p>that's a <em>bit</em> annoying, I have to look, but one way to find that out would to ask for <code>tcx.predicates_of(impl_def_id)</code>, which will give you where clauses from the impl</p>",
        "id": 176406356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270481
    },
    {
        "content": "<p>you could look for one that matches <code>impl_self_ty: Sized</code></p>",
        "id": 176406406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270492
    },
    {
        "content": "<p>there might be another place where we record the relevant info tho</p>",
        "id": 176406418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270501
    },
    {
        "content": "<p>or some similar code</p>",
        "id": 176406424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270504
    },
    {
        "content": "<p>anyway, I'd say just start with <em>that one case</em></p>",
        "id": 176406432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270510
    },
    {
        "content": "<p>we can come back to these:</p>\n<p>- an associated type projection (with any parameters) that is <code>?Sized</code><br>\n- a <code>dyn SomeTrait</code> type (which we already check for)<br>\n- an opaque type, but those are disallowed and the semantics are unclear anyway</p>",
        "id": 176406460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270534
    },
    {
        "content": "<p>really, only the second one needs work anyway</p>",
        "id": 176406478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270543
    },
    {
        "content": "<p>with me so far?</p>",
        "id": 176406483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270548
    },
    {
        "content": "<p>ok wait</p>",
        "id": 176406498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270562
    },
    {
        "content": "<blockquote>\n<p>you could look for one that matches <code>impl_self_ty: Sized</code></p>\n</blockquote>\n<p>there is some code for this already in <code>traits/object_safety.rs</code> that could be refactored to suit our puposes</p>",
        "id": 176406510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270577
    },
    {
        "content": "<p>in particular <a href=\"https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc/traits/object_safety.rs#L254-L256\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc/traits/object_safety.rs#L254-L256\">this function, <code>trait_has_sized_self</code></a> checks whether the <em>trait</em> declares a predicate <code>where Self: Sized</code></p>",
        "id": 176406606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270621
    },
    {
        "content": "<p>and in particular <a href=\"https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc/traits/object_safety.rs#L271\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc/traits/object_safety.rs#L271\">this line</a> is the one that is checking for <code>Self</code> -- note that <code>Self</code> is a type parameter of the trait</p>",
        "id": 176406647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270666
    },
    {
        "content": "<p>Rookie question - why is Sized the only one in which case a conflict can occur ?</p>",
        "id": 176406662,
        "sender_full_name": "blitzerr",
        "timestamp": 1569270679
    },
    {
        "content": "<p>Can't it be any associative type ?</p>",
        "id": 176406672,
        "sender_full_name": "blitzerr",
        "timestamp": 1569270691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 176406689,
        "sender_full_name": "blitzerr",
        "timestamp": 1569270706
    },
    {
        "content": "<p>we are looking for impls that could apply where the self type is <code>dyn Foo</code> -- that is an unsized type (that is, <code>dyn Foo: Sized</code> is false)</p>",
        "id": 176406692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270708
    },
    {
        "content": "<p>this isn't the most precise check, but it's an easy one</p>",
        "id": 176406750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270731
    },
    {
        "content": "<p>that is, if we know that <code>T: Sized</code>, then we rule out the possibility that <code>T == dyn Foo</code></p>",
        "id": 176406760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270741
    },
    {
        "content": "<p>(there could be other ways to rule that out, too)</p>",
        "id": 176406767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270752
    },
    {
        "content": "<p>it's \"sufficient but not necessary\", I guess</p>",
        "id": 176406776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569270761
    },
    {
        "content": "<p>Thank you so much for your time and explaining this to me <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 176406859,
        "sender_full_name": "blitzerr",
        "timestamp": 1569270832
    },
    {
        "content": "<p>I will give it a shot (tonight, hopefully)</p>",
        "id": 176406930,
        "sender_full_name": "blitzerr",
        "timestamp": 1569270860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> great! let me know how it goes of course.</p>",
        "id": 176407162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271031
    },
    {
        "content": "<blockquote>\n<p>in particular <a href=\"https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc/traits/object_safety.rs#L254-L256\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc/traits/object_safety.rs#L254-L256\">this function, <code>trait_has_sized_self</code></a> checks whether the <em>trait</em> declares a predicate <code>where Self: Sized</code></p>\n</blockquote>\n<p>I think what we want to do here, to finish the thought, is refactor this to something like <code>generics_require_param_sized(self, def_id: DefId, param_ty: ParamTy) -&gt; bool { ... }</code></p>",
        "id": 176407194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271060
    },
    {
        "content": "<p>Absolutely <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 176407225,
        "sender_full_name": "blitzerr",
        "timestamp": 1569271079
    },
    {
        "content": "<p>and then in place of <code>is_param(0)</code> we'd invoke <code>is_param(param_ty.index)</code></p>",
        "id": 176407276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271090
    },
    {
        "content": "<p>the existing callers can use <code>ParamTy::for_self()</code></p>",
        "id": 176407289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271097
    },
    {
        "content": "<p>to create a <code>ParamTy</code></p>",
        "id": 176407296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271103
    },
    {
        "content": "<p>your <em>new</em> caller would be using the <code>param_ty</code> it extracted via the <code>match</code></p>",
        "id": 176407308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271115
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">found_match</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">trait_def</span><span class=\"p\">(</span><span class=\"n\">trait_def_id</span><span class=\"p\">).</span><span class=\"n\">for_each_impl</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">impl_def_id</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">impl_self_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">type_of</span><span class=\"p\">(</span><span class=\"n\">impl_def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">impl_self_ty</span><span class=\"p\">.</span><span class=\"n\">sty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ty</span>::<span class=\"n\">Param</span><span class=\"p\">(</span><span class=\"n\">param_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">generics_require_param_sized</span><span class=\"p\">(</span><span class=\"n\">impl_def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">found_match</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"n\">found_match</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>so something like that <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 176407363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271161
    },
    {
        "content": "<p>Some of this will only make sense to me after I spend some time looking at the code. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 176407368,
        "sender_full_name": "blitzerr",
        "timestamp": 1569271164
    },
    {
        "content": "<p>yep. I'm done typing now, let me know how it goes :)</p>",
        "id": 176407374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271171
    },
    {
        "content": "<p>Sure <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 176407401,
        "sender_full_name": "blitzerr",
        "timestamp": 1569271194
    },
    {
        "content": "<p>Typing is good. I can always revisit to connect the pieces that way.  <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 176407504,
        "sender_full_name": "blitzerr",
        "timestamp": 1569271254
    },
    {
        "content": "<p>I made the first set of <a href=\"https://github.com/blitzerr/rust/commit/e932c748fda9ef152573f544219a1996b7f71d00\" target=\"_blank\" title=\"https://github.com/blitzerr/rust/commit/e932c748fda9ef152573f544219a1996b7f71d00\">changes</a> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> .</p>",
        "id": 176857766,
        "sender_full_name": "blitzerr",
        "timestamp": 1569736371
    },
    {
        "content": "<p>I am testing this against</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Object</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Object</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Object</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">transmute</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Object</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176857818,
        "sender_full_name": "blitzerr",
        "timestamp": 1569736499
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span>DEBUG rustc::traits::object_safety<span class=\"o\">]</span> trait_pred.def_id<span class=\"o\">()</span> <span class=\"o\">==</span> sized_def_id: <span class=\"k\">false</span> <span class=\"p\">;;</span> trait_pred.skip_binder<span class=\"o\">()</span>.self_ty<span class=\"o\">()</span>.is_param<span class=\"o\">(</span>param_ty.index<span class=\"o\">)</span>: <span class=\"k\">true</span>\n<span class=\"o\">[</span>DEBUG rustc::traits::object_safety<span class=\"o\">]</span> trait_pred.def_id<span class=\"o\">()</span> <span class=\"o\">==</span> sized_def_id: <span class=\"k\">true</span> <span class=\"p\">;;</span> trait_pred.skip_binder<span class=\"o\">()</span>.self_ty<span class=\"o\">()</span>.is_param<span class=\"o\">(</span>param_ty.index<span class=\"o\">)</span>: <span class=\"k\">false</span>\n<span class=\"o\">[</span>DEBUG rustc::traits::object_safety<span class=\"o\">]</span> trait_pred.def_id<span class=\"o\">()</span> <span class=\"o\">==</span> sized_def_id: <span class=\"k\">true</span> <span class=\"p\">;;</span> trait_pred.skip_binder<span class=\"o\">()</span>.self_ty<span class=\"o\">()</span>.is_param<span class=\"o\">(</span>param_ty.index<span class=\"o\">)</span>: <span class=\"k\">false</span>\n<span class=\"o\">[</span>DEBUG rustc::traits::object_safety<span class=\"o\">]</span> trait_pred.def_id<span class=\"o\">()</span> <span class=\"o\">==</span> sized_def_id: <span class=\"k\">false</span> <span class=\"p\">;;</span> trait_pred.skip_binder<span class=\"o\">()</span>.self_ty<span class=\"o\">()</span>.is_param<span class=\"o\">(</span>param_ty.index<span class=\"o\">)</span>: <span class=\"k\">true</span>\n<span class=\"o\">[</span>DEBUG rustc::traits::object_safety<span class=\"o\">]</span> trait_pred.def_id<span class=\"o\">()</span> <span class=\"o\">==</span> sized_def_id: <span class=\"k\">true</span> <span class=\"p\">;;</span> trait_pred.skip_binder<span class=\"o\">()</span>.self_ty<span class=\"o\">()</span>.is_param<span class=\"o\">(</span>param_ty.index<span class=\"o\">)</span>: <span class=\"k\">false</span>\n<span class=\"o\">[</span>DEBUG rustc::traits::object_safety<span class=\"o\">]</span> trait_pred.def_id<span class=\"o\">()</span> <span class=\"o\">==</span> sized_def_id: <span class=\"k\">true</span> <span class=\"p\">;;</span> trait_pred.skip_binder<span class=\"o\">()</span>.self_ty<span class=\"o\">()</span>.is_param<span class=\"o\">(</span>param_ty.index<span class=\"o\">)</span>: <span class=\"k\">false</span>\n<span class=\"o\">[</span>DEBUG rustc::traits::object_safety<span class=\"o\">]</span> Match <span class=\"nv\">found</span> <span class=\"o\">=</span> <span class=\"k\">false</span><span class=\"p\">;</span> <span class=\"k\">for</span> param_ty T\n<span class=\"o\">[</span>DEBUG rustc::traits::object_safety<span class=\"o\">]</span> trait_pred.def_id<span class=\"o\">()</span> <span class=\"o\">==</span> sized_def_id: <span class=\"k\">false</span> <span class=\"p\">;;</span> trait_pred.skip_binder<span class=\"o\">()</span>.self_ty<span class=\"o\">()</span>.is_param<span class=\"o\">(</span>param_ty.index<span class=\"o\">)</span>: <span class=\"k\">true</span>\n</pre></div>",
        "id": 176857827,
        "sender_full_name": "blitzerr",
        "timestamp": 1569736542
    },
    {
        "content": "<p>For  </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Object</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>(from above), the type parameter is <code>?Sized</code>, so we should have got <code>true</code> in the log line <br>\n<code>[DEBUG rustc::traits::object_safety] Match found = false; for param_ty T</code><br>\nright ?</p>",
        "id": 176857874,
        "sender_full_name": "blitzerr",
        "timestamp": 1569736601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> yep, I would think so, I'll try to look more closely in a bit</p>",
        "id": 176935358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569852586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> Sorry, my fault. The match occurs if <code>self.generics_require_sized_param</code> returns <strong>false</strong> -- that is, we are looking for an impl like <code>impl&lt;T: ?Sized&gt; Foo for T</code></p>",
        "id": 176954239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569864839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <code>?</code> means may or maynot, is it ?</p>",
        "id": 176954405,
        "sender_full_name": "blitzerr",
        "timestamp": 1569864935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> right -- by default, if you have <code>impl&lt;T&gt;</code>, we add an implicit <code>T: Sized</code>. The <code>T: ?Sized</code> notation suppresses that default</p>",
        "id": 176954477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569864969
    },
    {
        "content": "<p>Okay, that would make sense</p>",
        "id": 176954479,
        "sender_full_name": "blitzerr",
        "timestamp": 1569864972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was wondering, if there is a way to see the generated code, like the additional <code>impl</code> that would be added by the compiler (that we are trying to solve) ?</p>",
        "id": 176954772,
        "sender_full_name": "blitzerr",
        "timestamp": 1569865186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> no, that impl is sort of \"hard-coded\" into the trait solver</p>",
        "id": 176956447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569866218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I see. Is it true for the implicit <code>T: Sized</code>  also ?</p>",
        "id": 176960319,
        "sender_full_name": "blitzerr",
        "timestamp": 1569868551
    },
    {
        "content": "<p>(That no way to see it somehow).</p>",
        "id": 176960389,
        "sender_full_name": "blitzerr",
        "timestamp": 1569868582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> no, the <code>T: Sized</code> does show up in the result of <code>predicates</code> and so forth, but I don't know an easy way to dump that out</p>",
        "id": 176963612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569870651
    },
    {
        "content": "<p>I see. Thanks <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 176966988,
        "sender_full_name": "blitzerr",
        "timestamp": 1569872881
    },
    {
        "content": "<p>What should be the next steps here? Should we do the optimizations ?</p>",
        "id": 176967046,
        "sender_full_name": "blitzerr",
        "timestamp": 1569872906
    },
    {
        "content": "<p>And the tests <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 176967317,
        "sender_full_name": "blitzerr",
        "timestamp": 1569873118
    },
    {
        "content": "<p>Well <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> do you have it working now?</p>",
        "id": 176968275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569873685
    },
    {
        "content": "<p>I think the next step is to try and see what breaks first, and if we've fixed the bug</p>",
        "id": 176968289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569873692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> what branch are you working off on in your repo?</p>",
        "id": 176968938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569874063
    },
    {
        "content": "<p>ah I guess <a href=\"https://github.com/blitzerr/rust/tree/degenerate-object-safety-57893\" target=\"_blank\" title=\"https://github.com/blitzerr/rust/tree/degenerate-object-safety-57893\">https://github.com/blitzerr/rust/tree/degenerate-object-safety-57893</a></p>",
        "id": 176969019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569874088
    },
    {
        "content": "<p>well, I'd say to try that code (once you fix the bug) and see whether the <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f99bbe03831128591e1111e625b7b2f3\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f99bbe03831128591e1111e625b7b2f3\">weaponized transmute</a> example gives an error or not</p>",
        "id": 176969061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569874121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <code>degenerate-object-safety-57893</code> branch</p>",
        "id": 176969281,
        "sender_full_name": "blitzerr",
        "timestamp": 1569874260
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">apple</span><span class=\"o\">-</span><span class=\"n\">darwin</span><span class=\"o\">/</span><span class=\"n\">stage1</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"n\">weaponized_transmute</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\">                                    </span><span class=\"mi\">341</span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"err\"></span><span class=\"w\"> </span><span class=\"n\">Mon</span><span class=\"w\"> </span><span class=\"n\">Sep</span><span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"w\"> </span><span class=\"mi\">13</span>:<span class=\"mi\">20</span>:<span class=\"mi\">55</span><span class=\"w\"> </span><span class=\"mi\">2019</span><span class=\"w\"></span>\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0391</span><span class=\"p\">]</span>: <span class=\"nc\">cycle</span><span class=\"w\"> </span><span class=\"n\">detected</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">determine</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"n\">safety</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">blitz</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">libcore</span><span class=\"o\">/</span><span class=\"n\">ops</span><span class=\"o\">/</span><span class=\"n\">deref</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">64</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"p\">...</span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">normalizing</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">ParamEnvAnd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">param_env</span>: <span class=\"nc\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[</span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"o\">&gt;</span><span class=\"p\">))],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">All</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"o\">&lt;</span><span class=\"n\">Target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"o\">&gt;</span>::<span class=\"n\">Target</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"p\">...</span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">normalizing</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Canonical</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">max_universe</span>: <span class=\"nc\">U0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variables</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">ParamEnvAnd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">param_env</span>: <span class=\"nc\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[</span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"o\">&gt;</span><span class=\"p\">))],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">All</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">ProjectionTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">item_def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">2</span>:<span class=\"mi\">1704</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">[</span><span class=\"n\">d402</span><span class=\"p\">]</span>::<span class=\"n\">ops</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>::<span class=\"n\">deref</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>::<span class=\"n\">Deref</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>::<span class=\"n\">Target</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"p\">...</span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">again</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">determine</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"n\">safety</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">completing</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">cycle</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">cycle</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">evaluating</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">selection</span><span class=\"w\"> </span><span class=\"n\">obligation</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"o\">&gt;</span>::<span class=\"n\">Target</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n\n<span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">explain</span><span class=\"w\"> </span><span class=\"n\">E0391</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176970379,
        "sender_full_name": "blitzerr",
        "timestamp": 1569874903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I am getting this error currently <span aria-label=\"point of information\" class=\"emoji emoji-261d\" role=\"img\" title=\"point of information\">:point_of_information:</span></p>",
        "id": 176970774,
        "sender_full_name": "blitzerr",
        "timestamp": 1569875126
    },
    {
        "content": "<p>sigh</p>",
        "id": 176970906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569875235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> did rustc bootstrap though?</p>",
        "id": 176971385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569875564
    },
    {
        "content": "<p>hmm</p>",
        "id": 176971442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569875616
    },
    {
        "content": "<p>I don't think we need the full normalization here</p>",
        "id": 176971448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569875621
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> hmm maybe I was wrong to suggest re-using the same helper.</p>",
        "id": 176971714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569875805
    },
    {
        "content": "<p>in particular that helper is used from two distinct places</p>",
        "id": 176971977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569875977
    },
    {
        "content": "<p>actually 3</p>",
        "id": 176971983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569875979
    },
    {
        "content": "<p>one of them requires us to be conservative  -- ie., we <em>need</em> to detect <code>where Self: Sized</code> because it's an error if it is present</p>",
        "id": 176972101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569876020
    },
    {
        "content": "<p>but in the other two cases, it's more than the presernce of <code>where Self: Sized</code> <em>avoids</em> errors that would otherwise occur, so it'd be ok to miss one</p>",
        "id": 176972145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569876041
    },
    {
        "content": "<p>the reason we're getting a cycle error comes from having to normalize associated types</p>",
        "id": 176972194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569876078
    },
    {
        "content": "<p>i.e., converting something like <code>&lt;Foo as Iterator&gt;::Item</code> into its equivalent type (if we can figure out a better one)</p>",
        "id": 176972241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569876106
    },
    {
        "content": "<p>but that isn't really needed for the check I had in mind</p>",
        "id": 176972256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569876115
    },
    {
        "content": "<p>that normalization is done as part of the <code>elaborate_predicates</code> step</p>",
        "id": 176972309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569876123
    },
    {
        "content": "<p>I think what you want to do -- at least for now -- is to create a clone of that helper function <code>generics_require_sized_self</code> which does not do the <code>elaborate_predicates</code> call</p>",
        "id": 176972403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569876185
    },
    {
        "content": "<p>so something ike</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">generics_require_sized_self</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sized_def_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">lang_items</span><span class=\"p\">().</span><span class=\"n\">sized_trait</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cm\">/* No Sized trait, can&#39;t require it! */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Search for a predicate like `Self : Sized` amongst the trait bounds.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">predicates</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">predicates_of</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">predicates</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">predicates</span><span class=\"p\">.</span><span class=\"n\">instantiate_identity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">).</span><span class=\"n\">predicates</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">predicates</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"c1\">// not elaborate_predicates(self, predicates)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">predicate</span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"cm\">/* as before */</span><span class=\"w\">      </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176972438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569876213
    },
    {
        "content": "<p>this could miss some cases, e.g. if the user wrote something like <code>impl&lt;T: ?Sized + Foo&gt;</code> and you had <code>trait Foo: Sized</code></p>",
        "id": 176972523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569876251
    },
    {
        "content": "<p>but that's ok because that will make us <em>more</em> conservative in this case</p>",
        "id": 176972534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569876261
    },
    {
        "content": "<p>we're really interested in that <em>syntactic</em> check of \"did they disable the default or not\"</p>",
        "id": 176972571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569876291
    },
    {
        "content": "<blockquote>\n<p>but in the other two cases, it's more than the presernce of <code>where Self: Sized</code> <em>avoids</em> errors that would otherwise occur, so it'd be ok to miss one</p>\n</blockquote>\n<p>Can you elaborate on this one ? *It's more than the presence *</p>",
        "id": 176973810,
        "sender_full_name": "blitzerr",
        "timestamp": 1569877046
    },
    {
        "content": "<blockquote>\n<p>the reason we're getting a cycle error comes from having to normalize associated types</p>\n<p>i.e., converting something like <code>&lt;Foo as Iterator&gt;::Item</code> into its equivalent type (if we can figure out a better one)</p>\n</blockquote>\n<p>So because we are introducing associative types that are cyclical in the <code>weaponized-transmute</code> ?</p>",
        "id": 176973988,
        "sender_full_name": "blitzerr",
        "timestamp": 1569877126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span aria-label=\"point of information\" class=\"emoji emoji-261d\" role=\"img\" title=\"point of information\">:point_of_information:</span></p>",
        "id": 176974088,
        "sender_full_name": "blitzerr",
        "timestamp": 1569877186
    },
    {
        "content": "<p>By the way, is <code>weaponized-transmute</code> a standard term in the <code>PL</code> literature ?</p>",
        "id": 176974160,
        "sender_full_name": "blitzerr",
        "timestamp": 1569877213
    },
    {
        "content": "<p>not at all</p>",
        "id": 176974254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569877289
    },
    {
        "content": "<blockquote>\n<p>Can you elaborate on this one ? *It's more than the presence *</p>\n</blockquote>\n<p>it should have been \"it's more <em>that</em> the presence of <code>where Self: Sized</code> avoids errors\"</p>",
        "id": 176974287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569877309
    },
    {
        "content": "<p>i.e., if there is a <code>where Self: Sized</code>, then there is no error; so if we have a check that looks for <code>where Self: Sized</code>, but sometimes it misses some, that might cause extra errors -- but it won't cause us to accept code we should not have accepted</p>",
        "id": 176974451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569877400
    },
    {
        "content": "<blockquote>\n<p>By the way, is <code>weaponized-transmute</code> a standard term in the <code>PL</code> literature ?</p>\n</blockquote>\n<p>we sometimes say \"weaponized\" to mean \"we showed how you could use this bug to violate memory safety\"</p>",
        "id": 176974481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569877419
    },
    {
        "content": "<blockquote>\n<p>So because we are introducing associative types that are cyclical in the <code>weaponized-transmute</code> ?</p>\n</blockquote>\n<p>the new check we are adding to the <code>object_safety.rs</code> code is now causing us to do normalizations we weren't doing before; but doing those normalizations requires us to check object safety (that itself is perhaps also fixable, now that I think about it... but in any case I'd still like to push forward on the simpler version of this branch mostly so that we can tell if this approach is even viable)</p>",
        "id": 176974628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569877505
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Can you elaborate on this one ? *It's more than the presence *</p>\n</blockquote>\n<p>it should have been \"it's more <em>that</em> the presence of <code>where Self: Sized</code> avoids errors\"</p>\n</blockquote>\n<p>Got it. Now it makes sense. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 177006700,
        "sender_full_name": "blitzerr",
        "timestamp": 1569898920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  The state of the world does not change by much <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0391</span><span class=\"p\">]</span>: <span class=\"nc\">cycle</span><span class=\"w\"> </span><span class=\"n\">detected</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">determine</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"n\">safety</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">blitz</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">libcore</span><span class=\"o\">/</span><span class=\"n\">ops</span><span class=\"o\">/</span><span class=\"n\">deref</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">64</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"p\">...</span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">normalizing</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">ParamEnvAnd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">param_env</span>: <span class=\"nc\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[</span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"o\">&gt;</span><span class=\"p\">))],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">All</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"o\">&lt;</span><span class=\"n\">Target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"o\">&gt;</span>::<span class=\"n\">Target</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"p\">...</span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">normalizing</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Canonical</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">max_universe</span>: <span class=\"nc\">U0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variables</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">ParamEnvAnd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">param_env</span>: <span class=\"nc\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[</span><span class=\"n\">Binder</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"o\">&gt;</span><span class=\"p\">))],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">All</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span>: <span class=\"nb\">None</span> <span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">ProjectionTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">substs</span>: <span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">item_def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">2</span>:<span class=\"mi\">1704</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"p\">[</span><span class=\"n\">d402</span><span class=\"p\">]</span>::<span class=\"n\">ops</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>::<span class=\"n\">deref</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>::<span class=\"n\">Deref</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>::<span class=\"n\">Target</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"p\">...</span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">again</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">determine</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"n\">safety</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">completing</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">cycle</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">cycle</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">evaluating</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">selection</span><span class=\"w\"> </span><span class=\"n\">obligation</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Deref</span><span class=\"o\">&gt;</span>::<span class=\"n\">Target</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n\n<span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">try</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">explain</span><span class=\"w\"> </span><span class=\"n\">E0391</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n</pre></div>",
        "id": 177018393,
        "sender_full_name": "blitzerr",
        "timestamp": 1569901827
    },
    {
        "content": "<p>Maybe we need to get rid of <code>let predicates = predicates.instantiate_identity(self).predicates;</code> ?</p>",
        "id": 177018522,
        "sender_full_name": "blitzerr",
        "timestamp": 1569901864
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">predicates</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">predicates_of</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">).</span><span class=\"n\">predicates</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// let predicates = predicates.instantiate_identity(self).predicates;</span>\n<span class=\"w\">        </span><span class=\"n\">predicates</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n</pre></div>",
        "id": 177020337,
        "sender_full_name": "blitzerr",
        "timestamp": 1569902800
    },
    {
        "content": "<p>I went a step futher, and removed the call to the <code>instantiate_identity</code> and yet we still get the same error</p>\n<div class=\"codehilite\"><pre><span></span>error[E0391]: cycle detected when determine object safety of trait `std::ops::Deref`\n  --&gt; /Users/blitz/rustc-dev/rust/src/libcore/ops/deref.rs:64:1\n   |\n64 | pub trait Deref {\n   | ^^^^^^^^^^^^^^^\n   |\n   = note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(&lt;Self as std::ops::Deref&gt;))], reveal: All, def_id: None }, value: &amp;dyn std::ops::Deref&lt;Target = &lt;Self as std::ops::Deref&gt;::Target&gt; }`...\n   = note: ...which requires normalizing `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(&lt;Self as std::ops::Deref&gt;))], reveal: All, def_id: None }, value: ProjectionTy { substs: [Self], item_def_id: DefId(2:1704 ~ core[d402]::ops[0]::deref[0]::Deref[0]::Target[0]) } } }`...\n   = note: ...which again requires determine object safety of trait `std::ops::Deref`, completing the cycle\n   = note: cycle used when evaluating trait selection obligation `&lt;T as std::ops::Deref&gt;::Target == U`\n</pre></div>",
        "id": 177020702,
        "sender_full_name": "blitzerr",
        "timestamp": 1569902894
    },
    {
        "content": "<p>My branch has the latest changes. I will look again tomorrow.</p>",
        "id": 177020990,
        "sender_full_name": "blitzerr",
        "timestamp": 1569902986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Maybe there is no straight forward way to avoid the cycle and we have to keep track of elements so that we don't ?</p>",
        "id": 177072627,
        "sender_full_name": "blitzerr",
        "timestamp": 1569947504
    },
    {
        "content": "<p>I'll have to check out your branch <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span></p>",
        "id": 177093182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569960736
    },
    {
        "content": "<p>ok, I think maybe I am starting to see the problem actually</p>",
        "id": 177100857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569966409
    },
    {
        "content": "<p>well, not quite yet :)</p>",
        "id": 177100873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569966425
    },
    {
        "content": "<p>(I am reproducing it, though)</p>",
        "id": 177100896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569966454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> ok I understand the problem now</p>",
        "id": 177243047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570108883
    },
    {
        "content": "<p>it's not really related to the code you wrote, it's actually related to the code <strong>I</strong> wrote</p>",
        "id": 177243061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570108894
    },
    {
        "content": "<p>I think we want to separate the \"object safety\" test from the \"degeneracy\" test</p>",
        "id": 177243074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570108909
    },
    {
        "content": "<p><span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span> awesome</p>",
        "id": 177243153,
        "sender_full_name": "blitzerr",
        "timestamp": 1570108956
    },
    {
        "content": "<p>right now we have this code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">object_safety_provider</span><span class=\"p\">(</span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trait_def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ObjectSafety</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">object_safety_violations</span><span class=\"p\">(</span><span class=\"n\">trait_def_id</span><span class=\"p\">).</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ObjectSafety</span>::<span class=\"n\">Not</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">impl_potentially_overlapping_dyn_trait</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trait_def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ObjectSafety</span>::<span class=\"n\">Degenerate</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">ObjectSafety</span>::<span class=\"n\">Full</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 177243168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570108976
    },
    {
        "content": "<p>the thing that's causing the <em>cycles</em> though is this addition I made to the <a href=\"http://select.rs\" target=\"_blank\" title=\"http://select.rs\">select.rs</a> code:</p>",
        "id": 177243190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570108995
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"c1\">// First check if the trait is object-safe -- if not fully object safe,</span>\n<span class=\"w\">        </span><span class=\"c1\">// then we would never supply an impl in the first case.</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">object_safety</span><span class=\"p\">(</span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ObjectSafety</span>::<span class=\"n\">Full</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ObjectSafety</span>::<span class=\"n\">Degenerate</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ObjectSafety</span>::<span class=\"n\">Not</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 177243205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570109017
    },
    {
        "content": "<p>you'll see that if you remove the call to <code>impl_potentially_overlapping_dyn_trait</code> altogether you still get a cycle</p>",
        "id": 177243229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570109036
    },
    {
        "content": "<p>I think what we want to do is add a <em>separate</em> query -- something like <code>dyn_implements_self</code> or <code>degenerate_object_safety</code> -- that just do the <code>impl_potentially_overlapping_dyn_trait</code> check for a given trait</p>",
        "id": 177243322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570109087
    },
    {
        "content": "<p>and <em>that</em> is what we check in the <code>select.rs</code> code</p>",
        "id": 177243329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570109093
    },
    {
        "content": "<p>I'm not sure yet what I think this means in the bigger picture, but it's a step in the right direction</p>",
        "id": 177243348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570109103
    },
    {
        "content": "<p>So <code>objecy_safety</code> just checks <code>Full</code>or <code>Not</code> and we have another query for the <code>Degenerate</code> ?</p>",
        "id": 177243735,
        "sender_full_name": "blitzerr",
        "timestamp": 1570109339
    },
    {
        "content": "<p>Who calls the degenerate check ?</p>",
        "id": 177243770,
        "sender_full_name": "blitzerr",
        "timestamp": 1570109364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 177243784,
        "sender_full_name": "blitzerr",
        "timestamp": 1570109375
    },
    {
        "content": "<blockquote>\n<p>So <code>objecy_safety</code> just checks <code>Full</code>or <code>Not</code> and we have another query for the <code>Degenerate</code> ?</p>\n</blockquote>\n<p>yeah I think my early commits are kind of wrong-ish now</p>",
        "id": 177243804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570109397
    },
    {
        "content": "<p>I refactored to introduce that enum I thnk</p>",
        "id": 177243852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570109403
    },
    {
        "content": "<p>but if we're splitting up the check it's probably not what we want</p>",
        "id": 177243866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570109410
    },
    {
        "content": "<blockquote>\n<p>Who calls the degenerate check ?</p>\n</blockquote>\n<p>the <a href=\"http://select.rs\" target=\"_blank\" title=\"http://select.rs\">select.rs</a> quote I added, which I copied above</p>",
        "id": 177243893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570109421
    },
    {
        "content": "<p>there might however be another way to handle this</p>",
        "id": 177243928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570109453
    },
    {
        "content": "<p>I'm debating :)</p>",
        "id": 177243930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570109454
    },
    {
        "content": "<p>well, we can try more than one thing</p>",
        "id": 177245115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570110225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> I ugess I kind of left you hanging here, huh?</p>",
        "id": 177757704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570656337
    },
    {
        "content": "<p>I am still looking at this. To be very honest, this weekend I hardly had any time.</p>",
        "id": 177757878,
        "sender_full_name": "blitzerr",
        "timestamp": 1570656485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 177757909,
        "sender_full_name": "blitzerr",
        "timestamp": 1570656490
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> so I did some investigation here and I'm happy to report some progress</p>",
        "id": 178857545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840154
    },
    {
        "content": "<p>though I seem to be having an issue pushing to your branch for some reason</p>",
        "id": 178857626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840182
    },
    {
        "content": "<p>oh, I guess permission denied</p>",
        "id": 178857627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840183
    },
    {
        "content": "<p>well, on my fork, the branch <code> nikomatsakis/degenerate-object-safe-issue-57893 </code> contains a fix for the cycle query</p>",
        "id": 178857645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840196
    },
    {
        "content": "<p>I also fixed another minor bug</p>",
        "id": 178857648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840199
    },
    {
        "content": "<p>the good news is that the unsoundness seems to be corrected,and that we are also able to bootstrap</p>",
        "id": 178857655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840209
    },
    {
        "content": "<p>I've not yet dared to run test suite, will start that now</p>",
        "id": 178857656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840213
    },
    {
        "content": "<p>lol</p>",
        "id": 178858377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840752
    },
    {
        "content": "<p>I thnk i broke something</p>",
        "id": 178858380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840754
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>running 9016 tests\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 100/9016\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF. 200/9016\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 300/9016\nFFFFFF...FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF..FFFF.FFFF 400/9016\nFFFFFFFF.FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFiFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 500/9016\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 600/9016\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 700/9016\n</pre></div>",
        "id": 178858383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571840757
    },
    {
        "content": "<p>Not sure why you are getting permission denied. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 178862239,
        "sender_full_name": "blitzerr",
        "timestamp": 1571842818
    },
    {
        "content": "<p>That looks like a lot to fix <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 178862314,
        "sender_full_name": "blitzerr",
        "timestamp": 1571842867
    },
    {
        "content": "<p>(I don't think that's related to the PR, I think something went wrong in the build)</p>",
        "id": 178862574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571843031
    },
    {
        "content": "<p>hmm, although a make clean yields the same problem</p>",
        "id": 178862639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571843055
    },
    {
        "content": "<p>the errors are weird though</p>",
        "id": 178862643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571843058
    },
    {
        "content": "<p><em>oh</em> I bet I know what it's related to</p>",
        "id": 178862650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571843065
    },
    {
        "content": "<p>I think the problem is that the query is not defined on traits from other crates</p>",
        "id": 178862750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571843134
    },
    {
        "content": "<p>I missed this message. I am sorry</p>",
        "id": 179129559,
        "sender_full_name": "blitzerr",
        "timestamp": 1572102659
    },
    {
        "content": "<p>Looking at your updates on the GitHub issue <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , it looks like you have figured out bigger atuufs that might need to change here. Should we carve out some time to scope and then solve each of the issues you are talking about ?</p>",
        "id": 179129635,
        "sender_full_name": "blitzerr",
        "timestamp": 1572102770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  ^</p>",
        "id": 179381683,
        "sender_full_name": "blitzerr",
        "timestamp": 1572388116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 180548803,
        "sender_full_name": "blitzerr",
        "timestamp": 1573585128
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> --</p>",
        "id": 180548989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573585217
    },
    {
        "content": "<p>so indeed there has been some progress here</p>",
        "id": 180548999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573585221
    },
    {
        "content": "<p>I've written up a few comments,</p>",
        "id": 180549007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573585226
    },
    {
        "content": "<p>and I have a PR that is meant to measure the impact of my proposed change</p>",
        "id": 180549043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573585255
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/66037\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66037\">https://github.com/rust-lang/rust/pull/66037</a></p>",
        "id": 180549044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573585256
    },
    {
        "content": "<p>Probably what is most needed now is to <a href=\"https://github.com/rust-lang/rust/pull/66037#issuecomment-551989851\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66037#issuecomment-551989851\">dig more into the regressions that were found</a> and try to figure out their causes</p>",
        "id": 180549081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573585287
    },
    {
        "content": "<p>But I'm not sure how much you've followd the latest thinking</p>",
        "id": 180549092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573585301
    },
    {
        "content": "<p>I missed the follow ups. I will take a look at the pull and then ask questions if something I don't understand. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 180550040,
        "sender_full_name": "blitzerr",
        "timestamp": 1573585825
    },
    {
        "content": "<p>OK, well,</p>",
        "id": 180550052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573585837
    },
    {
        "content": "<p>the comments on the issue (<a href=\"https://github.com/rust-lang/rust/issues/57893#issuecomment-546489739\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57893#issuecomment-546489739\">starting around here</a>) might be a good place to start, <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span></p>",
        "id": 180550093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573585868
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> will go through them tonight</p>",
        "id": 180554049,
        "sender_full_name": "blitzerr",
        "timestamp": 1573588188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> thanks for extracting the failed crates Dylan :)</p>",
        "id": 180760194,
        "sender_full_name": "lqd",
        "timestamp": 1573756875
    },
    {
        "content": "<p>did you use your jq script ?</p>",
        "id": 180760213,
        "sender_full_name": "lqd",
        "timestamp": 1573756892
    },
    {
        "content": "<p>(I was unsure whether we’d need the crate versions in the list) I’ll look at maybe integrating this in crater as well so we can easily re-run experiments on previous regression results</p>",
        "id": 180760373,
        "sender_full_name": "lqd",
        "timestamp": 1573757017
    },
    {
        "content": "<p>Yep. For now it lives in a <a href=\"https://gist.github.com/ecstatic-morse/be799bfa4d3b3d6e163fa61a9c30706f\" target=\"_blank\" title=\"https://gist.github.com/ecstatic-morse/be799bfa4d3b3d6e163fa61a9c30706f\">gist</a>. It would be very nice to have this integrated. In the meantime just ping me if you want this; it takes like 30 seconds.</p>",
        "id": 180760501,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573757124
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 180760836,
        "sender_full_name": "lqd",
        "timestamp": 1573757340
    },
    {
        "content": "<p>was that supposed to be a link to the script ? (I can only see the list of failed crates on mobile here)</p>",
        "id": 180760918,
        "sender_full_name": "lqd",
        "timestamp": 1573757384
    },
    {
        "content": "<p>Whoops. <a href=\"https://gist.github.com/ecstatic-morse/be799bfa4d3b3d6e163fa61a9c30706f\" target=\"_blank\" title=\"https://gist.github.com/ecstatic-morse/be799bfa4d3b3d6e163fa61a9c30706f\">Here it is</a></p>",
        "id": 180761063,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573757442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  based on your proposal <a href=\"https://github.com/rust-lang/rust/issues/57893#issuecomment-546972824\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57893#issuecomment-546972824\">here</a>, looks like we are changing course a little bit ?</p>",
        "id": 180981602,
        "sender_full_name": "blitzerr",
        "timestamp": 1574041305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> yeah we have to</p>",
        "id": 181042783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574102175
    },
    {
        "content": "<p>Okay. So what would be the next steps for me <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  ?</p>",
        "id": 181044218,
        "sender_full_name": "blitzerr",
        "timestamp": 1574103111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> <a href=\"https://github.com/rust-lang/rust/issues/57893#issuecomment-557356550\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57893#issuecomment-557356550\">I left some notes here</a> -- I think the immediate next step is to go find the impls that are causing the errors from all affected crates. I started doing this in <a href=\"https://hackmd.io/s0jcU0VsSsaAkc-9ZipRHg\" target=\"_blank\" title=\"https://hackmd.io/s0jcU0VsSsaAkc-9ZipRHg\">this hackmd</a>, maybe that gives you an idea what i'm looking for. Just logging the relevant impl (plus, perhaps, a link to its source, but that's not necessary) for the trait that's causing the error would be awesome. I can come and look at them later to see if I can extract useful patterns.</p>",
        "id": 181605269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574389826
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> will do. I am traveling and will be back after Thanksgiving, so the progress may not be much</p>",
        "id": 181607491,
        "sender_full_name": "blitzerr",
        "timestamp": 1574393817
    },
    {
        "content": "<p>quick question to clarify: to help with this, we'd only want to note the impls which triggered an  <code>impl_potentially_overlapping_dyn_trait</code> warning, and not the <code>cannot be made into an object</code> errors that happened without the warning ? (and that's why the 3 <code>biscuit::serde_custom::flatten::ToJson</code> cases were marked as \"not a true root regression\" because there's only a trait object error without the overlapping impl ?)</p>",
        "id": 181648886,
        "sender_full_name": "lqd",
        "timestamp": 1574437122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I may have been mistaken</p>",
        "id": 181673851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454165
    },
    {
        "content": "<p>but I thought that <code>serde_custom</code> was another crate</p>",
        "id": 181673855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454173
    },
    {
        "content": "<p>for some reason I don't fully understand</p>",
        "id": 181673874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454205
    },
    {
        "content": "<p>you don't always get warnings</p>",
        "id": 181673878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454208
    },
    {
        "content": "<p>e.g. I'm not sure why the <a href=\"https://crater-reports.s3.amazonaws.com/pr-66037-1/try%23c593fd608dcac7408e7fed4b8c115e906033f80e/reg/euphrates_cli-0.1.0/log.txt\" target=\"_blank\" title=\"https://crater-reports.s3.amazonaws.com/pr-66037-1/try%23c593fd608dcac7408e7fed4b8c115e906033f80e/reg/euphrates_cli-0.1.0/log.txt\">euphrades logs</a> don't give a warning, since I think those traits are defined within the crate</p>",
        "id": 181673949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454253
    },
    {
        "content": "<p>that's indeed a bit confusing, if the warnings are not always present</p>",
        "id": 181675279,
        "sender_full_name": "lqd",
        "timestamp": 1574455521
    },
    {
        "content": "<p>(<code>serde_custom</code> is indeed a module of <code>biscuit</code>) so I guess just looking for the warning will not be enough; good to know, I was expecting this PR would have <code>deny</code>-ed the lint/warning</p>",
        "id": 181675548,
        "sender_full_name": "lqd",
        "timestamp": 1574455750
    },
    {
        "content": "<p>(ah it seems like we mostly get the <code>warning: impl_potentially_overlapping_dyn_trait</code> when building a crate's own code, not always when it's in a dependency)</p>",
        "id": 181689580,
        "sender_full_name": "lqd",
        "timestamp": 1574467715
    },
    {
        "content": "<p>ok I think I added all the remaining ones <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> — I'm unsure about a few of them (some are confusing, especially without the warning, and I'm not 100% knowledgeable about the new checks the PR does) but I'll re-check those next week with your <code>try</code> build artifacts, and update the doc while you're in ICE-land <span aria-label=\"snowman\" class=\"emoji emoji-2603\" role=\"img\" title=\"snowman\">:snowman:</span> before you get back; in the meantime, enjoy your vacation <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> :)</p>",
        "id": 181695286,
        "sender_full_name": "lqd",
        "timestamp": 1574475644
    },
    {
        "content": "<p>(re-checked the ones I was unsure about, the hackmd should be ready for further analysis now)</p>",
        "id": 181817671,
        "sender_full_name": "lqd",
        "timestamp": 1574685212
    },
    {
        "content": "<blockquote>\n<p>(ah it seems like we mostly get the <code>warning: impl_potentially_overlapping_dyn_trait</code> when building a crate's own code, not always when it's in a dependency)</p>\n</blockquote>\n<p>interesting</p>",
        "id": 182643973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575540090
    },
    {
        "content": "<p>it's likely that \"not always\" == \"never\" in this case (for example the euphrades traits were not defined within the crate as these were the euphrates-cli logs)</p>",
        "id": 182644702,
        "sender_full_name": "lqd",
        "timestamp": 1575540761
    },
    {
        "content": "<p>goes without saying, let me know if there's something I can do to help here :)</p>",
        "id": 182681980,
        "sender_full_name": "lqd",
        "timestamp": 1575566598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> thanks so much for going through that file, that's already super helpful</p>",
        "id": 182805233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575666671
    },
    {
        "content": "<p>you're very welcome</p>",
        "id": 182805266,
        "sender_full_name": "lqd",
        "timestamp": 1575666711
    },
    {
        "content": "<p>I forgot to say earlier: I have triaged the crater results for the latest run but haven't had the time to post the results on the PR</p>",
        "id": 185833502,
        "sender_full_name": "lqd",
        "timestamp": 1579193099
    },
    {
        "content": "<p>I hope no one was doing it at the same time</p>",
        "id": 185833524,
        "sender_full_name": "lqd",
        "timestamp": 1579193110
    },
    {
        "content": "<p>I'll post the results shortly</p>",
        "id": 185833544,
        "sender_full_name": "lqd",
        "timestamp": 1579193120
    },
    {
        "content": "<p>ok done <a href=\"https://github.com/rust-lang/rust/pull/66037#issuecomment-575269554\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66037#issuecomment-575269554\">https://github.com/rust-lang/rust/pull/66037#issuecomment-575269554</a> although there was one (<code>structural</code>) I wasn't able to find easily in the time I had, it's hidden in tests of a proc-macro derive. let me know if you need it <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and I'll extract the repro a different way</p>",
        "id": 185840921,
        "sender_full_name": "lqd",
        "timestamp": 1579197350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> that was awesome, thanks</p>",
        "id": 185929529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579277232
    }
]