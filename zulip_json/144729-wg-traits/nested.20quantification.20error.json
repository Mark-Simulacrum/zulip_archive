[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ok, I'm going to look a bit at that error, sorry for the delay.</p>",
        "id": 165921212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558115358
    },
    {
        "content": "<p>You mentioned this test:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// compile-fail</span>\n\n<span class=\"cp\">#![feature(associated_type_bounds)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Lam</span><span class=\"o\">&lt;</span><span class=\"n\">Binder</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">App</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">nested_bounds</span><span class=\"o\">&lt;</span><span class=\"n\">_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">D</span>: <span class=\"nb\">Clone</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Lam</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">App</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR nested quantification of lifetimes [E0316]</span>\n<span class=\"w\">    </span><span class=\"n\">_0</span>: <span class=\"nc\">Debug</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">nested_bounds_desugared</span><span class=\"o\">&lt;</span><span class=\"n\">_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">D</span>: <span class=\"nb\">Clone</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_2</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_2</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Lam</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">App</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR nested quantification of lifetimes [E0316]</span>\n<span class=\"w\">    </span><span class=\"n\">_0</span>: <span class=\"nc\">Debug</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165921429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558115514
    },
    {
        "content": "<p>But I'm not entirely sure that is the correct desugaring.</p>",
        "id": 165922292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558116085
    },
    {
        "content": "<p>Well, I guess that one could write something like:</p>\n<div class=\"codehilite\"><pre><span></span>D: for&lt;&#39;a&gt; Foo&lt;&#39;a, Bar: for&lt;&#39;b&gt; Baz&lt;&#39;b&gt;&gt;\n</pre></div>\n\n\n<p>which ought to desugar to</p>\n<div class=\"codehilite\"><pre><span></span>for&lt;&#39;a, &#39;b&gt; &lt;X as Foo&lt;&#39;a&gt;&gt;::Bar: Baz&lt;&#39;b&gt;\n</pre></div>",
        "id": 165922383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558116146
    },
    {
        "content": "<p>the \"nested quantification error\" comes about really because our grammar is... overly flexible, in some sense</p>",
        "id": 165922398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558116161
    },
    {
        "content": "<p>we permit <code>for&lt;'a&gt; T: Trait&lt;'a&gt;</code> or <code>T: for&lt;'a&gt; Trait&lt;'a&gt;</code> but they are equivalent</p>",
        "id": 165922473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558116229
    },
    {
        "content": "<p><em>anyway</em> so I guess that means we have a few questions:</p>\n<ul>\n<li>Do we want that case to error, or desugar properly?</li>\n<li>If error, in what phase? I sort of agree that ideally this quantification stuff would be desugared before region resolution, but that could be hard. This code is a bit grody.</li>\n</ul>",
        "id": 165922864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558116499
    },
    {
        "content": "<p>But my other question is sort of -- what is this desugaring to <em>now</em>. It reminds me that I was going to try to double-check the binding logic in that PR.</p>",
        "id": 165922891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558116529
    },
    {
        "content": "<p>No worries. I appreciate you've been busy.</p>",
        "id": 165923235,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558116788
    },
    {
        "content": "<p>hmm</p>",
        "id": 165923254,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558116805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> The desugaring now is basically what you see in <code>nested_bounds_desugared</code>, except  it's at predicate-level, not HIR level...</p>",
        "id": 165923364,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558116882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> and I tended to think it was a reasonable desugaring</p>",
        "id": 165923380,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558116899
    },
    {
        "content": "<p>and that it would bee fine to error on both of the above cases for now (in a similar way), until nested lifetime bounds are supported (with Chalk?), in which case the errors can disappear in both cases.</p>",
        "id": 165923443,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558116950
    },
    {
        "content": "<p>I think though that the existing solver should be able to handle nested quantifications of this kind, too</p>",
        "id": 165924524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558117640
    },
    {
        "content": "<p>still, maybe we can move these errors to HIR lowering or astconv or something</p>",
        "id": 165924554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558117664
    },
    {
        "content": "<p>and then just have the resolve-lifetimes code .. ignore the situation</p>",
        "id": 165924571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558117675
    },
    {
        "content": "<blockquote>\n<p>still, maybe we can move these errors to HIR lowering or astconv or something</p>\n</blockquote>\n<p>not astconv, ideally hir lowering</p>",
        "id": 165924633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558117686
    },
    {
        "content": "<p>I would think</p>",
        "id": 165924639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558117689
    },
    {
        "content": "<p>hmm</p>",
        "id": 165924664,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558117708
    },
    {
        "content": "<p>the issue is, in HIR, the sugared form is still reprsented very differently</p>",
        "id": 165924707,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558117738
    },
    {
        "content": "<p>but maybe that's not a problem</p>",
        "id": 165924730,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558117745
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> The desugaring now is basically what you see in <code>nested_bounds_desugared</code>, except  it's at predicate-level, not HIR level...</p>\n</blockquote>\n<p>I'm not really sure what you mean by \"at predicate level\", tbh -- well, I guess this desugaring is happening during astconv?</p>",
        "id": 165925067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1558117989
    },
    {
        "content": "<p>yes, astconv... I mean, it's generating extra predicates for the desugaring, rather than modifying HIR.</p>",
        "id": 165925379,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558118206
    },
    {
        "content": "<p>sorry, I didn't say that very well.</p>",
        "id": 165925386,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558118211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> left you a note about nested lifetime bounds on Github... not sure of the original motivation for banning nested quantification.</p>",
        "id": 166131228,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558397776
    },
    {
        "content": "<p>I guess you're away this week though, so I'll wait for aan answer on that.</p>",
        "id": 166131230,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1558397786
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>. Now that you’re back can we try to get ATB wrapped up ASAP? :-) Mainly this issue.</p>",
        "id": 166731546,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1559059454
    },
    {
        "content": "<p>Yep, sorry. So here's the thing -- as I wrote earlier, the \"nested quantification error\" is basically because Rust has this syntactic quirk</p>",
        "id": 167032239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559334983
    },
    {
        "content": "<p>where we let you write the <code>for&lt;'a&gt;</code> binder in two (largely equivalent) places</p>",
        "id": 167032247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559334991
    },
    {
        "content": "<p>and we didn't want people to write it in both</p>",
        "id": 167032253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559334996
    },
    {
        "content": "<p>just because it's...misleading</p>",
        "id": 167032258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559335002
    },
    {
        "content": "<p>i.e., you can have <code>for&lt;'a&gt; T: Foo&lt;'a&gt;</code> or <code>T: for&lt;'a&gt; Foo&lt;'a&gt;</code></p>",
        "id": 167032267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559335010
    },
    {
        "content": "<p>we didn't want people to write <code>for&lt;'a&gt; T: for&lt;'b&gt; Foo&lt;'a, 'b&gt;</code></p>",
        "id": 167032274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559335020
    },
    {
        "content": "<p>but not because it'd be invalid to do so <em>per se</em> -- presumably that'd be just equivalent to <code>for&lt;'a, 'b&gt; T: Foo&lt;'a, 'b&gt;</code></p>",
        "id": 167032294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559335036
    },
    {
        "content": "<p>it's not really obvious to me that this error has much or anything to do with this case</p>",
        "id": 167032310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559335057
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 167034671,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1559336979
    },
    {
        "content": "<p>So we may not need any modification in this case eh.</p>",
        "id": 167034685,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1559337000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> In that case I’ll let you address those two WIP commits if you would, then LGTM. :-)</p>",
        "id": 167034782,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1559337068
    }
]