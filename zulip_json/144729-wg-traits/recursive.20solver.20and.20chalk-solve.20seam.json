[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> or whoever has knowledge of the recursive solver:<br>\nAs part of <a href=\"https://github.com/rust-lang-nursery/chalk/issues/456\">chalk#456</a> I'm moving the recursive solver out of chalk-solve and into its own crate. I'm refactoring the solver to work against a trait, like <code>Context</code> in the SLG solver. I found that the <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-solve/src/recursive/fulfill.rs\"><code>fulfill</code></a> module depends on a lot of stuff in chalk-solve, some of which is also used by the SLG context. I haven't found much documentation on the recursive solver, so I don't know if abstracting the stuff in the <code>fulfill</code> module out of the recursive solver and into its <code>Context</code>/<code>Database</code> trait makes sense. That is, is it core to the recursive solver, or is it more \"Rust-specific\" like the code in chalk-solve?</p>",
        "id": 197859331,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589736023
    },
    {
        "content": "<p>I think my best answer here is \"I don't know\"</p>",
        "id": 197859676,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589736479
    },
    {
        "content": "<p>Let me look through fulfill real quick (I admit I really haven't looked through it much)</p>",
        "id": 197859722,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589736504
    },
    {
        "content": "<p>Wow the total recursive-specific code is tiny</p>",
        "id": 197859826,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589736693
    },
    {
        "content": "<p>Like roughly 500 lines...</p>",
        "id": 197859829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589736703
    },
    {
        "content": "<p>I'm curious...what would it be like going the other way...i.e. moving the chalk-engine slg logic into chalk-solve</p>",
        "id": 197859985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589736846
    },
    {
        "content": "<p>I suspect it won't \"reduce\" much, since the logic file itself is pretty large</p>",
        "id": 197860001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589736886
    },
    {
        "content": "<p>And you also have forest</p>",
        "id": 197860004,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589736895
    },
    {
        "content": "<p>And a few other files</p>",
        "id": 197860009,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589736904
    },
    {
        "content": "<p>I guess it would help if I could read through a basic outline of the recursive solver (like the explanation of forest, tables, strands, method of solving, etc for SLG). Does such a thing exist?</p>",
        "id": 197860036,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589736952
    },
    {
        "content": "<p>Not that I'm aware of, but you could ask <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span></p>",
        "id": 197860098,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737020
    },
    {
        "content": "<p>So you mentioned the recursive-specific code is tiny. Do you know specifically which files are recursive-specific?</p>",
        "id": 197860127,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589737059
    },
    {
        "content": "<p>If you do go through and learn about it, if you document it, that would be awesome</p>",
        "id": 197860134,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737062
    },
    {
        "content": "<p>I just looked through the recursive module</p>",
        "id": 197860181,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737083
    },
    {
        "content": "<p>Don't stress about it either, I can wait for Florian or someone with more context, while also reading more of the code.</p>",
        "id": 197860195,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589737132
    },
    {
        "content": "<p>Oh I guess there's also <code>recursive.rs</code> which adds another 500 lines</p>",
        "id": 197860373,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737391
    },
    {
        "content": "<p>Ya, <code>recursive.rs</code> and the three files in the <code>recursive</code> folder. Also, potentially some more things in modules like <code>infer</code>, depending on if that's \"core recursive logic\" or not.</p>",
        "id": 197860503,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589737551
    },
    {
        "content": "<p><code>infer</code> and such are shared with slg</p>",
        "id": 197860670,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737705
    },
    {
        "content": "<p>I'm wondering if it's worth the time/thought to split this out</p>",
        "id": 197860675,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737714
    },
    {
        "content": "<p>Or if it might just be better to put it under a feature</p>",
        "id": 197860690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737742
    },
    {
        "content": "<p>(though I know <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> isn't keen on those <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span>)</p>",
        "id": 197860695,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737764
    },
    {
        "content": "<p>Ya, but since it is also used heavily in <code>fulfill</code>, I was wondering if <code>fulfill</code> was really core to the recursive solver or not. This is the only difficult seam that I've found; otherwise the recursive solver lifts out of chalk-solve pretty easily.</p>",
        "id": 197860704,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589737792
    },
    {
        "content": "<p>there are really two goals here: 1) Make it so that if you don't use the recursive solver, you don't compile it 2) Have a \"logic\" boundary for people to understand</p>",
        "id": 197860770,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737836
    },
    {
        "content": "<p>both of those are more or less solved with a feature</p>",
        "id": 197860774,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737844
    },
    {
        "content": "<p>fulfill <em>does</em> seem to be pretty important</p>",
        "id": 197860784,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737868
    },
    {
        "content": "<p>Hm, avoiding compilation does seem like a different issue. Currently it's just a <code>match</code> on an enum to choose the solver.</p>",
        "id": 197860790,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589737883
    },
    {
        "content": "<p>but I would imagine fulfill to be more analogous to the functions in <code>SlgContext</code></p>",
        "id": 197860796,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737898
    },
    {
        "content": "<p>I was thinking \" it would be nice try to set up the crate structure in a way that we only need to compile one or the other\" meant to avoid recompiling both solvers when you're modifying only one.</p>",
        "id": 197860837,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589737923
    },
    {
        "content": "<p>Well, I imagine that you can have a feature that turns off the recursive solver, a feature that turns off slg</p>",
        "id": 197860849,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737953
    },
    {
        "content": "<p>Ya, that makes sense as well</p>",
        "id": 197860851,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589737959
    },
    {
        "content": "<p>so, tests would enable them both</p>",
        "id": 197860855,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737971
    },
    {
        "content": "<p>rust-analyzer would enable only recursive</p>",
        "id": 197860859,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737979
    },
    {
        "content": "<p>rustc would enable slg</p>",
        "id": 197860867,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589737988
    },
    {
        "content": "<p>With the recursive solver lifted into a separate crate, this would be easier.</p>",
        "id": 197860873,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589737997
    },
    {
        "content": "<p>(also remember that eventually we're most likely going to settle into one solver eventually anyways)</p>",
        "id": 197860882,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589738019
    },
    {
        "content": "<p>Mmm, you can conditionally include a module based on a feature</p>",
        "id": 197860896,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589738041
    },
    {
        "content": "<p>So, until we know which solver we're going to use, it's OK for now to not have an explicit interface between chalk-solve and the recursive resolver?</p>",
        "id": 197860962,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1589738096
    },
    {
        "content": "<p>yeah, that's fine :)</p>",
        "id": 197860990,
        "sender_full_name": "Jack Huey",
        "timestamp": 1589738151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/recursive.20solver.20and.20chalk-solve.20seam/near/197860695\">said</a>:</p>\n<blockquote>\n<p>(though I know <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> isn't keen on those <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span>)</p>\n</blockquote>\n<p>it's true, I'm not :P</p>",
        "id": 197998030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589837428
    }
]