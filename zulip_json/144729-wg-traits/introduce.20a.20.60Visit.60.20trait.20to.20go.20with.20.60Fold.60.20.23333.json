[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> I'm going to open this topic because I (or <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>) need to reply to your issue comment</p>",
        "id": 191673352,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084511
    },
    {
        "content": "<p>I looked at it, telling myself I was going to think about it and get back to it and forgot</p>",
        "id": 191673420,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084553
    },
    {
        "content": "<p>so this is the reminder to myself</p>",
        "id": 191673438,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585084561
    },
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span>, to me the primary benefit of passing values explicitly instead of using a mutable value is that mutable values tend to \"leak\" and create unclear dataflow. Using the return values means that we explicitly compute values from the leaves on up, and that all \"combination\" of values occurs at a clear spot. If you use a mutable field, then when you read that field, you wind up getting a value that is some combination of the previous values, and not necessarily determined based on the things below you in the tree. Overall, I just find the result less predictable and a bit harder to follow, myself.</p>",
        "id": 191675270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085476
    },
    {
        "content": "<p>In rustc's visitor, the design is specialized to finding things -- it always propagates a boolean up, and it's hard-coded to stop when that flag returns true</p>",
        "id": 191675318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085502
    },
    {
        "content": "<p>To continue, the point around mutable state, it feels like -- very often -- when I write a visitor of this kind, I wind up having to write code that does something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">old_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new_value</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">super_visit</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">old_value</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and that always just seems really fragile compared to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">super_visit</span><span class=\"p\">(</span><span class=\"n\">new_value</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191675492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/introduce.20a.20.60Visit.60.20trait.20to.20go.20with.20.60Fold.60.20.23333/near/191675318\" title=\"#narrow/stream/144729-wg-traits/topic/introduce.20a.20.60Visit.60.20trait.20to.20go.20with.20.60Fold.60.20.23333/near/191675318\">said</a>:</p>\n<blockquote>\n<p>In rustc's visitor, the design is specialized to finding things -- it always propagates a boolean up, and it's hard-coded to stop when that flag returns true</p>\n</blockquote>\n<p>one other thing is that sometimes I wind up making things too crazy generic :)</p>",
        "id": 191675505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085612
    },
    {
        "content": "<p>maybe it'd be better to just make a <code>Find</code> trait, instead of <code>Visit</code></p>",
        "id": 191675521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085624
    },
    {
        "content": "<p>and then we could make a <code>Count</code> trait if we wanted</p>",
        "id": 191675532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085634
    },
    {
        "content": "<p>instead of having one derive and a kind of complex generic thing that's hard to understand, in other words, maybe better to just have more derives.</p>",
        "id": 191675613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085666
    },
    {
        "content": "<p>actually the more I think about it the more I prefer that</p>",
        "id": 191675617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085672
    },
    {
        "content": "<p>I guess it depends how many \"custom impls\" we wind up needing, though</p>",
        "id": 191675705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085724
    },
    {
        "content": "<p>you have to reproduce the <code>Vec</code> impls and all that</p>",
        "id": 191675713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085730
    },
    {
        "content": "<p>The main thing I didn't like is that not every computation can align with that design (mainly, if you collect some pieces into a vec or something)</p>",
        "id": 191675737,
        "sender_full_name": "Areredify",
        "timestamp": 1585085743
    },
    {
        "content": "<p>That seems ok to me, I guess.</p>",
        "id": 191675829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085779
    },
    {
        "content": "<p>This sort of visitor is really not used for a ton of purposes</p>",
        "id": 191675860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085806
    },
    {
        "content": "<p>but also</p>",
        "id": 191675886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085825
    },
    {
        "content": "<p>you can of course add mutable state if you want</p>",
        "id": 191675890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085829
    },
    {
        "content": "<p>e.g., we could have the \"return value\" be the <code>()</code> type</p>",
        "id": 191675901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085837
    },
    {
        "content": "<p>and that means \"visit all the things\"</p>",
        "id": 191675904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085841
    },
    {
        "content": "<p>if we ever need that</p>",
        "id": 191675927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085855
    },
    {
        "content": "<p>in other words, the visitor <em>gets</em> an <code>&amp;mut self</code>, so it <em>can</em> make mutation</p>",
        "id": 191675970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085882
    },
    {
        "content": "<p>it's just that it'd be nice for common patterns to not require it</p>",
        "id": 191676019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585085894
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/introduce.20a.20.60Visit.60.20trait.20to.20go.20with.20.60Fold.60.20.23333/near/191675970\" title=\"#narrow/stream/144729-wg-traits/topic/introduce.20a.20.60Visit.60.20trait.20to.20go.20with.20.60Fold.60.20.23333/near/191675970\">said</a>:</p>\n<blockquote>\n<p>in other words, the visitor <em>gets</em> an <code>&amp;mut self</code>, so it <em>can</em> make mutation</p>\n</blockquote>\n<p>That's how I understood it, however it allows the logic to be scattered.</p>\n<p>Also, if you <code>Count</code> things, you do <code>answer = thing.visit(&amp;mut visitor)</code>, but if you <code>Collect</code> things you do <code>thing.visit(&amp;mut visitor); answer = visitor.result</code> and it doesn't feel right? I guess</p>",
        "id": 191676376,
        "sender_full_name": "Areredify",
        "timestamp": 1585086113
    },
    {
        "content": "<p>that doesn't bother me I guess. In practice I wouldn't do either, probably, but rather have some wrapper that constructs the visitor and invokes the visitor method</p>",
        "id": 191676824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086330
    },
    {
        "content": "<p>usually we do things like <code>FindTypes::count(&amp;value)</code> which is like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">FindTypes</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Visit</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">visit_with</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">FindTypes</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191676934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086384
    },
    {
        "content": "<p>anyway the truth is that I don't know if we'd ever do that</p>",
        "id": 191677155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086498
    },
    {
        "content": "<p>I guess there is one other thing, <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span></p>",
        "id": 191677187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086517
    },
    {
        "content": "<p>at least in the design we use for fold,</p>",
        "id": 191677200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086526
    },
    {
        "content": "<p>most types implement the <code>Visit</code> trait, which gets a <code>&amp;mut dyn Visitor</code></p>",
        "id": 191677216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086535
    },
    {
        "content": "<p>in other words, the logic to \"walk\" a type is <em>not</em> in the visitor itself,</p>",
        "id": 191677240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086546
    },
    {
        "content": "<p>which only defines a few key callbacks,</p>",
        "id": 191677245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086549
    },
    {
        "content": "<p>this means that the logic can't read the \"internal state\" (private fields) of the visitor</p>",
        "id": 191677265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086565
    },
    {
        "content": "<p>so we'd have to add some kind of callback like <code>fn keep_visiting(&amp;self) -&gt; bool</code> I guess</p>",
        "id": 191677292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086580
    },
    {
        "content": "<p>You are talking about rustc <code>Visit</code>, right?</p>",
        "id": 191677398,
        "sender_full_name": "Areredify",
        "timestamp": 1585086614
    },
    {
        "content": "<p>(Side note: really, this \"visit\" should be called \"fold\" or \"reduce\", I imagine, and what we now call \"fold\" should be called \"map\")</p>",
        "id": 191677485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086653
    },
    {
        "content": "<p>At least to align better with the common operations</p>",
        "id": 191677511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086669
    },
    {
        "content": "<p>In particular, this is not a \"visitor\" in the usual OO sense of the term</p>",
        "id": 191677541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086684
    },
    {
        "content": "<p>which I think is kind of what we're comparing here</p>",
        "id": 191677566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086696
    },
    {
        "content": "<p>Yeah I was confused about why chalks <code>Fold</code> was called <code>Fold</code></p>",
        "id": 191677607,
        "sender_full_name": "Areredify",
        "timestamp": 1585086717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"251766\">Areredify</span> <a href=\"#narrow/stream/144729-wg-traits/topic/introduce.20a.20.60Visit.60.20trait.20to.20go.20with.20.60Fold.60.20.23333/near/191677398\" title=\"#narrow/stream/144729-wg-traits/topic/introduce.20a.20.60Visit.60.20trait.20to.20go.20with.20.60Fold.60.20.23333/near/191677398\">said</a>:</p>\n<blockquote>\n<p>You are talking about rustc <code>Visit</code>, right?</p>\n</blockquote>\n<p>yeah, I guess I'm just saying that, as I proposed it, the <code>Visit</code> trait makes its decisions about whether to continue basd on the value returned to it, not by observing the internal state of the <code>visitor</code> argument, and that feels .. nicer to me.</p>",
        "id": 191677678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"251766\">Areredify</span> <a href=\"#narrow/stream/144729-wg-traits/topic/introduce.20a.20.60Visit.60.20trait.20to.20go.20with.20.60Fold.60.20.23333/near/191677607\" title=\"#narrow/stream/144729-wg-traits/topic/introduce.20a.20.60Visit.60.20trait.20to.20go.20with.20.60Fold.60.20.23333/near/191677607\">said</a>:</p>\n<blockquote>\n<p>Yeah I was confused about why chalks <code>Fold</code> was called <code>Fold</code></p>\n</blockquote>\n<p>it's following the names from rustc, which go .. way back.</p>",
        "id": 191677695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086748
    },
    {
        "content": "<p>but both are kind of wrong.</p>",
        "id": 191677702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585086751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/introduce.20a.20.60Visit.60.20trait.20to.20go.20with.20.60Fold.60.20.23333/near/191677292\" title=\"#narrow/stream/144729-wg-traits/topic/introduce.20a.20.60Visit.60.20trait.20to.20go.20with.20.60Fold.60.20.23333/near/191677292\">said</a>:</p>\n<blockquote>\n<p>so we'd have to add some kind of callback like <code>fn keep_visiting(&amp;self) -&gt; bool</code> I guess</p>\n</blockquote>\n<p>That's what I had in mind, yes</p>",
        "id": 191678126,
        "sender_full_name": "Areredify",
        "timestamp": 1585087003
    },
    {
        "content": "<p>But if I was to thing about <code>Visit</code> as folding, then I like your approach better</p>",
        "id": 191678223,
        "sender_full_name": "Areredify",
        "timestamp": 1585087073
    },
    {
        "content": "<p>I'll get to it, then <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 191678282,
        "sender_full_name": "Areredify",
        "timestamp": 1585087091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have a little question about the scope of Visit: in Fold, the callbacks are defined on the interesting parts of mapping (how to transform types and such), but I imagine Visit should have callbacks for almost everything we visit. What do you think?</p>",
        "id": 192946395,
        "sender_full_name": "Areredify",
        "timestamp": 1586071895
    },
    {
        "content": "<p>Heh, that's one of the questions I asked in the PR!</p>",
        "id": 193093958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586203511
    },
    {
        "content": "<p>I'd prefer to have relatively few callback sites, because otherwise every time we add any new type, we have to update the visitor, and I think very few visitors care about those little details</p>",
        "id": 193093991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586203534
    },
    {
        "content": "<p>But I see that <code>AliasEq</code> is a bit annoying!</p>",
        "id": 193094019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586203548
    },
    {
        "content": "<p>Keep in mind though that \"higher-level callbacks\" still allow you to intercept lower-level details (by matching down)</p>",
        "id": 193094092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586203566
    },
    {
        "content": "<p>I've been trying to figure out what is \"bugging\" me about AliasEq, I think it's that it's not a concept that comes \"from Rust\" somehow, it's more a detail in how we've defined things; this is not 100% true, since where clauses like <code>T: Foo&lt;Bar = Baz&gt;</code> are part of Rust</p>",
        "id": 193094158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586203610
    }
]