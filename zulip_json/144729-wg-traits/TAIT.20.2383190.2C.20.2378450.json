[
    {
        "content": "<p>Branch  on nikomatsakis repo tait-issue-83190</p>",
        "id": 242798980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623790788
    },
    {
        "content": "<p>Doesn't have any fix now</p>",
        "id": 242798997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623790801
    },
    {
        "content": "<p>But I might push some documentation commits there</p>",
        "id": 242799046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623790806
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> points out that <a href=\"https://github.com/rust-lang/rust/pull/85755\">https://github.com/rust-lang/rust/pull/85755</a> by <span class=\"user-mention\" data-user-id=\"328097\">@BN</span> targets these bugs</p>",
        "id": 242809732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623797610
    },
    {
        "content": "<p>That PR doesn't seem quite right to me, <span class=\"user-mention\" data-user-id=\"328097\">@BN</span>, but I'm digging through the logs to try to give more actionable feedback :)</p>",
        "id": 242809746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623797624
    },
    {
        "content": "<p>It's been helpful though!</p>",
        "id": 242809749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623797627
    },
    {
        "content": "<p>Ah, the problem is different than I thought</p>",
        "id": 242812132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623799479
    },
    {
        "content": "<p>consider this example</p>",
        "id": 242812140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623799481
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">AssociatedImpl</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">ImplTrait</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242812162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623799498
    },
    {
        "content": "<p>what do you get with this code? Answer: error</p>",
        "id": 242812171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623799503
    },
    {
        "content": "<p>because <code>'a</code> cannot be used in the value of an associated type</p>",
        "id": 242812181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623799513
    },
    {
        "content": "<p>the ICE here is arising, fundamentally, because the <code>type ImplTrait = impl Trait</code> is shorthand for something like</p>",
        "id": 242812342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623799619
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">AssociatedImpl</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">ImplTrait</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242812363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623799637
    },
    {
        "content": "<p>and the value of an associated type is not allowed to reference <code>'a</code></p>",
        "id": 242812365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623799646
    },
    {
        "content": "<p>I am debating -- I guess the thing to do would be to issue an error here -- but also, we have various rules about which lifetimes are captured, I'm a <em>bit</em> surprised that <code>'a</code> is being captured in the first place</p>",
        "id": 242812741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623799901
    },
    {
        "content": "<p><em>oh</em></p>",
        "id": 242813045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623800132
    },
    {
        "content": "<p><code>'a</code> is considered constrained</p>",
        "id": 242813054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623800137
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 242813059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623800140
    },
    {
        "content": "<p>this correctly errors</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Associated</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">AssociatedImpl</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">ImplTrait</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">ImplTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">//~^ ERROR unexpected concrete region in borrowck: ReEarlyBound(0, 'a)</span>\n<span class=\"w\">        </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242813184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623800227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I'm kind of spinning my wheels here -- I'm trying to track down how this particular predicate appears in the parameter environment</p>",
        "id": 242816731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623803474
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>ProjectionPredicate(ProjectionTy { substs: [S&lt;T&gt;], item_def_id: DefId(0:4 ~ issue_83190[317d]::AssociatedImpl::ImplTrait) }, Opaque(DefId(0:16 ~ issue_83190[317d]::{impl#0}::ImplTrait::{opaque#0}), [ReEarlyBound(0, &#39;a), T])\n</code></pre></div>",
        "id": 242816745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623803491
    },
    {
        "content": "<p>basically a predicate that <code>ProjectionEq(&lt;S&lt;T&gt; as AssociatedImpl&gt;::ImplTrait, OpaqueType&lt;'a, T&gt;&gt;</code></p>",
        "id": 242816759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623803515
    },
    {
        "content": "<p>obviously the user didn't write this by hand</p>",
        "id": 242816764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623803522
    },
    {
        "content": "<p>so I figure it's probably injected by some aspect of impl trait desugaring</p>",
        "id": 242816804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623803529
    },
    {
        "content": "<p>is this ringing any bells?</p>",
        "id": 242817246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623803976
    },
    {
        "content": "<p>i thought that predicate is created by predicates_of. maybe <a href=\"https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler/rustc_typeck/src/astconv/mod.rs#L1158\">https://github.com/rust-lang/rust/blob/9f8012e3aa8d5b087100ecd7b109ed3dd2859cca/compiler/rustc_typeck/src/astconv/mod.rs#L1158</a> ?</p>",
        "id": 242836538,
        "sender_full_name": "oli",
        "timestamp": 1623826028
    },
    {
        "content": "<p>so \"unrelated\" to opaque types</p>",
        "id": 242836561,
        "sender_full_name": "oli",
        "timestamp": 1623826061
    },
    {
        "content": "<p>I realized I am in the wrong place</p>",
        "id": 242856506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623836642
    },
    {
        "content": "<p>I got a bit turned around somehow</p>",
        "id": 242856562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623836656
    },
    {
        "content": "<p>also, rr is awesome</p>",
        "id": 242856566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623836659
    },
    {
        "content": "<p>the predicate in question is created by <a href=\"https://github.com/rust-lang/rust/blob/7bd795387bbcfc4454541bdf20d51d385033e0fa/compiler/rustc_typeck/src/check/compare_method.rs#L1198-L1232\">this code in <code>compare_method</code></a></p>",
        "id": 242856591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623836684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20.2383190.2C.20.2378450/near/242856566\">said</a>:</p>\n<blockquote>\n<p>also, rr is awesome</p>\n</blockquote>\n<p>specifically: <code>rr record -M</code>, which adds a timestamp to every log, so you can do <code>rr reply --goto X</code> and jump right to the code that produced that log</p>",
        "id": 242856641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623836714
    },
    {
        "content": "<p>we should add an option to rustc so you can do <code>rustc --rr</code> and it re-execs itself or something</p>",
        "id": 242856677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623836736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> wdyt?</p>",
        "id": 242856689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623836745
    },
    {
        "content": "<p>unfortunately, the vscode integration didn't quite work for me.</p>",
        "id": 242858143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623837399
    },
    {
        "content": "<p>hmm, sadly rn and friends don't work for me either</p>",
        "id": 242858803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623837743
    },
    {
        "content": "<p>well, the backtrace is already pretty helpful</p>",
        "id": 242858807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623837747
    },
    {
        "content": "<p>...and maybe I think the original PR <em>was</em> correct after all</p>",
        "id": 242859025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623837877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20.2383190.2C.20.2378450/near/242856591\">said</a>:</p>\n<blockquote>\n<p>the predicate in question is created by <a href=\"https://github.com/rust-lang/rust/blob/7bd795387bbcfc4454541bdf20d51d385033e0fa/compiler/rustc_typeck/src/check/compare_method.rs#L1198-L1232\">this code in <code>compare_method</code></a></p>\n</blockquote>\n<p>lol I had this open earlier and was like \"nah, that can't be it\"</p>",
        "id": 242859288,
        "sender_full_name": "oli",
        "timestamp": 1623838050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Originally I also thought that this should error. If we use a GAT in this example <code>impl&lt;T: Associated&lt;A&lt;'a&gt; = &amp;'a ()&gt;&gt; AssociatedImpl for S&lt;T&gt;</code> it works, as expected. In general I still find it confusing when exactly a GAT is required. To me it seems more consistent to always require a GAT when a lifetime argument occurs in an assoc ty constraint.</p>",
        "id": 242860494,
        "sender_full_name": "BN",
        "timestamp": 1623838850
    },
    {
        "content": "<p>it should not error, I agree, I'm just trying to decide where I think the code is going wrong</p>",
        "id": 242860744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623839010
    },
    {
        "content": "<p>your PR <em>might</em> be right, but something still feels unresolved t ome</p>",
        "id": 242860763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623839019
    },
    {
        "content": "<p>unfortunately I really have to make breakfast now</p>",
        "id": 242860774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623839024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAIT.20.2383190.2C.20.2378450/near/242860763\">said</a>:</p>\n<blockquote>\n<p>your PR <em>might</em> be right, but something still feels unresolved t ome</p>\n</blockquote>\n<p>that is, in my own understanding, not the PR per se</p>",
        "id": 242860791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623839036
    },
    {
        "content": "<p>basically i'm trying to decide if the normalization should be producing a different result</p>",
        "id": 242860872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623839081
    },
    {
        "content": "<p>(I’d need to dig deeper to understand what <code>rustc —rr ,,,</code> buys us over <code>rr rustc ...</code>. The main advantage I can see is that it would integrate with <code>rustup</code> so that rr would get attached to the inner <code>rustc</code> binary that’s really driving things.)</p>",
        "id": 242867497,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623843290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> yes. That plus maybe some options.</p>",
        "id": 242990680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623920821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> ok, I dug more into this. I think your PR is actually correct, although it's a touch inconsistent, and we might want to do the fix closer to the point of the ICE.</p>",
        "id": 242990753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623920862
    },
    {
        "content": "<p>So, for my own edification, what's happening is that the reference to <code>'a</code> is coming out from the parameter environment</p>",
        "id": 242990786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623920881
    },
    {
        "content": "<p>so basically any time that you normalize a type in the NLL code, you have to be prepared that it contains funky named regions like <code>'static</code> or <code>'a</code> that may have come from the <code>param_env</code></p>",
        "id": 242990890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623920923
    },
    {
        "content": "<p>other parts of the code however don't go and do a \"renumbering\" after this, instead they do that lazilly</p>",
        "id": 242990913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623920943
    },
    {
        "content": "<p>see e.g. <a href=\"https://github.com/rust-lang/rust/blob/7bd795387bbcfc4454541bdf20d51d385033e0fa/compiler/rustc_mir/src/borrow_check/type_check/relate_tys.rs#L104-L106\">the type relation code</a>, which does:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">borrowck_context</span><span class=\"p\">.</span><span class=\"n\">universal_regions</span><span class=\"p\">.</span><span class=\"n\">to_region_vid</span><span class=\"p\">(</span><span class=\"n\">sub</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sup</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">borrowck_context</span><span class=\"p\">.</span><span class=\"n\">universal_regions</span><span class=\"p\">.</span><span class=\"n\">to_region_vid</span><span class=\"p\">(</span><span class=\"n\">sup</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242990943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623920960
    },
    {
        "content": "<p>I think that means we want this code instead of the code which ICEs</p>",
        "id": 242991328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623921234
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">subst_regions</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">universal_regions</span><span class=\"p\">.</span><span class=\"n\">fr_static</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">universal_substs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">fold_regions</span><span class=\"p\">(</span><span class=\"n\">substs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">region</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">universal_regions</span><span class=\"p\">.</span><span class=\"n\">to_region_vid</span><span class=\"p\">(</span><span class=\"n\">region</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">subst_regions</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">vid</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">definitions</span><span class=\"p\">[</span><span class=\"n\">vid</span><span class=\"p\">].</span><span class=\"n\">external_name</span><span class=\"p\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">infcx</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">delay_span_bug</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"opaque type with non-universal region substs\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">lifetimes</span><span class=\"p\">.</span><span class=\"n\">re_static</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242991332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623921235
    },
    {
        "content": "<p>I'm going to push some commits to your branch, <span class=\"user-mention\" data-user-id=\"328097\">@BN</span></p>",
        "id": 242991769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623921506
    },
    {
        "content": "<p>done</p>",
        "id": 242992174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623921792
    },
    {
        "content": "<p>Yes, that seems like the better approach.</p>",
        "id": 242996363,
        "sender_full_name": "BN",
        "timestamp": 1623924408
    },
    {
        "content": "<p>I'm going to r+ it, thanks again <span class=\"user-mention\" data-user-id=\"328097\">@BN</span> for the PR, I was going down some deadends there :)</p>",
        "id": 242997223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1623925008
    },
    {
        "content": "<p>Glad I could help.</p>",
        "id": 242999120,
        "sender_full_name": "BN",
        "timestamp": 1623926246
    }
]