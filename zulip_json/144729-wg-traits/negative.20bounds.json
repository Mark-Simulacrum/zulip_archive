[
    {
        "content": "<p>How far along is chalk in support for negative bounds?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">RP</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">P</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">RP</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Where <code>RP</code> and <code>P</code> are both traits I defined</p>",
        "id": 216799290,
        "sender_full_name": "pksunkara",
        "timestamp": 1605455612
    },
    {
        "content": "<p>I needed this scenario because implementing <code>RP::bar</code> includes a lot of dependencies and thus I removed it from <code>P</code> and wanted to have a default implementation of it if <code>P</code> is implemented. But people might still want to define their own <code>RP::bar</code></p>",
        "id": 216799475,
        "sender_full_name": "pksunkara",
        "timestamp": 1605455787
    },
    {
        "content": "<p>Hmm</p>",
        "id": 216800102,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605456879
    },
    {
        "content": "<p>So, negative impls, IIRC, just prevent auto traits</p>",
        "id": 216800123,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605456942
    },
    {
        "content": "<p>Or, are only really implemented for auto traits</p>",
        "id": 216800127,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605456957
    },
    {
        "content": "<p>But, not in the negative reasoning since</p>",
        "id": 216800167,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605456976
    },
    {
        "content": "<p>I didn't understand what you said, sorry</p>",
        "id": 216800195,
        "sender_full_name": "pksunkara",
        "timestamp": 1605457071
    },
    {
        "content": "<p>Negative impls in where clauses aren't implemented</p>",
        "id": 216801400,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605458534
    },
    {
        "content": "<p>only things like <code>impl !Send for Foo {}</code></p>",
        "id": 216801411,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605458549
    },
    {
        "content": "<p>negative bounds are \"kind of\" supported in chalk, but they are meant for specialized purposes; I do not think we will ever add them to rust because they make everything more complicated</p>",
        "id": 216876817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605536505
    },
    {
        "content": "<p>this sounds like specialization...</p>",
        "id": 217062597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605647133
    }
]