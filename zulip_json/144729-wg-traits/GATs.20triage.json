[
    {
        "content": "<p>So, the good news is that with <a href=\"https://github.com/rust-lang/rust/issues/79554\">#79554</a> being merged, there are only 2 (maybe 3) blocking issues left (for lifetimes only)</p>",
        "id": 225316677,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612540662
    },
    {
        "content": "<p>1 of them might be mislabeled (<a href=\"https://github.com/rust-lang/rust/issues/77905\">#77905</a>) and might be a \"working as expected\"</p>",
        "id": 225316775,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612540691
    },
    {
        "content": "<p>And I've started to look into <a href=\"https://github.com/rust-lang/rust/issues/76407\">#76407</a></p>",
        "id": 225316810,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612540708
    },
    {
        "content": "<p>I need to go through all the non-blocking issues and see which ones are fixed now (but I'm going to wait until the next nightly so I can do that on the playground)</p>",
        "id": 225316946,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612540769
    },
    {
        "content": "<p>But, considering how <em>few</em> blocking issues there are, we should definitely think about whether it <em>does</em> make sense to split GATs into lifetimes vs. all</p>",
        "id": 225317146,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612540831
    },
    {
        "content": "<p>So, look at the non-lifetime issues and see if there are any heavy design/implementation issues</p>",
        "id": 225317213,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612540854
    },
    {
        "content": "<p>It's also probably time (in the bigger scheme of things) to write that blog post I've been putting off to essentially say \"Hey, here's what wg-traits did last year. We're expecting to work towards getting async fns in traits this year, along with Chalk work. Also, btw, GATs are looking really good, please stress test.\"</p>",
        "id": 225317601,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612540998
    },
    {
        "content": "<p>I should probably have a look for additional problems now that has merged. I expect users are probably not as good at reporting things that are incorrectly allowed to compile as they are with ICEs.</p>",
        "id": 225317838,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612541073
    },
    {
        "content": "<p>Yes, the other bit of that is coming up with a list of tests that we want/need added</p>",
        "id": 225318837,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612541464
    },
    {
        "content": "<p>Also rustfmt needs updating to handle the syntax from <a href=\"https://github.com/rust-lang/rust/issues/79554\">#79554</a></p>",
        "id": 225322651,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612543112
    },
    {
        "content": "<p>and RA</p>",
        "id": 225322762,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612543161
    },
    {
        "content": "<p>is the syntax documented in the reference?</p>",
        "id": 225329925,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1612546225
    },
    {
        "content": "<p>It's unstable, so no</p>",
        "id": 225329965,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612546244
    },
    {
        "content": "<p>The change is that <em>GenericArgsBinding</em> defined here <a href=\"https://doc.rust-lang.org/reference/paths.html#paths-in-expressions\">https://doc.rust-lang.org/reference/paths.html#paths-in-expressions</a> is now <em>PathExprSegment</em> <code>=</code> <em>Type</em></p>",
        "id": 225330600,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612546545
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/44265\">#44265</a> Could also do with an update</p>",
        "id": 225330752,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1612546615
    },
    {
        "content": "<p>From the RFC:</p>\n<blockquote>\n<p>A relatively uncommon feature of Rust is that it has two base kinds, whereas many languages which deal with higher-kindedness only have the base kind type. The other base kind of Rust is the lifetime parameter. If you have a type like Foo&lt;'a&gt;, the kind of Foo is lifetime -&gt; type.</p>\n</blockquote>\n<p>I guess that should be three base kinds, if one includes const parameters. Or rather, every type is a kind, so there are an infinite number of base kinds and mind-bendingness ensues</p>",
        "id": 225331777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612547144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/GATs.20triage/near/225317601\">said</a>:</p>\n<blockquote>\n<p>... Also, btw, GATs are looking really good, please stress test.\"</p>\n</blockquote>\n<p>I like that kind of stuff <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> what's a good way to start in this context?</p>",
        "id": 225369550,
        "sender_full_name": "nyms",
        "timestamp": 1612566090
    },
    {
        "content": "<p>Hmm, use GATs is everything place that can think of. Use them in the patterns that you expect that. Build things :)</p>",
        "id": 225379555,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612576017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around?</p>",
        "id": 226025537,
        "sender_full_name": "Jack Huey",
        "timestamp": 1613063836
    },
    {
        "content": "<p>I've been looking at <a href=\"https://github.com/rust-lang/rust/issues/76407\">#76407</a></p>",
        "id": 226025556,
        "sender_full_name": "Jack Huey",
        "timestamp": 1613063847
    },
    {
        "content": "<p>And thinking about the right \"fix\" here</p>",
        "id": 226025578,
        "sender_full_name": "Jack Huey",
        "timestamp": 1613063858
    },
    {
        "content": "<p>The key issue here is &lt;T as MyTrait&gt;::Item&lt;'a&gt; doesn't get normalized to <code>u32</code></p>",
        "id": 226025696,
        "sender_full_name": "Jack Huey",
        "timestamp": 1613063897
    },
    {
        "content": "<p>whereas if you remove the GAT <code>&lt;T as MyTrait&gt;::Item</code> <em>does</em></p>",
        "id": 226025733,
        "sender_full_name": "Jack Huey",
        "timestamp": 1613063915
    },
    {
        "content": "<p>There is a somewhat related issue of trying to normalize <code>&lt;T as MyTrait&lt;'a&gt;&gt;::Item</code></p>",
        "id": 226025773,
        "sender_full_name": "Jack Huey",
        "timestamp": 1613063941
    },
    {
        "content": "<p>but it seems like issue here is actually just easier to solve</p>",
        "id": 226025818,
        "sender_full_name": "Jack Huey",
        "timestamp": 1613063961
    },
    {
        "content": "<p>Since the impl is fully defined</p>",
        "id": 226025846,
        "sender_full_name": "Jack Huey",
        "timestamp": 1613063977
    },
    {
        "content": "<p>and not dependent on bound vars</p>",
        "id": 226025874,
        "sender_full_name": "Jack Huey",
        "timestamp": 1613063989
    },
    {
        "content": "<p>Specifically, it's not getting normalized <a href=\"https://github.com/rust-lang/rust/blob/cfba499271ba53190a1d3647ff8f7202ec9ed6f5/compiler/rustc_trait_selection/src/traits/project.rs#L368\">here</a></p>",
        "id": 226026011,
        "sender_full_name": "Jack Huey",
        "timestamp": 1613064032
    },
    {
        "content": "<p>But I think I'm probably missing some key details of how projections get normalized in rustc</p>",
        "id": 226026062,
        "sender_full_name": "Jack Huey",
        "timestamp": 1613064054
    },
    {
        "content": "<p>Is there any reason we can't normalize <code>&lt;T as MyTrait&gt;::Item</code> and then substitute the <code>'a</code>?</p>",
        "id": 226026455,
        "sender_full_name": "Jack Huey",
        "timestamp": 1613064202
    },
    {
        "content": "<p>Normalizing the projection might add obligations involving <code>'a</code></p>",
        "id": 226026855,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1613064350
    },
    {
        "content": "<p>hmm</p>",
        "id": 226027046,
        "sender_full_name": "Jack Huey",
        "timestamp": 1613064414
    }
]