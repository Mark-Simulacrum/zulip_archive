[
    {
        "content": "<p>Hello people!</p>\n<p>I've been looking at <a href=\"https://github.com/rust-lang/rfcs/issues/2035\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/issues/2035\">https://github.com/rust-lang/rfcs/issues/2035</a> and trying to work out the simplest bit: trait-object upcast (single inheritance). I'm not familiar with the compiler, so that's the first hurdle...</p>",
        "id": 135419540,
        "sender_full_name": "dhardy",
        "timestamp": 1539022177
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"131912\">@dhardy</span>. have you gotten anywhere with this yet?</p>",
        "id": 147612768,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542132061
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>. Unfortunately not; I spent a couple of hours trying to understand the relevant bits of the compiler but didn't get anywhere.</p>",
        "id": 147653013,
        "sender_full_name": "dhardy",
        "timestamp": 1542182780
    },
    {
        "content": "<p>Yeah, it's pretty complex. I believe it's been discussed however, so perhaps <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> (or <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>) have some ideas.</p>",
        "id": 147676475,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542209053
    },
    {
        "content": "<p>I'd like to help you on it if possbile.</p>",
        "id": 147676478,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542209058
    },
    {
        "content": "<p>Haven't looked into it properly yet though.</p>",
        "id": 147676484,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542209064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> if we could at least make \"simple cases\" work here it seems like it'd be a huge win. I was thinking about it this morning, maybe I can leave some notes somewhere</p>",
        "id": 147986701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654680
    },
    {
        "content": "<p>Yeah, that would be cool. Leave some notes in the RFC repo you created a while ago (I have access to it too)?</p>",
        "id": 147991125,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542657990
    },
    {
        "content": "<p>Simple upcast would be a huge improvement. No more need to have <code>as_any(&amp;self) -&gt; &amp;Any</code> methods (and <code>mut</code> versions), so it's useful for downcasting as well as up.</p>",
        "id": 148025067,
        "sender_full_name": "dhardy",
        "timestamp": 1542703471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131912\">@dhardy</span> with downcast... how so?</p>",
        "id": 148048980,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542729782
    },
    {
        "content": "<p>For <code>trait T: Any</code>, implementing the <code>&amp;T → &amp;Any</code> cast allows <code>obj.downcast_ref::&lt;X&gt;()</code> for <code>obj: &amp;T</code>. To do this now, we need to add methods like <code>fn as_any(&amp;self) -&gt; &amp;Any</code> to trait <code>T</code>, then call <code>obj.as_any().downcast_ref::&lt;X&gt;()</code>.</p>\n<p>But this is just a potential application, nothing to do with the implementation. Would love to have this feature.</p>",
        "id": 148054405,
        "sender_full_name": "dhardy",
        "timestamp": 1542734785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131912\">@dhardy</span> I don't fully get how <code>Any</code> works internally (some sort of compiler built-in to get the <code>TypeId</code>?) . I haven't encountered <code>as_any</code> methods before either. How would it look with upcasting?</p>",
        "id": 148059995,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542740898
    },
    {
        "content": "<p>Yes, it's just a shim around <code>TypeId</code> and reference casting.</p>",
        "id": 148060556,
        "sender_full_name": "dhardy",
        "timestamp": 1542741462
    },
    {
        "content": "<p>ah right.</p>",
        "id": 148061693,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542742420
    },
    {
        "content": "<p>so how is the information about the type stored at runtime?</p>",
        "id": 148061755,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542742449
    },
    {
        "content": "<p>You know you can click on the <code>[src]</code> link by <a href=\"https://doc.rust-lang.org/std/any/trait.Any.html#method.is\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/any/trait.Any.html#method.is\">implementations</a> right? Very convenient way to find out how things work.</p>",
        "id": 148061771,
        "sender_full_name": "dhardy",
        "timestamp": 1542742474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131912\">@dhardy</span> Err no. Haha. Since when has that existed? I feel like a fool now.</p>",
        "id": 148061790,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542742497
    },
    {
        "content": "<p>Don't know; I think it's fairly new.</p>",
        "id": 148061816,
        "sender_full_name": "dhardy",
        "timestamp": 1542742512
    },
    {
        "content": "<p>Regarding your other question: I don't know; it's the magic of <code>TypeId</code>... probably some data stored in the vtable.</p>",
        "id": 148061849,
        "sender_full_name": "dhardy",
        "timestamp": 1542742544
    },
    {
        "content": "<p>makes sense</p>",
        "id": 148061910,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542742577
    },
    {
        "content": "<p>It's an intrinsic so the API docs don't tell me anything: <a href=\"https://doc.rust-lang.org/std/intrinsics/fn.type_id.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/intrinsics/fn.type_id.html\">https://doc.rust-lang.org/std/intrinsics/fn.type_id.html</a></p>",
        "id": 148061923,
        "sender_full_name": "dhardy",
        "timestamp": 1542742589
    },
    {
        "content": "<p>indeed</p>",
        "id": 148061942,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542742617
    },
    {
        "content": "<p>The first step here is to be able to convert a <code>&amp;A</code> to <code>&amp;B</code> where <code>A: B</code>.</p>",
        "id": 148061974,
        "sender_full_name": "dhardy",
        "timestamp": 1542742678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131912\">@dhardy</span> Anyway, this is just a nice bonus, as you say. I'd really like to get upcasting implemented in the compiler (and after that multi-trait objects). Let's have a chat with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about it soon, I think.</p>",
        "id": 148062021,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542742690
    },
    {
        "content": "<p>yes</p>",
        "id": 148062023,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542742694
    },
    {
        "content": "<p>I don't know the best way of doing that — maybe the vtable pointer can simply be adjusted, or maybe a pointer can be added to the appropriate <code>&amp;A</code> vtable</p>",
        "id": 148062033,
        "sender_full_name": "dhardy",
        "timestamp": 1542742712
    },
    {
        "content": "<p>Something I'd love to see, but I really don't know where to start in the compiler and have several other things to work on, so don't really want to put in a lot of effort there myself</p>",
        "id": 148062083,
        "sender_full_name": "dhardy",
        "timestamp": 1542742777
    },
    {
        "content": "<p>Well, we should discuss it first. Then draft up an RFC, since that still needs to be written. Maybe you could just help with that side of things and leave implementation to someone else.</p>",
        "id": 148063954,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542744288
    },
    {
        "content": "<p>Can you point me to whichever part of the compiler defines the vtables currently (or the current specification)?</p>",
        "id": 148285423,
        "sender_full_name": "dhardy",
        "timestamp": 1543081530
    },
    {
        "content": "<p>How do you mean \"define\"? Codegen is in <code>src/librustc_codegen_llvm/abi.rs</code> (and possibly <code>callee.rs</code> and <code>meth.rs</code>?). they originate during trait selection of course... and there's a lot of MIR-related code that handles them.</p>",
        "id": 148294367,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543100236
    },
    {
        "content": "<p>I'm not an expert however.</p>",
        "id": 148294369,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543100240
    },
    {
        "content": "<p>I tried having a look at this yesterday but didn't get anywhere. Can you perhaps summarise what the current vtables for trait objects look like?</p>",
        "id": 150763994,
        "sender_full_name": "dhardy",
        "timestamp": 1543834775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131912\">@dhardy</span> I think <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> will do a better job than me at this. Will you be around in a few hours? There's a Traits WG meeting, so you can ask him then. :-)</p>",
        "id": 150782361,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543855212
    },
    {
        "content": "<p>Well, the question stands :-)</p>\n<p>The first part is, for traits <code>A: B</code>, what is the minimum we have to do to convert a trait object for <code>A</code> to one for <code>B</code>? Can the vtable for <code>A</code> be a valid vtable for <code>B</code>?</p>\n<p>The second bit is which mechanism do we use to do the conversion? I think <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> mentioned this could be a coercion.</p>\n<p>The third part is how does this generalise to multi-trait objects? I don't see why we couldn't start only supporting the easier cases (e.g. allowing <code>A+B</code> to reduce to <code>A</code> and <code>A+B+C</code> to <code>A+B</code> via compatible prefixes). There are some ideas for more general support in the issue linked at the top of this thread.</p>",
        "id": 150786625,
        "sender_full_name": "dhardy",
        "timestamp": 1543859144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131912\">@dhardy</span> Fair questions. I wish I could help more... sadly (for us) it seems like <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> has a busy week planned, but maybe he'll be able to give this a little time.</p>",
        "id": 150805596,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543875990
    },
    {
        "content": "<p>Also, what do you mean \"compatible prefixes\"?</p>",
        "id": 150805603,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543876000
    },
    {
        "content": "<p>As it happens, I also have a busy week. I mean, is the first part of the vtable for <code>A+B+C</code> also a valid vtable for <code>A+B</code>? Hopefully we can construct them that way, which makes many upcasts trivial.</p>",
        "id": 150838409,
        "sender_full_name": "dhardy",
        "timestamp": 1543920961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131912\">@dhardy</span> Well, in general you can't guarantee ordering, whatever that ordering is. Since you may want to go from <code>A + B + C</code> -&gt; <code>A + C</code> (unless you're considering that a \"non-simple\" case?)</p>",
        "id": 150860361,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543941789
    },
    {
        "content": "<p>it's akin to marginalisation (in statistics)</p>",
        "id": 150860377,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543941807
    },
    {
        "content": "<p>I suspect you can reuse such tables even in the general case.</p>",
        "id": 150860438,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543941849
    },
    {
        "content": "<p>I see... if we can't guarantee ordering of traits within vtables then we can't offer support for <code>A+B+C → A+B</code> without also supporting <code>A+B+C→A+C</code>. And I guess we can't guarantee ordering because we want <code>Box&lt;A+B&gt;</code> to be equivalent to <code>Box&lt;B+A&gt;</code>.</p>\n<p>Can we support <code>A+B+C → B</code> by simply adjusting the vtable pointer? I guess since we don't <em>have</em> multi-trait-objects yet this is more a design pointer for that.</p>\n<p>What I would like to know is exactly what information is included in vtables: obviously function pointers and presumably also some unique identifier to make <code>TypeId</code> work. Maybe also the data size?</p>\n<p>If the vtable for <code>A+B+C</code> is simply the three vtables concatenated together, repeating any common data like the typeid, then <code>A+B+C → A</code> conversions and some of the <code>A+B+C → A+B</code> type conversions (generalising) are simply pointer offsets, known statically. The other conversions need some other mechanism, e.g. a pointer to the <code>A+C</code> vtable or a statically-compiled map from each <code>A+B+C</code> vtable to the corresponding <code>A+C</code> vtable.</p>\n<p>By marginalisation are you talking about optimising the layout of <code>A+B+C</code> depending on usage? I guess that's possible but presumably would have to be a link-time optimisation.</p>",
        "id": 150862714,
        "sender_full_name": "dhardy",
        "timestamp": 1543944032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131912\">@dhardy</span> well, there's this annoying concept of a \"principal trait\" in trait objects right now, which gets in the way</p>",
        "id": 150863081,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944468
    },
    {
        "content": "<p>I'm not sure what to do about that.</p>",
        "id": 150863086,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944472
    },
    {
        "content": "<p>What is it?</p>",
        "id": 150863133,
        "sender_full_name": "dhardy",
        "timestamp": 1543944487
    },
    {
        "content": "<p>it's the \"main\" trait for a trait object</p>",
        "id": 150863142,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944497
    },
    {
        "content": "<p>the first one, basically</p>",
        "id": 150863145,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944501
    },
    {
        "content": "<p>it must be non-auto unless all the traits are auto</p>",
        "id": 150863154,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944511
    },
    {
        "content": "<p>Because right now secondary ones are only bounds like <code>Send</code> with no functions?</p>",
        "id": 150863158,
        "sender_full_name": "dhardy",
        "timestamp": 1543944521
    },
    {
        "content": "<p>yes, they don't alter the vtable whatsoever</p>",
        "id": 150863164,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944534
    },
    {
        "content": "<p>because they are empty</p>",
        "id": 150863167,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944537
    },
    {
        "content": "<p>all auto traits are, of course</p>",
        "id": 150863174,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944543
    },
    {
        "content": "<p>So what would e.g. <code>Debug+Send</code> → <code>Send</code> mean?</p>",
        "id": 150863192,
        "sender_full_name": "dhardy",
        "timestamp": 1543944574
    },
    {
        "content": "<p>Nothing I guess since you cannot do anything with a <code>Box&lt;Send&gt;</code></p>",
        "id": 150863204,
        "sender_full_name": "dhardy",
        "timestamp": 1543944587
    },
    {
        "content": "<p>note that <code>A + B + C</code> isn't a sum of the individual vtables, it's more akin to a product.</p>",
        "id": 150863208,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944595
    },
    {
        "content": "<p>or a \"joint distribution\", if we're to retain the statistical analogy</p>",
        "id": 150863277,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944619
    },
    {
        "content": "<p>well, <code>Box&lt;Send&gt;</code> is still permitted...</p>",
        "id": 150863339,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944698
    },
    {
        "content": "<p>The cast does not appear to be permitted currently: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=fec38804c19fd39354393f33aab7c200\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=fec38804c19fd39354393f33aab7c200\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=fec38804c19fd39354393f33aab7c200</a></p>",
        "id": 150863392,
        "sender_full_name": "dhardy",
        "timestamp": 1543944723
    },
    {
        "content": "<p>indeed, it's an upcast, which aren't permitted at all right now</p>",
        "id": 150863414,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944741
    },
    {
        "content": "<p>that would just mean not caring about the <code>Debug</code> \"column\" in the vtable</p>",
        "id": 150863420,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944745
    },
    {
        "content": "<p>Well, <code>&amp;(Debug+Send)</code> → <code>&amp;Debug</code> is already permitted</p>",
        "id": 150863448,
        "sender_full_name": "dhardy",
        "timestamp": 1543944775
    },
    {
        "content": "<p>sure, but I mean of objects themselves, not references.</p>",
        "id": 150863468,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944795
    },
    {
        "content": "<p>I guess it's just a special case of upcast which drops only auto traits</p>",
        "id": 150863469,
        "sender_full_name": "dhardy",
        "timestamp": 1543944795
    },
    {
        "content": "<p>A trait object is always reference</p>",
        "id": 150863488,
        "sender_full_name": "dhardy",
        "timestamp": 1543944822
    },
    {
        "content": "<p>not really</p>",
        "id": 150863494,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944829
    },
    {
        "content": "<p>it's a fat pointer, you mean?</p>",
        "id": 150863498,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944834
    },
    {
        "content": "<p>Oh, it can be a <code>Box</code></p>",
        "id": 150863517,
        "sender_full_name": "dhardy",
        "timestamp": 1543944843
    },
    {
        "content": "<p>that's just an owning reference</p>",
        "id": 150863545,
        "sender_full_name": "dhardy",
        "timestamp": 1543944847
    },
    {
        "content": "<p>But yes, always a fat pointer I think?</p>",
        "id": 150863552,
        "sender_full_name": "dhardy",
        "timestamp": 1543944861
    },
    {
        "content": "<p>yes. but when one says \"reference\", it evokes <code>&amp;</code>/<code>&amp; mut</code> in Rust :-)</p>",
        "id": 150863559,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944871
    },
    {
        "content": "<p>yes, always a fat pointer</p>",
        "id": 150863565,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944874
    },
    {
        "content": "<p>You remember the <code>@</code> references we used to have?</p>",
        "id": 150863579,
        "sender_full_name": "dhardy",
        "timestamp": 1543944893
    },
    {
        "content": "<p>only vaguely. I didn't properly take up Rust until 1.0.</p>",
        "id": 150863595,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944908
    },
    {
        "content": "<p>anyway, I think we could get away with just having a vtable with all potential columns included... e.g. we don't need a separate vtable for <code>A + B, </code>A + C<code>, </code>B + C<code> if we have </code>A + B + C`.</p>",
        "id": 150863603,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944916
    },
    {
        "content": "<p>Good thing we lost them I think</p>",
        "id": 150863609,
        "sender_full_name": "dhardy",
        "timestamp": 1543944920
    },
    {
        "content": "<p>yep, for sure</p>",
        "id": 150863625,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543944932
    },
    {
        "content": "<p>Do we not need separate vtables for e.g. <code>A+C</code>?</p>",
        "id": 150863641,
        "sender_full_name": "dhardy",
        "timestamp": 1543944950
    },
    {
        "content": "<p>How would that work?</p>",
        "id": 150863689,
        "sender_full_name": "dhardy",
        "timestamp": 1543944965
    },
    {
        "content": "<p>Very fat pointers (i.e. a separate poniter to each vtable) maybe?</p>",
        "id": 150863700,
        "sender_full_name": "dhardy",
        "timestamp": 1543944981
    },
    {
        "content": "<p>I think we can get away without them. That prevents an exponential explosion of vtables too.</p>",
        "id": 150864138,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945384
    },
    {
        "content": "<p>(in terms of number of tables)</p>",
        "id": 150864146,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945394
    },
    {
        "content": "<p>Do we really get an exponential explosion though? Obviously we need <code>A+B+C</code> <em>if this is used</em>, but I don't think we need to generate <code>A+C</code> unless it's actually used.</p>",
        "id": 150864267,
        "sender_full_name": "dhardy",
        "timestamp": 1543945480
    },
    {
        "content": "<p>Well, this might require generating vtables and conversions at link time, so may not be simple to avoid.</p>",
        "id": 150864320,
        "sender_full_name": "dhardy",
        "timestamp": 1543945542
    },
    {
        "content": "<p>Anyway, how do you propose to avoid them?</p>",
        "id": 150864370,
        "sender_full_name": "dhardy",
        "timestamp": 1543945565
    },
    {
        "content": "<p>we get an exponential explosion if they're all used</p>",
        "id": 150864533,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945748
    },
    {
        "content": "<p>That also requires the user to write a lot of code. So I don't see the problem.</p>",
        "id": 150864554,
        "sender_full_name": "dhardy",
        "timestamp": 1543945782
    },
    {
        "content": "<p>it's not necessarily</p>",
        "id": 150864563,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945791
    },
    {
        "content": "<p>just an observation</p>",
        "id": 150864564,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945793
    },
    {
        "content": "<p>and actually, I've been thinking about this wrong</p>",
        "id": 150864640,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945841
    },
    {
        "content": "<p>we do need to generate combintions</p>",
        "id": 150864647,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945846
    },
    {
        "content": "<p>so yeah, I don't think there's avoiding it without some really fancy lookup scheme</p>",
        "id": 150864658,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945858
    },
    {
        "content": "<p>which probably adds runtime overhead</p>",
        "id": 150864668,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945866
    },
    {
        "content": "<p>undesirable, of course</p>",
        "id": 150864672,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945870
    },
    {
        "content": "<p>I don't think it's hard actually.</p>",
        "id": 150864680,
        "sender_full_name": "dhardy",
        "timestamp": 1543945882
    },
    {
        "content": "<p>in theory, no</p>",
        "id": 150864688,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945898
    },
    {
        "content": "<p>in practice... may be some gotchas</p>",
        "id": 150864691,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945904
    },
    {
        "content": "<p>I'm not sure</p>",
        "id": 150864692,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945905
    },
    {
        "content": "<p>The compiler can represent <code>A+B+C+D</code> as a collection of traits, and not generate the vtables until link time</p>",
        "id": 150864693,
        "sender_full_name": "dhardy",
        "timestamp": 1543945907
    },
    {
        "content": "<p>That way it only needs to generate <code>A+B+D</code> vtables if used</p>",
        "id": 150864706,
        "sender_full_name": "dhardy",
        "timestamp": 1543945919
    },
    {
        "content": "<p>yes</p>",
        "id": 150864750,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945925
    },
    {
        "content": "<p>that makes sense to me</p>",
        "id": 150864753,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945929
    },
    {
        "content": "<p>If <code>A+B+C+D</code> objects are made, then obviously that vtable is needed</p>",
        "id": 150864761,
        "sender_full_name": "dhardy",
        "timestamp": 1543945939
    },
    {
        "content": "<p>I think you need to wait until link-time regardless, because of cross-crate scenarios</p>",
        "id": 150864766,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543945946
    },
    {
        "content": "<p>The compiler doesn't know yet whether a cast to <code>B+D</code> will be needed</p>",
        "id": 150864778,
        "sender_full_name": "dhardy",
        "timestamp": 1543945961
    },
    {
        "content": "<p>So what you do is wait until link time, then <em>if</em> a <code>A+B+C+D</code> → <code>B+D</code> cast is needed, generate a function taking the vtable for the former and returning the latter</p>",
        "id": 150864810,
        "sender_full_name": "dhardy",
        "timestamp": 1543946014
    },
    {
        "content": "<p>i.e. static table lookup</p>",
        "id": 150864815,
        "sender_full_name": "dhardy",
        "timestamp": 1543946019
    },
    {
        "content": "<p>Since the vtable for <code>A+B+C+D</code> is only created (for each object) at link-time, the <code>B+D</code> vtable and conversion can be created at the same time</p>",
        "id": 150864898,
        "sender_full_name": "dhardy",
        "timestamp": 1543946070
    },
    {
        "content": "<p>This is assuming each vtable is at a fixed address — I guess the address may not be known until the problem starts, so this might mean populating the conversion tables at the program start; less than ideal but not a real issue since we only have conversions for the types used at this point</p>",
        "id": 150865014,
        "sender_full_name": "dhardy",
        "timestamp": 1543946194
    },
    {
        "content": "<p>BTW I'd still like to know exactly what data we need in the vtable if you can find out?</p>",
        "id": 150865292,
        "sender_full_name": "dhardy",
        "timestamp": 1543946419
    },
    {
        "content": "<p>sure, let me speak to people</p>",
        "id": 150865531,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543946661
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/wheres-the-catch-with-box-read-write/6617\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/wheres-the-catch-with-box-read-write/6617\">https://internals.rust-lang.org/t/wheres-the-catch-with-box-read-write/6617</a></p>",
        "id": 150866120,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543947143
    },
    {
        "content": "<p>have you read that yet?</p>",
        "id": 150866122,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543947145
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, this is what I was talking about earlier. :-)</p>",
        "id": 151733434,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544735660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131912\">@dhardy</span> and I could definitely use your input/advice on some of the above.</p>",
        "id": 151733449,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544735673
    }
]