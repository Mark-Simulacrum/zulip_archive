[
    {
        "content": "<p>So I think the bug would actually show up in this situation:</p>\n<div class=\"codehilite\"><pre><span></span>// Send is coinductive:\nSend(X) :- Foo(X), Bar(X).\nFoo(X) :- Send(X)\n</pre></div>",
        "id": 165013396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557172503
    },
    {
        "content": "<p>If we were (say) solving <code>Send(u32)</code>, then we would go to solve <code>Foo(u32)</code> and conclude that -- since <code>Send(u32)</code> is on the stack -- <code>Foo(u32)</code> is true.</p>",
        "id": 165013431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557172529
    },
    {
        "content": "<p>But, in fact, we will later disprove <code>Send(u32)</code></p>",
        "id": 165013443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557172540
    },
    {
        "content": "<p>If we used a delayed literal instead, then the result of <code>Foo(u32)</code> would be <code>Send(u32) |</code> (i.e., with a delay), and we would ultimately reject it as false.</p>",
        "id": 165013522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557172572
    },
    {
        "content": "<p>So one thing i'm wondering here though -- can we solve this by always selecting \"inductive\" goals first?</p>",
        "id": 165018116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176136
    },
    {
        "content": "<p>I think I had convinced myself we cannot but now .. I'm wondering why</p>",
        "id": 165018133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176144
    },
    {
        "content": "<p>ah, well, of course</p>",
        "id": 165018248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176215
    },
    {
        "content": "<p>all the predicates could be coinductive</p>",
        "id": 165018263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176225
    }
]