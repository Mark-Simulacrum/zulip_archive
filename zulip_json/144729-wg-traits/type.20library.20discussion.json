[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> -- would folks want to use a bit of sync time in ~1 hour to talk about type library planning?</p>",
        "id": 215122690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604077372
    },
    {
        "content": "<p>I might be able to do later too, but not too much later. Depends a bit on how much snow comes down here :)</p>",
        "id": 215122730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604077388
    },
    {
        "content": "<p><span aria-label=\"snowstorm\" class=\"emoji emoji-1f328\" role=\"img\" title=\"snowstorm\">:snowstorm:</span></p>",
        "id": 215122736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604077391
    },
    {
        "content": "<p>Are we doing zoom?</p>",
        "id": 215125094,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604078497
    },
    {
        "content": "<p>I think the snow has stopped here</p>",
        "id": 215125113,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604078504
    },
    {
        "content": "<p>nm, I won't be there <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> will read it afterwards though</p>",
        "id": 215126709,
        "sender_full_name": "lcnr",
        "timestamp": 1604079228
    },
    {
        "content": "<p>Zoom sounds good, but chat only also works</p>",
        "id": 215130251,
        "sender_full_name": "detrumi",
        "timestamp": 1604081030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> around?</p>",
        "id": 215130357,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604081064
    },
    {
        "content": "<p>yep</p>",
        "id": 215130655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604081197
    },
    {
        "content": "<p>just wrapped up something</p>",
        "id": 215130673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604081205
    },
    {
        "content": "<p>let's do zoom I guess</p>",
        "id": 215130717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604081230
    },
    {
        "content": "<p>who wants to join?</p>",
        "id": 215130742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604081240
    },
    {
        "content": "<p>I'll privmsg you the link :)</p>",
        "id": 215130754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604081246
    },
    {
        "content": "<p>or I'll just make it in the calendar</p>",
        "id": 215130770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604081258
    },
    {
        "content": "<p><a href=\"https://hackmd.io/vSz1MfmBSDSx5NkowiIUfQ\">https://hackmd.io/vSz1MfmBSDSx5NkowiIUfQ</a></p>",
        "id": 215131071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604081389
    },
    {
        "content": "<p>I would have liked to join (just to listen), but I can’t right now</p>",
        "id": 215132317,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604081895
    },
    {
        "content": "<p>Out of curiosity, will there be some sort of written or video \"record\"?</p>",
        "id": 215132445,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604081962
    },
    {
        "content": "<p>we're recording it so it will be available later</p>",
        "id": 215132957,
        "sender_full_name": "detrumi",
        "timestamp": 1604082202
    },
    {
        "content": "<p>I created mentoring instructions for the TypeFolder in <a href=\"https://github.com/rust-lang/chalk/issues/642\">chalk#642</a></p>",
        "id": 215141546,
        "sender_full_name": "detrumi",
        "timestamp": 1604086813
    },
    {
        "content": "<p>Also <a href=\"https://github.com/rust-lang/chalk/issues/643\">chalk#643</a> for removing <code>TargetInterner</code></p>",
        "id": 215142883,
        "sender_full_name": "detrumi",
        "timestamp": 1604087575
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>!</p>",
        "id": 215142938,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604087609
    },
    {
        "content": "<blockquote>\n<p>TypeVisitor traits are a little different<br>\n       * adopt rustc's design with <code>ControlFlow::Break</code>/<code>ControlFlow::Continue</code></p>\n</blockquote>\n<p>Hm, what was this about?</p>",
        "id": 215145118,
        "sender_full_name": "detrumi",
        "timestamp": 1604088770
    },
    {
        "content": "<p>I don't see any use of <code>ControlFlow</code> around <code>TypeVisitor</code></p>",
        "id": 215145199,
        "sender_full_name": "detrumi",
        "timestamp": 1604088832
    },
    {
        "content": "<p>Ah, <a href=\"https://github.com/rust-lang/rust/issues/78182\">#78182</a> is not merged yet, that's why</p>",
        "id": 215145401,
        "sender_full_name": "detrumi",
        "timestamp": 1604088923
    },
    {
        "content": "<p>(The MCP was accepted just today)</p>",
        "id": 215146351,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604089526
    },
    {
        "content": "<blockquote>\n<p>adopt rustc’s design with ControlFlow::Break/ControlFlow::Continue</p>\n</blockquote>\n<p>Currently taking a look</p>",
        "id": 215159695,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604098288
    },
    {
        "content": "<p>Oh, actually I think that isn't possible right now, since <code>ControlFlow</code> is unstable, and I can't write a <code>ControlFlow</code> in chalk since that would require writing a <code>Try</code> implementation which is also unstable</p>",
        "id": 215161738,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604100171
    },
    {
        "content": "<p>We discussed this in the meeting: we're okay to just duplicate the type for now</p>",
        "id": 215168855,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604109393
    },
    {
        "content": "<p>(Opened <a href=\"https://github.com/rust-lang/chalk/issues/645\">chalk#645</a>)</p>",
        "id": 215196972,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604158833
    },
    {
        "content": "<p>That was quick</p>",
        "id": 215196977,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604158852
    },
    {
        "content": "<p>Hmm</p>",
        "id": 215197083,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604159034
    },
    {
        "content": "<p>I wonder if we could co-opt either Result or option here</p>",
        "id": 215197130,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604159055
    },
    {
        "content": "<p>(So either Result&lt;(), ()&gt; or Option&lt;()&gt;)</p>",
        "id": 215197147,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604159091
    },
    {
        "content": "<p>Then we can still use <code>?</code></p>",
        "id": 215197179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604159144
    },
    {
        "content": "<p>And when ControlFlow is stable, just replace</p>",
        "id": 215197213,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604159164
    },
    {
        "content": "<p><code>Option</code> would <em>maybe</em> seem counterintuitive to me</p>",
        "id": 215197430,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604159526
    },
    {
        "content": "<p>Because you'd need to use <code>None</code> to break and <code>Some(())</code> to continue</p>",
        "id": 215197436,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604159542
    },
    {
        "content": "<p>Right, which is why I think maybe Result is better</p>",
        "id": 215197592,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604159814
    },
    {
        "content": "<p>(Though I prefer ControlFlow, but wish it was stable)</p>",
        "id": 215197599,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604159830
    },
    {
        "content": "<p>Also, I think using <code>Result</code> means more refractoring to do when <code>ControlFlow</code> is stabilized (if you want to use it then)</p>",
        "id": 215197697,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604159975
    },
    {
        "content": "<p>Hmm</p>",
        "id": 215204379,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604168212
    },
    {
        "content": "<p>I guess I was mostly thinking about all the <code>try_break</code>s</p>",
        "id": 215204394,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604168239
    },
    {
        "content": "<p>Maybe there is something we can do around type aliases</p>",
        "id": 215204410,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604168255
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/chalk/issues/646\">chalk#646</a> which uses <code>type ControlFlow&lt;B, C = ()&gt; = Result&lt;C, B&gt;</code></p>",
        "id": 215213725,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604181266
    },
    {
        "content": "<p>This solution doesn't have as many downsides as I first thought.</p>",
        "id": 215213735,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604181317
    },
    {
        "content": "<p>Other idea, in the \"define a clone\" solution, maybe we could replace <code>try_break!</code> with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ControlFlow</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">err</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Continue</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ControlFlow</span>::<span class=\"n\">Break</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which then allows to do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">visit_with</span><span class=\"p\">(</span><span class=\"n\">visitor</span><span class=\"p\">).</span><span class=\"n\">err</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which gives the ergonomics of using <code>?</code> but still allows to write <code>ControlFlow::{CONTINUE,BREAK}</code>, and when <code>std::ops::ControlFlow</code> is stabilized I think we only have to remove those <code>.err()</code></p>",
        "id": 215213994,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604181715
    },
    {
        "content": "<p>Ooh I think I like that idea</p>",
        "id": 215218324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604189771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> can you update your first PR for this?</p>",
        "id": 215671233,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604552069
    },
    {
        "content": "<p>Sure</p>",
        "id": 215674842,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604557366
    },
    {
        "content": "<p>Actually, will that work? Can <code>Try</code> convert from a <code>Result</code> back to a <code>ControlFlow</code>?</p>",
        "id": 215675838,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604558858
    },
    {
        "content": "<p>Yeah, it doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n</code></pre></div>",
        "id": 215683514,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604565968
    },
    {
        "content": "<p>Maybe if you impl <code>Into&lt;ControlFlow&gt;</code> for <code>Result</code></p>",
        "id": 215725059,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604589275
    },
    {
        "content": "<p>Since <code>?</code> implicity calls <code>.into()</code></p>",
        "id": 215725082,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604589286
    },
    {
        "content": "<p>I think currently <code>?</code> calls <code>From::from</code>, though the original <code>try</code> RFC planned to use <code>into</code> (<a href=\"https://github.com/rust-lang/rust/issues/38751\">#38751</a>)</p>",
        "id": 215740713,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1604595189
    },
    {
        "content": "<p>okay, so we could impl <code>From</code></p>",
        "id": 215741184,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604595390
    },
    {
        "content": "<p>IIUC, you still need to implement <code>Try</code>:</p>\n<blockquote>\n<p>If an <code>Err(e)</code> result is returned, the value <code>e</code> will be \"wrapped\" in the return type of the enclosing scope (which must itself implement <code>Try</code>). Specifically, the value <code>X::from_error(From::from(e))</code> is returned, where <code>X</code> is the return type of the enclosing function.</p>\n</blockquote>",
        "id": 215743723,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604596383
    },
    {
        "content": "<p>bleh</p>",
        "id": 215744098,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604596557
    },
    {
        "content": "<p>Okay, so I guess we choose between duplicating <code>ControlFlow</code> and adding a temporary <code>try_break!()</code> or we use <code>type ControlFlow = Result&lt;(), ()&gt;</code> and we have to use <code>ControlFlow::Ok(())</code> or <code>ControlFlow::Err(())</code></p>",
        "id": 215744333,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604596668
    },
    {
        "content": "<p>If only you could do <code>type CONTINUE = Result::Ok(())</code></p>",
        "id": 215744533,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604596755
    },
    {
        "content": "<p>But anyways, I think we can stick with the <code>try_break</code> version</p>",
        "id": 215744614,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604596796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> think you can rebase? Then I'll take a quick look and r+</p>",
        "id": 215744678,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604596809
    },
    {
        "content": "<p>Thought I had rebased already, probably forgot to push</p>",
        "id": 215744716,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604596832
    },
    {
        "content": "<p>Oh, we <em>could</em> do <code>const CONTINUE: Result&lt;(), ()&gt; = Result::Ok(());</code></p>",
        "id": 215744898,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604596921
    },
    {
        "content": "<p>and <code>const BREAK: Result&lt;(), ()&gt; = Result::Err(());</code></p>",
        "id": 215745071,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604596973
    },
    {
        "content": "<p>I still think the <code>try_break</code> version is probably just better since there are less surprises or \"tricks\" around it</p>",
        "id": 215745346,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604597082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> you did rebase, whoops</p>",
        "id": 215745414,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604597109
    },
    {
        "content": "<p>Do you also want to do a followup PR for the break value when the MCP/implementation gets accepted?</p>",
        "id": 215745593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604597182
    },
    {
        "content": "<p>(for rustc)</p>",
        "id": 215745601,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604597185
    },
    {
        "content": "<p>Gladly!</p>",
        "id": 215746190,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604597416
    },
    {
        "content": "<p>I do think it's interesting that <code>ControlFlow</code> is essentially a non-trait version of <code>VisitResult</code></p>",
        "id": 215746366,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604597486
    },
    {
        "content": "<blockquote>\n<ul>\n<li>easy first PR: <ul>\n<li>make library, extract some leaf types</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>I could maybe help here? Where should the types be extracted from, <code>rustc</code>, <code>chalk</code>? Both? Should there be the <code>Interner</code> trait from <code>chalk</code> already?</p>",
        "id": 215880049,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604684739
    },
    {
        "content": "<p>From rustc, particularly rustc_middle</p>",
        "id": 215882980,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604686211
    },
    {
        "content": "<p>The idea is to try to extract all the bits from rustc into a separate crate, iterate until it's like 1:1 equal to chalk-ir, then essentially just make them the same</p>",
        "id": 215883063,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604686263
    },
    {
        "content": "<p>Got it, thanks!</p>",
        "id": 215883100,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1604686286
    },
    {
        "content": "<p>I imagine to start splitting things out, you'll probably need to start with an <code>Interner</code>-like trait, so you can be generic over things like <code>DefId</code></p>",
        "id": 215883233,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604686364
    },
    {
        "content": "<p>I've been playing around a bit with this, and to the most difficult problem when trying to extract some struct or type from <code>rustc_middle</code> is methods (and <code>impl</code> in general). Often methods depend on types that are hard to extract because <code>rustc_middle</code> is such an entangled web of dependencies.</p>\n<p>Even simple types like <code>Binder</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Binder</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Can't be extracted because of e.g. methods that depend on <code>TyCtxt</code> or because it takes types like <code>Ty</code> as a generic parameter, and you can't define <code>impl</code>s for <code>Binder</code> outside of the crate it's defined in.</p>",
        "id": 217057680,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605644814
    },
    {
        "content": "<p>You can probably create extension traits for these cases</p>",
        "id": 217059305,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605645588
    },
    {
        "content": "<p>or abstract out the needed functionality from <code>TyCtxt</code> into a trait which would also get split out (like the <code>Interner</code> trait)</p>",
        "id": 217059401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605645621
    },
    {
        "content": "<p>I feel like <em>most</em> things you'll need <code>TyCtxt</code> for will be interning, which we want to abstract out anyways</p>",
        "id": 217059680,
        "sender_full_name": "Jack Huey",
        "timestamp": 1605645749
    },
    {
        "content": "<p>What is the next step for <a href=\"https://github.com/rust-lang/rust/issues/79169\">#79169</a>? Shall I open an MCP for the refractor?</p>",
        "id": 219670249,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607725669
    },
    {
        "content": "<p>I think it's just waiting for a <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> review</p>",
        "id": 219670724,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607726037
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> has time and wants to work-steal</p>",
        "id": 219670792,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607726064
    },
    {
        "content": "<p>Got it. I'm preparing another PR which will in particular create and refractor <code>rustc_type_ir::{FloatTy,IntTy,UintTy}</code></p>",
        "id": 219671125,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607726335
    },
    {
        "content": "<p>Yeah, just feel free to stack them. (Or even, just do two, this one plus another that you add to)</p>",
        "id": 219671239,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607726405
    },
    {
        "content": "<p>Not sure when Niko will have time to review</p>",
        "id": 219671255,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607726419
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/79951\">#79951</a> :)</p>",
        "id": 219677431,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607731836
    },
    {
        "content": "<p>r+'d</p>",
        "id": 219703926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607772143
    },
    {
        "content": "<p>Thanks! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 219705988,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607775401
    },
    {
        "content": "<p>I don't really know how to handle <code>#[derive(TyEncodable, TyDecodable)]</code></p>",
        "id": 219906490,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607982384
    },
    {
        "content": "<p>Yeah...I ran into those when trying to do <code>Binder&lt;'tcx, T&gt;</code> -&gt; <code>Binder&lt;T: HasInterner&gt;</code></p>",
        "id": 219906810,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607982554
    },
    {
        "content": "<p>They generate things like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span>: <span class=\"nc\">TyEncoder</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/*...*/</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Where <code>Encodable</code> is defined in <code>rustc_serialize</code> and <code>TyEncoder</code> is defined in <code>rustc_middle</code>, so I don't think I can implement that anywhere without hitting the orphan rules</p>",
        "id": 219906822,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607982563
    },
    {
        "content": "<p>Sounds like the solution is to make <code>TyEncoder</code> be a part of the type library</p>",
        "id": 219906940,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607982618
    },
    {
        "content": "<p>but then <em>everything</em> has to go in one swath</p>",
        "id": 219906998,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607982654
    },
    {
        "content": "<p>Can we? It depends on <code>TyCtxt</code> in its current form</p>",
        "id": 219907003,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607982657
    },
    {
        "content": "<p>What about <code>TyCtxt</code>? I imagine all the interning bits</p>",
        "id": 219907062,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607982697
    },
    {
        "content": "<p>It requires a <code>pub fn tcx(&amp;self) -&gt; TyCtxt&lt;'tcx&gt;</code> method</p>",
        "id": 219907139,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607982724
    },
    {
        "content": "<p>I wonder if it might be worth doing something like a <code>tcx</code> -&gt; <code>tcx.interner()</code> pass in place for now</p>",
        "id": 219907141,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607982726
    },
    {
        "content": "<p>Where <code>interner()</code> would return a type containing functions like <code>mk_...</code> and <code>intern_...</code></p>",
        "id": 219907176,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607982754
    },
    {
        "content": "<p>Now to know what that tcx it is used for I'd have to dive into the code</p>",
        "id": 219907202,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607982764
    },
    {
        "content": "<p>Which right now are <em>on</em> tcx itself</p>",
        "id": 219907225,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607982777
    },
    {
        "content": "<p>One part of the problem is that <em>a lot</em> gets added to tcx. Some through explict impls, some through macros, and some through queries.</p>",
        "id": 219907297,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607982821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/219907225\">said</a>:</p>\n<blockquote>\n<p>Which right now are <em>on</em> tcx itself</p>\n</blockquote>\n<p>But it's delegated to <code>CtxtInterners</code>, maybe this can help?</p>",
        "id": 219907388,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607982858
    },
    {
        "content": "<p>If <code>TyEncoder</code> only needs needs the interning bits, then that decreases the congnitive overhead quite a bit</p>",
        "id": 219907437,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607982889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">Léo Lanteri Thauvin</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/219907388\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/219907225\">said</a>:</p>\n<blockquote>\n<p>Which right now are <em>on</em> tcx itself</p>\n</blockquote>\n<p>But it's delegated to <code>CtxtInterners</code>, maybe this can help?</p>\n</blockquote>\n<p>maybe</p>",
        "id": 219907452,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607982899
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 219907502,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607982924
    },
    {
        "content": "<p>Also there's <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/codec/trait.RefDecodable.html\"><code>RefDecodable</code></a> which is presented as</p>\n<blockquote>\n<p>a separate trait from <code>Decodable</code> so that we can implement it for upstream types, such as <code>FxHashSet</code></p>\n</blockquote>\n<p>Though I'm not sure it can fit in this puzzle <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 219909196,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607983751
    },
    {
        "content": "<p>Bleh. I think <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> did the refactor around this. Maybe they have thoughts. (Though aren't around currently)</p>",
        "id": 219909819,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607984015
    },
    {
        "content": "<p>Also, at first glance, it looks like most of the uses of <code>TyCtxt</code> in <code>TyEncoder</code>/<code>TyDecoder</code> are indeed accesses to the <code>arena</code> and <code>mk_*</code> methods, but not all</p>",
        "id": 219909973,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607984085
    },
    {
        "content": "<p>Examples:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span>: <span class=\"nc\">TyDecoder</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Decodable</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">SymbolName</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">decoder</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">SymbolName</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">decoder</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">decoder</span><span class=\"p\">.</span><span class=\"n\">read_str</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span>: <span class=\"nc\">TyDecoder</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">RefDecodable</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">AdtDef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">decoder</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">tcx</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">DefId</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Decodable</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">decoder</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">decoder</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">adt_def</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219910060,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607984129
    },
    {
        "content": "<p>And it looks like it isn't needed in <code>TyEncoder</code>?</p>",
        "id": 219910109,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607984156
    },
    {
        "content": "<p>What happens if I remove it? <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 219910173,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607984169
    },
    {
        "content": "<p>It does compile</p>",
        "id": 219911690,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607985025
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/80039\">#80039</a> just in case</p>",
        "id": 219914112,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607986442
    },
    {
        "content": "<p>Makes sense to me we don't need it in the encoder</p>",
        "id": 219914992,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607986990
    },
    {
        "content": "<p><code>RefDecodable</code> is used by <code>derive(TyDecable)</code> to decode references.</p>",
        "id": 220047090,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1608068733
    },
    {
        "content": "<p>Moving things incrementally here is pretty hard. I'll try to spend some time thinking about it.</p>",
        "id": 220047230,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1608068806
    },
    {
        "content": "<p>Just wanted to put this here for tomorrow: <code>BoundRegionKind</code> is a good test case for a type we would want to move to <code>rustc_type_ir</code>; it has <code>Debug</code>, <code>HashStable</code>, <code>TyEncoder</code>/<code>TyDecoder</code> derives and uses a <code>DefId</code> (and <code>Symbol</code>, but that's basically like <code>DefId</code>)</p>",
        "id": 232651963,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617219405
    },
    {
        "content": "<p>So, imagining I have this in <code>rustc_type_ir</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub trait Interner {\n    type DefId;\n    type Symbol;\n}\n\n#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Copy)]\npub enum BoundRegionKind&lt;I: Interner&gt; {\n    BrAnon(u32),\n    BrNamed(I::DefId, I::Symbol),\n    BrEnv,\n}\n</code></pre></div>",
        "id": 232652747,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617219711
    },
    {
        "content": "<p>And this in <code>rustc_middle</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;tcx&gt; rustc_type_ir::Interner for TyCtxt&lt;&#39;tcx&gt; {\n    type DefId = DefId;\n    type Symbol = Symbol;\n}\n</code></pre></div>",
        "id": 232652831,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617219728
    },
    {
        "content": "<p>I thought I could do something like</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;CTX&gt; crate::ty::HashStable&lt;CTX&gt; for rustc_type_ir::BoundRegionKind&lt;TyCtxt&lt;&#39;tcx&gt;&gt; {\n  ...\n}\n</code></pre></div>\n<p>in <code>rustc_middle</code>, but I get <code>type parameter `CTX` must be used as the type parameter for some local type</code></p>",
        "id": 232652985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617219789
    },
    {
        "content": "<p>Similar with</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;tcx, CTX, E: TyEncoder&lt;&#39;tcx&gt;&gt; Encodable&lt;E&gt; for rustc_type_ir::BoundRegionKind&lt;TyCtxt&lt;&#39;tcx&gt;&gt; {\n  ..\n}\n</code></pre></div>",
        "id": 232653195,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617219869
    },
    {
        "content": "<p>Fun. I ran into a different but similar error when trying to do this:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;tcx, T: ArenaAllocatable&lt;&#39;tcx&gt;&gt; AllocateIn&lt;TyCtxt&lt;&#39;tcx&gt;&gt; for T {\n             //     ^ Error: type parameter `T` must be covered by another type when it appears before the first local type (`context::TyCtxt&lt;&#39;tcx&gt;`)\n</code></pre></div>",
        "id": 232653393,
        "sender_full_name": "detrumi",
        "timestamp": 1617219943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> Does the <code>HashStable</code> impl need to be in rustc_middle? There's already some <code>HashStable</code> impls in rustc_type_ir</p>",
        "id": 232654150,
        "sender_full_name": "detrumi",
        "timestamp": 1617220205
    },
    {
        "content": "<p>Not necessarily, no</p>",
        "id": 232654185,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220224
    },
    {
        "content": "<p>But</p>",
        "id": 232654266,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220247
    },
    {
        "content": "<p>Then you have to have <code>type DefId: HashStable&lt;CTX&gt;;</code> in <code>Interner</code></p>",
        "id": 232654539,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220351
    },
    {
        "content": "<p>So you get a <code>CTX</code> param on <code>Interner</code></p>",
        "id": 232654586,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220373
    },
    {
        "content": "<p>I'm curious if a <code>type DefId&lt;CTX&gt;: HashStable&lt;CTX&gt;;</code> would help but idk</p>",
        "id": 232654793,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220454
    },
    {
        "content": "<p>you would still have to have a <code>CTX</code> param on <code>BoundRegionKind</code></p>",
        "id": 232654859,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220482
    },
    {
        "content": "<p>Not the first time I wish I could do that for the interner <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 232654893,
        "sender_full_name": "detrumi",
        "timestamp": 1617220495
    },
    {
        "content": "<p>okay yeah I see your point</p>",
        "id": 232654963,
        "sender_full_name": "detrumi",
        "timestamp": 1617220525
    },
    {
        "content": "<p>wasn't there a workaround for some other derive elsewhere?</p>",
        "id": 232655106,
        "sender_full_name": "detrumi",
        "timestamp": 1617220573
    },
    {
        "content": "<p>Which derive</p>",
        "id": 232655165,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220601
    },
    {
        "content": "<p>can't find it...</p>",
        "id": 232655204,
        "sender_full_name": "detrumi",
        "timestamp": 1617220619
    },
    {
        "content": "<p>I'm a bit surprised that <code>impl&lt;CTX&gt; crate::ty::HashStable&lt;CTX&gt; for rustc_type_ir::BoundRegionKind&lt;TyCtxt&lt;'tcx&gt;&gt;</code> isn't legal</p>",
        "id": 232655262,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220645
    },
    {
        "content": "<p>Since <code>TyCtxt&lt;'tcx&gt;</code> is local</p>",
        "id": 232655323,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220673
    },
    {
        "content": "<p>Wait, the workaround was for <code>HashStable</code>: <code>HashStable_Generic</code></p>",
        "id": 232655392,
        "sender_full_name": "detrumi",
        "timestamp": 1617220696
    },
    {
        "content": "<p>I think that just impls <code>HashStable&lt;CTX&gt;</code> instead of some <code>HashStable&lt;X&gt;</code></p>",
        "id": 232655482,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220744
    },
    {
        "content": "<p>Oh there was also <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_serialize/trait.Encodable.html\">Encodable</a> that has some workarounds for whether crates depend on rustc_middle or not</p>",
        "id": 232655610,
        "sender_full_name": "detrumi",
        "timestamp": 1617220798
    },
    {
        "content": "<p>Specifically, that <code>X</code> is <code>rustc_middle::ich::StableHashingContext</code></p>",
        "id": 232655616,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220801
    },
    {
        "content": "<p>That might have been <code>RefEncodable</code></p>",
        "id": 232655692,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220817
    },
    {
        "content": "<p>(maybe)</p>",
        "id": 232655769,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220842
    },
    {
        "content": "<p>err, I only see <code>RefDecodable</code></p>",
        "id": 232655818,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220858
    },
    {
        "content": "<p><code>RefEncodable</code> <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/codec/trait.RefDecodable.html\">mentions</a> it being a separate trait for upstream types</p>",
        "id": 232655856,
        "sender_full_name": "detrumi",
        "timestamp": 1617220871
    },
    {
        "content": "<p>The normal trait is <code>Decodable</code></p>",
        "id": 232655891,
        "sender_full_name": "detrumi",
        "timestamp": 1617220889
    },
    {
        "content": "<p>I only see that implemented for things like <code>&amp;'tcx List&lt;...&gt;</code></p>",
        "id": 232656134,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617220975
    },
    {
        "content": "<p>The docs mention a lot more impls</p>",
        "id": 232656339,
        "sender_full_name": "detrumi",
        "timestamp": 1617221042
    },
    {
        "content": "<p>The only impl I see that isn't a slice or an interned type is on <code>FxHashSet&lt;LocalDefId&gt;</code></p>",
        "id": 232656729,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617221185
    },
    {
        "content": "<p>And <code>Span</code>, but yeah that's mostly it</p>",
        "id": 232656818,
        "sender_full_name": "detrumi",
        "timestamp": 1617221227
    },
    {
        "content": "<p>(hidden inside a macro call <code>arena_types!(impl_arena_allocatable_decoders, [], 'tcx)</code></p>",
        "id": 232656874,
        "sender_full_name": "detrumi",
        "timestamp": 1617221260
    },
    {
        "content": "<p><code>Encodable</code> is implemented on <code>Span</code> <em>in</em> <code>rustc_span</code></p>",
        "id": 232657172,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617221396
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_span/lib.rs.html#745-753\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_span/lib.rs.html#745-753</a></p>",
        "id": 232657238,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617221410
    },
    {
        "content": "<p>Like I said, I'm not exactly sure why <code>impl&lt;CTX&gt; crate::ty::HashStable&lt;CTX&gt; for rustc_type_ir::BoundRegionKind&lt;TyCtxt&lt;'tcx&gt;&gt;</code> shouldn't be okay. I guess it is because you might want have</p>\n<div class=\"codehilite\"><pre><span></span><code>// another crate\nstruct Foo {}\nimpl crate::ty::HashStable&lt;Foo&gt; for rustc_type_ir::BoundRegionKind&lt;TyCtxt&lt;&#39;tcx&gt;&gt;\n</code></pre></div>",
        "id": 232657681,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617221622
    },
    {
        "content": "<p>But that feels wrong to me: since now <code>rustc_type_ir::BoundRegionKind&lt;TyCtxt&lt;'tcx&gt;&gt;</code> is all foreign</p>",
        "id": 232657765,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617221650
    },
    {
        "content": "<p>I guess, you could write</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;T, U&gt; crate::ty::HashStable&lt;T&gt; for rustc_type_ir::BoundRegionKind&lt;U&gt;\n</code></pre></div>",
        "id": 232657997,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617221758
    },
    {
        "content": "<p>in <code>rustc_type_ir</code></p>",
        "id": 232658097,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617221789
    },
    {
        "content": "<p>Sounds somewhat like a <code>fundamental</code> related problem</p>",
        "id": 232658245,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617221860
    },
    {
        "content": "<p>yeah, that's precisely it :/</p>",
        "id": 232658484,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617221977
    },
    {
        "content": "<p>I bet if we tried to impl <code>Encodable</code> for some specific <code>TyEncoder</code>, this would be fine</p>",
        "id": 232659486,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617222389
    },
    {
        "content": "<p>maybe. Idk</p>",
        "id": 232659573,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617222425
    },
    {
        "content": "<p>solution: make all types in <code>rustc_type_ir</code> <code>fundamental</code></p>",
        "id": 232660264,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617222691
    },
    {
        "content": "<p>I didn't really follow this :)</p>",
        "id": 232752833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282406
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 232752835,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617282407
    },
    {
        "content": "<p>should I read it?</p>",
        "id": 232752840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282409
    },
    {
        "content": "<p>or is there a tl;dr</p>",
        "id": 232752849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282415
    },
    {
        "content": "<p>what I had hoped to do was to continue sketching the thing we are shooting for</p>",
        "id": 232752866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282423
    },
    {
        "content": "<p>Probably just reread from yesterday</p>",
        "id": 232752874,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617282427
    },
    {
        "content": "<p>There's not that much but it's important</p>",
        "id": 232752912,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617282440
    },
    {
        "content": "<p>I've also got a few questions regarding the <code>AllocateIn</code> trait idea, but that might be too specific</p>",
        "id": 232753092,
        "sender_full_name": "detrumi",
        "timestamp": 1617282504
    },
    {
        "content": "<p>Yes, so, there are the kinds of coherence issues I was afraid of</p>",
        "id": 232753250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282585
    },
    {
        "content": "<p>Pain in the neck :/</p>",
        "id": 232753260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282590
    },
    {
        "content": "<p>Yeah</p>",
        "id": 232753284,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617282602
    },
    {
        "content": "<p>I don't want to make everything fundamental :)</p>",
        "id": 232753298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282603
    },
    {
        "content": "<p>lol</p>",
        "id": 232753351,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617282619
    },
    {
        "content": "<p>where's the hackmd we were looking at?</p>",
        "id": 232753361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282621
    },
    {
        "content": "<p><a href=\"https://hackmd.io/K8cPSWn3So2GlPPvPuktAQ\">https://hackmd.io/K8cPSWn3So2GlPPvPuktAQ</a></p>",
        "id": 232753393,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617282634
    },
    {
        "content": "<p>ok</p>",
        "id": 232753546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282705
    },
    {
        "content": "<p>so let's add some of this to that?</p>",
        "id": 232753553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282708
    },
    {
        "content": "<p>first question</p>",
        "id": 232753758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282788
    },
    {
        "content": "<p>why does <code>HashStable</code> live in <code>rustc_middle</code>?</p>",
        "id": 232753771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282796
    },
    {
        "content": "<p>is that the right place for it?</p>",
        "id": 232753785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282799
    },
    {
        "content": "<p>The impl?</p>",
        "id": 232753800,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617282808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/232753553\">said</a>:</p>\n<blockquote>\n<p>so let's add some of this to that?</p>\n</blockquote>\n<p>done</p>",
        "id": 232753804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/232753771\">said</a>:</p>\n<blockquote>\n<p>why does <code>HashStable</code> live in <code>rustc_middle</code>?</p>\n</blockquote>\n<p>the trait</p>",
        "id": 232753816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282816
    },
    {
        "content": "<p><code>HashStable</code> itself is in <code>rustc_data_structures</code></p>",
        "id": 232753826,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617282821
    },
    {
        "content": "<p>ah, ok, the impl was misleading</p>",
        "id": 232753841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282831
    },
    {
        "content": "<p>Sorry :) It's reexported through <code>rustc_middle</code></p>",
        "id": 232753913,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617282854
    },
    {
        "content": "<p>ok, next question: why does the impl live in <code>rustc_middle</code> :)</p>",
        "id": 232753944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282869
    },
    {
        "content": "<p>because hash-stable isn't really something most people care about, I guess?</p>",
        "id": 232753963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282878
    },
    {
        "content": "<p>I kind of hate re-exports :)</p>",
        "id": 232753995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282897
    },
    {
        "content": "<p>Well, I think we want it to live in <code>rustc_middle</code></p>",
        "id": 232754009,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617282904
    },
    {
        "content": "<p>say why :)</p>",
        "id": 232754024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282910
    },
    {
        "content": "<p>Well, do we need it in <code>rustc_type_ir</code>?</p>",
        "id": 232754059,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617282928
    },
    {
        "content": "<p>(I can believe it, just want to be sure I understand)</p>",
        "id": 232754065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282931
    },
    {
        "content": "<p>I don't know :)</p>",
        "id": 232754089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282942
    },
    {
        "content": "<p>I'm trying to come up with a good rule of what should be where</p>",
        "id": 232754109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282948
    },
    {
        "content": "<p>We really only care about <code>HashStable</code> for <code>StableHashingContext</code></p>",
        "id": 232754120,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617282955
    },
    {
        "content": "<p>so I wanted to drive that through examples</p>",
        "id": 232754126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617282959
    },
    {
        "content": "<p>if coherence wasn't a thing, I don't think there would be a reason for it to be in <code>rustc_type_ir</code></p>",
        "id": 232754182,
        "sender_full_name": "detrumi",
        "timestamp": 1617282972
    },
    {
        "content": "<p>because only rustc wants it</p>",
        "id": 232754252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283011
    },
    {
        "content": "<p>and not (e.g.) rust-analyzer</p>",
        "id": 232754258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283016
    },
    {
        "content": "<p>?</p>",
        "id": 232754262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283018
    },
    {
        "content": "<p>correct</p>",
        "id": 232754273,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283024
    },
    {
        "content": "<p>it's for incremental compilation in rustc, so RA shouldn't need it</p>",
        "id": 232754318,
        "sender_full_name": "detrumi",
        "timestamp": 1617283052
    },
    {
        "content": "<p>otoh</p>",
        "id": 232754436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283105
    },
    {
        "content": "<p>it's not <em>harmful</em> exactly</p>",
        "id": 232754457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283112
    },
    {
        "content": "<p>I think the <code>HashStable</code> impl is easy: We can easily change it from <code>HashStable&lt;CTX&gt;</code> to <code>HashStable&lt;StableHashingContext&gt;</code> and it will work fine</p>",
        "id": 232754467,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283116
    },
    {
        "content": "<p>is there a reason it <em>can't</em> live in <code>rustc_type_ir</code>?</p>",
        "id": 232754487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283128
    },
    {
        "content": "<p>(for example, behind a feature)</p>",
        "id": 232754495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283131
    },
    {
        "content": "<p>But it's also something we might want to depend on anyways (<code>rustc_data_structures</code>)</p>",
        "id": 232754538,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/232754467\">said</a>:</p>\n<blockquote>\n<p>I think the <code>HashStable</code> impl is easy: We can easily change it from <code>HashStable&lt;CTX&gt;</code> to <code>HashStable&lt;StableHashingContext&gt;</code> and it will work fine</p>\n</blockquote>\n<p>the only time i've had trouble with this</p>",
        "id": 232754602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283184
    },
    {
        "content": "<p>well, do we have existing impls that are hard-coded to <code>StableHashingContext</code>?</p>",
        "id": 232754631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283198
    },
    {
        "content": "<p>I've had troubles with that pattern sometimes trying to compose derive impls with hand-written ones</p>",
        "id": 232754681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283212
    },
    {
        "content": "<p>in particular, if you change <code>BoundRegionKind</code>, you'll have to change a bunch of other impls -- anything that contains a <code>BoundRegionKind</code></p>",
        "id": 232754722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283227
    },
    {
        "content": "<p>I think all the <code>HashStable</code> derives use <code>StableHashingContext</code></p>",
        "id": 232754762,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283241
    },
    {
        "content": "<p>But <code>HashStable_Generic</code> uses <code>CTX</code></p>",
        "id": 232754790,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/232754790\">said</a>:</p>\n<blockquote>\n<p>But <code>HashStable_Generic</code> uses <code>CTX</code></p>\n</blockquote>\n<p>what is that?</p>",
        "id": 232754819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283264
    },
    {
        "content": "<p>just a different derive</p>",
        "id": 232754844,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283272
    },
    {
        "content": "<p>(Side note: I kind of want to extend the language so that coherence applies at the workspace level)</p>",
        "id": 232754853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283275
    },
    {
        "content": "<p>actually I <em>really</em> want that</p>",
        "id": 232754862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283280
    },
    {
        "content": "<p>That would be nice</p>",
        "id": 232754888,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283298
    },
    {
        "content": "<p>though it has some issues</p>",
        "id": 232754890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283300
    },
    {
        "content": "<p>but it would obviously be nice and would solve all these sorts of annoying problems</p>",
        "id": 232754905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283308
    },
    {
        "content": "<p>Would that require <code>pub(crate)</code> visibility, or can that be done automatically?</p>",
        "id": 232754911,
        "sender_full_name": "detrumi",
        "timestamp": 1617283312
    },
    {
        "content": "<p>anyway let's not worry about <em>that</em> for now :)</p>",
        "id": 232754914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283314
    },
    {
        "content": "<p>I kind of wish adding a blanket impl was backwards-incompatible</p>",
        "id": 232754989,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283332
    },
    {
        "content": "<p>back to the task at hand :)</p>",
        "id": 232755038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283355
    },
    {
        "content": "<p>yes</p>",
        "id": 232755045,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283360
    },
    {
        "content": "<p>ok, so <code>HashSTable</code> is maybe not a problem</p>",
        "id": 232755049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283364
    },
    {
        "content": "<p>no</p>",
        "id": 232755061,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283368
    },
    {
        "content": "<p>are there other traits that are?</p>",
        "id": 232755062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283368
    },
    {
        "content": "<p>yes</p>",
        "id": 232755066,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283371
    },
    {
        "content": "<p>there seem to be two solutions for <code>HashStable</code></p>",
        "id": 232755075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283377
    },
    {
        "content": "<p><code>Encodable</code>/<code>Decodable</code></p>",
        "id": 232755079,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283377
    },
    {
        "content": "<ol>\n<li>change the trait parameter</li>\n</ol>",
        "id": 232755084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283382
    },
    {
        "content": "<ol start=\"2\">\n<li>move the impl into rustc_type_ir, behind a feature gate if desired</li>\n</ol>",
        "id": 232755105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283390
    },
    {
        "content": "<p>Yep</p>",
        "id": 232755135,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283407
    },
    {
        "content": "<p>I'm adding Q/As to the bottom of <a href=\"https://hackmd.io/K8cPSWn3So2GlPPvPuktAQ\">the hackmd</a></p>",
        "id": 232755172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283426
    },
    {
        "content": "<p>to record facts :)</p>",
        "id": 232755178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283428
    },
    {
        "content": "<p>I'd go so far as to say that we <strong>will</strong> depend on <code>rustc_data_structures</code></p>",
        "id": 232755299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283470
    },
    {
        "content": "<p>after all, we're going to need the \"newtype'd index\" stuff</p>",
        "id": 232755320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283477
    },
    {
        "content": "<p>Yep</p>",
        "id": 232755345,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283486
    },
    {
        "content": "<p><em>But</em></p>",
        "id": 232755370,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283497
    },
    {
        "content": "<p><code>Encodable</code>/<code>Decodable</code></p>",
        "id": 232755382,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283504
    },
    {
        "content": "<p>yes, we'll get to that :)</p>",
        "id": 232755398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283511
    },
    {
        "content": "<p>let me just note this one thing down</p>",
        "id": 232755405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283514
    },
    {
        "content": "<p>well, start</p>",
        "id": 232755421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283519
    },
    {
        "content": "<p>ok, talk to me about Encodable</p>",
        "id": 232755474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283550
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://media.giphy.com/media/KFUx0Rtz7p0HTzbJ7x/source.gif\"><img src=\"https://media.giphy.com/media/KFUx0Rtz7p0HTzbJ7x/source.gif\"></a></div>",
        "id": 232755571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283585
    },
    {
        "content": "<p>that's roughly how I feel when I hear that trait name</p>",
        "id": 232755582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283591
    },
    {
        "content": "<p>ok maybe more like this</p>",
        "id": 232755637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283614
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://media.giphy.com/media/1jl6QxY2EJpexXl0EJ/giphy.gif\"><img src=\"https://media.giphy.com/media/1jl6QxY2EJpexXl0EJ/giphy.gif\"></a></div>",
        "id": 232755641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283615
    },
    {
        "content": "<p>carry on</p>",
        "id": 232755648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283617
    },
    {
        "content": "<p>Didn't we already figure out <code>Encodable</code> with the current PR?</p>",
        "id": 232755659,
        "sender_full_name": "detrumi",
        "timestamp": 1617283621
    },
    {
        "content": "<p>It already does everything through the <code>Interner</code> trait instead of using <code>TyCtxt</code> directly</p>",
        "id": 232755700,
        "sender_full_name": "detrumi",
        "timestamp": 1617283641
    },
    {
        "content": "<p>mmm, did we?</p>",
        "id": 232755725,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283652
    },
    {
        "content": "<p>I don't think <code>TyCtxt</code> is the problem</p>",
        "id": 232755757,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283667
    },
    {
        "content": "<p>It's the fact of <em>where does the impl live</em></p>",
        "id": 232755777,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283681
    },
    {
        "content": "<p>If we put the impls in <code>rustc_type_ir</code>, then yes, we can't depend on <code>TyCtxt</code></p>",
        "id": 232755923,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283721
    },
    {
        "content": "<p>But, if we don't want to depend on <code>rustc_serialize</code>, we probably need to put those in <code>rustc_middle</code></p>",
        "id": 232755968,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283747
    },
    {
        "content": "<p>The problem is these impls:</p>",
        "id": 232755983,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283754
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;tcx, CTX, E: TyEncoder&lt;&#39;tcx&gt;&gt; Encodable&lt;E&gt; for rustc_type_ir::BoundRegionKind&lt;TyCtxt&lt;&#39;tcx&gt;&gt; {\n  ..\n}\n</code></pre></div>\n<p>and similiar for <code>Decodable</code></p>",
        "id": 232756040,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283788
    },
    {
        "content": "<p>isn't legal</p>",
        "id": 232756045,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283790
    },
    {
        "content": "<p>let's put that in the doc</p>",
        "id": 232756302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/232755968\">said</a>:</p>\n<blockquote>\n<p>But, if we don't want to depend on <code>rustc_serialize</code>, we probably need to put those in <code>rustc_middle</code></p>\n</blockquote>\n<p>and why don't we want to?</p>",
        "id": 232756338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283893
    },
    {
        "content": "<p>this seems like another case of</p>",
        "id": 232756354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283902
    },
    {
        "content": "<p>That uses the <code>TyDecodable</code> instead though, which is generated using rustc_macros</p>",
        "id": 232756360,
        "sender_full_name": "detrumi",
        "timestamp": 1617283904
    },
    {
        "content": "<p>\"we could\"</p>",
        "id": 232756369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617283908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/232756360\">said</a>:</p>\n<blockquote>\n<p>That uses the <code>TyDecodable</code> instead though, which is generated using rustc_macros</p>\n</blockquote>\n<p>No, it just uses <code>TyDecoder</code></p>",
        "id": 232756556,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283974
    },
    {
        "content": "<p>(Which is in <code>rustc_middle</code>)</p>",
        "id": 232756568,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/232756369\">said</a>:</p>\n<blockquote>\n<p>\"we could\"</p>\n</blockquote>\n<p>Indeed, I guess we <em>could</em></p>",
        "id": 232756635,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617283999
    },
    {
        "content": "<p>(oh right, in <a href=\"https://github.com/detrumi/rust/blob/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b/compiler/rustc_macros/src/serialize.rs#L10-L10\">here</a>)</p>",
        "id": 232756725,
        "sender_full_name": "detrumi",
        "timestamp": 1617284038
    },
    {
        "content": "<p>But I wonder if we <em>did</em>, if <code>Interner</code> would have to be generic over some <code>Decoder</code>/<code>Encoder</code></p>",
        "id": 232756740,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284042
    },
    {
        "content": "<p>say more?</p>",
        "id": 232756791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284051
    },
    {
        "content": "<p>I guess I should review the trait + impls</p>",
        "id": 232756861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284074
    },
    {
        "content": "<p>I don't quite understand its structure</p>",
        "id": 232756880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284082
    },
    {
        "content": "<p>Well, so lets imagine</p>",
        "id": 232756886,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284084
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>trait Interner&lt;E, D&gt; {\n  type Span: Encodable&lt;E&gt; + Decodable&lt;D&gt;\n}\n</code></pre></div>",
        "id": 232756905,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284092
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">E</span>: <span class=\"nc\">TyEncoder</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232756923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284098
    },
    {
        "content": "<p>that bound is problematic</p>",
        "id": 232756943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284106
    },
    {
        "content": "<p>perhaps this is your point</p>",
        "id": 232756952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284109
    },
    {
        "content": "<p>that... seems like a non-starter</p>",
        "id": 232757015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284138
    },
    {
        "content": "<p>I don't understand why it would be needed</p>",
        "id": 232757031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284148
    },
    {
        "content": "<p>but I'd like to know a bit more about what the body of the impls look like first</p>",
        "id": 232757047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284158
    },
    {
        "content": "<p>Well, I don't think we're going to care if we have <code>TyEncoder</code> or not</p>",
        "id": 232757051,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284160
    },
    {
        "content": "<p>can you give me an example impl?</p>",
        "id": 232757110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284172
    },
    {
        "content": "<p>Well, let's start by looking at the <code>BoundRegionKind</code> struct</p>",
        "id": 232757157,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284189
    },
    {
        "content": "<p>That has <code>I::DefId</code></p>",
        "id": 232757188,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284203
    },
    {
        "content": "<p>So, if we want  to derive <code>Encodable</code> <em>for any <code>E: Encoder</code></em>, then <code>I::DefId: E</code></p>",
        "id": 232757270,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284236
    },
    {
        "content": "<p>ok</p>",
        "id": 232757299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284247
    },
    {
        "content": "<p>so we would want something like</p>",
        "id": 232757312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284252
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BoundRegionKind</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">I</span>::<span class=\"n\">DefId</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232757350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284275
    },
    {
        "content": "<p>or, alternatively</p>",
        "id": 232757402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284289
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♀️ oh yeah, that's the simplest way to do that</p>",
        "id": 232757433,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284305
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">EncodableInterner</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Interner</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>::<span class=\"n\">DefId</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>actually, without implied bounds, I don't think that will work</p>",
        "id": 232757447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/232756740\">said</a>:</p>\n<blockquote>\n<p>But I wonder if we <em>did</em>, if <code>Interner</code> would have to be generic over some <code>Decoder</code>/<code>Encoder</code></p>\n</blockquote>\n<p>just forget about this statement, it's not true :)</p>",
        "id": 232757567,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284372
    },
    {
        "content": "<p>ok, so, we <em>could</em> put it in <code>rustc-type-ir</code></p>",
        "id": 232757707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284426
    },
    {
        "content": "<p>We did some experimenting with Encodable bounds on the Interner types before, but changing Encodable to take an Interner definitely sounds better</p>",
        "id": 232757717,
        "sender_full_name": "detrumi",
        "timestamp": 1617284428
    },
    {
        "content": "<p>but we'd need impls like that</p>",
        "id": 232757722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284430
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/232757717\">said</a>:</p>\n<blockquote>\n<p>We did some experimenting with Encodable bounds on the Interner types before, but changing Encodable to take an Interner definitely sounds better</p>\n</blockquote>\n<p>clarify?</p>",
        "id": 232757773,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284447
    },
    {
        "content": "<p>the main question I have is whether this <code>TyEncoder&lt;'tcx&gt;</code> bound is important</p>",
        "id": 232757800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284461
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/codec/trait.TyEncoder.html\">TyEncoder</a></p>",
        "id": 232757840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284476
    },
    {
        "content": "<p>Right, so I think any types that would explicitly need <code>TyEncoder</code> will be an associated type on <code>Interner</code></p>",
        "id": 232757910,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284511
    },
    {
        "content": "<p>it looks like that could be rewritten to use Interner <code>I</code></p>",
        "id": 232757912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284512
    },
    {
        "content": "<p>A previous iteration of the Interner design had things like <code>&lt;TyInterner&lt;'tcx&gt; as Interner&lt;D&gt;&gt;</code>, but that was before we removed the interner lifetime, so I just don't think that'll work</p>",
        "id": 232757919,
        "sender_full_name": "detrumi",
        "timestamp": 1617284515
    },
    {
        "content": "<p>i.e., it could be <code>TyEncoder&lt;I&gt;</code></p>",
        "id": 232757927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/232757910\">said</a>:</p>\n<blockquote>\n<p>Right, so I think any types that would explicitly need <code>TyEncoder</code> will be an associated type on <code>Interner</code></p>\n</blockquote>\n<p>I don't think that's required</p>",
        "id": 232758014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/232757350\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BoundRegionKind</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">E</span>: <span class=\"nc\">TyEncoder</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">I</span>::<span class=\"n\">DefId</span>: <span class=\"nc\">Encodable</span><span class=\"o\">&lt;</span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 232758076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284569
    },
    {
        "content": "<p>Well, <code>TyEncoder</code> is in <code>rustc_middle</code></p>",
        "id": 232758165,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284615
    },
    {
        "content": "<p>why?</p>",
        "id": 232758196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284639
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    fn type_shorthands(&amp;mut self) -&gt; &amp;mut FxHashMap&lt;Ty&lt;&#39;tcx&gt;, usize&gt;;\n    fn predicate_shorthands(&amp;mut self) -&gt; &amp;mut FxHashMap&lt;ty::PredicateKind&lt;&#39;tcx&gt;, usize&gt;;\n</code></pre></div>",
        "id": 232758285,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284666
    },
    {
        "content": "<p>because of those, I think</p>",
        "id": 232758296,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284672
    },
    {
        "content": "<p>So, maybe it could be moved into <code>rustc_type_ir</code> under this scheme</p>",
        "id": 232758326,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284685
    },
    {
        "content": "<p>so</p>",
        "id": 232758863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284897
    },
    {
        "content": "<p>I was imagining it would be changed to <code>Ty&lt;I&gt;</code> etc</p>",
        "id": 232758892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284908
    },
    {
        "content": "<p>in the fullness of time</p>",
        "id": 232758911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284917
    },
    {
        "content": "<p>that said, I agree we probably don't <em>want</em> that</p>",
        "id": 232758925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617284922
    },
    {
        "content": "<p>right</p>",
        "id": 232759068,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284983
    },
    {
        "content": "<p>This is just what's in <code>rustc_middle</code> right now</p>",
        "id": 232759087,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617284993
    },
    {
        "content": "<p>let me rephrase</p>",
        "id": 232759642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285210
    },
    {
        "content": "<p>let me rephrase</p>",
        "id": 232759649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285212
    },
    {
        "content": "<p>I think we <em>do</em> want it to be generic over <code>I</code></p>",
        "id": 232759662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285216
    },
    {
        "content": "<p>but we may still want the trait to live in <code>rustc_middle</code> :)</p>",
        "id": 232759689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285232
    },
    {
        "content": "<p>that said</p>",
        "id": 232759694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285236
    },
    {
        "content": "<p>I don't quite see how we can do that easily</p>",
        "id": 232759702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285239
    },
    {
        "content": "<p>I think I would be fine with moving stuff like that into <code>rustc_type_ir</code>, at least for now</p>",
        "id": 232759762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285251
    },
    {
        "content": "<p>under a feature gate if needed</p>",
        "id": 232759785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285262
    },
    {
        "content": "<p>what's unclear to me is</p>",
        "id": 232759795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285269
    },
    {
        "content": "<p>(a) if there are cases where that is not an option</p>",
        "id": 232759825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285284
    },
    {
        "content": "<p>I would guess it's always an option, but it may take some gymnastics</p>",
        "id": 232759878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285304
    },
    {
        "content": "<p>and (b) how to transition bit by bit (harder)</p>",
        "id": 232759900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285316
    },
    {
        "content": "<p>Yeah, there's going to be a big swathe of things that have to be moved together</p>",
        "id": 232760003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617285361
    },
    {
        "content": "<p>there <em>is</em> also the option of (perhaps under a feature gate...) extending <code>Interner</code> to have some of those <code>TyEncoder</code> methods</p>",
        "id": 232760049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285365
    },
    {
        "content": "<p>Since you can't have <code>TyFoldable</code> with <code>Ty</code></p>",
        "id": 232760061,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617285371
    },
    {
        "content": "<p>e.g.</p>",
        "id": 232760065,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617285373
    },
    {
        "content": "<p>But I think the \"solution\" for now is to move all the impls into <code>rustc_type_ir</code> and then move to a feature-gate in the future</p>",
        "id": 232760395,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617285485
    },
    {
        "content": "<p>that sounds right</p>",
        "id": 232760423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285495
    },
    {
        "content": "<p>I am good with that</p>",
        "id": 232760432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285500
    },
    {
        "content": "<p>I do think there's some missing features of rust</p>",
        "id": 232760442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285505
    },
    {
        "content": "<p>I dont' want to block on those :)</p>",
        "id": 232760454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285508
    },
    {
        "content": "<p>Unless someone comes up with a clever way to get around the coherence issues</p>",
        "id": 232760456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617285509
    },
    {
        "content": "<p>there may be hacks we can do but</p>",
        "id": 232760502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285523
    },
    {
        "content": "<p>feature-gated code seems simpler</p>",
        "id": 232760525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285533
    },
    {
        "content": "<p>then e.g. artificially rearranging type parameters or introducing newtypes</p>",
        "id": 232760569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285551
    },
    {
        "content": "<p>Looking at the crates involved, do we want to reference rustc_arena from rustc_type_ir? That'd simplify all the alloc functions that are currently on <code>Interner</code> if we could include a <code>ArenaAllocatable</code> bound</p>",
        "id": 232760629,
        "sender_full_name": "detrumi",
        "timestamp": 1617285575
    },
    {
        "content": "<p>maybe</p>",
        "id": 232761219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285768
    },
    {
        "content": "<p>I don't know why I'm drawing the line there lol</p>",
        "id": 232761261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285775
    },
    {
        "content": "<p>well</p>",
        "id": 232761323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285789
    },
    {
        "content": "<p>I definitely don't want to hardcode anything that involves lifetime parameters etc</p>",
        "id": 232761367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285801
    },
    {
        "content": "<p>ok, well, I have to run, but this was a good start :)</p>",
        "id": 232761559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285873
    },
    {
        "content": "<p>Oh right, yeah the lifetime param is a problem</p>",
        "id": 232761565,
        "sender_full_name": "detrumi",
        "timestamp": 1617285877
    },
    {
        "content": "<p>I guess I would say</p>",
        "id": 232761590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285890
    },
    {
        "content": "<p>it seems like being the arena is <em>the reason</em> that <code>Interner</code> exists</p>",
        "id": 232761620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285900
    },
    {
        "content": "<p>so maybe that's part of my hesitation :)</p>",
        "id": 232761636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617285905
    },
    {
        "content": "<p>I'm a bit afraid to ask this, but will the type library require nightly/RUSTC_BOOTSTRAP, and will Chalk depend on it? :/</p>",
        "id": 232882443,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1617358104
    },
    {
        "content": "<p>I know that during the initial design meeting for the proposal, the question was deferred</p>",
        "id": 232884566,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617359626
    },
    {
        "content": "<p>See <a href=\"https://rust-lang.github.io/compiler-team/minutes/design-meeting/2020-03-12-shared-library-for-types#deferred-questions\">the meeting notes</a></p>",
        "id": 232884706,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617359701
    },
    {
        "content": "<p>I think we almost definitely want to say no to that <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span></p>",
        "id": 232894677,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617367596
    },
    {
        "content": "<p>No to requiring nightly or no to building on stable?</p>",
        "id": 232894880,
        "sender_full_name": "Laurențiu",
        "timestamp": 1617367730
    },
    {
        "content": "<p>We almost definitely want Chalk to build on stable</p>",
        "id": 232895539,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617368225
    },
    {
        "content": "<p>And by extension, the type library</p>",
        "id": 232895558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617368245
    },
    {
        "content": "<p>I consider it a requirement that the type library has a version that builds on stable</p>",
        "id": 232899840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617370933
    },
    {
        "content": "<p>I'd be ok with having some features that require nightly though</p>",
        "id": 232899864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617370949
    },
    {
        "content": "<p>Looking at what's currently in rustc_type_ir, <code>newtype_index!</code> requires <code>#![feature(const_panic)]</code> atm, though I think they're not hard required since they're only used for asserts in const functions</p>",
        "id": 232900541,
        "sender_full_name": "detrumi",
        "timestamp": 1617371303
    },
    {
        "content": "<p>We'll have to see what features are currently used in code that gets moved from rustc_middle, and change things to eliminate the nightly requirement</p>",
        "id": 232900698,
        "sender_full_name": "detrumi",
        "timestamp": 1617371393
    },
    {
        "content": "<p>You can replace a const panic with an index out of bounds. Horrible UX, but same behaviour</p>",
        "id": 232902600,
        "sender_full_name": "oli",
        "timestamp": 1617372467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Can you give an example? What would that look like for <code>assert!(idx &lt;= u32::MAX as usize)</code>?</p>",
        "id": 232903242,
        "sender_full_name": "detrumi",
        "timestamp": 1617372831
    },
    {
        "content": "<p><code>[()][(idx &gt; u32::MAX as usize) as usize]</code></p>",
        "id": 232903419,
        "sender_full_name": "oli",
        "timestamp": 1617372911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/232900541\">said</a>:</p>\n<blockquote>\n<p>Looking at what's currently in rustc_type_ir, <code>newtype_index!</code> requires <code>#![feature(const_panic)]</code> atm, though I think they're not hard required since they're only used for asserts in const functions</p>\n</blockquote>\n<p>I think we shouldn't worry too much about features right now</p>",
        "id": 233170340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617628584
    },
    {
        "content": "<p>we can use them to start</p>",
        "id": 233170345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617628587
    },
    {
        "content": "<p>and then separately try to remove them</p>",
        "id": 233170351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617628591
    },
    {
        "content": "<p>Ah, well, I already removed the ones that were there, as the current rustc_type_ir code barely uses nightly features</p>",
        "id": 233171803,
        "sender_full_name": "detrumi",
        "timestamp": 1617629431
    },
    {
        "content": "<p>I think <code>rustc_data_structures</code> uses various features, in particular</p>",
        "id": 233171882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617629478
    }
]