[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 179863691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894190
    },
    {
        "content": "<p>So I think we were going to talk about regions, universes, etc</p>",
        "id": 179863924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894305
    },
    {
        "content": "<p>At least that's where we left it last time</p>",
        "id": 179863931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894313
    },
    {
        "content": "<p>I'm trying to decide the best \"starting point\"</p>",
        "id": 179863979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894357
    },
    {
        "content": "<p>So last time we were talking about normalization under binders</p>",
        "id": 179864055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894396
    },
    {
        "content": "<p>Meaning when you have something like <code>for&lt;'a&gt; fn(&lt;&amp;'a () as Foo&gt;::Bar)</code></p>",
        "id": 179864091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894422
    },
    {
        "content": "<p>Right now, rustc has some difficulty with this</p>",
        "id": 179864171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894479
    },
    {
        "content": "<p>let me back up :)</p>",
        "id": 179864270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894532
    },
    {
        "content": "<p>If we have a type like <code>&lt;T as Iterator&gt;::Item</code></p>",
        "id": 179864295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894555
    },
    {
        "content": "<p>and we try to normalize it</p>",
        "id": 179864302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894560
    },
    {
        "content": "<p>what does \"normalize\" mean?</p>",
        "id": 179864314,
        "sender_full_name": "Keith Yeung",
        "timestamp": 1572894571
    },
    {
        "content": "<p>try to find an applicable impl and substitute the value from that impl</p>",
        "id": 179864334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894596
    },
    {
        "content": "<p>so e.g. if you have</p>",
        "id": 179864337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894598
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">vec</span>::<span class=\"n\">IntoIter</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179864395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894617
    },
    {
        "content": "<p>and then we have <code>&lt;vec::IntoIter&lt;Foo&gt; as Iterator&gt;::Item</code></p>",
        "id": 179864423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894634
    },
    {
        "content": "<p>we could normalize that to <code>Foo</code></p>",
        "id": 179864427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894639
    },
    {
        "content": "<p>the way rustc works today, we have a phase where we look for associated type projections of this kind and we replace them --</p>",
        "id": 179864480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894681
    },
    {
        "content": "<p>this is called \"normalizing\"</p>",
        "id": 179864484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894686
    },
    {
        "content": "<p>to be clear, I am talking specifically about rustc right now</p>",
        "id": 179864576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894733
    },
    {
        "content": "<p>chalk has a slightly different approach, though it still involves a concept of normalizing</p>",
        "id": 179864587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894743
    },
    {
        "content": "<p>we call this \"eager normalization\" because, in rustc, we have to do it whenever we bring types \"into scope\" -- this context of \"into scope\" is not very clear, I realize, I'm not sure the best way to describe it.</p>",
        "id": 179864803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894790
    },
    {
        "content": "<p>An example would be: if you are type-checking, and you see an expression like <code>foo.bar</code>, where </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>: <span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179864830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894817
    },
    {
        "content": "<p>we would load the type for the field <code>bar</code> we will get <code>&lt;T as Iterator&gt;::Item</code></p>",
        "id": 179864850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894835
    },
    {
        "content": "<p>this type is not \"in scope\", it is taken from the struct -- we have to do substitutions to bring it \"into scope\" in the sense I mean</p>",
        "id": 179864901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894851
    },
    {
        "content": "<p>so e.g. if the type of <code>foo</code> is <code>Foo&lt;vec::IntoIter&lt;u32&gt;&gt;</code></p>",
        "id": 179864960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894907
    },
    {
        "content": "<p>we would substitute and get that the type of <code>bar</code> is <code>&lt;vec::IntoIter&lt;u32&gt; as Iterator&gt;::Item</code> --</p>",
        "id": 179864984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894926
    },
    {
        "content": "<p>and then we have to normalize</p>",
        "id": 179864993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894929
    },
    {
        "content": "<p>which would yield <code>u32</code></p>",
        "id": 179864996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894932
    },
    {
        "content": "<p>the point of <em>eager</em> normalization is that we have to do that before we go and compare types</p>",
        "id": 179865003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894944
    },
    {
        "content": "<p>that simplifies the logic that compares types</p>",
        "id": 179865062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894974
    },
    {
        "content": "<p>Right, so rustc normalizes as soon as it uses the type outside of the original context</p>",
        "id": 179865066,
        "sender_full_name": "detrumi",
        "timestamp": 1572894979
    },
    {
        "content": "<p>yeah</p>",
        "id": 179865070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894983
    },
    {
        "content": "<p>but that can be tricky</p>",
        "id": 179865076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894989
    },
    {
        "content": "<p>for one thing, it's easy to forget</p>",
        "id": 179865080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572894994
    },
    {
        "content": "<p>for another, sometimes there are times when you are kind of \"mixing\" things that are normalized and things that are not</p>",
        "id": 179865097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895013
    },
    {
        "content": "<p>that doesn't really matter, since normalizing twice doesn't hurt</p>",
        "id": 179865119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895026
    },
    {
        "content": "<p>but it can just make it hard to remember and it feels inefficient</p>",
        "id": 179865125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895036
    },
    {
        "content": "<p>even in our example above,</p>",
        "id": 179865132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895042
    },
    {
        "content": "<p>if the type of the local variable <code>foo</code> is \"in scope\", it must also be fully normalized</p>",
        "id": 179865154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895056
    },
    {
        "content": "<p>so the type <code>vec::IntoIter&lt;u32&gt;</code> that we substituted in is already normalized</p>",
        "id": 179865159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895064
    },
    {
        "content": "<p>and we then <em>renormalize</em> it, in a sense</p>",
        "id": 179865171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895074
    },
    {
        "content": "<p>but anyway the bigger problem is</p>",
        "id": 179865221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895085
    },
    {
        "content": "<p>when you have types like this one <code>for&lt;'a&gt; fn(&lt;&amp;'a () as Foo&gt;::Bar)</code>, we need to normalize \"inside\" the <code>for</code> binder</p>",
        "id": 179865279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895143
    },
    {
        "content": "<p>sometimes normalization doesn't complete right away, for example if there are inference variables</p>",
        "id": 179865292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895155
    },
    {
        "content": "<p>so e.g. in an extreme case if you have <code>&lt;?X as Iterator&gt;::Item</code>, we can't normalize it yet -- we don't know what impl it will be</p>",
        "id": 179865314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895172
    },
    {
        "content": "<p>the way we handle that today is that we create an inference variable to represent the result (<code>?R</code>) and then we add a pending obligation that says <code>Normalize(&lt;?X as Iterator&gt;::Item -&gt; ?R)</code>, essentially, to use a chalk-like notation</p>",
        "id": 179865374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895204
    },
    {
        "content": "<p>but if we get stuck in this position inside of the <code>for&lt;'a&gt;</code> binder, we are in a bad spot. We don't currently have a way to create inference variables that can \"equal\" a higher-ranked region like <code>'a</code></p>",
        "id": 179865445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895254
    },
    {
        "content": "<p>universes basically gives us a mechanism for doing this</p>",
        "id": 179865459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895262
    },
    {
        "content": "<p>(does this make sense so far?)</p>",
        "id": 179865486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895280
    },
    {
        "content": "<blockquote>\n<p>but if we get stuck in this position inside of the <code>for&lt;'a&gt;</code> binder, we are in a bad spot. We don't currently have a way to create inference variables that can \"equal\" a higher-ranked region like <code>'a</code></p>\n</blockquote>\n<p>(I imagine it might not be clear <em>why</em> we can't do this yet...)</p>",
        "id": 179865512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895303
    },
    {
        "content": "<p>You say \"equal\" a higher-ranked region, but isn't it like nesting scopes?</p>",
        "id": 179865573,
        "sender_full_name": "detrumi",
        "timestamp": 1572895325
    },
    {
        "content": "<p>yeah, so that's part of it:</p>",
        "id": 179865596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895349
    },
    {
        "content": "<p>like if we are going to eagerly normalize</p>",
        "id": 179865611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895362
    },
    {
        "content": "<p>we have to be able to produce a result</p>",
        "id": 179865621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895369
    },
    {
        "content": "<p>so we might need to transform <code>for&lt;'a&gt; fn(&lt;vec::IntoIter&lt;&amp;'a u32&gt; as Iterator&gt;::Item)</code></p>",
        "id": 179865652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895394
    },
    {
        "content": "<p>to <code>for&lt;'a&gt; fn(&amp;'a u32)</code></p>",
        "id": 179865658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895400
    },
    {
        "content": "<p>anyway, the way lazy norm works is rather different</p>",
        "id": 179865700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895428
    },
    {
        "content": "<p>we wait until we are trying to equate two types (say, <code>&lt;vec::IntoIter&lt;u32&gt; as Iterator&gt;::Item</code> and <code>u32</code>)</p>",
        "id": 179865774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895453
    },
    {
        "content": "<p>and then we try to prove that this normalization works</p>",
        "id": 179865785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895461
    },
    {
        "content": "<p>so in some sense whereas before we had a function <code>Normalize(T) -&gt; U</code> that (eagerly) normalized a type <code>T</code> to some type <code>U</code>, and that function had to recursively process everything</p>",
        "id": 179865837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895497
    },
    {
        "content": "<p>now our base operation is instead <code>Equal(T, U)</code> that proves two types are equal -- and it might do that by normalizing</p>",
        "id": 179865867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895524
    },
    {
        "content": "<p>this matters because it means that we enter new scopes</p>",
        "id": 179865970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895588
    },
    {
        "content": "<p>and we do operations in them</p>",
        "id": 179865974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895591
    },
    {
        "content": "<p>but we never try to return data <em>out</em> of them</p>",
        "id": 179865985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895599
    },
    {
        "content": "<blockquote>\n<p>You say \"equal\" a higher-ranked region, but isn't it like nesting scopes?</p>\n</blockquote>\n<p>to circle back to this...</p>",
        "id": 179865993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895605
    },
    {
        "content": "<p>the idea of unvierses then is pretty simple, basically you have a counter that tracks the scopes you are in, and when you \"enter\" a <code>for&lt;'a&gt;</code> scope, you increment this counter -- that's called a new universe</p>",
        "id": 179866054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895639
    },
    {
        "content": "<p>it contains all the types from the previous univese, plus a placeholder</p>",
        "id": 179866116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895664
    },
    {
        "content": "<p>representing <code>'a</code></p>",
        "id": 179866137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895673
    },
    {
        "content": "<p>anyway I kind of feel like I'm re-covering stuff that I actually tried to write up in the rustc-guide, I'm trying to decide whihc points I want to emphasize...</p>",
        "id": 179866312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895765
    },
    {
        "content": "<p>...but if this is useful, I can kind of keep going :)</p>",
        "id": 179866322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895771
    },
    {
        "content": "<p>right, so in the new model, as you are going about, you sometimes enter a new scope -- this corresponds to kind of \"entering\" a forall. you are kind of tracking the innermost universe at this point in time</p>",
        "id": 179866534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895871
    },
    {
        "content": "<p>I'm trying to find where I wrote about this in the rustc-guid but I sort of can't :/</p>",
        "id": 179866668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895968
    },
    {
        "content": "<p>but I know I did somewhere...</p>",
        "id": 179866683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895981
    },
    {
        "content": "<p>ah yes, <a href=\"https://rust-lang.github.io/rustc-guide/borrow_check/region_inference/placeholders_and_universes.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/borrow_check/region_inference/placeholders_and_universes.html\">here is the chapter</a></p>",
        "id": 179866704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572895996
    },
    {
        "content": "<p>the NLL checker in particular is based on this</p>",
        "id": 179866719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896005
    },
    {
        "content": "<p>sorry, my mind is elsewhere today :/ what I wanted to talk through a bit was the PR I've got open, and what I should do about it</p>",
        "id": 179866898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896092
    },
    {
        "content": "<p>let me back up  a bit</p>",
        "id": 179866954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896106
    },
    {
        "content": "<p>I was going to ask, I knew we used universes in rustc somewhere.. does that mean we primarily use them in NLL but not in type checking?</p>",
        "id": 179866981,
        "sender_full_name": "tmandry",
        "timestamp": 1572896113
    },
    {
        "content": "<p>yeah, currently we use them in NLL, but not in the type-checker</p>",
        "id": 179867031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896124
    },
    {
        "content": "<p>er, not in the older region system</p>",
        "id": 179867074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896134
    },
    {
        "content": "<p>this is not 100% true</p>",
        "id": 179867092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896138
    },
    {
        "content": "<p>we are kind of in a hybrid state</p>",
        "id": 179867095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896141
    },
    {
        "content": "<p>we are actally tracking universes *everywhere</p>",
        "id": 179867132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896159
    },
    {
        "content": "<p>but we are ALSO simulating the older system of handling higher-ranked types / trait-bounds</p>",
        "id": 179867201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896178
    },
    {
        "content": "<p>which is called the 'leak check'</p>",
        "id": 179867205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896182
    },
    {
        "content": "<p>maybe I should explain how <em>that</em> worked</p>",
        "id": 179867213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896187
    },
    {
        "content": "<p>the idea was: imagine you have</p>\n<div class=\"codehilite\"><pre><span></span>for&lt;&#39;a&gt; fn(&amp;&#39;a u32) = fn(?X)\n</pre></div>",
        "id": 179867254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896209
    },
    {
        "content": "<p>this should <em>not</em> be true</p>",
        "id": 179867271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896222
    },
    {
        "content": "<p>after all, what can <code>?X</code> be such that it is true?</p>",
        "id": 179867290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896236
    },
    {
        "content": "<p>the problem here is exactly scoping</p>",
        "id": 179867309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896243
    },
    {
        "content": "<p>if you expand out that equation, you get something like</p>",
        "id": 179867319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896248
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>exists&lt;?X&gt; {\n    for&lt;&#39;a&gt; fn(&amp;&#39;a u32) = fn(?X)\n}\n</pre></div>",
        "id": 179867345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896259
    },
    {
        "content": "<p>to put it in plain English, the <code>fn(?X)</code> type is \"a function that takes some type <code>?X</code> as argument\"</p>",
        "id": 179867442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896289
    },
    {
        "content": "<p>and the <code>for&lt;'a&gt; fn(&amp;'a u32)</code> is \"a function that takes <code>&amp;'a u32</code> for <em>any</em> <code>'a</code> as argument\"</p>",
        "id": 179867459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896303
    },
    {
        "content": "<p>so there is a scoping problem here</p>",
        "id": 179867465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896311
    },
    {
        "content": "<p>the way that we used to detect this</p>",
        "id": 179867473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896317
    },
    {
        "content": "<p>is basically we would push onto the stack (here I mean the literal program stack, in a sense)</p>",
        "id": 179867487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896327
    },
    {
        "content": "<p>effectively a new universe</p>",
        "id": 179867494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896332
    },
    {
        "content": "<p>then we would recurisvely process the type equality</p>",
        "id": 179867507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896339
    },
    {
        "content": "<p>so if that new universe is <code>U1</code>, then we would replcae <code>'a</code> with a placeholder region <code>!1</code> (let's say)</p>",
        "id": 179867541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896361
    },
    {
        "content": "<p>and we would try to equate <code>?X</code> with <code>&amp;'!1 u32</code></p>",
        "id": 179867553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896373
    },
    {
        "content": "<p>or I guess I made a more complicated example for myself</p>",
        "id": 179867626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896403
    },
    {
        "content": "<p>well, what this would do is replace <code>?X</code> with <code>&amp;'?x u32</code>, where <code>'?x</code> is an inference variable</p>",
        "id": 179867645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896417
    },
    {
        "content": "<p>so effectively you would get a constraint like <code>'?x = '!1</code></p>",
        "id": 179867654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896426
    },
    {
        "content": "<p>so far so ok, the way to think about this in universes is:</p>",
        "id": 179867667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896443
    },
    {
        "content": "<p>the <code>'!1</code> is in a universe 1 (say), but the <code>?x</code> is in universe 0, and hence it can't name <code>'!1</code>, so you have an error</p>",
        "id": 179867722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896486
    },
    {
        "content": "<p>the question is more when this is detected</p>",
        "id": 179867726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896491
    },
    {
        "content": "<p>the non-nll code is doing this thing called the leak-check</p>",
        "id": 179867733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896503
    },
    {
        "content": "<p>basically <em>during unification</em> we check whether <code>'!1</code> \"leaks out\" into any variables that can't name it</p>",
        "id": 179867800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896522
    },
    {
        "content": "<p>hi folks, around now</p>",
        "id": 179867833,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572896527
    },
    {
        "content": "<p>so we get an error</p>",
        "id": 179867839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896532
    },
    {
        "content": "<p>during the actual subtyping check</p>",
        "id": 179867865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896550
    },
    {
        "content": "<p>but this is different from how we handle regions most of the time</p>",
        "id": 179867914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896592
    },
    {
        "content": "<p>it's also a bit too strong</p>",
        "id": 179867922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896598
    },
    {
        "content": "<blockquote>\n<p>but this is different from how we handle regions most of the time</p>\n</blockquote>\n<p>normally, the subtyping check just generates constraints that feed into region inference later</p>",
        "id": 179867931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896612
    },
    {
        "content": "<p>I guess I can explain that a bit too</p>",
        "id": 179867968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896643
    },
    {
        "content": "<p>currently when we do operations on types we divide into two phases: the first check compares the \"skelton\" of the type and generates \"region constraints\", and then the second phase processes those constraints (region inference)</p>",
        "id": 179868083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896707
    },
    {
        "content": "<p>so e.g. if you have <code>&amp;'0 u32 &lt;: &amp;'1 u32</code>, where <code>'0</code> and <code>'1</code> are some regions, that would succeed, but generate a constraint <code>'0: '1</code> -- meaning that we have to prove later that <code>'0</code> outlives <code>'1</code></p>",
        "id": 179868141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896750
    },
    {
        "content": "<p>this distinction is kind of important</p>",
        "id": 179868220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896777
    },
    {
        "content": "<p>because there are some parts of the compiler (e.g., coercions, coherence) that ignore those region constraints when deciding how to handle your program</p>",
        "id": 179868238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896800
    },
    {
        "content": "<p>BTW don't want to interrupt your current discussion, but ping me when you're okay to move onto trait upcasting briefly :-)</p>",
        "id": 179868397,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1572896898
    },
    {
        "content": "<p>ok, I will stop here and see if any of this is making sense so far</p>",
        "id": 179868399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572896901
    },
    {
        "content": "<p>..so it sounds like you'd like to move the \"leak check\" out of the first phase (unification) and into the second (region inference)?</p>",
        "id": 179868813,
        "sender_full_name": "tmandry",
        "timestamp": 1572897160
    },
    {
        "content": "<p>yes, more or less</p>",
        "id": 179868825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897170
    },
    {
        "content": "<p>and that's what my PR does</p>",
        "id": 179868832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897175
    },
    {
        "content": "<p>the problem with doing it in the first phase is two-fold</p>",
        "id": 179868845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897188
    },
    {
        "content": "<p>one, it's kind of surprising</p>",
        "id": 179868847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897191
    },
    {
        "content": "<p>in some cases</p>",
        "id": 179868858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897197
    },
    {
        "content": "<p>but more importantly, it assumes you have the full set of constraints available to you, so you can do the leak-check</p>",
        "id": 179868881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897217
    },
    {
        "content": "<p>basically what the code does is to walk the constraints that are propagating <em>back</em>, looking for constraints from a placeholder in some universe to a region that can't see that placeholder</p>",
        "id": 179868919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897239
    },
    {
        "content": "<p>it is <em>also</em> true that this code is too strong and gives the wrong result</p>",
        "id": 179868975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897252
    },
    {
        "content": "<blockquote>\n<p>so effectively you would get a constraint like <code>'?x = '!1</code></p>\n</blockquote>\n<p>so in my earlier example I mentioned this --</p>",
        "id": 179869011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897274
    },
    {
        "content": "<p>really this would be represented as two constraints</p>",
        "id": 179869023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897288
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>&#39;!1: &#39;?x\n&#39;?x: &#39;!1\n</pre></div>",
        "id": 179869051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897307
    },
    {
        "content": "<p>since if <code>'a: 'b</code> and <code>'b: 'a</code> then <code>'a = 'b</code></p>",
        "id": 179869075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897320
    },
    {
        "content": "<p>anyway so we would error out on those, because <code>?X</code> is from an outer universe</p>",
        "id": 179869098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897335
    },
    {
        "content": "<p>but you can have examples like</p>\n<div class=\"codehilite\"><pre><span></span>&#39;static: &#39;!1\n</pre></div>\n\n\n<p>and this should not error</p>",
        "id": 179869112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897348
    },
    {
        "content": "<p>but the <code>'static</code> may not always be visible</p>",
        "id": 179869184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897369
    },
    {
        "content": "<p>e.g. what if we had <code>'?x: '!1</code>, and <code>?x</code> were later inferred to be equal to <code>'static</code>?</p>",
        "id": 179869209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897390
    },
    {
        "content": "<p>right now, the leak-check rejects the constraint as unsatisfiable, but that's wrong</p>",
        "id": 179869222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897401
    },
    {
        "content": "<p>so the PR handles this in a more principled way</p>",
        "id": 179869232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897410
    },
    {
        "content": "<p>but this does have some effects on rust code</p>",
        "id": 179869242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897414
    },
    {
        "content": "<p>the biggest one has to do w/ coherence</p>",
        "id": 179869271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897434
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179869291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897449
    },
    {
        "content": "<p>these two impls were previously permitted, but on the current branch, they are rejected</p>",
        "id": 179869304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897459
    },
    {
        "content": "<p>this falls out from coherence ignoring region constraints -- and the logic that causes them to get rejected has moved into the \"solve the region constraints\" part of the code</p>",
        "id": 179869384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897485
    },
    {
        "content": "<p>I'm not 100% sure if we can \"get away\" with this change -- it doesn't <em>seem</em> to affect many crates on crater, but we probably need a fresh crater run, and anyway we can't see all the crates.</p>",
        "id": 179869494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897521
    },
    {
        "content": "<p>I think though that we could restore the older behavior  if needed by modifying coherence</p>",
        "id": 179869551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897535
    },
    {
        "content": "<p>That said, there are reasons to prefer the newer behavior</p>",
        "id": 179869576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897541
    },
    {
        "content": "<p>ok, I think I'm going to leave this dissertation here for the moment. I'd encourage people to check out <a href=\"https://rust-lang.github.io/rustc-guide/borrow_check/region_inference/placeholders_and_universes.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/borrow_check/region_inference/placeholders_and_universes.html\">the rustc-guide chapter</a> -- I think it's a more organized presentation than the one I gave here. In any case, I didn't get to the tricky bits I had hope to talk about, but maybe I'll do some investigation and we can discuss next time.</p>",
        "id": 179869919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897651
    },
    {
        "content": "<p>(also feel free to ask me questions)</p>",
        "id": 179869931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572897657
    },
    {
        "content": "<blockquote>\n<p>so the PR handles this in a more principled way</p>\n</blockquote>\n<p>This is already implemented, right? The PR removes the leak check and which allows the universe based check to produce errors.</p>",
        "id": 179870011,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572897694
    },
    {
        "content": "<p>yep</p>",
        "id": 179871411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572898438
    }
]