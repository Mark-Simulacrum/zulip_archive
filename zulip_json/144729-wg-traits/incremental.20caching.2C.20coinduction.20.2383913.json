[
    {
        "content": "<p>Let's chat here?</p>",
        "id": 234493596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618405169
    },
    {
        "content": "<p>I've got to read <a href=\"https://github.com/rust-lang/rust/pull/83913#issuecomment-816251079\">this comment</a> more closely, to start</p>",
        "id": 234493822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618405238
    },
    {
        "content": "<blockquote>\n<p>During the second compilation session, we do not appear to hit that coinductive cycle for some reason (I haven't yet figured out why).</p>\n</blockquote>",
        "id": 234494280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618405430
    },
    {
        "content": "<p>this seems to be a key point, <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span></p>",
        "id": 234494300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618405434
    },
    {
        "content": "<p>what's the issue this is aiming to fix?</p>",
        "id": 234494383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618405456
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/83538\">https://github.com/rust-lang/rust/issues/83538</a></p>",
        "id": 234494434,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405480
    },
    {
        "content": "<p>During incremental compilation, we can end up with <code>EvaluatedToOk</code> on one session, and <code>EvaluatedToOkModuloRegions</code> in the other</p>",
        "id": 234494504,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405516
    },
    {
        "content": "<p>it's been affecting many different crates</p>",
        "id": 234494532,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405524
    },
    {
        "content": "<p>Since <a href=\"https://github.com/rust-lang/rust/pull/83007\">https://github.com/rust-lang/rust/pull/83007</a>, this causes an ICE, rather than being silently ignored</p>",
        "id": 234494568,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405541
    },
    {
        "content": "<p>my suspicion is that the first coinductive cycle happens as a result of a computing a query which gets cached on disk</p>",
        "id": 234494809,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405637
    },
    {
        "content": "<p>So in the second incremental run, we don't end up executing it</p>",
        "id": 234494860,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405661
    },
    {
        "content": "<p>Yes</p>",
        "id": 234494883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618405672
    },
    {
        "content": "<p>I was wondering</p>",
        "id": 234494896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618405680
    },
    {
        "content": "<p>I'm trying to remember how and to what extent we integrated incremental into the trait system</p>",
        "id": 234494959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618405694
    },
    {
        "content": "<p>I think...relatively little</p>",
        "id": 234494992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618405706
    },
    {
        "content": "<p>Another possibility - there are multiple ways of hitting the cycle</p>",
        "id": 234495004,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405709
    },
    {
        "content": "<p>for example:</p>",
        "id": 234495045,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405719
    },
    {
        "content": "<p>but we do try to track dependencies so that we can do caching</p>",
        "id": 234495049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618405721
    },
    {
        "content": "<p>afaik, we only create a DepNode for <code>evaluate_obligation</code></p>",
        "id": 234495097,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405746
    },
    {
        "content": "<p>but we don't try to cache the actual result, or save the evaluation/selection caches in any way</p>",
        "id": 234495130,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405761
    },
    {
        "content": "<p>I think we could have something like this: The obligation 'A' has two sub-obligations: 'B' and 'C'</p>",
        "id": 234495193,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405788
    },
    {
        "content": "<p>both end up leading to a cycle</p>",
        "id": 234495205,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405792
    },
    {
        "content": "<p>So, we have <code>A -&gt; B -&gt; A</code> and <code>A -&gt; C -&gt; A</code></p>",
        "id": 234495227,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405802
    },
    {
        "content": "<p>During the first compilation session, we end up evaluating <code>B -&gt; A</code> earlier on in compilation (e.g. from a different query)</p>",
        "id": 234495353,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405830
    },
    {
        "content": "<p>So when we go to evaluate <code>A</code>, we end up needing to process <code>A -&gt; C -&gt; A</code>, and use <em>that</em> as our coinductive cycle</p>",
        "id": 234495454,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405867
    },
    {
        "content": "<p>During the second compilation session, we never end up populating the cache with the <code>B -&gt; A</code> result</p>",
        "id": 234495501,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405885
    },
    {
        "content": "<p>I think I had better try to reproduce the problem</p>",
        "id": 234495509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618405887
    },
    {
        "content": "<p>The instructions in <a href=\"https://github.com/rust-lang/rust/issues/83538#issue-842349947\">https://github.com/rust-lang/rust/issues/83538#issue-842349947</a> should still work</p>",
        "id": 234495571,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405917
    },
    {
        "content": "<p>one thing to note - I think I've seen the <code>EvaluatedToOk</code> / <code>EvaluatedToOkModuloRegions</code> mismatch happen in the opposite direction</p>",
        "id": 234495670,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405941
    },
    {
        "content": "<p>in this issue, we get <code>EvaluatedToOkModuloRegions</code> in the first session, followed by <code>EvaluatedToOk</code> in second session</p>",
        "id": 234495762,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405978
    },
    {
        "content": "<p>I think I saw an issue where it happened the other way</p>",
        "id": 234495775,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405985
    },
    {
        "content": "<p>let me see if I can find it</p>",
        "id": 234495780,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618405987
    },
    {
        "content": "<p>I'm still getting my working directory setup</p>",
        "id": 234497139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618406478
    },
    {
        "content": "<p>took me a bit</p>",
        "id": 234497156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618406482
    },
    {
        "content": "<p>I guess I will check out your independent repro</p>",
        "id": 234497624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618406652
    },
    {
        "content": "<p>Different question, <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span>, why does it end up as \"evaluated to ok modulo regions\"?</p>",
        "id": 234499578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618407338
    },
    {
        "content": "<p>(the first cycle)</p>",
        "id": 234499673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618407364
    },
    {
        "content": "<p>do you know?</p>",
        "id": 234499680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618407367
    },
    {
        "content": "<p>It happens as a result of the predicate <code>std::marker::PhantomData&lt;(ty::PathSegment, std::option::Option&lt;synom::tokens::Colon2&gt;)&gt; as std::marker::Unpin&gt;</code> evaluating to <code>EvaluatedToOkModuloRegions</code></p>",
        "id": 234499759,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618407413
    },
    {
        "content": "<p>which causes everthing else in the cycle to get marked as <code>EvaluatedToOkModuloRegions</code></p>",
        "id": 234499776,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618407422
    },
    {
        "content": "<p>I'm not sure what causes that predicate to get marked as <code>EvaluatedToOkModuloRegions</code> to begin with</p>",
        "id": 234499803,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618407431
    },
    {
        "content": "<p>ok</p>",
        "id": 234499833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618407447
    },
    {
        "content": "<p>hmm, <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span>, I tried your script on rust-lang/master but it didn't reproduce any failure</p>",
        "id": 234500969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618407885
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>set -xe\n\ncargo +rust-2-stage1 clean -p syn\ncargo +rust-2-stage1 clean --release -p syn\ngit checkout ee2bcdef16fc2b23a7becdcd5dcb361e085db75a\ncargo +rust-2-stage1 build --release -j 1\ngit checkout 9ba859003d06df084b860fa62780dbf9169870d6\ncargo +rust-2-stage1 build --release -j 1\n</code></pre></div>",
        "id": 234501056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618407920
    },
    {
        "content": "<p>that script</p>",
        "id": 234501061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618407923
    },
    {
        "content": "<p>hmm</p>",
        "id": 234501238,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618407984
    },
    {
        "content": "<p>what version of nightly are you using?</p>",
        "id": 234501243,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618407989
    },
    {
        "content": "<p>I'm not using nightly</p>",
        "id": 234501390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408048
    },
    {
        "content": "<p>I'm using a build of the latest HEAD, I <em>think</em></p>",
        "id": 234501410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408056
    },
    {
        "content": "<p>hmm</p>",
        "id": 234501419,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618408061
    },
    {
        "content": "<p>I'm able to reproduce on the latest nightly (2021-04-13)</p>",
        "id": 234501436,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618408071
    },
    {
        "content": "<p>wait</p>",
        "id": 234501437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408072
    },
    {
        "content": "<p>I'll test with the latest master</p>",
        "id": 234501444,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618408075
    },
    {
        "content": "<p>let me double check</p>",
        "id": 234501459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408082
    },
    {
        "content": "<p>can you see if you're able to reproduce it with that nightly?</p>",
        "id": 234501507,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618408094
    },
    {
        "content": "<p>I'll try that</p>",
        "id": 234501610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408138
    },
    {
        "content": "<p>it does not reproduce with the nightly either, <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span></p>",
        "id": 234502056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408301
    },
    {
        "content": "<p>hmm</p>",
        "id": 234502090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408316
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>athena. rustc +nightly -vV\nrustc 1.53.0-nightly (132b4e5d1 2021-04-13)\nbinary: rustc\ncommit-hash: 132b4e5d167b7e622fcc11fa2b67b931105b4de1\ncommit-date: 2021-04-13\nhost: x86_64-unknown-linux-gnu\nrelease: 1.53.0-nightly\nLLVM version: 12.0.0\n</code></pre></div>",
        "id": 234502100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408320
    },
    {
        "content": "<p>huh</p>",
        "id": 234502101,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618408320
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>rustc 1.53.0-nightly (132b4e5d1 2021-04-13)\nbinary: rustc\ncommit-hash: 132b4e5d167b7e622fcc11fa2b67b931105b4de1\ncommit-date: 2021-04-13\nhost: x86_64-unknown-linux-gnu\nrelease: 1.53.0-nightly\nLLVM version: 12.0.0\n</code></pre></div>",
        "id": 234502197,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618408345
    },
    {
        "content": "<p>looks pretty similar :)</p>",
        "id": 234502226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408360
    },
    {
        "content": "<p>can you post the output you're getting?</p>",
        "id": 234502251,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618408375
    },
    {
        "content": "<p>yes</p>",
        "id": 234502360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408425
    },
    {
        "content": "<p>do I need to do some specific option to get incremental..? I wonder if I have something in my env that turns it off</p>",
        "id": 234502383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408438
    },
    {
        "content": "<p><a href=\"https://gist.github.com/Aaron1011/9beffb5ca05ed8d346e9b4bc837b4de3\">https://gist.github.com/Aaron1011/9beffb5ca05ed8d346e9b4bc837b4de3</a></p>",
        "id": 234502455,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618408451
    },
    {
        "content": "<p>Do you have <code>CARGO_INCREMENTAL</code> set?</p>",
        "id": 234502504,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618408468
    },
    {
        "content": "<p><a href=\"https://hackmd.io/MwkFax2LTeSgoc9dTUVCTA\">https://hackmd.io/MwkFax2LTeSgoc9dTUVCTA</a></p>",
        "id": 234502517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408477
    },
    {
        "content": "<p>if it's set to 0, then incremental is disabled</p>",
        "id": 234502521,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618408479
    },
    {
        "content": "<p>try unsetting it if it's set</p>",
        "id": 234502533,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618408483
    },
    {
        "content": "<p>not that I know of, but let me check</p>",
        "id": 234502535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408485
    },
    {
        "content": "<p>Also, check if <code>target/release/incremental</code> exists</p>",
        "id": 234502662,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1618408540
    },
    {
        "content": "<p>it does, but it's empty</p>",
        "id": 234503187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408744
    },
    {
        "content": "<p>I can probably add <code>-i</code> explicitly or something</p>",
        "id": 234503206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408751
    },
    {
        "content": "<p>nm, there is no such option</p>",
        "id": 234503425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408824
    },
    {
        "content": "<p>ok, setting <code>CARGO_INCREMENTAL=1</code> works</p>",
        "id": 234503557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408862
    },
    {
        "content": "<p>I don't think I had it set before ...</p>",
        "id": 234503577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618408866
    },
    {
        "content": "<p>I've been poking here but I'm feeling a bit confused</p>",
        "id": 234677091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618494200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> what RUSTC_LOG should I enable to best spy on the incremental caching etc?</p>",
        "id": 234677158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618494227
    },
    {
        "content": "<p>for example, reading the logs I see this:</p>",
        "id": 234677265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618494252
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>├┘rustc_trait_selection::traits::select::evaluate_predicate_recursively obligation=Obligation(predicate=Binder(TraitPredicate(&lt;quote::Tokens as std::marker::Unpin&gt;), []), depth=0), previous_stack=None\n├─0ms DEBUG rustc_trait_selection::traits::select CACHE MISS, result=EvaluatedToOk\n├─0ms DEBUG rustc_trait_selection::traits::select insert_evaluation_cache global, trait_ref=Binder(&lt;quote::Tokens as std::marker::Unpin&gt;, []), result=EvaluatedToOk\n├─0ms DEBUG rustc_trait_selection::traits::select on_completion, depth=1, reached_depth=18446744073709551615\n├─0ms DEBUG rustc_trait_selection::traits::select result=Ok(EvaluatedToOk)\n┘rustc_trait_selection::traits::select::evaluate_predicate_recursively obligation=Obligation(predicate=Binder(TraitPredicate(&lt;quote::Tokens as std::marker::Unpin&gt;), []), depth=0), previous_stack=None\n</code></pre></div>",
        "id": 234677276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618494255
    },
    {
        "content": "<p>which appears to be saying <code>EvaluatedToOk</code></p>",
        "id": 234677343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618494264
    },
    {
        "content": "<p>also dang this generates a lot of output :)</p>",
        "id": 234677548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618494326
    },
    {
        "content": "<p>ok, I'm finding the issue a bit more now at least</p>",
        "id": 234679527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618494996
    },
    {
        "content": "<p>I'm going to have to stop soon i'm afraid, but I'll return to this tomorrow</p>",
        "id": 234679557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618495006
    },
    {
        "content": "<p>for the record my current script is;</p>",
        "id": 234679573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618495011
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>set -xe\n\nBRANCH=+rust-2-stage1\nexport CARGO_INCREMENTAL=1\nexport RUSTC_LOG=rustc_trait_selection::traits,rustc_query_system\nexport RUST_BACKTRACE=1\n\ncargo $BRANCH clean -p syn\ncargo $BRANCH clean --release -p syn\ngit checkout ee2bcdef16fc2b23a7becdcd5dcb361e085db75a\ncargo $BRANCH build --release -j 1 2&gt;&amp;1 | rg -C 1000 &#39;quote::Token&#39;\ngit checkout 9ba859003d06df084b860fa62780dbf9169870d6\ncargo $BRANCH build --release -j 1 2&gt;&amp;1 | rg -C 1000 &#39;quote::Token&#39;\n</code></pre></div>",
        "id": 234679593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618495017
    },
    {
        "content": "<p>ok, poking at this again</p>",
        "id": 238143463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620654034
    },
    {
        "content": "<p>so</p>",
        "id": 238163827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620661292
    },
    {
        "content": "<p>i'm seeing something very confusing</p>",
        "id": 238163838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620661296
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>│ │ ├─0ms DEBUG rustc_trait_selection::traits::select check_evaluation_cache global, key=ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: Binder(&lt;std::vec::Vec&lt;proc_macro2::TokenTree&gt; as std::marker::Unpin&gt;, []) }, res=EvaluatedToOkModuloRegions\n</code></pre></div>",
        "id": 238163881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620661318
    },
    {
        "content": "<p>(oh, I added some debugging)</p>",
        "id": 238163966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620661343
    },
    {
        "content": "<p>looking at <code>proc_macro2::TokenTree</code>, I see it being inserted as <code>EvaluatedToOk</code></p>",
        "id": 238164088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620661397
    },
    {
        "content": "<p>│ │ ├─13ms DEBUG rustc_trait_selection::traits::select insert_evaluation_cache global, key=ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: Binder(&lt;proc_macro2::TokenTree as std::marker::Unpin&gt;, []) }, result=EvaluatedToOk</p>",
        "id": 238164094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620661397
    },
    {
        "content": "<p>also for <code>Vec&lt;TokenTree&gt;</code>:</p>",
        "id": 238164391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620661500
    },
    {
        "content": "<p>│ │ ├─13ms DEBUG rustc_trait_selection::traits::select insert_evaluation_cache global, key=ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: Binder(&lt;std::vec::Vec&lt;proc_macro2::TokenTree&gt; as std::marker::Unpin&gt;, []) }, result=EvaluatedToOk</p>",
        "id": 238164394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620661501
    },
    {
        "content": "<p>but then later</p>",
        "id": 238164477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620661534
    },
    {
        "content": "<p>│ │ ├─0ms DEBUG rustc_trait_selection::traits::select check_evaluation_cache global, key=ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: Binder(&lt;std::vec::Vec&lt;proc_macro2::TokenTree&gt; as std::marker::Unpin&gt;, []) }, res=EvaluatedToOkModuloRegions</p>",
        "id": 238164480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620661535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> not sure if you saw <a href=\"https://github.com/rust-lang/rust/issues/83538#issuecomment-835505371\">https://github.com/rust-lang/rust/issues/83538#issuecomment-835505371</a></p>",
        "id": 238165328,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620661862
    },
    {
        "content": "<p>I did not fully see it, but i was working my way to the same info-- that said, I disagree that this makes <a href=\"https://github.com/rust-lang/rust/issues/83913\">#83913</a> a solution</p>",
        "id": 238166005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620662137
    },
    {
        "content": "<p>I also still haven't seen that <em>call</em>, which is odd</p>",
        "id": 238166037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620662146
    },
    {
        "content": "<p>by which I mean, I have debug outputs that <em>should</em> be called during the <code>on_completion</code> call, but I don't see them firing</p>",
        "id": 238166223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620662209
    },
    {
        "content": "<p>I should however try that for smaller repo case :)</p>",
        "id": 238167941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620662845
    },
    {
        "content": "<p>(hmm, I don't see the problem using that example)</p>",
        "id": 238176263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620666014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> fyi I know on some examples debug asserts cause problems</p>",
        "id": 238176512,
        "sender_full_name": "simulacrum",
        "timestamp": 1620666117
    },
    {
        "content": "<p>(since they can run extra queries)</p>",
        "id": 238176657,
        "sender_full_name": "simulacrum",
        "timestamp": 1620666175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> yes</p>",
        "id": 238188854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620670874
    },
    {
        "content": "<p>if you disable debug assertions, do you still get logs?</p>",
        "id": 238188875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620670881
    },
    {
        "content": "<p>did that change?</p>",
        "id": 238188880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620670884
    },
    {
        "content": "<p>You can enable them separately noe</p>",
        "id": 238188889,
        "sender_full_name": "simulacrum",
        "timestamp": 1620670889
    },
    {
        "content": "<p>There's a debug-logging flag</p>",
        "id": 238188901,
        "sender_full_name": "simulacrum",
        "timestamp": 1620670896
    },
    {
        "content": "<p>(of course, logs may also cause problems)</p>",
        "id": 238188947,
        "sender_full_name": "simulacrum",
        "timestamp": 1620670918
    },
    {
        "content": "<p>oh, I forgot to mention that</p>",
        "id": 238210730,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620680231
    },
    {
        "content": "<p>you need to disable debug-assertions for that minimized example to work, IIRC</p>",
        "id": 238210756,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620680243
    },
    {
        "content": "<p>I might have even had to disable debuginfo (not debug logging) but some reason, but I unfortunately forgot to write down exactly what changes I made to my <code>config.toml</code></p>",
        "id": 238210970,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620680334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> ok, I can reproduce without the debug assertions</p>",
        "id": 238225454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620688191
    },
    {
        "content": "<p>Some notes as I trace:</p>",
        "id": 238227528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620689619
    },
    {
        "content": "<ul>\n<li>The \"modulo regions\" arises because of <code>Box&lt;Ty, Global&gt;</code>. The <code>Unpin</code> requirement is:</li>\n</ul>",
        "id": 238227543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620689635
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/1b30245ea1286df96d673015c4519c861e06977a/library/alloc/src/boxed.rs#L1675-L1676\">link</a></p>",
        "id": 238227722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620689746
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">Allocator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Unpin</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238227733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620689753
    },
    {
        "content": "<p>my current theory is that the <code>reached_depth</code> mechanism is not quite right</p>",
        "id": 238229686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620691042
    },
    {
        "content": "<p>I'll have to dig more tomorrow or later though</p>",
        "id": 238229735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620691083
    },
    {
        "content": "<p>ok, I think I found the bug</p>",
        "id": 238275030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620724082
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/1b30245ea1286df96d673015c4519c861e06977a/compiler/rustc_trait_selection/src/traits/select/mod.rs#L2393-L2396\">this code is overly conservative</a>, and it's causing results to get polluted with \"modulo regions\"</p>",
        "id": 238275120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620724107
    },
    {
        "content": "<p><code>First</code> is not a participant in the same cycle here</p>",
        "id": 238275162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620724136
    },
    {
        "content": "<p>reworking this cache to work more like the cache in chalk; not sure why I didn't do that the first time</p>",
        "id": 238276401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620724776
    },
    {
        "content": "<p>whoever did the reduction on this test case, god bless you <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 238276428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620724793
    },
    {
        "content": "<p>ok, ICE fixed, though I think I can make a cleaner PR</p>",
        "id": 238276544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620724843
    },
    {
        "content": "<p>I wonder if there's a cleaner test; how can we reveal the difference between <code>EvaluatedToOkModuloRegions</code> and <code>EvaluatedToOk</code>...</p>",
        "id": 238276665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620724908
    },
    {
        "content": "<p>...it seems to only be true for caching results</p>",
        "id": 238276771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620724957
    },
    {
        "content": "<p>.........ah, but we might be able to make a test where auto traits are incorrectly considered not to hold...?</p>",
        "id": 238276803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620724984
    },
    {
        "content": "<p>...no, not obviously, I was a bit too clever for that, in that we clear the cache entries on failure...</p>",
        "id": 238277022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620725105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/incremental.20caching.2C.20coinduction.20.2383913/near/238276803\">said</a>:</p>\n<blockquote>\n<p>.........ah, but we might be able to make a test where auto traits are incorrectly considered not to hold...?</p>\n</blockquote>\n<p>how would that work? Afaik auto traits also don't differentiate between <code>EvaluatedToOk</code> and <code>EvaluatedToOkModuloRegions</code> rn</p>",
        "id": 238277060,
        "sender_full_name": "lcnr",
        "timestamp": 1620725125
    },
    {
        "content": "<p>no, I was thinking about this code:</p>",
        "id": 238277137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620725166
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">cache</span><span class=\"p\">().</span><span class=\"n\">on_completion</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">dfn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">fresh_trait_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">provisional_result</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">insert_evaluation_cache</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">fresh_trait_ref</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">dep_node</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">provisional_result</span><span class=\"p\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238277143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620725172
    },
    {
        "content": "<p>and in particular <code>provisional_result.max(result)</code></p>",
        "id": 238277185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620725187
    },
    {
        "content": "<p>but in that code, this is guaranteed to only execute is <code>result</code> is <code>EvaluatedToOkModuloRegions</code> or higher</p>",
        "id": 238277209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620725207
    },
    {
        "content": "<p>( I believe, I could add an assertion... )</p>",
        "id": 238277226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620725223
    },
    {
        "content": "<p>I suspect the cache <em>could</em> be reworked to cache failure, mind you</p>",
        "id": 238277264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620725256
    },
    {
        "content": "<p>I'm trying to think why I opted not to do that</p>",
        "id": 238277277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620725266
    },
    {
        "content": "<p>Maybe there is some subtle reason it would cause problems in rustc</p>",
        "id": 238277281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620725275
    },
    {
        "content": "<p>or maybe I just wasn't clever enough to see it at the moment</p>",
        "id": 238277357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620725311
    },
    {
        "content": "<p>(I don't know if we do the whole loop-to-fixed-point thing correctly, though? What <em>does</em> rustc do here...)</p>",
        "id": 238277767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620725533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is there a plan to issue a new point release?</p>",
        "id": 238335739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620749539
    },
    {
        "content": "<p>I have a fix for <a href=\"https://github.com/rust-lang/rust/issues/83538\">#83538</a> that I think I am happy with.</p>",
        "id": 238335762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620749547
    },
    {
        "content": "<p>I'm going to open a PR shortly</p>",
        "id": 238335775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620749552
    },
    {
        "content": "<p>It's possible</p>",
        "id": 238335789,
        "sender_full_name": "simulacrum",
        "timestamp": 1620749557
    },
    {
        "content": "<p>Depends on how many and how confident we are</p>",
        "id": 238335824,
        "sender_full_name": "simulacrum",
        "timestamp": 1620749570
    },
    {
        "content": "<p>ok</p>",
        "id": 238335839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620749580
    },
    {
        "content": "<p>well, I'll open the PR either way</p>",
        "id": 238335847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620749584
    },
    {
        "content": "<p>I'd probably not if we're not sufficiently confident to re-enable by default</p>",
        "id": 238335860,
        "sender_full_name": "simulacrum",
        "timestamp": 1620749589
    },
    {
        "content": "<p>I figured i'd open one that is relatively \"backport friendly\"</p>",
        "id": 238335875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620749592
    },
    {
        "content": "<p>and one with more extensive edits</p>",
        "id": 238335884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620749596
    },
    {
        "content": "<p>That sounds excellent</p>",
        "id": 238335900,
        "sender_full_name": "simulacrum",
        "timestamp": 1620749602
    },
    {
        "content": "<p>the biggest problem I see is no test</p>",
        "id": 238337151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620750123
    },
    {
        "content": "<p>I was considering adding a <code>#[rustc_foo]</code> attribute that dumps internal state</p>",
        "id": 238337199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620750133
    },
    {
        "content": "<p>I don't think a test based on the incremental fingerprint ICE will be very reliable</p>",
        "id": 238337238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620750143
    },
    {
        "content": "<p>but I'll defer that</p>",
        "id": 238337263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620750154
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/85186\">https://github.com/rust-lang/rust/pull/85186</a></p>",
        "id": 238337572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620750290
    },
    {
        "content": "<p>Yeah. I had musings last night about fuzzing the incremental state files or something. Definitely seems like a good idea in theory.</p>",
        "id": 238337732,
        "sender_full_name": "simulacrum",
        "timestamp": 1620750364
    },
    {
        "content": "<p>I think what I would like to do is</p>",
        "id": 238337788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620750379
    },
    {
        "content": "<p>add a <code>-Zflag</code> or something that dumps the result of each cache entry to stdout</p>",
        "id": 238337823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620750404
    },
    {
        "content": "<p>before my PR, the results from various trait evaluations come out wrong</p>",
        "id": 238337848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620750419
    },
    {
        "content": "<p>and we could record them in the stderr output</p>",
        "id": 238337861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620750424
    },
    {
        "content": "<p>I don't think there's a more reliable way to write this test</p>",
        "id": 238337882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620750430
    },
    {
        "content": "<p>that seems fairly clear and also like something we could translate to chalk output etc in the future</p>",
        "id": 238337912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620750447
    },
    {
        "content": "<p>I guess we could make a <code>note:</code> call, I don't know that we have useful spans available to us</p>",
        "id": 238337959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620750479
    },
    {
        "content": "<p>I think just dumping to stderr for now seems entirely reasonable</p>",
        "id": 238338502,
        "sender_full_name": "simulacrum",
        "timestamp": 1620750713
    },
    {
        "content": "<p>ok I whipped up this test</p>",
        "id": 238379007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620765750
    },
    {
        "content": "<p>interestingly, this doesn't seem to fix the syn case!</p>",
        "id": 238379858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620766182
    },
    {
        "content": "<p>oh</p>",
        "id": 238379984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620766233
    },
    {
        "content": "<p>never mind, I didn't have my fix applied</p>",
        "id": 238380019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620766251
    },
    {
        "content": "<p>though I do see some panic in bors</p>",
        "id": 238380031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620766261
    },
    {
        "content": "<p>but I think that's just a broken assertion</p>",
        "id": 238380131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620766309
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> -- I saw <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span>'s <a href=\"https://github.com/rust-lang/rust/pull/85186#issuecomment-838804252\">comment</a> and I was thinking that maybe it'd be nice to schedule some time to do a walk through of this PR to help transmit the knowledge of how this caching works etc? This might be particularly nice considering the more extended version of this PR I was thinking of doing.</p>",
        "id": 238380487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620766458
    },
    {
        "content": "<p>I'm down</p>",
        "id": 238380593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620766508
    },
    {
        "content": "<p>ideal for me would be to use the wg-traits office hours tomorrow at <time datetime=\"2021-05-12T13:15:00Z\">2021-05-12T09:15:00-04:00</time></p>",
        "id": 238380797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620766586
    },
    {
        "content": "<p>annoyingly my effort to craft a test has failed so far -- can you make tests that build in lib mode?</p>",
        "id": 238380927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620766659
    },
    {
        "content": "<p>looks like yes</p>",
        "id": 238380986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620766683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm really interested, zoom I guess?, if so please record it because I can't on mornings</p>",
        "id": 238382826,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620767481
    },
    {
        "content": "<p>bah humbug, I haven't figured out how to get that test to fail yet :)</p>",
        "id": 238390999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620771990
    },
    {
        "content": "<p>oh it's (maybe) because of debug assertions</p>",
        "id": 238391050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620772021
    },
    {
        "content": "<p>I'm just going to remove that and give up</p>",
        "id": 238391056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620772024
    },
    {
        "content": "<p>+1 for recording, esp if it's at that time</p>",
        "id": 238406513,
        "sender_full_name": "tmandry",
        "timestamp": 1620782374
    },
    {
        "content": "<p>I could also do <time datetime=\"2021-05-12T18:00:00Z\">2021-05-12T14:00:00-04:00</time> or <time datetime=\"2021-05-12T19:00:00Z\">2021-05-12T15:00:00-04:00</time></p>",
        "id": 238438152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620807545
    },
    {
        "content": "<p>those would be ok too</p>",
        "id": 238438161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620807551
    },
    {
        "content": "<p>I think if we discuss this morning and record, that would be good</p>",
        "id": 238470172,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620824972
    },
    {
        "content": "<p>here now</p>",
        "id": 238471759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620825587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> ether of you here? (or others)</p>",
        "id": 238471933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620825645
    },
    {
        "content": "<p>I am</p>",
        "id": 238471953,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620825653
    },
    {
        "content": "<p>well you and I could walk through it :)</p>",
        "id": 238471968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620825660
    },
    {
        "content": "<p>you have r+ actually...</p>",
        "id": 238471973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620825663
    },
    {
        "content": "<p>Yes</p>",
        "id": 238471992,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620825670
    },
    {
        "content": "<p>I quickly glanced over it</p>",
        "id": 238472019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620825680
    },
    {
        "content": "<p><a href=\"https://zoom.us/j/2694326451?pwd=T3YwaE9ZSzNLd3MzOWVxenV6cldOZz09\">https://zoom.us/j/2694326451?pwd=T3YwaE9ZSzNLd3MzOWVxenV6cldOZz09</a></p>",
        "id": 238472024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620825682
    },
    {
        "content": "<p>there is also an assertion failure I didn't manage to reproduce yet</p>",
        "id": 238472176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620825727
    },
    {
        "content": "<p>ah, now I did</p>",
        "id": 238472203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620825738
    },
    {
        "content": "<p>for the people following at home, the recording is available at <a href=\"https://youtu.be/_tG2E9KVy5o\">https://youtu.be/_tG2E9KVy5o</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"_tG2E9KVy5o\" href=\"https://youtu.be/_tG2E9KVy5o\"><img src=\"https://uploads.zulipusercontent.net/7f74f49a4683cf7aaf42a05c31844f0eae6953bd/68747470733a2f2f692e7974696d672e636f6d2f76692f5f74473245394b5679356f2f64656661756c742e6a7067\"></a></div>",
        "id": 238550123,
        "sender_full_name": "lqd",
        "timestamp": 1620856282
    },
    {
        "content": "<p>ha! yes</p>",
        "id": 238551737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620857192
    },
    {
        "content": "<p>I was just going to tweet about that!</p>",
        "id": 238551750,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620857202
    },
    {
        "content": "<p>so I added this nice unit testing mechanism</p>",
        "id": 238552291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620857532
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[rustc_evaluate_where_clauses]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Ty</span>: <span class=\"nb\">Unpin</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Second</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Unpin</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">First</span>: <span class=\"nb\">Unpin</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238552310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620857544
    },
    {
        "content": "<p>produces output like:</p>",
        "id": 238552329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620857559
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: evaluate(Binder(TraitPredicate(&lt;Ty as std::marker::Unpin&gt;), [])) = Ok(EvaluatedToOkModuloRegions)\n  --&gt; foo.rs:42:5\n   |\n35 |     Ty: Unpin,\n   |         ----- predicate\n...\n42 |     foo();\n   |     ^^^\n\nerror: evaluate(Binder(TraitPredicate(&lt;std::vec::Vec&lt;Second&gt; as std::marker::Unpin&gt;), [])) = Ok(EvaluatedToOk)\n  --&gt; foo.rs:42:5\n   |\n36 |     Vec&lt;Second&gt;: Unpin,\n   |                  ----- predicate\n...\n42 |     foo();\n   |     ^^^\n\nerror: evaluate(Binder(TraitPredicate(&lt;First as std::marker::Unpin&gt;), [])) = Ok(EvaluatedToOk)\n  --&gt; foo.rs:42:5\n   |\n37 |     First: Unpin,\n   |            ----- predicate\n...\n42 |     foo();\n   |     ^^^\n</code></pre></div>",
        "id": 238552336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620857564
    },
    {
        "content": "<p>however</p>",
        "id": 238552345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620857571
    },
    {
        "content": "<p>I still can't reproduce the bug this way, which is surprising!</p>",
        "id": 238552351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620857578
    },
    {
        "content": "<p>I expect the evaluation to cache wrong results and it doesn't seem to</p>",
        "id": 238552367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620857601
    },
    {
        "content": "<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 238552713,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620857799
    },
    {
        "content": "<p>That's a neat unit testing attribute though</p>",
        "id": 238552729,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620857812
    },
    {
        "content": "<p>ok, I managed to reproduce the bug. The trick was trying both orderings of the where clause. For some reason that I don't know, reverse ordering works better <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> -- I can sort of imagine why that might be, actually.</p>",
        "id": 238596196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620895348
    },
    {
        "content": "<p>Perf is looking bad currently: <a href=\"https://perf.rust-lang.org/status.html\">https://perf.rust-lang.org/status.html</a></p>",
        "id": 238626988,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620915442
    },
    {
        "content": "<p>Really bad</p>",
        "id": 238627044,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620915473
    },
    {
        "content": "<p>queue length? We can prioritize things if necessary, FWIW</p>",
        "id": 238627690,
        "sender_full_name": "simulacrum",
        "timestamp": 1620915727
    },
    {
        "content": "<p>oh you mean that PR taking a good bit longer on many benchmarks, yeah, that does look bad</p>",
        "id": 238627868,
        "sender_full_name": "simulacrum",
        "timestamp": 1620915796
    },
    {
        "content": "<p>the PR is being benchmarked now so probably not the queue length</p>",
        "id": 238627876,
        "sender_full_name": "lqd",
        "timestamp": 1620915799
    },
    {
        "content": "<p>doesn't always mean it's bad itself</p>",
        "id": 238627886,
        "sender_full_name": "simulacrum",
        "timestamp": 1620915802
    },
    {
        "content": "<p>(sometimes we have a long-running PR on wall clock for other reasons, like S3 uploads being slow)</p>",
        "id": 238627934,
        "sender_full_name": "simulacrum",
        "timestamp": 1620915826
    },
    {
        "content": "<p>better to wait for the final results :)</p>",
        "id": 238628064,
        "sender_full_name": "lqd",
        "timestamp": 1620915864
    },
    {
        "content": "<p>Right :) Definitely wait for final results. But just saw that some of the tests are like 3x as long as expected</p>",
        "id": 238628179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620915922
    },
    {
        "content": "<p>yeah initial results (after I bumped it so they'd show) do look fine - <a href=\"https://perf.rust-lang.org/compare.html?start=72d07257ed46c70bcaf719e15882af539d0a5155&amp;end=61b32d567658b13ad4d86cc5fa7c5a4b76bae0e0&amp;stat=instructions%3Au\">https://perf.rust-lang.org/compare.html?start=72d07257ed46c70bcaf719e15882af539d0a5155&amp;end=61b32d567658b13ad4d86cc5fa7c5a4b76bae0e0&amp;stat=instructions%3Au</a></p>",
        "id": 238628910,
        "sender_full_name": "simulacrum",
        "timestamp": 1620916240
    },
    {
        "content": "<p>looks like the s3 uploads are being really slow, though I don't know why</p>",
        "id": 238628939,
        "sender_full_name": "simulacrum",
        "timestamp": 1620916252
    },
    {
        "content": "<p>Phew</p>",
        "id": 238629031,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620916306
    },
    {
        "content": "<p>I was concerned for a bit</p>",
        "id": 238629057,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620916321
    },
    {
        "content": "<p>I would've been quite surprised</p>",
        "id": 238630082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620916708
    },
    {
        "content": "<p>though we do a few more traversals of the hashmap</p>",
        "id": 238630107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620916724
    }
]