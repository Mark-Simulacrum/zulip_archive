[
    {
        "content": "<p>Here's the document I put together for today: <a href=\"https://hackmd.io/BxVbpAYpSBCCfX7_LhhDSQ?both\">https://hackmd.io/BxVbpAYpSBCCfX7_LhhDSQ?both</a></p>",
        "id": 276614594,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213196
    },
    {
        "content": "<p>Hi :)</p>",
        "id": 276614662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648213207
    },
    {
        "content": "<p>It's not <em>super</em> detailed</p>",
        "id": 276614690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213215
    },
    {
        "content": "<p>But I figured we could vote on what specific things we'd like to dig into</p>",
        "id": 276614747,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213231
    },
    {
        "content": "<p>(we wouldn't be able to get through everything this meeting anyways)</p>",
        "id": 276614793,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213251
    },
    {
        "content": "<p>we need some good zulip group to ping :)</p>",
        "id": 276614796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648213253
    },
    {
        "content": "<p>Let's start with <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> :)</p>",
        "id": 276614837,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213277
    },
    {
        "content": "<p>Hmm, I think Zulip should add a thing like <code>@stream</code> but that's a bit more opt-in...</p>",
        "id": 276614842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648213279
    },
    {
        "content": "<p>i.e., I feel like (for me at least) most user groups kind of correspond to streams</p>",
        "id": 276614873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648213290
    },
    {
        "content": "<p>it'd be useful to merge the concepts</p>",
        "id": 276614881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648213295
    },
    {
        "content": "<p>anyway</p>",
        "id": 276614884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648213297
    },
    {
        "content": "<p>Also, quick annoucement. Thanks everyone for 2021 and the work everyone put in: <a href=\"https://jackh726.github.io/rust/2022/03/25/a-thanks.html\">https://jackh726.github.io/rust/2022/03/25/a-thanks.html</a></p>",
        "id": 276614926,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213321
    },
    {
        "content": "<p>Okay, so I guess let's start by everyone just reading over the doc?</p>",
        "id": 276615035,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213366
    },
    {
        "content": "<p>React with <span aria-label=\"book\" class=\"emoji emoji-1f4d6\" role=\"img\" title=\"book\">:book:</span> when you start, and <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> when done?</p>",
        "id": 276615064,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213386
    },
    {
        "content": "<p>/poll What would you like to dig into?<br>\nSyntax<br>\nWell-formedness rules<br>\nImpl type checking<br>\nNormalization<br>\nCurrent bugs<br>\nFuture features/directions</p>",
        "id": 276615288,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276614837\">said</a>:</p>\n<blockquote>\n<p>Let's start with <span class=\"user-group-mention silent\" data-user-group-id=\"692\">WG-traits</span> :)</p>\n</blockquote>\n<p>ah, can someone add me to that group</p>",
        "id": 276615510,
        "sender_full_name": "lcnr",
        "timestamp": 1648213604
    },
    {
        "content": "<p>If anyone wants to dig into anything in particular, vote above :) Otherwise, we can just go through the doc linearly</p>",
        "id": 276615544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213628
    },
    {
        "content": "<p>filed <a href=\"https://github.com/zulip/zulip/issues/21556\">https://github.com/zulip/zulip/issues/21556</a></p>",
        "id": 276615550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648213630
    },
    {
        "content": "<p>too bad it will never happen :)</p>",
        "id": 276615557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648213635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276615510\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276614837\">said</a>:</p>\n<blockquote>\n<p>Let's start with <span class=\"user-group-mention silent\" data-user-group-id=\"692\">WG-traits</span> :)</p>\n</blockquote>\n<p>ah, can someone add me to that group</p>\n</blockquote>\n<p>added</p>",
        "id": 276615671,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213691
    },
    {
        "content": "<p>nit: it's universally <em>quantified</em>, not <em>qualified</em></p>",
        "id": 276615688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648213700
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♀️</p>",
        "id": 276615710,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213714
    },
    {
        "content": "<p>I make that mistake all the time <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 276615730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648213725
    },
    {
        "content": "<p>Also, feel free to add any questions at the bottom or make any comments</p>",
        "id": 276615775,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213751
    },
    {
        "content": "<p>(like I said, there's not really much here)</p>",
        "id": 276615825,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276615544\">said</a>:</p>\n<blockquote>\n<p>If anyone wants to dig into anything in particular, vote above :) Otherwise, we can just go through the doc linearly</p>\n</blockquote>\n<p>I voted for my top two, but really all of them sound interesting. I wanted to vote for more but I realized then I'd vote for all of them, and if you vote for all did you really vote for anything?</p>",
        "id": 276615848,
        "sender_full_name": "eholk",
        "timestamp": 1648213798
    },
    {
        "content": "<p>I like the use of poll to drive agenda, neat idea</p>",
        "id": 276615849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648213799
    },
    {
        "content": "<p>Okay, so in that case, I guess we can just go through linearly</p>",
        "id": 276615957,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213834
    },
    {
        "content": "<p>So, for syntax, there's I guess -two- three relevant bits (edit: I can't get strikethrough to work)</p>",
        "id": 276615989,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213855
    },
    {
        "content": "<p>Obviously the \"definition\"</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// &lt;--</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276616055,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213904
    },
    {
        "content": "<p>(do we support default values?)</p>",
        "id": 276616116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648213923
    },
    {
        "content": "<p>(I can't remember if those work for associated types, even)</p>",
        "id": 276616126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648213932
    },
    {
        "content": "<p>Yes</p>",
        "id": 276616150,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213943
    },
    {
        "content": "<p>default values for assoc types in traits are a feature i think</p>",
        "id": 276616177,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1648213961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276615989\">said</a>:</p>\n<blockquote>\n<p>So, for syntax, there's I guess -two- three relevant bits (edit: I can't get strikethrough to work)</p>\n</blockquote>\n<p><em>need \"~\" not \"-\"</em></p>",
        "id": 276616192,
        "sender_full_name": "lcnr",
        "timestamp": 1648213975
    },
    {
        "content": "<p>correct</p>",
        "id": 276616196,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213979
    },
    {
        "content": "<p>I tried that :(</p>",
        "id": 276616206,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648213986
    },
    {
        "content": "<p>you need two ~~</p>",
        "id": 276616236,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1648213999
    },
    {
        "content": "<p><del>two</del></p>",
        "id": 276616249,
        "sender_full_name": "lcnr",
        "timestamp": 1648214007
    },
    {
        "content": "<p>ah <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 276616260,
        "sender_full_name": "lcnr",
        "timestamp": 1648214014
    },
    {
        "content": "<p>there we go</p>",
        "id": 276616269,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276616126\">said</a>:</p>\n<blockquote>\n<p>(I can't remember if those work for associated types, even)</p>\n</blockquote>\n<p>these are unstable iirc</p>",
        "id": 276616301,
        "sender_full_name": "lcnr",
        "timestamp": 1648214031
    },
    {
        "content": "<p>^</p>",
        "id": 276616311,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1648214038
    },
    {
        "content": "<p>the main controversy around the syntax was the placement of <code>where</code></p>",
        "id": 276616364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214044
    },
    {
        "content": "<p>I'm looking, I don't think we have test coverage of GATs + associated type defaults</p>",
        "id": 276616389,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214054
    },
    {
        "content": "<p>good thing to add to the list</p>",
        "id": 276616412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276616364\">said</a>:</p>\n<blockquote>\n<p>the main controversy around the syntax was the placement of <code>where</code></p>\n</blockquote>\n<p>I noticed that changed recently, I was kind of curious why, like what it aesthetics or is there some other reason?</p>",
        "id": 276616442,
        "sender_full_name": "eholk",
        "timestamp": 1648214077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276616364\">said</a>:</p>\n<blockquote>\n<p>the main controversy around the syntax was the placement of <code>where</code></p>\n</blockquote>\n<p>yeah, is there an issue with discussion/debate about that placement?</p>",
        "id": 276616451,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1648214081
    },
    {
        "content": "<p>Oh, we do</p>",
        "id": 276616487,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214095
    },
    {
        "content": "<p>Right, so second thing. impls</p>",
        "id": 276616536,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"426609\">Michael Goulet (compiler-errors)</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276616451\">said</a>:</p>\n<blockquote>\n<p>yeah, is there an issue with discussion/debate about that placement?</p>\n</blockquote>\n<p>lol. Yes.</p>",
        "id": 276616556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214120
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/lang-team/issues/120\">https://github.com/rust-lang/lang-team/issues/120</a></p>",
        "id": 276616583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214133
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/89122\">https://github.com/rust-lang/rust/issues/89122</a></p>",
        "id": 276616597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214142
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/generic-associated-types-initiative/design-discussions/where-the-where.html\">https://rust-lang.github.io/generic-associated-types-initiative/design-discussions/where-the-where.html</a></p>",
        "id": 276616616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214153
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276616623,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214161
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/generic-associated-types-initiative/design-discussions/where-the-where-1.html\">https://rust-lang.github.io/generic-associated-types-initiative/design-discussions/where-the-where-1.html</a></p>",
        "id": 276616656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214163
    },
    {
        "content": "<p>lots to read :)</p>",
        "id": 276616668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214166
    },
    {
        "content": "<p>I think that last one is prob the best</p>",
        "id": 276616681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214175
    },
    {
        "content": "<p>there's a lot of overlap in there</p>",
        "id": 276616691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214178
    },
    {
        "content": "<p>but, <code>type Assoc&lt;'a&gt; where Self: 'a = &amp;'a Self</code> is allowed as \"deprecated\"</p>",
        "id": 276616709,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421986\">eholk</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276616442\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276616364\">said</a>:</p>\n<blockquote>\n<p>the main controversy around the syntax was the placement of <code>where</code></p>\n</blockquote>\n<p>I noticed that changed recently, I was kind of curious why, like what it aesthetics or is there some other reason?</p>\n</blockquote>\n<p>I think aesthetics isn't <em>quite</em> the right word. But the new syntax seems to \"feel\" more correct to more people.</p>",
        "id": 276616822,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421986\">eholk</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276616442\">said</a>:</p>\n<blockquote>\n<p>I noticed that changed recently, I was kind of curious why, like what it aesthetics or is there some other reason?</p>\n</blockquote>\n<p>(see the links above; aesthetics and expectations were definitely a large factor, though <a href=\"https://rust-lang.github.io/generic-associated-types-initiative/design-discussions/where-the-where-1.html#but-isnt-it-inconsistent-with-other-trait-items-to-put-the-where-clauses-before-the-\">I would also argue that it's also more consistent this way with other parts of the language</a></p>",
        "id": 276616856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214273
    },
    {
        "content": "<p>Okay, and the last bit of important syntax is in bounds. So</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">LendingIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">_t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276616992,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214337
    },
    {
        "content": "<p>So, the important bit here is the placement of the <code>for&lt;'a&gt;</code></p>",
        "id": 276617028,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214356
    },
    {
        "content": "<p>Some would argue that this scope is a bit \"too large\"</p>",
        "id": 276617058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214373
    },
    {
        "content": "<p>I would add one other bit; eventually, I think we want <code>'_</code> to be a shorthand for <code>'a</code> there</p>",
        "id": 276617069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214380
    },
    {
        "content": "<p>(well, let me add this later)</p>",
        "id": 276617084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214389
    },
    {
        "content": "<p>is <br>\n<code> fn foo&lt;T: LendingIterator&lt;for&lt;'a&gt; Item&lt;'a&gt; = &amp;'a ()&gt;&gt;(_t: T) {}</code><br>\nalso allowed?</p>",
        "id": 276617094,
        "sender_full_name": "lcnr",
        "timestamp": 1648214393
    },
    {
        "content": "<p>That you might want <code>T: LendingIterator&lt;for&lt;'a&gt; Item&lt;'a&gt; = &amp;'a ()&gt;</code> here</p>",
        "id": 276617161,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214407
    },
    {
        "content": "<p>(not allowed right now)</p>",
        "id": 276617175,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214415
    },
    {
        "content": "<p>there was some relevant discussion on the issue</p>",
        "id": 276617220,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214435
    },
    {
        "content": "<p>let me go find</p>",
        "id": 276617236,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214444
    },
    {
        "content": "<p>it doesn't really matter, but it seems clearer if there are multiple assoc types<br>\n<code>fn foo&lt;T: Trait&lt;for&lt;'a&gt; Item&lt;'a&gt; = &amp;'a (), for&lt;'a&gt; OtherItem&lt;'a&gt; = &amp;'a ()&gt;&gt;(_t: T) {}</code></p>\n<p>instead of<br>\n<code>fn foo&lt;T: for&lt;'a, 'b&gt; Trait&lt;Item&lt;'a&gt; = &amp;'a (), OtherItem&lt;'b&gt; = &amp;'b ()&gt;&gt;(_t: T) {}</code></p>",
        "id": 276617322,
        "sender_full_name": "lcnr",
        "timestamp": 1648214489
    },
    {
        "content": "<p>you don't need to use <code>'a</code> and <code>'b</code> separately there</p>",
        "id": 276617356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214506
    },
    {
        "content": "<p>yeah</p>",
        "id": 276617367,
        "sender_full_name": "lcnr",
        "timestamp": 1648214510
    },
    {
        "content": "<p>that said, I assumed that this is sort of a ... todo item</p>",
        "id": 276617381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214517
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/67510\">#67510</a> is the relevant issue</p>",
        "id": 276617382,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214517
    },
    {
        "content": "<p>that is, I think it's clear that the current <code>for</code> syntax is painful to use along a couple of dimensions</p>",
        "id": 276617462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276617356\">said</a>:</p>\n<blockquote>\n<p>you don't need to use <code>'a</code> and <code>'b</code> separately there</p>\n</blockquote>\n<p>but that wasn't immediately clear to me, and i expect that to also be the case for other people reading this code</p>",
        "id": 276617544,
        "sender_full_name": "lcnr",
        "timestamp": 1648214553
    },
    {
        "content": "<p>don't expect that to happen much, but it doesn't seem ideal</p>",
        "id": 276617562,
        "sender_full_name": "lcnr",
        "timestamp": 1648214561
    },
    {
        "content": "<p>The problem with the current location, is it does complicate the \"implied bounds\" story a bit</p>",
        "id": 276617643,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> do we have a test for this case?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(generic_associated_types)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I see that it <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=bed6b4e57f8af1052fe3e77217b578b1\">does what I hoped it would do</a> -- error.</p>",
        "id": 276617690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214635
    },
    {
        "content": "<p>(dyn errors too, though for a different reason, but I'd want to test that, too)</p>",
        "id": 276617759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214655
    },
    {
        "content": "<p>(my point here is that I would like space to decide how <code>'_</code> works in these contexts)</p>",
        "id": 276617825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214680
    },
    {
        "content": "<p>I'm not sure if there's that test case</p>",
        "id": 276617829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214682
    },
    {
        "content": "<p>another test:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(generic_associated_types)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"nb\">_</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276617858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214700
    },
    {
        "content": "<p>ok</p>",
        "id": 276617869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214703
    },
    {
        "content": "<p>I think we should add a few</p>",
        "id": 276617880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214708
    },
    {
        "content": "<p>I can file an issue</p>",
        "id": 276617899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214720
    },
    {
        "content": "<p>that would be good</p>",
        "id": 276617954,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214755
    },
    {
        "content": "<p>But anyways, those are the relevant syntactical things</p>",
        "id": 276618026,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214773
    },
    {
        "content": "<p>And we went over important design points here</p>",
        "id": 276618039,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214784
    },
    {
        "content": "<p>So, let's move on</p>",
        "id": 276618049,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214789
    },
    {
        "content": "<h2>Well-formedness rules</h2>",
        "id": 276618067,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214798
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/95305\">https://github.com/rust-lang/rust/issues/95305</a></p>",
        "id": 276618113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214822
    },
    {
        "content": "<p>quick question -- in that issue you linked above, is there a reason we <em>can't</em> support <code>for&lt;'a&gt;</code> in the \"more expected\" position?</p>",
        "id": 276618140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214838
    },
    {
        "content": "<p>I assumed it would be kind of painful to implement, but otherwise fine</p>",
        "id": 276618151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214845
    },
    {
        "content": "<p>a quick skim suggests nobody has done it</p>",
        "id": 276618161,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1648214860
    },
    {
        "content": "<p>It's been a bit, but I think there was some concern</p>",
        "id": 276618177,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214869
    },
    {
        "content": "<p>But I might be misremembering</p>",
        "id": 276618187,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214875
    },
    {
        "content": "<p>I think there's more discussion elsewhere, but I don't remember where</p>",
        "id": 276618254,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214890
    },
    {
        "content": "<p>ok</p>",
        "id": 276618283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648214904
    },
    {
        "content": "<p>For WF: I was looking if GATs actually require any extra WF requirements</p>",
        "id": 276618298,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214911
    },
    {
        "content": "<p>The two places I know of are: trait objects with GATs, and the outlives lint</p>",
        "id": 276618333,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214932
    },
    {
        "content": "<p>But one thing I'm thinking about now that we should check is on the bounds for type parameters</p>",
        "id": 276618401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214972
    },
    {
        "content": "<p>i.e. <code>type Assoc&lt;I: Iterator&gt;;</code></p>",
        "id": 276618419,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214984
    },
    {
        "content": "<p>(but not sure if there's anything there)</p>",
        "id": 276618439,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648214997
    },
    {
        "content": "<p>The other thing would maybe be something like <code>trait Foo&lt;'b&gt; where for&lt;'a&gt; Self::Assoc&lt;'a&gt;:  'b</code> or something</p>",
        "id": 276618554,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215035
    },
    {
        "content": "<p>but anyways, for trait objects with GATs: the short answer is these are just disallowed allowed right now; if we get to it, we can discuss more in future directions</p>",
        "id": 276618649,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215079
    },
    {
        "content": "<p>For the outlives lint, this is essentially</p>",
        "id": 276618674,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276618401\">said</a>:</p>\n<blockquote>\n<p>But one thing I'm thinking about now that we should check is on the bounds for type parameters</p>\n</blockquote>\n<p>say a bit more -- like, check that people are supplying a type argument that does indeed implement <code>Iterator</code>?</p>",
        "id": 276618704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215105
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">LendingIterator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// &lt;- this is missing a `Self: 'a`</span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// because of this</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276618839,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276618704\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276618401\">said</a>:</p>\n<blockquote>\n<p>But one thing I'm thinking about now that we should check is on the bounds for type parameters</p>\n</blockquote>\n<p>say a bit more -- like, check that people are supplying a type argument that does indeed implement <code>Iterator</code>?</p>\n</blockquote>\n<p>yes, basically</p>",
        "id": 276618867,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215185
    },
    {
        "content": "<p>Regarding bounds on type parameters in GATs</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(generic_associated_types)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">qux</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">i</span>: <span class=\"nc\">F</span>::<span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This fails correctly with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]</span>: <span class=\"err\">`</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iterator</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">7</span>:<span class=\"mi\">19</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">qux</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">i</span>: <span class=\"nc\">F</span>::<span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">                   </span><span class=\"o\">^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">iterator</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Iterator</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Foo</span>::<span class=\"n\">Bar</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">4</span>:<span class=\"mi\">17</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">                 </span><span class=\"o\">^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Foo</span>::<span class=\"n\">Bar</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276618869,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1648215188
    },
    {
        "content": "<p>this last example is probably surprising to people, if they haven't been following (the missing <code>Self: 'a</code>)</p>",
        "id": 276618878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"426609\">Michael Goulet (compiler-errors)</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276618869\">said</a>:</p>\n<blockquote>\n<p>...</p>\n</blockquote>\n<p>It would be nice to document <em>where</em> that happens</p>",
        "id": 276618948,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276618878\">said</a>:</p>\n<blockquote>\n<p>this last example is probably surprising to people, if they haven't been following (the missing <code>Self: 'a</code>)</p>\n</blockquote>\n<p>searching for that issue</p>",
        "id": 276619059,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276618948\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"426609\">Michael Goulet (compiler-errors)</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276618869\">said</a>:</p>\n<blockquote>\n<p>...</p>\n</blockquote>\n<p>It would be nice to document <em>where</em> that happens</p>\n</blockquote>\n<p>in <code>wf.rs</code></p>",
        "id": 276619103,
        "sender_full_name": "lcnr",
        "timestamp": 1648215315
    },
    {
        "content": "<p><code>rustc_trait_selection::traits::wf</code></p>",
        "id": 276619115,
        "sender_full_name": "lcnr",
        "timestamp": 1648215321
    },
    {
        "content": "<p><code>fn compute_projection</code></p>",
        "id": 276619125,
        "sender_full_name": "lcnr",
        "timestamp": 1648215324
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/87479\">#87479</a></p>",
        "id": 276619140,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215332
    },
    {
        "content": "<p>I was going to suggest <a href=\"https://rust-lang.github.io/generic-associated-types-initiative/design-discussions/outlives-defaults.html\">https://rust-lang.github.io/generic-associated-types-initiative/design-discussions/outlives-defaults.html</a></p>",
        "id": 276619284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215390
    },
    {
        "content": "<p>hey what do you know, the dedicated repo has the info :)</p>",
        "id": 276619296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215396
    },
    {
        "content": "<p>Anyways, the core idea behind the outlives \"lint\" (really it's just an error) is to help ensure that when people write an impl for a trait with a GAT, they don't run into an issue where they can't use the type the want</p>",
        "id": 276619344,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215420
    },
    {
        "content": "<p>because the trait doesn't have the appropriate where clause</p>",
        "id": 276619363,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215429
    },
    {
        "content": "<p>To do that, we basically look to see <em>what bounds are provable</em> for the things we pass to a GAT when we create it within a trait</p>",
        "id": 276619449,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215470
    },
    {
        "content": "<p><code>where Self: 'a</code> is not currently the default, right?</p>",
        "id": 276619458,
        "sender_full_name": "eholk",
        "timestamp": 1648215476
    },
    {
        "content": "<p>Correct</p>",
        "id": 276619518,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215490
    },
    {
        "content": "<p>the assumption is that if you have <code>-&gt; Self::Foo&lt;'a&gt;</code>, the GAT <code>Foo</code> is really meant to return the <em>return type of this method</em>, and hence is relevant only for lifetimes <code>'a</code> that could be used as arguments to that method (which meet its implied bounds)</p>",
        "id": 276619520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215491
    },
    {
        "content": "<p>I haven't written a ton of GATs yet, but so far I haven't had to do <code>where Self: 'a</code>, which kind of surprises me.</p>",
        "id": 276619607,
        "sender_full_name": "eholk",
        "timestamp": 1648215529
    },
    {
        "content": "<p>So, we opted for the most conservative \"require the user write the bounds\", rather than implying it, or now</p>",
        "id": 276619624,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215535
    },
    {
        "content": "<p>one of the interesting bits of data we are looking to learn is whether you <em>ever</em> want anything different</p>",
        "id": 276619638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215546
    },
    {
        "content": "<p>I haven't found an example yet where you do</p>",
        "id": 276619665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215556
    },
    {
        "content": "<p>Well, the answer to that is yes</p>",
        "id": 276619674,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215563
    },
    {
        "content": "<p>or at least, a non-artificial-seeming one</p>",
        "id": 276619699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215576
    },
    {
        "content": "<p>we have a realistic such case?</p>",
        "id": 276619712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215582
    },
    {
        "content": "<p>If you had something like <code>fn foo&lt;'a, 'b&gt;(&amp;'a self, &amp;'b Data) -&gt; Self::Assoc&lt;'b&gt; {}</code></p>",
        "id": 276619730,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215591
    },
    {
        "content": "<p>So, the GAT type comes from some data that isn't the self type</p>",
        "id": 276619799,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215615
    },
    {
        "content": "<p>in that case, does the error trigger?</p>",
        "id": 276619809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215623
    },
    {
        "content": "<p>I don't believe it does</p>",
        "id": 276619819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215626
    },
    {
        "content": "<p>No, it doesn't</p>",
        "id": 276619837,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215635
    },
    {
        "content": "<p>Right, so I meant: any case where the compiler forces you to write a where-clause you didn't want</p>",
        "id": 276619865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215649
    },
    {
        "content": "<p>I think our rules are pretty targeted</p>",
        "id": 276619878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215655
    },
    {
        "content": "<p>(we could review them)</p>",
        "id": 276619888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276619837\">said</a>:</p>\n<blockquote>\n<p>No, it doesn't</p>\n</blockquote>\n<p>should it be extended to require a <code>Data: 'b</code> bound if <code>Data</code> is generic?</p>",
        "id": 276619893,
        "sender_full_name": "lcnr",
        "timestamp": 1648215659
    },
    {
        "content": "<p>Oh, yes</p>",
        "id": 276619901,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215663
    },
    {
        "content": "<p>The current rules are pretty nice, I think</p>",
        "id": 276619930,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215674
    },
    {
        "content": "<p>The main thing I've used GATs for so far is manually doing async traits, so instead of <code>async fn foo(&amp;self)</code>, it's <code>fn foo(&amp;self) -&gt; Self::FooFuture&lt;'_&gt;</code></p>",
        "id": 276619962,
        "sender_full_name": "eholk",
        "timestamp": 1648215686
    },
    {
        "content": "<p>actually we really should document them on the repo, not sure if they are there</p>",
        "id": 276619966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215688
    },
    {
        "content": "<p>I was mostly saying, <code>Self: 'a</code> might not allows be wanted, so we can't do that <em>always</em></p>",
        "id": 276619991,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421986\">@eholk</span> I would expect you <em>do</em> need a <code>where Self: 'a</code> there</p>",
        "id": 276620018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421986\">eholk</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276619962\">said</a>:</p>\n<blockquote>\n<p>The main thing I've used GATs for so far is manually doing async traits, so instead of <code>async fn foo(&amp;self)</code>, it's <code>fn foo(&amp;self) -&gt; Self::FooFuture&lt;'_&gt;</code></p>\n</blockquote>\n<p>But I guess in practice you end up with <code>Self: 'a</code> there...</p>",
        "id": 276620020,
        "sender_full_name": "eholk",
        "timestamp": 1648215712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276619893\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276619837\">said</a>:</p>\n<blockquote>\n<p>No, it doesn't</p>\n</blockquote>\n<p>should it be extended to require a <code>Data: 'b</code> bound if <code>Data</code> is generic?</p>\n</blockquote>\n<p>In this case, I wasn't imagining <code>Data</code> to be generic</p>",
        "id": 276620042,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276619966\">said</a>:</p>\n<blockquote>\n<p>actually we really should document them on the repo, not sure if they are there</p>\n</blockquote>\n<p><a href=\"https://rust-lang.github.io/generic-associated-types-initiative/explainer/required_bounds.html#precise-rules\">https://rust-lang.github.io/generic-associated-types-initiative/explainer/required_bounds.html#precise-rules</a></p>",
        "id": 276620145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215760
    },
    {
        "content": "<p>they are, though it may be out of date</p>",
        "id": 276620154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215766
    },
    {
        "content": "<p>Yes, I think maybe a bit, since <span class=\"user-mention\" data-user-id=\"426609\">@Michael Goulet (compiler-errors)</span>'s changes</p>",
        "id": 276620189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215785
    },
    {
        "content": "<p>(to support <code>Iterable</code>)</p>",
        "id": 276620209,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276620018\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"421986\">eholk</span> I would expect you <em>do</em> need a <code>where Self: 'a</code> there</p>\n</blockquote>\n<p>I think the reason I didn't is because <code>FooFuture</code> was <code>type FooFuture&lt;'a&gt;: impl Future + 'a</code>, so probably in the fn impl it gets some lifetime that <code>Self</code> outlives by accident.</p>",
        "id": 276620225,
        "sender_full_name": "eholk",
        "timestamp": 1648215802
    },
    {
        "content": "<p>jup, mostly felt like the ideal solution here is to use all the implied bounds on lifetimes used by the gat and require the user to add then to the gat</p>",
        "id": 276620227,
        "sender_full_name": "lcnr",
        "timestamp": 1648215804
    },
    {
        "content": "<p>ah, we already do that</p>",
        "id": 276620256,
        "sender_full_name": "lcnr",
        "timestamp": 1648215817
    },
    {
        "content": "<p>cool shit <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span></p>",
        "id": 276620268,
        "sender_full_name": "lcnr",
        "timestamp": 1648215822
    },
    {
        "content": "<p>Unless anyone wants to go into the details of how the lint works, we can move on to the the impl type checking?</p>",
        "id": 276620343,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215844
    },
    {
        "content": "<p>yeah -- basically what we do is to say \"are there any implied bounds in scope on the fn(s) where it appears that are relevant to the GAT arguments? if so, require them to be declared on the type\"</p>",
        "id": 276620367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276620268\">said</a>:</p>\n<blockquote>\n<p>cool shit <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span></p>\n</blockquote>\n<p>Yeah, I think the rules we landed are quite clever, but also fairly easy to explain.</p>",
        "id": 276620424,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215890
    },
    {
        "content": "<p>took a few iterations...</p>",
        "id": 276620500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648215910
    },
    {
        "content": "<p>Okay, so</p>\n<h2>Impl type checking</h2>",
        "id": 276620522,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215922
    },
    {
        "content": "<p>There are two relevant bits here</p>",
        "id": 276620551,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215939
    },
    {
        "content": "<p>There is <a href=\"https://github.com/rust-lang/rust/blob/661e8beec1fa5f3c58bf6e4362ae3c3fe0b4b1bd/compiler/rustc_typeck/src/check/compare_method.rs#L1233\"><code>check_type_bounds</code></a>, which is essentially \"does the type the user provides in an impl actually meet the bounds on the trait\"</p>",
        "id": 276620687,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648215988
    },
    {
        "content": "<p>And <a href=\"https://github.com/rust-lang/rust/blob/661e8beec1fa5f3c58bf6e4362ae3c3fe0b4b1bd/compiler/rustc_typeck/src/check/compare_method.rs#L1117\"><code>compare_type_predicate_entailment</code></a>, which is basically \"Can we prove the bounds on the impl, given the bounds on the trait associated type and impl\"</p>",
        "id": 276620804,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216046
    },
    {
        "content": "<p>For the former, there was a bit of special logic here added for GATs</p>",
        "id": 276620942,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216093
    },
    {
        "content": "<p>There's a nice comment in the function itself</p>",
        "id": 276620974,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216109
    },
    {
        "content": "<p>But there's a little subtlety here that might be nice to discuss</p>",
        "id": 276621066,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216148
    },
    {
        "content": "<blockquote>\n<p>We also can't normalize generic associated types (yet) because they contain bound parameters.</p>\n</blockquote>\n<p>is that outdated? on <code>check_type_bounds</code></p>",
        "id": 276621138,
        "sender_full_name": "lcnr",
        "timestamp": 1648216184
    },
    {
        "content": "<p>When we create the <code>ParamEnv</code>, we add predicates that look something like <code>forall&lt;C&gt; { Normalize(&lt;VecFamily as Family&gt;::Member&lt;C&gt; =&gt; i32) }</code></p>",
        "id": 276621146,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276621138\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>We also can't normalize generic associated types (yet) because they contain bound parameters.</p>\n</blockquote>\n<p>is that outdated?</p>\n</blockquote>\n<p>I saw that when I wrote the doc...I think so</p>",
        "id": 276621211,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216204
    },
    {
        "content": "<p>When it's \"more correct\" to have <code>forall&lt;C&gt; { Normalize(&lt;VecFamily as Family&gt;::Member&lt;C&gt; =&gt; i32) :- Implemented(C: Eq) }</code></p>",
        "id": 276621247,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216221
    },
    {
        "content": "<p>But we can't express the latter in rustc right now</p>",
        "id": 276621275,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216242
    },
    {
        "content": "<p>Can you explain the latter? I don't know what it means</p>",
        "id": 276621298,
        "sender_full_name": "oli",
        "timestamp": 1648216260
    },
    {
        "content": "<p>But the idea here is that the onus to prove <code>C: Eq</code> is on the <em>use</em> of <code>Family::Member</code></p>",
        "id": 276621338,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216277
    },
    {
        "content": "<p>So, it basically just means \"For any <code>C</code> we can normalize <code>Member&lt;C&gt;</code> to <code>i32</code>, but <em>only if <code>C: Eq</code> holds</em>\"</p>",
        "id": 276621399,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216314
    },
    {
        "content": "<p>Gotcha, thanks. I had it inverted in my head and that made no sense</p>",
        "id": 276621472,
        "sender_full_name": "oli",
        "timestamp": 1648216340
    },
    {
        "content": "<p>(these are also Chalk-like rules, in rustc terms, these are <code>ProjectionPredicate</code>s)</p>",
        "id": 276621520,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216365
    },
    {
        "content": "<p>the assumption here is that, in the context of this check, we already know that <code>C: Eq</code> is implemented?</p>",
        "id": 276621583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648216407
    },
    {
        "content": "<p>I'm trying to remember this bit of logic</p>",
        "id": 276621592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648216415
    },
    {
        "content": "<p>I guess I should click your links :)</p>",
        "id": 276621612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648216432
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/661e8beec1fa5f3c58bf6e4362ae3c3fe0b4b1bd/compiler/rustc_typeck/src/check/compare_method.rs#L1240-L1275\">this code</a>?</p>",
        "id": 276621694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648216461
    },
    {
        "content": "<p>Well, the idea is that this associated type would be usable if <code>C: Eq</code> doesn't hold</p>",
        "id": 276621730,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216476
    },
    {
        "content": "<p>Yes, that</p>",
        "id": 276621768,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216495
    },
    {
        "content": "<p>This scheme of using bound vars to create predicates is also important because I do roughly the same thing in <a href=\"https://github.com/rust-lang/rust/issues/94911\">#94911</a> to check that the type used in a trait object with GATs meets the bounds on the GAT</p>",
        "id": 276621920,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216562
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/94911/files#diff-81e3c808e0059c6f3f23caabe2923b032b63d064d640b4222e1f37d8f1b79463R515\">here</a></p>",
        "id": 276622073,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216615
    },
    {
        "content": "<p>We've only got a few minutes left; one thing I am wondering about, and it would be good to document somewhere -- currently all GATs are not dyn safe, but we should write-up what the reasons for that are and how we would expect to lift that restriction</p>",
        "id": 276622083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648216618
    },
    {
        "content": "<p>Yes</p>",
        "id": 276622157,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216660
    },
    {
        "content": "<p>So, we haven't discussed it a ton, but there is some stuff on the chalk side</p>",
        "id": 276622311,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216723
    },
    {
        "content": "<p>see <a href=\"https://github.com/rust-lang/chalk/issues/203\">chalk#203</a> and <a href=\"https://github.com/rust-lang/chalk/blob/78beafb974709706b7ed2232231601bfcee66b2d/chalk-solve/src/clauses.rs#L1048\">https://github.com/rust-lang/chalk/blob/78beafb974709706b7ed2232231601bfcee66b2d/chalk-solve/src/clauses.rs#L1048</a></p>",
        "id": 276622321,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216730
    },
    {
        "content": "<p>right, ok</p>",
        "id": 276622392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648216760
    },
    {
        "content": "<p>Specially \"For trait objects with GATs, if we allow them in the future, check that the bounds are fully general (<code>dyn for&lt;'a&gt; StreamingIterator&lt;Item&lt;'a&gt; = &amp;'a ()&gt;</code> is OK, <code>dyn StreamingIterator&lt;Item&lt;'static&gt; = &amp;'static ()&gt;</code> is not).\"</p>",
        "id": 276622405,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216764
    },
    {
        "content": "<p>...very good, I should integrate that into my formality stuff...</p>",
        "id": 276622416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648216770
    },
    {
        "content": "<p>but yeah, this is definitely something I'm going to explain a bit in the stabilization post</p>",
        "id": 276622558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216812
    },
    {
        "content": "<p>(I think that the new approach I'm using to encode implied bounds <em>may</em> allow for a nicer solution, I can't remember the details though)</p>",
        "id": 276622597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648216825
    },
    {
        "content": "<p>Anyways, I think we're at the hour, and people want to attend the T-compiler meeting</p>",
        "id": 276622704,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216867
    },
    {
        "content": "<p>But the other type checking part here, <code>compare_type_predicate_entailment</code>, I don't think does anything special for GATs</p>",
        "id": 276622729,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216884
    },
    {
        "content": "<p>But, it might for where clauses, have to double check</p>",
        "id": 276622793,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216908
    },
    {
        "content": "<p>If people want, we can maybe do a second meeting where we finish off the items in the doc</p>",
        "id": 276622886,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216937
    },
    {
        "content": "<p>But I hope this meeting was helpful</p>",
        "id": 276622909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648216947
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>!</p>",
        "id": 276622980,
        "sender_full_name": "eholk",
        "timestamp": 1648216984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276622909\">said</a>:</p>\n<blockquote>\n<p>But I hope this meeting was helpful</p>\n</blockquote>\n<p>it was very helpful, both to learn about gat and because looking at <code>check_type_bounds</code> helped me figure out how to rework dropck xd</p>",
        "id": 276623019,
        "sender_full_name": "lcnr",
        "timestamp": 1648217006
    },
    {
        "content": "<p>nice</p>",
        "id": 276623042,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648217018
    },
    {
        "content": "<p>which is something i was working on over the last few weeks but didn't figure out how to correctly deal with region obligations</p>",
        "id": 276623060,
        "sender_full_name": "lcnr",
        "timestamp": 1648217028
    },
    {
        "content": "<p>so that's really cool <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 276623073,
        "sender_full_name": "lcnr",
        "timestamp": 1648217038
    },
    {
        "content": "<p>thank you <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> for walking us through this!</p>",
        "id": 276623141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1648217053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276623019\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202022-03-25/near/276622909\">said</a>:</p>\n<blockquote>\n<p>But I hope this meeting was helpful</p>\n</blockquote>\n<p>it was very helpful, both to learn about gat and because looking at <code>check_type_bounds</code> helped me figure out how to rework dropck xd</p>\n</blockquote>\n<p>I'm glad it could help :)</p>",
        "id": 276623420,
        "sender_full_name": "Jack Huey",
        "timestamp": 1648217197
    }
]