[
    {
        "content": "<p>Is there a timeline on supporting:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">B</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">C</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 163566077,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555511636
    },
    {
        "content": "<p>that's lazy normalization</p>",
        "id": 163566160,
        "sender_full_name": "eddyb",
        "timestamp": 1555511660
    },
    {
        "content": "<p>yes, the same thing as [u8; size_of::&lt;T&gt;()]</p>",
        "id": 163566176,
        "sender_full_name": "eddyb",
        "timestamp": 1555511680
    },
    {
        "content": "<p>even for that case without generics ?</p>",
        "id": 163566191,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555511693
    },
    {
        "content": "<p>hmm</p>",
        "id": 163566214,
        "sender_full_name": "eddyb",
        "timestamp": 1555511711
    },
    {
        "content": "<p>we could add eagerly normalizing &lt;T&gt;::X types</p>",
        "id": 163566242,
        "sender_full_name": "eddyb",
        "timestamp": 1555511739
    },
    {
        "content": "<p>so maybe sooner than lazy normalization</p>",
        "id": 163566257,
        "sender_full_name": "eddyb",
        "timestamp": 1555511755
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 163566266,
        "sender_full_name": "eddyb",
        "timestamp": 1555511762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> but if we do this we would have two systems for the T::X syntax</p>",
        "id": 163566342,
        "sender_full_name": "eddyb",
        "timestamp": 1555511795
    },
    {
        "content": "<p>i mean, the issue has been open for like 6-7 years, and the last update is that it is blocked on chalk, but I really don't see what problem would chalk need to solve there</p>",
        "id": 163566344,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555511799
    },
    {
        "content": "<p>hehe</p>",
        "id": 163566355,
        "sender_full_name": "eddyb",
        "timestamp": 1555511814
    },
    {
        "content": "<p>the RFC was accepted like 7 years ago</p>",
        "id": 163566359,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555511817
    },
    {
        "content": "<p>so that is just awaiting implementation</p>",
        "id": 163566375,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555511825
    },
    {
        "content": "<p>blocked on chalk is code for lazy normalization</p>",
        "id": 163566381,
        "sender_full_name": "eddyb",
        "timestamp": 1555511827
    },
    {
        "content": "<p>sometimes</p>",
        "id": 163566388,
        "sender_full_name": "eddyb",
        "timestamp": 1555511835
    },
    {
        "content": "<p>I can imagine that this is true when generics are involved</p>",
        "id": 163566430,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555511882
    },
    {
        "content": "<p>we can try to do something sooner, there's just a risk it'd be backwards incompat with the real thing</p>",
        "id": 163566478,
        "sender_full_name": "eddyb",
        "timestamp": 1555511886
    },
    {
        "content": "<p>how far is lazy normalization ?</p>",
        "id": 163566525,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555511930
    },
    {
        "content": "<p>There's new movement on it since today: <a href=\"#narrow/stream/144729-wg-traits/topic/lazy.20normalization\" title=\"#narrow/stream/144729-wg-traits/topic/lazy.20normalization\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/lazy.20normalization</a></p>",
        "id": 163566758,
        "sender_full_name": "oli",
        "timestamp": 1555512066
    },
    {
        "content": "<blockquote>\n<p>there's just a risk it'd be backwards incompat with the real thing</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> hmm, why?</p>",
        "id": 163567079,
        "sender_full_name": "centril",
        "timestamp": 1555512272
    },
    {
        "content": "<p>and if so, let's please not rush this and do it properly</p>",
        "id": 163567086,
        "sender_full_name": "centril",
        "timestamp": 1555512279
    },
    {
        "content": "<p>I would really like to avoid the same fuckup that type aliases have</p>",
        "id": 163567118,
        "sender_full_name": "centril",
        "timestamp": 1555512304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> things like fallback (inherent -&gt; bounds -&gt; trait impls, etc.)</p>",
        "id": 163576392,
        "sender_full_name": "eddyb",
        "timestamp": 1555517900
    },
    {
        "content": "<p>ah</p>",
        "id": 163576466,
        "sender_full_name": "centril",
        "timestamp": 1555517952
    }
]