[
    {
        "content": "<p>suuure</p>",
        "id": 192425572,
        "sender_full_name": "eddyb",
        "timestamp": 1585677156
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/Collaborative-Summary-3-Fact-Finding-Pre-RFCs-around-Error-Handling-Reporting--AxN4Vp9FL_YIPyxQq0_Lm24YAQ-dnShKo1SsHtdF4Yheeoco\" title=\"https://paper.dropbox.com/doc/Collaborative-Summary-3-Fact-Finding-Pre-RFCs-around-Error-Handling-Reporting--AxN4Vp9FL_YIPyxQq0_Lm24YAQ-dnShKo1SsHtdF4Yheeoco\">https://paper.dropbox.com/doc/Collaborative-Summary-3-Fact-Finding-Pre-RFCs-around-Error-Handling-Reporting--AxN4Vp9FL_YIPyxQq0_Lm24YAQ-dnShKo1SsHtdF4Yheeoco</a></p>",
        "id": 192425585,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677165
    },
    {
        "content": "<p>I think I was fixing a bug 4 hours ago</p>",
        "id": 192425597,
        "sender_full_name": "eddyb",
        "timestamp": 1585677168
    },
    {
        "content": "<p>low key trying to get rid of backtraces</p>",
        "id": 192425633,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677184
    },
    {
        "content": "<p>speaking of debugging, I could never figure out how to show <code>debug</code> statements in rustc</p>",
        "id": 192425651,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585677189
    },
    {
        "content": "<p>not sure if good idea</p>",
        "id": 192425655,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677190
    },
    {
        "content": "<p>:(</p>",
        "id": 192425661,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585677193
    },
    {
        "content": "<p>at least for errors*</p>",
        "id": 192425742,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> have you considering abusing <code>#[track_caller]</code> like <span class=\"user-mention\" data-user-id=\"130111\">@anp</span> wants to?</p>",
        "id": 192425752,
        "sender_full_name": "eddyb",
        "timestamp": 1585677232
    },
    {
        "content": "<p>yes, adam is the person who inspired this whole thing</p>",
        "id": 192425815,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677245
    },
    {
        "content": "<p>oh you are mentioning some of that stuff hmm</p>",
        "id": 192425821,
        "sender_full_name": "eddyb",
        "timestamp": 1585677247
    },
    {
        "content": "<p>ah ok</p>",
        "id": 192425824,
        "sender_full_name": "eddyb",
        "timestamp": 1585677248
    },
    {
        "content": "<p>but the only way to do it with track_caller i think would be to encourage ppl to annotate <code>from</code> with it</p>",
        "id": 192425847,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677263
    },
    {
        "content": "<p>nope :)</p>",
        "id": 192425857,
        "sender_full_name": "eddyb",
        "timestamp": 1585677270
    },
    {
        "content": "<p>which wouldnt let you get location info on <code>From&lt;T&gt; -&gt; T</code> calls for <code>?</code></p>",
        "id": 192425867,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677277
    },
    {
        "content": "<p>you can put it on the trait method</p>",
        "id": 192425876,
        "sender_full_name": "eddyb",
        "timestamp": 1585677282
    },
    {
        "content": "<p>which trait method</p>",
        "id": 192425894,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677289
    },
    {
        "content": "<p>from_error?</p>",
        "id": 192425901,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677292
    },
    {
        "content": "<p>in the try trait?</p>",
        "id": 192425905,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/144729-wg-traits/topic/tracing.20in.20chalk/near/192425689\" title=\"#narrow/stream/144729-wg-traits/topic/tracing.20in.20chalk/near/192425689\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <code>debug-assertions = true</code></p>\n</blockquote>\n<p>oh that might be what I'm missing</p>",
        "id": 192425907,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585677296
    },
    {
        "content": "<p>whatever method you want</p>",
        "id": 192425917,
        "sender_full_name": "eddyb",
        "timestamp": 1585677299
    },
    {
        "content": "<p>people don't have to annotate it in <code>impl</code>s if you stick it in the <code>trait</code></p>",
        "id": 192425944,
        "sender_full_name": "eddyb",
        "timestamp": 1585677313
    },
    {
        "content": "<p>this is what we're doing with <code>Index</code> operators, for example</p>",
        "id": 192425959,
        "sender_full_name": "eddyb",
        "timestamp": 1585677321
    },
    {
        "content": "<p>okay but there needs to be a trait that is being used in the desugared <code>?</code></p>",
        "id": 192426004,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677343
    },
    {
        "content": "<p>well uhh there is</p>",
        "id": 192426032,
        "sender_full_name": "eddyb",
        "timestamp": 1585677359
    },
    {
        "content": "<p>I'm a bit confused</p>",
        "id": 192426081,
        "sender_full_name": "eddyb",
        "timestamp": 1585677366
    },
    {
        "content": "<p>eddy lets move to discord tho rq</p>",
        "id": 192426111,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/tracing.20in.20chalk/near/192425847\" title=\"#narrow/stream/144729-wg-traits/topic/tracing.20in.20chalk/near/192425847\">said</a>:</p>\n<blockquote>\n<p>but the only way to do it with track_caller i think would be to encourage ppl to annotate <code>from</code> with it</p>\n</blockquote>\n<p>like what does <code>from</code> here refer to?</p>",
        "id": 192426113,
        "sender_full_name": "eddyb",
        "timestamp": 1585677384
    },
    {
        "content": "<p>i dont wanna spam this channel with unrelated stuff</p>",
        "id": 192426121,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677387
    },
    {
        "content": "<p>this is Zulip, you can split topics</p>",
        "id": 192426137,
        "sender_full_name": "eddyb",
        "timestamp": 1585677395
    },
    {
        "content": "<p>even retroactively :P</p>",
        "id": 192426162,
        "sender_full_name": "eddyb",
        "timestamp": 1585677410
    },
    {
        "content": "<p>oh what</p>",
        "id": 192426191,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677423
    },
    {
        "content": "<p>that's why anyone puts up with the terrible UX</p>",
        "id": 192426214,
        "sender_full_name": "eddyb",
        "timestamp": 1585677434
    },
    {
        "content": "<p>well im not sure how to do it with zulip, how do i retroactively make these msgs part of a new topic?</p>",
        "id": 192426264,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677460
    },
    {
        "content": "<p>just did</p>",
        "id": 192426410,
        "sender_full_name": "eddyb",
        "timestamp": 1585677515
    },
    {
        "content": "<p>you go to edit a message, apparently I can do this to other people's messages too</p>",
        "id": 192426437,
        "sender_full_name": "eddyb",
        "timestamp": 1585677532
    },
    {
        "content": "<p>wild</p>",
        "id": 192426568,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677600
    },
    {
        "content": "<p>I don't think just anyone can. Only certain people</p>",
        "id": 192426615,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585677604
    },
    {
        "content": "<p>okay well</p>",
        "id": 192426652,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677619
    },
    {
        "content": "<p>back to original question &gt; what does <code>from</code> here refer too</p>",
        "id": 192426672,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677627
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">Try</span>::<span class=\"n\">into_result</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">expr</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"cp\">#[allow(unreachable_code)]</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"cp\">#[allow(unreachable_code)]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">From</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// the compiler should insantiate a Location to represent the</span>\n<span class=\"w\">        </span><span class=\"c1\">// position of the `?` in the source file</span>\n<span class=\"w\">        </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">track</span><span class=\"p\">(</span><span class=\"o\">&lt;&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">panic</span>::<span class=\"n\">Location</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">in_enclosing_try</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"nl\">&#39;catch_target</span><span class=\"w\"> </span><span class=\"n\">Try</span>::<span class=\"n\">from_error</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">Try</span>::<span class=\"n\">from_error</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 192426705,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677649
    },
    {
        "content": "<p>this is with the theoretical specialization using Tracked trait that gives a track fn</p>",
        "id": 192426763,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677677
    },
    {
        "content": "<p>but ignore the .track line</p>",
        "id": 192426767,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677682
    },
    {
        "content": "<p>if you used <code>#[track_caller]</code> on the From::from call</p>",
        "id": 192426781,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677692
    },
    {
        "content": "<p>this is already possible</p>",
        "id": 192426786,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677695
    },
    {
        "content": "<p>like you could just store the location info in your error type and make your own error return trace, tho getting it back out of the dyn Error afterwards is impossible without knowing the types you want to downcast too (unless we impl my other proposal for generic member access on dyn Error trait objects :D)</p>",
        "id": 192426902,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677738
    },
    {
        "content": "<p>but we can't use track_caller on <code>from_error</code> because it could only pass the info to the Result or w/e</p>",
        "id": 192427003,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585677803
    },
    {
        "content": "<p>hmm what I was trying to say is that <code>#[track_caller]</code> can be added to the declaration of the method in the trait</p>",
        "id": 192427348,
        "sender_full_name": "eddyb",
        "timestamp": 1585677953
    },
    {
        "content": "<p>but you probably know that already</p>",
        "id": 192427361,
        "sender_full_name": "eddyb",
        "timestamp": 1585677958
    },
    {
        "content": "<p>the hard part is getting people to <em>grab</em> the <code>Location::caller()</code>, right?</p>",
        "id": 192427415,
        "sender_full_name": "eddyb",
        "timestamp": 1585677970
    },
    {
        "content": "<p>yea, I figured if I have to add a trait it would be better to just make the Location explicitly part of the API</p>",
        "id": 192427495,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678011
    },
    {
        "content": "<p>because i think thats more ergonomic than requiring ppl to know about this special intrinsic thing they can call or w/e</p>",
        "id": 192427524,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585678027
    },
    {
        "content": "<p>yeah i think that for errors making the chain construction somehow visible seems fine</p>",
        "id": 192428805,
        "sender_full_name": "anp",
        "timestamp": 1585678588
    },
    {
        "content": "<p>tbh i've been wondering about whether there's something like</p>\n<div class=\"codehilite\"><pre><span></span>enum Result&lt;T, E&gt; {\n    Ok(T),\n    Err {\n        source_loc: &amp;&#39;static Location,\n        context: dyn Debug,\n        error: E,\n    },\n}\n</pre></div>",
        "id": 192429017,
        "sender_full_name": "anp",
        "timestamp": 1585678689
    },
    {
        "content": "<p>most of the problems you've cited jane have been due to needing to teach every wrapper how to propagate the location right</p>",
        "id": 192429062,
        "sender_full_name": "anp",
        "timestamp": 1585678715
    },
    {
        "content": "<p>can std use specialization? could make it so result propagates the location to errors it carries when the yimplement a certain trait</p>",
        "id": 192429146,
        "sender_full_name": "anp",
        "timestamp": 1585678755
    },
    {
        "content": "<p><code>std</code> can and has done so for years, but it's tricky to let users control it, soundly</p>",
        "id": 192429702,
        "sender_full_name": "eddyb",
        "timestamp": 1585678994
    },
    {
        "content": "<p>I dont see how a result with more info solves the problem, especially because now it has one storage location for a dyn Debug and a single location</p>",
        "id": 192430537,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679395
    },
    {
        "content": "<p>i think the fact that rust has users define their own storage strategy for information related to errors is one of the biggests strengths of its error handling story</p>",
        "id": 192430651,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585679421
    },
    {
        "content": "<p>is there a way that having <code>#[track_caller]</code> on the right methods for result would let contained types do the right tracking?</p>",
        "id": 192453922,
        "sender_full_name": "anp",
        "timestamp": 1585691110
    },
    {
        "content": "<p>not that I know of, centril mentioned moving the <code>From</code> call into another function specifically when using <code>?</code> on result</p>",
        "id": 192458820,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585692073
    },
    {
        "content": "<p>(i may have misunderstood what he was saying)</p>",
        "id": 192458829,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585692080
    },
    {
        "content": "<p>and so in theory this wrapping function would probably want #[track_caller]</p>",
        "id": 192458838,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585692089
    },
    {
        "content": "<p>but i dont think it changes the semantics</p>",
        "id": 192458852,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585692101
    },
    {
        "content": "<p>you need some function call on the inner type that happens on every <code>?</code></p>",
        "id": 192458875,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585692118
    },
    {
        "content": "<p>right now I think <code>From</code> is the only thing that fits the bill</p>",
        "id": 192458952,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585692142
    },
    {
        "content": "<p>i wonder if the processing of <code>?</code> expressions happens after trait information is avaialble</p>",
        "id": 192458980,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585692173
    },
    {
        "content": "<p>it would be cool if the compiler could support types that implement the tracking trait and types that dont</p>",
        "id": 192459000,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585692191
    },
    {
        "content": "<p>sounds kinda magical though</p>",
        "id": 192459015,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585692200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20logging.20story/near/192458980\" title=\"#narrow/stream/144729-wg-traits/topic/rustc.20logging.20story/near/192458980\">said</a>:</p>\n<blockquote>\n<p>i wonder if the processing of <code>?</code> expressions happens after trait information is avaialble</p>\n</blockquote>\n<p>no, you have name resolution, but it's pre-type/trait-system</p>",
        "id": 192473359,
        "sender_full_name": "eddyb",
        "timestamp": 1585703475
    },
    {
        "content": "<p>you can just use specialization or add some special thing that typeck special-cases I suppose</p>",
        "id": 192473388,
        "sender_full_name": "eddyb",
        "timestamp": 1585703519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20logging.20story/near/192458980\" title=\"#narrow/stream/144729-wg-traits/topic/rustc.20logging.20story/near/192458980\">said</a>:</p>\n<blockquote>\n<p>i wonder if the processing of <code>?</code> expressions happens after trait information is avaialble</p>\n</blockquote>\n<p>Processing <code>?</code> happens in rustc_ast_lowering from AST =&gt; HIR, and as <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> notes there is no type info there</p>",
        "id": 192571468,
        "sender_full_name": "centril",
        "timestamp": 1585765341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20logging.20story/near/192473388\" title=\"#narrow/stream/144729-wg-traits/topic/rustc.20logging.20story/near/192473388\">said</a>:</p>\n<blockquote>\n<p>you can just use specialization or add some special thing that typeck special-cases I suppose</p>\n</blockquote>\n<p>Specialization is only used for performance in the standard library; not for anything that exposes semantic differences</p>",
        "id": 192571534,
        "sender_full_name": "centril",
        "timestamp": 1585765376
    },
    {
        "content": "<p>fair enough</p>",
        "id": 192571569,
        "sender_full_name": "eddyb",
        "timestamp": 1585765394
    },
    {
        "content": "<p>although didn't we add something for opportunistic <code>fmt::Debug</code>?</p>",
        "id": 192571593,
        "sender_full_name": "eddyb",
        "timestamp": 1585765405
    },
    {
        "content": "<p>either way I don't see how this can be accomplished well prior to specialization being stabilized</p>",
        "id": 192582971,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585770440
    },
    {
        "content": "<p>like, short term we could maybe slap #[track_caller] on <code>Result</code>s <code>Try::from_error</code> impl assuming that it calls <code>From::from</code> from inside that fn, and then users could already put <code>#[track_caller]</code> on their own From call,</p>",
        "id": 192583095,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585770493
    },
    {
        "content": "<p>and you'd at least get the conversion point super cheaply</p>",
        "id": 192583139,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585770522
    },
    {
        "content": "<p>with that + generic member access you could already get a pretty decent trace</p>",
        "id": 192583362,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585770640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> / <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> do you think slapping track_caller on the necessary Try fns would something that could be done without an RFC?</p>",
        "id": 192583430,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585770687
    },
    {
        "content": "<p>mmmaybe</p>",
        "id": 192583456,
        "sender_full_name": "eddyb",
        "timestamp": 1585770706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/144729-wg-traits/topic/rustc.20logging.20story/near/192571593\" title=\"#narrow/stream/144729-wg-traits/topic/rustc.20logging.20story/near/192571593\">said</a>:</p>\n<blockquote>\n<p>although didn't we add something for opportunistic <code>fmt::Debug</code>?</p>\n</blockquote>\n<p>nope</p>",
        "id": 192583460,
        "sender_full_name": "centril",
        "timestamp": 1585770709
    },
    {
        "content": "<p>or maybe with the RFC for the full return traces, and then do the track_caller change as a precursor</p>",
        "id": 192583525,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585770733
    },
    {
        "content": "<p>or actually its probably okay to do the specialization dependent version behind a feature flag huh</p>",
        "id": 192583546,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585770746
    },
    {
        "content": "<p>im just gonna write the damn rfcs</p>",
        "id": 192583568,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585770757
    },
    {
        "content": "<p>just so nervous about the process &gt;_&lt;</p>",
        "id": 192583595,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585770771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> but not nervous enough to not write RFCs for years <em>cough</em> like some people <em>cough</em></p>",
        "id": 192586881,
        "sender_full_name": "eddyb",
        "timestamp": 1585772179
    },
    {
        "content": "<p>i think im gonna move forward with 2 of the rfcs this week and draft proper rfcs</p>",
        "id": 192586916,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585772203
    },
    {
        "content": "<p>so yea not too nervous</p>",
        "id": 192586965,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585772229
    },
    {
        "content": "<p>like i feel like the ideas are all solid and useful and easy enough to implement where I should be able to get that done myself once its approved</p>",
        "id": 192587023,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585772253
    },
    {
        "content": "<p>worth noting that the trait semantics for track_caller haven't been approved to stabilize yet (working on report in the am's)</p>",
        "id": 192590513,
        "sender_full_name": "anp",
        "timestamp": 1585773899
    },
    {
        "content": "<p>/me quietly slides this link across the table</p>",
        "id": 192610134,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585788710
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/2895\" title=\"https://github.com/rust-lang/rfcs/pull/2895\">https://github.com/rust-lang/rfcs/pull/2895</a></p>",
        "id": 192610136,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585788711
    }
]