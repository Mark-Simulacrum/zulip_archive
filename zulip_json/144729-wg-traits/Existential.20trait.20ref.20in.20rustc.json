[
    {
        "content": "<p>Did some work on moving rustc's version to be more like Chalk.<br>\nSee <a href=\"https://github.com/rust-lang/rust/issues/79945\">#79945</a><br>\n<span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 219656153,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607717610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I saw your comment on this PR (about how <code>skip_binder</code> is probably okay when sorting), but I realized I couldn't convince <em>myself</em> that was okay, because I had no clue why that's there and how there might be duplicate predicates. (And as such, whether eventually <code>^0.0</code> and <code>'^0.0</code> could be different.)</p>",
        "id": 219871899,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607965921
    },
    {
        "content": "<p>When I first got around to that, my reasoning was \"well, at this point, <code>Binder</code>s would have already been skipped somewhere, so it's okay to skip now\". But that's not <em>really</em> the case (could have replaced with placeholders, for example).</p>",
        "id": 219872061,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607965991
    },
    {
        "content": "<p>But anyways, that led me down the path of looking for why that was added in the first place and that was a rabbit hole. I think I've almost come up with an explanation for myself.</p>",
        "id": 219872220,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607966054
    },
    {
        "content": "<p>But, I realized that the test that this was trying to fix is <em>really</em> fragile.</p>",
        "id": 219872608,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607966234
    },
    {
        "content": "<p>isn't that trivially ok because we don't actually look at bound variables in <code>stable_cmp</code>?</p>",
        "id": 219875170,
        "sender_full_name": "lcnr",
        "timestamp": 1607967378
    },
    {
        "content": "<p>the implementation of <code>stable_cmp</code> does not care about anything apart from the relevant <code>DefId</code></p>",
        "id": 219875611,
        "sender_full_name": "lcnr",
        "timestamp": 1607967599
    },
    {
        "content": "<p>on that note, it might be nice to revive <a href=\"https://github.com/rust-lang/rust/issues/73815\">#73815</a> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 219875761,
        "sender_full_name": "lcnr",
        "timestamp": 1607967650
    },
    {
        "content": "<p>Well, that's a much easier thing to explain</p>",
        "id": 219876256,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607967874
    },
    {
        "content": "<p>I am going to write that then defer \"more interesting\" explanations for <a href=\"https://github.com/rust-lang/rust/issues/73815\">#73815</a> revival</p>",
        "id": 219876323,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607967904
    },
    {
        "content": "<p>:P</p>",
        "id": 219876326,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607967906
    },
    {
        "content": "<p>For a little bit longer idea of my thoughts here anyways: I think only <code>ExistentialProjection</code> predicates can be duplicated (not confirmed) and only when <code>dyn</code>. And from my experiments so far, I haven't actually been able to get late bound vars to appear there. Yes, GATs are a big potential source, but I haven't been able to get that to work yet.</p>",
        "id": 219877180,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607968255
    },
    {
        "content": "<blockquote>\n<p>And from my experiments so far, I haven't actually been able to get late bound vars to appear there.</p>\n</blockquote>\n<p>there == <code>ExistentialProjection</code> or am i misunderstanding something here</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">dyn</span><span class=\"w\">  </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219877695,
        "sender_full_name": "lcnr",
        "timestamp": 1607968486
    },
    {
        "content": "<p>Well, yes that's fine. The problem here is that the test uses a super trait with an associated type</p>",
        "id": 219877961,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607968628
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ec6044f725936e3a18362574c9fa3340\">This</a> is a little bit more minimized version of the test</p>",
        "id": 219878845,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607968979
    },
    {
        "content": "<p>You'll find it's difficult (I haven't been able to get it) to inject a late bound var into the <code>dyn</code> in <code>main</code></p>",
        "id": 219878940,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607969015
    },
    {
        "content": "<p>so something like <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0103f8299105579d1b04fdc61c3ffea1\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0103f8299105579d1b04fdc61c3ffea1</a> ?</p>",
        "id": 219879540,
        "sender_full_name": "lcnr",
        "timestamp": 1607969269
    },
    {
        "content": "<p>Hmm, that looks maybe like it works</p>",
        "id": 219879990,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607969463
    },
    {
        "content": "<p>(The fact that you get an error here says to me the current workaround doesn't work 100% of the time)</p>",
        "id": 219880067,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607969508
    },
    {
        "content": "<p>maybe</p>",
        "id": 219880086,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607969516
    },
    {
        "content": "<p>But, now, to extend this, we would have to find a way to inject a <em>second</em> late bound var, somewhere else</p>",
        "id": 219880181,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607969546
    },
    {
        "content": "<p>Just that <code>S = &amp;'a ()</code> and it <code>S = &amp;'b ()</code> are both predicates but come from <em>different</em> <code>for&lt;&gt;</code> (so that their binder indices are the same)</p>",
        "id": 219880308,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607969620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Existential.20trait.20ref.20in.20rustc/near/219880067\">said</a>:</p>\n<blockquote>\n<p>(The fact that you get an error here says to me the current workaround doesn't work 100% of the time)</p>\n</blockquote>\n<p>(The fact that you get an error here says to me that we should forbid specifying <code>S</code> here because it's already specified in the trait decl) <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 219880520,
        "sender_full_name": "lcnr",
        "timestamp": 1607969718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Existential.20trait.20ref.20in.20rustc/near/219880067\">said</a>:</p>\n<blockquote>\n<p>(The fact that you get an error here says to me the current workaround doesn't work 100% of the time)</p>\n</blockquote>\n<p>See the note:</p>\n<div class=\"codehilite\"><pre><span></span><code>note: expected struct `Box&lt;dyn for&lt;&#39;a&gt; HttpService&lt;&#39;a, _, S = &amp;&#39;a (), S = _&gt;&gt;`\n              found struct `Box&lt;dyn for&lt;&#39;a&gt; HttpService&lt;&#39;a, _, S = _&gt;&gt;`\n</code></pre></div>\n<p>Those two <em>should</em> unify fine</p>",
        "id": 219880538,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607969727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Existential.20trait.20ref.20in.20rustc/near/219880520\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Existential.20trait.20ref.20in.20rustc/near/219880067\">said</a>:</p>\n<blockquote>\n<p>(The fact that you get an error here says to me the current workaround doesn't work 100% of the time)</p>\n</blockquote>\n<p>(The fact that you get an error here says to me that we should forbid specifying <code>S</code> here because it's already specified in the trait decl) <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>Yeah, I thought about this. I'm not sure what the expected semantics are. Should you never be able to respecify? Only respecify when they are <em>compatible</em> (what if one is a subtype of another)? Or if you respecify, it completely ignores the super trait?</p>",
        "id": 219880792,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607969846
    },
    {
        "content": "<p>i would expect that you shouldn't be able to respecify at all</p>",
        "id": 219880848,
        "sender_full_name": "lcnr",
        "timestamp": 1607969874
    },
    {
        "content": "<p>if i had an infinite amount of time i would implement this and open a lang mcp for this</p>",
        "id": 219880942,
        "sender_full_name": "lcnr",
        "timestamp": 1607969904
    },
    {
        "content": "<p>Currently, it seems like the second. But as we can see, it's not correct implementation, since both <code>_</code> and <code>&amp;'a ()</code> are technically <em>okay</em>, since we should eventually infer that <code>_ = &amp;'a ()</code>. But we \"catch\" that too early</p>",
        "id": 219881005,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607969948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Existential.20trait.20ref.20in.20rustc/near/219880942\">said</a>:</p>\n<blockquote>\n<p>if i had an infinite amount of time i would implement this and open a lang mcp for this</p>\n</blockquote>\n<p>Yeah, this is honestly a tricky case. (And also something definitely I feel like wg-traits should talk about)</p>",
        "id": 219881040,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607969974
    },
    {
        "content": "<p>I like to think that our Chalk work is a means to an end in terms of a better-defined Rust trait system</p>",
        "id": 219881160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607970019
    },
    {
        "content": "<p>Which is evidenced by our discussion of everything from implied bounds, to <code>Alias</code>, etc. etc.</p>",
        "id": 219881237,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607970081
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n  --&gt; src/lib.rs:20:62\n   |\n20 |     let _: Box&lt;dyn for&lt;&#39;a&gt; HttpService&lt;&#39;a, _, S = &amp;&#39;a ()&gt;&gt; = make_server();\n   |            -----------------------------------------------   ^^^^^^^^^^^^^ expected trait `HttpService&lt;RePlaceholder(Placeholder { universe: U1, name: BrNamed(DefId(0:17 ~ wtf[652d]::main::&#39;a), &#39;a) }), _#0t, S = &amp;RePlaceholder(Placeholder { universe: U1, name: BrNamed(DefId(0:17 ~ wtf[652d]::main::&#39;a), &#39;a) }) (), S = _#1t&gt;`, found trait `HttpService&lt;&#39;_#2r, _#2t, S = _#3t&gt;`\n   |            |\n   |            expected due to this\n   |\n   = note: expected struct `Box&lt;(dyn for&lt;&#39;a&gt; HttpService&lt;ReLateBound(DebruijnIndex(0), BrNamed(DefId(0:17 ~ wtf[652d]::main::&#39;a), &#39;a)), _#0t, S = &amp;ReLateBound(DebruijnIndex(0), BrNamed(DefId(0:17 ~ wtf[652d]::main::&#39;a), &#39;a)) (), S = _#1t&gt; + &#39;_#0r)&gt;`\n              found struct `Box&lt;(dyn for&lt;&#39;a&gt; HttpService&lt;ReLateBound(DebruijnIndex(0), BrNamed(DefId(0:15 ~ wtf[652d]::make_server::&#39;a), &#39;a)), _#2t, S = _#3t&gt; + &#39;_#1r)&gt;`\n</code></pre></div>",
        "id": 219881256,
        "sender_full_name": "lcnr",
        "timestamp": 1607970097
    },
    {
        "content": "<p>do we fail to unify <code>BrNamed(DefId(0:17 ~ wtf[652d]::main::'a)</code> with <code>BrNamed(DefId(0:15 ~ wtf[652d]::make_server::'a)</code>?</p>",
        "id": 219881606,
        "sender_full_name": "lcnr",
        "timestamp": 1607970245
    },
    {
        "content": "<p>i don't think so</p>",
        "id": 219881637,
        "sender_full_name": "lcnr",
        "timestamp": 1607970262
    },
    {
        "content": "<p>ah, we use <code>dedup</code> instead of <code>dedup_by</code> in <code>relate</code> rn</p>",
        "id": 219881957,
        "sender_full_name": "lcnr",
        "timestamp": 1607970405
    },
    {
        "content": "<p>that's why this currently fails</p>",
        "id": 219881965,
        "sender_full_name": "lcnr",
        "timestamp": 1607970411
    },
    {
        "content": "<p><code>dedup_by</code> using what as key?</p>",
        "id": 219882011,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607970442
    },
    {
        "content": "<p><code>stable_cmp</code></p>",
        "id": 219882023,
        "sender_full_name": "lcnr",
        "timestamp": 1607970449
    },
    {
        "content": "<p>Hmm</p>",
        "id": 219882056,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607970464
    },
    {
        "content": "<p>this is what i do eagerly in <a href=\"https://github.com/rust-lang/rust/issues/73815\">#73815</a></p>",
        "id": 219882079,
        "sender_full_name": "lcnr",
        "timestamp": 1607970476
    },
    {
        "content": "<p>Yes, I saw</p>",
        "id": 219882131,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607970487
    },
    {
        "content": "<p>but because there are ways to have multiple <code>ProjectionPredicate</code> for identical assoc items we were uncomfortable with landing that change</p>",
        "id": 219882183,
        "sender_full_name": "lcnr",
        "timestamp": 1607970508
    },
    {
        "content": "<p>The problem is I think that <code>dedup_by</code> with <code>stable_cmp</code>is only okay if we compare actual traits</p>",
        "id": 219882195,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607970515
    },
    {
        "content": "<p>(which you do in that PR but not currently)</p>",
        "id": 219882216,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607970521
    },
    {
        "content": "<p>uh, actually, would <code>dedup_by</code> with <code>stable_cmp</code> even fix this?</p>",
        "id": 219882685,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607970736
    },
    {
        "content": "<p>I don't think so? Since <code>_#1t</code> here is an infer type. So it won't be deduped with <code>&amp;'a ()</code>. And so they will have a different number of predicates and fail to relate</p>",
        "id": 219882763,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607970780
    },
    {
        "content": "<p>Actually, yeah. Because <code>stable_cmp</code> only cares about <code>S = ...</code>. Which is scary because which <code>S = ...</code> is <em>first</em> is the one that is used</p>",
        "id": 219891254,
        "sender_full_name": "Jack Huey",
        "timestamp": 1607974394
    },
    {
        "content": "<p>yeah, exactly <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 219905687,
        "sender_full_name": "lcnr",
        "timestamp": 1607981930
    }
]