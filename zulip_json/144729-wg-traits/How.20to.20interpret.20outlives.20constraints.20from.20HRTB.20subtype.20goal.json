[
    {
        "content": "<p>The following Chalk test case is a one-way version of <a href=\"https://github.com/rust-lang/chalk/blob/977b0a5e3aec60cc70c1ef3783b68ad506e57c04/tests/test/subtype.rs#L80-L88\">this one</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Subtype</span><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">yields</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"Unique; for&lt;?U1&gt; { substitution [], lifetime constraints [\\</span>\n<span class=\"s\">        InEnvironment { environment: Env([]), goal: '!1_0: '^0.0 }, \\</span>\n<span class=\"s\">        InEnvironment { environment: Env([]), goal: '!1_1: '^0.0 }\\</span>\n<span class=\"s\">    ] }\"</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>To my untrained eye, this goal should be true unconditionally. How am I supposed to interpret the resulting bounds? I think I understand how they arise: We convert the <code>for&lt;'c&gt;</code> on the left-hand side to <code>exists&lt;'c&gt;</code> (still unsure of the name of this rule), then convert to prenex normal form and solve. However, I don't understand how to make use of them</p>",
        "id": 265763320,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640145069
    },
    {
        "content": "<p>I don't know the answer to your question, but if I can talk through it a bit: The goal here should be solved like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span>: <span class=\"o\">'</span><span class=\"na\">c</span> <span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't know how to read those skolemized printouts, but my impression is that the output is equivalent to this last expression. And AFAIK this statement is true unconditionally.</p>",
        "id": 265765952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640148446
    },
    {
        "content": "<p>(BTW, is there any documentation in e.g. the chalk book for how to read those <code>'!1_0: '^0.0</code> goals? I can make some educated guesses but it seems like a good candidate for a page of the book.)</p>",
        "id": 265766132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640148704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265765952\">said</a>:</p>\n<blockquote>\n<p>I don't know the answer to your question, but if I can talk through it a bit: The goal here should be solved like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span>: <span class=\"o\">'</span><span class=\"na\">c</span> <span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't know how to read those skolemized printouts, but my impression is that the output is equivalent to this last expression. And AFAIK this statement is true unconditionally.</p>\n</blockquote>\n<p>This looks right, but this has always been a bit...lost upon me. Niko would be able to explain better.</p>",
        "id": 265766257,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640148852
    },
    {
        "content": "<p>Heh <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span>, I grepped for debug impls. <code>!0_1</code> is the placeholder variable in universe 0 with index 1 , <code>^0.1</code> is a bound variable in universe 0 with index 1 (<code>'b</code> in forall&lt;'a, 'b&gt;).</p>",
        "id": 265766265,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640148873
    },
    {
        "content": "<p>(Though, the final statement there is precisely what the constraints are)</p>",
        "id": 265766267,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640148876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265766265\">said</a>:</p>\n<blockquote>\n<p>Heh <span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span>, I grepped for debug impls. <code>!0_1</code> is the placeholder variable in universe 0 with index 1 , <code>^0.1</code> is a bound variable in universe 0 with index 1 (<code>'b</code> in forall&lt;'a, 'b&gt;).</p>\n</blockquote>\n<p>This is pretty close. In <code>^0.1</code>, <code>0</code> is the debruijn, not universe.</p>",
        "id": 265766282,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640148913
    },
    {
        "content": "<p>Found this: <a href=\"https://rust-lang.github.io/chalk/book/glossary.html#de-bruijn-index\">https://rust-lang.github.io/chalk/book/glossary.html#de-bruijn-index</a></p>",
        "id": 265766298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640148943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265765952\">said</a>:</p>\n<blockquote>\n<p>I don't know the answer to your question, but if I can talk through it a bit: The goal here should be solved like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span>:<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span>: <span class=\"o\">'</span><span class=\"na\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span>: <span class=\"o\">'</span><span class=\"na\">c</span> <span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't know how to read those skolemized printouts, but my impression is that the output is equivalent to this last expression. And AFAIK this statement is true unconditionally.</p>\n</blockquote>\n<p>As <span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> has already figured out, this is a prelude to integrating the QE stuff into chalk.</p>",
        "id": 265766343,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640148992
    },
    {
        "content": "<p>It still seems unnecessarily opaque to print things like this. I would at least use a notation like <code>forall&lt;v0_0, v0_1&gt; exists&lt;v1_0&gt;{ 'v0_0: 'v1_0, 'v0_1: 'v1_0 }</code></p>",
        "id": 265766363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640149034
    },
    {
        "content": "<p>We can ignore universes for simple subset goals (like the one in my example), but things probably get more complex when actual trait solving is involved</p>",
        "id": 265766433,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640149157
    },
    {
        "content": "<p>And I was hoping for some info on how we handle cases like this one from the test suite:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">Ref</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ref</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ref</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">)</span>: <span class=\"nb\">Eq</span><span class=\"o\">&lt;</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">Ref</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ref</span><span class=\"o\">&lt;'</span><span class=\"na\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ref</span><span class=\"o\">&lt;'</span><span class=\"na\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265766668,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640149335
    },
    {
        "content": "<p>Assuming I have read the meanings of \"placeholder\" and \"bound variable\" correctly, it seems like the output is in fact <code>for&lt;'c&gt; { 'a: 'c, 'b: 'c }</code> where <code>'a</code> and <code>'b</code> are fixed (i.e. universally quantified). But if <code>for</code> is to be read as <code>forall</code> then this is not the same as the goal I wrote, which has an <code>exists&lt;'c&gt;</code> instead</p>",
        "id": 265766672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640149356
    },
    {
        "content": "<p>Though I thought there was an easier one.</p>",
        "id": 265766674,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640149362
    },
    {
        "content": "<p>Unless this is one of those sat things where the goal is negated and we're proving unsat</p>",
        "id": 265766688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640149406
    },
    {
        "content": "<p>Does Chalk treats placeholders and existentials interchangably?</p>",
        "id": 265766777,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640149494
    },
    {
        "content": "<p>Like, they're implicitly existentially quantified?</p>",
        "id": 265766785,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640149511
    },
    {
        "content": "<p>Oh, I think you might be right... it would make sense if it was <code>exists&lt;'a, 'b&gt; forall&lt;'c&gt; ...</code></p>",
        "id": 265766800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640149548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265766672\">said</a>:</p>\n<blockquote>\n<p>Assuming I have read the meanings of \"placeholder\" and \"bound variable\" correctly, it seems like the output is in fact <code>for&lt;'c&gt; { 'a: 'c, 'b: 'c }</code> where <code>'a</code> and <code>'b</code> are fixed (i.e. universally quantified). But if <code>for</code> is to be read as <code>forall</code> then this is not the same as the goal I wrote, which has an <code>exists&lt;'c&gt;</code> instead</p>\n</blockquote>\n<p>This <code>for</code> here <em>might</em> be existential. Generally, no, placeholders and existentitals aren't the same, I don't think.</p>",
        "id": 265766801,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640149549
    },
    {
        "content": "<p>and now I'm doubting my derivation. Is there a reference for the rules on solving subtyping relations on <code>for&lt;_&gt; fn</code>?</p>",
        "id": 265766859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640149623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265766859\">said</a>:</p>\n<blockquote>\n<p>and now I'm doubting my derivation. Is there a reference for the rules on solving subtyping relations on <code>for&lt;_&gt; fn</code>?</p>\n</blockquote>\n<p>one sec, I'll point to the code</p>",
        "id": 265766930,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640149707
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/884cd715c6a168afd6723d4f248b919d1e0cb842/chalk-solve/src/infer/unify.rs#L393\">https://github.com/rust-lang/chalk/blob/884cd715c6a168afd6723d4f248b919d1e0cb842/chalk-solve/src/infer/unify.rs#L393</a></p>",
        "id": 265766941,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640149739
    },
    {
        "content": "<p>Hm, that seems to match my derivation. So I'm not sure how the exists and forall are coming out flipped</p>",
        "id": 265767038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640149902
    },
    {
        "content": "<p>Do <code>:</code> (outlives) and <code>&lt;:</code> (subtype) go the same direction? They do right?</p>",
        "id": 265767181,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640150083
    },
    {
        "content": "<p>I think it's right if the <code>for&lt;?U1&gt;</code> is really an <code>exists</code>. And the \"<code>forall</code>\" is implicit (they're now placeholders <code>1_0</code> and <code>1_1</code>)</p>",
        "id": 265767205,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640150119
    },
    {
        "content": "<p>Nope</p>",
        "id": 265767210,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640150130
    },
    {
        "content": "<p><code>'static: 'a</code> =&gt; <code>'static &lt;: 'a</code></p>",
        "id": 265767217,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640150151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265767210\">said</a>:</p>\n<blockquote>\n<p>Nope</p>\n</blockquote>\n<p>That's why Mario used <code>:&gt;</code> above I guess, so they would agree.</p>",
        "id": 265767256,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640150171
    },
    {
        "content": "<p>But the original problem had the single lifetime HRTB as the subset and the double lifetime as the superset, whereas Mario's has them flipped, right?</p>",
        "id": 265767293,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640150245
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 265767343,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640150287
    },
    {
        "content": "<p>In the test output, <code>'a</code> and <code>'b</code> are <code>!1_0</code> and <code>!1_1</code>; <code>'c</code> is <code>^0.0</code></p>",
        "id": 265767355,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640150318
    },
    {
        "content": "<p>So, <code>forall&lt;'a, 'b&gt; exists&lt;'c&gt; { 'a: 'c, 'b: 'c }</code> becomes something like <code>exists&lt;'_&gt; { '!1_0: '^0.0, '1_1: '^0.0 }</code></p>",
        "id": 265767390,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640150381
    },
    {
        "content": "<p>Oops, I didn't mean to flip the subtype relation</p>",
        "id": 265767482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640150494
    },
    {
        "content": "<p>pretend I wrote <code>&lt;:</code> not <code>:&gt;</code></p>",
        "id": 265767532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640150535
    },
    {
        "content": "<p>but there shouldn't be any flipping with covariant lifetimes; <code>&amp;'a u32 &lt;: &amp;'b u32</code> iff <code>'a: 'b</code></p>",
        "id": 265767548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640150583
    },
    {
        "content": "<p>wait, aren't function arguments contravariant?</p>",
        "id": 265767574,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640150636
    },
    {
        "content": "<p>yes, that one does flip</p>",
        "id": 265767614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640150645
    },
    {
        "content": "<p>I think I got that part right in my derivation</p>",
        "id": 265767623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640150658
    },
    {
        "content": "<p>You got that part right</p>",
        "id": 265767633,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640150671
    },
    {
        "content": "<p>But then at the end, you need to flip again to go from subset (<code>&lt;:</code>) to outlives (<code>:</code>)</p>",
        "id": 265767676,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640150742
    },
    {
        "content": "<p>I don't think so, per <a href=\"#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265767548\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265767548</a></p>",
        "id": 265767748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640150819
    },
    {
        "content": "<p>I think that's why they disagree</p>",
        "id": 265767749,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640150819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265767217\">said</a>:</p>\n<blockquote>\n<p><code>'static: 'a</code> =&gt; <code>'static &lt;: 'a</code></p>\n</blockquote>",
        "id": 265767771,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640150857
    },
    {
        "content": "<p>that seems to agree with me though</p>",
        "id": 265767777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640150870
    },
    {
        "content": "<p>there is no flipping</p>",
        "id": 265767787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640150874
    },
    {
        "content": "<p>that is, the outlives relation is the equivalent of subtyping for lifetimes</p>",
        "id": 265767792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640150881
    },
    {
        "content": "<p>I wouldn't usually use the <code>&lt;:</code> relation on lifetimes at all, but Jack's definition is reasonable in this context</p>",
        "id": 265767860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640150934
    },
    {
        "content": "<p>Oh, it does. That \"nope\" must have been for something else.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265767210\">said</a>:</p>\n<blockquote>\n<p>Nope</p>\n</blockquote>",
        "id": 265767865,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640150941
    },
    {
        "content": "<p>Wow. I'm off to  a poor start.</p>",
        "id": 265767878,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640150973
    },
    {
        "content": "<p>One thing that I might have still gotten confused about is what the original goal means. <code>(for&lt;'c&gt; fn(&amp;'c u32, &amp;'c u32)) :&gt; (for&lt;'a, 'b&gt; fn(&amp;'a u32, &amp;'b u32))</code> says that if you have <code>f: for&lt;'c&gt; fn(&amp;'c u32, &amp;'c u32)</code> then you can use it somewhere where <code>for&lt;'a, 'b&gt; fn(&amp;'a u32, &amp;'b u32)</code> is required, and that does not sound unconditionally true to me</p>",
        "id": 265767952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640151062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265767860\">said</a>:</p>\n<blockquote>\n<p>I wouldn't usually use the <code>&lt;:</code> relation on lifetimes at all, but Jack's definition is reasonable in this context</p>\n</blockquote>\n<p>True...</p>",
        "id": 265767962,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640151079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265767952\">said</a>:</p>\n<blockquote>\n<p>One thing that I might have still gotten confused about is what the original goal means. <code>(for&lt;'c&gt; fn(&amp;'c u32, &amp;'c u32)) :&gt; (for&lt;'a, 'b&gt; fn(&amp;'a u32, &amp;'b u32))</code> says that if you have <code>f: for&lt;'c&gt; fn(&amp;'c u32, &amp;'c u32)</code> then you can use it somewhere where <code>for&lt;'a, 'b&gt; fn(&amp;'a u32, &amp;'b u32)</code> is required, and that does not sound unconditionally true to me</p>\n</blockquote>\n<p>The test suite asserts that these types are equal.</p>",
        "id": 265768027,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640151144
    },
    {
        "content": "<p>So, both directions are true, which is surprising.</p>",
        "id": 265768039,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640151168
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/977b0a5e3aec60cc70c1ef3783b68ad506e57c04/tests/test/subtype.rs#L80-L88\">https://github.com/rust-lang/chalk/blob/977b0a5e3aec60cc70c1ef3783b68ad506e57c04/tests/test/subtype.rs#L80-L88</a></p>",
        "id": 265768041,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640151170
    },
    {
        "content": "<p>I believe I've seen Niko talk about why this is true before.</p>",
        "id": 265768061,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640151214
    },
    {
        "content": "<p>He has</p>",
        "id": 265768066,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640151229
    },
    {
        "content": "<p>If we do the subtyping relation that goes the other way, it works out like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">&lt;</span>: <span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">&lt;</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">&lt;</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">&lt;</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"kt\">u32</span> <span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">forall</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">c</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">c</span>: <span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and this one does look unconditionally true: given <code>'c</code> we can set <code>'a = 'b = 'c</code> to solve the goal</p>",
        "id": 265768089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640151242
    },
    {
        "content": "<p>He's explained it to at least once or twice and I still can't figure it out in my head</p>",
        "id": 265768116,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640151251
    },
    {
        "content": "<p>I guess you can solve the original direction using lifetime intersections. Given <code>'a</code> and <code>'b</code>, set <code>'c = 'a ∩ 'b</code> and then we get that <code>'a</code> and <code>'b</code> both outlive <code>'c</code> as desired</p>",
        "id": 265768217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640151384
    },
    {
        "content": "<p>(there is a lot of possibility for \"sign errors\" when working this out by hand...)</p>",
        "id": 265768239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640151435
    },
    {
        "content": "<p>This is NIko from 2016</p>\n<blockquote>\n<p>you can consider for&lt;'a&gt; fn(&amp;'a, &amp;'a) to be a subtype of for&lt;'b, 'c&gt; fn(&amp;'b, &amp;'c) because, no matter what regions 'b and 'c are instantated with when the function is called, 'a will just be the intersection of them.</p>\n</blockquote>",
        "id": 265768249,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640151450
    },
    {
        "content": "<p>So, what's up with the test case? Is it supposed to produce <code>True</code> as the result, or is it just producing a normalized goal before QE?</p>",
        "id": 265768316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640151502
    },
    {
        "content": "<p>I mean, Chalk doesn't necessarily know that these constraints might be trivially solvable</p>",
        "id": 265768418,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640151613
    },
    {
        "content": "<p>It's not Chalk's <em>job</em> to know</p>",
        "id": 265768425,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640151619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> After chalk generates the constraints, am I correct to assume that all placeholders not in the root universe came from an <code>exists</code> and all bound variables came from a <code>forall</code>?</p>",
        "id": 265768476,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640151709
    },
    {
        "content": "<p>I don't think placeholders come from an <code>exists</code></p>",
        "id": 265768549,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640151781
    },
    {
        "content": "<p>you might have that backwards</p>",
        "id": 265768578,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640151809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265768578\">said</a>:</p>\n<blockquote>\n<p>you might have that backwards</p>\n</blockquote>\n<p>Yes, it's reversed in my original test case. You're right. Is there some intuition for why that is?</p>",
        "id": 265768742,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1640152001
    },
    {
        "content": "<p>Does chalk's output syntax have constructors for forall and exists, or is it just <code>for</code>?</p>",
        "id": 265768803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640152089
    },
    {
        "content": "<p>I mean, I suppose everything <em>could</em> be bound vars (and have the explicit <code>forall</code> in the substitution/constraints)</p>",
        "id": 265768804,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640152094
    },
    {
        "content": "<p>both <code>forall</code> and <code>exists</code></p>",
        "id": 265768814,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640152128
    },
    {
        "content": "<p><code>for</code> is only used in a couple spots</p>",
        "id": 265768818,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640152139
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/884cd715c6a168afd6723d4f248b919d1e0cb842/chalk-parse/src/parser.lalrpop#L38\">https://github.com/rust-lang/chalk/blob/884cd715c6a168afd6723d4f248b919d1e0cb842/chalk-parse/src/parser.lalrpop#L38</a></p>",
        "id": 265768830,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640152161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265768425\">said</a>:</p>\n<blockquote>\n<p>It's not Chalk's <em>job</em> to know</p>\n</blockquote>\n<p>Right, this was my question. So Chalk does not do any actual solving of constraints, it just generates constraints IIUC</p>",
        "id": 265768837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640152186
    },
    {
        "content": "<p>Correct</p>",
        "id": 265768880,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640152205
    },
    {
        "content": "<p>That link looks like the input parser. Is output syntax (i.e. the <code>Unique; for&lt;?U1&gt; ...</code> thing that is printed in the test) using the same grammar?</p>",
        "id": 265768956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640152325
    },
    {
        "content": "<p>Ah right. Tbh I haven't looked at that in a while (if really ever). I don't think there will ever be a <code>forall</code>, just a <code>for</code> for \"exists\" and the placeholders for whatever the <code>forall</code> would be</p>",
        "id": 265769009,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640152442
    },
    {
        "content": "<p>Well, I guess there can be multiple universes that placeholders can be - which would correspond to either the HRTBs or <code>forall</code> goals, I suppose</p>",
        "id": 265769149,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640152666
    },
    {
        "content": "<p>In that case, I think the grammar is limited to <code>forall&lt;_&gt; exists&lt;_&gt; { ... }</code> statements (impress your friends by calling them <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"normal\">Π</mi><mn>1</mn><mn>0</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">\\Pi^0_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0622em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord\">Π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-2.4519em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span></span></span></span> sentences), although maybe that's not a problem if that is indeed all it takes to express rust WF goals</p>",
        "id": 265769205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640152726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/144729-wg-traits/topic/How.20to.20interpret.20outlives.20constraints.20from.20HRTB.20subtype.20goal/near/265769205\">said</a>:</p>\n<blockquote>\n<p>impress your friends by calling them <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"normal\">Π</mi><mn>1</mn><mn>0</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">\\Pi^0_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0622em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord\">Π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-2.4519em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span></span></span></span> sentences</p>\n</blockquote>\n<p>I so wish I had a more formal understanding of this area</p>",
        "id": 265769324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640152816
    },
    {
        "content": "<p>But yes, I think it's limited to <code>forall&lt;_&gt; exists&lt;_&gt; { ... }</code></p>",
        "id": 265769366,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640152849
    },
    {
        "content": "<p>Specifically, the final \"solution\" is a <code>Canonical&lt;Substitution&gt;</code></p>",
        "id": 265769384,
        "sender_full_name": "Jack Huey",
        "timestamp": 1640152877
    },
    {
        "content": "<p>Have a look at <a href=\"https://en.wikipedia.org/wiki/Arithmetical_hierarchy#The_arithmetical_hierarchy_of_formulas\">https://en.wikipedia.org/wiki/Arithmetical_hierarchy#The_arithmetical_hierarchy_of_formulas</a> if you are curious (but seriously, it's not all that useful except as linguistic shorthand for the cognoscenti)</p>",
        "id": 265769459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640152960
    }
]