[
    {
        "content": "<p>So I created an issue <a href=\"https://github.com/rust-lang-nursery/chalk/issues/219\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/219\">chalk#219</a> to describe some simple first steps on specialization. <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span>, you've previously expressed interest -- and this is indeed quite similar to the work you did on coherence earlier. Take a look.</p>",
        "id": 164820849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556910091
    },
    {
        "content": "<p>Perfect. I was just about to start this today. I'll take a look :)</p>",
        "id": 164820942,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556910136
    },
    {
        "content": "<p>I realize that I left some bits out -- like how do we determine <em>if</em> impl A specializes impl B</p>",
        "id": 164820972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556910167
    },
    {
        "content": "<p>(That's actually true I have a task for it <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>) <a href=\"/user_uploads/4715/g-Btb4Y6iJOIUxgGVXRNqPON/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/g-Btb4Y6iJOIUxgGVXRNqPON/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/g-Btb4Y6iJOIUxgGVXRNqPON/pasted_image.png\"></a></div>",
        "id": 164820999,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556910186
    },
    {
        "content": "<blockquote>\n<p>I realize that I left some bits out -- like how do we determine <em>if</em> impl A specializes impl B</p>\n</blockquote>\n<p>Are you going to add this to the issue or should we meet at some point (not today) to discuss everything?</p>",
        "id": 164821095,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556910266
    },
    {
        "content": "<p>I can add some notes; the TL;dr is that we have <em>some</em> Code for this, and i'd mostly like to 'ignore it' to start</p>",
        "id": 164821474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556910625
    },
    {
        "content": "<p>i.e., add some hacky sol'n if needed</p>",
        "id": 164821476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556910629
    },
    {
        "content": "<p>then circle back to it</p>",
        "id": 164821479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556910635
    },
    {
        "content": "<p>(like you could imagine that we just hard-code it for now in some way, in the limit)</p>",
        "id": 164821489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556910652
    },
    {
        "content": "<p>Are you talking about the code we discussed in that meeting we had a few months ago?</p>",
        "id": 164821807,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556910881
    },
    {
        "content": "<p>Here's the doc for that: <a href=\"https://paper.dropbox.com/doc/Chalk-and-Specialization--AcYohtaLoeyk9kvGWaqEYnoOAg-urrCptcGmI7PA4pYaF5yn\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Chalk-and-Specialization--AcYohtaLoeyk9kvGWaqEYnoOAg-urrCptcGmI7PA4pYaF5yn\">https://paper.dropbox.com/doc/Chalk-and-Specialization--AcYohtaLoeyk9kvGWaqEYnoOAg-urrCptcGmI7PA4pYaF5yn</a></p>",
        "id": 164821808,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556910887
    },
    {
        "content": "<p>So it looks like chalk doesn't support the <code>default</code> keyword yet</p>",
        "id": 164822473,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556911338
    },
    {
        "content": "<p>Would a good step (in addition to the design) be to add support for that?</p>",
        "id": 164822494,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556911349
    },
    {
        "content": "<p>Oh actually it looks like we don't even support trait methods?</p>",
        "id": 164822753,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556911523
    },
    {
        "content": "<p>Maybe I'm reading the code wrong...</p>",
        "id": 164822757,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556911529
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">Impl</span>: <span class=\"nc\">Impl</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">external</span>:<span class=\"nc\">UpstreamKeyword</span><span class=\"o\">?&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;impl&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">p</span>:<span class=\"nc\">Angle</span><span class=\"o\">&lt;</span><span class=\"n\">ParameterKind</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">mark</span>:<span class=\"s\">&quot;!&quot;</span><span class=\"o\">?&gt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">t</span>:<span class=\"nc\">Id</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">a</span>:<span class=\"nc\">Angle</span><span class=\"o\">&lt;</span><span class=\"n\">Parameter</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;for&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">s</span>:<span class=\"nc\">Ty</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"n\">w</span>:<span class=\"nc\">QuantifiedWhereClauses</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;{&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">assoc</span>:<span class=\"nc\">AssocTyValue</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;}&quot;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 164822769,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556911552
    },
    {
        "content": "<p>It looks like we only parse associated types within the curly braces of an impl</p>",
        "id": 164822821,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556911568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you think it's necessary for chalk to have support for all of this in order to add specialization? Or maybe you want to mark impls as default instead?</p>",
        "id": 164822858,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556911618
    },
    {
        "content": "<p>That might mess up the semantics</p>",
        "id": 164822867,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556911624
    },
    {
        "content": "<p>/me needs to read the RFC and blog posts again <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 164822883,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556911642
    },
    {
        "content": "<p>Yeah I definitely think we need to add <code>default type</code> and <code>default fn</code> to chalk</p>",
        "id": 164822975,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556911711
    },
    {
        "content": "<p>Looking at the documents we need that in order for any of this to be tested within chalk</p>",
        "id": 164822999,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556911730
    },
    {
        "content": "<p>From <a href=\"https://github.com/rust-lang/chalk/issues/219\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/219\">https://github.com/rust-lang/chalk/issues/219</a> :</p>\n<blockquote>\n<p>Specialization does not effect whether or not a trait is implemented. Therefore, the \"lowering\" for an impl ought to be unaffected -- overlapping impls simply mean more than one way to prove the same set of types, and the solver ought to be able to handle that.</p>\n</blockquote>\n<p>Maybe I'm misunderstanding, but I disagree. Isn't the <code>default</code> keyword required for specialization to even be considered? This <em>should</em> affect things or else we risk every impl being specialized even when that isn't intended.</p>",
        "id": 164823124,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556911856
    },
    {
        "content": "<p>I don't believe that it needs to effect whether or not the <code>Implemented</code> predicate is satisfied</p>",
        "id": 164824045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556912584
    },
    {
        "content": "<p>It will certainly effect the coherence rules that get enforced</p>",
        "id": 164824054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556912591
    },
    {
        "content": "<p>Given that two impls overlap, you have to determine if they are <em>allowed</em> to overlap, and that question is affected by whether <code>default</code> is supplied</p>",
        "id": 164824083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556912628
    },
    {
        "content": "<blockquote>\n<p>Oh actually it looks like we don't even support trait methods?</p>\n</blockquote>\n<p>trait methods aren't particularly relevant</p>",
        "id": 164824144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556912663
    },
    {
        "content": "<blockquote>\n<p>So it looks like chalk doesn't support the <code>default</code> keyword yet</p>\n</blockquote>\n<p>yes, good point, we should probably add that first, yes. it would be applied to associated types, at least to start</p>",
        "id": 164824163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556912686
    },
    {
        "content": "<p>I didn't get as far, in that issue, as specifying concrete steps...let's see...</p>",
        "id": 164824193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556912717
    },
    {
        "content": "<blockquote>\n<p>/me needs to read the RFC and blog posts again <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>\n</blockquote>\n<p>BTW, <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span>, I think that -- for the purposes of this first step -- the blog posts are mostly not relevant. They will become relevant later on. They basically define rules that we can enforce that specify <em>when</em> specialization is legal -- but this first step is more focused on what to do if you <em>have</em> specialization (and we assume it's legal for now).</p>",
        "id": 164824886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556913298
    },
    {
        "content": "<p>But re-reading the RFC seems good</p>",
        "id": 164824909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556913307
    },
    {
        "content": "<blockquote>\n<p>But re-reading the RFC seems good</p>\n</blockquote>\n<p>Doing that now :)</p>",
        "id": 164826982,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556914933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Do you want the <code>default</code> flag in <code>AssociatedTyValue</code>? I've added it to the parser/AST but maybe I should wait to add it to other things</p>",
        "id": 164827611,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556915400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> This should be very easy to review: <a href=\"https://github.com/rust-lang/chalk/pull/221\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/221\">https://github.com/rust-lang/chalk/pull/221</a></p>",
        "id": 164828179,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1556915789
    },
    {
        "content": "<blockquote>\n<p>Do you want the <code>default</code> flag in <code>AssociatedTyValue</code>? I've added it to the parser/AST but maybe I should wait to add it to other things</p>\n</blockquote>\n<p>This is the first place; I'm not worrying about modeling default impls yet (they are kind of a different thing...) but eventually we'll probably want to do that, too</p>",
        "id": 164861234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556965507
    }
]