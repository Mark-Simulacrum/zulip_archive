[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span>!<br>\nMeeting in ~15 minutes</p>",
        "id": 211674475,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601408805
    },
    {
        "content": "<p>Agenda hackmd: <a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\">https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both</a></p>",
        "id": 211674508,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601408821
    },
    {
        "content": "<p>Ok <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 211676167,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409634
    },
    {
        "content": "<p>meeting time</p>",
        "id": 211676169,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409636
    },
    {
        "content": "<p>So, last week, we had hastily at the last minute confirmed/planned to discuss wellformedness this meeting</p>",
        "id": 211676262,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409681
    },
    {
        "content": "<p><em>but</em> a couple things have come up first</p>",
        "id": 211676298,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409697
    },
    {
        "content": "<p>Before that though, any annoucements?</p>",
        "id": 211676319,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409708
    },
    {
        "content": "<p>I don't have any :)</p>",
        "id": 211676463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601409761
    },
    {
        "content": "<p>Me neither</p>",
        "id": 211676515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409779
    },
    {
        "content": "<p>Only one PR this week I think</p>",
        "id": 211676534,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409786
    },
    {
        "content": "<p>Fix for a bug introduced in the auto trait PR</p>",
        "id": 211676561,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409796
    },
    {
        "content": "<p>Okay, first item to discuss:</p>",
        "id": 211676593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409815
    },
    {
        "content": "<p>rustc PR: <a href=\"https://github.com/rust-lang/rust/issues/77187\">#77187</a></p>",
        "id": 211676604,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409820
    },
    {
        "content": "<p>This came up a few months ago</p>",
        "id": 211676631,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409831
    },
    {
        "content": "<p>But there's a new PR</p>",
        "id": 211676645,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409836
    },
    {
        "content": "<p>Basically the question is: how do we handle fundamental types with &gt;1 parameter</p>",
        "id": 211676719,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409857
    },
    {
        "content": "<p>oh</p>",
        "id": 211676764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601409890
    },
    {
        "content": "<p>ugh</p>",
        "id": 211676765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601409892
    },
    {
        "content": "<p>In that PR, they are Adding a <code>A = Global</code> param to <code>Box</code></p>",
        "id": 211676799,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409908
    },
    {
        "content": "<p>yeah</p>",
        "id": 211676811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601409912
    },
    {
        "content": "<p>I'm trying to think</p>",
        "id": 211676834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601409923
    },
    {
        "content": "<p>we all know what fundamental does? :)</p>",
        "id": 211676853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601409933
    },
    {
        "content": "<p>maybe useful to review regardless</p>",
        "id": 211676874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601409939
    },
    {
        "content": "<p>(how much do we want to dive into this topic now?)</p>",
        "id": 211676888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601409946
    },
    {
        "content": "<p>I think we should decide now some resolution to unblock that PR</p>",
        "id": 211676935,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601409963
    },
    {
        "content": "<p>I sort of agree</p>",
        "id": 211677096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410030
    },
    {
        "content": "<p>Even if that is \"instead of asserting in Chalk, we will warn\" or something like that</p>",
        "id": 211677099,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601410032
    },
    {
        "content": "<p>Yeah I mean we can just make it a FIXME and that's probably fine</p>",
        "id": 211677121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410045
    },
    {
        "content": "<p>but it might be worth talking out very briefly</p>",
        "id": 211677138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410052
    },
    {
        "content": "<p>I think so</p>",
        "id": 211677165,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601410061
    },
    {
        "content": "<p>I'm looking now why exactly we depend on only a single param</p>",
        "id": 211677280,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601410105
    },
    {
        "content": "<p>the idea of a \"fundamental type\" is that you can, in a downstream crate, implement traits for it. So e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>struct MyType;\nimpl Debug for Box&lt;MyType&gt;\n</code></pre></div>\n\n\n<p>something like this is legal per the <em>orphan</em> check (as it happens, there is an impl <code>impl&lt;T&gt; Debug for Box&lt;T&gt;</code> so it will fail the <em>overlap</em> check)</p>",
        "id": 211677303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410113
    },
    {
        "content": "<p>but in contrast something like <code>impl Debug for Vec&lt;MyType&gt;</code> would fail the orphan check</p>",
        "id": 211677342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410140
    },
    {
        "content": "<p>i.e., the rule that says \"you can only implement an upstream trait for a local type\"</p>",
        "id": 211677360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410149
    },
    {
        "content": "<p>in other words, <code>Box&lt;LocalType&gt;</code> is considered local to your crate</p>",
        "id": 211677382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410165
    },
    {
        "content": "<p>this is because <code>Box</code> is <em>fundamental</em>, along with <code>&amp;</code> and a few other type constructors</p>",
        "id": 211677405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410181
    },
    {
        "content": "<p>(an implication of this is that adding a blanket impl of a trait for <code>Box&lt;T&gt;</code> is a semver breaking change)</p>",
        "id": 211677504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410212
    },
    {
        "content": "<p>Hm. And rustc can handle multiple type params there, and chalk can't?</p>",
        "id": 211677543,
        "sender_full_name": "detrumi",
        "timestamp": 1601410233
    },
    {
        "content": "<p>probably the best explanation of this is <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2451-re-rebalancing-coherence.md\">RFC 2451</a></p>",
        "id": 211677550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410238
    },
    {
        "content": "<p>(huzzah sgrif)</p>",
        "id": 211677579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410262
    },
    {
        "content": "<p>For reference: this is where Chalk fails: <a href=\"https://github.com/rust-lang/chalk/blob/2d086ba33f1f7f5e952d5f98fdf862777729da9f/chalk-solve/src/clauses/program_clauses.rs#L412\">https://github.com/rust-lang/chalk/blob/2d086ba33f1f7f5e952d5f98fdf862777729da9f/chalk-solve/src/clauses/program_clauses.rs#L412</a></p>",
        "id": 211677602,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601410274
    },
    {
        "content": "<p>yeah so I imagine what rustc says is that, e.g., <code>Box&lt;u32, MyType&gt;</code> (for example) is <em>not</em> local</p>",
        "id": 211677616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410284
    },
    {
        "content": "<p>but let's check that first</p>",
        "id": 211677624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410291
    },
    {
        "content": "<p>I would expect <code>Box&lt;u32, MyType&gt;</code> to be local here</p>",
        "id": 211677668,
        "sender_full_name": "lcnr",
        "timestamp": 1601410318
    },
    {
        "content": "<p>at least from the last time I looked at the coherence implementation</p>",
        "id": 211677717,
        "sender_full_name": "lcnr",
        "timestamp": 1601410330
    },
    {
        "content": "<p>I might be misremembering this though, so better double check <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 211677736,
        "sender_full_name": "lcnr",
        "timestamp": 1601410346
    },
    {
        "content": "<p>I would imagine that for any <code>U</code>, <code>Box&lt;T, U&gt;</code> is local if <code>T</code> is local</p>",
        "id": 211677842,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601410425
    },
    {
        "content": "<p>I guess that probably makes the most sense</p>",
        "id": 211677918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410448
    },
    {
        "content": "<p>basically if \"any part\" is local, then the type clearly can't have been written in an upstream crate</p>",
        "id": 211677931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410461
    },
    {
        "content": "<p>my expectation is that as long as <code>T</code> is not an uncovered ty param box <code>Box&lt;T, local&gt;</code> is local</p>",
        "id": 211677947,
        "sender_full_name": "lcnr",
        "timestamp": 1601410471
    },
    {
        "content": "<p>and hence could only be matched by a blanket impl</p>",
        "id": 211677958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410480
    },
    {
        "content": "<p>ok so</p>",
        "id": 211678024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410522
    },
    {
        "content": "<p>on the <em>chalk</em> side of things</p>",
        "id": 211678036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410530
    },
    {
        "content": "<p>we define this stuff via a few special goals</p>",
        "id": 211678136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410569
    },
    {
        "content": "<p><code>IsLocal</code></p>",
        "id": 211678147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410572
    },
    {
        "content": "<p><code>IsUpstream</code></p>",
        "id": 211678152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410576
    },
    {
        "content": "<p>and <code>DownstreamType</code></p>",
        "id": 211678199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410592
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/2d086ba33f1f7f5e952d5f98fdf862777729da9f/chalk-solve/src/clauses/program_clauses.rs#L330-L377\">code here</a></p>",
        "id": 211678242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410602
    },
    {
        "content": "<p>if we want to encode that intuition then presumably we would update this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// forall&lt;T&gt; { IsLocal(Box&lt;T&gt;) :- IsLocal(T). }</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// forall&lt;T&gt; { IsUpstream(Box&lt;T&gt;) :- IsUpstream(T). }</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// // Generated for both upstream and local fundamental types</span>\n<span class=\"w\">    </span><span class=\"sd\">/// forall&lt;T&gt; { DownstreamType(Box&lt;T&gt;) :- DownstreamType(T). }</span>\n</code></pre></div>",
        "id": 211678323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410648
    },
    {
        "content": "<p>to something like</p>",
        "id": 211678330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410651
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>forall&lt;T, U&gt; { IsLocal(Box&lt;T&gt;) :- IsLocal(T) }\nforall&lt;T, U&gt; { IsLocal(Box&lt;T&gt;) :- IsLocal(U) }\n</code></pre></div>",
        "id": 211678419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410692
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>forall&lt;T, U&gt; { IsUpstream(Box&lt;T, U&gt;) :- IsUpstream(T), IsUpstream(U) }\n</code></pre></div>",
        "id": 211678461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410716
    },
    {
        "content": "<p>That seems right to me</p>",
        "id": 211678481,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601410729
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>forall&lt;T, U&gt; { DownstreamType(Box&lt;T, U&gt;) :- DownstreamType(T). }\nforall&lt;T, U&gt; { DownstreamType(Box&lt;T, U&gt;) :- DownstreamType(U). }\n</code></pre></div>",
        "id": 211678531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410754
    },
    {
        "content": "<p>that last one... is interesting</p>",
        "id": 211678544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410761
    },
    {
        "content": "<p>the role of <code>DownstreamType</code> as I recall is to generate a kind of \"placeholder-like\" type representing <em>some</em> type defined in a downstream crate</p>",
        "id": 211678586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410786
    },
    {
        "content": "<p>I was about to ask about that</p>",
        "id": 211678606,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601410797
    },
    {
        "content": "<p>I am trying to find what docs we wrote :)</p>",
        "id": 211678684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410821
    },
    {
        "content": "<p>There's not many docs on coherence</p>",
        "id": 211678808,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601410881
    },
    {
        "content": "<p>I feel like <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span> wrote some beautiful docs</p>",
        "id": 211678830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410896
    },
    {
        "content": "<p>maybe they are still around in a dropbox paper document or something</p>",
        "id": 211678851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410907
    },
    {
        "content": "<p>and we can import them into the chalk book</p>",
        "id": 211678855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410911
    },
    {
        "content": "<p>I thought you had a blog post about this</p>",
        "id": 211678873,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601410921
    },
    {
        "content": "<p>Maybe I'm misremembering</p>",
        "id": 211678919,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601410927
    },
    {
        "content": "<p>I don't think I ever wrote about the <em>chalk-ification</em> of the coherence rules</p>",
        "id": 211678931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410937
    },
    {
        "content": "<p>Okay, so: who wants to make a PR for this?</p>",
        "id": 211678981,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601410971
    },
    {
        "content": "<p>It seems like it would be pretty simple</p>",
        "id": 211678995,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601410980
    },
    {
        "content": "<p>anyway I think I would be happy to see the rules I described above, and we should open an issue to track it</p>",
        "id": 211679003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410984
    },
    {
        "content": "<p>I think the coherence rules probably need some love anyway</p>",
        "id": 211679019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601410993
    },
    {
        "content": "<p>I think I always meant to write something but never had a chance. Here's my doc with all my notes if anyone else wants to pick it up: <a href=\"https://paper.dropbox.com/doc/Chalk-Coherence--A8hYREfV30eyU8YNbvxnxhwLAQ-rxgcvrmxv0yNwHvOpg326\">https://paper.dropbox.com/doc/Chalk-Coherence--A8hYREfV30eyU8YNbvxnxhwLAQ-rxgcvrmxv0yNwHvOpg326</a></p>",
        "id": 211679024,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1601410995
    },
    {
        "content": "<p>ah thank you  <span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 211679040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411004
    },
    {
        "content": "<p>No worries. Sorry I never had a chance to finish that up! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 211679071,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1601411022
    },
    {
        "content": "<p>I think we should import that straight into the chalk book as is</p>",
        "id": 211679081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411027
    },
    {
        "content": "<p>Agreed</p>",
        "id": 211679098,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411032
    },
    {
        "content": "<p>and we can improve it iteratively</p>",
        "id": 211679102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411034
    },
    {
        "content": "<p>Okay, I will open an issue after this meeting. And a PR to import that into chalk book tonight.</p>",
        "id": 211679192,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411059
    },
    {
        "content": "<p>If by Friday someone hasn't opened a PR for the coherence rules, I will</p>",
        "id": 211679223,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411077
    },
    {
        "content": "<p>(maybe before, but it's a busy week)</p>",
        "id": 211679239,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411086
    },
    {
        "content": "<p>the biggest problem will probably be that dropbox paper generates such terrible markdown</p>",
        "id": 211679297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411118
    },
    {
        "content": "<p>sad</p>",
        "id": 211679317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411130
    },
    {
        "content": "<p>I'll  try to format it as best as possible</p>",
        "id": 211679423,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411168
    },
    {
        "content": "<p>Ok, let's move on</p>",
        "id": 211679446,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411182
    },
    {
        "content": "<p>yeah I wouldn't let perfect be enemy of the good here for sure</p>",
        "id": 211679448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411182
    },
    {
        "content": "<p>Next topic is on the binder refactor in rustc</p>",
        "id": 211679504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411208
    },
    {
        "content": "<p>That I've been chipping away at</p>",
        "id": 211679515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411215
    },
    {
        "content": "<p>(<a href=\"https://github.com/rust-lang/rust/issues/76814\">#76814</a>)</p>",
        "id": 211679519,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411217
    },
    {
        "content": "<p>Basically, the first pass, there was some really bad performance</p>",
        "id": 211679558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411238
    },
    {
        "content": "<p>So, I've been trying to move a bunch of <code>bind</code>s to <code>rebind</code>s</p>",
        "id": 211679593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411255
    },
    {
        "content": "<p>Where <code>rebind</code> is essentially like Chalk's <code>Binders::new</code></p>",
        "id": 211679615,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411268
    },
    {
        "content": "<p>yeah that was my hunch</p>",
        "id": 211679622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411272
    },
    {
        "content": "<p>well wait</p>",
        "id": 211679646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411283
    },
    {
        "content": "<p>I think I remember thinking that a lot of the <code>map</code> calls</p>",
        "id": 211679691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411288
    },
    {
        "content": "<p>In that you must pass the number of bound vars (and in the future the actual onces)</p>",
        "id": 211679700,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411291
    },
    {
        "content": "<p>probably didn't change the number of variables</p>",
        "id": 211679706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411296
    },
    {
        "content": "<p>Right</p>",
        "id": 211679723,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411307
    },
    {
        "content": "<p>Basically, there's a <em>lot</em> of places in rustc where there is a <code>skip_binders()</code> followed closely by a <code>bind</code></p>",
        "id": 211679769,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411335
    },
    {
        "content": "<p>Unfortunately, some of that is due to the current shakeup around <code>Predicate::Forall</code></p>",
        "id": 211679815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411358
    },
    {
        "content": "<p>Now, the question I had was:</p>",
        "id": 211679948,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411404
    },
    {
        "content": "<p>Is it worth adding such a function <code>rebind</code> to rustc <em>without</em> actually tracking bound vars</p>",
        "id": 211680003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411432
    },
    {
        "content": "<p>on the basis of there only being a semantic difference</p>",
        "id": 211680034,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411448
    },
    {
        "content": "<p>I don't quite get what <code>rebind</code> does</p>",
        "id": 211680036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411448
    },
    {
        "content": "<p>maybe I have to refresh my memory of <code>Binders::new</code></p>",
        "id": 211680060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411465
    },
    {
        "content": "<p>So, in my branch, <code>bind</code> goes through and counts the bound vars to store</p>",
        "id": 211680080,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411473
    },
    {
        "content": "<p><code>rebind</code>, you pass that</p>",
        "id": 211680089,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411478
    },
    {
        "content": "<p>In Chalk, you can either create a <code>Binders</code> by passing the VariableKinds, or have it empty</p>",
        "id": 211680131,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411504
    },
    {
        "content": "<p>there's no option for Chalk to \"visit\" the value and collect them</p>",
        "id": 211680156,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411518
    },
    {
        "content": "<p>let me just link the code</p>",
        "id": 211680234,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411550
    },
    {
        "content": "<p>I see</p>",
        "id": 211680242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411556
    },
    {
        "content": "<p>so you're finding that you often (sometimes?) know the number in advance, essentially?</p>",
        "id": 211680265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411571
    },
    {
        "content": "<p>Usually, yes!</p>",
        "id": 211680312,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411602
    },
    {
        "content": "<p>Because we just did a <code>skip_binders()</code></p>",
        "id": 211680321,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411609
    },
    {
        "content": "<p>I see</p>",
        "id": 211680352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411628
    },
    {
        "content": "<p>and this can't be structured as a <code>map</code> for one reason or another</p>",
        "id": 211680363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411634
    },
    {
        "content": "<p>Right</p>",
        "id": 211680368,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411640
    },
    {
        "content": "<p>Let me give an example</p>",
        "id": 211680417,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411645
    },
    {
        "content": "<p>(also, <a href=\"https://github.com/rust-lang/rust/pull/76814/files#diff-dae5090f4552c45ff2d296ef9c61ecd9R949\">relevant</a> code for bind)</p>",
        "id": 211680457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411666
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/76814/files#diff-8f7c8234d9e4b8a6b999a8539032942dR655\">https://github.com/rust-lang/rust/pull/76814/files#diff-8f7c8234d9e4b8a6b999a8539032942dR655</a></p>",
        "id": 211680546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411711
    },
    {
        "content": "<p>is an example</p>",
        "id": 211680549,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411713
    },
    {
        "content": "<p>/me clicks</p>",
        "id": 211680676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411774
    },
    {
        "content": "<p>Basically, the idea of this is to start moving rustc into the direction of \"being more aware of what we're doing around bound variables\"</p>",
        "id": 211680678,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411775
    },
    {
        "content": "<p>yeah I figured it'd be something like this</p>",
        "id": 211680702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411788
    },
    {
        "content": "<p>such an annoying pattern</p>",
        "id": 211680728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411811
    },
    {
        "content": "<p>it feels like we should be able to do something more elegant :)</p>",
        "id": 211680748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411820
    },
    {
        "content": "<p>but I can't think of anything</p>",
        "id": 211680756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411823
    },
    {
        "content": "<p>me neither</p>",
        "id": 211680763,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411828
    },
    {
        "content": "<p>anyway, this feels <em>to me</em> like a cleaner setup, in that it is more explicit, though I wish we could make it \"feel\" a bit nicer</p>",
        "id": 211680788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411841
    },
    {
        "content": "<p>like it's kind of nice to \"link\"</p>",
        "id": 211680803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411855
    },
    {
        "content": "<p>I think I might <em>for ergonomics</em> change to</p>",
        "id": 211680809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411859
    },
    {
        "content": "<p>I want this too</p>",
        "id": 211680883,
        "sender_full_name": "Areredify",
        "timestamp": 1601411886
    },
    {
        "content": "<p>This is also maybe MCP territory</p>",
        "id": 211680889,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411889
    },
    {
        "content": "<p>Well, almost certainly</p>",
        "id": 211680908,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411900
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">bound_predicate</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>or  something like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">bound_predicate</span><span class=\"p\">.</span><span class=\"n\">with_value</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211680923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411906
    },
    {
        "content": "<p>Oh, true</p>",
        "id": 211680960,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411925
    },
    {
        "content": "<p>but I would definitely land some PRs that adopted a style like that</p>",
        "id": 211680994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411944
    },
    {
        "content": "<p>it's nice that it can be done progressively and in isolation</p>",
        "id": 211681009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411955
    },
    {
        "content": "<p>Okay cool</p>",
        "id": 211681010,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411955
    },
    {
        "content": "<p>if you hounded me I could just r+ them extra fast ;)</p>",
        "id": 211681021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411961
    },
    {
        "content": "<p>actually wait</p>",
        "id": 211681032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411969
    },
    {
        "content": "<p>better yet is we get somebody else to r+ them :P</p>",
        "id": 211681040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601411974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-09-29/near/211681009\">said</a>:</p>\n<blockquote>\n<p>it's nice that it can be done progressively and in isolation</p>\n</blockquote>\n<p>That was my thought. Stepping stones.</p>",
        "id": 211681043,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411974
    },
    {
        "content": "<p>any time you want to do anything with binders that doesnt fit into the map paradigm it turns into a very wordy dance</p>",
        "id": 211681045,
        "sender_full_name": "Areredify",
        "timestamp": 1601411975
    },
    {
        "content": "<p>Okay, in this case, I'll put in the effort to do this</p>",
        "id": 211681071,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601411995
    },
    {
        "content": "<p>And get some eyes on it</p>",
        "id": 211681077,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> has r+ rights :)</p>",
        "id": 211681126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-09-29/near/211681040\">said</a>:</p>\n<blockquote>\n<p>better yet is we get somebody else to r+ them :P</p>\n</blockquote>\n<p>you can use me here</p>",
        "id": 211681134,
        "sender_full_name": "lcnr",
        "timestamp": 1601412009
    },
    {
        "content": "<p>heh :)</p>",
        "id": 211681148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412014
    },
    {
        "content": "<p>hu :)</p>",
        "id": 211681155,
        "sender_full_name": "lcnr",
        "timestamp": 1601412021
    },
    {
        "content": "<p>good, I was feeling bad about volun-telling you</p>",
        "id": 211681156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412021
    },
    {
        "content": "<p>I mostly just didn't want to put in the effort without people being on board</p>",
        "id": 211681173,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412030
    },
    {
        "content": "<p>I don't feel this requires an MCP</p>",
        "id": 211681192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412041
    },
    {
        "content": "<p>Okay, with that, we're 40 minutes in</p>",
        "id": 211681247,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412067
    },
    {
        "content": "<p>So, I don't know if we really have time for a full design meeting on wellformedness</p>",
        "id": 211681270,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412086
    },
    {
        "content": "<p>tbh, I'm not <em>entirely</em> sure what we want to discuss</p>",
        "id": 211681295,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412096
    },
    {
        "content": "<p>I really should prepare these</p>",
        "id": 211681305,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412106
    },
    {
        "content": "<blockquote>\n<p>I don't feel this requires an MCP</p>\n</blockquote>\n<p>Adding some kind of <code>map</code> to <code>Predicate</code> probably won't need one, there are some edge cases re rebinding the predicate but we will figure those out</p>",
        "id": 211681315,
        "sender_full_name": "lcnr",
        "timestamp": 1601412109
    },
    {
        "content": "<p>ah yeah I guess that method is on <code>Predicate</code> and not <code>Binders</code></p>",
        "id": 211681387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412134
    },
    {
        "content": "<p>well, <em>something</em> in this direction</p>",
        "id": 211681395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412141
    },
    {
        "content": "<p>(I'm not sure, is it?)</p>",
        "id": 211681403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412145
    },
    {
        "content": "<p>it'd be nice to make it more elegant, but linking the binders to their source feels good to me</p>",
        "id": 211681423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412163
    },
    {
        "content": "<p>anything that you two both like I imagine I will probably like :P</p>",
        "id": 211681463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412189
    },
    {
        "content": "<p>re: this meeting, happy to discuss, but I can also go and use time to review a few PRs</p>",
        "id": 211681494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412215
    },
    {
        "content": "<p>Okay, then when I make PRs, I'll r? <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> and cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 211681504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412222
    },
    {
        "content": "<p>Is there anything anybody would like to discuss?</p>",
        "id": 211681571,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412243
    },
    {
        "content": "<p>If not, I'm good with ending a bit early</p>",
        "id": 211681625,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412253
    },
    {
        "content": "<p>Okay, I guess we'll end 15 minutes early</p>",
        "id": 211681739,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412304
    },
    {
        "content": "<p>And do the WF design meeting next week</p>",
        "id": 211681763,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412313
    },
    {
        "content": "<p>I'll try to actually prepare at least some discussion points for that</p>",
        "id": 211681786,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412330
    },
    {
        "content": "<p>I guess we are still waiting on an MCP second for <a href=\"https://github.com/rust-lang/compiler-team/issues/359\">https://github.com/rust-lang/compiler-team/issues/359</a></p>",
        "id": 211681794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412335
    },
    {
        "content": "<p>Yeah :/</p>",
        "id": 211681843,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412363
    },
    {
        "content": "<p>I thought about pleading the case a little bit more in the zulip topic</p>",
        "id": 211681913,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412388
    },
    {
        "content": "<p>but didn't get around to it</p>",
        "id": 211681925,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412394
    },
    {
        "content": "<p>I just left a few comments</p>",
        "id": 211681960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412419
    },
    {
        "content": "<p>there <em>is</em> some uncertainty about the exact set of types that are affected</p>",
        "id": 211681971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412425
    },
    {
        "content": "<p>probably best to discuss there</p>",
        "id": 211681976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412430
    },
    {
        "content": "<p>I did briefly search the docs for \"kind\" when that was mentioned</p>",
        "id": 211682003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412450
    },
    {
        "content": "<p>In almost all cases, it was pretty clear the distinction</p>",
        "id": 211682028,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412464
    },
    {
        "content": "<p>But maybe I'll post a summary</p>",
        "id": 211682046,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412479
    },
    {
        "content": "<p>(eek another thing I've assigned myself to do)</p>",
        "id": 211682101,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412492
    },
    {
        "content": "<p>what do you mean by \"pretty clear the distinction\"</p>",
        "id": 211682154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412531
    },
    {
        "content": "<p>I thnk I would be in favor of NOT changing every single enum in the compiler that follows this pattern</p>",
        "id": 211682172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412544
    },
    {
        "content": "<p>yes, that</p>",
        "id": 211682189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412557
    },
    {
        "content": "<p>although I am wondering if people will find the rule clear</p>",
        "id": 211682205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601412568
    },
    {
        "content": "<p>Like, to me if felt \"natural\" which ones would and wouldn't</p>",
        "id": 211682214,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412573
    },
    {
        "content": "<p>generally it was just interned things</p>",
        "id": 211682233,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412586
    },
    {
        "content": "<p>Like, e.g. <code>ClosureKind</code>, doesn't make sense as <code>ClosureData</code>, because there's no data held</p>",
        "id": 211682330,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412628
    },
    {
        "content": "<p>Oh gosh, there are <em>so many</em> <code>kind</code>s</p>",
        "id": 211682455,
        "sender_full_name": "Jack Huey",
        "timestamp": 1601412711
    }
]