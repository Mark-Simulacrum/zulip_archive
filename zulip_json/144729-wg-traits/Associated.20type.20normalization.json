[
    {
        "content": "<p>So, we added <code>for</code> loop support in rust-analyzer but it's not having the desired effect, and I'm investigating why. There's something weird going on with the rules for normalization, and I'm not sure whether I'm doing something wrong or there's a bug there.</p>\n<p>Basically, written as a Chalk test:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Iterator</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">forall</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">exists</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Normalize</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&gt;</span>::<span class=\"n\">Item</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">U</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I'd expect this to have a unique solution (because the <code>Iterator</code> impl shouldn't matter), but it doesn't currently. The problem as far as I understand it is that the <code>impl&lt;T&gt; IntoIterator for T where T: Iterator</code> results in a rule <code>Normalize(&lt;Vec&lt;T&gt; as IntoIterator&gt;::Item -&gt; &lt;Vec&lt;T&gt; as Iterator&gt;::Item) :- Implemented(Vec&lt;T&gt;: IntoIterator)</code>, and then <code>Implemented(Vec&lt;T&gt;: IntoIterator)</code> is of course the case, but because of the other impl. So I don't understand how this is actually supposed to work.</p>",
        "id": 169820332,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1562522355
    },
    {
        "content": "<p>indeed, it seems that the <code>Normalize-From-Impl</code> rule is wrong as written... it only requires that the trait be implemented _at all_, not that the particular impl in question applies</p>",
        "id": 169838156,
        "sender_full_name": "Geoffry Song",
        "timestamp": 1562556909
    },
    {
        "content": "<p>i guess the way to fix it would be to add the bounds of the impl in question to the hypotheses, at which point the <code>Implemented</code> hypothesis wouldn't be needed</p>",
        "id": 169838221,
        "sender_full_name": "Geoffry Song",
        "timestamp": 1562557070
    },
    {
        "content": "<p>it'd be nice to avoid that duplication, but that probably needs impls to be named?</p>",
        "id": 169838277,
        "sender_full_name": "Geoffry Song",
        "timestamp": 1562557142
    },
    {
        "content": "<p>named impls might be useful if they allowed us to find out which impl actually applied? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 169855653,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1562580240
    },
    {
        "content": "<p>I opened an issue for this and another associated type problem I have: <a href=\"https://github.com/rust-lang/chalk/issues/234\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/234\">https://github.com/rust-lang/chalk/issues/234</a></p>",
        "id": 173990586,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1566584119
    }
]