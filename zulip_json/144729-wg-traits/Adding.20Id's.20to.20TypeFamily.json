[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  So I'm making an attempt at adding <code>TypeId</code> and such to <code>TypeFamily</code>, with associated types like these:</p>\n<div class=\"codehilite\"><pre><span></span>type TypeId: Debug + Clone + Eq + Ord + Hash + Zip&lt;Self&gt; + Fold&lt;Self&gt;;\n</pre></div>\n\n\n<p>First hurdle seems to be this derived <code>Fold</code> impl:</p>\n<div class=\"codehilite\"><pre><span></span>impl&lt;TF: TypeFamily, _TTF: TypeFamily&gt; Fold&lt;TF, _TTF&gt; for ProjectionTy&lt;TF&gt; {\n    type Result = ProjectionTy&lt;_TTF&gt;;\n    fn fold_with(\n        &amp;self,\n        folder: &amp;mut dyn Folder&lt;TF, _TTF&gt;,\n        binders: usize,\n    ) -&gt; ::chalk_engine::fallible::Fallible&lt;Self::Result&gt; {\n        Ok(ProjectionTy {\n            associated_ty_id: self.associated_ty_id.fold_with(folder, binders)?,\n            parameters: self.parameters.fold_with(folder, binders)?,\n        })\n    }\n}\n</pre></div>\n\n\n<p>That's failing with this error:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0308]: mismatched types\n   --&gt; chalk-ir/src/lib.rs:602:63\n    |\n602 |             associated_ty_id: self.associated_ty_id.fold_with(folder, binders)?,\n    |                                                               ^^^^^^ expected type parameter, found a different type parameter\n    |\n    = note: expected type `&amp;mut dyn fold::Folder&lt;TF, TF&gt;`\n               found type `&amp;mut dyn fold::Folder&lt;TF, _TTF&gt;`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n\nerror[E0308]: try expression alternatives have incompatible types\n   --&gt; chalk-ir/src/lib.rs:602:31\n    |\n602 |             associated_ty_id: self.associated_ty_id.fold_with(folder, binders)?,\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected family::TypeFamily::TypeId, found fold::Fold::Result\n    |\n    = note: expected type `&lt;_TTF as family::TypeFamily&gt;::TypeId`\n               found type `&lt;&lt;TF as family::TypeFamily&gt;::TypeId as fold::Fold&lt;TF&gt;&gt;::Result`\n</pre></div>\n\n\n<p>I'm getting similar errors in <code>super_fold_ty</code> and other Fold derives if I manually fix this one, so some changes to <code>Fold</code> might be required</p>",
        "id": 181123607,
        "sender_full_name": "detrumi",
        "timestamp": 1574178297
    },
    {
        "content": "<p>(branch here: <a href=\"https://github.com/rust-lang/chalk/compare/master...detrumi:tf-associated-ids\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/compare/master...detrumi:tf-associated-ids\">https://github.com/rust-lang/chalk/compare/master...detrumi:tf-associated-ids</a>)</p>",
        "id": 181124545,
        "sender_full_name": "detrumi",
        "timestamp": 1574178750
    },
    {
        "content": "<p>Oh hmm, maybe the <code>+ Fold&lt;Self&gt;</code> bound on <code>TypeId</code> is just wrong, but I don't know what it should be instead, because otherwise <code>self.associated_ty_id.fold_with(...)</code> doesn't work</p>",
        "id": 181125167,
        "sender_full_name": "detrumi",
        "timestamp": 1574179053
    },
    {
        "content": "<p>The problem is that types like <code>ProjectionTy</code> implement <code>Fold&lt;TF, _TTF&gt;</code>, but we can't reference the <code>_TTF</code> when specifying the trait bounds in the associated type</p>",
        "id": 181186730,
        "sender_full_name": "detrumi",
        "timestamp": 1574237061
    },
    {
        "content": "<p>I mean, we could do this in the Fold impls, but that would probably get quite unwieldy:</p>\n<div class=\"codehilite\"><pre><span></span>where TF::TypeId: Fold&lt;TF, _TTF, Result = _TTF::TypeId&gt;,\n</pre></div>",
        "id": 181187049,
        "sender_full_name": "detrumi",
        "timestamp": 1574237465
    },
    {
        "content": "<p>It's surprising that it's having trouble with the difference between these two:</p>\n<div class=\"codehilite\"><pre><span></span>expected type `&lt;&lt;TF as family::TypeFamily&gt;::TypeId as fold::Fold&lt;TF&gt;&gt;::Result`\n   found type `&lt;TF as family::TypeFamily&gt;::TypeId`\n</pre></div>",
        "id": 181188884,
        "sender_full_name": "detrumi",
        "timestamp": 1574239639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> the right fix here is to have <code>TypeId&lt;TF&gt;</code></p>",
        "id": 181674007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454315
    },
    {
        "content": "<p>and have that implement <code>Fold</code></p>",
        "id": 181674012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454327
    },
    {
        "content": "<p>and then (internally) it wraps a <code>TF::TypeId</code></p>",
        "id": 181674020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454337
    },
    {
        "content": "<p>much like we have <code>Ty&lt;TF&gt;</code> which wraps a <code>TF::InternedTy</code></p>",
        "id": 181674033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454346
    },
    {
        "content": "<p>this does however imply that there has to be some kind of \"conversion\" between type-families for id's</p>",
        "id": 181674093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454374
    },
    {
        "content": "<p>hmm</p>",
        "id": 181674094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454375
    },
    {
        "content": "<p>interesting problem!</p>",
        "id": 181674108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454398
    },
    {
        "content": "<p>it works for types because we have a \"canonical\" form to convert into / from</p>",
        "id": 181674149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454445
    },
    {
        "content": "<p>I have to wonder if the \"conversion between type families\" is worth it</p>",
        "id": 181674201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454481
    },
    {
        "content": "<p>I do think it's an interesting idea but it does add some complexity</p>",
        "id": 181674254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454494
    },
    {
        "content": "<p>otherwise I guess we need to add some sort of \"canonical id\" that is maybe just a fixed number of integers :)</p>",
        "id": 181674293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454534
    },
    {
        "content": "<p>/me shrugs</p>",
        "id": 181674450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454670
    },
    {
        "content": "<p>maybe we should just do that for now</p>",
        "id": 181674451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454672
    },
    {
        "content": "<p>just make \"unpack id\" convert to a <code>(u64, u64)</code> or something</p>",
        "id": 181674460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1574454699
    }
]