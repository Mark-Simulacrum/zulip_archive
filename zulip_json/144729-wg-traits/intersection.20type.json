[
    {
        "content": "<blockquote>\n<p>the idea is \"some value is both T1 and T2 simultaneously\"</p>\n</blockquote>\n<p>what property does it have that isn't satisfied by a product? i.e. if <code>typeof(x) = T1 &amp;&amp; T2</code> and <code>typeof( (t1, t2) ) = T1 x T2</code>, what would we expect to be true of <code>x</code> that we don't get by doing something on <code>t1</code> or <code>t2</code> separately?</p>",
        "id": 164005953,
        "sender_full_name": "varkor",
        "timestamp": 1556037070
    },
    {
        "content": "<p>Maybe I am confused -- a product <code>(T1, T2)</code> is the combination of a T1 and T2 value (and you can project out those independent things). But importantly <em>any</em> T1 and T2 value can be combined.</p>",
        "id": 164006073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037151
    },
    {
        "content": "<p>or maybe another way to ask my question is: why should <code>dyn (Foo + Bar)</code> be modelled by <code>dyn Foo &amp;&amp; dyn Bar</code>, where <code>&amp;&amp;</code> has the obvious trait bound criteria, rather than <code>dyn (Foo + Bar)</code> directly having the obvious bound criteria?</p>",
        "id": 164006075,
        "sender_full_name": "varkor",
        "timestamp": 1556037156
    },
    {
        "content": "<p>An intersection is a <em>single</em> value that is both</p>",
        "id": 164006084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037167
    },
    {
        "content": "<p>i.e. <code>dyn (trait bound) : trait bound.</code></p>",
        "id": 164006113,
        "sender_full_name": "varkor",
        "timestamp": 1556037188
    },
    {
        "content": "<p>that is, <code>dyn</code> is parameterised by a bound, rather than by a list of traits</p>",
        "id": 164006148,
        "sender_full_name": "varkor",
        "timestamp": 1556037231
    },
    {
        "content": "<blockquote>\n<p>An intersection is a single value that is both</p>\n</blockquote>\n<p>ah, so an intersection type here is a product without projections</p>",
        "id": 164006271,
        "sender_full_name": "varkor",
        "timestamp": 1556037315
    },
    {
        "content": "<p>it's not clear that what I am thinking makes sense, but my reasoning was that I wanted to avoid quantifying over something that is not types. That said, I think that it may work out fine to support <code>dyn Bound1 + Bound2</code> directly, and to lower that in chalk's \"program clause\" callback to</p>\n<ul>\n<li><code>dyn (Bound1 + Bound2): Bound1</code></li>\n<li><code>dyn (Bound1 + Bound2): Bound2</code></li>\n</ul>",
        "id": 164006273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037319
    },
    {
        "content": "<p>I think it's very possible it'll be necessary to parameterise over bounds at some point in the future regardless (e.g. any of the various \"constraint kinds\" proposals)</p>",
        "id": 164006398,
        "sender_full_name": "varkor",
        "timestamp": 1556037387
    },
    {
        "content": "<blockquote>\n<p>that is, dyn is parameterised by a bound, rather than by a list of traits</p>\n</blockquote>\n<p>To that point, the way I would model <code>dyn Trait</code> in Haskell is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">data</span> <span class=\"kt\">Dyn</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Constraint</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">forall</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span><span class=\"p\">)</span><span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">D</span> <span class=\"n\">t</span>\n</pre></div>",
        "id": 164006412,
        "sender_full_name": "centril",
        "timestamp": 1556037398
    },
    {
        "content": "<blockquote>\n<p>I think it's very possible it'll be necessary to parameterise over bounds at some point in the future regardless (e.g. any of the various \"constraint kinds\" proposals)</p>\n</blockquote>\n<p>plausible, but I would rather not</p>",
        "id": 164006447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037433
    },
    {
        "content": "<p>well, that's strong</p>",
        "id": 164006462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037446
    },
    {
        "content": "<p>but I would rather not go there if we don't have to</p>",
        "id": 164006488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037472
    },
    {
        "content": "<p>that said, I don't think we have to quantify over predicates in any case</p>",
        "id": 164006495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037478
    },
    {
        "content": "<p>in either scheme</p>",
        "id": 164006545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037487
    },
    {
        "content": "<p>as this logic would be \"internal\" to the callback, and implemented in Rust</p>",
        "id": 164006554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037501
    },
    {
        "content": "<blockquote>\n<p>ah, so an intersection type here is a product without projections</p>\n</blockquote>\n<p>sorry, this is a confusing way of putting it — I essentially mean that we have the following introduction rule (and the obvious formation rule):<br>\n<code>a: A, b: B ==&gt; a&amp;b : A &amp;&amp; B</code><br>\nbut <em>no</em> elimination (or computation) rules</p>",
        "id": 164006559,
        "sender_full_name": "varkor",
        "timestamp": 1556037506
    },
    {
        "content": "<blockquote>\n<p>but I would rather not go there if we don't have to</p>\n</blockquote>\n<p>(though it's worth nothing that Lambda Calculus generally permits one to quantify over predicates)</p>",
        "id": 164006569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556037520
    },
    {
        "content": "<blockquote>\n<p>but no elimination (or computation) rules</p>\n</blockquote>\n<p>which is equivalent to a product type without projections</p>",
        "id": 164006592,
        "sender_full_name": "varkor",
        "timestamp": 1556037547
    },
    {
        "content": "<blockquote>\n<p>but I would rather not go there if we don't have to</p>\n</blockquote>\n<p>Having <code>dyn Self::MyBound</code> work is definitely something that I'm interested in exploring as part of <code>-XConstraintKinds</code> in Rust (associated traits, trait generics, ...)</p>",
        "id": 164006710,
        "sender_full_name": "centril",
        "timestamp": 1556037631
    },
    {
        "content": "<blockquote>\n<p>but I would rather not go there if we don't have to</p>\n</blockquote>\n<p>it's fairly tangential anyway<br>\nI just think that parameterisation over bounds is going to lead to a simpler (conceptual) model</p>",
        "id": 164006713,
        "sender_full_name": "varkor",
        "timestamp": 1556037634
    },
    {
        "content": "<p>(of course, I'm saying this without having tried to implement anything, so there are a lot of handfuls of salt to be taken here <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>)</p>",
        "id": 164006764,
        "sender_full_name": "varkor",
        "timestamp": 1556037675
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/vFHb0RGoBomKWmkTK0q_GkES/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/vFHb0RGoBomKWmkTK0q_GkES/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/vFHb0RGoBomKWmkTK0q_GkES/pasted_image.png\"></a></div>",
        "id": 164007305,
        "sender_full_name": "varkor",
        "timestamp": 1556038107
    },
    {
        "content": "<p>(I think this is the definition of an intersection type)</p>",
        "id": 164007315,
        "sender_full_name": "varkor",
        "timestamp": 1556038124
    },
    {
        "content": "<p>(namely, if an <code>a: A</code> satisfies some property <code>p</code> and <code>b: B</code>satisfies some property <code>q</code>, then there exists some object <code>f(a, b): A &amp; B</code> such that <code>f(a, b)</code> satisfies both <code>p</code> and <code>q</code>)</p>",
        "id": 164007424,
        "sender_full_name": "varkor",
        "timestamp": 1556038227
    },
    {
        "content": "<blockquote>\n<p>I just think that parameterisation over bounds is going to lead to a simpler (conceptual) model</p>\n</blockquote>\n<p>having thought it over, I think I agree</p>",
        "id": 164007569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556038387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> that looks similar to the diagram for a product; i.e. set <code>p, p', q', q = id</code></p>",
        "id": 164007937,
        "sender_full_name": "centril",
        "timestamp": 1556038632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span>: if you replace the two <code>Ω</code>s by <code>A</code> and <code>B</code>, then you get a product — but here <code>Ω</code> is an \"object of truth values\" (in Rust's case, this would just be <code>bool</code>)</p>",
        "id": 164008107,
        "sender_full_name": "varkor",
        "timestamp": 1556038750
    },
    {
        "content": "<p>the difference being that with an intersection type, you want to preserve the values of propositions, but you don't want to be able to project</p>",
        "id": 164008152,
        "sender_full_name": "varkor",
        "timestamp": 1556038795
    },
    {
        "content": "<p>(<code>Ω</code> here is known as a subobject classifier)</p>",
        "id": 164008223,
        "sender_full_name": "varkor",
        "timestamp": 1556038811
    },
    {
        "content": "<p>(this is really just a modification of the definition of a pullback over the subobject classifier in a topos)</p>",
        "id": 164008233,
        "sender_full_name": "varkor",
        "timestamp": 1556038821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> so you are using truncation?</p>",
        "id": 164008268,
        "sender_full_name": "centril",
        "timestamp": 1556038854
    },
    {
        "content": "<p>truncations aren't really relevant here, because there's no identity type / higher dimensionality</p>",
        "id": 164008378,
        "sender_full_name": "varkor",
        "timestamp": 1556038927
    },
    {
        "content": "<p><em>edit: I'll rephrase</em></p>",
        "id": 164008430,
        "sender_full_name": "varkor",
        "timestamp": 1556038985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> here's where my category theory-fuu falls short ;)</p>",
        "id": 164008463,
        "sender_full_name": "centril",
        "timestamp": 1556039023
    },
    {
        "content": "<blockquote>\n<p>you want to preserve the values of propositions, but you don't want to be able to project</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> but this reminded me of <code>Type</code> &amp; <code>Prop</code> ; i.e. we want to erase the witness and have proof irrelevance</p>",
        "id": 164008884,
        "sender_full_name": "centril",
        "timestamp": 1556039288
    },
    {
        "content": "<p>I'll explain a bit more intuitively</p>",
        "id": 164008982,
        "sender_full_name": "varkor",
        "timestamp": 1556039378
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/uuQY9gB0SegzKy7l7toqi7Np/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/uuQY9gB0SegzKy7l7toqi7Np/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/uuQY9gB0SegzKy7l7toqi7Np/pasted_image.png\"></a></div>",
        "id": 164008984,
        "sender_full_name": "varkor",
        "timestamp": 1556039380
    },
    {
        "content": "<p>this is a typical product type (in context Gamma)</p>",
        "id": 164008991,
        "sender_full_name": "varkor",
        "timestamp": 1556039394
    },
    {
        "content": "<p>sure</p>",
        "id": 164009057,
        "sender_full_name": "centril",
        "timestamp": 1556039417
    },
    {
        "content": "<p>it's trivially the same as this diagram:</p>",
        "id": 164009062,
        "sender_full_name": "varkor",
        "timestamp": 1556039421
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/2a6gxkWla-pTiX0Hpug_myC0/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/2a6gxkWla-pTiX0Hpug_myC0/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/2a6gxkWla-pTiX0Hpug_myC0/pasted_image.png\"></a></div>",
        "id": 164009064,
        "sender_full_name": "varkor",
        "timestamp": 1556039424
    },
    {
        "content": "<p>because you can take A = A' and B = B'</p>",
        "id": 164009069,
        "sender_full_name": "varkor",
        "timestamp": 1556039435
    },
    {
        "content": "<p>however, if we don't let A' and B' be arbitrary, this is no longer as general as a product type, because you have \"projections\" only to the specified types A' and B'</p>",
        "id": 164009111,
        "sender_full_name": "varkor",
        "timestamp": 1556039472
    },
    {
        "content": "<p>in particular, if we take A' = B' = Bool, then we get this</p>",
        "id": 164009120,
        "sender_full_name": "varkor",
        "timestamp": 1556039483
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/bQTbFGMbQ3AB7vaCGMmtBp2N/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/bQTbFGMbQ3AB7vaCGMmtBp2N/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/bQTbFGMbQ3AB7vaCGMmtBp2N/pasted_image.png\"></a></div>",
        "id": 164009156,
        "sender_full_name": "varkor",
        "timestamp": 1556039514
    },
    {
        "content": "<p>(well, the A x B in the middle should be something else, e.g. <code>A &amp; B</code>)</p>",
        "id": 164009231,
        "sender_full_name": "varkor",
        "timestamp": 1556039547
    },
    {
        "content": "<p>here, our \"projections\" are only permitted to <code>bool</code></p>",
        "id": 164009237,
        "sender_full_name": "varkor",
        "timestamp": 1556039562
    },
    {
        "content": "<p>i.e. the projections are just functions to <code>bool</code>, or propositions</p>",
        "id": 164009250,
        "sender_full_name": "varkor",
        "timestamp": 1556039573
    },
    {
        "content": "<p>so this means that the type <code>A &amp; B</code> satisfies the same propositions as <code>A</code> and <code>B</code> separately, but you can't project</p>",
        "id": 164009295,
        "sender_full_name": "varkor",
        "timestamp": 1556039606
    },
    {
        "content": "<p>(we can obviously convert any product type into an intersection type)</p>",
        "id": 164009306,
        "sender_full_name": "varkor",
        "timestamp": 1556039620
    },
    {
        "content": "<p>(the type <code>bool</code> is known as a subobject classifier in a topos)</p>",
        "id": 164009373,
        "sender_full_name": "varkor",
        "timestamp": 1556039648
    },
    {
        "content": "<p>(but that's not important :) )</p>",
        "id": 164009383,
        "sender_full_name": "varkor",
        "timestamp": 1556039657
    },
    {
        "content": "<p>(it looks a little like a pullback type, but it's not as general)</p>",
        "id": 164009471,
        "sender_full_name": "varkor",
        "timestamp": 1556039714
    },
    {
        "content": "<p>so now we can define an \"intersection type\" in any category</p>",
        "id": 164009498,
        "sender_full_name": "varkor",
        "timestamp": 1556039733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> so we can get an intersection type by taking the usual product type but leave out the projections?</p>",
        "id": 164009641,
        "sender_full_name": "centril",
        "timestamp": 1556039828
    },
    {
        "content": "<p>you need these extra functions to <code>bool</code>, I think — otherwise the type isn't really an \"intersection\"</p>",
        "id": 164009799,
        "sender_full_name": "varkor",
        "timestamp": 1556039946
    },
    {
        "content": "<p>it's just some type that's guaranteed to exist</p>",
        "id": 164009812,
        "sender_full_name": "varkor",
        "timestamp": 1556039956
    },
    {
        "content": "<p>(the confusing thing about the nomenclature here is that this definition does not give the usual notion of intersection of sets)</p>",
        "id": 164010642,
        "sender_full_name": "varkor",
        "timestamp": 1556040537
    }
]