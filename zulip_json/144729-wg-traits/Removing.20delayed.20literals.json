[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> If you're around and want to talk about <a href=\"https://github.com/rust-lang/chalk/pull/270\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/270\">https://github.com/rust-lang/chalk/pull/270</a>, I'm here</p>",
        "id": 179366203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572377906
    },
    {
        "content": "<p>I'm around-ish</p>",
        "id": 179366209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572377915
    },
    {
        "content": "<p>np</p>",
        "id": 179366218,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572377921
    },
    {
        "content": "<p>going to be doing some reviewing, I think</p>",
        "id": 179366223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572377923
    },
    {
        "content": "<p>I might try later tonight to see if I can try to remove that branch entirely</p>",
        "id": 179366248,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572377949
    },
    {
        "content": "<p>but it'll require changes elsewhere</p>",
        "id": 179366272,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572377961
    },
    {
        "content": "<p>Basically, what I changed it to is that now when a cycle is detected, it's all the strands are marked as ambiguous. But I think for the majority of tests (since most aren't), a non-ambiguous answer is later found. But I need to double check this</p>",
        "id": 179366470,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572378080
    },
    {
        "content": "<p>I'm also thinking that a lot of this is probably occuring when <code>checked_program</code> is called, rather than actually trying to solve the test</p>",
        "id": 179366544,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572378119
    },
    {
        "content": "<p>The test goal(s), that is</p>",
        "id": 179366599,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572378132
    },
    {
        "content": "<p>Do you know if the delaying code is ever running?</p>",
        "id": 179366723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378234
    },
    {
        "content": "<p>I think it is not, apart from some specific tests in SLG</p>",
        "id": 179366757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378243
    },
    {
        "content": "<p>(I think that code path doesn't just trigger for cycles, it has to be a <em>negative</em> cycle, and there has to be no other strand that can obtain an answer)</p>",
        "id": 179366803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378272
    },
    {
        "content": "<p>The specific branch that you commented does get triggered for 99/146 tests</p>",
        "id": 179366830,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572378297
    },
    {
        "content": "<p>hmm</p>",
        "id": 179366834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378301
    },
    {
        "content": "<p>that's interesting :)</p>",
        "id": 179366854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378307
    },
    {
        "content": "<p>maybe I'll check it out and see what I'm missing</p>",
        "id": 179366864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378315
    },
    {
        "content": "<p>I don't think there was code to actually resolve the delayed_literals though? (maybe I'm misremembering) (I think that was issue <a href=\"https://github.com/rust-lang/rust/issues/79\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/79\">#79</a>)</p>",
        "id": 179366905,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572378350
    },
    {
        "content": "<p>we don't currently have code to \"undelay\" literals, right</p>",
        "id": 179366973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378373
    },
    {
        "content": "<p>but you are correct that it triggers much more frequently than I realized!</p>",
        "id": 179366985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378385
    },
    {
        "content": "<p>and indeed the errors are part of WF</p>",
        "id": 179367042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378422
    },
    {
        "content": "<p>presumably as part of coherence logic, which uses negative reasoning, but maybe not</p>",
        "id": 179367061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378440
    },
    {
        "content": "<p>OH</p>",
        "id": 179367178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378516
    },
    {
        "content": "<p>I think it may be tied to the \"CannotProve\" goal?</p>",
        "id": 179367191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378525
    },
    {
        "content": "<p>What is that used for again? Is it needed?</p>",
        "id": 179367264,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572378598
    },
    {
        "content": "<p>Yes, we need it, but that's ok</p>",
        "id": 179367348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378644
    },
    {
        "content": "<p>What I mean is</p>",
        "id": 179367372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378662
    },
    {
        "content": "<p>we are still going to need the notion of \"ambiguous strands\" that you added</p>",
        "id": 179367387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378674
    },
    {
        "content": "<p>and I expected to use them for CannotProve</p>",
        "id": 179367400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378685
    },
    {
        "content": "<p>we basically use it (in coherence) to force some answers into \"unknown\" territory</p>",
        "id": 179367421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378716
    },
    {
        "content": "<p>however</p>",
        "id": 179367470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378725
    },
    {
        "content": "<p>it looks like the way I <em>implemented</em> <code>CannotProve</code></p>",
        "id": 179367476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378731
    },
    {
        "content": "<p>was to make it so that the only way to prove <code>CannotProve</code> was to prove <code>not { CannotProve }</code>, thus (intentionally) inducing a little cycle</p>",
        "id": 179367493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378751
    },
    {
        "content": "<p>you can see this in <code>src/simplify.rs</code></p>",
        "id": 179367497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378758
    },
    {
        "content": "<p>we can presumably implement it a bit more directly</p>",
        "id": 179367502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378766
    },
    {
        "content": "<p>Right, I remember this bit of code</p>",
        "id": 179367517,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572378780
    },
    {
        "content": "<p>basically we could add another case to <code>push_initial_strands_instantiated</code></p>",
        "id": 179367623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378865
    },
    {
        "content": "<p>that just adds 1 ambiguous strand for <code>CannotProve</code></p>",
        "id": 179367635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572378874
    },
    {
        "content": "<p>Sounds reasonable</p>",
        "id": 179367800,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572378986
    },
    {
        "content": "<p>Actually, just adding <code>ex_clause.ambiguous = true</code> to <code>simplify</code> and removing the <code>cannot_prove</code> goal makes all the tests pass except for the ones that are trying to test the negative cycle</p>",
        "id": 179368039,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572379159
    },
    {
        "content": "<p>(with that branch panicing)</p>",
        "id": 179368055,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572379172
    },
    {
        "content": "<p>err, not quite. <code>example_2_3_EWFS</code> also fails, which is not ambiguous</p>",
        "id": 179368175,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572379210
    },
    {
        "content": "<p>how does it fail?</p>",
        "id": 179368317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572379316
    },
    {
        "content": "<p>oh, that's ok</p>",
        "id": 179368373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572379332
    },
    {
        "content": "<p>I mean that is also testing negative cycles</p>",
        "id": 179368388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572379341
    },
    {
        "content": "<p>via this rule:</p>\n<div class=\"codehilite\"><pre><span></span>X: W :- ..., not { Y: W }, ...\n</pre></div>",
        "id": 179368448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572379384
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>test::slg::contradiction\ntest::slg::example_2_3_EWFS\ntest::slg::example_3_3_EWFS\ntest::slg::negative_answer_ambiguous\ntest::slg::negative_loop\n</pre></div>",
        "id": 179368459,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572379393
    },
    {
        "content": "<p>Those are the only tests that fail</p>",
        "id": 179368473,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572379400
    },
    {
        "content": "<p>yeah, I think those are all the tests that are specifically targeting negative cycles</p>",
        "id": 179368492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572379415
    },
    {
        "content": "<p>Yep</p>",
        "id": 179368500,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572379420
    },
    {
        "content": "<p>So, rather than panic, should it just return an error?</p>",
        "id": 179368787,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572379618
    },
    {
        "content": "<p><code>RecursiveSearchFail::NegativeCycle</code>?</p>",
        "id": 179368904,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572379689
    },
    {
        "content": "<p>(does not exist atm)</p>",
        "id": 179368921,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572379701
    },
    {
        "content": "<p>Slightly different than <code>RecursiveSearchFail::Cycle(Minimums)</code></p>",
        "id": 179368944,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572379727
    },
    {
        "content": "<p>which could be changed to <code>RecursiveSearchFail::PositiveCycle(Minimums)</code></p>",
        "id": 179368982,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572379750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok, that works. I just added a new enum value <code>NegativeCycle</code> to <code>RecursiveSearchFail</code> <code>RootSearchFail</code> and <code>StrandFail</code> that when encountered fail immediately</p>",
        "id": 179370662,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572380886
    },
    {
        "content": "<p>This just gets changed into <code>None</code> for an answer</p>",
        "id": 179370684,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572380908
    },
    {
        "content": "<p>I forget what the semantics of <code>None</code> are</p>",
        "id": 179370697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572380922
    },
    {
        "content": "<p>but that sounds plausible :)</p>",
        "id": 179370700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572380926
    },
    {
        "content": "<p>the reason to panic is that we are supposed to not encounter negative cycles by construction</p>",
        "id": 179370729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572380949
    },
    {
        "content": "<p>but I think propagating it out from the <em>core engine</em></p>",
        "id": 179370738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572380957
    },
    {
        "content": "<p><code>Floundered</code> also returns <code>None</code></p>",
        "id": 179370743,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572380961
    },
    {
        "content": "<p>to a level more like <code>chalk-solve</code> seems good</p>",
        "id": 179370748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572380964
    },
    {
        "content": "<p>yes, ok.</p>",
        "id": 179370770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572380978
    },
    {
        "content": "<p>yeah, I figured propagating out makes more sense than panicing here</p>",
        "id": 179370782,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572380989
    },
    {
        "content": "<blockquote>\n<p>to a level more like <code>chalk-solve</code> seems good</p>\n</blockquote>\n<p>in partcular, it's chalk-solve that would be maintaining this invariant</p>",
        "id": 179370786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572380989
    },
    {
        "content": "<p>Hmm</p>",
        "id": 179370855,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572381011
    },
    {
        "content": "<p>Ok, so probably add another variant to <code>Solution</code>: <code>NegativeCycle</code>?</p>",
        "id": 179370909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572381054
    },
    {
        "content": "<p>Or just panic</p>",
        "id": 179370913,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572381058
    },
    {
        "content": "<p>err</p>",
        "id": 179370954,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572381085
    },
    {
        "content": "<p>By then, it's <code>Some(answer)</code> or <code>None</code></p>",
        "id": 179370991,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572381106
    },
    {
        "content": "<p>Alright so I was wrong. <code>Floundered</code> returns <code>Some(..)</code> with an ambiguous answer. <code>NoMoreSolutions</code> returns <code>None</code></p>",
        "id": 179371263,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572381284
    },
    {
        "content": "<p>Ah, yeah, that's quite distinct :)</p>",
        "id": 179371282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572381298
    },
    {
        "content": "<p>so I guess two options:</p>",
        "id": 179371309,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572381318
    },
    {
        "content": "<p>1) return <code>Some(Answer)</code> with no <code>substs</code> and <code>ambiguous: true</code></p>",
        "id": 179371339,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572381343
    },
    {
        "content": "<p>My main argument for panic <em>somewhere</em> (I'd have to go check in to the code to figure out just where) is that I would want to know if this is happening</p>",
        "id": 179371344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572381350
    },
    {
        "content": "<p>and not have it get hidden</p>",
        "id": 179371345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572381350
    },
    {
        "content": "<p>2) Change <code>AnswerStream</code> to return either <code>Result&lt;Option&lt;Answer&gt;, ..&gt;</code></p>",
        "id": 179371402,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572381377
    },
    {
        "content": "<p>or I guess 3)</p>",
        "id": 179371408,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572381382
    },
    {
        "content": "<p>panic in <code>AnswerStream</code></p>",
        "id": 179371414,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572381388
    },
    {
        "content": "<p>I think for the sake of simplicity now, I'll just panic in <code>AnswerStream</code> for now. If someone specifically needs to catch that outside of <code>engine</code>, then more edits to <code>AnswerStream</code> will need to be made</p>",
        "id": 179371620,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572381542
    },
    {
        "content": "<p>Does that work?</p>",
        "id": 179371631,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572381546
    },
    {
        "content": "<p>Yep</p>",
        "id": 179371653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572381566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Ok I updated the PR</p>",
        "id": 179372857,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572382256
    },
    {
        "content": "<p>nice</p>",
        "id": 179372888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572382276
    },
    {
        "content": "<p>I kept the negative cycle tests but just marked them as <code>#[should_panic]</code></p>",
        "id": 179372890,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572382276
    },
    {
        "content": "<p>perfect, thanks!</p>",
        "id": 179372902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572382284
    },
    {
        "content": "<p>maybe with a comment :)</p>",
        "id": 179372908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572382287
    },
    {
        "content": "<p>I did add a comment in the <code>goal</code> block for each test</p>",
        "id": 179373019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572382354
    },
    {
        "content": "<p>I could add/move those to the function doc comments if you want</p>",
        "id": 179373041,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572382373
    },
    {
        "content": "<p>left a quick review</p>",
        "id": 179373415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572382610
    },
    {
        "content": "<p>with <a href=\"https://github.com/rust-lang/chalk/pull/270#pullrequestreview-308826510\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/270#pullrequestreview-308826510\">various suggestions</a></p>",
        "id": 179373433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572382626
    },
    {
        "content": "<p>Updated :)</p>",
        "id": 179373754,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572382822
    },
    {
        "content": "<p>Also added the panic case to the <code>peek_answer</code> and <code>force_answers</code> doc</p>",
        "id": 179373784,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572382855
    },
    {
        "content": "<p>nice</p>",
        "id": 179374187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572383108
    },
    {
        "content": "<p>merged</p>",
        "id": 179374518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572383324
    },
    {
        "content": "<p>Awesome</p>",
        "id": 179374582,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572383370
    },
    {
        "content": "<p>I'm curious if you're interested in taking on the follow-up work around making coinduction sound :)</p>",
        "id": 179374599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572383391
    },
    {
        "content": "<p>(which sort of involves re-introducing delayed literals, but in a different form)</p>",
        "id": 179374653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572383405
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/248\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/248\">https://github.com/rust-lang/chalk/issues/248</a></p>",
        "id": 179374666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572383421
    },
    {
        "content": "<p>I am curious, yes</p>",
        "id": 179374673,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572383429
    },
    {
        "content": "<p>and interested</p>",
        "id": 179374681,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572383437
    },
    {
        "content": "<p>I'll try to take a look at it sometime this week</p>",
        "id": 179374701,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572383447
    },
    {
        "content": "<p>Do you have an idea of how to solve this?</p>",
        "id": 179374862,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572383565
    },
    {
        "content": "<p>If not, it's fine. Just curious if you do</p>",
        "id": 179374872,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572383574
    },
    {
        "content": "<p>I do</p>",
        "id": 179380337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572387297
    },
    {
        "content": "<p>Would love to hear your thoughts before I start</p>",
        "id": 179381349,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572387920
    },
    {
        "content": "<p>So while I've been sort of wrapping my head more around the cycles code, I realized that my rename from <code>StrandFail::Cycle</code> -&gt; <code>StrandFail::PositiveCycle</code> isn't exactly accurate.</p>",
        "id": 179396587,
        "sender_full_name": "Jack Huey",
        "timestamp": 1572401348
    }
]