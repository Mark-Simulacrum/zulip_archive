[
    {
        "content": "<p>Nice summary for the state of things, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> . I've been wanting to get into the rustc side of things more, let me see if I can help things advance by starting the <code>ty.kind(tcx)</code> step in the type library part, now that the <code>ty.kind()</code> step is almost done</p>",
        "id": 207036142,
        "sender_full_name": "detrumi",
        "timestamp": 1597520665
    },
    {
        "content": "<p>Yeah, <code>ty.kind(tcx)</code> would be a good place to start/continue</p>",
        "id": 207036193,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597520756
    },
    {
        "content": "<p>perf looked fine on the <code>ty.kind()</code> PR, so I think it's probably just waiting on a review from <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 207036246,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597520781
    },
    {
        "content": "<p>It’s also waiting on the MCP being accepted</p>",
        "id": 207036266,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597520815
    },
    {
        "content": "<p>(well, it says waiting on fcp for the mcp, but it's been like 8 days since a second)</p>",
        "id": 207036267,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597520817
    },
    {
        "content": "<p>FCP lasts 10 days IIRC</p>",
        "id": 207036283,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597520838
    },
    {
        "content": "<p>yeah, so tomorrow</p>",
        "id": 207036290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597520854
    },
    {
        "content": "<p>Niko won't get to the review until Monday at least</p>",
        "id": 207036298,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597520867
    },
    {
        "content": "<p>Not expecting trouble there, since there was a compiler design meeting about that</p>",
        "id": 207036337,
        "sender_full_name": "detrumi",
        "timestamp": 1597520885
    },
    {
        "content": "<p>Though we'll see how much bikeshedding is still needed on the later steps</p>",
        "id": 207036347,
        "sender_full_name": "detrumi",
        "timestamp": 1597520915
    },
    {
        "content": "<p>Right, I don't think anyone is going to be particularly troubled by these changes</p>",
        "id": 207036355,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597520933
    },
    {
        "content": "<p>One thing that we will have to think about is the <code>TypeFlags</code></p>",
        "id": 207036503,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597521208
    },
    {
        "content": "<p>And where that would fit into chalk's idea of <code>Ty</code></p>",
        "id": 207036512,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597521230
    },
    {
        "content": "<p>(and to some extent the <code>outer_exclusive_binder</code>)</p>",
        "id": 207036583,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597521295
    },
    {
        "content": "<p>I guess <code>InternedType</code> would be <code>&amp;'tcx TyS&lt;'tcx&gt;</code> and <code>ty_data</code> would return <code>ty.kind(self.tcx)</code></p>",
        "id": 207036752,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597521524
    },
    {
        "content": "<p>(moving messages to new topic)</p>",
        "id": 207037298,
        "sender_full_name": "detrumi",
        "timestamp": 1597522335
    },
    {
        "content": "<p>One downside of changing <code>kind()</code> to <code>kind(tcx)</code> while leaving the interner for a later PR is that things like <code>impl Ord for TyS</code> become tricky</p>",
        "id": 207037488,
        "sender_full_name": "detrumi",
        "timestamp": 1597522674
    },
    {
        "content": "<p>We need <code>Ord</code> for <code>TyS</code>?</p>",
        "id": 207037769,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597523124
    },
    {
        "content": "<p>rustc might use it, and that's something that could be added to the associated type bound later if it turns out to be needed</p>",
        "id": 207037818,
        "sender_full_name": "detrumi",
        "timestamp": 1597523175
    },
    {
        "content": "<p>Lots of structs that hold a type also derive Ord</p>",
        "id": 207037897,
        "sender_full_name": "detrumi",
        "timestamp": 1597523285
    },
    {
        "content": "<p>But this is just the same problem that we had with passing the interner everywhere in chalk</p>",
        "id": 207037925,
        "sender_full_name": "detrumi",
        "timestamp": 1597523345
    },
    {
        "content": "<p>I was asking some questions too in <a href=\"#narrow/stream/131828-t-compiler/topic/Refactor.20types.20to.20fit.20the.20chalk-ty.20generic.20plan\">this topic</a></p>",
        "id": 207040000,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597526632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Type.20library/near/207037488\">said</a>:</p>\n<blockquote>\n<p>One downside of changing <code>kind()</code> to <code>kind(tcx)</code> while leaving the interner for a later PR is that things like <code>impl Ord for TyS</code> become tricky</p>\n</blockquote>\n<p>This is also what I was thinking when I first tried to get my hands on this task, but I'm thinking that for now we could directly use the <code>kind</code> field instead</p>",
        "id": 207080220,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597598875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> That would require <code>TyS.kind</code> to be public again, but yeah, that's a way to do it</p>",
        "id": 207080918,
        "sender_full_name": "detrumi",
        "timestamp": 1597600012
    },
    {
        "content": "<p>I mean, we can do that in the meantime</p>",
        "id": 207080932,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597600051
    },
    {
        "content": "<p>Though I’m not sure to understand what the \"final product\" will look like</p>",
        "id": 207080980,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597600094
    },
    {
        "content": "<p>It would be quite similar to how it's now done in chalk, I think</p>",
        "id": 207080992,
        "sender_full_name": "detrumi",
        "timestamp": 1597600139
    },
    {
        "content": "<p>When using associated types on the interner, <code>Ord</code> is not a problem because you can specify it as a bound on the associated type</p>",
        "id": 207081075,
        "sender_full_name": "detrumi",
        "timestamp": 1597600252
    },
    {
        "content": "<p>And setups like <code>TypeVisitor</code> would need to thread the interner through in some way as well</p>",
        "id": 207081297,
        "sender_full_name": "detrumi",
        "timestamp": 1597600457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> The examples in the <a href=\"https://rust-lang.github.io/compiler-team/minutes/design-meeting/2020-03-12-shared-library-for-types/\">meeting notes</a> goes most of the way in showing what the end result would look like, wouldn't it?</p>",
        "id": 207081517,
        "sender_full_name": "detrumi",
        "timestamp": 1597600711
    },
    {
        "content": "<p>Yes, but I had some questions like \"what would the <code>outer_exclusive_binder</code>field become?\"</p>",
        "id": 207082082,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597601277
    },
    {
        "content": "<p>My understanding is that we'd keep the <code>TyS</code> struct and intern that, but hide it as an implementation detail of <code>rustc</code>. Is that right?</p>",
        "id": 207082183,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597601329
    },
    {
        "content": "<p>Yes</p>",
        "id": 207082203,
        "sender_full_name": "detrumi",
        "timestamp": 1597601373
    },
    {
        "content": "<p>Can't the <code>outer_exclusive_binder</code> field be bundled with the flags?</p>",
        "id": 207082251,
        "sender_full_name": "detrumi",
        "timestamp": 1597601387
    },
    {
        "content": "<p>Like the <code>FlagComputation</code> struct right now</p>",
        "id": 207082300,
        "sender_full_name": "detrumi",
        "timestamp": 1597601404
    },
    {
        "content": "<p>I'm not sure on the details of those fields, but I'm assuming that from the type lib's point of view, everything is split between the data and everything else (flags)</p>",
        "id": 207082410,
        "sender_full_name": "detrumi",
        "timestamp": 1597601582
    },
    {
        "content": "<p>Side note: if you want to do the <code>ty.kind() -&gt; ty.kind(tcx)</code>, I wanted to propose my help</p>",
        "id": 207082590,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597601691
    },
    {
        "content": "<p>You mean work together on the same branch? Or just reviewing? (hope I'm also not \"stealing\" this task from you)</p>",
        "id": 207082672,
        "sender_full_name": "detrumi",
        "timestamp": 1597601803
    },
    {
        "content": "<p>But yeah, great</p>",
        "id": 207082683,
        "sender_full_name": "detrumi",
        "timestamp": 1597601864
    },
    {
        "content": "<p>It's going to be a boring task, so I thought working together on the same would be a good idea</p>",
        "id": 207082687,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597601872
    },
    {
        "content": "<p>And no you're not stealing anything, I'm not here because of <a href=\"http://thanks.rust-lang.org\">thanks.rust-lang.org</a> x)</p>",
        "id": 207082737,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597601912
    },
    {
        "content": "<p>Hmm, I suppose that in some cases, needing to pass the <code>TyCtxt</code> allows some other refactors, like here:</p>\n<div class=\"codehilite\"><pre><span></span><code>needs_drop_components(self, &amp;tcx.data_layout, tcx)\n</code></pre></div>",
        "id": 207083360,
        "sender_full_name": "detrumi",
        "timestamp": 1597603043
    },
    {
        "content": "<p>Started a branch on top of your <code>ty.kind()</code> branch: <a href=\"https://github.com/rust-lang/rust/compare/master...detrumi:tcx-in-ty-kind\">https://github.com/rust-lang/rust/compare/master...detrumi:tcx-in-ty-kind</a></p>",
        "id": 207083613,
        "sender_full_name": "detrumi",
        "timestamp": 1597603544
    },
    {
        "content": "<p>The <code>TypeFolder</code> trait already has a <code>tcx()</code> method, not sure if <code>TypeVisitor</code> needs one as well. Might be easier to just add <code>tcx</code> parameters to the 4 trait functions instead. But then <code>TypeFoldable</code> also starts needing it...</p>",
        "id": 207083867,
        "sender_full_name": "detrumi",
        "timestamp": 1597603983
    },
    {
        "content": "<p>Oh that's funny, there's already a <code>HasTyCtxt</code> trait in rustc, but it's specific to <code>ty/layout.rs</code></p>",
        "id": 207084121,
        "sender_full_name": "detrumi",
        "timestamp": 1597604222
    },
    {
        "content": "<p>I'll hold off on generalizing that for now to avoid possible performance impacts of generics, though maybe we'll need it at some point</p>",
        "id": 207084245,
        "sender_full_name": "detrumi",
        "timestamp": 1597604346
    },
    {
        "content": "<p>Alright, that's most of the trivial cases. Going off the remaining errors, there's a few categories left:</p>\n<ul>\n<li>PartialEq, Hash and Borrow impls for <code>TyKind</code>, Ord impl for TyS</li>\n<li>Some <code>Display</code> impls</li>\n<li><code>TypeVisitor</code> and <code>TypeFoldable</code></li>\n<li>Some places that don't have a <code>TyCtxt</code> around<br>\n(and probably some cases I missed <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</li>\n</ul>",
        "id": 207086871,
        "sender_full_name": "detrumi",
        "timestamp": 1597607799
    },
    {
        "content": "<p>Okay, most trivial cases in librustc_middle. I see there's also a lot of calls in codegen/mir/clippy and others I haven't checked yet</p>",
        "id": 207087136,
        "sender_full_name": "detrumi",
        "timestamp": 1597608095
    }
]