[
    {
        "content": "<p>So i've read the doc multiple times, but i don't really understand what a binder is.</p>",
        "id": 201785086,
        "sender_full_name": "marmeladema",
        "timestamp": 1592947278
    },
    {
        "content": "<p>So, you can either have a <code>forall&lt;X&gt; ...</code> or <code>exists&lt;X&gt; ...</code></p>",
        "id": 201785979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592947764
    },
    {
        "content": "<p><code>X</code> in these cases are binders</p>",
        "id": 201785989,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592947774
    },
    {
        "content": "<p>In chalk, you might see something like <code>forall&lt;type&gt; exists&lt;type&gt; ^0.0: ^1.0</code></p>",
        "id": 201786170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592947858
    },
    {
        "content": "<p>Its like, some kind of anonymous type? Probably is a terrible description but like \"some type that we don't know yet what it is\"?</p>",
        "id": 201786173,
        "sender_full_name": "marmeladema",
        "timestamp": 1592947861
    },
    {
        "content": "<p>Mmm, basically</p>",
        "id": 201786196,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592947874
    },
    {
        "content": "<p>more info: <a href=\"http://rust-lang.github.io/chalk/book/glossary.html?highlight=binder#binder\">http://rust-lang.github.io/chalk/book/glossary.html?highlight=binder#binder</a></p>",
        "id": 201786253,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592947905
    },
    {
        "content": "<p>I've read that but the definition is the dev guide is slightly different i believe</p>",
        "id": 201786337,
        "sender_full_name": "marmeladema",
        "timestamp": 1592947938
    },
    {
        "content": "<p>how is it different?</p>",
        "id": 201786429,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592948004
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Binder is a binder for higher-ranked lifetimes or types. It is part of the compiler&#39;s representation for things like for&lt;&#39;a&gt; Fn(&amp;&#39;a isize) (which would be represented by the type PolyTraitRef == Binder&lt;TraitRef&gt;)\n</code></pre></div>",
        "id": 201786545,
        "sender_full_name": "marmeladema",
        "timestamp": 1592948062
    },
    {
        "content": "<p>I guess  what could help me understand is some diagrams to go from syntax -&gt; AST -&gt; HIR etc</p>",
        "id": 201786622,
        "sender_full_name": "marmeladema",
        "timestamp": 1592948119
    },
    {
        "content": "<p>I would say it's a place that introduces a new variable</p>",
        "id": 201786836,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592948227
    },
    {
        "content": "<p>what exactly the variable means depends on the type of binder (forall or exists, or e.g. the variable representing the self type of a <code>dyn Trait</code>)</p>",
        "id": 201786933,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592948283
    },
    {
        "content": "<p>Ok thanks</p>",
        "id": 201788515,
        "sender_full_name": "marmeladema",
        "timestamp": 1592949099
    },
    {
        "content": "<p>Still need to think about it more.</p>",
        "id": 201788530,
        "sender_full_name": "marmeladema",
        "timestamp": 1592949111
    },
    {
        "content": "<p>If you think about this piece of code</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">|</span><span class=\"n\">x</span>: <span class=\"kt\">u32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><code>x</code> doesn't mean anything in the body of the closure without the preceeding <code>|x: u32|</code>. We say that <code>|x: u32|</code> <em>binds</em>  <code>x</code> in the body. The same idea exists for types!</p>\n<p><code>Foo&lt;X&gt;</code> doesn't mean anything unless <code>X</code> is somehow <em>bound</em>. <code>forall&lt;X&gt;</code> and <code>exists&lt;X&gt;</code> introduce <code>'a</code> in the same way as <code>|x: u32|</code> introduced <code>x</code>.</p>",
        "id": 201834101,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1592996209
    },
    {
        "content": "<p>Thank you! You meant <code>introduce X</code> instead of <code>'a</code> right?</p>",
        "id": 201835576,
        "sender_full_name": "marmeladema",
        "timestamp": 1592997421
    },
    {
        "content": "<p>Yeah sorry about that hahaha</p>",
        "id": 201844805,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1593004252
    }
]