[
    {
        "content": "<p>So I was talking to <span class=\"user-mention\" data-user-id=\"325709\">@Jade</span> about extending chalk to be able to identify the definition of a particular method, so that rust-analyzer can do a better job with jump-to-definition</p>",
        "id": 245488463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625859870
    },
    {
        "content": "<p>This is of course something rustc is going to need</p>",
        "id": 245488465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625859874
    },
    {
        "content": "<p>The basic idea is to model it very similarly to assoc type equality, though we really <em>only</em> need the <code>Normalize</code> predicate, I think, not <code>ProjectionEq</code> and all that jazz</p>",
        "id": 245488507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625859899
    },
    {
        "content": "<p>I'm going to open a chalk issue and dump some of the notes from the paper doc we were using</p>",
        "id": 245488541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625859915
    },
    {
        "content": "<p>So, the idea is being able to answer what impl matches?</p>",
        "id": 245488729,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625859991
    },
    {
        "content": "<p>Yep.</p>",
        "id": 245488762,
        "sender_full_name": "Jade",
        "timestamp": 1625860013
    },
    {
        "content": "<p>One question I forgot to ask is, how does this interact with specialization? The answer of \"what impl is it (or is it in the trait itself)\" would change per-function then.</p>",
        "id": 245488931,
        "sender_full_name": "Jade",
        "timestamp": 1625860098
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/716\">https://github.com/rust-lang/chalk/issues/716</a></p>",
        "id": 245489088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625860196
    },
    {
        "content": "<p>I'll fill in the impl steps in a sec, have to go check on the flooding basement <span aria-label=\"rainy\" class=\"emoji emoji-1f327\" role=\"img\" title=\"rainy\">:rainy:</span></p>",
        "id": 245489143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625860213
    },
    {
        "content": "<p>o.o good luck</p>",
        "id": 245489173,
        "sender_full_name": "Jack Huey",
        "timestamp": 1625860232
    },
    {
        "content": "<p>the rain has slowed down now</p>",
        "id": 245489913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625860607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325709\">Jade</span> <a href=\"#narrow/stream/144729-wg-traits/topic/resolving.20methods/near/245488931\">said</a>:</p>\n<blockquote>\n<p>One question I forgot to ask is, how does this interact with specialization? The answer of \"what impl is it (or is it in the trait itself)\" would change per-function then.</p>\n</blockquote>\n<p>answer: same way it does for assoc types, which admittedly we're still experimenting with a bit;</p>",
        "id": 245489938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625860622
    },
    {
        "content": "<p>the naive thing will land you with ambiguity</p>",
        "id": 245489965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625860637
    },
    {
        "content": "<p>because you now have overlapping impls, as we discussed</p>",
        "id": 245489973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625860643
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/716#issuecomment-877427095\">implementation steps</a></p>",
        "id": 245490987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625861105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325709\">@Jade</span> are you <code>lf-</code> on github?</p>",
        "id": 245491039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1625861135
    },
    {
        "content": "<p>Yes.</p>",
        "id": 245491054,
        "sender_full_name": "Jade",
        "timestamp": 1625861142
    },
    {
        "content": "<p>This is going, OK, mostly. It's taken a lot of time to learn stuff, and I'm just through getting the types right and the parser/lowering almost there.</p>",
        "id": 245883716,
        "sender_full_name": "Jade",
        "timestamp": 1626208593
    },
    {
        "content": "<p>The front end of this part of the chalk \"compiler\", is done, but now I got to the part with actually generating program clauses and I'm lost. I think I need an example of a NormalizeFn rule with a sample trait. I'm particularly confused about the rules I need to add as conditions to the expression</p>",
        "id": 245947118,
        "sender_full_name": "Jade",
        "timestamp": 1626262075
    },
    {
        "content": "<p>I think it should pretty much match the <code>Normalize</code> rule: <a href=\"https://github.com/rust-lang/chalk/blob/9456600c1649ef6aad9a7a2e38312185047ec509/chalk-solve/src/clauses/program_clauses.rs#L53-L77\">https://github.com/rust-lang/chalk/blob/9456600c1649ef6aad9a7a2e38312185047ec509/chalk-solve/src/clauses/program_clauses.rs#L53-L77</a></p>",
        "id": 245955637,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1626267593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325709\">@Jade</span> btw, I've created an \"office hours\" setup: <a href=\"https://calendly.com/nikomatsakis/office-hours\">https://calendly.com/nikomatsakis/office-hours</a></p>",
        "id": 246105817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626360888
    },
    {
        "content": "<p>you can use that to book time with me</p>",
        "id": 246105832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626360893
    },
    {
        "content": "<p>I'll probably expand to more times, I started small</p>",
        "id": 246105846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626360897
    },
    {
        "content": "<p>Alright, booked one next week.</p>",
        "id": 246358918,
        "sender_full_name": "Jade",
        "timestamp": 1626582052
    }
]