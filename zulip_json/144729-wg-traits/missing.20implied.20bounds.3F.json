[
    {
        "content": "<p>trying to fix <a href=\"https://github.com/rust-lang/rust/issues/95275\">#95275</a> I changed mir typeck to always require wf bounds: <a href=\"https://github.com/rust-lang/rust/pull/95763/commits/38b5a0a1c88c62eacb068fbd7b287e968a2bf382\">https://github.com/rust-lang/rust/pull/95763/commits/38b5a0a1c88c62eacb068fbd7b287e968a2bf382</a></p>",
        "id": 278146342,
        "sender_full_name": "lcnr",
        "timestamp": 1649329296
    },
    {
        "content": "<p>this causes us to need some additional bounds which really shouldn't be happening <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 278146429,
        "sender_full_name": "lcnr",
        "timestamp": 1649329345
    },
    {
        "content": "<p>also, <code>rustc-demangle</code> does something with lifetime we don't check in any test</p>",
        "id": 278146605,
        "sender_full_name": "lcnr",
        "timestamp": 1649329475
    },
    {
        "content": "<p>cause that actually broke when checking that all locals are wf when used</p>",
        "id": 278146685,
        "sender_full_name": "lcnr",
        "timestamp": 1649329551
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/95519#discussion_r843918947\">https://github.com/rust-lang/rust/pull/95519#discussion_r843918947</a> had a similar problem for associated type alias impl trait</p>",
        "id": 278146763,
        "sender_full_name": "oli",
        "timestamp": 1649329583
    },
    {
        "content": "<p>i don't get the error for <code>rustc-demangle</code>, it's caused by</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(nll)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Printer</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">parser</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">s</span> <span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">out</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Printer</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">in_binder</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">print_type</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">in_binder</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">this</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">print_type</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278155434,
        "sender_full_name": "lcnr",
        "timestamp": 1649334265
    },
    {
        "content": "<p><code>rustc_mir_dataflow</code> hitting me with the</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">fmt_with</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ctxt</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">C</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">unimplemented!</span><span class=\"p\">(</span><span class=\"s\">\"implement when/if needed\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278156807,
        "sender_full_name": "lcnr",
        "timestamp": 1649334893
    },
    {
        "content": "<p>I have no idea :( <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can I get you to look at <a href=\"https://github.com/rust-lang/rust/issues/95275\">#95275</a> given this minimization? Preferably in sync because I want to know how to efficiently debug stuff like that and have pretty much no idea <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 278158756,
        "sender_full_name": "lcnr",
        "timestamp": 1649335802
    },
    {
        "content": "<p>the error is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error: lifetime may not live long enough\n  --&gt; src/lib.rs:10:9\n   |\n6  | impl&lt;'a, 's&gt; Printer&lt;'a, 's&gt; {\n   |      --  -- lifetime `'s` defined here\n   |      |\n   |      lifetime `'a` defined here\n...\n10 |         self.in_binder(|this| Self::print_type(this))\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'a` must outlive `'s`\n   |\n   = help: consider adding the following bound: `'a: 's`\n   = note: requirement occurs because of a mutable reference to `Printer&lt;'_#11r, '_#12r&gt;`\n   = note: mutable references are invariant over their type parameter\n   = help: see &lt;https://doc.rust-lang.org/nomicon/subtyping.html&gt; for more information about variance\n\nerror: lifetime may not live long enough\n  --&gt; src/lib.rs:10:9\n   |\n6  | impl&lt;'a, 's&gt; Printer&lt;'a, 's&gt; {\n   |      --  -- lifetime `'s` defined here\n   |      |\n   |      lifetime `'a` defined here\n...\n10 |         self.in_binder(|this| Self::print_type(this))\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'s` must outlive `'a`\n   |\n   = help: consider adding the following bound: `'s: 'a`\n   = note: requirement occurs because of a mutable reference to `Printer&lt;'_#11r, '_#12r&gt;`\n   = note: mutable references are invariant over their type parameter\n   = help: see &lt;https://doc.rust-lang.org/nomicon/subtyping.html&gt; for more information about variance\n\nhelp: `'a` and `'s` must be the same: replace one with the other\n</code></pre></div>\n<p>I have no idea why these 2 errors don't get deduplicated (probably because the second one has \"help: <code>'a</code> and <code>'s</code> must be the same: replace one with the other\"? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 278158972,
        "sender_full_name": "lcnr",
        "timestamp": 1649335908
    }
]