[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> -- now that the first leak-check PR landed, one of the things I wanted to do was to enumerate the next steps. I think the things on my mind are:</p>\n<ul>\n<li>integrate the 'empty' treatment with NLL</li>\n<li>figure out what we are going to do about the wasm-bindgen regressions</li>\n<li>..?</li>\n</ul>",
        "id": 187849321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581362679
    },
    {
        "content": "<p>On the latter point in particular, I was curious if you agreed with my reasoning on why we probably <em>should</em> be accepting those impls</p>",
        "id": 187849338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581362695
    },
    {
        "content": "<p>I agree that <code>dyn for&lt;'a&gt; Fn(&amp;'a A)</code> and <code>dyn Fn(&amp;'r A)</code> are not equal for any choice of <code>'r</code>. I had two concerns:</p>\n<ul>\n<li>I don't know how we can check for cases like this in a way that works for both selection and coherence.</li>\n<li>At some point we may consider <code>dyn for&lt;'a&gt; Fn(&amp;'a &amp;'r A, &amp;'r &amp;'a A)</code> and <code>dyn Fn(&amp;'b &amp;'b A, &amp;'b &amp;'b A)</code>to be equal if <code>'a == 'b</code> (because of the implied <code>'a == 'r</code> bound) but I can't see how this  can be distinguished from the case above.</li>\n</ul>",
        "id": 187851861,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1581364474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> yes, I agree on the second point, and I remember that this <em>specifically</em> was a reason I wanted to be \"maximally cosnervative\" here. i.e., to give us room to get smarter about which regions outlive which other ones</p>",
        "id": 187855741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581367225
    },
    {
        "content": "<p>or at least, I agree that's something I want to think carefully about</p>",
        "id": 187855756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581367236
    },
    {
        "content": "<p>as to the first point, I guess one way to go about this might be to rework the leak-check to be much more conservative about what it rejects</p>",
        "id": 187855800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581367271
    },
    {
        "content": "<p>that would apply equally</p>",
        "id": 187855822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581367288
    },
    {
        "content": "<p>but it still requires us to wrestle with the second point, I have to look carefully at those types you gave as examples :)</p>",
        "id": 187855838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581367300
    },
    {
        "content": "<blockquote>\n<p>as to the first point, I guess one way to go about this might be to rework the leak-check to be much more conservative about what it rejects</p>\n</blockquote>\n<p>It does seem like \"a worse leak check\" is roughly what this would have to be, for now.</p>",
        "id": 187856752,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1581367942
    },
    {
        "content": "<p>\"worse\"?</p>",
        "id": 187857716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581368547
    },
    {
        "content": "<p>I'd have said \"better\" -- i.e., not rejecting things that are valid :)</p>",
        "id": 187857737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581368560
    }
]