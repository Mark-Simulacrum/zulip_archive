[
    {
        "content": "<p>There is an inconsistency in <code>u_canonicalize</code>/<code>map_from_canonical</code>/<code>apply_answer_subst</code>, but since I don't know the intended design that well, I would like someone else to confirm my suspicions. <br>\n1) <code>u_canonicalize</code> does not add canonical binders to <code>UniverseMap</code>, which is intended, as I understand, because we don't care much about inference var universes between placeholder universes</p>",
        "id": 200109815,
        "sender_full_name": "Areredify",
        "timestamp": 1591628444
    },
    {
        "content": "<p>2) <code>map_from_canonical</code> does not map inference var universes back to the original universes, which is a little weird and I don't know if it's intended</p>",
        "id": 200110328,
        "sender_full_name": "Areredify",
        "timestamp": 1591628624
    },
    {
        "content": "<p>By that I mean that if I pass <code>Canonical&lt;T&gt;</code> to <code>map_from_canonical</code>, then binders won't be affected</p>",
        "id": 200110518,
        "sender_full_name": "Areredify",
        "timestamp": 1591628684
    },
    {
        "content": "<p>3) <code>apply_answer_subst</code> takes that remapped canonical value, whose binders' universes are still in canonicalized form, and instantiates them? I don't understand why that is the way it is</p>",
        "id": 200110956,
        "sender_full_name": "Areredify",
        "timestamp": 1591628844
    },
    {
        "content": "<p>What I think was intended: canonical binders should be remapped back to their original universes before instantiating, but I don't know how correct is that, because we didn't save those universes to the <code>UniverseMap</code> in <code>u_canonicalize</code>, we only saved the placeholder variables universes.</p>",
        "id": 200112263,
        "sender_full_name": "Areredify",
        "timestamp": 1591629366
    },
    {
        "content": "<p>/me mutters an incantation to summon <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 200113754,
        "sender_full_name": "Areredify",
        "timestamp": 1591629962
    },
    {
        "content": "<p>hmm</p>",
        "id": 200158936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591652045
    },
    {
        "content": "<p>certainly the intent was to map universes \"from\" the more complex ones \"down\" to a compressed space and then back again</p>",
        "id": 200159021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591652104
    },
    {
        "content": "<p>I remember there being, as an aside, a bug that had to do with the root universe</p>",
        "id": 200159044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591652115
    },
    {
        "content": "<p>which I don't think was fixd</p>",
        "id": 200159049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591652118
    },
    {
        "content": "<p>i.e., we have to always consider the root universe \"used\"</p>",
        "id": 200159064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591652128
    },
    {
        "content": "<p>I don't think the distinct treatment between inference variables and placeholders  was intended</p>",
        "id": 200159075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591652139
    },
    {
        "content": "<p>however, as an aside, I think it probably <em>also</em> makes sense for us to introduce \"binders\" for the placeholders in the canonical form</p>",
        "id": 200159108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591652155
    },
    {
        "content": "<p>rustc at least does this -- I sort of forget why :)</p>",
        "id": 200159148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591652164
    },
    {
        "content": "<p>but I'm wondering if it would make it easier to factor things cleanly here in some way</p>",
        "id": 200159176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591652184
    },
    {
        "content": "<p>It was intended, <code>UniverseMap::map_universe_to_canonical</code> talks about it</p>",
        "id": 200159215,
        "sender_full_name": "Areredify",
        "timestamp": 1591652221
    },
    {
        "content": "<p>hmm</p>",
        "id": 200159237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591652245
    },
    {
        "content": "<p>I guess i'll have to review the code</p>",
        "id": 200159242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591652249
    },
    {
        "content": "<p>Im wondering how it worked for so long</p>",
        "id": 200159269,
        "sender_full_name": "Areredify",
        "timestamp": 1591652274
    },
    {
        "content": "<p>Guess we just don't have enough universes in tests</p>",
        "id": 200159328,
        "sender_full_name": "Areredify",
        "timestamp": 1591652290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/map.20from.20canonical/near/200159064\">said</a>:</p>\n<blockquote>\n<p>i.e., we have to always consider the root universe \"used\"</p>\n</blockquote>\n<p>what does that mean? that nothing should exist in the root universe?</p>",
        "id": 200159520,
        "sender_full_name": "Areredify",
        "timestamp": 1591652422
    },
    {
        "content": "<p>that we never want to map a placeholder into the root universe</p>",
        "id": 200160399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591653009
    },
    {
        "content": "<p>we map canonical binders to <code>U0</code>, if there are no placeholders anywhere in the input</p>",
        "id": 200160541,
        "sender_full_name": "Areredify",
        "timestamp": 1591653117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> I'm reviewing the code here :)</p>",
        "id": 200476578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591823162
    },
    {
        "content": "<p>OK, I now follow your point, and I agree that the code as written is kind of fundamentally broken</p>",
        "id": 200477313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591823459
    },
    {
        "content": "<p>Definitely <em>feels</em> like a \"how did this ever work\" situation ;)</p>",
        "id": 200477349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591823483
    },
    {
        "content": "<p>Yeah I was really surprised</p>",
        "id": 200477392,
        "sender_full_name": "Areredify",
        "timestamp": 1591823504
    },
    {
        "content": "<p>Thought I didn't understand something about how it was supposed to work</p>",
        "id": 200477475,
        "sender_full_name": "Areredify",
        "timestamp": 1591823531
    },
    {
        "content": "<p>I suppose that a \"more interesting\" question is \"how should it work\"</p>",
        "id": 200477577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591823593
    },
    {
        "content": "<p>feels like an opportunity to rethink a bit this setup</p>",
        "id": 200477585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591823599
    },
    {
        "content": "<p>but apart from making any bigger changes, it seems like the thing to do would be to modify <code>map_from_canonical</code> so that it takes a <code>Canonical&lt;T&gt;</code> and a universe map, and it returns a <code>Canonical&lt;T::Result&gt;</code> where the universes in those binders have been remapped</p>",
        "id": 200477699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591823649
    },
    {
        "content": "<p>I had a question about that</p>",
        "id": 200477838,
        "sender_full_name": "Areredify",
        "timestamp": 1591823716
    },
    {
        "content": "<p>Does it matter that we lose information because we don't add binders to universe map when ucanonicalizing?</p>",
        "id": 200477908,
        "sender_full_name": "Areredify",
        "timestamp": 1591823745
    },
    {
        "content": "<p>And consequently, does it matter that <code>map_from_canonical</code> maps to universe approximations for inference vars</p>",
        "id": 200478157,
        "sender_full_name": "Areredify",
        "timestamp": 1591823867
    },
    {
        "content": "<p>I was pondering that</p>",
        "id": 200478174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591823876
    },
    {
        "content": "<p>I seemed to feel it did not</p>",
        "id": 200478186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591823882
    },
    {
        "content": "<p>but I'm not 100% sure that is correct</p>",
        "id": 200478230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591823886
    },
    {
        "content": "<p>that said</p>",
        "id": 200478249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591823896
    },
    {
        "content": "<p>I'm also wondering whether there can be universes in the output that weren't preset in the input anyway, seems likely</p>",
        "id": 200478279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591823917
    },
    {
        "content": "<p>let me try to craft an example and see if I'm confusing myself</p>",
        "id": 200478330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591823958
    },
    {
        "content": "<p>Query:</p>\n<div class=\"codehilite\"><pre><span></span><code>canonical&lt;X&gt; {\n    forall&lt;T&gt; { T: Trait&lt;X&gt; }\n}\n</code></pre></div>\n\n\n<p>with a program clause like</p>\n<div class=\"codehilite\"><pre><span></span><code>forall&lt;T, Y&gt; { T: Trait&lt;Y&gt; }\n</code></pre></div>\n\n\n<p>would generate a result like</p>\n<div class=\"codehilite\"><pre><span></span><code>canonical&lt;Y&gt; {\n  X = Y\n}\n</code></pre></div>\n\n\n<p>where this <code>Y</code> is in some fresh universe created during the processing -- ah, but of course, to be instantiated, it had to be equated with the variable for <code>X</code>, which was created in some input univese. So yeah I think I'm confusing myself. I think the only case this can occur is with the <code>forall</code> in region constraints (which is a separate thing).</p>",
        "id": 200478651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591824131
    },
    {
        "content": "<p>so it seems like maybe it <em>does</em> matter to me though</p>",
        "id": 200478700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591824162
    },
    {
        "content": "<p>let me try to craft an example</p>",
        "id": 200478712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591824169
    },
    {
        "content": "<p><code>canonical</code> is <code>exists</code>?</p>",
        "id": 200478954,
        "sender_full_name": "Areredify",
        "timestamp": 1591824303
    },
    {
        "content": "<p>yeah, I just meant an exists bound in a canonical specifically</p>",
        "id": 200479001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591824338
    },
    {
        "content": "<p>gotcha</p>",
        "id": 200479083,
        "sender_full_name": "Areredify",
        "timestamp": 1591824366
    },
    {
        "content": "<p>OK so I think that given an example like this</p>\n<div class=\"codehilite\"><pre><span></span><code>forall&lt;A&gt; {\n    forall&lt;B&gt; {\n        exists&lt;E&gt; {\n            A: ForAny&lt;E&gt;,\n            E = B,\n        }\n    }\n}\n</code></pre></div>\n\n\n<p>where we have the clause</p>\n<div class=\"codehilite\"><pre><span></span><code>forall&lt;X, Y&gt; { X: ForAny&lt;Y&gt; }\n</code></pre></div>\n\n\n<p>we could have a problem. What would go wrong is this:</p>\n<ul>\n<li>We create a placeholder <code>!U1</code> for <code>A</code> (in universe 1)</li>\n<li>We create a placeholder <code>!U2</code> for <code>B</code> (in universe 2)</li>\n<li>We create the existential variable <code>E</code> in universe 2.</li>\n<li>To process <code>A: ForAny&lt;E&gt;</code>, we map to <code>canonical&lt;E:U1&gt; { !U1: ForAny&lt;E&gt; }</code>. Here, we have mapped <code>E</code> to <code>U1</code> because that was the only relevant thing.</li>\n<li>The result is that this goal is true for any <code>E</code> -- so we're going to get back a result like <code>canonical&lt;X:U1&gt; { E = X }</code>. But when we instantiate (and remap) that universe back to the origin, we'll end up unifying <code>E</code> with some fresh <code>X</code> in U1, so the universe of <code>E</code> will change from <code>U2</code> to <code>U1</code>.</li>\n<li>then when we try to solve <code>E = !U2</code>, we get an error.</li>\n</ul>",
        "id": 200479658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591824708
    },
    {
        "content": "<p>So I think that the <em>correct</em> thing to do is to preserve <em>all</em> the universes just as they are given, so we can remap back exactly.</p>",
        "id": 200479722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591824724
    },
    {
        "content": "<p>And I think the flaw in my reasoning is that I said this</p>\n<div class=\"codehilite\"><pre><span></span><code>/// Moreover, since there are no placeholders from U2 in\n    /// the original query, there is no way we would have equated `?0`\n    /// with such a name.\n</code></pre></div>\n\n\n<p>but I wasn't taking into account that sometimes the result is an unconstrained inference variable.</p>",
        "id": 200479816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591824787
    },
    {
        "content": "<p>i.e., we may not name a <em>placeholder</em> from that universe, but we might name an existential variable</p>",
        "id": 200479857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591824810
    },
    {
        "content": "<p>Does that sound right to you?</p>",
        "id": 200479876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591824822
    },
    {
        "content": "<p>Yes, makes sense</p>",
        "id": 200479902,
        "sender_full_name": "Areredify",
        "timestamp": 1591824836
    },
    {
        "content": "<p>Now some of this comes back to the question that I've raised a time or two about when we can \"canonicalize placeholders\". I mentioned that rustc does it, though I'm a bit unsure why at this point, I have to go look at this code again. But if we did so, it has the advantage that all of this universe mapping is <em>within the binders of the canonical</em></p>",
        "id": 200480023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591824888
    },
    {
        "content": "<p>i.e., we don't have to go and remap things within the canonical value</p>",
        "id": 200480038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591824898
    },
    {
        "content": "<p>we just adjust the universes stored in the <code>Canonical</code> meta-data</p>",
        "id": 200480058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591824909
    },
    {
        "content": "<p>which is appealing to me</p>",
        "id": 200480064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591824911
    },
    {
        "content": "<p>Actually, I think that is precisely the example I got this error on</p>",
        "id": 200480086,
        "sender_full_name": "Areredify",
        "timestamp": 1591824928
    },
    {
        "content": "<p>I had <code>LocalImplAllowed(?0: Foo), AliasEq(&lt;!1_0 as Iterator&gt;::Item, ?0)</code></p>",
        "id": 200480231,
        "sender_full_name": "Areredify",
        "timestamp": 1591824996
    },
    {
        "content": "<p>With <code>?0</code> in U1</p>",
        "id": 200480266,
        "sender_full_name": "Areredify",
        "timestamp": 1591825019
    },
    {
        "content": "<p>ah yeah</p>",
        "id": 200480275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591825023
    },
    {
        "content": "<p>that's kind of a simpler way to show it</p>",
        "id": 200480287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591825028
    },
    {
        "content": "<p>i.e., no placeholders at all</p>",
        "id": 200480290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591825031
    },
    {
        "content": "<p>will always map the <code>?0</code> to <code>U0</code></p>",
        "id": 200480295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591825039
    },
    {
        "content": "<p>Proving <code>LocalImplAllowed</code> does not constraint <code>?0</code>, so it was mapped to <code>U0</code></p>",
        "id": 200480301,
        "sender_full_name": "Areredify",
        "timestamp": 1591825040
    },
    {
        "content": "<p>Exactly</p>",
        "id": 200480308,
        "sender_full_name": "Areredify",
        "timestamp": 1591825046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/map.20from.20canonical/near/200480058\">said</a>:</p>\n<blockquote>\n<p>we just adjust the universes stored in the <code>Canonical</code> meta-data</p>\n</blockquote>\n<p>That does sound pretty cool</p>",
        "id": 200481100,
        "sender_full_name": "Areredify",
        "timestamp": 1591825492
    },
    {
        "content": "<p>do you want to try and do that refactoring?</p>",
        "id": 200481731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591825841
    },
    {
        "content": "<p>should we try to make some tests that fail given the existing broken code?</p>",
        "id": 200481746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591825847
    },
    {
        "content": "<p>seems like a good first step :)</p>",
        "id": 200481749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591825849
    },
    {
        "content": "<p>Sure, I will go do that (but tomorrow, it's 1 am now)</p>",
        "id": 200481990,
        "sender_full_name": "Areredify",
        "timestamp": 1591825982
    },
    {
        "content": "<p>=)</p>",
        "id": 200482458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591826191
    },
    {
        "content": "<p>OK</p>",
        "id": 200482462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591826194
    },
    {
        "content": "<p>Let's make an issue for it</p>",
        "id": 200482469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591826199
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/chalk/issues/512\">https://github.com/rust-lang/chalk/issues/512</a></p>",
        "id": 200482654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591826308
    },
    {
        "content": "<p>Also, side note: do you think we should add the ability to print universes of inference vars (if there is an inference table in tls)?</p>",
        "id": 200512711,
        "sender_full_name": "Areredify",
        "timestamp": 1591860491
    },
    {
        "content": "<p>seems like it would be useful</p>",
        "id": 200524194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591869229
    },
    {
        "content": "<p>we've not traditionally had the inference table in TLS</p>",
        "id": 200524250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591869244
    },
    {
        "content": "<p>but if we <em>did</em>, I would probably also want to print the type that an inference variable is unified with (if any)</p>",
        "id": 200524269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591869260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Hmm, so I have a question: what to do we do with indices within universes? The easiest way of course is to just leave them be, but that doesn't feel very \"canonical\"</p>",
        "id": 200897709,
        "sender_full_name": "Areredify",
        "timestamp": 1592231889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> if we move the placeholders into the canonical binder this problem becomes moot</p>",
        "id": 201059553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592333996
    },
    {
        "content": "<p>that's indeed part of the point</p>",
        "id": 201059602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592334007
    }
]