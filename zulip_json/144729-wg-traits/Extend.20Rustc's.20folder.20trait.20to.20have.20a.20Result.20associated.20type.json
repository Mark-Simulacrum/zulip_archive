[
    {
        "content": "<p>I've started working on the \"Extend Rustc's folder trait to have a <code>Result</code> associated type\" from <a href=\"https://github.com/rust-lang/wg-traits/issues/16\">wg-traits#16</a>. I think I'll need it to fix <a href=\"https://github.com/rust-lang/rust/issues/85103\">#85103</a> as well.</p>\n<p>Can someone confirm that this is still something that the WG wants? If so, I'll probably need to open a MCP, is there anyone in particular that would want to second it?</p>",
        "id": 239154032,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621282936
    },
    {
        "content": "<p>How will added an associated type on <code>TypeFoldable</code> help with <a href=\"https://github.com/rust-lang/rust/issues/85103\">#85103</a></p>",
        "id": 239155059,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621283403
    },
    {
        "content": "<p>My idea to fix <a href=\"https://github.com/rust-lang/rust/issues/85103\">#85103</a> is to make the <code>normalize_*</code> queries return a <code>Result</code></p>",
        "id": 239155213,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621283465
    },
    {
        "content": "<p>But normalization uses <code>TypeFolder</code> to do its work</p>",
        "id": 239155259,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621283488
    },
    {
        "content": "<p>Ah okay, so on <code>TypeFolder</code> (equivalent to Chalks <code>Fold</code>)</p>",
        "id": 239155569,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621283601
    },
    {
        "content": "<p>I will say that the work I'm doing on normalizing projections under binders will automatically fix this issue</p>",
        "id": 239155870,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621283710
    },
    {
        "content": "<p>However, for adding a <code>Result</code> associated type on <code>TypeFolder</code></p>",
        "id": 239155946,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621283743
    },
    {
        "content": "<p>I think we should look at the implementation of <code>Fold</code> in Chalk and see if there are actually any implementations that use that</p>",
        "id": 239156037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621283767
    },
    {
        "content": "<p>I don't actually see any impls in Chalk that have a <code>Result</code> that is <em>not</em> <code>Self</code></p>",
        "id": 239156395,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621283930
    },
    {
        "content": "<p>What <em>should</em> be on the list, but isn't, is that <code>TypeFoldable</code> returns <code>Self</code> from <code>fold_with</code> while all the functions in <code>Folder</code> return <code>Fallible</code></p>",
        "id": 239156649,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284043
    },
    {
        "content": "<p>Which <span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> is probably what would help</p>",
        "id": 239156766,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284115
    },
    {
        "content": "<p>Not so much the <code>Result</code> on <code>TypeFolder</code></p>",
        "id": 239156824,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284130
    },
    {
        "content": "<p>I'm not sure I understand. If functions in <code>TypeFolder</code> return <code>Fallible</code> (or <code>Result</code> or whatever), wouldn't the functions in <code>TypeFoldable</code> need to return <code>Fallible</code> too?</p>",
        "id": 239156961,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621284202
    },
    {
        "content": "<p>Well</p>",
        "id": 239157224,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284347
    },
    {
        "content": "<p><code>TypeFolder</code> (or Chalk's <code>Fold</code>) don't necessarily have to return a \"Result\"</p>",
        "id": 239157396,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284429
    },
    {
        "content": "<p>Part of this is that Chalk's version of \"type folding\" is quite different from rustc's version</p>",
        "id": 239157481,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284464
    },
    {
        "content": "<p>Basically the definitions I have now are:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TypeFoldable</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span>: <span class=\"nc\">fmt</span>::<span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">super_fold_with</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nc\">TypeFolder</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">folder</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fold_with</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nc\">TypeFolder</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">folder</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">super_fold_with</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ... unrelated functions</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TypeFolder</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">tcx</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fold_xxx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">t</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">XXX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">super_fold_with</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239157482,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621284464
    },
    {
        "content": "<p>I forgot about the need to fix these discrepancies</p>",
        "id": 239157589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621284503
    },
    {
        "content": "<p>we should add this to our project board :)</p>",
        "id": 239157594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621284507
    },
    {
        "content": "<p>Oh I see..</p>",
        "id": 239157612,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284513
    },
    {
        "content": "<p>You're right <span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span></p>",
        "id": 239157628,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284523
    },
    {
        "content": "<p>In Chalk's setup, <code>Fold</code> doesn't need the <code>Result</code></p>",
        "id": 239157654,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284538
    },
    {
        "content": "<p>But it does have it currently?</p>",
        "id": 239157696,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621284553
    },
    {
        "content": "<p>erg</p>",
        "id": 239157749,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284574
    },
    {
        "content": "<p>I'm confused</p>",
        "id": 239157775,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284587
    },
    {
        "content": "<p>(I see that the <code>fold_*</code> return <code>Fallible</code>)</p>",
        "id": 239157783,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621284589
    },
    {
        "content": "<p>It doesn't need the associated type</p>",
        "id": 239157799,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284592
    },
    {
        "content": "<p>it needs the <code>Fallible</code></p>",
        "id": 239157820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284597
    },
    {
        "content": "<p>Right, because in some sense the associated type is always <code>NoSolution</code></p>",
        "id": 239157911,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621284617
    },
    {
        "content": "<p>no</p>",
        "id": 239157960,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284631
    },
    {
        "content": "<p>The <code>Result</code> type is not the <code>Error</code> type, but the <code>Success</code> type</p>",
        "id": 239157999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284645
    },
    {
        "content": "<p>I think we can probably remove <em>that</em></p>",
        "id": 239158041,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284662
    },
    {
        "content": "<p>But move rustc to return <code>Fallible</code> for sure</p>",
        "id": 239158078,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284675
    },
    {
        "content": "<p>Oh sorry I see what you mean</p>",
        "id": 239158170,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621284694
    },
    {
        "content": "<p>It would just be <code>Result&lt;Self, NoSolution&gt;</code></p>",
        "id": 239158183,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284698
    },
    {
        "content": "<p>I confused myself with <code>Folder</code> and <code>Fold</code></p>",
        "id": 239158223,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621284712
    },
    {
        "content": "<p>Oh, I definitely got confused a bit here</p>",
        "id": 239158270,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284724
    },
    {
        "content": "<p>So we don't need a <code>Fold::Result</code> but I think we could use a <code>Folder::Error</code> associated type</p>",
        "id": 239158389,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621284758
    },
    {
        "content": "<p><code>Folder</code>/<code>TypeFoldable</code>...maybe</p>",
        "id": 239158462,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284783
    },
    {
        "content": "<p>Or just <code>NoSolution</code></p>",
        "id": 239158477,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284788
    },
    {
        "content": "<p>So that all the folders in rustc that always succeed can use <code>Error = !</code></p>",
        "id": 239158511,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621284801
    },
    {
        "content": "<p>We/someone should do a writeup on the differences between Chalk and rustc's folding/visiting implementations</p>",
        "id": 239158535,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">Léo Lanteri Thauvin</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Extend.20Rustc's.20folder.20trait.20to.20have.20a.20Result.20associated.20type/near/239158511\">said</a>:</p>\n<blockquote>\n<p>So that all the folders in rustc that always succeed can use <code>Error = !</code></p>\n</blockquote>\n<p>I like that</p>",
        "id": 239158595,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284836
    },
    {
        "content": "<p>(Kind of like we had done with <code>TypeVisitor</code>)</p>",
        "id": 239158686,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621284857
    },
    {
        "content": "<p>Yeah, was thinking about that</p>",
        "id": 239158865,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Extend.20Rustc's.20folder.20trait.20to.20have.20a.20Result.20associated.20type/near/239158535\">said</a>:</p>\n<blockquote>\n<p>We/someone should do a writeup on the differences between Chalk and rustc's folding/visiting implementations</p>\n</blockquote>\n<p>I could maybe help with the rustc part, especially if I end up implementing the changes we just discussed, but I know nothing about chalk <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 239158970,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621284967
    },
    {
        "content": "<p>Chalk's <code>visit_with</code> takes the break value as a generic</p>",
        "id": 239158984,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284977
    },
    {
        "content": "<p>instead of it being a associated type...</p>",
        "id": 239159005,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621284985
    },
    {
        "content": "<p>It is an associated type on <code>Visitor</code></p>",
        "id": 239159104,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621285044
    },
    {
        "content": "<p>Right</p>",
        "id": 239159177,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621285080
    },
    {
        "content": "<p>(I vaguely remember implementing that as a follow-up to doing it in rustc)</p>",
        "id": 239159234,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621285088
    },
    {
        "content": "<p>So the generic is constrained to be the visitor's <code>Break</code> type</p>",
        "id": 239159344,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621285144
    },
    {
        "content": "<p>yes</p>",
        "id": 239159555,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621285214
    },
    {
        "content": "<p>Right so <code>Visitor</code> = <code>TypeVisitor</code>, and both have the <code>BreakTy</code></p>",
        "id": 239159872,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621285350
    },
    {
        "content": "<p>But <code>visit_with</code> is on <code>Visit</code></p>",
        "id": 239159958,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621285390
    },
    {
        "content": "<p>In rustc <code>TypeFoldable</code> seems to be <code>Fold + Visit</code> together</p>",
        "id": 239160135,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621285472
    },
    {
        "content": "<p>yes</p>",
        "id": 239160224,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621285521
    },
    {
        "content": "<p>okay I've got things more straight in my mind</p>",
        "id": 239160228,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621285524
    },
    {
        "content": "<p>So you think we should do this? i.e. introduce a <code>TypeFolder::Error</code> associated type in <code>rustc</code></p>",
        "id": 239160411,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621285596
    },
    {
        "content": "<p>yes, and to <code>Folder</code> in Chalk</p>",
        "id": 239160459,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621285618
    },
    {
        "content": "<p>It's only a matter of fixing <em>a few hundred</em> errors, nothing too bad <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 239160468,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621285623
    },
    {
        "content": "<p>I guess we have the <code>B</code> generic on <code>visit_with</code> because we take <code>Folder</code> by <code>dyn</code></p>",
        "id": 239160758,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621285768
    },
    {
        "content": "<p>Do you want me to open a MCP?</p>",
        "id": 239160927,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621285834
    },
    {
        "content": "<p>You can</p>",
        "id": 239161037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621285896
    },
    {
        "content": "<p>I'll second it</p>",
        "id": 239161043,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621285899
    },
    {
        "content": "<p>One note for that writeup (completely unneeded atm, but I was curious): <code>visit_binder</code> in <code>TypeVisitor</code> isn't used for anything except for incrementing the binding depth and <code>fold_binder</code> isn't used for anything but incrementing the binding depth <em>and</em> anonymizing regions in <code>RegionEraserVisitor</code></p>",
        "id": 239162573,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621286553
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/compiler-team/issues/432\">compiler-team#432</a></p>",
        "id": 239163650,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621287130
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/85469\">#85469</a></p>",
        "id": 239421511,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621430148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I think we should have a perf run to check that the impact is neutral?</p>",
        "id": 239421753,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621430226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> taking a look!</p>",
        "id": 239422209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621430381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> Just briefly skimming your PR. I think you use <code>.unwrap()</code> in a bunch of places when we have a <code>Result&lt;T, !&gt;</code>. Can you use <code>into_ok</code> instead?</p>",
        "id": 239454454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621441313
    },
    {
        "content": "<p>Oh, whoops, I forgot <code>into_ok</code> existed</p>",
        "id": 239454627,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621441373
    },
    {
        "content": "<p>Will do</p>",
        "id": 239454635,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621441377
    },
    {
        "content": "<p>It's under a feature gate, but I think in this case it makes sense :)</p>",
        "id": 239454688,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621441403
    },
    {
        "content": "<p>Right, we won't risk changing the <code>Error</code> and forgetting some <code>unwrap</code>s</p>",
        "id": 239454833,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621441453
    },
    {
        "content": "<p>Exactly</p>",
        "id": 239454880,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621441475
    },
    {
        "content": "<p>Done</p>",
        "id": 239461377,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621444023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> so I wonder if we should redo the perf run now with <code>into_ok</code></p>",
        "id": 239476880,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621450029
    },
    {
        "content": "<p>I wonder if instructions changed any</p>",
        "id": 239476936,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621450041
    },
    {
        "content": "<p>Instruction counts regression several percent on several tests</p>",
        "id": 239477037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621450077
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 239477039,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621450078
    },
    {
        "content": "<p>But actual wall time doesn't look nearly as bad (~3%)</p>",
        "id": 239477117,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621450101
    },
    {
        "content": "<p>I don't understand how this can be an improvement in the first place, looks like magic to me <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 239477200,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621450154
    },
    {
        "content": "<p>It's really pretty variable</p>",
        "id": 239477362,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621450224
    },
    {
        "content": "<p>Looks like <code>typeck</code> is taking longer: <a href=\"https://perf.rust-lang.org/detailed-query.html?commit=dd302a4b134912d6af2e70defbb3418a9a4f08a7&amp;base_commit=3e827cc21e0734edd26170e8d1481f0d66a1426b&amp;benchmark=keccak-check&amp;run_name=full\">https://perf.rust-lang.org/detailed-query.html?commit=dd302a4b134912d6af2e70defbb3418a9a4f08a7&amp;base_commit=3e827cc21e0734edd26170e8d1481f0d66a1426b&amp;benchmark=keccak-check&amp;run_name=full</a></p>",
        "id": 239477951,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621450491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> So do you want to run more perf tests? If you want to test the impact of changing <code>unwrap</code> to <code>into_ok</code> let me know so I drop the last commit</p>",
        "id": 240058715,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621866520
    },
    {
        "content": "<p>I think it's fine</p>",
        "id": 240059985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621867084
    },
    {
        "content": "<p>err no. 6% regressions on instruction counts for multiple tests</p>",
        "id": 240060091,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621867134
    },
    {
        "content": "<p>I'm going to queue a perf run</p>",
        "id": 240060099,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621867140
    },
    {
        "content": "<p>Bleh so perf is just as bad. Wall times are more mixed, but lots of red</p>",
        "id": 240095338,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621882606
    },
    {
        "content": "<p>Should really try to dig into it</p>",
        "id": 240095365,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621882616
    },
    {
        "content": "<p>I noticed the perf dashboard has a link to flamegraphs, but links don't work</p>",
        "id": 240095431,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621882644
    },
    {
        "content": "<p>It's a known issue</p>",
        "id": 240095470,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621882662
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rustc-perf/issues/851\">https://github.com/rust-lang/rustc-perf/issues/851</a></p>",
        "id": 240095580,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621882702
    },
    {
        "content": "<p>those are likely not useful anyway for stuff like this</p>",
        "id": 240096948,
        "sender_full_name": "simulacrum",
        "timestamp": 1621883244
    },
    {
        "content": "<p>you want cachegrind-level info, most likely</p>",
        "id": 240096962,
        "sender_full_name": "simulacrum",
        "timestamp": 1621883251
    },
    {
        "content": "<blockquote>\n<p>If you are going to use any of the profilers that rely on line numbers (OProfile, Cachegrind, Callgrind, DHAT, or Massif) use the following <code>config.toml</code> file for your local build.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[llvm]</span>\n<span class=\"n\">release-debuginfo</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n<span class=\"k\">[rust]</span>\n<span class=\"n\">debuginfo-level</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Does CI produce artifacts with those enabled?</p>",
        "id": 240102469,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621885773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I’m not sure you’ll have the time so we can finish my PR unifying both measureme format APIs, but do you think we may want to switch those links mentioned above around (so that the most recent data has working processed links, and only the runs on the previous measureme format will 500) ?</p>",
        "id": 240105417,
        "sender_full_name": "lqd",
        "timestamp": 1621887155
    },
    {
        "content": "<p>hm</p>",
        "id": 240119862,
        "sender_full_name": "simulacrum",
        "timestamp": 1621894654
    },
    {
        "content": "<p>yeah it's not a bad idea, just haven't had much time lately</p>",
        "id": 240119874,
        "sender_full_name": "simulacrum",
        "timestamp": 1621894664
    },
    {
        "content": "<p>So I've ran cachegrind through the rustc-perf profiler</p>",
        "id": 241301620,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1622659223
    },
    {
        "content": "<p>Now I have cachegrind output files, how do I make sense of them? I've tried using <code>cg_diff</code> but it just outputs a 170000 lines output <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 241301896,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1622659367
    },
    {
        "content": "<p>Hmm, maybe ping <span class=\"user-mention\" data-user-id=\"120989\">@njn</span> and see if he'll help you :)</p>",
        "id": 241305981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622661314
    }
]