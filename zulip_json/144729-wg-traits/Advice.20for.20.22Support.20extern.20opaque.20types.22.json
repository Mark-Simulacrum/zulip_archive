[
    {
        "content": "<p>Hey, thanks for your support on the previous issue :)<br>\nI picked up another issue, the task is to add TypeName::Extern.<br>\nYet, I have a hard time figuring out what information should be stored in TypeName generally.<br>\nTo start off, I just added Extern as an empty Variant (<a href=\"https://github.com/memoryleak47/chalk/commit/73549302f42bf468273f4f85204ea46a971c00d8\">https://github.com/memoryleak47/chalk/commit/73549302f42bf468273f4f85204ea46a971c00d8</a>).</p>\n<p>So, is there some documentation on what TypeName actually is? ^^'</p>",
        "id": 208987740,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599148084
    },
    {
        "content": "<p>It's like <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html\"><code>TyKind</code></a> in rustc, except that it doesn't store type information that chalk doesn't need for trait solving</p>",
        "id": 208990016,
        "sender_full_name": "detrumi",
        "timestamp": 1599148879
    },
    {
        "content": "<p>chalk just needs to know what kind of type it is, because arrays and slices might be handled differently for example, but there's no nested types inside in most cases</p>",
        "id": 208990310,
        "sender_full_name": "detrumi",
        "timestamp": 1599148994
    },
    {
        "content": "<p>See also <a href=\"https://rust-lang.github.io/chalk/book/clauses/type_equality.html?highlight=TypeName#placeholder-associated-types\">this part in the chalk book</a></p>",
        "id": 208990786,
        "sender_full_name": "detrumi",
        "timestamp": 1599149169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"335294\">@memoryleak47</span> so, I probably should have been more clear in my comment on the issue, but we probably want to store a <code>DefId</code> in <code>Extern</code></p>",
        "id": 208998177,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599152230
    },
    {
        "content": "<p>So, a new <code>ExternDefId</code> that wraps <code>Interner::InternedDefId</code></p>",
        "id": 208998341,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599152309
    },
    {
        "content": "<p>Other than that, those changes look good</p>",
        "id": 208999819,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599152985
    },
    {
        "content": "<p>Next step would be adding test support and some tests</p>",
        "id": 208999898,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599153005
    },
    {
        "content": "<p>Alright, thanks (:</p>",
        "id": 209002036,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599153867
    },
    {
        "content": "<p>So, I now added ExternDefId (<a href=\"https://github.com/memoryleak47/chalk/commit/17416bb023d06c4336f18f81c55b53003d07ec42\">https://github.com/memoryleak47/chalk/commit/17416bb023d06c4336f18f81c55b53003d07ec42</a>).<br>\nBut its never constructed, should there maybe be a chalk_parse::ast::Extern, or something similar?<br>\nAlso, about the tests - where would I put the tests, and what should they actually test?</p>",
        "id": 209040501,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599175366
    },
    {
        "content": "<p>Yeah, so probably add another item here: <a href=\"https://github.com/rust-lang/chalk/blob/46344c8074f2a8b9a377a1281021bf879ff5cc60/chalk-parse/src/ast.rs#L22\">https://github.com/rust-lang/chalk/blob/46344c8074f2a8b9a377a1281021bf879ff5cc60/chalk-parse/src/ast.rs#L22</a></p>",
        "id": 209044756,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599179684
    },
    {
        "content": "<p>Probably just <code>Extern(Identifier)</code></p>",
        "id": 209044791,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599179737
    },
    {
        "content": "<p>Well, eh, might be easier to just have a newtype <code>ExternDefn</code></p>",
        "id": 209044858,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599179798
    },
    {
        "content": "<p>Then add the relevant parse code in <code>parser.lalrpop</code></p>",
        "id": 209044934,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599179893
    },
    {
        "content": "<p>For tests: check that they are <code>WellFormed</code>, are not <code>Sized</code>, don't impl <code>Copy</code>, and don't impl <code>Clone</code></p>",
        "id": 209045135,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599180153
    },
    {
        "content": "<p>It seems we need to store the extern types in chalk_integration::program::Program anyhow.<br>\nAny suggestions? Maybe as extern_ty_ids: BTreeMap&lt;Identifier, ExternDefId&lt;I&gt;&gt;</p>",
        "id": 209050166,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599187300
    },
    {
        "content": "<p>That sounds probably right</p>",
        "id": 209057266,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599198825
    },
    {
        "content": "<p>Alright, now I did parsing and lowering.<br>\nBut I still didn't construct TypeName::Extern (should that have happened in the lowering?)<br>\nAlso, I probably should add some method to RustIrDatabase so that the Solvers can actually work with the extern types, right?</p>",
        "id": 209069757,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599209907
    },
    {
        "content": "<p>Indeed, should happen in lowering.</p>",
        "id": 209115938,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599237978
    },
    {
        "content": "<p>And hmm.</p>",
        "id": 209115941,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599237983
    },
    {
        "content": "<p>I don't think that we need to add anything to <code>RustIrDatabase</code>. We check impls with <code>impls_for_trait</code> which should include impls on extern types</p>",
        "id": 209116217,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599238187
    },
    {
        "content": "<p>Also, side not looking at your PR, I don't think we will ever support <code>extern { type A; type B; }</code> in the test parser. It's not really \"Rust\" syntax. Its \"close\" to a heavily desugared Rust syntax.</p>",
        "id": 209116515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599238372
    },
    {
        "content": "<p>(Unless there is some functionality there that we need to reproduce that I don't know about)</p>",
        "id": 209116584,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599238416
    },
    {
        "content": "<p>okay, I'll get rid of the FIXME then.</p>",
        "id": 209116875,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599238564
    },
    {
        "content": "<p>So, I'm confused about the lowering now. We should obviously create TypeName::Extern at some point, but if the program stores the extern types as BTreeMap&lt;Identifier, ExternDefId&lt;I&gt;&gt;, then I don't see where this TypeName::Extern would exist in the program.</p>",
        "id": 209117168,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599238686
    },
    {
        "content": "<p>Probably under <code>lookup_generic_arg</code></p>",
        "id": 209117852,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599239031
    },
    {
        "content": "<p>(sidenote, the parser/lowering code is kind of over-complicated I think)</p>",
        "id": 209118245,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599239232
    },
    {
        "content": "<p>You'll also probably need to update <code>TyWithoutId</code></p>",
        "id": 209118377,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599239287
    },
    {
        "content": "<p>(so you can actually use the extern types)</p>",
        "id": 209118402,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599239300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Advice.20for.20.22Support.20extern.20opaque.20types.22/near/209118245\">said</a>:</p>\n<blockquote>\n<p>(sidenote, the parser/lowering code is kind of over-complicated I think)</p>\n</blockquote>\n<p>Hm... how could it be simplified?</p>",
        "id": 209118409,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599239305
    },
    {
        "content": "<p>Mmm, I'm not sure off the top of my head</p>",
        "id": 209118474,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599239360
    },
    {
        "content": "<p>It's not an area I'm super comfortable with</p>",
        "id": 209118493,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599239370
    },
    {
        "content": "<p>Also, no you <em>don't</em> need to update <code>TyWithoutId</code></p>",
        "id": 209118530,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599239393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Advice.20for.20.22Support.20extern.20opaque.20types.22/near/209117852\">said</a>:</p>\n<blockquote>\n<p>Probably under <code>lookup_generic_arg</code></p>\n</blockquote>\n<p>So, should I check whether the identifier matches some extern_ty, and then return that as an ApplicationTy?</p>",
        "id": 209118546,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599239402
    },
    {
        "content": "<p>Yes</p>",
        "id": 209118696,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599239490
    },
    {
        "content": "<p>It'll look somewhat similar to the opaque ty ids block</p>",
        "id": 209118835,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599239556
    },
    {
        "content": "<p>I'll tackle it. Thanks for the feedback (:</p>",
        "id": 209118896,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599239601
    },
    {
        "content": "<p>No problem. Also feel free to open a PR, even if WIP. It's easier to given comments</p>",
        "id": 209118989,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599239646
    },
    {
        "content": "<p>will do</p>",
        "id": 209119129,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599239761
    },
    {
        "content": "<p>I extended lookup_generic_arg now (<a href=\"https://github.com/rust-lang/chalk/pull/601/\">https://github.com/rust-lang/chalk/pull/601/</a>)<br>\nSo, whats next on the menu? You talked about impls_for_trait; anything to do there?</p>",
        "id": 209123343,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599242340
    },
    {
        "content": "<p>I think it should work</p>",
        "id": 209123759,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599242573
    },
    {
        "content": "<p>next step is probably tests</p>",
        "id": 209123767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599242580
    },
    {
        "content": "<p>I don't think you'll need to do anything for <code>impls_for_trait</code></p>",
        "id": 209123789,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599242594
    },
    {
        "content": "<p>Ah great!</p>",
        "id": 209123830,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599242628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Advice.20for.20.22Support.20extern.20opaque.20types.22/near/209045135\">said</a>:</p>\n<blockquote>\n<p>For tests: check that they are <code>WellFormed</code>, are not <code>Sized</code>, don't impl <code>Copy</code>, and don't impl <code>Clone</code></p>\n</blockquote>\n<p>So those things should be tested, where should I add the tests?</p>",
        "id": 209123967,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599242700
    },
    {
        "content": "<p>Add a new <code>extern_types</code> mod under test/test</p>",
        "id": 209124139,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599242799
    },
    {
        "content": "<p><code>string.rs</code> is a pretty good template</p>",
        "id": 209124279,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599242882
    },
    {
        "content": "<p>Oh, it really is!</p>",
        "id": 209124636,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599243097
    },
    {
        "content": "<p>I see, the tests fail - because he is not able to prove that the extern type is not Clone, for example.</p>",
        "id": 209125020,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599243333
    },
    {
        "content": "<p>the tests fail?</p>",
        "id": 209125153,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599243410
    },
    {
        "content": "<p>nvm, gimme a sec</p>",
        "id": 209125193,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599243441
    },
    {
        "content": "<p>I didn't add the traits to the program.</p>",
        "id": 209125331,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599243506
    },
    {
        "content": "<p>It might also be good to add a test impl too, like in the string tests</p>",
        "id": 209126356,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599244113
    },
    {
        "content": "<p>and lowering test</p>",
        "id": 209126388,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599244135
    },
    {
        "content": "<p>you mean using lowering_error! and lowering_success! ?</p>",
        "id": 209126550,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599244217
    },
    {
        "content": "<p>yes</p>",
        "id": 209126654,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599244294
    },
    {
        "content": "<p>probably one to test it parses/lowers</p>",
        "id": 209126747,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599244332
    },
    {
        "content": "<p>Hmm, do we need to check for overlapping defns</p>",
        "id": 209126762,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599244349
    },
    {
        "content": "<p>Try one test with two <code>extern { type A; }</code></p>",
        "id": 209126782,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599244364
    },
    {
        "content": "<p>Ah jep, I'll add one. We forbid that extern types shadow each other, right?</p>",
        "id": 209126977,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599244489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Advice.20for.20.22Support.20extern.20opaque.20types.22/near/209126747\">said</a>:</p>\n<blockquote>\n<p>probably one to test it parses/lowers</p>\n</blockquote>\n<p>Not sure how I can check in particular lowering.</p>",
        "id": 209127046,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599244553
    },
    {
        "content": "<p>It currently accepts multiple extern { type A; }</p>",
        "id": 209127382,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599244739
    },
    {
        "content": "<p>Well, one test with just a single <code>extern { type A; }</code> that should pass with <code>lowering_sucesss</code> and another with two that should pass with <code>lowering_fail</code></p>",
        "id": 209127998,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599245056
    },
    {
        "content": "<p>Okay, I figured that might happen</p>",
        "id": 209128015,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599245067
    },
    {
        "content": "<p>Um, let's see what we have to do to fix that</p>",
        "id": 209128030,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599245077
    },
    {
        "content": "<p>Why not just check before adding to the BTreeMap</p>",
        "id": 209128212,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599245188
    },
    {
        "content": "<p>That works, now I just need some error to return</p>",
        "id": 209128373,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599245296
    },
    {
        "content": "<p>I don't think other type kinds are checking for duplicates</p>",
        "id": 209128385,
        "sender_full_name": "detrumi",
        "timestamp": 1599245303
    },
    {
        "content": "<p>Oh, really</p>",
        "id": 209128408,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599245318
    },
    {
        "content": "<p>Otherwise there'd be similar errors for the other kinds</p>",
        "id": 209128462,
        "sender_full_name": "detrumi",
        "timestamp": 1599245360
    },
    {
        "content": "<p>But it's not really needed for the chalk parser, since it's just used for testing</p>",
        "id": 209128488,
        "sender_full_name": "detrumi",
        "timestamp": 1599245382
    },
    {
        "content": "<p>Yeah, that makes sense</p>",
        "id": 209128569,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599245409
    },
    {
        "content": "<p>Don't know why I thought we needed this</p>",
        "id": 209128585,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599245421
    },
    {
        "content": "<p>Ok, so I guess I'll remove that test then.<br>\nDo you have any other lowering_error! ideas?</p>",
        "id": 209128613,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599245440
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 209128628,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599245449
    },
    {
        "content": "<p>Alright, then I'll commit this</p>",
        "id": 209128683,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599245484
    },
    {
        "content": "<p>Cool, I'll do a review. But should be quick</p>",
        "id": 209128709,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599245497
    },
    {
        "content": "<p>And we can get this merged</p>",
        "id": 209128719,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599245503
    },
    {
        "content": "<p>I guess a question for everyone (but maybe somewhat towards <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>) is if we want these to be called <code>Extern</code> or <code>Foreign</code></p>",
        "id": 209128871,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599245576
    },
    {
        "content": "<p>Its pushed</p>",
        "id": 209128938,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599245616
    },
    {
        "content": "<p>rustc calls them <code>Foreign</code></p>",
        "id": 209128951,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599245623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"335294\">@memoryleak47</span> commented</p>",
        "id": 209129840,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246134
    },
    {
        "content": "<p>Right, lining the naming up with rustc is probably the way to go then, for the <a href=\"https://github.com/rust-lang/wg-traits/issues/16\">shared type library</a> work</p>",
        "id": 209130003,
        "sender_full_name": "detrumi",
        "timestamp": 1599246232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Advice.20for.20.22Support.20extern.20opaque.20types.22/near/209129840\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"335294\">memoryleak47</span> commented</p>\n</blockquote>\n<p>Done, running cargo test --all right now</p>",
        "id": 209130501,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599246497
    },
    {
        "content": "<p>Alright, then yeah, let's just go with <code>Foreign</code></p>",
        "id": 209130508,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246505
    },
    {
        "content": "<p>We'll just follow principle of least surprise here</p>",
        "id": 209130531,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Advice.20for.20.22Support.20extern.20opaque.20types.22/near/209130003\">said</a>:</p>\n<blockquote>\n<p>Right, lining the naming up with rustc is probably the way to go then, for the <a href=\"https://github.com/rust-lang/wg-traits/issues/16\">shared type library</a> work</p>\n</blockquote>\n<p>Ok, so <code>ForeignDefId</code>, <code>ForeignDefn</code>, <code>TypeName::Foreign</code> then?</p>",
        "id": 209130552,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599246534
    },
    {
        "content": "<p>Yep!</p>",
        "id": 209130720,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246614
    },
    {
        "content": "<p>Huh, weird how it's <code>DefId</code> and <code>Defn</code>, but I guess that's consistent with elsewhere</p>",
        "id": 209130745,
        "sender_full_name": "detrumi",
        "timestamp": 1599246629
    },
    {
        "content": "<p>Yeah, that's consistent</p>",
        "id": 209130834,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599246702
    },
    {
        "content": "<p>So, took a while to rename everything, but I'm testing now</p>",
        "id": 209131729,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599247213
    },
    {
        "content": "<p>Nice</p>",
        "id": 209131795,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599247273
    },
    {
        "content": "<p>Its pushed now!</p>",
        "id": 209132196,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599247552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 209132251,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599247567
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 209132297,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599247610
    },
    {
        "content": "<p>LGTM. Once CI is green, I'll r+</p>",
        "id": 209132513,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599247744
    },
    {
        "content": "<p>r+ed thanks <span class=\"user-mention\" data-user-id=\"335294\">@memoryleak47</span></p>",
        "id": 209132828,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599247962
    },
    {
        "content": "<p>Nice, thanks for the support!</p>",
        "id": 209132865,
        "sender_full_name": "memoryleak47",
        "timestamp": 1599248001
    },
    {
        "content": "<p>Of course!</p>",
        "id": 209133407,
        "sender_full_name": "Jack Huey",
        "timestamp": 1599248357
    },
    {
        "content": "<p>Rust-analyzer part: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/5993\">https://github.com/rust-analyzer/rust-analyzer/pull/5993</a></p>",
        "id": 210258812,
        "sender_full_name": "Charles Lew",
        "timestamp": 1600261944
    }
]