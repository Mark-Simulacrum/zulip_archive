[
    {
        "content": "<p>in the course of preparing the switch to Chalk's types, I'm wondering again about the representation of type parameters (inside the function). We currently need to be able to get from the <code>Ty</code> back to the actual global type parameter ID, so we're turning type parameters into placeholders in the root universe, with the global type param ID as the index. I guess the intended way of using placeholders is more to introduce a new universe at every point where new type parameters are introduced, and use local indexes? I'm wondering whether we should invest time into moving towards that, which would probably involve needing to introduce a context (which definition we're in) whenever we're displaying types...</p>",
        "id": 231030703,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616164053
    },
    {
        "content": "<p>Hmm. Makes me wonder about <code>Param</code></p>",
        "id": 231041984,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616167997
    },
    {
        "content": "<p>yeah, I saw some mentions of that</p>",
        "id": 231042199,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616168069
    },
    {
        "content": "<p>For user defined Adts you also need a global id to identify the right definition. In rustc <code>Param</code> works similarly by having a global id for the generic parameter of the function.</p>",
        "id": 231042507,
        "sender_full_name": "oli",
        "timestamp": 1616168193
    }
]