[
    {
        "content": "<p>/me mulls replacing \"coherence\" with \"canonicity\" since that's probably more accurate</p>",
        "id": 164185726,
        "sender_full_name": "centril",
        "timestamp": 1556209487
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"126931\">@centril</span> sorry for cutting in, is there any open materials about rust coherence? rfc, paper etc)</p>",
        "id": 164185897,
        "sender_full_name": "csmoe",
        "timestamp": 1556209617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> you may want to start with <a href=\"http://blog.ezyang.com/2014/07/type-classes-confluence-coherence-global-uniqueness/\" target=\"_blank\" title=\"http://blog.ezyang.com/2014/07/type-classes-confluence-coherence-global-uniqueness/\">http://blog.ezyang.com/2014/07/type-classes-confluence-coherence-global-uniqueness/</a></p>\n<p>rfcs include:<br>\n- <a href=\"https://github.com/rust-lang/rfcs/pull/2451\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2451\">https://github.com/rust-lang/rfcs/pull/2451</a></p>\n<p>this links to a bunch of other places</p>",
        "id": 164186062,
        "sender_full_name": "centril",
        "timestamp": 1556209723
    },
    {
        "content": "<p>I suspect most papers about coherence are in a Haskell setting</p>",
        "id": 164186082,
        "sender_full_name": "centril",
        "timestamp": 1556209737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> really thanks <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 164186120,
        "sender_full_name": "csmoe",
        "timestamp": 1556209766
    },
    {
        "content": "<p>Rust enforces canonicity, which is a stronger property than coherence</p>",
        "id": 164186121,
        "sender_full_name": "centril",
        "timestamp": 1556209767
    },
    {
        "content": "<p>canonicity being the same as \"global uniqueness of implementations\"</p>",
        "id": 164186140,
        "sender_full_name": "centril",
        "timestamp": 1556209788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> welcome!</p>",
        "id": 164186208,
        "sender_full_name": "centril",
        "timestamp": 1556209811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span>  if you are familiar with the concept of proof relevance... if we consider a trait to be a proposition and an implementation of a trait for a given type to be a witness / proof of said proposition, then canonicity can be seen as proof irrelevance</p>",
        "id": 164186643,
        "sender_full_name": "centril",
        "timestamp": 1556210081
    },
    {
        "content": "<p>Oh cool, so Rust basically does the same thing as Haskell (without <code>OverlappingInstances</code>and <code>IncoherentInstances</code>)</p>",
        "id": 164186654,
        "sender_full_name": "detrumi",
        "timestamp": 1556210087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>  and no orphans as well <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 164186711,
        "sender_full_name": "centril",
        "timestamp": 1556210119
    },
    {
        "content": "<p>/me is pleasantly surprised to find so many Haskell ideas in Rust <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 164186864,
        "sender_full_name": "detrumi",
        "timestamp": 1556210208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> other than that, the basic idea is the same but how it is achieved is likely different; \"coherence\" is a Haskell term after all ^^</p>",
        "id": 164186912,
        "sender_full_name": "centril",
        "timestamp": 1556210237
    },
    {
        "content": "<p>\"is likely different\", what does that mean?</p>",
        "id": 164187032,
        "sender_full_name": "detrumi",
        "timestamp": 1556210291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> know nothing <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> I need to understand the docs you gave first.</p>",
        "id": 164187094,
        "sender_full_name": "csmoe",
        "timestamp": 1556210342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>  the mechanism you use to prevent overlapping instances doesn't have to be the same</p>",
        "id": 164187237,
        "sender_full_name": "centril",
        "timestamp": 1556210424
    },
    {
        "content": "<p>Ah, in that sense</p>",
        "id": 164187253,
        "sender_full_name": "detrumi",
        "timestamp": 1556210440
    }
]