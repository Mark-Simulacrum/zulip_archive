[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span>, meeting in 5ish minutes</p>",
        "id": 190902377,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584474851
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> -- design meeting in 5 minutes. If you've not done so already, please add notes and updates into <a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?sync=&amp;type=\" target=\"_blank\" title=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?sync=&amp;type=\">the agenda hackmd</a>.</p>",
        "id": 190902402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584474862
    },
    {
        "content": "<p>Heh, jinx :)</p>",
        "id": 190902416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584474867
    },
    {
        "content": "<p>Literally about to post that too</p>",
        "id": 190902431,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584474875
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>, are you around by any chance?)</p>",
        "id": 190902475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584474902
    },
    {
        "content": "<p>Also, question, what are the sprint dates we set for ourselves :)</p>",
        "id": 190902530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584474928
    },
    {
        "content": "<p>this sprint ends on the 24th</p>",
        "id": 190902641,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584474969
    },
    {
        "content": "<p>I think</p>",
        "id": 190902643,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584474970
    },
    {
        "content": "<p>so one week</p>",
        "id": 190902651,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584474976
    },
    {
        "content": "<p>we should plan for next sprint this meeting</p>",
        "id": 190902675,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584474986
    },
    {
        "content": "<p>btw, I kind of forgot about this, but I think <a href=\"https://github.com/rust-lang/chalk/pull/342/\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/342/\">https://github.com/rust-lang/chalk/pull/342/</a> is looking pretty good (thanks <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>) -- the major \"open question\" of sorts is the best way to deal with <code>Debug</code> impls</p>",
        "id": 190903224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475229
    },
    {
        "content": "<p>Ok <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> meeting time</p>",
        "id": 190903229,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584475232
    },
    {
        "content": "<p>yea, I've been holding off on moving forward on those until that got resolved</p>",
        "id": 190903251,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584475249
    },
    {
        "content": "<p>I'm somewhat around, only on the phone though</p>",
        "id": 190903282,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1584475261
    },
    {
        "content": "<p>i figured that things are gonna move slower with coronavirus and all that</p>",
        "id": 190903288,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584475262
    },
    {
        "content": "<p>so i didnt want to push for a review or anything</p>",
        "id": 190903304,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584475270
    },
    {
        "content": "<p>yep, that's been consuming a lot of my time and (even more so) mental head space</p>",
        "id": 190903320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475282
    },
    {
        "content": "<p>yeah, I'm distracted by other things today</p>",
        "id": 190903434,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584475334
    },
    {
        "content": "<p>anyways, annoucements?</p>",
        "id": 190903594,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584475434
    },
    {
        "content": "<p>As usual, I've been working on rustc integration when I can</p>",
        "id": 190903653,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584475446
    },
    {
        "content": "<p>seems like it's been a quiet week, though I'd definitely encourage folks to note announcements in <a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\" target=\"_blank\" title=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg?both\">the agenda hackmd</a> as they arise</p>",
        "id": 190903701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I left a comment on your wg-traits PR</p>",
        "id": 190903945,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584475583
    },
    {
        "content": "<p>yeah I just saw that</p>",
        "id": 190903966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475591
    },
    {
        "content": "<p>I was debating where to respond :)</p>",
        "id": 190903975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475595
    },
    {
        "content": "<p>I guess here is ok :)</p>",
        "id": 190903980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475597
    },
    {
        "content": "<p>yes</p>",
        "id": 190904070,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584475627
    },
    {
        "content": "<p>to start, the <code>TyData::Fn</code> should really be called \"function pointer\", perhaps</p>",
        "id": 190904085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475632
    },
    {
        "content": "<p>and what i'm referring to is something distinct</p>",
        "id": 190904114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475641
    },
    {
        "content": "<p>but let me back up and give a bit more context</p>",
        "id": 190904148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475650
    },
    {
        "content": "<p>one of the things we've discussed on and off is that rustc has various bits of support for special traits \"buitl in\" (i.e., there are no impls written out in source code)</p>",
        "id": 190904231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475679
    },
    {
        "content": "<p><code>Sized</code> is a key example, but we also generate impls of <code>Clone</code> for closure types etc</p>",
        "id": 190904307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475693
    },
    {
        "content": "<p>in any case I realized that one I had been overlooking is that we generate impls of the <code>Fn</code> traits in some cases also</p>",
        "id": 190904322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475705
    },
    {
        "content": "<p>there are three cases where we do that:</p>",
        "id": 190904330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475711
    },
    {
        "content": "<ul>\n<li>function pointer types like <code>fn()</code></li>\n</ul>",
        "id": 190904349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475721
    },
    {
        "content": "<ul>\n<li>closure types -- the special, unique type that arises from a closure like <code>|x| ...</code></li>\n</ul>",
        "id": 190904385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475737
    },
    {
        "content": "<ul>\n<li><em>function definition</em> types -- the special, unique type that arises for a named function like <code>fn foo() { }</code></li>\n</ul>",
        "id": 190904452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475759
    },
    {
        "content": "<p>the last one is a subtle point that people may not be aware of</p>",
        "id": 190904481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475773
    },
    {
        "content": "<p>if you have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and <code>let x = foo</code>, the type of <code>x</code> is <em>not</em> <code>fn()</code>. It's rather a unique, zero-sized type that identifies <code>foo</code> precisely. This zero-sized type can be <em>coerced</em> to the function pointer type <code>fn()</code> (which has a size equal to <code>usize</code>).</p>",
        "id": 190904614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475820
    },
    {
        "content": "<p>(This means, among other things, that when you do <code>foo()</code>, we see a call to something with that special type, which means that just <em>from the type</em> we know statically the function being called, and has some other advantages.)</p>",
        "id": 190904679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475849
    },
    {
        "content": "<p>why is there a special zero-sized type for that?</p>",
        "id": 190904708,
        "sender_full_name": "detrumi",
        "timestamp": 1584475868
    },
    {
        "content": "<p>Anyway, these function types (and closure types) are just \"apply\" types from the chalk-data break-down, but they will need some special treatment in that we have to generate <code>Fn</code> impls for them, and it's relevant to the whole debruijn index thing because the signatures of them etc can be tricky</p>",
        "id": 190904735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584475892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190904708\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190904708\">said</a>:</p>\n<blockquote>\n<p>why is there a special zero-sized type for that?</p>\n</blockquote>\n<p>it represents the case of \"known callee\" in the type system, as I said, which means that when you have e.g. wrapper types like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Wrapper</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">callee</span>: <span class=\"nc\">T</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and you can create <code>Wrapper { callee: foo }</code>, you get back a <code>Wrapper&lt;F&gt;</code> where <code>F</code> is that unique type, so that calls to <code>callee</code> are also resolved statically without needing e.g. pointer analysis</p>",
        "id": 190904974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476028
    },
    {
        "content": "<p>anyway, should we discuss \"next sprint\"? I'd be curious also to just do a mini-retro on our sprint experience</p>",
        "id": 190905134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476106
    },
    {
        "content": "<p>I think sprint has been mostly positive</p>",
        "id": 190905183,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476140
    },
    {
        "content": "<p>actually I guess sprints are supposed to have retros where we look back on what we did or something too :) I've never really tried agile \"for real\" so...</p>",
        "id": 190905184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476141
    },
    {
        "content": "<p>It'll definitely be nice to have a better sense of things to do</p>",
        "id": 190905285,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476188
    },
    {
        "content": "<p>but actually hasn't been bad</p>",
        "id": 190905290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476193
    },
    {
        "content": "<p>one thing I would add is that I was talking to <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> about the learning WG and their own effort sto get on a sprint system. Overall I think the idea of sprints could be really great as a system that all compiler wgs try to adopt, but we were thinking maybe (if it's useful) we might align our timing and try to support one another</p>",
        "id": 190905305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476202
    },
    {
        "content": "<p>yeah, I think it's overall felt good. I still feel a bit overwhelmed by the number of choices so having a bit of \"we decided to do X and Y and we're going to stick to that\" has definitely been helpful. I'd like it if we can decide a bit more firmly (or maybe <em>I</em> can decide for myself =) the next time.</p>",
        "id": 190905395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476258
    },
    {
        "content": "<p>\"getting organized\" has been a moving goalpost</p>",
        "id": 190905474,
        "sender_full_name": "detrumi",
        "timestamp": 1584476291
    },
    {
        "content": "<p>But we definitely improved there</p>",
        "id": 190905505,
        "sender_full_name": "detrumi",
        "timestamp": 1584476311
    },
    {
        "content": "<p>it doesn't really feel like the current work is finished, though I guess the focus will shift for next sprint</p>",
        "id": 190905603,
        "sender_full_name": "detrumi",
        "timestamp": 1584476386
    },
    {
        "content": "<p>well, it might be \"keep on keepin' on\"</p>",
        "id": 190905618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476399
    },
    {
        "content": "<p>that doesn't really help with steering though</p>",
        "id": 190905719,
        "sender_full_name": "detrumi",
        "timestamp": 1584476443
    },
    {
        "content": "<p>I think a big part is as this sprint has gone on, we've found more things to do</p>",
        "id": 190905729,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476453
    },
    {
        "content": "<p>So setting goals for next sprint should help with deciding what to focus on</p>",
        "id": 190905840,
        "sender_full_name": "detrumi",
        "timestamp": 1584476521
    },
    {
        "content": "<p>I think the list of ongoing things right now are</p>\n<ul>\n<li>modeling impl Trait</li>\n<li>making the <code>Interner</code> a value  that gets passed around (probably.. 75% done)</li>\n<li>exploring the recursive solver (yay <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>)</li>\n<li>exploring rustc integration (the most nebuluous, but we've definitely made progress) </li>\n<li>tracing (added:)</li>\n</ul>\n<p>I'd include the work on debruin indices in that next to last bullet.</p>",
        "id": 190905899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476534
    },
    {
        "content": "<p>Plus tracing :)</p>",
        "id": 190905920,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476545
    },
    {
        "content": "<p>eep! good point</p>",
        "id": 190905927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476552
    },
    {
        "content": "<p>We've made progress with a lot</p>",
        "id": 190906008,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476595
    },
    {
        "content": "<p>it seems clear that \"add <code>&amp;self</code> to data methods\" should be a sprint goal</p>",
        "id": 190906017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476600
    },
    {
        "content": "<p>that seems like it's \"mostly done\"</p>",
        "id": 190906033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476615
    },
    {
        "content": "<p>I want to (at some point) try to implement the congruence edges we were talking about <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 190906046,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476627
    },
    {
        "content": "<p>yes, I think the Interner changes are close to <em>done</em></p>",
        "id": 190906123,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> in terms of rutsc integration, do you think it would make sense to look at builtin-traits work?</p>",
        "id": 190906152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476673
    },
    {
        "content": "<p>that would also benefit rust-analyzer I think</p>",
        "id": 190906166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476683
    },
    {
        "content": "<p>yes</p>",
        "id": 190906172,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476689
    },
    {
        "content": "<p>and it's fairly clearly defined</p>",
        "id": 190906174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476690
    },
    {
        "content": "<p>I suspect <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> might be into that :)</p>",
        "id": 190906182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476695
    },
    {
        "content": "<p>I think that should be a big goal of the next sprint</p>",
        "id": 190906200,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476705
    },
    {
        "content": "<p>is that on the skill tree?</p>",
        "id": 190906251,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584476753
    },
    {
        "content": "<p>I think so</p>",
        "id": 190906318,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476768
    },
    {
        "content": "<p>Hmm, feels like we're not getting close to rustc integration the coming sprint then</p>",
        "id": 190906330,
        "sender_full_name": "detrumi",
        "timestamp": 1584476775
    },
    {
        "content": "<p>That's a <em>it depends</em></p>",
        "id": 190906371,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476807
    },
    {
        "content": "<p>right now, for <code>Sized</code>, I've hacked around</p>",
        "id": 190906398,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476823
    },
    {
        "content": "<p>which isn't good</p>",
        "id": 190906410,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190906251\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190906251\">said</a>:</p>\n<blockquote>\n<p>is that on the skill tree?</p>\n</blockquote>\n<p>yeah</p>",
        "id": 190906431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476844
    },
    {
        "content": "<p>but it does at least mean we can push forward</p>",
        "id": 190906437,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476849
    },
    {
        "content": "<p>\"Extend chalk-solve with knowledge of builtin-traits\"</p>",
        "id": 190906460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476867
    },
    {
        "content": "<p>re: I worked on the <code>tracing</code> stuff, but I'm worried that I'm just adding too much noise to output. might need a bit of assistance in determining what's valuable and what isn't.</p>",
        "id": 190906478,
        "sender_full_name": "David Barsky",
        "timestamp": 1584476877
    },
    {
        "content": "<p>so, right now <code>debug</code> is very heavy on the output</p>",
        "id": 190906575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476926
    },
    {
        "content": "<p>One thing I still wonder a bit about is how much to work on extracting a shared library for types between chalk/rustc vs letting the two representations be different and bridging them for now at the integration point. I guess this is a bit of a false choice, though.</p>",
        "id": 190906578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476926
    },
    {
        "content": "<p>and I would definitely lean on the side of more is better in most cases</p>",
        "id": 190906622,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476949
    },
    {
        "content": "<p>In particular, the way I sketched out the plan was that we would have both rustc/chalk types as distinct types until kind of the very last step, even as they got more similar to one another</p>",
        "id": 190906639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476960
    },
    {
        "content": "<p>In any case, I can definitely create some concrete steps on the rustc side in that direction</p>",
        "id": 190906672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476980
    },
    {
        "content": "<p>(maybe we sohuld be accumulating a kind of list in the hackmd notes? I'll go try to do that)</p>",
        "id": 190906698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584476997
    },
    {
        "content": "<p>I think that making the same is a lower priority than getting it to work with a bridge</p>",
        "id": 190906700,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584476997
    },
    {
        "content": "<p>Would the 'bridging code' live in the shared library?</p>",
        "id": 190906901,
        "sender_full_name": "detrumi",
        "timestamp": 1584477071
    },
    {
        "content": "<p>Because that would make the differences visible</p>",
        "id": 190906931,
        "sender_full_name": "detrumi",
        "timestamp": 1584477088
    },
    {
        "content": "<p>it would lie in the chalk integration code for rustc</p>",
        "id": 190906963,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584477118
    },
    {
        "content": "<p>I'm wondering whether it would be worth it to hack together a bare-bones version early</p>",
        "id": 190907027,
        "sender_full_name": "detrumi",
        "timestamp": 1584477135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> your code towards integration is all still living in that branch, right?</p>",
        "id": 190907040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477144
    },
    {
        "content": "<p>yes</p>",
        "id": 190907073,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584477169
    },
    {
        "content": "<p>I have a couple local changes but I push regularly</p>",
        "id": 190907097,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584477184
    },
    {
        "content": "<p>OK. So I feel like we can bridge the types as they parameter/binder exist today without really any refactoring, though I know you were hitting some walls -- I can budget out some time tomorrow to pull the branch and maybe try to take a deeper look</p>",
        "id": 190907278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477307
    },
    {
        "content": "<p>or maybe this evening even</p>",
        "id": 190907282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477312
    },
    {
        "content": "<p>I sort of agree that standing up <em>some</em> kind of integration would be great</p>",
        "id": 190907299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477323
    },
    {
        "content": "<p>I'm trying to think about the complete blockers</p>",
        "id": 190907327,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584477355
    },
    {
        "content": "<p>I think I still have to figure out the <code>Param</code> stuff, but I don't think that's <em>blocking</em></p>",
        "id": 190907391,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584477376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> in terms of impl trait, do you feel there is something more concrete to say about next steps etc for next sprint?</p>",
        "id": 190907409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477389
    },
    {
        "content": "<p>The builtin traits are blocking</p>",
        "id": 190907418,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584477392
    },
    {
        "content": "<p>I'd like to get it in a usable state so rust-analyzer can make use of it, but I'm not sure whether that requires more design work</p>",
        "id": 190907495,
        "sender_full_name": "detrumi",
        "timestamp": 1584477462
    },
    {
        "content": "<p>I think a realistic goal for this sprint would be</p>",
        "id": 190907674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477563
    },
    {
        "content": "<p>that so long as other code is handling the \"inference\" side of things</p>",
        "id": 190907703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477575
    },
    {
        "content": "<p>we can model the existence of opaque types</p>",
        "id": 190907716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477582
    },
    {
        "content": "<p>I think the code as is is \"almost\" there, we jsut need to sync up a bit on the binders and refactor it a bit to be more lazy</p>",
        "id": 190907744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477596
    },
    {
        "content": "<p>Right. And type aliases are a small addition on top of that then, I assume?</p>",
        "id": 190907858,
        "sender_full_name": "detrumi",
        "timestamp": 1584477648
    },
    {
        "content": "<p>Ah, interesting, they seem like an orthogonal thing, but probably not a hard thing to model</p>",
        "id": 190907894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477669
    },
    {
        "content": "<p>Not directly related to impl Trait, but it's one of the alias types</p>",
        "id": 190907910,
        "sender_full_name": "detrumi",
        "timestamp": 1584477677
    },
    {
        "content": "<p>But yeah, I was hoping it to be orthogonal</p>",
        "id": 190907930,
        "sender_full_name": "detrumi",
        "timestamp": 1584477694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190907418\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190907418\">said</a>:</p>\n<blockquote>\n<p>The builtin traits are blocking</p>\n</blockquote>\n<p>the builtin stuff that niko was suggesting I work on?</p>",
        "id": 190907937,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584477697
    },
    {
        "content": "<p>yes</p>",
        "id": 190907946,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584477703
    },
    {
        "content": "<p>in terms of taking the next step to more fully modeling opaque types, another possible good \"next step\" would be writing up how <em>rustc</em> handles opaque types for the <a href=\"https://rustc-dev-guide.rust-lang.org/\" target=\"_blank\" title=\"https://rustc-dev-guide.rust-lang.org/\">https://rustc-dev-guide.rust-lang.org/</a> =) not sure if that's a delegatable task for this WG, but I think it'd be useful in figuring out how things should work. That said, I'm not sure that this inference should live in chalk at all -- it feels like it occurs (to me) more at the \"type checker\" level of things.</p>",
        "id": 190908026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477741
    },
    {
        "content": "<p>so maybe it's just kind of out of scope for now for us</p>",
        "id": 190908037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477747
    },
    {
        "content": "<p>is it blocking work rn, aka should I prioritize it over the last 25% of the interner changes?</p>",
        "id": 190908041,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584477748
    },
    {
        "content": "<p>I think eventually we want Chalk to completely deal with them</p>",
        "id": 190908065,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584477761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190907930\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190907930\">said</a>:</p>\n<blockquote>\n<p>But yeah, I was hoping it to be orthogonal</p>\n</blockquote>\n<p>yeah we could add that as a goal too, that plus landing impl trait is prob realistic for 6 weeks</p>",
        "id": 190908073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190908065\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190908065\">said</a>:</p>\n<blockquote>\n<p>I think eventually we want Chalk to completely deal with them</p>\n</blockquote>\n<p>it depends on what one calls \"chalk\"</p>",
        "id": 190908107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477785
    },
    {
        "content": "<p>er wait <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> what did you mean by \"them\"</p>",
        "id": 190908120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477793
    },
    {
        "content": "<p>but in the interim, it would halfway decent just to have a callback for chalk-solve to ask \"does this type impl this builtin trait\"</p>",
        "id": 190908148,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584477809
    },
    {
        "content": "<p>Sized, Copy, Clone</p>",
        "id": 190908180,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584477824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190908041\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190908041\">said</a>:</p>\n<blockquote>\n<p>is it blocking work rn, aka should I prioritize it over the last 25% of the interner changes?</p>\n</blockquote>\n<p>I think it's pretty blocking, yes, but let's finish off the interner work I think first</p>",
        "id": 190908185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477827
    },
    {
        "content": "<p>in particular that kind of work reauires pervasive changes</p>",
        "id": 190908252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477846
    },
    {
        "content": "<p>like, we want chalk-solve to check that all but the last field of a struct is Sized</p>",
        "id": 190908254,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584477848
    },
    {
        "content": "<p>I think it'd be better to land it asap and then do other stuff on top of it :)</p>",
        "id": 190908263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477856
    },
    {
        "content": "<p>and it's so close</p>",
        "id": 190908273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190908263\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190908263\">said</a>:</p>\n<blockquote>\n<p>I think it'd be better to land it asap and then do other stuff on top of it :)</p>\n</blockquote>\n<p>agreed</p>",
        "id": 190908290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584477873
    },
    {
        "content": "<p>I think we can land the PRs as they are and figure out the <code>Debug</code> impl interface -- I mean i think what you have is probably right, the only problemI foresee is wanting to dump <code>Debug</code> impls without something in scope, and the bottom line is that we just can't do much in that case</p>",
        "id": 190908333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477900
    },
    {
        "content": "<p>okay, ill continue with the changes then, we have 1 test thats failing becuase it doesn't setup the program in the TLS</p>",
        "id": 190908394,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584477934
    },
    {
        "content": "<p>(we could add some secondary callback to <code>Interner</code> that works for those interners that don't require TLS as a fallback, but that seems like .. idk, it'll just let us be sloppier... but it might be convenient sometimes I guess)</p>",
        "id": 190908405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477939
    },
    {
        "content": "<p>but I think if we resolve that we can merge it with the <code>unimplemented!</code> fallbacks for when the TLS isnt setup</p>",
        "id": 190908421,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584477949
    },
    {
        "content": "<p>and thats probably sufficient</p>",
        "id": 190908428,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584477953
    },
    {
        "content": "<p>we can change that to a panic that explains that it cant be formatted without the TLS setup for the program</p>",
        "id": 190908483,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584477965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190908394\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190908394\">said</a>:</p>\n<blockquote>\n<p>okay, ill continue with the changes then, we have 1 test thats failing becuase it doesn't setup the program in the TLS</p>\n</blockquote>\n<p>yeah exactly that's the kind of thing where maybe it's convenient to let <code>ChalkIr</code> at least be sloppy -- but in general it'd be better still if we can get the program in the TLS</p>",
        "id": 190908488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584477967
    },
    {
        "content": "<p>I might be able to bang out the rest of the interner change today if we're not particularly worried about the holes that already exist</p>",
        "id": 190908562,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584478006
    },
    {
        "content": "<p>assuming I dont run into any unexpected issues that I've not already dealt with from earlier changes</p>",
        "id": 190908589,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584478021
    },
    {
        "content": "<p>its been getting much easier to add &amp;self to new fns now that the interner is available all over the place</p>",
        "id": 190908628,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584478043
    },
    {
        "content": "<p>yep, I think you did the most painful work</p>",
        "id": 190908651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> should I add \"explore equivalence edges\" to the hackmd?</p>",
        "id": 190908803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478131
    },
    {
        "content": "<p>I have \"explore recursive solver\"</p>",
        "id": 190908811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478136
    },
    {
        "content": "<p>yes</p>",
        "id": 190908814,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584478142
    },
    {
        "content": "<p>I do think it's a super interesting idea to explore</p>",
        "id": 190908840,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584478153
    },
    {
        "content": "<p>Me to, although the more I think about it the more I'm also tempted by the advantages of the recursive solver, but good to explore both</p>",
        "id": 190908873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478178
    },
    {
        "content": "<p>I'll push my local rustc integration changes soon <em>TM</em> so you can take a look</p>",
        "id": 190908875,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584478179
    },
    {
        "content": "<p>what was the reasoning to move away from the recursive solver in the first place?</p>",
        "id": 190908956,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584478207
    },
    {
        "content": "<p>looking at the <a href=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\" target=\"_blank\" title=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\">skill tree</a>, we've made great progress on the \"map chalk types to rustc types\"</p>",
        "id": 190908960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190908956\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190908956\">said</a>:</p>\n<blockquote>\n<p>what was the reasoning to move away from the recursive solver in the first place?</p>\n</blockquote>\n<p>two main things:</p>\n<ul>\n<li>it couldn't deal with the way we were modeling associated types :)</li>\n<li>it is not as \"complete\" -- i.e., it fails to find solutions sometimes when they exist</li>\n</ul>",
        "id": 190909029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478250
    },
    {
        "content": "<p>of course, the SLG solver does too in some kinds of cases (e.g., floundering)</p>",
        "id": 190909065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478270
    },
    {
        "content": "<p>I'm curious what the solutions are?</p>",
        "id": 190909207,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584478338
    },
    {
        "content": "<p>And how much of the Floundering we do is artificially limited</p>",
        "id": 190909230,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584478354
    },
    {
        "content": "<p>do you mean what's an example where it's less complete?</p>",
        "id": 190909242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478361
    },
    {
        "content": "<p>(Also, the floundering case apply equally to the recursive solver)</p>",
        "id": 190909258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190905305\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E03.2E17/near/190905305\">said</a>:</p>\n<blockquote>\n<p>one thing I would add is that I was talking to <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> about the learning WG and their own effort sto get on a sprint system. Overall I think the idea of sprints could be really great as a system that all compiler wgs try to adopt, but we were thinking maybe (if it's useful) we might align our timing and try to support one another</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 190909287,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1584478393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so we are sort of planning a next step of goals for our next spring, prob starting in 7 days, not sure what your schedule in <a class=\"stream\" data-stream-id=\"196385\" href=\"/#narrow/stream/196385-t-compiler.2Fwg-learning\">#t-compiler/wg-learning</a> is looking like</p>",
        "id": 190909351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478434
    },
    {
        "content": "<p>yes, an example where it's less complete</p>",
        "id": 190909510,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584478510
    },
    {
        "content": "<p>we have sprints of 2 months, at the beginning we plan and set our goals and then every to weeks we have meetings where we talk about our progress and how to keep going towards the defined goals</p>",
        "id": 190909562,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1584478542
    },
    {
        "content": "<p>I gave one in my write-up -- it'd be something where you have two intersecting requirements that share one unique solution, but which are individually ambiguous</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TraitA</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">TraitB</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TraitC</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TraitB</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TraitB</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TraitC</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TraitC</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>here, <code>?T: TraitA</code> has only one solution (<code>u32</code>) and the SLG solver will find it. The recursive solver (and rustc's solver) will not.</p>",
        "id": 190909701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478606
    },
    {
        "content": "<p>oh</p>",
        "id": 190909866,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584478687
    },
    {
        "content": "<p>anyway, \"time's up\" I guess ..</p>",
        "id": 190910137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478831
    },
    {
        "content": "<p>but it seems like we got a pretty good start at 'sprint goals'</p>",
        "id": 190910159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478839
    },
    {
        "content": "<p>so one question I am wondering:</p>",
        "id": 190910163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478841
    },
    {
        "content": "<p>yes</p>",
        "id": 190910170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584478846
    },
    {
        "content": "<p>we should probably keep updating over the next week next sprint goals</p>",
        "id": 190910189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584478859
    },
    {
        "content": "<p>I think it'd be nice to do a blog post  or something, as much as a kind of status update as anything</p>",
        "id": 190910195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478862
    },
    {
        "content": "<p>yeah I think we're not quite ther yet</p>",
        "id": 190910203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478865
    },
    {
        "content": "<p>I'd like to maybe rename the \"Map chalk types to rustc types\" goal on skill-tree and create write-ups for remaining items, for example :)</p>",
        "id": 190910227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478885
    },
    {
        "content": "<p>I'm wondering if we want to try and do anything to get a bit of \"fresh blood\" in for next sprint, or if we're happy with things as they are</p>",
        "id": 190910256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478906
    },
    {
        "content": "<p>there were also a few folks who said they might return, I forget who</p>",
        "id": 190910273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478916
    },
    {
        "content": "<p>yes, a blog post would be nice</p>",
        "id": 190910323,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584478927
    },
    {
        "content": "<p>maybe end the sprint the 24th</p>",
        "id": 190910346,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584478945
    },
    {
        "content": "<p>I would say I like don't think we want a huge influx necessarily as  we probably couldn't usefully mentor and keep up, but I still think it'd be good to write a blog post as a status update, and if we have a couple of items that are \"free to pick-up\" we can advertise them</p>",
        "id": 190910352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478950
    },
    {
        "content": "<p>sunjay someday</p>",
        "id": 190910359,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584478953
    },
    {
        "content": "<p>take a week to recap and right a blog post</p>",
        "id": 190910362,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584478956
    },
    {
        "content": "<p>once he has a jobo</p>",
        "id": 190910369,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584478959
    },
    {
        "content": "<p>next sprint the week after?</p>",
        "id": 190910373,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584478962
    },
    {
        "content": "<p>seems good.</p>",
        "id": 190910417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584478985
    },
    {
        "content": "<p>So you mean end the sprint on the 24th, and start the next one on the 31st, right?</p>",
        "id": 190910534,
        "sender_full_name": "detrumi",
        "timestamp": 1584479043
    },
    {
        "content": "<p>we could try using the call for pariticpation section of TWiR to bring people in</p>",
        "id": 190910564,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584479046
    },
    {
        "content": "<p>find an issue you think would be good for a new person and post it and see if anyone picks it up</p>",
        "id": 190910604,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584479062
    },
    {
        "content": "<p>repeat whenever you feel you have bandwith to mentor a new person</p>",
        "id": 190910626,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584479074
    },
    {
        "content": "<p>yes</p>",
        "id": 190910641,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584479086
    },
    {
        "content": "<p>will have to come up with more chalk mentoring issues lol</p>",
        "id": 190910706,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584479126
    },
    {
        "content": "<p>kind of did a couple</p>",
        "id": 190910712,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584479130
    },
    {
        "content": "<p>of the easy ones</p>",
        "id": 190910722,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584479134
    },
    {
        "content": "<p>lol</p>",
        "id": 190910762,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584479158
    },
    {
        "content": "<p>Yeah, but I also think we're hitting a good stride here, and I feel like we shouldn't over-rotate on bringin new folks necessarily</p>",
        "id": 190910813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584479165
    },
    {
        "content": "<p>and I'm still in the \"being mentored on how chalk works\" stage so...</p>",
        "id": 190910834,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584479176
    },
    {
        "content": "<p>let's just start with a blog post for now</p>",
        "id": 190910849,
        "sender_full_name": "detrumi",
        "timestamp": 1584479185
    },
    {
        "content": "<p>Like i'd rather we have 1 or 2 people that we can \"support reasonably well\"</p>",
        "id": 190910864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584479190
    },
    {
        "content": "<p>I would also like to be supported reasonably well</p>",
        "id": 190910907,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584479219
    },
    {
        "content": "<p>lol</p>",
        "id": 190910921,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584479226
    },
    {
        "content": "<p>anyway not to prevent us from doing things :) I also like new folks. Just saying I think it's ok if we keep going as we are, we're making great progress. Blog post seems good =)</p>",
        "id": 190910989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584479266
    },
    {
        "content": "<p>/me trying to avoid over-reach these days</p>",
        "id": 190911054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584479288
    }
]