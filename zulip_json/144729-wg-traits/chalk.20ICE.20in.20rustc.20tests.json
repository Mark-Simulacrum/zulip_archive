[
    {
        "content": "<p>I'm working on switching the compiler from having magical Copy/Clone on arrays to having ordinary library implementations of these. While running UI tests I'm hitting an ICE in the chalk tests, right here: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/chalkify/builtin-copy-clone.rs#L30\">https://github.com/rust-lang/rust/blob/master/src/test/ui/chalkify/builtin-copy-clone.rs#L30</a> .</p>\n<div class=\"codehilite\"><pre><span></span><code>query stack during panic:\n#0 [evaluate_goal] evaluating trait selection obligation `environment: [], goal: &lt;std::slice::Iter&lt;i32&gt; as std::iter::Iterator&gt;::Item == &amp;^1_1`\n#1 [normalize_projection_ty] normalizing `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: ProjectionTy { substs: [std::iter::Cloned&lt;std::slice::Iter&lt;i32&gt;&gt;], item_def_id: DefId(2:7329 ~ core[a45e]::iter::traits::iterator::Iterator::Item) } } }`\nend of query stack\n</code></pre></div>\n<p>that <code>iter::Cloned</code> value in the query stack would seem to be the new library implementation of <code>[T; N]::clone</code>.</p>\n<p>The actual panic is originating from this line: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_traits/src/chalk/lowering.rs#L454\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_traits/src/chalk/lowering.rs#L454</a> .</p>",
        "id": 242465008,
        "sender_full_name": "bstrie",
        "timestamp": 1623523178
    },
    {
        "content": "<p>Full backtrace:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>backtrace</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>0: _rust_begin_unwind<br>\n   1: core::panicking::panic_fmt<br>\n   2: core::panicking::panic<br>\n   3: &lt;&amp;rustc_middle::ty::sty::RegionKind as rustc_traits::chalk::lowering::LowerInto&lt;chalk_ir::Lifetime&lt;rustc_middle::traits::chalk::RustInterner&gt;&gt;&gt;::lower_into<br>\n   4: &lt;rustc_middle::ty::subst::GenericArg as rustc_traits::chalk::lowering::LowerInto&lt;chalk_ir::GenericArg&lt;rustc_middle::traits::chalk::RustInterner&gt;&gt;&gt;::lower_into<br>\n   5: &lt;chalk_ir::cast::Casted&lt;IT,U&gt; as core::iter::traits::iterator::Iterator&gt;::next<br>\n   6: &lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next<br>\n   7: &lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter<br>\n   8: core::iter::adapters::process_results<br>\n   9: &lt;rustc_middle::traits::chalk::RustInterner as chalk_ir::interner::Interner&gt;::intern_substitution<br>\n  10: chalk_ir::Substitution&lt;I&gt;::from_iter<br>\n  11: &lt;&amp;rustc_middle::ty::list::List&lt;rustc_middle::ty::subst::GenericArg&gt; as rustc_traits::chalk::lowering::LowerInto&lt;chalk_ir::Substitution&lt;rustc_middle::traits::chalk::RustInterner&gt;&gt;&gt;::lower_into<br>\n  12: &lt;&amp;rustc_middle::ty::TyS as rustc_traits::chalk::lowering::LowerInto&lt;chalk_ir::Ty&lt;rustc_middle::traits::chalk::RustInterner&gt;&gt;&gt;::lower_into<br>\n  13: &lt;rustc_middle::ty::subst::GenericArg as rustc_traits::chalk::lowering::LowerInto&lt;chalk_ir::GenericArg&lt;rustc_middle::traits::chalk::RustInterner&gt;&gt;&gt;::lower_into<br>\n  14: &lt;chalk_ir::cast::Casted&lt;IT,U&gt; as core::iter::traits::iterator::Iterator&gt;::next<br>\n  15: &lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next<br>\n  16: &lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter<br>\n  17: core::iter::adapters::process_results<br>\n  18: &lt;rustc_middle::traits::chalk::RustInterner as chalk_ir::interner::Interner&gt;::intern_substitution<br>\n  19: chalk_ir::Substitution&lt;I&gt;::from_iter<br>\n  20: &lt;&amp;rustc_middle::ty::list::List&lt;rustc_middle::ty::subst::GenericArg&gt; as rustc_traits::chalk::lowering::LowerInto&lt;chalk_ir::Substitution&lt;rustc_middle::traits::chalk::RustInterner&gt;&gt;&gt;::lower_into<br>\n  21: &lt;rustc_middle::ty::sty::ProjectionTy as rustc_traits::chalk::lowering::LowerInto&lt;chalk_ir::AliasTy&lt;rustc_middle::traits::chalk::RustInterner&gt;&gt;&gt;::lower_into<br>\n  22: &lt;rustc_middle::ty::Predicate as rustc_traits::chalk::lowering::LowerInto&lt;chalk_ir::GoalData&lt;rustc_middle::traits::chalk::RustInterner&gt;&gt;&gt;::lower_into<br>\n  23: &lt;rustc_middle::traits::chalk::ChalkEnvironmentAndGoal as rustc_traits::chalk::lowering::LowerInto&lt;chalk_ir::InEnvironment&lt;chalk_ir::Goal&lt;rustc_middle::traits::chalk::RustInterner&gt;&gt;&gt;&gt;::lower_into<br>\n  24: rustc_traits::chalk::evaluate_goal<br>\n  25: rustc_query_impl::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_query_impl::plumbing::QueryCtxt&gt; for rustc_query_impl::queries::evaluate_goal&gt;::compute<br>\n  26: rustc_data_structures::stack::ensure_sufficient_stack<br>\n  27: rustc_query_system::query::plumbing::get_query_impl<br>\n  28: rustc_query_system::query::plumbing::get_query<br>\n  29: &lt;rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine&gt;::evaluate_goal<br>\n  30: &lt;rustc_trait_selection::traits::chalk_fulfill::FulfillmentContext as rustc_infer::traits::engine::TraitEngine&gt;::select_where_possible<br>\n  31: &lt;rustc_infer::infer::InferCtxtBuilder as rustc_trait_selection::infer::InferCtxtBuilderExt&gt;::enter_canonical_trait_query<br>\n  32: rustc_traits::normalize_projection_ty::normalize_projection_ty<br>\n  33: rustc_query_impl::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_query_impl::plumbing::QueryCtxt&gt; for rustc_query_impl::queries::normalize_projection_ty&gt;::compute<br>\n  34: rustc_data_structures::stack::ensure_sufficient_stack<br>\n  35: rustc_query_system::query::plumbing::get_query_impl<br>\n  36: rustc_query_system::query::plumbing::get_query<br>\n  37: &lt;rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine&gt;::normalize_projection_ty<br>\n  38: &lt;rustc_trait_selection::traits::query::normalize::QueryNormalizer as rustc_middle::ty::fold::TypeFolder&gt;::fold_ty<br>\n  39: rustc_middle::ty::structural_impls::&lt;impl rustc_middle::ty::fold::TypeFoldable for &amp;rustc_middle::ty::TyS&gt;::super_fold_with<br>\n  40: &lt;rustc_trait_selection::traits::query::normalize::QueryNormalizer as rustc_middle::ty::fold::TypeFolder&gt;::fold_ty<br>\n  41: rustc_middle::ty::fold::TypeFoldable::fold_with<br>\n  42: rustc_middle::ty::fold::TypeFoldable::fold_with<br>\n  43: rustc_middle::ty::structural_impls::&lt;impl rustc_middle::ty::fold::TypeFoldable for &amp;rustc_middle::ty::TyS&gt;::super_fold_with<br>\n  44: &lt;rustc_trait_selection::traits::query::normalize::QueryNormalizer as rustc_middle::ty::fold::TypeFolder&gt;::fold_ty<br>\n  45: rustc_middle::ty::fold::TypeFoldable::fold_with<br>\n  46: &lt;rustc_infer::infer::at::At as rustc_trait_selection::traits::query::normalize::AtExt&gt;::normalize<br>\n  47: rustc_infer::infer::InferCtxtBuilder::enter<br>\n  48: rustc_traits::normalize_erasing_regions::normalize_after_erasing_regions<br>\n  49: rustc_query_system::query::plumbing::get_query_impl<br>\n  50: rustc_query_system::query::plumbing::get_query<br>\n  51: &lt;rustc_middle::ty::normalize_erasing_regions::NormalizeAfterErasingRegionsFolder as rustc_middle::ty::fold::TypeFolder&gt;::fold_ty<br>\n  52: rustc_middle::ty::normalize_erasing_regions::&lt;impl rustc_middle::ty::context::TyCtxt&gt;::subst_and_normalize_erasing_regions<br>\n  53: &lt;rustc_mir::monomorphize::collector::MirNeighborCollector as rustc_middle::mir::visit::Visitor&gt;::visit_terminator<br>\n  54: rustc_middle::mir::visit::Visitor::visit_body<br>\n  55: rustc_mir::monomorphize::collector::collect_neighbours<br>\n  56: rustc_data_structures::stack::ensure_sufficient_stack<br>\n  57: rustc_mir::monomorphize::collector::collect_items_rec<br>\n  58: rustc_mir::monomorphize::collector::collect_items_rec<br>\n  59: rustc_mir::monomorphize::collector::collect_items_rec<br>\n  60: rustc_mir::monomorphize::collector::collect_items_rec<br>\n  61: rustc_mir::monomorphize::collector::collect_items_rec<br>\n  62: rustc_mir::monomorphize::collector::collect_items_rec<br>\n  63: rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time<br>\n  64: rustc_mir::monomorphize::collector::collect_crate_mono_items<br>\n  65: rustc_mir::monomorphize::partitioning::collect_and_partition_mono_items<br>\n  66: rustc_query_impl::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_query_impl::plumbing::QueryCtxt&gt; for rustc_query_impl::queries::collect_and_partition_mono_items&gt;::compute<br>\n  67: rustc_data_structures::stack::ensure_sufficient_stack<br>\n  68: rustc_query_system::query::plumbing::get_query_impl<br>\n  69: rustc_query_system::query::plumbing::get_query<br>\n  70: &lt;rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine&gt;::collect_and_partition_mono_items<br>\n  71: rustc_codegen_ssa::base::codegen_crate<br>\n  72: &lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::codegen_crate<br>\n  73: rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time<br>\n  74: rustc_interface::passes::start_codegen<br>\n  75: rustc_interface::passes::QueryContext::enter<br>\n  76: rustc_interface::queries::Query&lt;T&gt;::compute<br>\n  77: rustc_interface::queries::Queries::ongoing_codegen<br>\n  78: rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter<br>\n  79: rustc_span::with_source_map<br>\n  80: rustc_interface::interface::create_compiler_and_run<br>\n  81: scoped_tls::ScopedKey&lt;T&gt;::set<br>\n  82: rustc_span::with_session_globals</p>\n</div></div>",
        "id": 242465064,
        "sender_full_name": "bstrie",
        "timestamp": 1623523249
    },
    {
        "content": "<p>I don't quite understand why chalk is failing here, I feel like it shouldn't generally have a problem with evaluating iter::cloned and at first glance I don't see anything array-specific that could be causing this. but this is my first time looking at chalk</p>",
        "id": 242465138,
        "sender_full_name": "bstrie",
        "timestamp": 1623523373
    },
    {
        "content": "<p>I would expect that I would have to make <em>some</em> change to chalk, since I had to modify the existing trait selection code in order to tell it to use the stdlib's implementations of Copy/Clone. but I have no idea where in chalk is currently taking care of implementing Copy/Clone on arrays</p>",
        "id": 242465715,
        "sender_full_name": "bstrie",
        "timestamp": 1623524168
    },
    {
        "content": "<p>So, you'll probably just want to ignore that test for now</p>",
        "id": 242465901,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623524358
    },
    {
        "content": "<p>But it's a pretty fix on the chalk side</p>",
        "id": 242465913,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623524380
    },
    {
        "content": "<p>It's a bit curious it starts failing. Trying to think why that might be. I thought the builtin impl would override the manual impl. But it's been a bit since I looked at the code</p>",
        "id": 242466003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623524446
    },
    {
        "content": "<p>Oh I just looked at the actual error</p>",
        "id": 242466038,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623524497
    },
    {
        "content": "<p>Chalk has an erased variant now, so that just needs to be lowered properly</p>",
        "id": 242466106,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623524568
    },
    {
        "content": "<p>is chalk smart enough to know not to attempt to fudge the Copy/Clone bound on arrays if it finds impls in std?</p>",
        "id": 242466201,
        "sender_full_name": "bstrie",
        "timestamp": 1623524699
    },
    {
        "content": "<p>because in the existing trait engine I had to change this function to make that happen: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1618\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1618</a></p>",
        "id": 242466212,
        "sender_full_name": "bstrie",
        "timestamp": 1623524712
    },
    {
        "content": "<p>I just feel like there has to be some array-specific shenanigan going on here, because otherwise that would seem to imply that chalk can't even evaluate a trivial iterator</p>",
        "id": 242466316,
        "sender_full_name": "bstrie",
        "timestamp": 1623524878
    },
    {
        "content": "<p>Well, I think chalk will just use the existing logic</p>",
        "id": 242466562,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623525169
    },
    {
        "content": "<p>It has basically the equivalent of that code</p>",
        "id": 242466583,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623525205
    },
    {
        "content": "<p>Worst case, if the test isn't fixed by lowering the erased regions correctly, just ignore the test and I'll get to it at some point</p>",
        "id": 242466616,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623525239
    },
    {
        "content": "<p>do you remember what the equivalent function in chalk is called? I've grepped for copy and clone with no luck</p>",
        "id": 242466673,
        "sender_full_name": "bstrie",
        "timestamp": 1623525268
    },
    {
        "content": "<p>grepping for Array also doesn't turn up anything that looks useful</p>",
        "id": 242466683,
        "sender_full_name": "bstrie",
        "timestamp": 1623525279
    },
    {
        "content": "<p>One sec</p>",
        "id": 242466690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623525295
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/blob/b9419bbfa9e7ff2830229db465244482f9d74ca2/chalk-solve/src/clauses/builtin_traits/copy.rs#L34\">https://github.com/rust-lang/chalk/blob/b9419bbfa9e7ff2830229db465244482f9d74ca2/chalk-solve/src/clauses/builtin_traits/copy.rs#L34</a></p>",
        "id": 242466727,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623525341
    },
    {
        "content": "<p>ah, I've just been grepping in compiler/rustc_traits/src/chalk, I didn't realize this wasn't the full repo</p>",
        "id": 242466801,
        "sender_full_name": "bstrie",
        "timestamp": 1623525402
    },
    {
        "content": "<p>with chalk being out-of-tree like this I'm not sure how to manage this transition. I guess for now I'll just take your advice and ignore the test for now, and I'll file an issue in the rust repo about un-ignoring the test once chalk has been updated and rustc has upgraded</p>",
        "id": 242467584,
        "sender_full_name": "bstrie",
        "timestamp": 1623526298
    },
    {
        "content": "<p>thanks for your help!</p>",
        "id": 242467663,
        "sender_full_name": "bstrie",
        "timestamp": 1623526367
    },
    {
        "content": "<p>No problem!</p>",
        "id": 242468099,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623526975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> probably should have said that an issue wasn't needed (if anything probably a chalk issue when PR is merged)</p>",
        "id": 242479607,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623542569
    },
    {
        "content": "<p>I'd be happy to file a chalk issue when that PR gets merged, though I think it's still useful to have an issue in the rustc repo since it involves a test in that repo</p>",
        "id": 242519733,
        "sender_full_name": "bstrie",
        "timestamp": 1623602739
    },
    {
        "content": "<p>Eh, honestly, at this stage, it's <em>not</em> that useful imo to have issues on the rustc repo for chalk things. Mostly because most things don't work right now anyways</p>",
        "id": 242533590,
        "sender_full_name": "Jack Huey",
        "timestamp": 1623622704
    }
]