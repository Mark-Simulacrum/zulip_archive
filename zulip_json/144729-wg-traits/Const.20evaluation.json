[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I want to take a look at implementing const evaluation in chalk. I'm thinking about starting by supporting some operators in the syntax like <code>&amp;</code>, <code>|</code>, and <code>^</code> (to avoid dealing with overflow for now, later <code>+</code> can be introduced), and folding the constants that can be folded while lowering to chalk-ir. For now, constants in chalk-ir that consist of nontrivial expressions would unify only if their structures are the same (so <code>?A ^ 1</code> wouldn't unify with <code>3</code>, but it would with <code>2 ^ 1</code> (which makes me think twice about folding constants)), though properties of operators can be implemented later.</p>",
        "id": 207093811,
        "sender_full_name": "Joshua Ani",
        "timestamp": 1597618317
    },
    {
        "content": "<p>Hmm, so, I'm not 100% what needs to be done here</p>",
        "id": 207093867,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597618380
    },
    {
        "content": "<p>Let's look at rustc's <code>Const</code>...</p>",
        "id": 207093870,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597618391
    },
    {
        "content": "<p>Specifically this: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Const.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Const.html</a></p>",
        "id": 207093918,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597618446
    },
    {
        "content": "<p>That's roughly the same as a <code>chalk_ir::ConstData</code></p>",
        "id": 207093932,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597618493
    },
    {
        "content": "<p>and <code>chalk_ir::ConstValue</code> is roughly <code>ConstKind</code></p>",
        "id": 207093946,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597618524
    },
    {
        "content": "<p>So \"supporting const evaluation in Chalk\" is roughly supporting the <code>Unevaluated</code> variant</p>",
        "id": 207094016,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597618616
    },
    {
        "content": "<p>I'm not sure we 100% know what that's going to look like</p>",
        "id": 207094072,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597618689
    },
    {
        "content": "<p>But, I am it'll probably be something like a function on <code>RustIrDatabase</code> that is essentially \"try to evaluate this <code>Unevaluated</code> to a <code>ConcreteConst</code>, if you can great, we'll use that; otherwise, we flounder\"</p>",
        "id": 207094217,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597618856
    },
    {
        "content": "<p>The thing we have to think about is reentrancy</p>",
        "id": 207094234,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597618873
    },
    {
        "content": "<p>Because, if I understand it correctly, const eval in rustc goes back and forth with type checking and such</p>",
        "id": 207094312,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597618928
    },
    {
        "content": "<p>The thing is that right now, chalk doesn't store expressions.</p>",
        "id": 207100955,
        "sender_full_name": "Joshua Ani",
        "timestamp": 1597630786
    },
    {
        "content": "<p>So the <code>Unevaluated</code> equivalent would need some sort of expression type as well as a list of substitutions.</p>",
        "id": 207106466,
        "sender_full_name": "Joshua Ani",
        "timestamp": 1597639098
    },
    {
        "content": "<p>I'm afraid this is an area of rustc that I know next to nothing about</p>",
        "id": 207150636,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597674636
    },
    {
        "content": "<p>In particular, I don't know how <code>Unevaluated</code> relates to the HIR expression</p>",
        "id": 207150700,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597674677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> you're familiar with this, right? Any thoughts?</p>",
        "id": 207150777,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597674722
    },
    {
        "content": "<p>I think to support unevaluated constants chalk mostly just needs its own <code>ConstKind::Unevaluated</code></p>",
        "id": 207151728,
        "sender_full_name": "lcnr",
        "timestamp": 1597675219
    },
    {
        "content": "<p>if you then try to relate 2 unevaluated constants you can \"just\" evaluate them using const eval and return ambiguous if it fails with <code>TooGeneric</code></p>",
        "id": 207151979,
        "sender_full_name": "lcnr",
        "timestamp": 1597675342
    },
    {
        "content": "<p>afaict that would mean that you need to include a somewhat large chunk of rustc in chalk to support this though <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 207152061,
        "sender_full_name": "lcnr",
        "timestamp": 1597675408
    },
    {
        "content": "<p>we currently do not unify generic expressions at all in rustc</p>",
        "id": 207152292,
        "sender_full_name": "lcnr",
        "timestamp": 1597675527
    },
    {
        "content": "<p>so all of <code>[u8; N + 0]</code>, [u8; N]<code>,  [u8; N &amp; 0xffff_ffff]</code> are distinct types</p>",
        "id": 207152393,
        "sender_full_name": "lcnr",
        "timestamp": 1597675572
    },
    {
        "content": "<p>presumably, this would go through a database query that's implemented by rustc? so Chalk would just need some way of faking const evaluation for the integration test suite (e.g. something to say \"an unevaluated constant that evaluates to x\")</p>",
        "id": 207152493,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597675621
    },
    {
        "content": "<p>we don't even unify two identical expressions rn, so the following fails to compile (even if we ignore <code>ConstEvaluatable</code> errors for now)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 207152533,
        "sender_full_name": "lcnr",
        "timestamp": 1597675649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Const.20evaluation/near/207152493\">said</a>:</p>\n<blockquote>\n<p>presumably, this would go through a database query that's implemented by rustc? so Chalk would just need some way of faking const evaluation for the integration test suite (e.g. something to say \"an unevaluated constant that evaluates to x\")</p>\n</blockquote>\n<p>afaict chalk integration would just call <code>ct.eval</code> in the right places and otherwise ignore unevaluated constants.</p>\n<p>So yeah, not sure what exactly is a  \"database query\" but that seems about right to me</p>",
        "id": 207152689,
        "sender_full_name": "lcnr",
        "timestamp": 1597675743
    },
    {
        "content": "<p>Right, this also fits with my thoughts</p>",
        "id": 207153189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597676007
    },
    {
        "content": "<p>I guess the question is does <code>ConstKind::Unevaluated</code> cover the actual expresssions to generate them? (like <code>N+</code>)</p>",
        "id": 207153300,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597676056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Const.20evaluation/near/207152689\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Const.20evaluation/near/207152493\">said</a>:</p>\n<blockquote>\n<p>presumably, this would go through a database query that's implemented by rustc? so Chalk would just need some way of faking const evaluation for the integration test suite (e.g. something to say \"an unevaluated constant that evaluates to x\")</p>\n</blockquote>\n<p>afaict chalk integration would just call <code>ct.eval</code> in the right places and otherwise ignore unevaluated constants.</p>\n<p>So yeah, not sure what exactly is a  \"database query\" but that seems about right to me</p>\n</blockquote>\n<p>Basically this, though.</p>",
        "id": 207153458,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597676146
    },
    {
        "content": "<p>I imagine for Chalk, the <code>Unevaluated</code> variant of <code>ConstValue</code> can just be <code>Unevaluated(I::UnevaluatedConst)</code> (or some newtype). Then we can just have a function on <code>RustIrDatabase</code> <code>fn try_evaluate(unevaluated: I::UnevaluatedConst) -&gt; Option&lt;ConcreteConst&lt;I&gt;&gt;</code></p>",
        "id": 207153759,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597676288
    },
    {
        "content": "<p>Or maybe <code>Result</code></p>",
        "id": 207153779,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597676297
    },
    {
        "content": "<blockquote>\n<p>I guess the question is does ConstKind::Unevaluated cover the actual expresssions to generate them?</p>\n</blockquote>\n<p>not completely sure what you mean here, but from what I can tell the answer is no. <code>ConstKind::Unevaluated</code> is mostly just an opaque identifier for an expression</p>",
        "id": 207153837,
        "sender_full_name": "lcnr",
        "timestamp": 1597676333
    },
    {
        "content": "<p>Okay, that's all that's needed!</p>",
        "id": 207153883,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597676350
    },
    {
        "content": "<p>(continuing) For integration tests, <code>I::UnevaluatedConst</code> can just be a <code>u32</code> and <code>try_evaluate</code> could be a no-op returning that</p>",
        "id": 207154061,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597676398
    },
    {
        "content": "<p>evaluating a constant has three relevant results. It can either succeed, error <code>[1, 2, 3][3]</code> or still be too generic <code>std::mem::size_of::&lt;T&gt;()</code></p>",
        "id": 207154068,
        "sender_full_name": "lcnr",
        "timestamp": 1597676401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Const.20evaluation/near/207154061\">said</a>:</p>\n<blockquote>\n<p>(continuing) For integration tests, <code>I::UnevaluatedConst</code> can just be a <code>u32</code> and <code>try_evaluate</code> could be a no-op returning that</p>\n</blockquote>\n<p>unless we need to test cases where evaluation fails</p>",
        "id": 207158533,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597678532
    },
    {
        "content": "<p>We could just make <code>0</code> always unevalutable</p>",
        "id": 207168867,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597683670
    },
    {
        "content": "<p>I say we dont support parsing expressions at all in the test suite, instead allowing users to hook into eval via a usual rust function</p>",
        "id": 207240199,
        "sender_full_name": "Areredify",
        "timestamp": 1597743379
    },
    {
        "content": "<p>so you write something like ‘f(args: Vec&lt;Const&gt;) -&gt; Result&lt;Const, TooGeneric&gt; { Ok(Const::Value(args[0].eval()? + args[1].eval()?) }‘</p>",
        "id": 207240663,
        "sender_full_name": "Areredify",
        "timestamp": 1597743791
    },
    {
        "content": "<p>probably needs a context passed in, but w/e</p>",
        "id": 207240749,
        "sender_full_name": "Areredify",
        "timestamp": 1597743852
    },
    {
        "content": "<p>register it with a macro</p>",
        "id": 207241064,
        "sender_full_name": "Areredify",
        "timestamp": 1597744110
    },
    {
        "content": "<p>and when parsing recover the fn ptr</p>",
        "id": 207241102,
        "sender_full_name": "Areredify",
        "timestamp": 1597744160
    },
    {
        "content": "<p>I can mentor if we agree on what needs to be done</p>",
        "id": 207242445,
        "sender_full_name": "Areredify",
        "timestamp": 1597745321
    },
    {
        "content": "<p>at least on the chalk side, that is</p>",
        "id": 207247139,
        "sender_full_name": "Areredify",
        "timestamp": 1597749184
    },
    {
        "content": "<p>I was thinking of just supporting <code>+</code> for mocking purposes, since an unevaluated const is going to be opaque anyway.</p>",
        "id": 207302775,
        "sender_full_name": "Joshua Ani",
        "timestamp": 1597778114
    },
    {
        "content": "<p>When Chalk can't figure out whether there's a solution to a goal or not, should the result be \"No possible solution\" or \"Ambiguous\"?</p>",
        "id": 207314705,
        "sender_full_name": "Joshua Ani",
        "timestamp": 1597783911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> I don't understand what you mean? For testing, we need <em>some</em> way to simulate <code>Unevaluated</code></p>",
        "id": 207362847,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597802159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329281\">@Joshua Ani</span> I mean, maybe <code>+</code>, but really I think just storing <code>u32</code> as the <code>Unevaluated</code> type is fine. I guess it depends on our tests</p>",
        "id": 207362890,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597802211
    },
    {
        "content": "<p>If Chalk can't prove one way or another, it's <code>Ambiguous</code></p>",
        "id": 207362897,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597802231
    },
    {
        "content": "<p>If we <em>can</em> prove there is <em>no</em> solution, then that's <code>No possible solution</code></p>",
        "id": 207362903,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597802267
    },
    {
        "content": "<p>I could have an <code>Option&lt;u32&gt;</code></p>",
        "id": 207365497,
        "sender_full_name": "Joshua Ani",
        "timestamp": 1597805826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> my idea is to not parse <code>+</code> or <code>^</code> at all</p>",
        "id": 207373616,
        "sender_full_name": "Areredify",
        "timestamp": 1597817624
    },
    {
        "content": "<p>and instead use something like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">context</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Const</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Const</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TooGeneric</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Const</span>::<span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">eval</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">eval</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">register</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"k\">struct</span> <span class=\"nc\">Array</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Array</span><span class=\"o\">&lt;</span><span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"n\">Array</span><span class=\"o\">&lt;</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Foo</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 207374027,
        "sender_full_name": "Areredify",
        "timestamp": 1597818206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> but what does that allow us to test that simply writing <code>unevaluated(3)</code> doesn't?</p>",
        "id": 207376000,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597820378
    },
    {
        "content": "<p>Because <code>f</code> might depend on other unevaluated constants</p>",
        "id": 207382296,
        "sender_full_name": "Areredify",
        "timestamp": 1597826071
    },
    {
        "content": "<p>im not sure whats legal, const generics rfc doesnt talk much about traits I think (?)</p>",
        "id": 207382620,
        "sender_full_name": "Areredify",
        "timestamp": 1597826397
    },
    {
        "content": "<p>but how does that affect Chalk, when Chalk can anyhow only see whether the constant got evaluated or not?</p>",
        "id": 207382690,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597826431
    },
    {
        "content": "<p>If you mean this test in particular, unevaluated(3) is better, yes</p>",
        "id": 207382864,
        "sender_full_name": "Areredify",
        "timestamp": 1597826567
    },
    {
        "content": "<p>I mean in general</p>",
        "id": 207382879,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597826588
    },
    {
        "content": "<p>maybe Im thinking that const generics are more powerful that they are</p>",
        "id": 207382886,
        "sender_full_name": "Areredify",
        "timestamp": 1597826598
    },
    {
        "content": "<p>is this legal? <code>struct S&lt;const N&gt; where Vec&lt;u32&gt;: Foo&lt;f(N, N)&gt; {}</code></p>",
        "id": 207382894,
        "sender_full_name": "Areredify",
        "timestamp": 1597826605
    },
    {
        "content": "<p>*should it be legal</p>",
        "id": 207382978,
        "sender_full_name": "Areredify",
        "timestamp": 1597826669
    },
    {
        "content": "<p>it's probably not currently legal, but I don't think that matters that much -- I assume it's something we want to be legal at some point</p>",
        "id": 207382994,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597826692
    },
    {
        "content": "<p>I just don't see why it makes a difference to Chalk</p>",
        "id": 207383016,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597826711
    },
    {
        "content": "<p>say, f(N, N) = 2N, how would your variant look then?</p>",
        "id": 207383140,
        "sender_full_name": "Areredify",
        "timestamp": 1597826805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"251766\">Areredify</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Const.20evaluation/near/207382894\">said</a>:</p>\n<blockquote>\n<p>is this legal? <code>struct S&lt;const N&gt; where Vec&lt;u32&gt;: Foo&lt;f(N, N)&gt; {}</code></p>\n</blockquote>\n<p>This will require const wf bounds and will be implemented soon, but doesn't really interact with the trait system apart from returning <code>TooGeneric</code>, <code>ConstKind::Value</code> or an error</p>",
        "id": 207383148,
        "sender_full_name": "lcnr",
        "timestamp": 1597826810
    },
    {
        "content": "<p>by your variant I mean how do WellFormed clauses look</p>",
        "id": 207383292,
        "sender_full_name": "Areredify",
        "timestamp": 1597826906
    },
    {
        "content": "<p>you probably need a way to specify that a const returns <code>Ok</code> for one value of <code>N</code> and an error for a different value.</p>",
        "id": 207383302,
        "sender_full_name": "lcnr",
        "timestamp": 1597826916
    },
    {
        "content": "<p>I don't know how to best test this in chalk myself <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 207383356,
        "sender_full_name": "lcnr",
        "timestamp": 1597826971
    },
    {
        "content": "<p>I can only explain how this will work in rustc</p>",
        "id": 207383432,
        "sender_full_name": "lcnr",
        "timestamp": 1597827010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Const.20evaluation/near/207383302\">said</a>:</p>\n<blockquote>\n<p>you probably need a way to specify that a const returns <code>Ok</code> for one value of <code>N</code> and an error for a different value.</p>\n</blockquote>\n<p>thats sort of what I want to accomplish</p>",
        "id": 207383438,
        "sender_full_name": "Areredify",
        "timestamp": 1597827014
    },
    {
        "content": "<p>and also that it can return Ok even if one of parameters is generic</p>",
        "id": 207383466,
        "sender_full_name": "Areredify",
        "timestamp": 1597827054
    },
    {
        "content": "<p>I honestly think that for tests we just need something like <code>3</code> or <code>unevaluated(3)</code></p>",
        "id": 207436421,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597857710
    },
    {
        "content": "<p>at least, it seems to make sense to start with that until we actually come up with a test case that requires more?</p>",
        "id": 207436654,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1597857836
    },
    {
        "content": "<p>I opened a pull request: <a href=\"https://github.com/rust-lang/chalk/pull/596\">https://github.com/rust-lang/chalk/pull/596</a></p>",
        "id": 207437803,
        "sender_full_name": "Joshua Ani",
        "timestamp": 1597858401
    },
    {
        "content": "<p>Wow, unexpected</p>",
        "id": 207438280,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597858637
    },
    {
        "content": "<p><code>unevaluated_impl_generic</code> test fails?</p>",
        "id": 207438435,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597858697
    },
    {
        "content": "<p>I just fixed that one locally.</p>",
        "id": 207438893,
        "sender_full_name": "Joshua Ani",
        "timestamp": 1597858923
    },
    {
        "content": "<p>I'm gonna take a quick pass of review for any initial thoughts, but I won't be able to look deeply right now</p>",
        "id": 207439019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597859013
    },
    {
        "content": "<p>I noticed that the <code>placeholders_eq</code> test in test/constants.rs has 1 const test and 3 type tests. If I change them all to const tests, then</p>\n<div class=\"codehilite\"><pre><span></span><code>exists&lt;const C&gt; {\n    forall&lt;const D&gt; {\n        C = D\n    }\n}\n</code></pre></div>\n\n\n<p>returns the substitution <code>?0 := !1_0</code> instead of no solution. Should I leave them as type tests or actually try to fix them?</p>",
        "id": 207439249,
        "sender_full_name": "Joshua Ani",
        "timestamp": 1597859128
    },
    {
        "content": "<p>Oh interesting. Seems like an oversight</p>",
        "id": 207439413,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597859214
    },
    {
        "content": "<p>Um, let me think about that</p>",
        "id": 207439437,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597859232
    },
    {
        "content": "<p>I'll open an issue for now</p>",
        "id": 207439586,
        "sender_full_name": "Joshua Ani",
        "timestamp": 1597859302
    },
    {
        "content": "<p>That works</p>",
        "id": 207439651,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597859331
    },
    {
        "content": "<p>Seems like something is wrong, since we should be getting <code>No solution</code> for consts too (though I have to convince myself why)</p>",
        "id": 207439861,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597859410
    },
    {
        "content": "<p>Left some comments</p>",
        "id": 207442845,
        "sender_full_name": "Jack Huey",
        "timestamp": 1597861023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> around?</p>",
        "id": 208246303,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598547840
    },
    {
        "content": "<p>I know you're pretty swamped, but was wondering you could take a quick look at <a href=\"https://github.com/rust-lang/chalk/pull/598\">https://github.com/rust-lang/chalk/pull/598</a></p>",
        "id": 208246375,
        "sender_full_name": "Jack Huey",
        "timestamp": 1598547863
    }
]