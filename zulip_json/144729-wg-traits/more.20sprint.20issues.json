[
    {
        "content": "<p>(let's talk about getting more sprint issues in a different topic)</p>",
        "id": 193956729,
        "sender_full_name": "detrumi",
        "timestamp": 1586898113
    },
    {
        "content": "<p>(beat me to that)</p>",
        "id": 193956745,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586898121
    },
    {
        "content": "<p>(I want me some issues, otherwise Ill have to do benchmarking, ew)</p>",
        "id": 193956840,
        "sender_full_name": "Areredify",
        "timestamp": 1586898160
    },
    {
        "content": "<p>Let me just split this off then</p>",
        "id": 193956893,
        "sender_full_name": "detrumi",
        "timestamp": 1586898202
    },
    {
        "content": "<p><span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span>how did you split it off</p>",
        "id": 193956934,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586898239
    },
    {
        "content": "<p>when you edit the topic</p>",
        "id": 193956979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586898247
    },
    {
        "content": "<p>of a message</p>",
        "id": 193956981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586898249
    },
    {
        "content": "<p>I know you can, but maybe I'm missing some ui</p>",
        "id": 193956988,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586898253
    },
    {
        "content": "<p>it gives you the choice to \"change topic for this message and all later messages\"</p>",
        "id": 193956998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586898259
    },
    {
        "content": "<p>oh</p>",
        "id": 193957010,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586898266
    },
    {
        "content": "<p>nice</p>",
        "id": 193957013,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586898267
    },
    {
        "content": "<p>it'd be nice if you could select individual messages sometimes</p>",
        "id": 193957028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586898280
    },
    {
        "content": "<p>but still pretty useful</p>",
        "id": 193957033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586898282
    },
    {
        "content": "<p>so, super simple issue someone could pick up: <a href=\"https://github.com/rust-lang/chalk/issues/260\" title=\"https://github.com/rust-lang/chalk/issues/260\">https://github.com/rust-lang/chalk/issues/260</a></p>",
        "id": 193957062,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586898301
    },
    {
        "content": "<p>You can even split of someone else's message</p>",
        "id": 193957077,
        "sender_full_name": "detrumi",
        "timestamp": 1586898309
    },
    {
        "content": "<p>OK, so,m</p>",
        "id": 193957207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586898372
    },
    {
        "content": "<p>in terms of \"shared type library\" <a href=\"https://github.com/rust-lang-nursery/chalk/issues/16\" title=\"https://github.com/rust-lang-nursery/chalk/issues/16\">chalk#16</a>, apart from rustc refactorings,</p>",
        "id": 193957224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586898385
    },
    {
        "content": "<p>there's work to do in terms of adding more variants and things to chalk</p>",
        "id": 193957238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586898393
    },
    {
        "content": "<p>for example, our <code>Fn</code> type -- besides probably having the wrong name -- can't represent ABI, etc</p>",
        "id": 193957255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586898403
    },
    {
        "content": "<p>I could create a few issues related to that</p>",
        "id": 193957273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586898413
    },
    {
        "content": "<p>I'm thinking though that to engage <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> I should find something a bit harder ;) I'm looking over the <a href=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\" title=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\">skill tree</a>, it seems like some of the bigger areas are: sem-vs-syn-equality, subtyping-and-regions</p>",
        "id": 193957469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586898538
    },
    {
        "content": "<p>but those have more unknowns</p>",
        "id": 193957480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586898542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I think you have to make mentoring notes for that, I have no idea how do you test for unwind safety for example</p>",
        "id": 193957482,
        "sender_full_name": "Areredify",
        "timestamp": 1586898544
    },
    {
        "content": "<p>Oh, gimme gimme</p>",
        "id": 193957500,
        "sender_full_name": "Areredify",
        "timestamp": 1586898560
    },
    {
        "content": "<p>I can put my full time efforts into whatever</p>",
        "id": 193957533,
        "sender_full_name": "Areredify",
        "timestamp": 1586898579
    },
    {
        "content": "<p>I'll also create an issue to create benchmarks, in case anyone does not dislike that</p>",
        "id": 193957576,
        "sender_full_name": "detrumi",
        "timestamp": 1586898602
    },
    {
        "content": "<p>Haha, I will make some notes for the unwind safety</p>",
        "id": 193957588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586898602
    },
    {
        "content": "<p>I thought you can do <code>@rustbot assign @user</code></p>",
        "id": 193957645,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586898639
    },
    {
        "content": "<p>I think creating some benchmarks is a great idea</p>",
        "id": 193957646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586898640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/more.20sprint.20issues/near/193957645\" title=\"#narrow/stream/144729-wg-traits/topic/more.20sprint.20issues/near/193957645\">said</a>:</p>\n<blockquote>\n<p>I thought you can do <code>@rustbot assign @user</code></p>\n</blockquote>\n<p>you can ?</p>",
        "id": 193957655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586898647
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/351\" title=\"https://github.com/rust-lang/chalk/issues/351\">https://github.com/rust-lang/chalk/issues/351</a></p>",
        "id": 193957685,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586898673
    },
    {
        "content": "<p>only members can do that</p>",
        "id": 193957785,
        "sender_full_name": "Areredify",
        "timestamp": 1586898723
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/triagebot/wiki/Assignment\" title=\"https://github.com/rust-lang/triagebot/wiki/Assignment\">https://github.com/rust-lang/triagebot/wiki/Assignment</a></p>",
        "id": 193957798,
        "sender_full_name": "Areredify",
        "timestamp": 1586898733
    },
    {
        "content": "<p>I'm a member :)</p>",
        "id": 193957843,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586898768
    },
    {
        "content": "<p>but I guess I might not have the perms for that</p>",
        "id": 193957874,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586898786
    },
    {
        "content": "<p>Why does it say contributor in github?</p>",
        "id": 193957941,
        "sender_full_name": "Areredify",
        "timestamp": 1586898826
    },
    {
        "content": "<p>I don't think have my membership public</p>",
        "id": 193958027,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586898863
    },
    {
        "content": "<p>ooh</p>",
        "id": 193958061,
        "sender_full_name": "Areredify",
        "timestamp": 1586898883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> might know</p>",
        "id": 193958430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586899142
    },
    {
        "content": "<p>ah need to be in rust-lang/team</p>",
        "id": 193958475,
        "sender_full_name": "simulacrum",
        "timestamp": 1586899174
    },
    {
        "content": "<p>and possibly a 'team' member?</p>",
        "id": 193958486,
        "sender_full_name": "simulacrum",
        "timestamp": 1586899182
    },
    {
        "content": "<p>we whitelist wg-triage</p>",
        "id": 193958493,
        "sender_full_name": "simulacrum",
        "timestamp": 1586899187
    },
    {
        "content": "<p>(that's the current state, can obviously be relaxed)</p>",
        "id": 193958547,
        "sender_full_name": "simulacrum",
        "timestamp": 1586899205
    },
    {
        "content": "<p>I am in wg-triage</p>",
        "id": 193958586,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586899245
    },
    {
        "content": "<p>whoops</p>",
        "id": 193958600,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586899258
    },
    {
        "content": "<p>traits</p>",
        "id": 193958608,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586899262
    },
    {
        "content": "<p>misread that</p>",
        "id": 193958614,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586899265
    },
    {
        "content": "<p><span aria-label=\"flushed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"flushed\">:flushed:</span></p>",
        "id": 193958642,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586899284
    },
    {
        "content": "<p>hmm</p>",
        "id": 193958677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586899303
    },
    {
        "content": "<p>I think the list for chalk should be wg-traits</p>",
        "id": 193958681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586899308
    },
    {
        "content": "<p>yeah haha</p>",
        "id": 193958755,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586899327
    },
    {
        "content": "<p>can we configure this by editing <a href=\"https://github.com/rust-lang/chalk/blob/master/triagebot.toml\" title=\"https://github.com/rust-lang/chalk/blob/master/triagebot.toml\">https://github.com/rust-lang/chalk/blob/master/triagebot.toml</a> ?</p>",
        "id": 193958764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586899333
    },
    {
        "content": "<p>not currently no</p>",
        "id": 193959085,
        "sender_full_name": "simulacrum",
        "timestamp": 1586899555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  concerning syn-vs-sem eq, do you have a branch with that or you didn't have the chance to play with it?</p>",
        "id": 193960926,
        "sender_full_name": "Areredify",
        "timestamp": 1586900786
    },
    {
        "content": "<p>I do have some branches but I'm not sure they're state, I'm going to try and post some notes in a bit</p>",
        "id": 193960994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586900846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> so I left some notes in <a href=\"https://github.com/rust-lang/chalk/issues/364\" title=\"https://github.com/rust-lang/chalk/issues/364\">https://github.com/rust-lang/chalk/issues/364</a> -- but I was also thinking more about subtypes and outlives, and I want to leave some notes on that, because I think that's also pretty important, and possibly more urgent.</p>",
        "id": 194009078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586945594
    },
    {
        "content": "<p>Wow, that's a lot of info, thanks! One thing I wanted to note is that const unification will also have to deal with a related problem, in that when we unify two consts one of which is can't yet be evaluated, one way to deal with that is to create a pending obligation to prove that they are equal</p>",
        "id": 194009638,
        "sender_full_name": "Areredify",
        "timestamp": 1586945940
    },
    {
        "content": "<p>Yes, it's more or less the same problem, and I had expected them to be handled in analogous ways -- unevaluated constants are effectively \"aliases\".</p>",
        "id": 194028487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586956858
    },
    {
        "content": "<p>Yeah, after reading  through your design I realised that consts would be handled the same as lifetimes</p>",
        "id": 194028626,
        "sender_full_name": "Areredify",
        "timestamp": 1586956912
    },
    {
        "content": "<p>That's..actually interesting. I wasn't thinking quite like that, but that could be an interesting model.</p>",
        "id": 194032363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586958378
    },
    {
        "content": "<p>I'm not sure if it's really possible though</p>",
        "id": 194032420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586958397
    },
    {
        "content": "<p>in particular, lifetime constraints are deferred and can't influence what impl we wind up using, for the most part (modulo higher-ranked stuff, which we're still working out)</p>",
        "id": 194032484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586958421
    },
    {
        "content": "<p>I don't think we can do that for const generics because of backwards compatibility, if nothing else</p>",
        "id": 194032508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586958429
    },
    {
        "content": "<p>in patricular, if you have <code>impl Foo for [T; 1]</code> and <code>impl Foo for [T; 2]</code>, that's allowed today</p>",
        "id": 194032537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586958447
    },
    {
        "content": "<p>I don't get what you are trying to illustrate with that example</p>",
        "id": 194035780,
        "sender_full_name": "Areredify",
        "timestamp": 1586959741
    },
    {
        "content": "<p>We would generate<br>\n<code>forall&lt;const N&gt; { Implemented([T; N]: Foo) :- Equal(N, 1) }</code></p>",
        "id": 194036329,
        "sender_full_name": "Areredify",
        "timestamp": 1586959959
    },
    {
        "content": "<p>What I am referring to is that, with lifetimes, we have the additional \"quirk\" that we propagate out equality / outlives constraints to be solved by a later pass (or not, in some cases).</p>",
        "id": 194038690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586960858
    },
    {
        "content": "<p>And I was wondering if instead of having chalk have some callback that tries to evaluate a constant to a final value, we could conceivably propagate such conditions back out to be solved by the compiler \"later\", but I think we cannot</p>",
        "id": 194038834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586960897
    },
    {
        "content": "<p>I can't see how any of <code>SemEq</code> transformations could introduce problems, but I guess that's what experimenting is for</p>",
        "id": 194039648,
        "sender_full_name": "Areredify",
        "timestamp": 1586961254
    },
    {
        "content": "<p>(except solver problems, because I don't know the details of how both solvers work)</p>",
        "id": 194039904,
        "sender_full_name": "Areredify",
        "timestamp": 1586961364
    },
    {
        "content": "<p>It's not about those transformations</p>",
        "id": 194042575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586962343
    },
    {
        "content": "<p>It's about what it takes judge <code>Equal(N, 1)</code> provable</p>",
        "id": 194042606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586962357
    },
    {
        "content": "<p>Anyway never mind it's kind of me going down a rabbit hole that isn't what you intended and wouldn't work anyway</p>",
        "id": 194042636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1586962373
    },
    {
        "content": "<p>What Im interested in is how to share the inference table with rustc</p>",
        "id": 194045632,
        "sender_full_name": "Areredify",
        "timestamp": 1586963540
    },
    {
        "content": "<p>To actually eval something</p>",
        "id": 194045684,
        "sender_full_name": "Areredify",
        "timestamp": 1586963552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/more.20sprint.20issues/near/194038834\" title=\"#narrow/stream/144729-wg-traits/topic/more.20sprint.20issues/near/194038834\">said</a>:</p>\n<blockquote>\n<p>And I was wondering if instead of having chalk have some callback that tries to evaluate a constant to a final value, we could conceivably propagate such conditions back out to be solved by the compiler \"later\", but I think we cannot</p>\n</blockquote>\n<p>I've been thinking about this too. I think, if we <em>could</em> do this,  it would be \"better\". But at least with the current way that we get answers (where we make some progress, find an answer maybe eventually, then repeat until we get some generalized answer, then return that), it might not be possible</p>",
        "id": 194067799,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586973092
    },
    {
        "content": "<p>I <em>could</em> imagine that we sort of split that up. Where we make some progress, return a <em>partial</em> answer (or one with some set of unknown delayed subgoals (like <code>Equal(N, 1)</code> above, let the caller try to sort out what it can, then continue trying to make progress where we can, with potentially more information</p>",
        "id": 194203426,
        "sender_full_name": "Jack Huey",
        "timestamp": 1586973209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I was wondering whether you can recommend some other issues that might be a good fir to work on after <a href=\"https://github.com/rust-lang/chalk/pull/420\" title=\"https://github.com/rust-lang/chalk/pull/420\">https://github.com/rust-lang/chalk/pull/420</a> got merged. Something that forces me to understand things in a bit more detail would be pretty great :) Thanks in advance !</p>",
        "id": 195759482,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1588188893
    },
    {
        "content": "<p>Hmm, let me look :)</p>",
        "id": 195759533,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588188931
    },
    {
        "content": "<p>So there is this one now: <a href=\"https://github.com/rust-lang/chalk/issues/399\" title=\"https://github.com/rust-lang/chalk/issues/399\">https://github.com/rust-lang/chalk/issues/399</a></p>",
        "id": 195759696,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588189021
    },
    {
        "content": "<p>I think most of the work there is essentially copying what we do in the SLG solver</p>",
        "id": 195759780,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588189065
    },
    {
        "content": "<p>(i.e. <code>chalk-engine</code>)</p>",
        "id": 195759787,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588189073
    },
    {
        "content": "<p>Alright.. I guess that can have some nice didactic results</p>",
        "id": 195759967,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1588189159
    },
    {
        "content": "<p>So it is not too hard ?</p>",
        "id": 195759993,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1588189182
    },
    {
        "content": "<p>It shouldn't be <em>too</em> difficult</p>",
        "id": 195760062,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588189210
    },
    {
        "content": "<p>The biggest thing is you'll have to look through how coinduction is handled in SLG</p>",
        "id": 195760098,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588189231
    },
    {
        "content": "<p>and also how it might be a bit different in the recursive solver</p>",
        "id": 195760116,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588189245
    },
    {
        "content": "<p>I haven't really looked at it, so I can't give any mentoring instructions <em>right now</em>. But I can answer questions and point you to relevant documentation.</p>",
        "id": 195760184,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588189289
    },
    {
        "content": "<p>Thanks, that sounds great. Are there any more tips, like pointers to where this is handled in the SLG solver, etc</p>",
        "id": 195760209,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1588189307
    },
    {
        "content": "<p>And I can look through later tonight and get a better feel</p>",
        "id": 195760223,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588189317
    },
    {
        "content": "<p>okey I will just try and dig in</p>",
        "id": 195760227,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1588189322
    },
    {
        "content": "<p>okey, that will be much appreciated. any information will be useful</p>",
        "id": 195760305,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1588189345
    },
    {
        "content": "<p>Relevant documentation for SLG coinduction: <a href=\"http://rust-lang.github.io/chalk/book/engine/logic/coinduction.html\" title=\"http://rust-lang.github.io/chalk/book/engine/logic/coinduction.html\">http://rust-lang.github.io/chalk/book/engine/logic/coinduction.html</a></p>",
        "id": 195760306,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588189345
    },
    {
        "content": "<p>great!</p>",
        "id": 195760361,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1588189384
    },
    {
        "content": "<p>will dig in</p>",
        "id": 195760368,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1588189387
    },
    {
        "content": "<p>Then grep for \"coinductive\" or \"coinduction\" in <code>logic.rs</code></p>",
        "id": 195760393,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588189402
    }
]