[
    {
        "content": "<p>I've just started to remove some things here</p>",
        "id": 245967947,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626273106
    },
    {
        "content": "<p>wanted to know ... <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_hir/src/hir.rs#L2274\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_hir/src/hir.rs#L2274</a> seems to be what we using to handle bindings</p>",
        "id": 245967990,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626273123
    },
    {
        "content": "<p>but what about <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_hir/src/hir.rs#L2277-L2278\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_hir/src/hir.rs#L2277-L2278</a> ?</p>",
        "id": 245968027,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626273135
    },
    {
        "content": "<p>I think we don't want any of these ...</p>",
        "id": 245968229,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626273232
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 245968242,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626273239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> looking</p>",
        "id": 245968854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626273496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/144729-wg-traits/topic/let.20bindings.20impl.20trait.20removal/near/245968242\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>this is correct, these are all impl trait in bindings</p>",
        "id": 245968871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626273505
    },
    {
        "content": "<p>ok <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 245968900,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626273523
    },
    {
        "content": "<p>I'm not sure whether this implies we can remove <code>OpaqueTyOrigin::Misc</code> or not</p>",
        "id": 245968926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626273534
    },
    {
        "content": "<p>yeah, I'm not sure right now</p>",
        "id": 245968948,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626273545
    },
    {
        "content": "<p>probably not</p>",
        "id": 245968954,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626273547
    },
    {
        "content": "<p>It mentions \"bounds\", for example-- maybe there are some places that it is used</p>",
        "id": 245968955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626273548
    },
    {
        "content": "<p>right</p>",
        "id": 245968962,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626273552
    },
    {
        "content": "<p>but I guss that's just a thing to test</p>",
        "id": 245968964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1626273554
    },
    {
        "content": "<p>the bounds part :)</p>",
        "id": 245968980,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626273561
    },
    {
        "content": "<p>yeah, will check that out</p>",
        "id": 245968998,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626273571
    },
    {
        "content": "<p>was trying to figure out what to do with this test <a href=\"https://github.com/alexreg/rust/blob/ee890331f6e33afe12ef250eb6388db2aab7cbbf/src/test/ui/associated-type-bounds/lcsit.rs\">https://github.com/alexreg/rust/blob/ee890331f6e33afe12ef250eb6388db2aab7cbbf/src/test/ui/associated-type-bounds/lcsit.rs</a></p>",
        "id": 245982493,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626279327
    },
    {
        "content": "<p>it was introduced when associated_type_bounds was implemented RFC 2289</p>",
        "id": 245982605,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626279382
    },
    {
        "content": "<p>here <a href=\"https://github.com/rust-lang/rust/issues/57428\">#57428</a></p>",
        "id": 245982613,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626279391
    },
    {
        "content": "<p>I'm not sure if the test makes sense without let bindings</p>",
        "id": 245982653,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626279417
    },
    {
        "content": "<p>what's lcsit? :)</p>",
        "id": 245982688,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626279435
    },
    {
        "content": "<p>it seems to me that the test should be removed</p>",
        "id": 245982826,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626279493
    },
    {
        "content": "<p>but I'm not 100% sure</p>",
        "id": 245982839,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626279498
    },
    {
        "content": "<p>I agree</p>",
        "id": 245982890,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626279525
    },
    {
        "content": "<p>It's probably <code>let const static impl trait</code></p>",
        "id": 245982975,
        "sender_full_name": "Jack Huey",
        "timestamp": 1626279570
    },
    {
        "content": "<p>heh there's also a <code>dyn</code> version of that test</p>",
        "id": 245990186,
        "sender_full_name": "lqd",
        "timestamp": 1626282818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/let.20bindings.20impl.20trait.20removal/near/245982975\">said</a>:</p>\n<blockquote>\n<p>It's probably <code>let const static impl trait</code></p>\n</blockquote>\n<p>unsure what you meant here</p>",
        "id": 245991771,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626283468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/144729-wg-traits/topic/let.20bindings.20impl.20trait.20removal/near/245990186\">said</a>:</p>\n<blockquote>\n<p>heh there's also a <code>dyn</code> version of that test</p>\n</blockquote>\n<p>yeah, saw that one too</p>",
        "id": 245991809,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626283484
    },
    {
        "content": "<p>lcsit being an acronym for Let Const Static Impl Trait , the \"3 kinds of let bindings impl trait\", just like you said before</p>",
        "id": 245991912,
        "sender_full_name": "lqd",
        "timestamp": 1626283540
    },
    {
        "content": "<p>ohhh <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 245994882,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626284845
    },
    {
        "content": "<p>for this example ...</p>",
        "id": 246012543,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626293037
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// edition:2018</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Error</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">make_unit</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fut</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">make_unit</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR type annotations needed</span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246012634,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626293069
    },
    {
        "content": "<p>what would we prefer of the following ...</p>",
        "id": 246012673,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626293089
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>diff --git a/src/test/ui/inference/cannot-infer-async.stderr b/src/test/ui/inference/cannot-infer-async.stderr\nindex 23360483361..5c6640b0c78 100644\n--- a/src/test/ui/inference/cannot-infer-async.stderr\n+++ b/src/test/ui/inference/cannot-infer-async.stderr\n@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `impl Future`\n   --&gt; $DIR/cannot-infer-async.rs:13:9\n    |\n LL |     let fut = async {\n-   |         --- consider giving `fut` a type\n+   |         --- consider giving `fut` the explicit type `impl Future`, where the type parameter `E` is specified\n ...\n LL |         Ok(())\n    |         ^^ cannot infer type for type parameter `E` declared on the enum `Result`\n</code></pre></div>",
        "id": 246012693,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1626293095
    }
]