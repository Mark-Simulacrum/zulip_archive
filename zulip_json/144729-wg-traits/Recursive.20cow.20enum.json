[
    {
        "content": "<p>At some point in the past I tried this code:</p>\n<div class=\"codehilite\"><pre><span></span><code>use std::borrow::Cow;\n\n#[derive(Clone)]\nenum Test &lt;&#39;a&gt; {\n    Int(u8),\n    Array(Cow&lt;&#39;a, [Test&lt;&#39;a&gt;]&gt;),\n}\n</code></pre></div>\n<p>Playground: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=cc45c60985543b19460d6566dbf45caa\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=cc45c60985543b19460d6566dbf45caa</a></p>\n<p>But it does not work and fails with surprising errors like:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0277]: the trait bound `[Test&lt;&#39;a&gt;]: ToOwned` is not satisfied in `Cow&lt;&#39;a, [Test&lt;&#39;a&gt;]&gt;`\n --&gt; src/lib.rs:6:11\n  |\n6 |     Array(Cow&lt;&#39;a, [Test&lt;&#39;a&gt;]&gt;),\n  |           ^^^^^^^^^^^^^^^^^^^ within `Cow&lt;&#39;a, [Test&lt;&#39;a&gt;]&gt;`, the trait `ToOwned` is not implemented for `[Test&lt;&#39;a&gt;]`\n  |\n  = help: the following implementations were found:\n            &lt;[T] as ToOwned&gt;\n  = note: required because it appears within the type `Cow&lt;&#39;a, [Test&lt;&#39;a&gt;]&gt;`\n  = note: no field of an enum variant may have a dynamically sized type\n  = help: change the field&#39;s type to have a statically known size\nhelp: borrowed types always have a statically known size\n  |\n6 |     Array(&amp;Cow&lt;&#39;a, [Test&lt;&#39;a&gt;]&gt;),\n  |           ^\nhelp: the `Box` type always has a statically known size and allocates its contents in the heap\n  |\n6 |     Array(Box&lt;Cow&lt;&#39;a, [Test&lt;&#39;a&gt;]&gt;&gt;),\n  |           ^^^^                   ^\n</code></pre></div>\n<p>Whereas <code>ToOwned</code> <em>should</em> implemented for any <code>[T]</code> providing that <code>T: Clone</code></p>",
        "id": 235854504,
        "sender_full_name": "marmeladema",
        "timestamp": 1619189986
    },
    {
        "content": "<p>Especially the node around <code>no field of an enum variant may have a dynamically sized type</code> seems weird given that there is DST involved here</p>",
        "id": 235854929,
        "sender_full_name": "marmeladema",
        "timestamp": 1619190058
    },
    {
        "content": "<p>Cow definitions is</p>\n<div class=\"codehilite\"><pre><span></span><code>pub enum Cow&lt;&#39;a, B&gt; where\n    B: &#39;a + ToOwned + ?Sized,  {\n    Borrowed(&amp;&#39;a B),\n    Owned(&lt;B as ToOwned&gt;::Owned),\n}\n</code></pre></div>\n<p>So its either a reference to [Test&lt;'a&gt;] (which should be Sized) or a Vec&lt;Test&lt;'a&gt;&gt; (which should Sized too)</p>",
        "id": 235855416,
        "sender_full_name": "marmeladema",
        "timestamp": 1619190143
    },
    {
        "content": "<p>i think we end up having a mixed cycle here, where some of the predicates are coinductive but not all <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> this issue is the reason i've asked about mixed coinductive cycles before</p>",
        "id": 235869395,
        "sender_full_name": "lcnr",
        "timestamp": 1619195104
    },
    {
        "content": "<p>there might be a different solution to this, but looking at for how long this issue has been open, that one might be hard and not something i can say anything about rn</p>",
        "id": 235869480,
        "sender_full_name": "lcnr",
        "timestamp": 1619195144
    },
    {
        "content": "<p>i think this is <a href=\"https://github.com/rust-lang/rust/issues/47032\">#47032</a></p>",
        "id": 235870243,
        "sender_full_name": "lcnr",
        "timestamp": 1619195481
    },
    {
        "content": "<p>I originally posted this 2 years ago in <a href=\"https://github.com/rust-lang/rust/issues/23707\">https://github.com/rust-lang/rust/issues/23707</a><br>\nBut I guess there are multiple issues for this</p>",
        "id": 235875087,
        "sender_full_name": "marmeladema",
        "timestamp": 1619197470
    },
    {
        "content": "<p>Would making Sized codinductive help here?</p>",
        "id": 235875662,
        "sender_full_name": "marmeladema",
        "timestamp": 1619197694
    },
    {
        "content": "<p>not on it's own sadly</p>",
        "id": 235876109,
        "sender_full_name": "lcnr",
        "timestamp": 1619197877
    },
    {
        "content": "<p>because the cycle is like <code>A: Sized -&gt; B: ToOwned -&gt; C: Sized -&gt; A: Sized</code> and <code>ToOwned</code> is not coinductive</p>",
        "id": 235876149,
        "sender_full_name": "lcnr",
        "timestamp": 1619197909
    },
    {
        "content": "<p>so even if <code>Sized</code> on its own ends up being coinductive this cycle would still cause an error</p>",
        "id": 235876241,
        "sender_full_name": "lcnr",
        "timestamp": 1619197934
    }
]