[
    {
        "content": "<p>OK, <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> -- so, I think we're in agreement that the \"traits\" effort includes a lot of subprojects and subtasks, some of which are clearly compiler, some lang, and some in between</p>",
        "id": 159186286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865554
    },
    {
        "content": "<p>you mentioned the idea of \"what is the right way to update community\", I think that's an interesting angle</p>",
        "id": 159186297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865578
    },
    {
        "content": "<p>I'm trying to decide how to write out those \"subprojects\" etc</p>",
        "id": 159186308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865590
    },
    {
        "content": "<p>Yep -- and I think it often turns out that \"updating the community\" and \"updating relevant teams\" are extremely well-aligned :)</p>",
        "id": 159186377,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550865609
    },
    {
        "content": "<p>I see e.g.  a feature-based division</p>\n<ul>\n<li>specialization</li>\n<li>generic associated types</li>\n<li>various improvements to trait objects</li>\n</ul>",
        "id": 159186385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865613
    },
    {
        "content": "<p>but I also see that within one of those, there are divisions</p>",
        "id": 159186391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865622
    },
    {
        "content": "<p>ah, one sec, i have some thoughts from the lang side</p>",
        "id": 159186394,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550865625
    },
    {
        "content": "<ul>\n<li>\n<p>Idea stage</p>\n<ul>\n<li>associated traits, quantification over traits</li>\n<li>gadts (<code>where</code> clauses on enum variants)</li>\n<li>Trait object improvements</li>\n</ul>\n</li>\n<li>\n<p>Pre-RFC stage</p>\n<ul>\n<li>HRTB for types<ul>\n<li>Centril has been working on this</li>\n<li><a href=\"https://github.com/Centril/rfcs/blob/rfc/uniform-generic-bounds/text/0000-uniform-generic-bounds.md\" target=\"_blank\" title=\"https://github.com/Centril/rfcs/blob/rfc/uniform-generic-bounds/text/0000-uniform-generic-bounds.md\">https://github.com/Centril/rfcs/blob/rfc/uniform-generic-bounds/text/0000-uniform-generic-bounds.md</a></li>\n<li>Related to generic closures,  but the latter is  an important part of the motivation here</li>\n</ul>\n</li>\n<li>Fields in traits<ul>\n<li>There’s a detailed RFC text</li>\n</ul>\n</li>\n<li>Delegation</li>\n</ul>\n</li>\n<li>\n<p>RFC stage</p>\n<ul>\n<li>Const interactions</li>\n<li>Hidden implementations - <a href=\"https://github.com/rust-lang/rfcs/pull/2529\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2529\">https://github.com/rust-lang/rfcs/pull/2529</a><ul>\n<li>Some weirdness with specialization</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Implementation stage</p>\n<ul>\n<li>GATs</li>\n<li>Implied bounds</li>\n<li>Trait aliases (needs more design)</li>\n<li>Existential types (centril working on fcp)</li>\n<li>Associated type defaults</li>\n<li>Specialization<ul>\n<li>Needs spec-level rework, possibly additional RFC</li>\n</ul>\n</li>\n<li>Associated type bound syntax improvements<ul>\n<li>Needs tests</li>\n</ul>\n</li>\n<li>Inherent associated types</li>\n<li>Re-re-balancing coherence</li>\n</ul>\n</li>\n</ul>",
        "id": 159186412,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550865654
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"126931\">@centril</span></p>",
        "id": 159186433,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550865671
    },
    {
        "content": "<p>/me reads :)</p>",
        "id": 159186449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865697
    },
    {
        "content": "<p>specialization is an interesting case</p>",
        "id": 159186512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865727
    },
    {
        "content": "<p>it feels like it could be subdivided</p>",
        "id": 159186520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865739
    },
    {
        "content": "<p>hm, potentially yeah</p>",
        "id": 159186533,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550865757
    },
    {
        "content": "<p>it has a kind of zoo of extensions etc</p>",
        "id": 159186543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865777
    },
    {
        "content": "<p>ah yes, true</p>",
        "id": 159186550,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550865783
    },
    {
        "content": "<p>not to mention the \"soundness fix\"</p>",
        "id": 159186553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865784
    },
    {
        "content": "<p>so i sort of think there's a fractal structure here, where what we want for the WG is similar to what we're trying to do for Lang/Compiler itself</p>",
        "id": 159186562,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550865794
    },
    {
        "content": "<p>I <em>suspect</em> we can ignore intersection impls (lattice impls)</p>",
        "id": 159186566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865800
    },
    {
        "content": "<blockquote>\n<p>so i sort of think there's a fractal structure here, where what we want for the WG is similar to what we're trying to do for Lang/Compiler itself</p>\n</blockquote>\n<p>yes</p>",
        "id": 159186569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865803
    },
    {
        "content": "<p>I was thinking similar things</p>",
        "id": 159186583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865829
    },
    {
        "content": "<p>that is, we have this big list of potential topics for the WG, and i think we want to designate some of them as \"active\" (with clear list of folks working on it) and some on the \"short list\"</p>",
        "id": 159186584,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550865831
    },
    {
        "content": "<p>right</p>",
        "id": 159186588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865836
    },
    {
        "content": "<p>and I think we <em>may</em> want to even split a bit more</p>",
        "id": 159186594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865841
    },
    {
        "content": "<p>I guess I'd prefer not, to start</p>",
        "id": 159186643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865851
    },
    {
        "content": "<p>similarly, WG meeting probably wants updates from the various projects, and then periodically gives an overall summary to compiler/lang</p>",
        "id": 159186652,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550865861
    },
    {
        "content": "<p>but you could imagine, if we get sufficiently \"empowered\", that we kind of split out \"folks on specialization\", who have their own meeting</p>",
        "id": 159186655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865864
    },
    {
        "content": "<p>but I definitely think we want to start out focusing on one or two things</p>",
        "id": 159186671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865881
    },
    {
        "content": "<p>yeah</p>",
        "id": 159186672,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550865881
    },
    {
        "content": "<p>your list of course ignored things like \"chalk transition\"</p>",
        "id": 159186691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865906
    },
    {
        "content": "<p>which isn't really a <em>lang team</em> consideration</p>",
        "id": 159186697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865912
    },
    {
        "content": "<p>right, my list was purely on the lang side</p>",
        "id": 159186709,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550865933
    },
    {
        "content": "<p>looking at it from the compiler team side, I remain pretty interested in trying to look specifically at lazy normalization and generic associated types</p>",
        "id": 159186723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865946
    },
    {
        "content": "<p>i personally have a lot less clarity on how the compiler side should get broken down</p>",
        "id": 159186724,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550865947
    },
    {
        "content": "<p>and try to see if there is some \"short path\" to be made there</p>",
        "id": 159186729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865951
    },
    {
        "content": "<p>which, in fact, might be a good candidate for some technical work on my side:)</p>",
        "id": 159186790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865974
    },
    {
        "content": "<p>:)</p>",
        "id": 159186802,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550865983
    },
    {
        "content": "<p>(I sort of feel an itch to do things, but it has to be something I can do in an hour or two here or there)</p>",
        "id": 159186805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550865990
    },
    {
        "content": "<p>so I'm wondering about this</p>",
        "id": 159186820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866005
    },
    {
        "content": "<p>yep, i expect this would be a high-leverage activity</p>",
        "id": 159186821,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550866007
    },
    {
        "content": "<p>I feel like the list you started on above is a bit too high-level</p>",
        "id": 159186828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866013
    },
    {
        "content": "<p>I'd be interested in trying to push down to more granular tasks</p>",
        "id": 159186836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866021
    },
    {
        "content": "<p>(ps, this is something I've been thinking about for a lot of projects)</p>",
        "id": 159186848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866031
    },
    {
        "content": "<p>yeah -- it was basically like \"what are all the features we're thinking about wrt traits\"</p>",
        "id": 159186850,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550866033
    },
    {
        "content": "<p>basically geting down to a kind of \"sea\" of next steps</p>",
        "id": 159186856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866040
    },
    {
        "content": "<p>and then trying to see if we can pick one or two that seem compatible</p>",
        "id": 159186867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866060
    },
    {
        "content": "<p>I'm not exactly sure what that means :P</p>",
        "id": 159186872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866070
    },
    {
        "content": "<p>i.e., you could imagine saying \"we'll do some very compiler focused and some very lang focused\"</p>",
        "id": 159186920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866086
    },
    {
        "content": "<p>since those are like .. nonoverlapping</p>",
        "id": 159186922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866090
    },
    {
        "content": "<p>feels like the \"Getting Things Done\" methodology :)</p>",
        "id": 159186923,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550866093
    },
    {
        "content": "<blockquote>\n<p>basically geting down to a kind of \"sea\" of next steps</p>\n</blockquote>\n<p>every time I try to do this, I kind of get stuck trying to figure out how to \"represent\" those</p>",
        "id": 159186929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866106
    },
    {
        "content": "<p>I guess for now just some big paper document or something is the way to start</p>",
        "id": 159186940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866128
    },
    {
        "content": "<p>now you're talking my language ;-)</p>",
        "id": 159186946,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550866139
    },
    {
        "content": "<p>yeah I mean I always start there, and it kind of works</p>",
        "id": 159186955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866150
    },
    {
        "content": "<p>but after a while I find I want a spreadsheet</p>",
        "id": 159186958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866155
    },
    {
        "content": "<p>then I convert it</p>",
        "id": 159186960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866157
    },
    {
        "content": "<p>then I find, oh, wait, I want to write more</p>",
        "id": 159186961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866160
    },
    {
        "content": "<p>then I convert it back</p>",
        "id": 159186963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866162
    },
    {
        "content": "<p>lol</p>",
        "id": 159186965,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550866163
    },
    {
        "content": "<p>then I think \"I want to assign these to people\"</p>",
        "id": 159186968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866167
    },
    {
        "content": "<p>and I start making issues</p>",
        "id": 159186969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866169
    },
    {
        "content": "<p>and they get out of date</p>",
        "id": 159186970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866172
    },
    {
        "content": "<p>etc</p>",
        "id": 159186971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866172
    },
    {
        "content": "<p>but whatever that's life :P</p>",
        "id": 159186977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866184
    },
    {
        "content": "<p>\"welcome to project management, kid\"</p>",
        "id": 159186982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866188
    },
    {
        "content": "<p>\"an endless stream of converting lists of tasks from one format to another\"</p>",
        "id": 159186986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866195
    },
    {
        "content": "<p>this all feels very validating lol</p>",
        "id": 159187041,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550866208
    },
    {
        "content": "<p>actually, omnioutliner ...</p>",
        "id": 159187054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866244
    },
    {
        "content": "<p>did you ever use that?</p>",
        "id": 159187056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866246
    },
    {
        "content": "<p>of course, I can't use it now</p>",
        "id": 159187057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866248
    },
    {
        "content": "<p>/me sheds a tear for all the great mac apps</p>",
        "id": 159187062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866261
    },
    {
        "content": "<p>also, it was not on the internet</p>",
        "id": 159187075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866267
    },
    {
        "content": "<p><em>anyway</em>...</p>",
        "id": 159187086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866279
    },
    {
        "content": "<blockquote>\n<p>did you ever use that?</p>\n</blockquote>\n<p>i didn't. only ever omnigraffle (which was pretty cool)</p>",
        "id": 159187099,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550866307
    },
    {
        "content": "<p>basically I feel like what I want is sort of a spreadsheet where I can expand to write text</p>",
        "id": 159187148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866325
    },
    {
        "content": "<p>so I can reorder rows and hide details etc</p>",
        "id": 159187157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866330
    },
    {
        "content": "<p>but anyway</p>",
        "id": 159187162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866333
    },
    {
        "content": "<blockquote>\n<p>\"welcome to project management, kid\"</p>\n</blockquote>\n<p>this is somewhat offtopic, but i do wonder if this is an area where we could call for help from people with more experience, or who particularly like this kind of tracking work</p>",
        "id": 159187172,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550866352
    },
    {
        "content": "<p>it does feel like there <strong>must</strong> be a better answer</p>",
        "id": 159187178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866376
    },
    {
        "content": "<p>but then again most people seem to just hate on the tools i've heard about</p>",
        "id": 159187186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866384
    },
    {
        "content": "<p>could be worth looking at GitHub projects again</p>",
        "id": 159187191,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550866386
    },
    {
        "content": "<p>I was wondering about it</p>",
        "id": 159187195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866392
    },
    {
        "content": "<p>well, for now I created a <a href=\"https://paper.dropbox.com/doc/Traits-Roadmap-sketch--AYEYyqaNyA~~NOuXZb2hCbyOAg-m6hucUslp7GihsY3SjNN2\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Traits-Roadmap-sketch--AYEYyqaNyA~~NOuXZb2hCbyOAg-m6hucUslp7GihsY3SjNN2\">DropBox paper document</a> that contains the stuff you added before</p>",
        "id": 159187203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866404
    },
    {
        "content": "<p>I mean what I sort of want is to like buy a bunch of index cards</p>",
        "id": 159187212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866424
    },
    {
        "content": "<p>and spread them out into big piles</p>",
        "id": 159187216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866427
    },
    {
        "content": "<p>that... sounds like GitHub projects :)</p>",
        "id": 159187270,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550866450
    },
    {
        "content": "<p>yeah, I know</p>",
        "id": 159187300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866487
    },
    {
        "content": "<p>but I am skeptical of that particular incarnation</p>",
        "id": 159187303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866499
    },
    {
        "content": "<p>maybe I am wrong to be so skeptical</p>",
        "id": 159187315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866507
    },
    {
        "content": "<p>worth another try</p>",
        "id": 159187319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> I don't really remember, how close do you think <a href=\"http://aturon.github.io/2018/04/05/sound-specialization/\" target=\"_blank\" title=\"http://aturon.github.io/2018/04/05/sound-specialization/\">the \"sound and ergonomic specialization\" blog post</a> is to a real proposal?</p>",
        "id": 159187540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866713
    },
    {
        "content": "<p>I need to re-read, clearly</p>",
        "id": 159187541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> i think it's pretty close</p>",
        "id": 159187593,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550866768
    },
    {
        "content": "<p>i'm sure there's missing detail of course</p>",
        "id": 159187594,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550866776
    },
    {
        "content": "<p>but the overall idea is pretty clear</p>",
        "id": 159187604,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550866785
    },
    {
        "content": "<p>that's my memory</p>",
        "id": 159187690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550866838
    },
    {
        "content": "<p>ok, so I sort of sketched out what I see as the <a href=\"https://paper.dropbox.com/doc/Traits-Roadmap-sketch--AYEYyqaNyA~~NOuXZb2hCbyOAg-m6hucUslp7GihsY3SjNN2#:uid=647695856449492655165148&amp;h2=Specialization\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Traits-Roadmap-sketch--AYEYyqaNyA~~NOuXZb2hCbyOAg-m6hucUslp7GihsY3SjNN2#:uid=647695856449492655165148&amp;h2=Specialization\">next steps for specialization</a> -- it's an interesting case in that they are almost <em>entirely</em> on the chalk side right now</p>",
        "id": 159187928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550867050
    },
    {
        "content": "<p>yes, that was my impression also <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 159187999,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550867161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span> man, do you remember, a long time back we kind of walked through what was needed to implement GATs in rustc -- I don't recall where we took notes, though..maybe you do?</p>",
        "id": 159188320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550867403
    },
    {
        "content": "<p>Yes let me find them</p>",
        "id": 159188544,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1550867574
    },
    {
        "content": "<p>These notes are probably SUPER outdated</p>",
        "id": 159188547,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1550867579
    },
    {
        "content": "<p># 2018.03.02</p>\n<p>More refined list:</p>\n<ul>\n<li>[ ] Add some of the comments and other knowledge embedded in the commit to the source or rust-guide as appropriate<ul>\n<li>[ ] For example, this comment feels like it could just be added to the source.</li>\n</ul>\n</li>\n<li>[ ] Methods that convert a Projection into a TraitRef (example)<ul>\n<li>[ ] Suspicious method, investigate callers</li>\n</ul>\n</li>\n<li>[ ] Some refactorings in astconv to plumb type parameters through where needed</li>\n<li>[ ] Creating test cases where we lack coverage:<ul>\n<li>[ ] “expected behavior” tests</li>\n<li>[ ] lifetime shadowing tests <code>trait Foo&lt;``'``a&gt; { type Item&lt;``'``a&gt;; &lt;-- illegal }</code></li>\n<li>[ ] tests for writing explicit <code>&lt;Vec&lt;T&gt; as Iterable&gt;::Iterator&lt;'a&gt;</code>-style types</li>\n<li>[ ] tests for <code>Vec&lt;T&gt;::Iterator&lt;``'``a&gt;</code> shorthand form<ul>\n<li>[ ] we may want to hold off on this, depending how easy/hard it is</li>\n</ul>\n</li>\n<li>[ ] tests for type aliases</li>\n</ul>\n</li>\n<li>[ ] Extend parser to support additional forms of GATs that are commented in tests (<a href=\"https://github.com/rust-lang/rust/pull/45904/files#diff-200db0b66e9d122b7a925e84dd6d44afR33\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/45904/files#diff-200db0b66e9d122b7a925e84dd6d44afR33\">https://github.com/rust-lang/rust/pull/45904/files#diff-200db0b66e9d122b7a925e84dd6d44afR33</a>)</li>\n</ul>\n<p>To do list copied from gitter:</p>\n<p>Here's what I have on my personal to-do list for GATs:</p>\n<p>1. Implement type checking things from call with Niko<br>\n  - <a href=\"https://github.com/sunjay/rust/commit/2098edd0a2b9b2ffbb55d56bb5e31ca8d0576410\" target=\"_blank\" title=\"https://github.com/sunjay/rust/commit/2098edd0a2b9b2ffbb55d56bb5e31ca8d0576410\">https://github.com/sunjay/rust/commit/2098edd0a2b9b2ffbb55d56bb5e31ca8d0576410</a><br>\n2. Check if lifetime shadowing should be supported and if so, make sure it is. Either way, add a test case.<br>\n    trait Foo&lt;'a&gt; {<br>\n        type Item&lt;'a&gt;;<br>\n        // Self::Item&lt;'a&gt; refers to the 'a defined below, not the 'a in Foo<br>\n        type Item2&lt;'a&gt;: Iterator&lt;Item = Self::Item&lt;'a&gt;&gt;;<br>\n    }<br>\n3. Add parsing for additional forms of GATs (e.g. in trait bounds) -- see commented out portions in tests<br>\n4. Make sure turbofish/universal function call syntax works with GATs</p>",
        "id": 159188660,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1550867665
    },
    {
        "content": "<p>From almost a year ago!</p>",
        "id": 159188667,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1550867674
    },
    {
        "content": "<p>Those are the last notes we made when we had that call and I handed off the work</p>",
        "id": 159188683,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1550867685
    },
    {
        "content": "<p>I'm not sure what happened after that</p>",
        "id": 159188687,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1550867691
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> knows?</p>",
        "id": 159188689,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1550867694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117350\">@Sunjay Varma</span> where did those notes come from? :)</p>",
        "id": 159188926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550867887
    },
    {
        "content": "<p>I sort of remember writing them together</p>",
        "id": 159188932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550867897
    },
    {
        "content": "<p>anyway, that's pretty helpful</p>",
        "id": 159188941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550867917
    },
    {
        "content": "<p>From our sunjay-nmatsakis document</p>",
        "id": 159188949,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1550867925
    },
    {
        "content": "<p>Very bottom</p>",
        "id": 159188955,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1550867928
    },
    {
        "content": "<p>ah, awesome</p>",
        "id": 159188982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550867945
    },
    {
        "content": "<p>(thank goodness we kept all those notes lol)</p>",
        "id": 159188992,
        "sender_full_name": "Sunjay Varma",
        "timestamp": 1550867962
    },
    {
        "content": "<p>:)</p>",
        "id": 159188998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550867970
    },
    {
        "content": "<p>notes ftw</p>",
        "id": 159189001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550867972
    },
    {
        "content": "<p>I just realized that although I removed myself from highfive</p>",
        "id": 159189006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550867980
    },
    {
        "content": "<p>I have not been keeping up with my reviewing</p>",
        "id": 159189010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550867983
    },
    {
        "content": "<p>that is, the existing assignments I had</p>",
        "id": 159189012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550867988
    },
    {
        "content": "<p>sigh</p>",
        "id": 159189013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550867988
    },
    {
        "content": "<p>I will do better next wek</p>",
        "id": 159189017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550867994
    },
    {
        "content": "<p>but in particular, in there, there <em>was</em> a PR IIRC for one of these trait working group items</p>",
        "id": 159189068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> I may change the reviewer on that PR to you...</p>",
        "id": 159189075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868015
    },
    {
        "content": "<p>I...think I misremembered. I was thinking of <a href=\"https://github.com/rust-lang/rust/pull/57545\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57545\">https://github.com/rust-lang/rust/pull/57545</a></p>",
        "id": 159189356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> y'all put \"Inherent associated types\" as \"implementation\" side -- do we have an RFC on this topic?</p>",
        "id": 159190142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868965
    },
    {
        "content": "<p>was that part of the original associated items RFC even? I can't recall</p>",
        "id": 159190151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550868975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yep; blocked on lazy norm?</p>",
        "id": 159190188,
        "sender_full_name": "centril",
        "timestamp": 1550869019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> probably, feels like it'd be better to start there, as inherent associated items are not super high priority or anything</p>",
        "id": 159190359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550869139
    },
    {
        "content": "<p>now I have to check, did you all put the whole type alias work on this list...</p>",
        "id": 159190378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550869152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> i.e. \"fixing the bugs\" we wanted to fix for 2018?</p>",
        "id": 159190393,
        "sender_full_name": "centril",
        "timestamp": 1550869170
    },
    {
        "content": "<p>yeah, and transitioning the impl to one based on lazy norm</p>",
        "id": 159190414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550869186
    },
    {
        "content": "<p>at least those are the two sides of the coin for me</p>",
        "id": 159190430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550869193
    },
    {
        "content": "<p>no, I omitted those</p>",
        "id": 159190457,
        "sender_full_name": "centril",
        "timestamp": 1550869204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  chalk + lazy norm seem to be the general unblocker for an assortment of language features and fixes</p>",
        "id": 159190868,
        "sender_full_name": "centril",
        "timestamp": 1550869541
    },
    {
        "content": "<p>(type aliases, inherent associated types, generic closures, GATs, ...)</p>",
        "id": 159190924,
        "sender_full_name": "centril",
        "timestamp": 1550869568
    },
    {
        "content": "<p>well, I think GATs at least can be done another way</p>",
        "id": 159191575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550870109
    },
    {
        "content": "<p>but definitely it would be helpful</p>",
        "id": 159191586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550870116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I saw you wrote this in the paper: \"we should weaken these to only work inside a crate to begin with so that we don’t have problems with GADTs\"</p>",
        "id": 159191885,
        "sender_full_name": "scalexm",
        "timestamp": 1550870369
    },
    {
        "content": "<p>could you elaborate?</p>",
        "id": 159191894,
        "sender_full_name": "scalexm",
        "timestamp": 1550870374
    },
    {
        "content": "<p>I think you already did some time ago but I cannot remember :)</p>",
        "id": 159191907,
        "sender_full_name": "scalexm",
        "timestamp": 1550870385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>  on the problems?</p>",
        "id": 159191909,
        "sender_full_name": "centril",
        "timestamp": 1550870386
    },
    {
        "content": "<p>yes</p>",
        "id": 159191913,
        "sender_full_name": "scalexm",
        "timestamp": 1550870389
    },
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Baz</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Quux</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>if we have implied bounds that work cross-crate, then this cannot be later changed to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Baz</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Quux</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159192042,
        "sender_full_name": "centril",
        "timestamp": 1550870463
    },
    {
        "content": "<p>ok but the same is true for, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Baz</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Quux</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159192087,
        "sender_full_name": "scalexm",
        "timestamp": 1550870505
    },
    {
        "content": "<p>I know <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 159192091,
        "sender_full_name": "centril",
        "timestamp": 1550870513
    },
    {
        "content": "<p>but yes I see the problem</p>",
        "id": 159192133,
        "sender_full_name": "scalexm",
        "timestamp": 1550870523
    },
    {
        "content": "<p>The lifetime thing is even worse, because we have lifetime elision and accept:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Baz</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Quux</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but ideally we would really want this to mean:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Baz</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Quux</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and not:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Baz</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Quux</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159192359,
        "sender_full_name": "centril",
        "timestamp": 1550870672
    },
    {
        "content": "<p>I don't know that this is true</p>",
        "id": 159192398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550870707
    },
    {
        "content": "<p>You might want that, but you might want (e.g.) the freedom to change between variants</p>",
        "id": 159192431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550870731
    },
    {
        "content": "<p>( I'm mostly just saying, it's pretty complex )</p>",
        "id": 159192461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550870757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  not having cross-crate retains the freedom <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 159192558,
        "sender_full_name": "centril",
        "timestamp": 1550870820
    },
    {
        "content": "<p>This reminds me -- on a separate note -- we were thinking at some point about trying to revisit things like <code>AsRef</code></p>",
        "id": 159192633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550870878
    },
    {
        "content": "<p>likely targeting the next edition, as it would likely be a backwards incompatible change</p>",
        "id": 159192687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550870893
    },
    {
        "content": "<p>basically giving a way for traits etc to \"opt out\" of fragile inference</p>",
        "id": 159192699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550870905
    },
    {
        "content": "<p>more problematic is perhaps that you now need logic to avoid inferring <code>where T: 'a</code> on <code>enum Foo&lt;'a, T&gt;</code></p>",
        "id": 159192700,
        "sender_full_name": "centril",
        "timestamp": 1550870905
    },
    {
        "content": "<p>(if we had such a mechanism, it might be applicable here too)</p>",
        "id": 159192730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550870927
    },
    {
        "content": "<p>that feels like something that should be on a list</p>",
        "id": 159192741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550870936
    },
    {
        "content": "<p>(avoiding to infer when <code>Quux(&amp;'a T) where T: 'a</code> is written explicitly)</p>",
        "id": 159192783,
        "sender_full_name": "centril",
        "timestamp": 1550870971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  say more re. opt out?</p>",
        "id": 159192796,
        "sender_full_name": "centril",
        "timestamp": 1550870989
    },
    {
        "content": "<p>sketch?</p>",
        "id": 159192801,
        "sender_full_name": "centril",
        "timestamp": 1550870998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I had imagined some form of attribute on a trait that basically instructs us not to pick an impl unless the input types are fully known (to some extent)</p>",
        "id": 159193185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550871262
    },
    {
        "content": "<p>ok hmm; I'll need more than that... ;) e.g. a snippet or something</p>",
        "id": 159193228,
        "sender_full_name": "centril",
        "timestamp": 1550871314
    },
    {
        "content": "<p>with \"problem to solve\", \"here's how we solved it\", and \"why the solution worked\"</p>",
        "id": 159193256,
        "sender_full_name": "centril",
        "timestamp": 1550871345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> here's some elaboration:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// this is the only AsRef impl for `Foo`</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// this will *infer* that bar: Bar because it&#39;s the only impl.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The inference here is brittle because if any additional <code>AsRef</code> impls are added for <code>Foo</code>, inference will stop working</p>",
        "id": 159194047,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550872001
    },
    {
        "content": "<p>we hit this in <code>std</code> a lot, where adding \"innocent\" conversion impls ends up breaking people's code that was relying on the inference</p>",
        "id": 159194072,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550872022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> oh yes; it seems to me that we'd want some sort of \"don't assume it's the only impl\" attribute</p>",
        "id": 159194111,
        "sender_full_name": "centril",
        "timestamp": 1550872050
    },
    {
        "content": "<p>(don't assume even if it is)</p>",
        "id": 159194122,
        "sender_full_name": "centril",
        "timestamp": 1550872059
    },
    {
        "content": "<p>what <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is proposing is something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"cp\">#[do_not_infer]</span><span class=\"w\"> </span><span class=\"n\">Out</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159194127,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550872062
    },
    {
        "content": "<p>yep, sorry <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>, got pulled off to look at some beta backport things :)</p>",
        "id": 159194345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550872220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> well, at least we have the syntactic support ready due to <code>#[may_dangle]</code> :D</p>",
        "id": 159194399,
        "sender_full_name": "centril",
        "timestamp": 1550872294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> so... let's see if I understand this... <code>#[no_infer] Bar</code> means that when we have a unification var <code>?T</code>, the inferencer will avoid equating <code>?T = MyBar</code> due to constraints such as \"only impl\" and require that e.g. <code>let bar: &amp;MyBar = foo.as_ref();</code> or <code>&lt;_ as AsRef&lt;MyBar&gt;&gt;::as_ref(&amp;foo)</code> be written explicitly?</p>",
        "id": 159194721,
        "sender_full_name": "centril",
        "timestamp": 1550872583
    },
    {
        "content": "<p>in a sense, <code>#[dont_infer]</code> is intentionally dumbing down the inferencer?</p>",
        "id": 159194738,
        "sender_full_name": "centril",
        "timestamp": 1550872609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> yep!</p>",
        "id": 159194746,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550872616
    },
    {
        "content": "<p>when we first introduced type parameters to traits, we didn't intend for them to be inferred in this \"clever\" way, but it turned out to be pretty essential</p>",
        "id": 159194770,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550872645
    },
    {
        "content": "<p>IIRC <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> wrote about this at length <a href=\"http://smallcultfollowing.com/babysteps/blog/2014/09/30/multi-and-conditional-dispatch-in-traits/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2014/09/30/multi-and-conditional-dispatch-in-traits/\">here</a></p>",
        "id": 159194787,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550872676
    },
    {
        "content": "<p>This makes me wonder whether Haskell will infer <code>Bar</code> or not given MPTCs and a single instance</p>",
        "id": 159194836,
        "sender_full_name": "centril",
        "timestamp": 1550872692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">{-# LANGUAGE MultiParamTypeClasses #-}</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Foo</span> <span class=\"ow\">=</span> <span class=\"kt\">Foo</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Bar</span> <span class=\"ow\">=</span> <span class=\"kt\">Bar</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Ref</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Ref</span> <span class=\"n\">a</span> <span class=\"c1\">-- Let&#39;s pretend...</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">AsRef</span> <span class=\"n\">self</span> <span class=\"n\">to</span> <span class=\"kr\">where</span> <span class=\"n\">asRef</span> <span class=\"ow\">::</span> <span class=\"kt\">Ref</span> <span class=\"n\">self</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Ref</span> <span class=\"n\">to</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">AsRef</span> <span class=\"kt\">Foo</span> <span class=\"kt\">Bar</span> <span class=\"kr\">where</span> <span class=\"n\">asRef</span> <span class=\"ow\">=</span> <span class=\"n\">undefined</span>\n\n<span class=\"nf\">foo</span> <span class=\"ow\">::</span> <span class=\"kt\">Foo</span>\n<span class=\"nf\">foo</span> <span class=\"ow\">=</span> <span class=\"kt\">Foo</span><span class=\"p\">;</span>\n\n<span class=\"nf\">refFoo</span> <span class=\"ow\">::</span> <span class=\"kt\">Ref</span> <span class=\"kt\">Foo</span>\n<span class=\"nf\">refFoo</span> <span class=\"ow\">=</span> <span class=\"kt\">Ref</span> <span class=\"n\">foo</span>\n\n<span class=\"nf\">refBar</span> <span class=\"ow\">=</span> <span class=\"n\">asRef</span> <span class=\"n\">refFoo</span>\n\n<span class=\"cm\">{-</span>\n<span class=\"cm\">main.hs:17:10: error:</span>\n<span class=\"cm\">    • Ambiguous type variable ‘to0’ arising from a use of ‘asRef’</span>\n<span class=\"cm\">      prevents the constraint ‘(AsRef Foo to0)’ from being solved.</span>\n<span class=\"cm\">      Relevant bindings include refBar :: Ref to0 (bound at main.hs:17:1)</span>\n<span class=\"cm\">      Probable fix: use a type annotation to specify what ‘to0’ should be.</span>\n<span class=\"cm\">      These potential instance exist:</span>\n<span class=\"cm\">        instance AsRef Foo Bar -- Defined at main.hs:9:10</span>\n<span class=\"cm\">    • In the expression: asRef refFoo</span>\n<span class=\"cm\">      In an equation for ‘refBar’: refBar = asRef refFoo</span>\n<span class=\"cm\">   |</span>\n<span class=\"cm\">17 | refBar = asRef refFoo</span>\n<span class=\"cm\">   |          ^^^^^^^^^^^^</span>\n<span class=\"cm\">-}</span>\n</pre></div>",
        "id": 159195385,
        "sender_full_name": "centril",
        "timestamp": 1550873157
    },
    {
        "content": "<p>hah!</p>",
        "id": 159195581,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550873285
    },
    {
        "content": "<p>NB i've regularly abused our stronger inference to work around limitations</p>",
        "id": 159195614,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550873314
    },
    {
        "content": "<p>e.g. you can fake \"mutually exclusive traits\" that way</p>",
        "id": 159195628,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550873331
    },
    {
        "content": "<p>(MPTCs are not that frequently used in Haskell I think... when they are, it's combined with fundeps which practically equal to associated type families, e.g. for monad transformers and such)</p>",
        "id": 159195777,
        "sender_full_name": "centril",
        "timestamp": 1550873442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>  <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> wrote down the AsRef stuff in the paper doc</p>",
        "id": 159196462,
        "sender_full_name": "centril",
        "timestamp": 1550874033
    },
    {
        "content": "<p>So I was thinking</p>",
        "id": 159196528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550874117
    },
    {
        "content": "<p>we have our normal meeting scheduled on Monday</p>",
        "id": 159196582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550874133
    },
    {
        "content": "<p>basically I was thinking it would be pretty valuable to try and go furthre with this roadmap and try to turn it into something more concrete</p>",
        "id": 159196604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550874166
    },
    {
        "content": "<p>maybe extend the meeting to 1hr</p>",
        "id": 159196617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550874185
    },
    {
        "content": "<p>I would say maybe use Zoom for more bandwidth, but I think many folks prefer Zulip, not sure about that part. With enough prep I think a Zulip meeting can do really well for these sorts of things but sometimes I also find it hard, because it's hard to keep the doc + the chat kind of both visible at once</p>",
        "id": 159196645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550874226
    },
    {
        "content": "<p>anyway, I'm prob going to stop for now but I feel like I'm <em>starting</em> to see a picture here --</p>",
        "id": 159196702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550874248
    },
    {
        "content": "<p>could also try to do a kind of \"pre-call\" to work some of this stuff out (maybe in our regular slot, <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span>?)</p>",
        "id": 159196757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550874304
    },
    {
        "content": "<blockquote>\n<p>basically I was thinking it would be pretty valuable to try and go furthre with this roadmap and try to turn it into something more concrete</p>\n</blockquote>\n<p>strong <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> -- however, if we go with the monday meeting, we should be sure to ping additional stakeholders (e.g. the lang team)</p>",
        "id": 159196768,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550874316
    },
    {
        "content": "<p>that is, we had been thinking about making a WG-lang-traits group; that's getting folded into this one but we need to make sure to contact everybody</p>",
        "id": 159196786,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550874339
    },
    {
        "content": "<p>yeah. This is the time when I'm annoyed about the discord-zulip split :)</p>",
        "id": 159196802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550874356
    },
    {
        "content": "<blockquote>\n<p>could also try to do a kind of \"pre-call\" to work some of this stuff out (maybe in our regular slot, <span class=\"user-mention silent\" data-user-id=\"116010\">@Aaron Turon</span>?)</p>\n</blockquote>\n<p>yep, that was pretty much what we were planning (on a more individual level) anyway</p>",
        "id": 159196804,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550874358
    },
    {
        "content": "<p>Right</p>",
        "id": 159196849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550874366
    },
    {
        "content": "<p>I could just go ahead and throw that on the calendar with a zoom meeting</p>",
        "id": 159196863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550874381
    },
    {
        "content": "<p>I'm trying to decide how much homework I want to do</p>",
        "id": 159196890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550874408
    },
    {
        "content": "<p>hah</p>",
        "id": 159196895,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550874412
    },
    {
        "content": "<p>I feel like I need to do at leats some :)</p>",
        "id": 159196900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550874414
    },
    {
        "content": "<p>Anyway, I'll create the event, we can ping lang team about it</p>",
        "id": 159196926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550874435
    },
    {
        "content": "<p>i'm definitely game to help organize, since ultimately we want to grow me into helping lead this group</p>",
        "id": 159196930,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1550874440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  is <a href=\"https://github.com/nikomatsakis/fields-in-traits-rfc/blob/master/0000-fields-in-traits.md\" target=\"_blank\" title=\"https://github.com/nikomatsakis/fields-in-traits-rfc/blob/master/0000-fields-in-traits.md\">https://github.com/nikomatsakis/fields-in-traits-rfc/blob/master/0000-fields-in-traits.md</a> the last work on FITs?</p>",
        "id": 159197875,
        "sender_full_name": "centril",
        "timestamp": 1550875263
    },
    {
        "content": "<p>Yes basically, at least the last bit that's been written down :)</p>",
        "id": 159197918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550875319
    },
    {
        "content": "<p>I feel like my thoughts have shifted some since I wrote it but I've not really revisited</p>",
        "id": 159197973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550875334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  probably intersects with ideas in <a href=\"https://github.com/rust-lang/rfcs/issues/1215\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/issues/1215\">https://github.com/rust-lang/rfcs/issues/1215</a></p>",
        "id": 159198282,
        "sender_full_name": "centril",
        "timestamp": 1550875670
    }
]