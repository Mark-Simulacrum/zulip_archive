[
    {
        "content": "<p>I have the following snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Node</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nc\">CollectionFactory</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">children</span>: <span class=\"nc\">C</span>::<span class=\"n\">Collection</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">CollectionFactory</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Collection</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">CollectionFactory</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Collection</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Collection</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"nc\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Collection</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Node</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">children</span>: <span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232282550,
        "sender_full_name": "lcnr",
        "timestamp": 1617030114
    },
    {
        "content": "<p>this currently fails to compile with the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0275]: overflow evaluating the requirement `Node&lt;Vec&lt;()&gt;&gt;: Sized`\n</code></pre></div>",
        "id": 232282681,
        "sender_full_name": "lcnr",
        "timestamp": 1617030156
    },
    {
        "content": "<p>this happens because we have the following cycle:</p>",
        "id": 232282823,
        "sender_full_name": "lcnr",
        "timestamp": 1617030199
    },
    {
        "content": "<ul>\n<li><code>Vec&lt;Node&lt;Vec&lt;()&gt;&gt;&gt;</code> require <code>Node&lt;Vec&lt;()&gt;&gt;</code> to be <code>Sized</code></li>\n</ul>",
        "id": 232282883,
        "sender_full_name": "lcnr",
        "timestamp": 1617030225
    },
    {
        "content": "<ul>\n<li>that requires <code>&lt;Vec&lt;()&gt; as CollectionFactory&lt;Node&lt;Vec&lt;()&gt;&gt;&gt;&gt;::Collection</code> to be <code>Sized</code></li>\n</ul>",
        "id": 232283010,
        "sender_full_name": "lcnr",
        "timestamp": 1617030260
    },
    {
        "content": "<ul>\n<li>which is <code>Vec&lt;Node&lt;Vec&lt;()&gt;&gt;&gt;</code></li>\n</ul>",
        "id": 232283060,
        "sender_full_name": "lcnr",
        "timestamp": 1617030282
    },
    {
        "content": "<p>now, I think that if <code>Sized</code> were an auto trait, this would compile because of coinduction</p>",
        "id": 232283144,
        "sender_full_name": "lcnr",
        "timestamp": 1617030316
    },
    {
        "content": "<p>which leads me to ask, why is <code>Sized</code> not an auto trait?</p>",
        "id": 232283194,
        "sender_full_name": "lcnr",
        "timestamp": 1617030334
    },
    {
        "content": "<p>I can't easily think of why this might cause stuff to break, ignoring maybe the interaction with <code>PhantomData&lt;UnsizedType&gt;</code></p>",
        "id": 232283413,
        "sender_full_name": "lcnr",
        "timestamp": 1617030429
    },
    {
        "content": "<p>just changing <code>Sized</code> to an auto trait causes <code>str</code> to be sized</p>",
        "id": 232285596,
        "sender_full_name": "lcnr",
        "timestamp": 1617031154
    },
    {
        "content": "<p>so let's instead only change <code>fn coinductive_predicate</code></p>",
        "id": 232286081,
        "sender_full_name": "lcnr",
        "timestamp": 1617031331
    },
    {
        "content": "<p>that seems to work <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 232286931,
        "sender_full_name": "lcnr",
        "timestamp": 1617031701
    },
    {
        "content": "<p>now, is this (1) sound and (2) desired?</p>",
        "id": 232286961,
        "sender_full_name": "lcnr",
        "timestamp": 1617031717
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/83647\">#83647</a></p>",
        "id": 232288288,
        "sender_full_name": "lcnr",
        "timestamp": 1617032241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you have a few minutes, want to explain to me why that PR is unsound? ^^</p>",
        "id": 232288497,
        "sender_full_name": "lcnr",
        "timestamp": 1617032311
    },
    {
        "content": "<p>I can't immediately think of why <code>Sized</code> isn't an auto trait</p>",
        "id": 232292471,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617033838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Sized.20is.20not.20an.20autotrait/near/232285596\">said</a>:</p>\n<blockquote>\n<p>just changing <code>Sized</code> to an auto trait causes <code>str</code> to be sized</p>\n</blockquote>\n<p>This confuses me though</p>",
        "id": 232292564,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617033858
    },
    {
        "content": "<p>If <code>Sized</code> determination is not coinductive, then why does this work?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">T</span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">assert_sized</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">assert_sized</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Since <code>T: Sized</code> requires <code>Vec&lt;T&gt;: Sized</code> which requires <code>T: Sized</code></p>",
        "id": 232295052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617034963
    },
    {
        "content": "<p>That's a lot of <code>T</code>s</p>",
        "id": 232297001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617035840
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>struct Foo&lt;X&gt;(Vec&lt;X&gt;);\nfn assert_sized&lt;T: Sized&gt;() {}\nfn foo() { assert_sized::&lt;Foo&gt;() }\n</code></pre></div>",
        "id": 232297049,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617035867
    },
    {
        "content": "<p>But <code>Vec</code> is always <code>Sized</code>, right?</p>",
        "id": 232297210,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617035936
    },
    {
        "content": "<p>That doesn't really require coinduction anyways</p>",
        "id": 232297280,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617035973
    },
    {
        "content": "<p>Coinduction occurs essentially when you get a cycle</p>",
        "id": 232297388,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617036009
    },
    {
        "content": "<p>And the logic of the cycle boils down to \"This is true if it is true\"</p>",
        "id": 232297420,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617036030
    },
    {
        "content": "<p>In <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>'s example <code>Vec&lt;Node&lt;Vec&lt;()&gt;&gt;&gt;</code> requires <code>Node&lt;Vec&lt;()&gt;&gt;</code> which requires <code>Vec&lt;Node&lt;Vec&lt;()&gt;&gt;&gt;</code></p>",
        "id": 232297542,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617036105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span>'s example uses <code>Foo(Vec&lt;Foo&gt;)</code></p>",
        "id": 232297876,
        "sender_full_name": "lcnr",
        "timestamp": 1617036253
    },
    {
        "content": "<p>Oh, I see</p>",
        "id": 232298014,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617036314
    },
    {
        "content": "<p>which afaict just works because of the way we implemented <code>adt_sized_constraints</code></p>",
        "id": 232298026,
        "sender_full_name": "lcnr",
        "timestamp": 1617036317
    },
    {
        "content": "<p>The <code>T</code> in <code>struct T</code> is the type, not a typo missing param</p>",
        "id": 232298082,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617036340
    },
    {
        "content": "<p>It might just be that <code>T</code> isn't constructed</p>",
        "id": 232298118,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617036360
    },
    {
        "content": "<p>Hmm</p>",
        "id": 232298281,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617036422
    },
    {
        "content": "<p>nvm I see</p>",
        "id": 232298335,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617036444
    },
    {
        "content": "<p>because we skip params if they are bound by a predicate (maybe, kinda distracted rn)</p>",
        "id": 232298400,
        "sender_full_name": "lcnr",
        "timestamp": 1617036469
    },
    {
        "content": "<p>I think it's just because <code>Vec</code> is sized regardless of <code>T</code></p>",
        "id": 232298404,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617036472
    },
    {
        "content": "<p>In <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>'s example, <code>Node&lt;C&gt;</code> is only <code>Sized</code> if <code>C::Collection</code> is <code>Sized</code></p>",
        "id": 232298557,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617036522
    },
    {
        "content": "<p>but <code>Vec</code> is always <code>Sized</code>, because it's last field is <code>usize</code></p>",
        "id": 232298591,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617036538
    },
    {
        "content": "<p>There's no cycle</p>",
        "id": 232298646,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617036556
    },
    {
        "content": "<p>whoops sorry about the naming confusion</p>",
        "id": 232300061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617037118
    },
    {
        "content": "<blockquote>\n<p>I think it's just because Vec is sized regardless of T</p>\n</blockquote>\n<p>I'm not sure exactly how this is handled, but given that const-eval has been using <code>[(); N]: Sized</code> as a stand-in for <code>WF(N)</code>, I think it is safe to say that <code>T: Sized</code> requires <code>WF(T)</code>. <code>Vec&lt;T&gt;: Sized</code> does not directly require <code>T: Sized</code> but <code>WF(Vec&lt;T&gt;)</code> requires <code>T: Sized</code></p>",
        "id": 232300469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617037254
    },
    {
        "content": "<p>It does not</p>",
        "id": 232301065,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617037469
    },
    {
        "content": "<p>Err</p>",
        "id": 232301096,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617037481
    },
    {
        "content": "<p>Well, it might</p>",
        "id": 232301112,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617037486
    },
    {
        "content": "<p>I don't think so, actually</p>",
        "id": 232301356,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617037574
    },
    {
        "content": "<p>But I don't think it matters here</p>",
        "id": 232301438,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617037608
    },
    {
        "content": "<p>I don't really have the time atm to think about this; busy at work</p>",
        "id": 232301786,
        "sender_full_name": "Jack Huey",
        "timestamp": 1617037755
    },
    {
        "content": "<p>One reason why it would make sense that <code>Sized</code> should be inductive, not coinductive, is that unlike things like <code>Send</code> that describe <em>a bad situation that should be avoided</em>, <code>Sized</code> describes <em>a property that must be derived</em>, namely the result of <code>sizeof</code>. The evaluation of <code>sizeof(T)</code> has to come to some expression that doesn't depend on <code>sizeof(T)</code>, so cycles aren't actually okay</p>",
        "id": 232307083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617039801
    },
    {
        "content": "<p>However, I think you are correct to hedge on the question of whether <code>Vec&lt;T&gt;: Sized</code> requires <code>T: Sized</code>, because <code>sizeof(Vec&lt;T&gt;)</code> doesn't depend on <code>sizeof(T)</code>. Somehow this is a weaker link in the chain, that makes this apparently circular definition work out</p>",
        "id": 232307347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617039883
    }
]