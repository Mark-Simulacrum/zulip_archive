[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any more ideas about fixing <code>impl Trait</code> in bindings before I get going on it?</p>",
        "id": 147262561,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541631105
    },
    {
        "content": "<p>based off your previous advice</p>",
        "id": 147262565,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541631109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> Hmm. How do I get the predicates for an impl Trait <code>ty::Ty</code> during type checking? (the <code>TyKind</code> contains a <code>DefId</code> and <code>Substs</code>, but now sure how that helps directly.) <code>predicate_for_trait_def</code> seems <em>almost</em> right, but I guess that only works if the <code>DefId</code> passed in is for a trait, not an impl Trait type?</p>",
        "id": 147274028,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541646259
    },
    {
        "content": "<p>also, the coercion routine <code>coerce_unsized</code> is slightly confusing me... is the aim to create the most granular obligations possible? and is this needed for my corresponding approach for coercing to opaque types?</p>",
        "id": 147274506,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541647102
    },
    {
        "content": "<p>I think if I figure this out, I can continue making good progress.</p>",
        "id": 147274512,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541647116
    },
    {
        "content": "<p>already made some.</p>",
        "id": 147274514,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541647118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I'm not sure to understand what you're asking for</p>",
        "id": 147290341,
        "sender_full_name": "scalexm",
        "timestamp": 1541673119
    },
    {
        "content": "<p>if you want the list of generic predicates on the <code>impl Trait</code> type, you can just call <code>tcx.predicates_of(def_id)</code></p>",
        "id": 147290387,
        "sender_full_name": "scalexm",
        "timestamp": 1541673145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> sure, but that doesn’t take into account the Substs no?</p>",
        "id": 147312340,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541695580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> you can do <code>tcx.predicates_of(def_id).instantiate(substs)</code> or something</p>",
        "id": 147312354,
        "sender_full_name": "scalexm",
        "timestamp": 1541695609
    },
    {
        "content": "<p>and then if you want a <code>PredicateObligations</code> in the end you can use <code>traits::predicates_for_generics</code></p>",
        "id": 147312402,
        "sender_full_name": "scalexm",
        "timestamp": 1541695677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> aha, perfect. thank you.</p>",
        "id": 147314491,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541697449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> there's no recursive procedure involved here, like there is with <code>coerce_unsize</code>, right?</p>",
        "id": 147314607,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541697587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> mmh I don't know how <code>coerce_unsize</code> works</p>",
        "id": 147315268,
        "sender_full_name": "scalexm",
        "timestamp": 1541698208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> no worries. one final thing (for now!): what is <code>body_id</code> for an <code>Obligation</code> (some sort of context I guess?), and why is it only relevant if the predicate is a trait-ref?</p>",
        "id": 147315450,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541698391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around by chance?</p>",
        "id": 147315817,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541698766
    },
    {
        "content": "<p>I'm wondering what this LUB relationship checking is for</p>",
        "id": 147316226,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541699167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> according to the doc it is needed for regions checking but I don't know much more =)</p>",
        "id": 147316561,
        "sender_full_name": "scalexm",
        "timestamp": 1541699502
    },
    {
        "content": "<p>but if you work with opaque types, I guess this is just the <code>NodeId</code> of the function defining your opaque type</p>",
        "id": 147316623,
        "sender_full_name": "scalexm",
        "timestamp": 1541699529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> hmm... not where the opaque type is used?</p>",
        "id": 147316677,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541699613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  well I was guessing that by reading the code in <code>typeck_tables_of</code></p>",
        "id": 147317005,
        "sender_full_name": "scalexm",
        "timestamp": 1541699913
    },
    {
        "content": "<p>hmm</p>",
        "id": 147317761,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541700584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> incidentally, there's an <code>instantiate_bounds</code> fn too, which does something similar to what you said above, but takes a span (which I wouldn't know how to provide)</p>",
        "id": 147317834,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541700612
    },
    {
        "content": "<p>ah</p>",
        "id": 147317897,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541700704
    },
    {
        "content": "<p>maybe <code>self.cause.span</code></p>",
        "id": 147317899,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541700709
    },
    {
        "content": "<p>ugh, factoring out the reborrow code into its own function is creating all sorts of lifetime mayhem</p>",
        "id": 147322364,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541704953
    },
    {
        "content": "<p>I think it's an NLL thing</p>",
        "id": 147322657,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541705261
    },
    {
        "content": "<p>wish I could turn it on in the compiler :-P</p>",
        "id": 147322661,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541705266
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 147323305,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541705829
    },
    {
        "content": "<p>okay, making headway at last!</p>",
        "id": 147324867,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541707192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> do I still need to <code>instantiate_opaque_types_from_value</code> in <code>typeck_tables_of</code>? if not, I need to modify the type somewhere else.</p>",
        "id": 147325522,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541707749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I think niko might be able to produce an answer more easily, I'm not very familiar with this code :/</p>",
        "id": 147327153,
        "sender_full_name": "scalexm",
        "timestamp": 1541709075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> no worries</p>",
        "id": 147328876,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541710841
    },
    {
        "content": "<p>Hopefully he’ll be around later</p>",
        "id": 147328902,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541710862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in fact, <code>typeck_tables</code> isn't the only places; there are others. but the question remains: do I need to call <code>instantiate_opaque_types_from_value</code> for types of or within bindings, under this new approach?</p>",
        "id": 147343497,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541726286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it seems kind of incompatible with the coercion-based approach. but maybe I'm missing something?</p>",
        "id": 147343918,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541726884
    },
    {
        "content": "<p>if the coercion routine (<code>coerce_hidden</code>) itself calls <code>instantiate_opaque_types_from_value</code>, then it needs to know the parent fn ID, which is kind of awkward, and seems hacky. (and I don't even know what happens in the case the existential type is at the top level, i.e. no parent id.)</p>",
        "id": 147343999,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541727040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you can see my attempt so far at <a href=\"https://github.com/rust-lang/rust/pull/55807\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55807\">https://github.com/rust-lang/rust/pull/55807</a></p>",
        "id": 147346181,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541730715
    },
    {
        "content": "<p>Made some good progress now, by the way. Will push soon. :-)</p>",
        "id": 147441293,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541871267
    },
    {
        "content": "<p>Sorry if I was pinging you too much last week. I forgot you were at the conference once or twice, and are a busy man. My bad.</p>",
        "id": 147441298,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541871291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm going to go out for the day, so last chance to talk, FYI</p>",
        "id": 147619214,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542137601
    },
    {
        "content": "<p>otherwise just feel free to leave me notes ;-)</p>",
        "id": 147619438,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542137794
    },
    {
        "content": "<p>I could share the MIR with you now if you like though</p>",
        "id": 147619445,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542137803
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/zjpsIe8UlOW0jAVneXoxyiA5/mir_dump.zip\" target=\"_blank\" title=\"mir_dump.zip\">mir_dump.zip</a></p>",
        "id": 147620027,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542138408
    },
    {
        "content": "<p>there you go, in fact ^</p>",
        "id": 147620032,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542138411
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/AQCJg5EzV_EFrMT-TRxfnFyR/impllet_a.rs\" target=\"_blank\" title=\"impllet_a.rs\">impllet_a.rs</a>  -- the test file</p>",
        "id": 147620090,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542138475
    },
    {
        "content": "<p>codegen error output:</p>\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: librustc_codegen_llvm/mir/block.rs:753: codegen_argument: OperandRef(Immediate((i8**:  %4 = alloca i8*, align 8)) @ TyLayout { ty: &amp;dyn std::ops::Fn() -&gt; i32 + std::panic::RefUnwindSafe + std::marker::Sync, details: LayoutDetails { variants: Single { index: 0 }, fields: Arbitrary { offsets: [Size { raw: 0 }, Size { raw: 8 }], memory_index: [0, 1] }, abi: ScalarPair(Scalar { value: Pointer, valid_range: 1..=18446744073709551615 }, Scalar { value: Pointer, valid_range: 1..=18446744073709551615 }), align: Align { abi_pow2: 3, pref_pow2: 3 }, size: Size { raw: 16 } } }) invalid for pair argument\n\nthread &#39;main&#39; panicked at &#39;encountered error with `-Z treat_err_as_bug&#39;, librustc_errors/lib.rs:500:13\nstack backtrace:\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\n   1: std::sys_common::backtrace::print\n   2: std::panicking::default_hook::{{closure}}\n   3: std::panicking::default_hook\n   4: rustc::util::common::panic_hook\n   5: std::panicking::rust_panic_with_hook\n   6: std::panicking::begin_panic\n   7: rustc_errors::Handler::emit_db\n   8: rustc_errors::Handler::bug\n   9: rustc::util::bug::opt_span_bug_fmt::{{closure}}\n  10: rustc::ty::context::tls::with_opt::{{closure}}\n  11: rustc::ty::context::tls::with_context_opt\n  12: rustc::ty::context::tls::with_opt\n  13: rustc::util::bug::opt_span_bug_fmt\n  14: rustc::util::bug::bug_fmt\n  15: rustc_codegen_llvm::mir::block::&lt;impl rustc_codegen_llvm::mir::FunctionCx&lt;&#39;a, &#39;ll, &#39;tcx&gt;&gt;::codegen_argument\n  16: rustc_codegen_llvm::mir::block::&lt;impl rustc_codegen_llvm::mir::FunctionCx&lt;&#39;a, &#39;ll, &#39;tcx&gt;&gt;::codegen_terminator\n  17: rustc_codegen_llvm::mir::codegen_mir\n  18: rustc_codegen_llvm::base::codegen_instance\n  19: rustc_codegen_llvm::mono_item::MonoItemExt::define\n  20: rustc_codegen_llvm::base::compile_codegen_unit::module_codegen\n...\n</pre></div>",
        "id": 147620149,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542138493
    },
    {
        "content": "<p>bye for now!</p>",
        "id": 147620151,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542138495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> regarding your recent notes (thanks for those), was there any reason you suggested to use <code>instantiate_opaque_types</code> in the nll type checking part rather than regular type checking?</p>",
        "id": 147766317,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542309858
    },
    {
        "content": "<p>I thought it needed to be used <em>somewhere</em>, but not sure why there</p>",
        "id": 147766319,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542309862
    },
    {
        "content": "<p>Heh <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I'm not sure I'll have to re-review</p>",
        "id": 147990016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542657168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> no worries.</p>",
        "id": 147991142,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542658012
    },
    {
        "content": "<p>your existing advice is helpful... though I haven't turned my attention properly to that PR yet :-)</p>",
        "id": 147991166,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542658033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let me know when you get a chance to look at that one little point again...</p>",
        "id": 148184294,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542903455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it's literally just the thing about where to do the type instantiation for opaque types (in normal type checking or NLL)</p>",
        "id": 148237062,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542988567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I presume you didn't forget about the above...</p>",
        "id": 148824498,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543530072
    },
    {
        "content": "<p>ok circling back to this now :)</p>",
        "id": 148889002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543611617
    },
    {
        "content": "<p>sorry</p>",
        "id": 148889003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543611618
    },
    {
        "content": "<p>is the remaining question to be found in <a href=\"https://github.com/rust-lang/rust/pull/55807\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55807\">https://github.com/rust-lang/rust/pull/55807</a> ?</p>",
        "id": 148889034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543611648
    },
    {
        "content": "<p>Hi</p>",
        "id": 148891452,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543613977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> mainly about this comment <a href=\"https://github.com/rust-lang/rust/pull/55807#discussion_r233631877\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55807#discussion_r233631877\">https://github.com/rust-lang/rust/pull/55807#discussion_r233631877</a></p>",
        "id": 148891453,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543613983
    },
    {
        "content": "<p>and whether it would actually be better to do <code>instantiate_opaque_types</code> in normal type checking, rather than NLL type checking as you suggested?</p>",
        "id": 148891501,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543614006
    },
    {
        "content": "<p>also, I'm slightly struggling to see how opaque type instantiation and coercion fit together. maybe this relates to your last review comment.</p>",
        "id": 148891521,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543614036
    },
    {
        "content": "<blockquote>\n<p>and whether it would actually be better to do <code>instantiate_opaque_types</code> in normal type checking, rather than NLL type checking as you suggested?</p>\n</blockquote>\n<p>Ah. I think we're going to have to do it in <em>both</em> places probably, ultimately</p>",
        "id": 148892354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543614971
    },
    {
        "content": "<p>but let me re-read whatI wrote</p>",
        "id": 148892366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543615002
    },
    {
        "content": "<p>sure :-)</p>",
        "id": 148892483,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543615145
    },
    {
        "content": "<p>(I'm reading a bit into the way that <code>impl Trait</code> works now, it's changed as a result of <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span>'s excellent refactorings...)</p>",
        "id": 148893179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543615904
    },
    {
        "content": "<p>aha</p>",
        "id": 148893304,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543616018
    },
    {
        "content": "<p>how recently did it change? :-)</p>",
        "id": 148893314,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543616027
    },
    {
        "content": "<p>not <em>that</em> recently</p>",
        "id": 148893383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543616069
    },
    {
        "content": "<p>so when I say \"defining use\" does that mean anything to you? :)</p>",
        "id": 148893393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543616086
    },
    {
        "content": "<p>similarly, do you <a href=\"https://github.com/rust-lang/rust/blob/d09466ceb1374bd0ff1c490bfd50133b8ca67558/src/librustc/infer/opaque_types/mod.rs#L700-L717\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/d09466ceb1374bd0ff1c490bfd50133b8ca67558/src/librustc/infer/opaque_types/mod.rs#L700-L717\">grok what this code is trying to do</a>?</p>",
        "id": 148893440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543616121
    },
    {
        "content": "<p>e.g., the distinction between <a href=\"https://github.com/rust-lang/rust/blob/d09466ceb1374bd0ff1c490bfd50133b8ca67558/src/librustc/infer/opaque_types/mod.rs#L671-L680\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/d09466ceb1374bd0ff1c490bfd50133b8ca67558/src/librustc/infer/opaque_types/mod.rs#L671-L680\">these two different uses of the abtract type <code>Foo</code></a>?</p>",
        "id": 148893457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543616144
    },
    {
        "content": "<p>(trying to calibrate how much you've read into that code)</p>",
        "id": 148893779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543616491
    },
    {
        "content": "<p>intuitively, \"defining use\" makes sense, I think</p>",
        "id": 148893878,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543616602
    },
    {
        "content": "<p>let me see...</p>",
        "id": 148893881,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543616611
    },
    {
        "content": "<p>ah yes</p>",
        "id": 148893964,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543616750
    },
    {
        "content": "<p>so... I'm guessing we want to instantiate opaque types in the case of defining uses, but coerce in the other case?</p>",
        "id": 148894012,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543616771
    },
    {
        "content": "<p>^ <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 148894064,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543616879
    },
    {
        "content": "<p>Right. But here the \"defining use\" definition gets more complex than before; we used to only consider the <code>parent_def_id</code></p>",
        "id": 148894772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543617668
    },
    {
        "content": "<p>but we now want to be at the granularity of a specific let statement</p>",
        "id": 148894776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543617680
    },
    {
        "content": "<p>yeah, I was wondering about that... sounds like you're right.</p>",
        "id": 148894849,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543617742
    },
    {
        "content": "<p>we might want some kind of separate fn that says</p>",
        "id": 148894853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543617746
    },
    {
        "content": "<p>er</p>",
        "id": 148894867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543617768
    },
    {
        "content": "<p>we might want to refactor it sort of so that it is given a kind of \"context\"</p>",
        "id": 148894876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543617778
    },
    {
        "content": "<p>let statement or assignment could be the defining use now, right?</p>",
        "id": 148894877,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543617779
    },
    {
        "content": "<p>yes but</p>",
        "id": 148894903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543617814
    },
    {
        "content": "<p>hmm, how do you mean exactly?</p>",
        "id": 148894904,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543617816
    },
    {
        "content": "<p>sorry I'm getting interrupted here :)</p>",
        "id": 148894961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543617856
    },
    {
        "content": "<p>not being very clear</p>",
        "id": 148894962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543617858
    },
    {
        "content": "<p>I'm also not sure what I would do :P</p>",
        "id": 148894967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543617866
    },
    {
        "content": "<p>I can see a few ways of approaching it</p>",
        "id": 148894973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543617875
    },
    {
        "content": "<p>but in any case, what we want is that:</p>\n<p>when you have a <code>let</code>, we invoke <code>instantiate_opaque_types</code> on the type annotation. This is considered the 'defining use' for any <code>impl Trait</code> that appeared within that <code>let</code>, just as the \"return type\" is the \"defining use\" for <code>impl Trait</code> in <em>that</em> position</p>",
        "id": 148895004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543617931
    },
    {
        "content": "<p>other opaque types are left alone :)</p>",
        "id": 148895012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543617940
    },
    {
        "content": "<p>thinking more about it, I think we do not have to modify the <code>coercion.rs</code> code</p>",
        "id": 148895076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543617973
    },
    {
        "content": "<p>once we get the <code>instantiate_opaque_type</code> call correct, you will basically wind up with a set of types that (may) include inference variables</p>",
        "id": 148895089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543617990
    },
    {
        "content": "<p>these are what we coerce <em>to</em></p>",
        "id": 148895112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618005
    },
    {
        "content": "<p>then there is one <em>add'l</em> coercion atop that (maybe not treated as a \"adjustment\", maybe added in some other way, but I think it should appear in the MIR, where this context is gone) that \"casts\" to the opaque types</p>",
        "id": 148895139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618032
    },
    {
        "content": "<p>right</p>",
        "id": 148895148,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543618041
    },
    {
        "content": "<p>makes sense</p>",
        "id": 148895152,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543618043
    },
    {
        "content": "<p>but the code I wrote for coercion to opaque types more or less makes sense, I think... no?</p>",
        "id": 148895234,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543618107
    },
    {
        "content": "<p>that should stay?</p>",
        "id": 148895237,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543618112
    },
    {
        "content": "<p>I think you don't want it</p>",
        "id": 148895275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618169
    },
    {
        "content": "<p>or need it</p>",
        "id": 148895277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618171
    },
    {
        "content": "<p>let me go look again though</p>",
        "id": 148895295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618194
    },
    {
        "content": "<p>that was the code in <a href=\"http://coercion.rs\" target=\"_blank\" title=\"http://coercion.rs\">coercion.rs</a>?</p>",
        "id": 148895299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618197
    },
    {
        "content": "<p>we might want it somewhere else</p>",
        "id": 148895305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618200
    },
    {
        "content": "<p>well, I added a MIR \"hiding\" operation</p>",
        "id": 148895379,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543618250
    },
    {
        "content": "<p>this \"cast\" in the MIR I'm talking about; presumably it has the form of a kind of \"user-assert ty\". That is, it has to have the type that the user gave (with <code>impl Trait</code>) and it knows it is the defining use for those types (so it can invoke the <code>instantiate</code> again)</p>",
        "id": 148895380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618251
    },
    {
        "content": "<p>ok I see <em>that</em> code is probably basically right</p>",
        "id": 148895388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618262
    },
    {
        "content": "<p>though I've forgotten just how it looked</p>",
        "id": 148895396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> but the <code>coerce_hidden</code> code is probably what you'd remove, or what?</p>",
        "id": 148895412,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543618307
    },
    {
        "content": "<p>anyway I'm trying to understand why you're talking of <em>two</em> forms of coercion, and whether <code>coerce_hidden</code> corresponds to either.</p>",
        "id": 148895513,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543618439
    },
    {
        "content": "<p>incidentally, I guess we only call <code>instantiate_opaque_types</code> for locals if there is at least one opaque types somewhere within the local's type.</p>",
        "id": 148895598,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543618513
    },
    {
        "content": "<p>I don't really think we want a <em>coercion</em> per se</p>",
        "id": 148895656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618567
    },
    {
        "content": "<p>i.e., not the compiler code for cercions</p>",
        "id": 148895704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618657
    },
    {
        "content": "<p>but there is a type <em>conversion</em> that is happening</p>",
        "id": 148895706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618663
    },
    {
        "content": "<p>if you have:</p>\n<div class=\"codehilite\"><pre><span></span>let x: T = &lt;expr&gt;;\n</pre></div>\n\n\n<p>where <code>T</code> involves some <code>impl Trait</code></p>",
        "id": 148895716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618678
    },
    {
        "content": "<p>you wind up with two variants of <code>T</code>, one that has inference variables for <code>impl Trait</code>, and one that has opaque values</p>",
        "id": 148895768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618697
    },
    {
        "content": "<p>let's call them <code>T_infer</code> and T_opaque`</p>",
        "id": 148895777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618713
    },
    {
        "content": "<p>we want to coerce <code>typeof(&lt;expr&gt;)</code> to <code>T_infer</code></p>",
        "id": 148895788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618729
    },
    {
        "content": "<p>but use <code>T_opaque</code> as the type for the pattern <code>x</code></p>",
        "id": 148895792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618738
    },
    {
        "content": "<p>then we need in the HAIR/MIR to reflect that \"link\" somehow to</p>",
        "id": 148895815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618775
    },
    {
        "content": "<p>I think originally I did recommend modifying or at least looking at <code>coercion.rs</code>, but now I think that's  not quite right</p>",
        "id": 148895824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618794
    },
    {
        "content": "<p>where did I leave the original set of mentoring instructions, <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ?</p>",
        "id": 148895882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618817
    },
    {
        "content": "<p>(we had an issue for this?)</p>",
        "id": 148895887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> hmm, on the issue that eddyb filed I think?</p>",
        "id": 148896022,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543619013
    },
    {
        "content": "<p>or the subsequent quickfix PR you submitted?</p>",
        "id": 148896027,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543619026
    },
    {
        "content": "<p>I forget</p>",
        "id": 148896028,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543619028
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/54600\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54600\">https://github.com/rust-lang/rust/issues/54600</a></p>",
        "id": 148896313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543619341
    },
    {
        "content": "<p>I have to run now but now that I've refreshed my memory, i'll re-skim those and try to write some updated ones :)</p>",
        "id": 148896326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543619357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> found it: <a href=\"https://github.com/rust-lang/rust/issues/54600#issuecomment-433049875\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54600#issuecomment-433049875\">https://github.com/rust-lang/rust/issues/54600#issuecomment-433049875</a></p>",
        "id": 148896330,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543619361
    },
    {
        "content": "<p>hah</p>",
        "id": 148896335,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543619369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay, would appreciate that, thanks. if I get started in the meanwhile, how do you recommend I store both the instantiated and original opaque type side-by-side?</p>",
        "id": 148896429,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543619438
    },
    {
        "content": "<p>I think the key steps are going to be:</p>\n<ul>\n<li>in HIR typeck, when type-checking a let, we do the instantiation if the type of a <code>let</code> contains <code>impl trait</code></li>\n<li>during HAIR, if the type of a <code>let</code> contains <code>impl tRait</code>, we add a \"opacify\" node with that type or something</li>\n<li>during MIR construction, we convert to a user-type-assertion of some kind that knows it has to instantiate</li>\n</ul>\n<p>that's about it</p>",
        "id": 148896430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543619438
    },
    {
        "content": "<p>I don't know that you have to store them side-by-side per se</p>",
        "id": 148896444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543619458
    },
    {
        "content": "<p>usually in the writeback phase we record the type we inferred for impl trait</p>",
        "id": 148896454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543619466
    },
    {
        "content": "<p>so that we can reinstantiate it with that type</p>",
        "id": 148896456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543619472
    },
    {
        "content": "<p>that knows it has to instantiate...what?</p>",
        "id": 148896471,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543619489
    },
    {
        "content": "<p>right, I was wondering whether writeback handled it all...</p>",
        "id": 148896476,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543619496
    },
    {
        "content": "<p>fair enough</p>",
        "id": 148896477,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543619497
    },
    {
        "content": "<p>now... I don't think I need more from you on the impl-trait-in-bindings stuff. I'm only just getting back to working on that now that I've gotten these two PRs out of the way heh.</p>",
        "id": 151726261,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729507
    },
    {
        "content": "<p>ok :) I can't remember just where we left that</p>",
        "id": 151726344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729551
    },
    {
        "content": "<p>you've left me some good pointers. though I realise you haven't fully made up your mind on all points.</p>",
        "id": 151726346,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729551
    },
    {
        "content": "<p>yeah, I think I was busily revisiting some of what I had written initially iirc</p>",
        "id": 151726352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729562
    },
    {
        "content": "<p>some decisions will require experimentations I think</p>",
        "id": 151726354,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729564
    },
    {
        "content": "<p>yeah</p>",
        "id": 151726355,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729565
    },
    {
        "content": "<p>and you weren't quite sure on the nature of coercions needed?</p>",
        "id": 151726360,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729575
    },
    {
        "content": "<p>ok yes so basically I was saying: I don't think we want to do the \"coercion\" as part of <a href=\"http://coerce.rs\" target=\"_blank\" title=\"http://coerce.rs\">coerce.rs</a></p>",
        "id": 151726378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729599
    },
    {
        "content": "<p>and how distinction should be made between defining and non-defining uses</p>",
        "id": 151726380,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729599
    },
    {
        "content": "<p>in this more complex case</p>",
        "id": 151726388,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729609
    },
    {
        "content": "<p>(it may not be as simple as just a let statement... or will it?)</p>",
        "id": 151726399,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729619
    },
    {
        "content": "<p>mhm</p>",
        "id": 151726405,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729622
    },
    {
        "content": "<p>this is somewhat related actually to some of the stuff that we've been wrestling with in <a class=\"stream\" data-stream-id=\"122657\" href=\"/#narrow/stream/122657-wg-nll\">#wg-nll</a> about what precisely <code>let pat: T = ..</code> actually <em>means</em></p>",
        "id": 151726408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729635
    },
    {
        "content": "<p>in particular, is the type <code>T</code> a kind of supertype for the right-hand side... or is it specifying the type of the binding in pattern ... or both</p>",
        "id": 151726470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729676
    },
    {
        "content": "<p>e.g., <code>let _: T = ...</code> -- here, there is no binding in pattern, so it must be acting as a supertype for the right-hand side</p>",
        "id": 151726478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729691
    },
    {
        "content": "<p>aha</p>",
        "id": 151726498,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729711
    },
    {
        "content": "<p>but if you have <code>let x: &amp;'static u32 = ...</code>, would it be ok for the compiler to assign <code>x</code> a type like <code>&amp;'a u32</code>, since <code>&amp;'static u32 &lt;: &amp;'a u32</code>?</p>",
        "id": 151726502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729719
    },
    {
        "content": "<p>probably not, that's sort of surprising</p>",
        "id": 151726510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729726
    },
    {
        "content": "<p>anyway, it seems related to me, but maybe it won't come up that much</p>",
        "id": 151726533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729754
    },
    {
        "content": "<p>I guess mainly it seems like the \"defining use\" is the \"type(rhs) &lt;: T\" test</p>",
        "id": 151726591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729780
    },
    {
        "content": "<p>but the type that gets assigned to the bindings in <code>pat</code> uses the \"opaque types\"</p>",
        "id": 151726606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729795
    },
    {
        "content": "<p>so you can see the split again arising</p>",
        "id": 151726611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729800
    },
    {
        "content": "<p>well, the opposite sounds fine (i.e. promotion), in certain cases, but that... not so much</p>",
        "id": 151726614,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729801
    },
    {
        "content": "<p>okay, that seems sensible for a defining use condition</p>",
        "id": 151726662,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729849
    },
    {
        "content": "<p>so it's like a try-coerce or something, but done during type checking?</p>",
        "id": 151726677,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729864
    },
    {
        "content": "<p>let's make a new topic I guess</p>",
        "id": 151726789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729950
    },
    {
        "content": "<p>yeah</p>",
        "id": 151726791,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729953
    },
    {
        "content": "<p>I just thought that. :-P</p>",
        "id": 151726797,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729958
    },
    {
        "content": "<p>I'll edit these messages actually</p>",
        "id": 151726798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729958
    },
    {
        "content": "<p>#impl-trait-in-bindings already exists</p>",
        "id": 151726817,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729977
    },
    {
        "content": "<p>yep done</p>",
        "id": 151726825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729984
    },
    {
        "content": "<p>yep :-)</p>",
        "id": 151726826,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729985
    },
    {
        "content": "<p>ta</p>",
        "id": 151726827,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729986
    },
    {
        "content": "<p>so anyway I imagine roughly that in the code which checks <code>let</code></p>",
        "id": 151726837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730001
    },
    {
        "content": "<p>It would probably help to collect all your notes (and my musings) in a single place</p>",
        "id": 151726890,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730010
    },
    {
        "content": "<p>we would want to inspect if (a) there is a type annotation and (b) that type references opaque types</p>",
        "id": 151726895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730012
    },
    {
        "content": "<p>maybe a collaborative MD doc like you were starting</p>",
        "id": 151726901,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730018
    },
    {
        "content": "<p>not a bad idea</p>",
        "id": 151726909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730025
    },
    {
        "content": "<p>right now they're in a few GH issues, PRs, and Zulip I feel</p>",
        "id": 151726914,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730027
    },
    {
        "content": "<p>yeah</p>",
        "id": 151726917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730031
    },
    {
        "content": "<p>always hard to figure out how to organize such things</p>",
        "id": 151726928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730041
    },
    {
        "content": "<p>indeed</p>",
        "id": 151726933,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730049
    },
    {
        "content": "<p>can I let you do that later? since you probably understand your notes rather better than I do!</p>",
        "id": 151726984,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730088
    },
    {
        "content": "<p>and the topic in general</p>",
        "id": 151726988,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730091
    },
    {
        "content": "<p>but, about code that checks <code>let</code>...<br>\n\"we would want to inspect if (a) there is a type annotation and (b) that type references opaque types\" -- right</p>",
        "id": 151727054,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730127
    },
    {
        "content": "<p>yeah</p>",
        "id": 151727055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730128
    },
    {
        "content": "<p>yes, and basically if those things are true, we'd instantiate said opaque types...</p>",
        "id": 151727078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730146
    },
    {
        "content": "<p>okay</p>",
        "id": 151727086,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730153
    },
    {
        "content": "<p>winding up with another variant of the type that is used with the RHS</p>",
        "id": 151727098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730166
    },
    {
        "content": "<p>do we check for \"type(rhs) &lt;: T\" at that point too though?</p>",
        "id": 151727105,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730171
    },
    {
        "content": "<p>that's the high-level idea anyway</p>",
        "id": 151727108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730173
    },
    {
        "content": "<p>I guess that's already part of assignment type checking?</p>",
        "id": 151727131,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730187
    },
    {
        "content": "<p>or maybe I misunderstand</p>",
        "id": 151727151,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I think we would be adding this into <a href=\"https://github.com/rust-lang/rust/blob/7489ee9c6f92050a12a3a3097df0a7d3737d82ec/src/librustc_typeck/check/mod.rs#L4513-L4539\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7489ee9c6f92050a12a3a3097df0a7d3737d82ec/src/librustc_typeck/check/mod.rs#L4513-L4539\">the <code>check_decl_initializer</code> function here</a></p>",
        "id": 151727300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730329
    },
    {
        "content": "<p>right, I'm familiar with that</p>",
        "id": 151727313,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730342
    },
    {
        "content": "<p>or possible <a href=\"https://github.com/rust-lang/rust/blob/7489ee9c6f92050a12a3a3097df0a7d3737d82ec/src/librustc_typeck/check/mod.rs#L4541\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7489ee9c6f92050a12a3a3097df0a7d3737d82ec/src/librustc_typeck/check/mod.rs#L4541\"><code>check_decl_local</code></a></p>",
        "id": 151727316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730344
    },
    {
        "content": "<p>but do we need an additional subtype check?</p>",
        "id": 151727328,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730351
    },
    {
        "content": "<p>like above</p>",
        "id": 151727332,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730355
    },
    {
        "content": "<p>no we would be using <a href=\"https://github.com/rust-lang/rust/blob/7489ee9c6f92050a12a3a3097df0a7d3737d82ec/src/librustc_typeck/check/mod.rs#L4537\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7489ee9c6f92050a12a3a3097df0a7d3737d82ec/src/librustc_typeck/check/mod.rs#L4537\">this same check that already exists</a>,</p>",
        "id": 151727394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730372
    },
    {
        "content": "<p>except that the type we are using would not be the type the user wrote</p>",
        "id": 151727404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730378
    },
    {
        "content": "<p>but rather the 'instantiated' version</p>",
        "id": 151727410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730382
    },
    {
        "content": "<p>this logic may actually already be sort of correct I guess</p>",
        "id": 151727429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730411
    },
    {
        "content": "<p>I mean there is <code>revealed_ty</code></p>",
        "id": 151727437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730417
    },
    {
        "content": "<p>so yeah the type-checker part maybe doesn't have to change at all</p>",
        "id": 151727485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730479
    },
    {
        "content": "<p>or maybe only minimally</p>",
        "id": 151727544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730504
    },
    {
        "content": "<p>the question is more how to ensure this \"cast\" winds up in the MIR</p>",
        "id": 151727554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730516
    },
    {
        "content": "<p>presumably it also wants to be added to the HAIR</p>",
        "id": 151727558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730523
    },
    {
        "content": "<p>makes sense</p>",
        "id": 151727570,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730541
    },
    {
        "content": "<p>I kind of wrote that code before, with my initial attempt</p>",
        "id": 151727587,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730550
    },
    {
        "content": "<p>right</p>",
        "id": 151727628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730597
    },
    {
        "content": "<p>I wonder if MIR needs to do its own type-checking to make sure the cast is valid?</p>",
        "id": 151727678,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730607
    },
    {
        "content": "<p>so maybe what we want is to modify the <a href=\"https://github.com/rust-lang/rust/blob/7489ee9c6f92050a12a3a3097df0a7d3737d82ec/src/librustc_mir/hair/cx/block.rs#L81\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7489ee9c6f92050a12a3a3097df0a7d3737d82ec/src/librustc_mir/hair/cx/block.rs#L81\">HAIR lowering for <code>let</code></a></p>",
        "id": 151727690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730614
    },
    {
        "content": "<p>hmm</p>",
        "id": 151727693,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730619
    },
    {
        "content": "<p>good idea</p>",
        "id": 151727700,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730629
    },
    {
        "content": "<p>so</p>",
        "id": 151727718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730654
    },
    {
        "content": "<p>you can see that we already put the user-given type into the pattern, <a href=\"https://github.com/rust-lang/rust/blob/7489ee9c6f92050a12a3a3097df0a7d3737d82ec/src/librustc_mir/hair/cx/block.rs#L90-L102\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7489ee9c6f92050a12a3a3097df0a7d3737d82ec/src/librustc_mir/hair/cx/block.rs#L90-L102\">here</a></p>",
        "id": 151727739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730674
    },
    {
        "content": "<p>we might want to do something similar, afterwards, basically wrapping the <code>initializer</code> with some kind of <code>HideUserType</code> sort of thing</p>",
        "id": 151727768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730704
    },
    {
        "content": "<p>yep</p>",
        "id": 151727779,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730712
    },
    {
        "content": "<p>(presuming that impl trait is present)</p>",
        "id": 151727785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730715
    },
    {
        "content": "<p>this would then be converted into some suitable MIR cast</p>",
        "id": 151727789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730720
    },
    {
        "content": "<p>which the type-checker would know to instantiate the opaque types etc</p>",
        "id": 151727847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730739
    },
    {
        "content": "<p>yeah... probably I can reuse the MIR code I've written for that, or something similar.</p>",
        "id": 151727857,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730746
    },
    {
        "content": "<p>the MIR type checker you mean?</p>",
        "id": 151727871,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730755
    },
    {
        "content": "<blockquote>\n<p>we might want to do something similar, afterwards, basically wrapping the <code>initializer</code> with some kind of <code>HideUserType</code> sort of thing</p>\n</blockquote>\n<p>this btw gets back to that point about the type annotation serving two roles: you see it appearing (in opaque form) as an ascription on the pattern, and then in the cast (the revealed form)</p>",
        "id": 151727891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730774
    },
    {
        "content": "<blockquote>\n<p>the MIR type checker you mean?</p>\n</blockquote>\n<p>yes</p>",
        "id": 151727896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730778
    },
    {
        "content": "<blockquote>\n<p>yeah... probably I can reuse the MIR code I've written for that, or something similar.</p>\n</blockquote>\n<p>yes</p>",
        "id": 151727897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730782
    },
    {
        "content": "<p>makes sense</p>",
        "id": 151727912,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730795
    },
    {
        "content": "<p>the basic code structure you had was right, it was just not necessarily triggering at the right times</p>",
        "id": 151727913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730799
    },
    {
        "content": "<p>okay. appreciate that. that's enough for now I think. :-)</p>",
        "id": 151727916,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730806
    },
    {
        "content": "<p>awesome</p>",
        "id": 151727920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730809
    },
    {
        "content": "<p>at least, until you get around to collating your notes</p>",
        "id": 151727923,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544730811
    },
    {
        "content": "<p>yep, I'll try to find some suitable github place for them -- or, maybe better yet, we can put some of this logic into a rustc-guide PR</p>",
        "id": 151727941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730832
    },
    {
        "content": "<p>hmm I wonder if having rustc-guide PRs that stay open and get updated as we shift the design actually makes sense</p>",
        "id": 151727966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730842
    },
    {
        "content": "<p>kind of \"design guide in progress\"</p>",
        "id": 151727989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730850
    },
    {
        "content": "<p>and/or land and get edited</p>",
        "id": 151727991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730854
    },
    {
        "content": "<p>ok, gotta run anyway, meeting time</p>",
        "id": 151728002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544730868
    },
    {
        "content": "<p>yeah that could work :-)</p>",
        "id": 151728218,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544731036
    },
    {
        "content": "<p>and sure. I've left you some PMs, btw.</p>",
        "id": 151728235,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544731052
    }
]