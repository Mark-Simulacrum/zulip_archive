[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> re</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136733805,
        "sender_full_name": "scalexm",
        "timestamp": 1540845650
    },
    {
        "content": "<p>to me this is no different than</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Copy</span>: <span class=\"nb\">Clone</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Self</span>: <span class=\"nb\">Copy</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136733826,
        "sender_full_name": "scalexm",
        "timestamp": 1540845685
    },
    {
        "content": "<p>if we make the first example ill-formed under the pretext that <code>Self: Foo&lt;T&gt;</code> is ill-formed, so should we do with the second example <code>Self: Copy</code></p>",
        "id": 136733837,
        "sender_full_name": "scalexm",
        "timestamp": 1540845711
    },
    {
        "content": "<p>so to me, in traits we don't need to check any where clauses, but impls must always enforce the full set of transitive bounds</p>",
        "id": 136733888,
        "sender_full_name": "scalexm",
        "timestamp": 1540845749
    },
    {
        "content": "<p>ok I see -- yes <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> you make a persuasive case :)</p>",
        "id": 136783506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540912903
    },
    {
        "content": "<p>we currently do have some sort of WF checks here</p>",
        "id": 136783517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540912915
    },
    {
        "content": "<p>however</p>",
        "id": 136783518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540912916
    },
    {
        "content": "<p>but I think that -- under an implied bounds scheme -- they are largely silly</p>",
        "id": 136783572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540912929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes</p>",
        "id": 136785024,
        "sender_full_name": "scalexm",
        "timestamp": 1540914223
    },
    {
        "content": "<p>If you check the WF chapter I juste wrote in rustc-guide</p>",
        "id": 136785031,
        "sender_full_name": "scalexm",
        "timestamp": 1540914237
    },
    {
        "content": "<p>For trait decls, the only things I check are that types appearing in the where clauses are WF</p>",
        "id": 136785090,
        "sender_full_name": "scalexm",
        "timestamp": 1540914262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> ok I will consult. Of course, <em>today</em> this <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=0d4391ae577761238eb5bed021c362f6\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=0d4391ae577761238eb5bed021c362f6\">gets an error</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136791124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540919437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes :) but since the WF chapter is in the \"new-style\" trait solving section, I wrote things as how I think they should be tomorrow</p>",
        "id": 136791171,
        "sender_full_name": "scalexm",
        "timestamp": 1540919492
    },
    {
        "content": "<p>yep yep</p>",
        "id": 136791255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540919540
    },
    {
        "content": "<p>I'm not saying that to \"contradict\" you, just noting</p>",
        "id": 136791260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540919547
    },
    {
        "content": "<p>it feels maybe relevant to the trait alias PR that <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> has been working on</p>",
        "id": 136791265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540919558
    },
    {
        "content": "<p>I am basically thinking that we should make trait aliases \"fit\" the rest of the system as cleanly as we can</p>",
        "id": 136791274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540919573
    },
    {
        "content": "<p>which might mean inheriting its limitations for the time being</p>",
        "id": 136791279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540919579
    },
    {
        "content": "<p>but I am debating if that is silly</p>",
        "id": 136791286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540919583
    },
    {
        "content": "<p>Picking this up again, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, I basically can't come up with any reason that we should impose limitations on trait aliases (cc <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>) that they be \"consistent\". In other words, it seems ok to permit <code>trait Foo&lt;T: Send { }; trait Bar&lt;T&gt; = Foo&lt;T&gt;;</code>, and not require <code>trait Bar&lt;T: Send&gt; = Foo&lt;T&gt;</code>.</p>\n<p>The way this is implemented, you basically wind up with roughly the equivalent of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I was trying to figure out if there could be problems like those from <a href=\"https://github.com/rust-lang/rust/issues/43784\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/43784\">#43784</a> — if so, I don't see it yet.</p>",
        "id": 136936161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093057
    },
    {
        "content": "<p>it does feel a <em>touch</em> suspicious, but otoh we already require that the impl of <code>Foo&lt;T&gt;</code> must be able to prove that anything implied by the trait is true (and we elaborate those, thanks to your fix for <a href=\"https://github.com/rust-lang/rust/issues/43784\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/43784\">#43784</a>), so by proving <code>Foo&lt;T&gt;</code> we ought to be able to rely on the <code>Foo</code> impl to prove that <code>T: Send</code>, I think?</p>",
        "id": 136936197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093115
    },
    {
        "content": "<p>(And I guess the other key point is that the <code>Foo</code> impl can't rely on the <code>Bar</code> impl, because it has a <code>Self: Foo&lt;T&gt;</code> requirement — <em>that</em> was the real problem in <a href=\"https://github.com/rust-lang/rust/issues/43784\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/43784\">#43784</a> from what I see.)</p>",
        "id": 136936225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> under the implied bounds setting your translation seems harmless yes</p>",
        "id": 136936580,
        "sender_full_name": "scalexm",
        "timestamp": 1541093454
    },
    {
        "content": "<p>however in rustc, the <code>T: Send</code> is not even elaborated I think</p>",
        "id": 136936593,
        "sender_full_name": "scalexm",
        "timestamp": 1541093465
    },
    {
        "content": "<p>well, we are presently doing that for trait aliases</p>",
        "id": 136936622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093503
    },
    {
        "content": "<p>but not other traits</p>",
        "id": 136936624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093504
    },
    {
        "content": "<p>I'm not sure if we <em>should</em> keep doing it</p>",
        "id": 136936627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093506
    },
    {
        "content": "<p>(just for \"consistency\")</p>",
        "id": 136936638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093520
    },
    {
        "content": "<p>in that case that might be problematic because my fix for  <a href=\"https://github.com/rust-lang/rust/issues/43784\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/43784\">#43784</a> only proves elaborated bounds, i.e. supertrait and bounds on assoc types</p>",
        "id": 136936687,
        "sender_full_name": "scalexm",
        "timestamp": 1541093538
    },
    {
        "content": "<p>but I guess the same all applies to <code>trait Foo: Send { } trait Bar = Foo;</code></p>",
        "id": 136936688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093538
    },
    {
        "content": "<blockquote>\n<p>in that case that might be problematic because my fix for  <a href=\"https://github.com/rust-lang/rust/issues/43784\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/43784\">#43784</a> only prove elaborated bounds, i.e. supertrait and bounds on assoc types</p>\n</blockquote>\n<p>well, that same function you use to elaborate</p>",
        "id": 136936697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093551
    },
    {
        "content": "<p>is extended to treat trait aliases differently I think?</p>",
        "id": 136936703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093559
    },
    {
        "content": "<p>hmm</p>",
        "id": 136936708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in that case that would be ok</p>",
        "id": 136936715,
        "sender_full_name": "scalexm",
        "timestamp": 1541093569
    },
    {
        "content": "<p>but in this case, the <code>T: Send</code> comes from a normal trait..</p>",
        "id": 136936720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093577
    },
    {
        "content": "<p>I can certainly create the example, I dont' think it \"went wrong\" when I tried it, but maybe I did some step wrong</p>",
        "id": 136936739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093592
    },
    {
        "content": "<p>well, basically, we would only elaborate <code>Bar&lt;T&gt;</code> to <code>Foo&lt;T&gt;</code></p>",
        "id": 136936829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093669
    },
    {
        "content": "<p>so actually know that <code>X: Bar&lt;T&gt;</code> does not imply that <code>T: Send</code> to us</p>",
        "id": 136936839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093679
    },
    {
        "content": "<p>(but also I think you cannot prove that <code>X: Bar&lt;T&gt;</code> unless <code>T: Send</code>)</p>",
        "id": 136936850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093689
    },
    {
        "content": "<p>when you say that the trait alias is translated to <code>impl&lt;Self: Foo&lt;T&gt;&gt; Bar&lt;T&gt; for Self { .. }</code>, I guess there is also a <code>trait Bar&lt;T&gt;: Foo&lt;T&gt;</code> or something?</p>",
        "id": 136936852,
        "sender_full_name": "scalexm",
        "timestamp": 1541093690
    },
    {
        "content": "<p>correct</p>",
        "id": 136936859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093701
    },
    {
        "content": "<p>ok</p>",
        "id": 136936865,
        "sender_full_name": "scalexm",
        "timestamp": 1541093704
    },
    {
        "content": "<p>the funny bit is that this trait</p>",
        "id": 136936879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093723
    },
    {
        "content": "<p>would be an error today</p>",
        "id": 136936881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093725
    },
    {
        "content": "<p>yes</p>",
        "id": 136936885,
        "sender_full_name": "scalexm",
        "timestamp": 1541093728
    },
    {
        "content": "<p>which is why I am <em>tempted</em> (for consistency) to enforce WF conditions</p>",
        "id": 136936900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093740
    },
    {
        "content": "<p>otoh, I can't see why it's <em>important</em> to do so</p>",
        "id": 136936908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541093750
    },
    {
        "content": "<p>yeah maybe we should enforce them until full implied bounds are implemented</p>",
        "id": 136936978,
        "sender_full_name": "scalexm",
        "timestamp": 1541093780
    },
    {
        "content": "<p>so basically we would check that, assuming the (elaborated) trait alias bounds hold, all the traits bounds are well-formed, just as we do for traits</p>",
        "id": 136937352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541094109
    },
    {
        "content": "<p>hence <code>trait Foo = Bar</code> is fine (because <code>Self: Bar =&gt; Self: Bar</code>), but <code>trait Foo&lt;T&gt; = Bar&lt;T&gt;; trait Bar&lt;T: Send&gt; { }</code>  is not, because <code>elaborated(Self: Bar&lt;T&gt;) = [Self: Bar&lt;T&gt;]</code></p>",
        "id": 136937414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541094147
    },
    {
        "content": "<p>yes, also I see in the RFC that bounds on type variables are basically left as unresolved</p>",
        "id": 136937465,
        "sender_full_name": "scalexm",
        "timestamp": 1541094225
    },
    {
        "content": "<p>so yeah I'd go for just use the normal elaboration scheme for now</p>",
        "id": 136937476,
        "sender_full_name": "scalexm",
        "timestamp": 1541094242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm not sure I fully understand the above, but I think it kind of depends on whether we want to consider this behaviour as part of the wider implied bounds semantics.</p>",
        "id": 136937541,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541094284
    },
    {
        "content": "<p>Right I think <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> what <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> and I are thinking is that — at least for this PR — it'd be better to make things \"consistent\" with everything else</p>",
        "id": 136937723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541094428
    },
    {
        "content": "<p>(which basically means adding a little code in wfcheck)</p>",
        "id": 136937741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541094446
    },
    {
        "content": "<p>so enforce the bounds?</p>",
        "id": 136937747,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541094451
    },
    {
        "content": "<p>yeah</p>",
        "id": 136937750,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541094453
    },
    {
        "content": "<p>makes sense to me</p>",
        "id": 136937751,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541094454
    },
    {
        "content": "<p>right</p>",
        "id": 136937770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541094468
    },
    {
        "content": "<p>how do we go about that? is it during selection?</p>",
        "id": 136937858,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541094534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 136937997,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541094630
    },
    {
        "content": "<p>no, it is in <code>wfcheck.rs</code></p>",
        "id": 136938331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541094914
    },
    {
        "content": "<p>more specifically, <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>, probably just need to <a href=\"https://github.com/rust-lang/rust/blob/f6e9a6e41cd9b1fb687e296b5a6d4c6ad399f862/src/librustc_typeck/check/wfcheck.rs#L153-L156\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f6e9a6e41cd9b1fb687e296b5a6d4c6ad399f862/src/librustc_typeck/check/wfcheck.rs#L153-L156\">do the same thing for traits and trait aliases here</a></p>",
        "id": 136938442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541095005
    },
    {
        "content": "<p>oh right</p>",
        "id": 136938807,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541095310
    },
    {
        "content": "<p>never touched this part of the codebase before</p>",
        "id": 136938859,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541095327
    },
    {
        "content": "<p>let me have a look though</p>",
        "id": 136938863,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541095332
    },
    {
        "content": "<p>let's see if that does the trick...</p>",
        "id": 136938931,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541095420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> incidentally, how does gate-test-X work?</p>",
        "id": 136939337,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541095745
    },
    {
        "content": "<p>hmm :) I sort of forget</p>",
        "id": 136939448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541095813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yep that works. will push in a second, then you can have a look and r+ hopefully!</p>",
        "id": 136939642,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541096019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> what do you think about the idea of having a comprehensive list of tests and the files they are in? </p>\n<p>Probably living on the tracking issue? Maybe we should make an associated issue for \"implementation\", since that issue has various comments on it.</p>",
        "id": 136939827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541096167
    },
    {
        "content": "<p>I was also thinking it would be nice to add some comments to the rustc-guide</p>",
        "id": 136939832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541096179
    },
    {
        "content": "<p>I'd like to have an issue with a checklist describing the open issues we've encountered here</p>",
        "id": 136939844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541096189
    },
    {
        "content": "<p>I can do some of that legwork if you want</p>",
        "id": 136939851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541096197
    },
    {
        "content": "<p>we've basically got a lot of \"state\" in our heads right now about what works, what doesn't, and why, and I'd like to get that captured before I forget :)</p>",
        "id": 136939859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541096219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sounds fair enough. I've just pushed to the branch now. everything should be passing now. :-) and yes, I'd appreciate if you'd start with some of the legwork... but I'm here to help. especially if you're unsure of anything I've written.</p>",
        "id": 136940089,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541096409
    },
    {
        "content": "<p>that WF checking was refreshingly trivial</p>",
        "id": 136940099,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541096429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm going to have a look at <a href=\"https://github.com/rust-lang/rust/issues/24010\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/24010\">https://github.com/rust-lang/rust/issues/24010</a> now too... since it impacts on trait aliases as well.</p>",
        "id": 136940159,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541096501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> yes! that would be great. I don't think there's any \"deep reason\" that this doesn't work</p>",
        "id": 136940357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541096676
    },
    {
        "content": "<p>though I've not looked at it in a while</p>",
        "id": 136940363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541096681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> also, if you want me to split up the tests in the trait-alias-bounds file into multiple files, I could do that. (the trait-alias-object-types file is already pretty small). just let me know how you'd like to do the splitting, since I'm not totally sure</p>",
        "id": 136940393,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541096719
    },
    {
        "content": "<p>yeah, I agree, the reason doesn't seem to involve the underlying mechanics of the trait system</p>",
        "id": 136940490,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541096808
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> also, if you want me to split up the tests in the trait-alias-bounds file into multiple files, I could do that. (the trait-alias-object-types file is already pretty small). just let me know how you'd like to do the splitting, since I'm not totally sure</p>\n</blockquote>\n<p>ok, I will have to take a look. Usually the lint for me is if there are lots of supporting types that are only used in one small subpart</p>",
        "id": 136940517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541096851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that sounds reasonable, but I was hoping to make a more \"conceptual\" separation.</p>",
        "id": 136940621,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541096982
    },
    {
        "content": "<p>anyway, prioritise things in the order you want</p>",
        "id": 136940627,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541096998
    },
    {
        "content": "<p>if you want to start documenting things in the tracking issue and whatnot first, go for that</p>",
        "id": 136940678,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541097010
    },
    {
        "content": "<p>or indeed review my PR :-)</p>",
        "id": 136940692,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541097027
    },
    {
        "content": "<p>CI hasn't finish quite yet, mind you</p>",
        "id": 136940699,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541097032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> strange test failure. seen it yet?</p>",
        "id": 136945059,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541101285
    },
    {
        "content": "<p>I see it now, let me take a look</p>",
        "id": 136949479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541105816
    },
    {
        "content": "<p>sure</p>",
        "id": 136949860,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541106148
    },
    {
        "content": "<p>I have a hunch, <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>, that the problem lies in <a href=\"https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src/librustc/middle/resolve_lifetime.rs#L525-L530\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src/librustc/middle/resolve_lifetime.rs#L525-L530\">this code</a>, which applies I think also to <code>TraitAlias</code></p>",
        "id": 136950119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106450
    },
    {
        "content": "<p>I haven't tested that yet though :)</p>",
        "id": 136950124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106455
    },
    {
        "content": "<p>perhaps the same is true <a href=\"https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src/librustc/middle/resolve_lifetime.rs#L1281-L1282\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src/librustc/middle/resolve_lifetime.rs#L1281-L1282\">here</a>?</p>",
        "id": 136950194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106512
    },
    {
        "content": "<p>ugh, there are more places</p>",
        "id": 136950207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106525
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src/librustc/middle/resolve_lifetime.rs#L1605-L1607\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src/librustc/middle/resolve_lifetime.rs#L1605-L1607\">here</a></p>",
        "id": 136950221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106538
    },
    {
        "content": "<p>(the second place is something else, I have to think about a test case that exposes the problem)</p>",
        "id": 136950234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106547
    },
    {
        "content": "<p>in any case I think we should find some way to write this code differently (that is, the 1st and 3rd links)</p>",
        "id": 136950248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106568
    },
    {
        "content": "<p>instead of testing if this is a trait and adjusting by 1, it would be nice if we could \"query\" the <code>generics_of</code> the def-id or something</p>",
        "id": 136950259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106584
    },
    {
        "content": "<p>I <em>think</em> we could replace that code with <code>tcx.generics_of(def_id).has_self</code> and it would just work</p>",
        "id": 136950332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106625
    },
    {
        "content": "<p>have to get the right def-id though :)</p>",
        "id": 136950337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106631
    },
    {
        "content": "<p>e.g., in the first case, it would be <code>tcx.hir.local_def_id(item.id)</code></p>",
        "id": 136950363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106667
    },
    {
        "content": "<p>althouhg hmm that might be wrong, because <code>has_self</code> is also true for methods...</p>",
        "id": 136950380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106692
    },
    {
        "content": "<p>ah, but those are a different match arm</p>",
        "id": 136950393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what is this code even doing?</p>",
        "id": 136950464,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541106769
    },
    {
        "content": "<p>/me sighs</p>",
        "id": 136950553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106844
    },
    {
        "content": "<p>actually, I think a <a href=\"https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src/librustc/middle/resolve_lifetime.rs#L1608-L1614\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/451987d86c89b38ddd8c4c124f1b9b6d4ded6983/src/librustc/middle/resolve_lifetime.rs#L1608-L1614\">trait alias is impossible in this case</a>, since there are no methods \"within\" trait aliases (unlike traits + impls)</p>",
        "id": 136950569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106866
    },
    {
        "content": "<p>in any case, the code is computing the index of the lifetime parameters defined on the trait alias and elsewhere</p>",
        "id": 136950581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106883
    },
    {
        "content": "<p>each generic parameter (whether a lifetime or a type) gets an index</p>",
        "id": 136950584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106893
    },
    {
        "content": "<p>in the case of <code>trait Foo</code>, there is also an index assigned to the (implicit) <code>Self</code> type parameter</p>",
        "id": 136950600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106907
    },
    {
        "content": "<p>Ah, and it's trying to handle the index of the lifetime parameter for the self object?</p>",
        "id": 136950606,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541106912
    },
    {
        "content": "<p>yes, that's the problem, it is adjusting to account for that implicit <code>Self</code></p>",
        "id": 136950619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106924
    },
    {
        "content": "<p>right</p>",
        "id": 136950628,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541106931
    },
    {
        "content": "<p>I sort of get that</p>",
        "id": 136950635,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541106934
    },
    {
        "content": "<p>ah way</p>",
        "id": 136950637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106937
    },
    {
        "content": "<p>er, <em>wait</em></p>",
        "id": 136950643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106942
    },
    {
        "content": "<p>I think you can't call <code>tcx.generics_of(...)</code> here</p>",
        "id": 136950654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106947
    },
    {
        "content": "<p>because this code needs to run <em>before</em> <code>generics_of</code></p>",
        "id": 136950663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106956
    },
    {
        "content": "<p>anyway I guess the easiest fix for now (ugh) is to add <code>TraitAlias</code> into the match statements (or convert <code>if let</code> to <code>match</code>)</p>",
        "id": 136950709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106971
    },
    {
        "content": "<p>it'd be nice to do something cleaner though</p>",
        "id": 136950711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106975
    },
    {
        "content": "<p>I can't add it to the code in the first link either?</p>",
        "id": 136950718,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541106986
    },
    {
        "content": "<p>but honestly <code>resolve_lifetime</code> is kind of a mess that we've been meaning to refactor for some time</p>",
        "id": 136950723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106995
    },
    {
        "content": "<blockquote>\n<p>I can't add it to the code in the first link either?</p>\n</blockquote>\n<p>why not?</p>",
        "id": 136950726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541106998
    },
    {
        "content": "<p>I'm just checking. I thought I could.</p>",
        "id": 136950732,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541107009
    },
    {
        "content": "<p>yeah, I think you should</p>",
        "id": 136950739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541107022
    },
    {
        "content": "<p>I don't want to get bogged down in refactoring the whole thing heh</p>",
        "id": 136950744,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541107025
    },
    {
        "content": "<p>and I <em>think</em> that's the bug,</p>",
        "id": 136950747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541107026
    },
    {
        "content": "<p>that's why it's getting those \"index out of bound\" errors</p>",
        "id": 136950761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541107032
    },
    {
        "content": "<p>because the index is off by 1 :)</p>",
        "id": 136950764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541107037
    },
    {
        "content": "<p>\\Region parameter out of range when substituting in region 'a</p>",
        "id": 136950787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541107067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> should I be consistent and use a match in both cases though?</p>",
        "id": 136950789,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541107068
    },
    {
        "content": "<p>(perhaps factoring it out into a function)</p>",
        "id": 136950791,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541107074
    },
    {
        "content": "<p>yeah, a helper fn would be good</p>",
        "id": 136950879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541107167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> wait, why doesn't the self lifetime come first for impl items?</p>",
        "id": 136951077,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541107367
    },
    {
        "content": "<p>/me compiles</p>",
        "id": 136951404,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541107701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well, it seems to work... not sure why the case of <code>ItemKind::Impl</code> isn't needed though</p>",
        "id": 136952616,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541108961
    },
    {
        "content": "<p>anyway, see my push. ready to review I think. :-)</p>",
        "id": 136952855,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541109214
    },
    {
        "content": "<p>As for solving the other issue, I think the key to it is the <code>create_substs_for_ast_trait_ref</code> fn</p>",
        "id": 136965810,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541127948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> or it might be better to make the change in <code>instantiate_poly_trait_ref_inner</code>... not sure. what's the diff between a mono and poly trait ref?</p>",
        "id": 136966229,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541128571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I'll have to look, some of those routines are general purpose. We want to find the right place that is specific to trait objects.</p>",
        "id": 137034881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541168531
    },
    {
        "content": "<p>a \"mono trait ref\" refers to something like <code>T: Foo&lt;U&gt;</code> -- i.e., a particular trait with some specific type and lifetime parameters</p>",
        "id": 137034977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541168552
    },
    {
        "content": "<p>a \"poly trait ref\" refers to a \"higher-ranked\" trait ref, e.g., <code>for&lt;'a&gt; T: Foo&lt;'a&gt;</code></p>",
        "id": 137035030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541168564
    },
    {
        "content": "<p>the Poly refers to the <code>for</code> binder</p>",
        "id": 137035049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541168568
    },
    {
        "content": "<p>(so this defines <em>many</em> trait references)</p>",
        "id": 137035093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541168580
    },
    {
        "content": "<p>Aha</p>",
        "id": 137062530,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541174775
    },
    {
        "content": "<p>Fair</p>",
        "id": 137062545,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541174777
    },
    {
        "content": "<p>But everything gets converted to a PolyTraitRef in the end right?</p>",
        "id": 137062672,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541174815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and yes, I was trying to make the change to the most specifuc site...not 100% sure where.</p>",
        "id": 137062942,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541174896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any ideas?</p>",
        "id": 137067741,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541178116
    },
    {
        "content": "<p>I sent one thought earlier but I will re-investigate</p>",
        "id": 137072973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> </p>\n<p>btw I asked this on that PR but maybe we can discuss it here =)</p>\n<blockquote>\n<p>Remind me btw why we pushed the \"expansion\" into the lowering step, versus defining a proper WellFormed(T) goal? (And then having struct Box&lt;T&gt; get to assume that WellFormed(T) in its \"environment\"?)</p>\n</blockquote>",
        "id": 137080608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541190775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we had infinite branches problem at some time, not sure if it is still the case</p>",
        "id": 137080732,
        "sender_full_name": "scalexm",
        "timestamp": 1541190879
    },
    {
        "content": "<p>well I think we won't have them anymore now with the <code>FromEnv / WF</code> setup</p>",
        "id": 137080841,
        "sender_full_name": "scalexm",
        "timestamp": 1541190982
    },
    {
        "content": "<p>I think there were other problems maybe with associated types because they interacted with traits, I don't remember, but I think another point is that it enabled an optimization to be sound, which is that if you have <code>type Type&lt;...&gt; where WC</code> you only have <code>WF(Type&lt;...&gt;) :- WC</code> not <code>WF(Type&lt;...&gt;) :- WellFormed(WC)</code></p>",
        "id": 137081086,
        "sender_full_name": "scalexm",
        "timestamp": 1541191272
    },
    {
        "content": "<p>well I'll find some time to think about it again, maybe now we can have the expansion in the logical rules again :) but if it works out, it'll be an easy change so let's keep the guide like that for now (this is how it is implemented in chalk and rustc_traits currently)</p>",
        "id": 137081175,
        "sender_full_name": "scalexm",
        "timestamp": 1541191349
    },
    {
        "content": "<p>Yep.</p>",
        "id": 137081223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541191434
    }
]