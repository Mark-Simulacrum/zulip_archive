[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span><br>\nMeeting in 2ish minutes</p>",
        "id": 210182009,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600199932
    },
    {
        "content": "<p>Howdy :)</p>",
        "id": 210182187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200011
    },
    {
        "content": "<p>Today we're continuing sprint planning right?</p>",
        "id": 210182200,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200016
    },
    {
        "content": "<p>Meeting time :)</p>",
        "id": 210182215,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200022
    },
    {
        "content": "<p>hi hello hi howdy</p>",
        "id": 210182249,
        "sender_full_name": "Areredify",
        "timestamp": 1600200045
    },
    {
        "content": "<p>Before we start, anybody have an updates or announcements?</p>",
        "id": 210182279,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200058
    },
    {
        "content": "<p>Im working on chalk full time now, as promised :)</p>",
        "id": 210182390,
        "sender_full_name": "Areredify",
        "timestamp": 1600200105
    },
    {
        "content": "<p>That's awesome!</p>",
        "id": 210182414,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200117
    },
    {
        "content": "<p>We talked about opaque type/implied bounds interactions before, I'm not entirely sure what we meant with that but I wrote down <a href=\"https://github.com/rust-lang/chalk/issues/335#issuecomment-692298717\">a comment</a> with some thoughts on that</p>",
        "id": 210182495,
        "sender_full_name": "detrumi",
        "timestamp": 1600200133
    },
    {
        "content": "<p>So, PR wise, we had 3 merged since last week: <code>Unpin</code>, (more) lowering improvements, and some debug printing update</p>",
        "id": 210182566,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200164
    },
    {
        "content": "<p>I was away for most of last week but I did spend a <em>bit</em> of time working on chalk yesterday, hoping to ramp that up next week :)</p>",
        "id": 210182573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200167
    },
    {
        "content": "<p>Gosh I'm excited</p>",
        "id": 210182595,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200179
    },
    {
        "content": "<p>I think we said that we'd use this meeting to plan our first sprint</p>",
        "id": 210182664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200208
    },
    {
        "content": "<p>Btw <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> I left one small comment on your PR, but feel free to r+</p>",
        "id": 210182698,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-09-15/near/210182664\">said</a>:</p>\n<blockquote>\n<p>I think we said that we'd use this meeting to plan our first sprint</p>\n</blockquote>\n<p>Indeed</p>",
        "id": 210182720,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200233
    },
    {
        "content": "<p>So, we talked last week about some goals</p>",
        "id": 210182791,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200247
    },
    {
        "content": "<p>But we mostly dug deep into the shared type library bit</p>",
        "id": 210182819,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200257
    },
    {
        "content": "<p>So, I can see this being a short(er) meeting</p>",
        "id": 210182897,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200285
    },
    {
        "content": "<p>even though we didn't talk about rustc integration yet, I think that goal is clearer than the type lib work</p>",
        "id": 210182924,
        "sender_full_name": "detrumi",
        "timestamp": 1600200296
    },
    {
        "content": "<p>Though the scope might be very large to get full rustc integration</p>",
        "id": 210182996,
        "sender_full_name": "detrumi",
        "timestamp": 1600200332
    },
    {
        "content": "<p>like, I tried running some rustc tests, and noticed that auto traits might be quite important there</p>",
        "id": 210183101,
        "sender_full_name": "detrumi",
        "timestamp": 1600200365
    },
    {
        "content": "<p>Yeah, on the rustc side, I would say there's a couple things:</p>",
        "id": 210183158,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200391
    },
    {
        "content": "<p>(are we taking notes in some doc?)</p>",
        "id": 210183177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200402
    },
    {
        "content": "<p>1) <code>kind()</code> -&gt; <code>kind(tcx)</code> and/or <code>kind() -&gt; data()</code></p>",
        "id": 210183202,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200411
    },
    {
        "content": "<p><a href=\"https://hackmd.io/s1MfBn4bRjyir-aqHZzbKQ\">https://hackmd.io/s1MfBn4bRjyir-aqHZzbKQ</a></p>",
        "id": 210183210,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200416
    },
    {
        "content": "<p>2) Making <code>Binder</code> track bound vars</p>",
        "id": 210183296,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200451
    },
    {
        "content": "<p>(which is a multiple step process)</p>",
        "id": 210183311,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200458
    },
    {
        "content": "<p>3) Refactoring away <code>Param</code></p>",
        "id": 210183335,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200473
    },
    {
        "content": "<p>On the Chalk side, there's also a few things that are pretty important (I've mentioned a few before):</p>",
        "id": 210183470,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200522
    },
    {
        "content": "<p>1) Subtyping/Variance (being worked on)</p>",
        "id": 210183489,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200533
    },
    {
        "content": "<p>2) Placeholder canonicalization</p>",
        "id": 210183499,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200540
    },
    {
        "content": "<p>3) Auto traits (to an extent)</p>",
        "id": 210183525,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200552
    },
    {
        "content": "<p>4) <code>ReStatic</code> (to an extent)</p>",
        "id": 210183539,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200561
    },
    {
        "content": "<p>(I also added some of these to the tracking issue, though it's pretty rough and incomplete atm: <a href=\"https://github.com/rust-lang/wg-traits/issues/25\">https://github.com/rust-lang/wg-traits/issues/25</a>)</p>",
        "id": 210183635,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200606
    },
    {
        "content": "<p>hm, what's restatic?</p>",
        "id": 210183641,
        "sender_full_name": "detrumi",
        "timestamp": 1600200611
    },
    {
        "content": "<p>Just having a notion of <code>'static</code> lifetime</p>",
        "id": 210183668,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200627
    },
    {
        "content": "<p>I can revive my placeholder canonicaliztion branch, but it's somewhat blocked on <a href=\"https://github.com/rust-lang/chalk/issues/568\">#568</a></p>",
        "id": 210183707,
        "sender_full_name": "Areredify",
        "timestamp": 1600200643
    },
    {
        "content": "<p>And, another thing I remembered is different but hasn't come up much, is rustc considers bound vars as WF, chalk doesn't</p>",
        "id": 210183764,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200674
    },
    {
        "content": "<p>that may be a matter of setting up the initial environment correctly more than anything</p>",
        "id": 210183804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> seems like a discussion we should prioritize</p>",
        "id": 210183816,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200698
    },
    {
        "content": "<p>I guess I would expect that <code>WellFormed(T)</code> or what have you is \"injected\" into chalk's environment</p>",
        "id": 210183820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200701
    },
    {
        "content": "<p>Well</p>",
        "id": 210183924,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200733
    },
    {
        "content": "<p>It might be that it's a <code>WellFormed(T)</code> that's getting changed to a <code>WellFormed(!0)</code> because of the param substitution</p>",
        "id": 210184033,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200781
    },
    {
        "content": "<p>But IIRC, I think we actually get goals a like <code>WellFormed(^0.0)</code></p>",
        "id": 210184070,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200803
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/a874956d940ecb3ed524b6176a171219ac4787ea/compiler/rustc_traits/src/chalk/lowering.rs#L169\">https://github.com/rust-lang/rust/blob/a874956d940ecb3ed524b6176a171219ac4787ea/compiler/rustc_traits/src/chalk/lowering.rs#L169</a></p>",
        "id": 210184132,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200842
    },
    {
        "content": "<p>Oops yeah, it's probably the placeholder \"lowering\"</p>",
        "id": 210184186,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200856
    },
    {
        "content": "<p>(<code>!</code> being placeholder, <code>^</code> being bound var)</p>",
        "id": 210184188,
        "sender_full_name": "detrumi",
        "timestamp": 1600200856
    },
    {
        "content": "<p>I just wrote up a quick <a href=\"https://gist.github.com/nikomatsakis/cd8cf828c15621c654edd2ede6d24e1b\">MVP proposal</a> for <code>kind -&gt; data</code></p>",
        "id": 210184239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200883
    },
    {
        "content": "<p>I had hoped to do that <em>before</em> this meeting but... :)</p>",
        "id": 210184259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200895
    },
    {
        "content": "<p>anything missing from that ?</p>",
        "id": 210184263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> still wants to take that on, right?</p>",
        "id": 210184281,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200906
    },
    {
        "content": "<p>right</p>",
        "id": 210184290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200912
    },
    {
        "content": "<p>one thought is that maybe I should extend the MCP to cover add'l things</p>",
        "id": 210184300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200918
    },
    {
        "content": "<p>like region -&gt; lifetime or whatever</p>",
        "id": 210184307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200921
    },
    {
        "content": "<p>but I guess it seems better to me to focus on one question at a time</p>",
        "id": 210184322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> LGTM</p>",
        "id": 210184374,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200951
    },
    {
        "content": "<p>Right, maybe even prefer two smaller proposals at the same time instead of one larger one</p>",
        "id": 210184383,
        "sender_full_name": "detrumi",
        "timestamp": 1600200957
    },
    {
        "content": "<p>yes, that</p>",
        "id": 210184428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200964
    },
    {
        "content": "<p>otherwise the discussion gets confusing</p>",
        "id": 210184441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600200969
    },
    {
        "content": "<p>I definitely prefer multiple smaller proposals</p>",
        "id": 210184450,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600200974
    },
    {
        "content": "<p>we had \"format the world\", now it's time for \"rename the world\"</p>",
        "id": 210184454,
        "sender_full_name": "Areredify",
        "timestamp": 1600200979
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/compiler-team/issues/359\">https://github.com/rust-lang/compiler-team/issues/359</a></p>",
        "id": 210184493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201000
    },
    {
        "content": "<p>Particularly people might prefer region instead of lifetime, and I would rather not add additional overhead of bikeshedding</p>",
        "id": 210184546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201033
    },
    {
        "content": "<p>I think in that particular case I was somewhat leaning towards renaming things in chalk</p>",
        "id": 210184610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201068
    },
    {
        "content": "<p>there are still some changes needed on rustc side though (introducing the <code>data</code> method, in particular)</p>",
        "id": 210184634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201080
    },
    {
        "content": "<p>I don't have a strong opinion about the name though, I guess lifetime might be more familiar to new contributors</p>",
        "id": 210184721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201106
    },
    {
        "content": "<p>anyway let's leave that for now</p>",
        "id": 210184731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201111
    },
    {
        "content": "<p>Right, so</p>",
        "id": 210184827,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201157
    },
    {
        "content": "<p>I'm really hesitant to start adding a bunch of goals to the sprint doc</p>",
        "id": 210184867,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201181
    },
    {
        "content": "<p>Since, I don't really want to add things that aren't going to be finished</p>",
        "id": 210184880,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201193
    },
    {
        "content": "<p>right</p>",
        "id": 210184889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201198
    },
    {
        "content": "<p>one thing I had hoped to do before this meeting was to break out the shared type library stuff into issues; but I don't think we need to spend more meeting time on it, we have a fairly granular breakdown there</p>",
        "id": 210184974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201220
    },
    {
        "content": "<p>I would be interested maybe to touch base a bit more on some of those rustc integration blockers you mentioned</p>",
        "id": 210184994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201229
    },
    {
        "content": "<p>Sounds good to me</p>",
        "id": 210185100,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201280
    },
    {
        "content": "<p>Chalk side or rustc side to start?</p>",
        "id": 210185120,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201294
    },
    {
        "content": "<p>erm, okay, let's start Chalk side then?</p>",
        "id": 210185276,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201382
    },
    {
        "content": "<p>sure</p>",
        "id": 210185306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201395
    },
    {
        "content": "<p>well one specific thing I was confused about waas the mention of auto traits</p>",
        "id": 210185324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201404
    },
    {
        "content": "<p>what is missing there again? auto traits for builtin types?</p>",
        "id": 210185345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201413
    },
    {
        "content": "<p>yes</p>",
        "id": 210185349,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201416
    },
    {
        "content": "<p>that seems like a good sprint goal</p>",
        "id": 210185358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201421
    },
    {
        "content": "<p>Probably</p>",
        "id": 210185378,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201428
    },
    {
        "content": "<p>Yeah, running some random rustc tests with <code>-Zchalk</code> ran into \"the trait <code>Send</code> is not implemented for <code>&amp;str</code>\"</p>",
        "id": 210185397,
        "sender_full_name": "detrumi",
        "timestamp": 1600201440
    },
    {
        "content": "<p>Ah interesting! I hadn't seen that</p>",
        "id": 210185473,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201467
    },
    {
        "content": "<p>As an example, but I imagine it would be pretty important to get more tests green</p>",
        "id": 210185491,
        "sender_full_name": "detrumi",
        "timestamp": 1600201476
    },
    {
        "content": "<p>Seems like pretty easy low hanging fruit</p>",
        "id": 210185496,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201478
    },
    {
        "content": "<p>Someone was working on it, right?</p>",
        "id": 210185512,
        "sender_full_name": "Areredify",
        "timestamp": 1600201489
    },
    {
        "content": "<p>Also we got one more builtin trait to care for</p>",
        "id": 210185556,
        "sender_full_name": "Areredify",
        "timestamp": 1600201509
    },
    {
        "content": "<p><code>DiscriminantKind</code></p>",
        "id": 210185575,
        "sender_full_name": "Areredify",
        "timestamp": 1600201521
    },
    {
        "content": "<p>Oh, uh maybe. I think so. Let me double check</p>",
        "id": 210185604,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201542
    },
    {
        "content": "<p>ah yeah, <span class=\"user-mention\" data-user-id=\"335294\">@memoryleak47</span></p>",
        "id": 210185673,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201562
    },
    {
        "content": "<p>probably should ping and assign them if they still want to on github</p>",
        "id": 210185744,
        "sender_full_name": "Areredify",
        "timestamp": 1600201600
    },
    {
        "content": "<p>Good idea</p>",
        "id": 210185774,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201619
    },
    {
        "content": "<p><code>DiscriminantKind</code> .. fun</p>",
        "id": 210185786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201624
    },
    {
        "content": "<p>but that seems relatively low priority</p>",
        "id": 210185861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201657
    },
    {
        "content": "<p>although we may wind up needing it for some things in core or something</p>",
        "id": 210185880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201668
    },
    {
        "content": "<p>yeah, and it's not hard, since we already want type repr data for other builtin traits</p>",
        "id": 210185899,
        "sender_full_name": "Areredify",
        "timestamp": 1600201679
    },
    {
        "content": "<p>/me goes to check what <code>DiscriminantKind</code> is...</p>",
        "id": 210186007,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201714
    },
    {
        "content": "<p>it's basically</p>\n<div class=\"codehilite\"><pre><span></span><code>if (T is enum) {\n   T repr\n} else {\n   u8\n}\n</code></pre></div>",
        "id": 210186045,
        "sender_full_name": "Areredify",
        "timestamp": 1600201742
    },
    {
        "content": "<p>and something something generator repr</p>",
        "id": 210186085,
        "sender_full_name": "Areredify",
        "timestamp": 1600201760
    },
    {
        "content": "<p>we kinda wandered off though</p>",
        "id": 210186134,
        "sender_full_name": "Areredify",
        "timestamp": 1600201785
    },
    {
        "content": "<p>Why do we need to add it?</p>",
        "id": 210186189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> it's used for the <code>std::mem::discriminant</code> API</p>",
        "id": 210186213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201806
    },
    {
        "content": "<p>which returns a <code>Discriminant&lt;T&gt;</code></p>",
        "id": 210186228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201814
    },
    {
        "content": "<p>where <code>T</code> is the type of some enum</p>",
        "id": 210186233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201818
    },
    {
        "content": "<p>(or really any type)</p>",
        "id": 210186246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> because all impls of it are builtin</p>",
        "id": 210186272,
        "sender_full_name": "Areredify",
        "timestamp": 1600201838
    },
    {
        "content": "<p>you have <code>struct Discriminant&lt;T&gt; { value: &lt;T as DiscriminantKind&gt;::Type }</code> or something</p>",
        "id": 210186284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201844
    },
    {
        "content": "<p>oh</p>",
        "id": 210186288,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201846
    },
    {
        "content": "<p>okay</p>",
        "id": 210186291,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201847
    },
    {
        "content": "<p>it's kind of an internal impl detail</p>",
        "id": 210186311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201862
    },
    {
        "content": "<p>We can add it to the list, but let's try to get back on topic</p>",
        "id": 210186321,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201865
    },
    {
        "content": "<p>yeah, I <em>think</em> it's only needed for folks that use that API</p>",
        "id": 210186336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201874
    },
    {
        "content": "<p>which is why I said low priority</p>",
        "id": 210186347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201880
    },
    {
        "content": "<p>the next thing that seems like a relatively easy thing to pick off is <code>ReStatic</code></p>",
        "id": 210186364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201891
    },
    {
        "content": "<p>Yeah, super easy</p>",
        "id": 210186385,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201900
    },
    {
        "content": "<p>I think for now we should probalby just add it to chalk</p>",
        "id": 210186431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201920
    },
    {
        "content": "<p>Some of the work can be stolen from <a href=\"https://github.com/rust-lang/chalk/compare/master...nikomatsakis:outlives\">https://github.com/rust-lang/chalk/compare/master...nikomatsakis:outlives</a></p>",
        "id": 210186432,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201921
    },
    {
        "content": "<p>Nice, always good to have some good-first-issue tasks</p>",
        "id": 210186511,
        "sender_full_name": "detrumi",
        "timestamp": 1600201943
    },
    {
        "content": "<p>in the future we could avoid it <em>potentially</em>, but <code>'static</code> really <em>is</em> special, so I'm not sure if that's necessary</p>",
        "id": 210186513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201943
    },
    {
        "content": "<p>(it's \"top\" in the lattice, or \"bottom\", depending on your POV...)</p>",
        "id": 210186534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600201957
    },
    {
        "content": "<p>I thought I made an issue for that, whoops</p>",
        "id": 210186566,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600201976
    },
    {
        "content": "<p>I will do that after the meeting</p>",
        "id": 210186636,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202010
    },
    {
        "content": "<p>Next blocking item:</p>",
        "id": 210186662,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202022
    },
    {
        "content": "<p>Placeholder canonicalization</p>",
        "id": 210186688,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202032
    },
    {
        "content": "<p>So, this is blocked on <a href=\"https://github.com/rust-lang-nursery/chalk/issues/568\">chalk#568</a>?</p>",
        "id": 210186808,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> I don't remember, did your branch build/pass?</p>",
        "id": 210186836,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202092
    },
    {
        "content": "<p>no</p>",
        "id": 210186843,
        "sender_full_name": "Areredify",
        "timestamp": 1600202098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-09-15/near/210186808\">said</a>:</p>\n<blockquote>\n<p>So, this is blocked on <a href=\"https://github.com/rust-lang-nursery/chalk/issues/568\">chalk#568</a>?</p>\n</blockquote>\n<p>that surprises me a bit :)</p>",
        "id": 210186855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202106
    },
    {
        "content": "<p>it compiled</p>",
        "id": 210186860,
        "sender_full_name": "Areredify",
        "timestamp": 1600202112
    },
    {
        "content": "<p>but we could talk about this issue a bit</p>",
        "id": 210186861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202113
    },
    {
        "content": "<p>it's not blocked per se</p>",
        "id": 210186873,
        "sender_full_name": "Areredify",
        "timestamp": 1600202119
    },
    {
        "content": "<p>I still, uh, am not quite sure what the benefits of canonicalizing placeholders are</p>",
        "id": 210186985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202172
    },
    {
        "content": "<p>well, it is just <em>more</em> canonical, to start</p>",
        "id": 210187005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202184
    },
    {
        "content": "<p>but when we inject clauses into the environment we need to know which bound vars are inference vars and which are placeholder vars</p>",
        "id": 210187008,
        "sender_full_name": "Areredify",
        "timestamp": 1600202186
    },
    {
        "content": "<p>it's on the list of possible meeting topics, maybe we should have a design meeting for it?</p>",
        "id": 210187030,
        "sender_full_name": "detrumi",
        "timestamp": 1600202198
    },
    {
        "content": "<p>to be able to output <code>Ambigious</code> where needed</p>",
        "id": 210187041,
        "sender_full_name": "Areredify",
        "timestamp": 1600202207
    },
    {
        "content": "<p>I see, so they interact</p>",
        "id": 210187053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> yes, I added it to the list</p>",
        "id": 210187102,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202238
    },
    {
        "content": "<p>we could certainly schedule to dig into the canonicalization question next meeting</p>",
        "id": 210187104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202239
    },
    {
        "content": "<p>I figured we probably don't have time to dig in today</p>",
        "id": 210187110,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202246
    },
    {
        "content": "<p>(I remember <span class=\"user-mention\" data-user-id=\"251766\">@Areredify</span> and I also had a conversation about it in some topic, so that might be good for someone (maybe <em>cough</em> me) to review before the meeting to prepare a summary)</p>",
        "id": 210187148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202274
    },
    {
        "content": "<p>works for me</p>",
        "id": 210187229,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202302
    },
    {
        "content": "<p>let's put this off until the design meeting then</p>",
        "id": 210187242,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202314
    },
    {
        "content": "<p>shall I take a \"todo item\" to do some prep for that?</p>",
        "id": 210187252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202325
    },
    {
        "content": "<p>sure</p>",
        "id": 210187254,
        "sender_full_name": "Areredify",
        "timestamp": 1600202325
    },
    {
        "content": "<p>Is there anything else placeholder canonicalization is blocked on?</p>",
        "id": 210187271,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202336
    },
    {
        "content": "<p>I don't think I encountered any other problems</p>",
        "id": 210187313,
        "sender_full_name": "Areredify",
        "timestamp": 1600202355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes, and I'll add it to action items</p>",
        "id": 210187356,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202381
    },
    {
        "content": "<p>Ok, rustc blocking items</p>",
        "id": 210187458,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202417
    },
    {
        "content": "<p>we talked about <code>kind()</code> -&gt; <code>data()</code></p>",
        "id": 210187513,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202441
    },
    {
        "content": "<p>We discussed <code>Binder</code> refactoring last week a bit</p>",
        "id": 210187536,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202455
    },
    {
        "content": "<p><code>Param</code> refactoring/removal</p>",
        "id": 210187552,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202464
    },
    {
        "content": "<p>Um, so</p>",
        "id": 210187558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202468
    },
    {
        "content": "<p>I know <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and I discussed this at one point a bit</p>",
        "id": 210187580,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202483
    },
    {
        "content": "<p>we're getting to some of the harder things</p>",
        "id": 210187585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202487
    },
    {
        "content": "<p>Yeah :/</p>",
        "id": 210187601,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202500
    },
    {
        "content": "<p>my hunch is that this sprint we won't be able to do <em>both</em> \"early bound\" and \"late bound\", but we might achieve one of them</p>",
        "id": 210187702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202545
    },
    {
        "content": "<p>in terms of <code>Param</code> refactoring, I think it comes down to the fact that rustc has a special type variant representing \"early bound\" generic types</p>",
        "id": 210187743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202567
    },
    {
        "content": "<p>Honestly, the <code>Param</code> work I think needs to be done by someone who has a solid-enough foundation of the rustc codebase</p>",
        "id": 210187753,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202571
    },
    {
        "content": "<p>e.g., the <code>T</code> in <code>fn foo&lt;T&gt;() { }</code></p>",
        "id": 210187758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202575
    },
    {
        "content": "<p>and this is used to mean something \"bound\" in some contexts (which then gets replaced)</p>",
        "id": 210187789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202592
    },
    {
        "content": "<p>and something \"free\" in most contexts</p>",
        "id": 210187800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202597
    },
    {
        "content": "<p>But I do agree <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that we probably can't do both late-bound and early-bound work in this sprint</p>",
        "id": 210187814,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202606
    },
    {
        "content": "<p>whereas chalk uses bound and placeholder vars consistently</p>",
        "id": 210187818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202608
    },
    {
        "content": "<p>I guess, paging it back in, that I did feel like the rustc code would benefit from drawing this distinction</p>",
        "id": 210187847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202629
    },
    {
        "content": "<p>I think my <em>fear</em> was that we'd see a perf hit because we'd be doing more substitution</p>",
        "id": 210187855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202637
    },
    {
        "content": "<p>and I remember <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> that I think we had sketched out a <em>bit</em> of how one might start to make this transition?</p>",
        "id": 210187917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202653
    },
    {
        "content": "<p>Yeah, we did discuss a bit</p>",
        "id": 210187949,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202666
    },
    {
        "content": "<p>but if I recall it wasn't all that easy</p>",
        "id": 210187954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202668
    },
    {
        "content": "<p>I don't remember if we ever made a real plan</p>",
        "id": 210187968,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202673
    },
    {
        "content": "<p>We kind of agreed it's better to start with late-bound</p>",
        "id": 210187991,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202687
    },
    {
        "content": "<p>yeah I think my hunch is that it's the kind of refactoring I would do by kind of doing the switch and seeing what breaks, and trying to factor out the fixes into standalone commits</p>",
        "id": 210188012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202698
    },
    {
        "content": "<p>I'm curious how we could surface out the performance question as quickly as possible</p>",
        "id": 210188032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202712
    },
    {
        "content": "<p>at the moment I'm not sure how to do that beyond trying it</p>",
        "id": 210188045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202722
    },
    {
        "content": "<p>True</p>",
        "id": 210188055,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202727
    },
    {
        "content": "<p>I think we shouldn't spend to much time or thought on it</p>",
        "id": 210188075,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202740
    },
    {
        "content": "<p>And just leave it at:</p>",
        "id": 210188082,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202747
    },
    {
        "content": "<p>probably it's not for this sprint, though I might enjoy trying my hand at it, or helping someone else through it</p>",
        "id": 210188098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202759
    },
    {
        "content": "<p>If someone <em>experienced</em> with the rustc codebase wants to tackle it, then we can discuss further an make a plan. Otherwise, we need to leave it for now.</p>",
        "id": 210188159,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202779
    },
    {
        "content": "<p>I would love to see you take a stab at it <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 210188171,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202793
    },
    {
        "content": "<p>You would honestly be the best person to try</p>",
        "id": 210188183,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202801
    },
    {
        "content": "<p>maybe <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span></p>",
        "id": 210188207,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202811
    },
    {
        "content": "<p>Anyways, let's move on</p>",
        "id": 210188243,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202834
    },
    {
        "content": "<p>That's all the rustc integration blocking work</p>",
        "id": 210188263,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202845
    },
    {
        "content": "<p>At least, nothing else comes to mind right now</p>",
        "id": 210188272,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202855
    },
    {
        "content": "<p>I guess the question is whether there are immediate steps for late-bound? but maybe we've got enough work lined up for now and we can revisit it we run out</p>",
        "id": 210188283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202861
    },
    {
        "content": "<p>there aren't <em>that</em> many folks clamoring for issues to pick up</p>",
        "id": 210188295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202871
    },
    {
        "content": "<p>I have a WIP branch for late-bound I think</p>",
        "id": 210188303,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202874
    },
    {
        "content": "<p>that's another case where I think the target is a bit unclear</p>",
        "id": 210188369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202896
    },
    {
        "content": "<p><a href=\"https://github.com/jackh726/rust/tree/binder-refactor\">https://github.com/jackh726/rust/tree/binder-refactor</a></p>",
        "id": 210188381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202902
    },
    {
        "content": "<p>I started by just seeing if I could just <em>count</em> the bound vars</p>",
        "id": 210188475,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202959
    },
    {
        "content": "<p>And see what kind of perf effects it had</p>",
        "id": 210188499,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600202967
    },
    {
        "content": "<p>ah interesting</p>",
        "id": 210188544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600202997
    },
    {
        "content": "<p>there is also strictly more data to intern</p>",
        "id": 210188621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600203013
    },
    {
        "content": "<p>i.e., in chalk, we intern a list of generic-arg-kinds per binder</p>",
        "id": 210188637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600203021
    },
    {
        "content": "<p>whereas rustc just recomputes that info on demand</p>",
        "id": 210188653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600203027
    },
    {
        "content": "<p>right</p>",
        "id": 210188682,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203039
    },
    {
        "content": "<p>quick question, do we expect chalk to improve rustc performance in the long run, once it's been fully integrated?</p>",
        "id": 210188695,
        "sender_full_name": "detrumi",
        "timestamp": 1600203048
    },
    {
        "content": "<p>well I think that's a good idea to measure that way</p>",
        "id": 210188738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600203067
    },
    {
        "content": "<p>I always had hoped the answer to that to be \"yes\"</p>",
        "id": 210188755,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203072
    },
    {
        "content": "<p>I expect so, because of increased caching</p>",
        "id": 210188764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600203075
    },
    {
        "content": "<p>as well as the opportunity to optimize the solver independently from the rest of rust</p>",
        "id": 210188778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600203083
    },
    {
        "content": "<p>as well as some other details of how rustc works</p>",
        "id": 210188810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600203098
    },
    {
        "content": "<p>that I believe make it do similar work many times</p>",
        "id": 210188817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600203104
    },
    {
        "content": "<p>however, some of those gains can be realized within rustc itself (most notably more caching), and we've done some of that</p>",
        "id": 210188836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600203115
    },
    {
        "content": "<p>so it may turn out be less than i'd have hoped</p>",
        "id": 210188903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600203140
    },
    {
        "content": "<p>right, but we can frame the performance losses as an investment for future performance wins</p>",
        "id": 210188911,
        "sender_full_name": "detrumi",
        "timestamp": 1600203144
    },
    {
        "content": "<p>Plus, a good deal of work has already gone into rustc to make it fast(er)</p>",
        "id": 210188958,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203171
    },
    {
        "content": "<p>Whereas for Chalk, we've done like no perf optimizations</p>",
        "id": 210188983,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203189
    },
    {
        "content": "<p>to start out chalk will be slower, yeah, but I was mainly wondering about long-term</p>",
        "id": 210189012,
        "sender_full_name": "detrumi",
        "timestamp": 1600203209
    },
    {
        "content": "<p>Anyways, let's for the last few minutes take about design meetings</p>",
        "id": 210189052,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203235
    },
    {
        "content": "<p>\"slowing the compiler some more in 2021\" blogpost to announce chalk integration</p>",
        "id": 210189061,
        "sender_full_name": "Areredify",
        "timestamp": 1600203241
    },
    {
        "content": "<p>So, I came up with a few meetings to think about this sprint</p>",
        "id": 210189113,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203252
    },
    {
        "content": "<ul>\n<li>Placeholder canonicalization</li>\n<li>Removing <code>Param</code> in rustc</li>\n<li>Const evaluation</li>\n<li>Canonical vs. instantiated program clauses</li>\n</ul>",
        "id": 210189191,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203289
    },
    {
        "content": "<p>The first and fourth seem to be related</p>",
        "id": 210189204,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203298
    },
    {
        "content": "<p>Or at least, seem like they can be discussed together</p>",
        "id": 210189227,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203308
    },
    {
        "content": "<p>oh I really want to discuss what do we consider well formed</p>",
        "id": 210189354,
        "sender_full_name": "Areredify",
        "timestamp": 1600203365
    },
    {
        "content": "<p>it does feel like we hit questions about that and I don't have a crisp idea what our strategy is</p>",
        "id": 210189395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600203385
    },
    {
        "content": "<p>it keeps coming up and we never resolve it</p>",
        "id": 210189401,
        "sender_full_name": "Areredify",
        "timestamp": 1600203388
    },
    {
        "content": "<p>Example of a question?</p>",
        "id": 210189426,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203403
    },
    {
        "content": "<p><a href=\"#narrow/stream/144729-wg-traits/topic/dyn.20X.20.2B.20'a.20isn't.20well-formed/near/209903718\">link</a></p>",
        "id": 210189497,
        "sender_full_name": "Areredify",
        "timestamp": 1600203446
    },
    {
        "content": "<p>Ah interesting</p>",
        "id": 210189587,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203483
    },
    {
        "content": "<p>Okay, yeah, I guess good design meeting topic</p>",
        "id": 210189611,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203493
    },
    {
        "content": "<p>Do we just want to schedule one meeting at a time?</p>",
        "id": 210189620,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203502
    },
    {
        "content": "<p>(unless there are people that want to attend any one particular discussion but are limited to specific dates)</p>",
        "id": 210189682,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203529
    },
    {
        "content": "<p>So placeholder canonicalization next week?</p>",
        "id": 210189819,
        "sender_full_name": "detrumi",
        "timestamp": 1600203590
    },
    {
        "content": "<p>Okay, so next week we will discussion canonical vs intantiated vars in clauses and placeholder canonicalization</p>",
        "id": 210189820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203592
    },
    {
        "content": "<p>I have to run but thanks all; I'll prep a bit for meeting and also work on creating issues</p>",
        "id": 210189933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600203637
    },
    {
        "content": "<p>Okay, 5:00 now</p>",
        "id": 210189934,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203637
    },
    {
        "content": "<p>Thanks everyone for coming</p>",
        "id": 210189946,
        "sender_full_name": "Jack Huey",
        "timestamp": 1600203644
    }
]