[
    {
        "content": "<p>afaik the idea of canonicalization is to replace inference vars with some placeholders to allow for sensible caching of queries.</p>\n<p>i.e. the basic idea is</p>\n<div class=\"codehilite\"><pre><span></span><code>value with infer vars\ncanonicalized value (and keeping some map between the resulting placeholders and infer vars `G`)\n--- entering query\nreplace placeholders with new infer vars (and remember which infer vars correspond to the placeholders using some storage `S`)\nexecute &quot;the actual query&quot;\npackage result + `S`, once again replacing infer vars with placeholders\n---exit query\nreplace the placeholders in the result with new infer vars\nunify `G` with `S`\n</code></pre></div>",
        "id": 250038123,
        "sender_full_name": "lcnr",
        "timestamp": 1629401874
    },
    {
        "content": "<p>canonicalization replaces inference vars with bound vars, not placeholders</p>",
        "id": 250038370,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629401969
    },
    {
        "content": "<p>oups</p>",
        "id": 250038420,
        "sender_full_name": "lcnr",
        "timestamp": 1629401998
    },
    {
        "content": "<p>so my question was what we want to do when encountering <em>bound vars</em> during canonicalization</p>",
        "id": 250038542,
        "sender_full_name": "lcnr",
        "timestamp": 1629402045
    },
    {
        "content": "<p>theoretically nothing</p>",
        "id": 250038579,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629402065
    },
    {
        "content": "<p>it seems to me like that should always indicate a bug, i.e. we canonicalize an already canonicalized value</p>",
        "id": 250038587,
        "sender_full_name": "lcnr",
        "timestamp": 1629402067
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/2451f42c1deb9379d5e8e5fa86b0bf857ae048ec/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs#L371\">https://github.com/rust-lang/rust/blob/2451f42c1deb9379d5e8e5fa86b0bf857ae048ec/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs#L371</a></p>",
        "id": 250038701,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629402122
    },
    {
        "content": "<p>probably, yeah, that is a bug</p>",
        "id": 250038768,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629402136
    },
    {
        "content": "<p>i mixed up placeholder with bound type again, because i remembered bound types to be the <code>T</code> in <code>for&lt;T&gt; Trait&lt;T&gt;</code> as it is bound by the <code>forall</code>. While canonicalization replaces inference vars with some placeholders for canonicalization <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 250039155,
        "sender_full_name": "lcnr",
        "timestamp": 1629402304
    },
    {
        "content": "<p>names :(</p>",
        "id": 250039169,
        "sender_full_name": "lcnr",
        "timestamp": 1629402311
    },
    {
        "content": "<p>what's actually referred to by the name <code>Bound</code> here?</p>",
        "id": 250039270,
        "sender_full_name": "lcnr",
        "timestamp": 1629402357
    },
    {
        "content": "<p>i.e. what binds the bound variable during canoncalization</p>",
        "id": 250039376,
        "sender_full_name": "lcnr",
        "timestamp": 1629402390
    },
    {
        "content": "<p>well, canonicalization replaces inference vars with bound vars. But selection/confirmation \"unfolds\" one layer of binding and converts the vars to placeholders</p>",
        "id": 250039524,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629402452
    }
]