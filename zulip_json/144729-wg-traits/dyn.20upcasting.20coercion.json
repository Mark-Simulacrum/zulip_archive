[
    {
        "content": "<p>( I think we should probably make a spin-off, or adapt that template, for initiatives, it isn't <em>quite</em> right )</p>",
        "id": 250619460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629898073
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/dyn-upcasting-coercion-initiative\">https://github.com/nikomatsakis/dyn-upcasting-coercion-initiative</a></p>",
        "id": 250619662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629898135
    },
    {
        "content": "<p>Oh i tried to rename this stream but seems i failed...</p>",
        "id": 250620441,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629898487
    },
    {
        "content": "<p>I've accepted the invitation. Now i'll update the repo.</p>",
        "id": 250621508,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629898980
    },
    {
        "content": "<p>We have safe <code>self: *const Self</code> trait methods (with <code>#[feature(arbitrary_self_types)]</code>) so metadata must always be valid anyways, right?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(arbitrary_self_types)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250630279,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1629902730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/144729-wg-traits/topic/dyn.20upcasting.20coercion/near/250616737\">said</a>:</p>\n<blockquote>\n<ol>\n<li>Announce that every fat pointer needs to have valid metadata part.<br>\n    Needs to switch the <code>std::ptr::from_raw_parts{,_mut}</code> APIs to be unsafe.<br>\n    And updates other documentations.</li>\n</ol>\n</blockquote>\n<p>I don’t fully understand why <code>from_raw_parts</code> would need to be unsafe. I thought there’s no way of creating an invalid <code>DynMetadata&lt;dyn Trait&gt;</code>.</p>",
        "id": 250631103,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1629903119
    },
    {
        "content": "<p>We can already simulate the <code>*const dyn _</code>-upcasting in a <code>Bar: Foo</code> hierarchy with arbitrary-self-types alone, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(arbitrary_self_types)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FooUpcast</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo_upcast</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FooUpcast</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo_upcast</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"nc\">FooUpcast</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">some_foo_method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">some_bar_method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">demo</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">foo_upcast</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">some_foo_method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">some_bar_method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">demo2</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">null</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">foo_upcast</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250632517,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1629903717
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> feel free to push (or open a PR) to extend the design questions etc, but in particular I'd appreciate review/and-or edits of <a href=\"https://github.com/nikomatsakis/dyn-upcasting-coercion-initiative/blob/master/design-questions/upcast-safety.md\">this page</a></p>",
        "id": 250641660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629907921
    },
    {
        "content": "<p>Repo link: <a href=\"https://github.com/nikomatsakis/dyn-upcasting-coercion-initiative\">https://github.com/nikomatsakis/dyn-upcasting-coercion-initiative</a></p>",
        "id": 250641713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629907934
    },
    {
        "content": "<p>Giving it a brief read, i think it's a lot better written than mine version :)  I've written the a first version of the vtable page, but i need to add the original alternatives.</p>",
        "id": 250642402,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629908238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280891\">@Frank Steffahn</span> pointed out that there's no safe way to create an \"incompatible\" trait object metadata to be used by <code>from_raw_parts</code>. I think they're correct.</p>",
        "id": 250643545,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629908704
    },
    {
        "content": "<p>Created <a href=\"https://github.com/nikomatsakis/dyn-upcasting-coercion-initiative/pull/1/\">https://github.com/nikomatsakis/dyn-upcasting-coercion-initiative/pull/1/</a></p>",
        "id": 250652774,
        "sender_full_name": "Charles Lew",
        "timestamp": 1629912809
    },
    {
        "content": "<p>merged</p>",
        "id": 250658563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629915286
    },
    {
        "content": "<p>Posted my experience report at <a href=\"https://github.com/rust-lang/dyn-upcasting-coercion-initiative/issues/2\">https://github.com/rust-lang/dyn-upcasting-coercion-initiative/issues/2</a></p>",
        "id": 251037919,
        "sender_full_name": "Charles Lew",
        "timestamp": 1630137088
    },
    {
        "content": "<p>Another at <a href=\"https://github.com/rust-lang/dyn-upcasting-coercion-initiative/issues/3\">https://github.com/rust-lang/dyn-upcasting-coercion-initiative/issues/3</a></p>",
        "id": 251039582,
        "sender_full_name": "Charles Lew",
        "timestamp": 1630139028
    },
    {
        "content": "<p>awesome!</p>",
        "id": 251240278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630334728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/144729-wg-traits/topic/dyn.20upcasting.20coercion/near/250616610\">said</a>:</p>\n<blockquote>\n<p>However, there's one remaining issue related-to raw pointers.<br>\n<code>fn foo(v: *const dyn Foo) -&gt; * const dyn Bar { v }</code></p>\n<p>currently compiles. If v is arbitrarily created using<br>\n<code>std::ptr::from_raw_parts</code>(an unstable safe API), <code>foo</code> can cause UB when it tries to read the vtable contents(with multiple inheritance).</p>\n</blockquote>\n<p>is that true? when I checked the std::ptr metadata APIs, they were actually careful about \"hiding\" vtables in a way that you could not make up the vtable ptr. Or did I miss something?</p>",
        "id": 251485862,
        "sender_full_name": "RalfJ",
        "timestamp": 1630459025
    },
    {
        "content": "<p>specifically, the <code>Metadata</code> associated type is <a href=\"https://doc.rust-lang.org/nightly/std/ptr/struct.DynMetadata.html\">https://doc.rust-lang.org/nightly/std/ptr/struct.DynMetadata.html</a> when the unsized tail is a dyn Trait</p>",
        "id": 251485946,
        "sender_full_name": "RalfJ",
        "timestamp": 1630459094
    },
    {
        "content": "<p>(still catching up with this thread)</p>",
        "id": 251485952,
        "sender_full_name": "RalfJ",
        "timestamp": 1630459101
    },
    {
        "content": "<p>(ah Frank already said as much)</p>",
        "id": 251486094,
        "sender_full_name": "RalfJ",
        "timestamp": 1630459218
    },
    {
        "content": "<p>as noted on GH, this is also related to the question whether <code>size_of_val_raw</code> can be safe or not -- it might be about time we decide on the validity and safety invariants of metadata of raw ptrs</p>",
        "id": 251486125,
        "sender_full_name": "RalfJ",
        "timestamp": 1630459259
    },
    {
        "content": "<p>(but then, doing so might preclude some variants of custom DSTs, if we still want to keep the door open for those)</p>",
        "id": 251486139,
        "sender_full_name": "RalfJ",
        "timestamp": 1630459279
    },
    {
        "content": "<p>I think it'll be better for \"raw pointers\" to be actually raw, aka metadata doesn't have to be valid. That means:</p>\n<ul>\n<li>Raw ptr construction takes the form of</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">from_raw_parts</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Pointee</span><span class=\"o\">&gt;</span>::<span class=\"n\">Metadata</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>Raw ptr upcasting coercion becomes unsafe.</li>\n<li>Methods that have raw ptr as receiver are not object safe</li>\n</ul>",
        "id": 251584901,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630512389
    },
    {
        "content": "<p>why does the upcasting have to be unsafe? you can't dereference the invalid upcasted raw pointer without unsafe?</p>",
        "id": 251588836,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1630513816
    },
    {
        "content": "<p>With upcasting it may be necessary to load a vtable for the new trait object from the vtable of the old trait object. This requires the vtable to be valid.</p>",
        "id": 251589014,
        "sender_full_name": "bjorn3",
        "timestamp": 1630513891
    },
    {
        "content": "<p>the jury is still out on whether dyn metadata has to be valid though, right?</p>",
        "id": 251589196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630513961
    },
    {
        "content": "<p>(oh, I see this is the subject of discussion)</p>",
        "id": 251589465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630514064
    },
    {
        "content": "<p>Progress report:<br>\nIn the last two weeks we switched this into in an <a href=\"https://github.com/rust-lang/dyn-upcasting-coercion-initiative/\">t-lang initiative</a>. And there're two experience reports now. On the implementation side, we're still pending on <a href=\"https://rust-lang.github.io/dyn-upcasting-coercion-initiative/design-discussions/upcast-safety.html\">t-lang decision on upcast-safety matter</a>, so nothing much happened.</p>",
        "id": 252871081,
        "sender_full_name": "Charles Lew",
        "timestamp": 1631322477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> oh, thanks-- I forgot we were blocked on that!</p>",
        "id": 253083071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631537244
    },
    {
        "content": "<p>I'll try to move that along :)</p>",
        "id": 253083087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631537254
    },
    {
        "content": "<p>it may require a design meeting</p>",
        "id": 253083095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631537258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> ping</p>",
        "id": 254082784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632157262
    },
    {
        "content": "<p><em>so</em> I didn't move that along</p>",
        "id": 254082794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632157267
    },
    {
        "content": "<p>I am trying to remember if you and I had a proposal, I think we did, right?</p>",
        "id": 254082821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632157279
    },
    {
        "content": "<p>yes</p>",
        "id": 254082845,
        "sender_full_name": "Charles Lew",
        "timestamp": 1632157288
    },
    {
        "content": "<p>which option did we like best :)</p>",
        "id": 254082857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632157294
    },
    {
        "content": "<p>we talked about making sure raw fat pointers always have a valid vtable ptr</p>",
        "id": 254082982,
        "sender_full_name": "Charles Lew",
        "timestamp": 1632157337
    },
    {
        "content": "<p>the first choice of the three.</p>",
        "id": 254083026,
        "sender_full_name": "Charles Lew",
        "timestamp": 1632157355
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/dyn-upcasting-coercion-initiative/design-discussions/upcast-safety.html#unsafe-to-create-a-dyn-foo\">https://rust-lang.github.io/dyn-upcasting-coercion-initiative/design-discussions/upcast-safety.html#unsafe-to-create-a-dyn-foo</a></p>",
        "id": 254083102,
        "sender_full_name": "Charles Lew",
        "timestamp": 1632157392
    },
    {
        "content": "<p>The zulip discussion context was here: <a href=\"#narrow/stream/144729-wg-traits/topic/dyn.20upcasting.20coercion/near/250618801\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/dyn.20upcasting.20coercion/near/250618801</a></p>",
        "id": 254083831,
        "sender_full_name": "Charles Lew",
        "timestamp": 1632157703
    },
    {
        "content": "<p>that's what I figured</p>",
        "id": 254084592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632158041
    },
    {
        "content": "<p>thanks</p>",
        "id": 254084642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632158045
    },
    {
        "content": "<p>I think I will open an issue around it</p>",
        "id": 254084653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632158054
    },
    {
        "content": "<p>np</p>",
        "id": 254084658,
        "sender_full_name": "Charles Lew",
        "timestamp": 1632158054
    },
    {
        "content": "<p>we discussed this in the rust-lang meeting today, decision was to make a design meeting discussion</p>",
        "id": 254345502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632306277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> do you think you would want to attend?</p>",
        "id": 254345512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632306281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if it's a text-based discussion, i'd love to attend if i can. i'm available on 19:00pm~26:00pm on weekdays, and 11:00 am~26:00pm at weekends.</p>",
        "id": 254345918,
        "sender_full_name": "Charles Lew",
        "timestamp": 1632306524
    },
    {
        "content": "<p>well, 26:00 i mean 2am in the next day.</p>",
        "id": 254345977,
        "sender_full_name": "Charles Lew",
        "timestamp": 1632306564
    },
    {
        "content": "<p>i'm in UTC+8</p>",
        "id": 254345989,
        "sender_full_name": "Charles Lew",
        "timestamp": 1632306573
    }
]