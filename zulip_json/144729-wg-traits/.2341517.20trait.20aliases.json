[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sure</p>",
        "id": 135849675,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539628781
    },
    {
        "content": "<p>so what overall approach have you been taking?</p>",
        "id": 135849760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539628833
    },
    {
        "content": "<p>so, I'll be honest, I'm just getting into traits in the compiler lately, and it's a little overwhelming. but I'm wading through slowly thanks to the rustc-guide, @durka's PR, and your notes on that PR</p>",
        "id": 135849799,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539628880
    },
    {
        "content": "<p>modifying how selection is done</p>",
        "id": 135849806,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539628893
    },
    {
        "content": "<p>adding a new TraitAliasCandidate (with your suggested definition)</p>",
        "id": 135849829,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539628913
    },
    {
        "content": "<p>vtable tomfoolery</p>",
        "id": 135849877,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539628934
    },
    {
        "content": "<p>I was wondering if it would make sense to base candidate assembly &amp; confirm for trait alias off existing code?</p>",
        "id": 135849906,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539628970
    },
    {
        "content": "<p>can I reuse anything?</p>",
        "id": 135849907,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539628972
    },
    {
        "content": "<p>let me review what I wrote before :)</p>",
        "id": 135849948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629027
    },
    {
        "content": "<p>sure</p>",
        "id": 135850129,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629176
    },
    {
        "content": "<p>want a link?</p>",
        "id": 135850133,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629178
    },
    {
        "content": "<p>you suggested two different approaches, and I picked the one that sounded lightly cleaner/easier to me, even though I think you slightly preferred the other (sorry)</p>",
        "id": 135850151,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629212
    },
    {
        "content": "<p>I just re-read the PR</p>",
        "id": 135850260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629353
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/45047\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/45047\">https://github.com/rust-lang/rust/pull/45047</a></p>",
        "id": 135850264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629359
    },
    {
        "content": "<p>yep that's it</p>",
        "id": 135850352,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629445
    },
    {
        "content": "<p>I am torn here because I would definitely like to see progress on trait aliases</p>",
        "id": 135850355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629449
    },
    {
        "content": "<p>but I can't help but think this would be so much easier to do via chalk</p>",
        "id": 135850360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629459
    },
    {
        "content": "<p>I linked in the meeting notes, I just forgot ha</p>",
        "id": 135850362,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629459
    },
    {
        "content": "<p>I agree.</p>",
        "id": 135850366,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629464
    },
    {
        "content": "<p>I don't mind this being stop-gap</p>",
        "id": 135850375,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629469
    },
    {
        "content": "<p>in any case we could adapt <code>select.rs</code> with <em>relative</em> ease, I think</p>",
        "id": 135850386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629496
    },
    {
        "content": "<p>i'm not sure what is the best template but I think</p>",
        "id": 135850398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629508
    },
    {
        "content": "<p>well it's sort of a hybrid between impls + where-clauses</p>",
        "id": 135850406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629520
    },
    {
        "content": "<p>I guess a bit diferent from both too;)</p>",
        "id": 135850469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629553
    },
    {
        "content": "<p>let's worry first about <code>T: TraitAlias</code> as a \"goal\" — that is, something we have to prove</p>",
        "id": 135850494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629585
    },
    {
        "content": "<p>in that case, you would basically <em>always</em> have a candidate that is successful</p>",
        "id": 135850509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629603
    },
    {
        "content": "<p>it doesn't need to do any unification etc</p>",
        "id": 135850517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629609
    },
    {
        "content": "<p>but it would produce a vtable with derived goals that are equal to the <code>predicates_of</code> instantiated</p>",
        "id": 135850524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629625
    },
    {
        "content": "<p>with the substitution</p>",
        "id": 135850525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629626
    },
    {
        "content": "<p>pretty straight-forward really</p>",
        "id": 135850532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629630
    },
    {
        "content": "<p>the reverse direction would be handled by extending elaboration</p>",
        "id": 135850575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629644
    },
    {
        "content": "<p>hmm</p>",
        "id": 135850593,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629663
    },
    {
        "content": "<p>I guess.. now that I think about it.. it would be nicer with chalk but it should also be a fairly self-contained edit to the existing system</p>",
        "id": 135850597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629666
    },
    {
        "content": "<p>well, so, I'm not sure if any of that made sense :P</p>",
        "id": 135850609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629679
    },
    {
        "content": "<p>I can try to write some mentoring instructions somewhere</p>",
        "id": 135850611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629684
    },
    {
        "content": "<p>do you have an open PR?</p>",
        "id": 135850614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629688
    },
    {
        "content": "<p>I've got to go now for a meeting though</p>",
        "id": 135850617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629693
    },
    {
        "content": "<p>I don't, but let me create one now</p>",
        "id": 135850619,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629694
    },
    {
        "content": "<p>please do write some mentoring instructions, I'd much appreciate it :-)</p>",
        "id": 135850628,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629703
    },
    {
        "content": "<p>also, what would <code>TraitAliasCandidate</code> look like?</p>",
        "id": 135850636,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629710
    },
    {
        "content": "<p>ok, it seems like the tracking issue sort of dominated by unrelated bikeshedding</p>",
        "id": 135850637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629713
    },
    {
        "content": "<p>yeah heh</p>",
        "id": 135850644,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629726
    },
    {
        "content": "<p>ping me with the PR # once you open it</p>",
        "id": 135850713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629796
    },
    {
        "content": "<p>and we can use this thread to communicate too</p>",
        "id": 135850718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629809
    },
    {
        "content": "<p>this should be mildly easier to write some notes on than the impl trait stuff ;)</p>",
        "id": 135850724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629824
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/55101\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55101\">https://github.com/rust-lang/rust/pull/55101</a><br>\nhere you go</p>",
        "id": 135850736,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629832
    },
    {
        "content": "<p>yeah ha</p>",
        "id": 135850744,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629842
    },
    {
        "content": "<p>though I think I understand where you want to go with the impl Trait stuff better at this point ;-)</p>",
        "id": 135850752,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629857
    },
    {
        "content": "<p>anyway I'm off to eat now, but may give this a go in a few hours if you've written notes by then. no worries if not.</p>",
        "id": 135850777,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629885
    },
    {
        "content": "<p>great, I have a meeting for next hour so not before then :)</p>",
        "id": 135850811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539629894
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span>🏼</p>",
        "id": 135850815,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629895
    },
    {
        "content": "<p>and thanks</p>",
        "id": 135850816,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539629897
    },
    {
        "content": "<p>cc me when aliases are in a usable state, <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>; I'm keen not to lose track of the status, so that the feature name / keyword issues aren't overlooked</p>",
        "id": 135888127,
        "sender_full_name": "varkor",
        "timestamp": 1539681214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> <a href=\"https://github.com/rust-lang/rust/pull/55101#pullrequestreview-165147727\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55101#pullrequestreview-165147727\">first round of comments is available</a></p>",
        "id": 135900461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539697225
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> <a href=\"https://github.com/rust-lang/rust/pull/55101#pullrequestreview-165147727\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55101#pullrequestreview-165147727\">first round of comments is available</a></p>\n</blockquote>\n<p>thanks!</p>",
        "id": 135915278,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539710883
    },
    {
        "content": "<blockquote>\n<p>cc me when aliases are in a usable state, <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>; I'm keen not to lose track of the status, so that the feature name / keyword issues aren't overlooked</p>\n</blockquote>\n<p>sure</p>",
        "id": 135915292,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539710888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> wait, where did you leave the questions you wanted me to answer? were they in <a href=\"https://github.com/rust-lang/rust/issues/55101\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55101\">#55101</a> ?</p>",
        "id": 136059173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539884416
    },
    {
        "content": "<p>if so, I don't see them :)</p>",
        "id": 136059181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539884420
    },
    {
        "content": "<p>or I guess maybe you mean this:</p>\n<blockquote>\n<p>Any advice on writing confirm_trait_alias_candidate in traits/project.rs, or the VtableTraitAlias arm for resolve_associated_item in ty/instance.rs?</p>\n</blockquote>",
        "id": 136059189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539884431
    },
    {
        "content": "<p>Yeah</p>",
        "id": 136059190,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539884432
    },
    {
        "content": "<p>hmm</p>",
        "id": 136059200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539884445
    },
    {
        "content": "<p>I don't think that should be possible</p>",
        "id": 136059206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539884450
    },
    {
        "content": "<p>since they have no associated items</p>",
        "id": 136059210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539884455
    },
    {
        "content": "<p>unless i'm mis-remembering something, I think you can just put <code>unreachable!()</code></p>",
        "id": 136059220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539884468
    },
    {
        "content": "<p>There are <code>TODO</code> comments in the relevant bits of code I think</p>",
        "id": 136059223,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539884470
    },
    {
        "content": "<p>or — better yet — <code>span_bug!</code></p>",
        "id": 136059227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539884475
    },
    {
        "content": "<p>Oh okay, cool.</p>",
        "id": 136059229,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539884481
    },
    {
        "content": "<p>is that pushed to the PR?</p>",
        "id": 136059230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539884483
    },
    {
        "content": "<p>Yep</p>",
        "id": 136059234,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539884489
    },
    {
        "content": "<p>it didn't look different...</p>",
        "id": 136059237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539884494
    },
    {
        "content": "<p>I think so</p>",
        "id": 136059239,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539884495
    },
    {
        "content": "<p>maybe I missed something</p>",
        "id": 136059240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539884496
    },
    {
        "content": "<p>Hmm</p>",
        "id": 136059241,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539884499
    },
    {
        "content": "<blockquote>\n<p>alexreg committed 7 days ago</p>\n</blockquote>",
        "id": 136059245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539884508
    },
    {
        "content": "<p>I think you didn't push :)</p>",
        "id": 136059290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539884526
    },
    {
        "content": "<p>Try now. I’m on the move, so had to VPN in to push. ;-)</p>",
        "id": 136060417,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539885595
    },
    {
        "content": "<p>Anyway the test failures are just tests I need to bless I think. Though you can check.</p>",
        "id": 136060717,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539885803
    },
    {
        "content": "<p>More interested in those question points now. Maybe it’s as simple as stubbing out with span_bug as ypu said thpugh! And probably getting trait objects working after.</p>",
        "id": 136060823,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539885891
    },
    {
        "content": "<p>yep, I left a comment, but it just repeated that</p>",
        "id": 136060982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539886036
    },
    {
        "content": "<p>as far as trait objects go...</p>",
        "id": 136060988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539886044
    },
    {
        "content": "<p>I'll have to look about to remember</p>",
        "id": 136061000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539886061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Okay thanks. Look forward to hearing about that! After which I can bug you about impl-trait-in-bindings again heh.</p>",
        "id": 136063199,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539888268
    },
    {
        "content": "<p>so \"trait aliases\" are really like \"trait bound aliases\"?</p>",
        "id": 136064516,
        "sender_full_name": "varkor",
        "timestamp": 1539889539
    },
    {
        "content": "<p>I had thought they were general bounds, but this is even stranger</p>",
        "id": 136064542,
        "sender_full_name": "varkor",
        "timestamp": 1539889562
    },
    {
        "content": "<p>General in what sense? They include lifetimes yes.</p>",
        "id": 136066220,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539891159
    },
    {
        "content": "<blockquote>\n<p>I had thought they were general bounds, but this is even stranger</p>\n</blockquote>\n<p>they are general bounds?</p>",
        "id": 136066243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539891201
    },
    {
        "content": "<p>I think perhaps you mean, can I express any sort of where clause?</p>",
        "id": 136066260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539891225
    },
    {
        "content": "<p>I forget the exact syntax, but I think you can write something like (e.g.)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">PartialEq</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136066315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539891257
    },
    {
        "content": "<p>they are obviously \"biased\" to work like the stuff that comes after a <code>:</code>, so that you can write (e.g.)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Printable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><span class=\"emoji emoji-1f60d\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 136066332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539891286
    },
    {
        "content": "<p>Yeah you can. :-)</p>",
        "id": 136066337,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539891292
    },
    {
        "content": "<p>It’s in the RFC and I believe <span class=\"user-mention\" data-user-id=\"125958\">@Alex Burka</span> already implemented the parsing fully.</p>",
        "id": 136066360,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539891325
    },
    {
        "content": "<p>isn't <code>trait X = 'static;</code> a valid alias?</p>",
        "id": 136070534,
        "sender_full_name": "varkor",
        "timestamp": 1539895501
    },
    {
        "content": "<p>It is yes.</p>",
        "id": 136073854,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539899060
    },
    {
        "content": "<p>Where are trait object types created in the codebase?</p>",
        "id": 136119338,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539963486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> </p>\n<blockquote>\n<p>Where are trait object types created in the codebase?</p>\n</blockquote>\n<p>I'm taking the liberty of replying in this topic =) Are you looking for where the \"trait safety\" restrictions are checked? Trait alias types are created in <a href=\"http://astconv.rs\" target=\"_blank\" title=\"http://astconv.rs\">astconv.rs</a>, I think</p>",
        "id": 136134911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539979006
    },
    {
        "content": "<p>specifically, <a href=\"https://github.com/rust-lang/rust/blob/74ff7dcb1388e60a613cd6050bcd372a3cc4998b/src/librustc_typeck/astconv.rs#L1084\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/74ff7dcb1388e60a613cd6050bcd372a3cc4998b/src/librustc_typeck/astconv.rs#L1084\">on this line</a></p>",
        "id": 136135036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539979137
    },
    {
        "content": "<p>Oh. I sent the message in this topic, didn't I? (as well as on Discord)</p>",
        "id": 136135339,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539979405
    },
    {
        "content": "<p>anyway, thanks</p>",
        "id": 136135345,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539979414
    },
    {
        "content": "<p>although I think I need to go up the call tree from there... since I'm more interested in the point at which it's actually decided it's a trait object. I'm also interested in the decision point for <code>&amp;Trait</code>. is this separate, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 136135570,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539979659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sorry, I'm an idiot. somehow ended up posting in the high-level docs sub-topic. not sure how that happened.</p>",
        "id": 136137662,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1539981948
    },
    {
        "content": "<p>Okay, I think I have a good idea how to go about this... <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> gave me some good advice over on Discord.</p>",
        "id": 136150054,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540001016
    },
    {
        "content": "<p>The only question is, should I do the substitution of trait aliases for multiple trait bounds (a PoltytraitRef?) at HIR lowering or type resolution time.</p>",
        "id": 136150099,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540001064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  or thirdly, at astconv time</p>",
        "id": 136232924,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540161713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Okay, I was trying to implement it in lowering, and to my utter surprise, it started working with a more-or-less trivial change!</p>",
        "id": 136235125,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540165697
    },
    {
        "content": "<p>Even transitive aliases</p>",
        "id": 136235126,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540165703
    },
    {
        "content": "<p>errors properly too (displaying the trait alias name rather than the \"expanded\" version... not sure if this is what is desirable; it's not obvious)</p>",
        "id": 136235189,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540165847
    },
    {
        "content": "<p>Quite incredible. I thought I knew what had to be done to make it work, but there we go. :-P</p>",
        "id": 136235195,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540165873
    },
    {
        "content": "<p>Anyway see my latest push on the PIR. WIP tests in <code> src/test/run-pass/traits/trait-alias.rs</code> right now</p>",
        "id": 136235198,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540165891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> All tests passing now, except one. <code>src/test/ui/trait-alias-fail.rs</code> -- the first impl succeeds (but shouldn't), while the second impl fails (as it should). the RFC indicates both should fail, I believe. what would you expect in this scenario? and in whatever case, how can we remedy this? I'm hoping my simple solution to trait aliases as object types can remain this simple, and we can just work around this...</p>",
        "id": 136240855,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540175669
    },
    {
        "content": "<p>Which was one of the causes for bikeshedxing on the name.</p>",
        "id": 136269993,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540217545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> will take a look hopefully today :)</p>",
        "id": 136279197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540226615
    },
    {
        "content": "<p>exciting to see you made good progress</p>",
        "id": 136279198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540226618
    },
    {
        "content": "<p>does anyone know what happened to the lints for dyn Trait? I don't get them any more on nightly</p>",
        "id": 136297932,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540244627
    },
    {
        "content": "<p>never mind, I found it.</p>",
        "id": 136303004,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540250338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> So, the way I've implemented it, <code>impl dyn TraitAlias</code> works now, but I think that makes perfect sense, to be honest. (<code>impl TraitAlias for Type</code> doesn't compile, which also makes sense, I believe.)</p>",
        "id": 136304641,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540252156
    },
    {
        "content": "<p>anyway, I just pushed a version which should pass all tests now</p>",
        "id": 136304649,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540252169
    },
    {
        "content": "<p>Huh, <code>impl dyn TraitAlias</code>... I'll take a look</p>",
        "id": 136340103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540304911
    },
    {
        "content": "<p>I didn't get to finish my review yesterday before I got pulled off</p>",
        "id": 136340107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540304924
    },
    {
        "content": "<p>No worries.</p>",
        "id": 136346111,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540309994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> My argument is, <code>dyn Trait</code> works, and we want <code>dyn TraitAlias</code> to work (as per the RFC), where <code>dyn TraitAlias</code> is a type... thus we should also want the inherent <code>impl dyn TraitAlias</code> to work</p>",
        "id": 136346179,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540310045
    },
    {
        "content": "<p>the thing that is confusing me is that <code>impl X</code> doesn't take a <strong>type</strong></p>",
        "id": 136347973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540311663
    },
    {
        "content": "<p>but rather trait bounds</p>",
        "id": 136347976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540311665
    },
    {
        "content": "<p>we don't e.g. permit <code>X: dyn Debug</code></p>",
        "id": 136347980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540311670
    },
    {
        "content": "<p>(do we?)</p>",
        "id": 136347982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540311674
    },
    {
        "content": "<blockquote>\n<p>the thing that is confusing me is that <code>impl X</code> doesn't take a <strong>type</strong></p>\n</blockquote>\n<p>i think they means <code>impl dyn TraitAlias { fn stuff() ... }</code></p>",
        "id": 136349763,
        "sender_full_name": "kennytm",
        "timestamp": 1540313525
    },
    {
        "content": "<p>sorry I meant <code>fn foo(x: &amp;impl T)</code></p>",
        "id": 136351874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540315474
    },
    {
        "content": "<p>but I see</p>",
        "id": 136351884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540315489
    },
    {
        "content": "<p>ok ok</p>",
        "id": 136351891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540315492
    },
    {
        "content": "<p>I was just misreading</p>",
        "id": 136351912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540315504
    },
    {
        "content": "<p>well, in that case, seems fine</p>",
        "id": 136351921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540315506
    },
    {
        "content": "<p>or at least potentially fine</p>",
        "id": 136351933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540315517
    },
    {
        "content": "<p>can you do <code>impl SomeTypeAlias { .. }</code>... I think you can</p>",
        "id": 136351947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540315534
    },
    {
        "content": "<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=1d253b74e52f03692eef6ddf7b7dc5b9\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=1d253b74e52f03692eef6ddf7b7dc5b9\">yes you can</a>)</p>",
        "id": 136351976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540315558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yep, right.</p>",
        "id": 136354267,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540317433
    },
    {
        "content": "<p>so we're on the same page now I trust? :-)</p>",
        "id": 136354278,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540317445
    },
    {
        "content": "<p>and yes, <code>impl TraitAlias</code> is always valid in 2015 edition, though in the 2018 edition with lints on, you need to do <code>impl dyn TraitAlias</code></p>",
        "id": 136354408,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540317523
    },
    {
        "content": "<p>which I think is much clearer</p>",
        "id": 136354416,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540317529
    },
    {
        "content": "<p>and consistent, in any case, I reckon.</p>",
        "id": 136354451,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540317555
    },
    {
        "content": "<p>anyway, if you do get time to review and  r+ today, that would be super!</p>",
        "id": 136354461,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540317570
    },
    {
        "content": "<p>would love to finally (finally!) start thinking more about upcasting &amp; multi-trait objects... maybe would be a good idea to finish impl-trait-in-bindings though, once you leave the notes on that too (I know, sorry...)</p>",
        "id": 136354569,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540317612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I left a comment — I <em>think</em> the code looks great, but I'd like to make sure we are exhaustively testing All The Cases. As it my standard practice for new RFCs (well, sometimes I fail to do it, but I always <em>like</em> to do it), I went through the RFC and tried to write-up a kind of comprehensive list of all the things that seemed worth testing. Do you think you could compare what is in the PR and make sure it lines up? <a href=\"https://github.com/rust-lang/rust/pull/55101#issuecomment-432363038\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55101#issuecomment-432363038\">See comment here.</a></p>",
        "id": 136356399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540319021
    },
    {
        "content": "<blockquote>\n<p>which I think is much clearer</p>\n</blockquote>\n<p>yep, seems good</p>",
        "id": 136356425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540319037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Okay great, thanks. I’ll try to add to the tests when I get back tonight, then ping you.</p>",
        "id": 136359623,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540321671
    },
    {
        "content": "<p><span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 136359813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540321847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> When do you think you can write up the notes on impl trait in bindings btw... tomorrow?</p>",
        "id": 136364183,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540325769
    },
    {
        "content": "<p>maybe</p>",
        "id": 136364195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540325789
    },
    {
        "content": "<p>I'll try</p>",
        "id": 136364214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540325814
    },
    {
        "content": "<p>Thanks. :-)</p>",
        "id": 136364260,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540325879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Thanks for the notes on impl Trait in bindings!</p>",
        "id": 136488681,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540483949
    },
    {
        "content": "<p>Did you see my reply on the trait alias issue btw?</p>",
        "id": 136488701,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540483962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span> I'll try to post more later on, that was as far as I got :) </p>\n<p>I did not see your reply, link?</p>",
        "id": 136488710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540483975
    },
    {
        "content": "<p>okay great, thanks</p>",
        "id": 136488733,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540484000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/pull/55101#issuecomment-432869298\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55101#issuecomment-432869298\">https://github.com/rust-lang/rust/pull/55101#issuecomment-432869298</a></p>",
        "id": 136488771,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540484038
    },
    {
        "content": "<p>I get the feeling we're not too far away, but yeah, those tests definitely exposed an issue.</p>",
        "id": 136488823,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540484053
    },
    {
        "content": "<p>great :)</p>",
        "id": 136488906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540484138
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 136488929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540484160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> are you referring to <a href=\"https://github.com/rust-lang/rust/pull/55101/commits/778eddf9efb0fd8531783ae8ccef56609dcc79d6#diff-326260a0625cab3d7144be4ede0c8be0\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55101/commits/778eddf9efb0fd8531783ae8ccef56609dcc79d6#diff-326260a0625cab3d7144be4ede0c8be0\"><code>trait-alias-object-type.rs</code></a>? If so, how does it fail when you build locally? (The travis output doesn't show the error you get)</p>",
        "id": 136489049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540484266
    },
    {
        "content": "<p>the Travis output is really unclear unfortunately</p>",
        "id": 136489161,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540484390
    },
    {
        "content": "<p>it stringifies stderr</p>",
        "id": 136489167,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540484396
    },
    {
        "content": "<p>quite annoying</p>",
        "id": 136489170,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540484399
    },
    {
        "content": "<p>just a min...</p>",
        "id": 136489220,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540484414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I commented with the error msgs</p>",
        "id": 136492267,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540487299
    },
    {
        "content": "<p>do you have any ideas about the FIXME too, btw? maybe it doesn't need to be fixed</p>",
        "id": 136492276,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540487311
    },
    {
        "content": "<p>also, I presume not supporting bounds on LHS type parameters is okay?</p>",
        "id": 136492284,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540487331
    },
    {
        "content": "<p>will take a look in a bit <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> when I do reviews</p>",
        "id": 136493644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540488714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sure :-)</p>",
        "id": 136493704,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540488745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  around now by chance?</p>",
        "id": 136506666,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540501153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> yes</p>",
        "id": 136507027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540501517
    },
    {
        "content": "<p>So... if you've got a minute to go over some of these errors, that would be great</p>",
        "id": 136507644,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540502197
    },
    {
        "content": "<p>I find interactive discussion about this more helpful. :-)</p>",
        "id": 136507660,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540502223
    },
    {
        "content": "<p>Saves you writing a long post too.</p>",
        "id": 136507667,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540502227
    },
    {
        "content": "<p>Did you see the error logs I posted though, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 136507673,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540502234
    },
    {
        "content": "<p>I saw it</p>",
        "id": 136507676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502243
    },
    {
        "content": "<p>I just don't know the cause yet :)</p>",
        "id": 136507680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502249
    },
    {
        "content": "<p>the error had to do with <code>impl TraitAlias</code>, right?</p>",
        "id": 136507688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502259
    },
    {
        "content": "<p>(at least one of them)</p>",
        "id": 136507689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502262
    },
    {
        "content": "<p>this is why I kicked off a local build of your branch, so I could poke a bit more easily :)</p>",
        "id": 136507782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502366
    },
    {
        "content": "<p>actually, that build is done now...</p>",
        "id": 136507789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502372
    },
    {
        "content": "<p>okay cool</p>",
        "id": 136508117,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540502733
    },
    {
        "content": "<p>I have a build done here too</p>",
        "id": 136508120,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540502739
    },
    {
        "content": "<p>and yeah, one of them to do with <code>impl TraitAlias</code></p>",
        "id": 136508126,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540502749
    },
    {
        "content": "<p>perhaps it's not generating  the candidates properly?</p>",
        "id": 136508135,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540502758
    },
    {
        "content": "<p>btw, thanks for putting in the effort to square away the tests</p>",
        "id": 136508198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502801
    },
    {
        "content": "<p>hmm</p>",
        "id": 136508279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502892
    },
    {
        "content": "<p>I think that test may just be broken</p>",
        "id": 136508280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540502894
    },
    {
        "content": "<p>no worries. it's the least I could do after you carefully enumerated the things to be tested!</p>",
        "id": 136508299,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540502940
    },
    {
        "content": "<p>yeah, I was considering that too</p>",
        "id": 136508307,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540502946
    },
    {
        "content": "<p>wasn't 100% sure on expected behaviour</p>",
        "id": 136508310,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540502958
    },
    {
        "content": "<p>are you okay with LHS type bounds not being allowed by the way?</p>",
        "id": 136508317,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540502971
    },
    {
        "content": "<blockquote>\n<p>are you okay with LHS type bounds not being allowed by the way?</p>\n</blockquote>\n<p>not sure yet :)</p>",
        "id": 136508671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540503430
    },
    {
        "content": "<p>I am not a big fan of these \"mega tests\"</p>",
        "id": 136508870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540503683
    },
    {
        "content": "<p>they're easy to write, but a pain later...</p>",
        "id": 136508874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540503691
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SendEqAlias</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">PartialEq</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">b</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">SendEqAlias</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">22_</span><span class=\"k\">i32</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136508875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540503695
    },
    {
        "content": "<p>I think you can simplify the test in question to that</p>",
        "id": 136508879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540503700
    },
    {
        "content": "<p><code>PartialEq::eq(&amp;22_i32, x)</code> also fails...</p>",
        "id": 136508882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540503710
    },
    {
        "content": "<p>( I reversed the order incidentally of the lhs/rhs, which I <em>think</em> is correct )</p>",
        "id": 136508947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540503758
    },
    {
        "content": "<p>ah...hmmm....</p>",
        "id": 136509045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540503899
    },
    {
        "content": "<p>ok so I think I see the problem. I have to ponder it :)</p>",
        "id": 136509069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540503926
    },
    {
        "content": "<blockquote>\n<p>I am not a big fan of these \"mega tests\"</p>\n</blockquote>\n<p>sorry... I'm not very good writing lots of test cases. feel free to split them up, if you want. I'd be a bit lost (you have push permissions on the PR)</p>",
        "id": 136509131,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540503975
    },
    {
        "content": "<p>heh sorry no worries</p>",
        "id": 136509132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540503985
    },
    {
        "content": "<p>I make them all the time too ;)</p>",
        "id": 136509134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540503991
    },
    {
        "content": "<p>it's just hard to debug</p>",
        "id": 136509138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504001
    },
    {
        "content": "<p>because then when you run with <code>RUST_LOG</code></p>",
        "id": 136509143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> also, I presume you saw the discussion about LHS bounds here: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1733-trait-alias.md#what-about-bounds-on-type-variable-declaration-in-the-trait-alias\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/1733-trait-alias.md#what-about-bounds-on-type-variable-declaration-in-the-trait-alias\">https://github.com/rust-lang/rfcs/blob/master/text/1733-trait-alias.md#what-about-bounds-on-type-variable-declaration-in-the-trait-alias</a> -- I'll wait for your thoughts on that</p>",
        "id": 136509145,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540504009
    },
    {
        "content": "<p>you get lots of logs mixed in</p>",
        "id": 136509146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504010
    },
    {
        "content": "<p>yeah, you're not wrong</p>",
        "id": 136509149,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540504012
    },
    {
        "content": "<p>the problem has to do with elaboration</p>",
        "id": 136509172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504038
    },
    {
        "content": "<p>ah</p>",
        "id": 136509176,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540504043
    },
    {
        "content": "<p>(maybe we just forgot to do that?)</p>",
        "id": 136509178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504044
    },
    {
        "content": "<p>maybe?</p>",
        "id": 136509181,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540504048
    },
    {
        "content": "<p>where is that done in the compiler?</p>",
        "id": 136509182,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540504052
    },
    {
        "content": "<p>and what sort of elaboration are we talking about here?</p>",
        "id": 136509188,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540504061
    },
    {
        "content": "<p><code>src/librustc/traits/util.rs</code>, the fn <code>elaborate_predicates</code></p>",
        "id": 136509254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504098
    },
    {
        "content": "<p>it has the job of \"expanding\" things like <code>T: Foo</code> to include all the steps they imply</p>",
        "id": 136509262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504115
    },
    {
        "content": "<p>e.g. it would elaborate <code>T: Eq</code> to <code>T: PartialEq + Eq</code></p>",
        "id": 136509274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504127
    },
    {
        "content": "<p>we presently only elaborate <em>supertraits</em></p>",
        "id": 136509296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504152
    },
    {
        "content": "<p>but for trait aliases we .. probably .. want to alter that rule</p>",
        "id": 136509303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504163
    },
    {
        "content": "<p>ah</p>",
        "id": 136509317,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540504196
    },
    {
        "content": "<p>alternatively we could declare all the parts to be where clauses</p>",
        "id": 136509358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504203
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> also, I presume you saw the discussion about LHS bounds here: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1733-trait-alias.md#what-about-bounds-on-type-variable-declaration-in-the-trait-alias\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/1733-trait-alias.md#what-about-bounds-on-type-variable-declaration-in-the-trait-alias\">https://github.com/rust-lang/rfcs/blob/master/text/1733-trait-alias.md#what-about-bounds-on-type-variable-declaration-in-the-trait-alias</a> -- I'll wait for your thoughts on that</p>\n</blockquote>\n<p>yes, I remember, i'll have to revisit and think it over</p>",
        "id": 136509369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504212
    },
    {
        "content": "<p>gotta run now :)</p>",
        "id": 136509379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504228
    },
    {
        "content": "<p>I can leave some more comments later</p>",
        "id": 136509384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504238
    },
    {
        "content": "<p>no worries</p>",
        "id": 136509398,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540504251
    },
    {
        "content": "<p>thanks for your time. look forward to the comments later!</p>",
        "id": 136509404,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540504258
    },
    {
        "content": "<p>also, on the FIXME in code and the associated type failure... but let's tackle this first</p>",
        "id": 136509419,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540504297
    },
    {
        "content": "<p>(afk but I just realized — we're gonna have some problems with <code>-&gt; impl TraitAlias</code> if they use <code>where</code> clauses, but that's ok — chalk would help)</p>",
        "id": 136509928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504920
    },
    {
        "content": "<p>just leaving that comment as a note to myself :)</p>",
        "id": 136509973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540504936
    },
    {
        "content": "<p>Yep... I think this probably won't stabilise until post-Chalk integration, right? So we should be okay.</p>",
        "id": 136510557,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540505744
    },
    {
        "content": "<p>okay, I think I figured out the associated type issue</p>",
        "id": 136511019,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540506348
    },
    {
        "content": "<p>for the <code>PolyTraitRef</code> in HIR for the <code>TraitObject</code>, <code>bound_generic_params</code> is always just initialised to an empty vector</p>",
        "id": 136511078,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540506380
    },
    {
        "content": "<p>might be the cause of the other failure too, in fact</p>",
        "id": 136512053,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540507736
    },
    {
        "content": "<p>re. <code>PartialEq&lt;Self&gt;</code></p>",
        "id": 136512060,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540507748
    },
    {
        "content": "<p>okay, it's an issue to do with elaboration of projected types</p>",
        "id": 136515828,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540512635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the key here is the <code>create_substs_for_ast_path</code> function I think. it needs to look at supertraits too (since supertraits of a trait alias will include all the trait aliases/traits/associated items/etc. up the chain</p>",
        "id": 136516219,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540513112
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> coming back to this just now. does the above make sense to you?</p>",
        "id": 136556540,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540569876
    },
    {
        "content": "<blockquote>\n<p>okay, I think I figured out the associated type issue</p>\n</blockquote>\n<p>Ah yes, I think this is what <span class=\"user-mention\" data-user-id=\"125958\">@Alex Burka</span> and I were talking about when we discussed how trait objects would need to \"see through\" aliases for this purpose.  TBH, this is a more general bug with trait objects, and it'd be nice to fix it more generally.</p>",
        "id": 136565746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540579169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> <a href=\"https://github.com/rust-lang/rust/pull/55101#issuecomment-433512849\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55101#issuecomment-433512849\">left a comment here for the supertrait elaboration</a></p>",
        "id": 136567421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540580831
    },
    {
        "content": "<p>now left a comment on the other half :) in short, I think this is <a href=\"https://github.com/rust-lang/rust/issues/24010\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/24010\">#24010</a>, and I'd prefer to solve both problems at once — perhaps in a second PR?</p>",
        "id": 136567644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540581119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay, sounds good, thanks</p>",
        "id": 136568504,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540582199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what about the existing FIXME?</p>",
        "id": 136568958,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540582691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so, I need to call <code>ast_ty_to_ty</code> (actually <code>to_ty</code> on the <code>ItemCtxt</code> which then calls that) in the case the type parameter is not <code>Self</code>. apparently this isn't called for <code>Self</code>, to avoid cycles. do I need to be careful to avoid cycles here too? maybe memoize the conversions... at what level, if so?</p>",
        "id": 136575954,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540590277
    },
    {
        "content": "<p>I've got it working here, but you can take a look at the code and tell me if it's the right approach. :-)</p>",
        "id": 136577249,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540591594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> now is ok, I'm just wrapping up a few things</p>",
        "id": 136722684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540835110
    },
    {
        "content": "<p>what's on your mind</p>",
        "id": 136722686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540835112
    },
    {
        "content": "<p>er, I see you left me some questions I forgot about</p>",
        "id": 136722695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540835121
    },
    {
        "content": "<p>is that the context? :)</p>",
        "id": 136722697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540835124
    },
    {
        "content": "<p>yeah, basically</p>",
        "id": 136722785,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540835177
    },
    {
        "content": "<p>I an explain to you what I discussed with @centril last night if you like though</p>",
        "id": 136722799,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540835193
    },
    {
        "content": "<p>I forgot what the existing FIXME is about</p>",
        "id": 136722802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540835198
    },
    {
        "content": "<p>basically just <a href=\"https://github.com/rust-lang/rust/pull/55101#issuecomment-433772151\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55101#issuecomment-433772151\">https://github.com/rust-lang/rust/pull/55101#issuecomment-433772151</a></p>",
        "id": 136722936,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540835338
    },
    {
        "content": "<p>sorry, I mean <a href=\"https://github.com/rust-lang/rust/pull/55101#issuecomment-433572568\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55101#issuecomment-433572568\">https://github.com/rust-lang/rust/pull/55101#issuecomment-433572568</a></p>",
        "id": 136722947,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540835352
    },
    {
        "content": "<p>the first was the other one</p>",
        "id": 136722953,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540835357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> my proposal (which @centril thought would work too) was to disallow implication bounds, and only have pre-condition bounds, which fits in with the rest of Rust well.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// good</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// good</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// good</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// bad</span>\n</pre></div>",
        "id": 136723529,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540835910
    },
    {
        "content": "<p>I don't really understand that last example</p>",
        "id": 136723797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540836130
    },
    {
        "content": "<p>what syntax is that?</p>",
        "id": 136723806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540836137
    },
    {
        "content": "<p>I am still feeling a bit confused about how to think about the well-formedness conditions in this context</p>",
        "id": 136723817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540836154
    },
    {
        "content": "<p>like, which things do \"users\" of the alias have to prove</p>",
        "id": 136723834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540836171
    },
    {
        "content": "<p>it would be implied bounds, as mentioned in the RFC</p>",
        "id": 136723840,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540836177
    },
    {
        "content": "<p>i.e. \"bundle\" the bounds with the alias, so they don't have to be specified at use site</p>",
        "id": 136723861,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540836198
    },
    {
        "content": "<p>but I don't think we want that</p>",
        "id": 136723864,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540836201
    },
    {
        "content": "<p>I would rather make all bounds on the LHS</p>",
        "id": 136723868,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540836206
    },
    {
        "content": "<p>and have to specify them at use site</p>",
        "id": 136723877,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540836214
    },
    {
        "content": "<blockquote>\n<p>it would be implied bounds, as mentioned in the RFC</p>\n</blockquote>\n<p><code>trait Foo&lt;T&gt; = Bar&lt;T: Send&gt;</code> this syntax was proposed in the RFC?</p>",
        "id": 136723887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540836226
    },
    {
        "content": "<p>yeah, I think so. in the final section</p>",
        "id": 136723904,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540836245
    },
    {
        "content": "<p>it was discussed</p>",
        "id": 136723962,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540836282
    },
    {
        "content": "<p>anyway, interpret it as an implication bound</p>",
        "id": 136723964,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540836282
    },
    {
        "content": "<p>whereas <code>trait Foo&lt;T: Send&gt; = Bar&lt;T&gt;</code> would be a pre-condition bound</p>",
        "id": 136723968,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540836289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> make sense?</p>",
        "id": 136724847,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540837035
    },
    {
        "content": "<p>?</p>",
        "id": 136726309,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540838460
    },
    {
        "content": "<p>I see</p>",
        "id": 136726324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540838482
    },
    {
        "content": "<p>That said, with the implied bounds plans that we had in mind, I believe (<span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> can perhaps confirm) that </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>the function <code>bar</code> in this example would be able to assume that <code>U: Send</code> (because <code>T: Foo&lt;U&gt;</code> and <code>Foo</code> requires that <code>U: Send</code>)</p>",
        "id": 136726424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540838592
    },
    {
        "content": "<p>so I am wondering how important this distinction is</p>",
        "id": 136726432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540838605
    },
    {
        "content": "<p>right</p>",
        "id": 136726438,
        "sender_full_name": "scalexm",
        "timestamp": 1540838614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> here is a question though</p>",
        "id": 136726521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540838667
    },
    {
        "content": "<p>if you have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>is that an error? (Because the where-clause <code>Self: Foo&lt;T&gt;</code> is not well-formed)</p>",
        "id": 136726552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540838700
    },
    {
        "content": "<p>I believe that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">f</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>would be ill-formed</p>",
        "id": 136726581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540838739
    },
    {
        "content": "<p>yes it is an error</p>",
        "id": 136726596,
        "sender_full_name": "scalexm",
        "timestamp": 1540838749
    },
    {
        "content": "<p>in traits, we check that where clauses are \"self-consistent\"</p>",
        "id": 136726609,
        "sender_full_name": "scalexm",
        "timestamp": 1540838756
    },
    {
        "content": "<p>yes</p>",
        "id": 136726611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540838759
    },
    {
        "content": "<p>this is what I was imagining</p>",
        "id": 136726619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540838763
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> we might do a similar check for trait aliases; I'll have to revist what the RFC said but I imagine we left it as a kind of \"open question\"</p>",
        "id": 136726666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540838780
    },
    {
        "content": "<p>I think modeling things fairly closely after a \"trait known to have one impl\" will not lead us astray</p>",
        "id": 136726682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540838804
    },
    {
        "content": "<p>that is, <code>trait Foo&lt;P...&gt; = where WC</code> is equivalent to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"p\">...</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">WC</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"p\">...</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"p\">...</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">WC</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>actually, with implied bounds, it is probably <em>exactly</em> equivalent to that...</p>",
        "id": 136726782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540838892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> mmh let me back out for a second about this, I'm not even sure it would be an error now</p>",
        "id": 136726809,
        "sender_full_name": "scalexm",
        "timestamp": 1540838931
    },
    {
        "content": "<p>especially since I did not implement WF checking of trait decls in chalk :p</p>",
        "id": 136726823,
        "sender_full_name": "scalexm",
        "timestamp": 1540838946
    },
    {
        "content": "<p>one place that will not work right now</p>",
        "id": 136726825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540838949
    },
    {
        "content": "<p>sorry, not sure what you mean by \"now\"</p>",
        "id": 136726829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540838958
    },
    {
        "content": "<p>error in <em>chalk</em> or <em>rustc</em> :)</p>",
        "id": 136726832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540838961
    },
    {
        "content": "<p>now = now I think about this lol</p>",
        "id": 136726839,
        "sender_full_name": "scalexm",
        "timestamp": 1540838977
    },
    {
        "content": "<p>I see :)</p>",
        "id": 136726950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540839063
    },
    {
        "content": "<p>well, in short, I think it's a good idea for us to figure out <em>just how</em> trait aliases fit in and that should guide us</p>",
        "id": 136726968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540839084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes, I agree. that will allow us to check the bounds properly at definition point of the alias too, I think?</p>",
        "id": 136726975,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540839104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I'll think more deeply about this, but it seems to me that this shouldn't be an error actually, it should rather be up to a <code>Bar</code> implementor to prove that <code>T: Send</code> hold</p>",
        "id": 136727052,
        "sender_full_name": "scalexm",
        "timestamp": 1540839151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> want to think about it and leave notes here/on the PR later? hopefully we can reuse most of the existing code.</p>",
        "id": 136727053,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540839151
    },
    {
        "content": "<p>FWIW I find this line confusing, anyway</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136727070,
        "sender_full_name": "tmandry",
        "timestamp": 1540839171
    },
    {
        "content": "<p>we'll need to adapt the selection routine for trait alias of course</p>",
        "id": 136727073,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540839175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> it's not confusing if Send is an implied bound, but yes, it would require education. doesn't really have an analogue in existing Rust, whereas <code>trait Foo&lt;T: Send&gt;</code> does</p>",
        "id": 136727096,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540839201
    },
    {
        "content": "<blockquote>\n<p>I'll think more deeply about this, but it seems to me that this shouldn't be an error actually, it should rather be up to a <code>Bar</code> implementor to prove that <code>T: Send</code> hold</p>\n</blockquote>\n<p>ok, let's circle back, I also could see it going either way</p>",
        "id": 136727170,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540839251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> how do you mean?</p>",
        "id": 136727635,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540839690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 136732272,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540844220
    },
    {
        "content": "<p>Had any more thoughts about the above <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>? I wasn't quite sure what you meant yesterday.</p>",
        "id": 136785899,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540915027
    },
    {
        "content": "<p>I guess the questions at hand are:</p>\n<p>What do we need to do to land this PR?</p>",
        "id": 136790924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540919304
    },
    {
        "content": "<p>We basically hit two bugs -- one of which you kind of solved  by changing elaboration -- both of which were effectively pre-existing</p>",
        "id": 136790953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540919331
    },
    {
        "content": "<p>The main thing I am wondering is whether we ought to \"rollback\" that elaboration fix and consider it separately, since it ultimately is a \"special case hack\" to fix <a href=\"https://github.com/rust-lang/rust/issues/20671\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/20671\">https://github.com/rust-lang/rust/issues/20671</a></p>",
        "id": 136791003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540919370
    },
    {
        "content": "<p>otoh if it works for now, maybe we should just leave it</p>",
        "id": 136791011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540919384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> sorry I'll get back to this tomorrow and try to pick a specific path fwd, but I think the TL;DR is that we should land the PR either \"as is\" or else by reverting slightly and spinning some of that into a separat PR</p>",
        "id": 136807905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540934400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Okay. What about bounds checking for trait alias definitions which we still need to enforce?</p>",
        "id": 136809108,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1540935627
    },
    {
        "content": "<p>That's what I'm trying to decide, I plan to spend a few minutes and get back to you today on that :)</p>",
        "id": 136862253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541002084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Okay, perfect. Look forward to it. :-)</p>",
        "id": 136862947,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541002588
    },
    {
        "content": "<p>at least I'm learning a lot about the trait system here...</p>",
        "id": 136865290,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541004692
    },
    {
        "content": "<p>will have to relearn a lot when Chalk lands of course, but oh well.</p>",
        "id": 136865300,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541004706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> heading off for a bit now, and going to have dinner, but feel free to leave notes/advice here or on Github. if you're around when I'm back, we can talk then.</p>",
        "id": 136870191,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541009399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> back</p>",
        "id": 136879877,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541018469
    },
    {
        "content": "<p>ok, I've been looking at it, writing up some notes now, trying to decide what I think =)</p>",
        "id": 136879902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541018508
    },
    {
        "content": "<p>gonna have to run soon because <span class=\"emoji emoji-1f47b\" title=\"ghost\">:ghost:</span> halloween <span class=\"emoji emoji-1f47b\" title=\"ghost\">:ghost:</span></p>",
        "id": 136879908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541018520
    },
    {
        "content": "<p>Okay, thanks!</p>",
        "id": 136879970,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541018564
    },
    {
        "content": "<p>Hah fair.  We don't celebrate it much over here. At least, adults don't. But enjoy!</p>",
        "id": 136879992,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541018586
    },
    {
        "content": "<p>hmm</p>",
        "id": 136880539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541019125
    },
    {
        "content": "<p>so I'm probably not going to be done :)</p>",
        "id": 136880546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541019133
    },
    {
        "content": "<p>I've got a local build</p>",
        "id": 136880548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541019135
    },
    {
        "content": "<p>there are my stream of consciousness notes in <a href=\"https://gist.github.com/nikomatsakis/e5428029a95561c6a67326f64842fbbf/edit\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/e5428029a95561c6a67326f64842fbbf/edit\">this gist</a></p>",
        "id": 136880573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541019184
    },
    {
        "content": "<p>I'm a bit confused about one part of the behavior and debugging a bit now</p>",
        "id": 136880583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541019193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> wait I must be missing a core assumption here :)</p>",
        "id": 136880670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541019292
    },
    {
        "content": "<p>I thought that <code>tcx.predicates_of(def_id_of_Some_trait_alias)</code> would give you the things of the alias</p>",
        "id": 136880695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541019338
    },
    {
        "content": "<p>but .. that doesn't seem to be true?</p>",
        "id": 136880699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541019342
    },
    {
        "content": "<p>i.e., <code>trait Foo = Bar</code>, I expect <code>predicates_of(Foo)</code> to be <code>[Self: Bar]</code>, but instead it is <code>[]</code></p>",
        "id": 136880707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541019350
    },
    {
        "content": "<p>this I think is the reason for the unsoundness, or at least part of it :)</p>",
        "id": 136880726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541019361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay, I could work off that, thanks</p>",
        "id": 136881046,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541019679
    },
    {
        "content": "<p>I think the problem is in the <code>explicit_predicates_of</code> query, which has this logic:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"n\">ItemKind</span>::<span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">generics</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">..,</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">items</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">is_trait</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">ty</span>::<span class=\"n\">TraitRef</span>::<span class=\"n\">identity</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">items</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">generics</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>in librustc_typeck/collect.rs on line 1719 but nothing for <code>TraitAlias</code></p>",
        "id": 136881054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541019694
    },
    {
        "content": "<p>ok, leaving now :)</p>",
        "id": 136881055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541019696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> last thing: is the current logic for considering all <code>T: Foo</code> bounds as opposed to just <code>Self: Foo</code> correct, or not?</p>",
        "id": 136882240,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541020912
    },
    {
        "content": "<p>anyway, thanks. enjoy the night!</p>",
        "id": 136882244,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541020916
    },
    {
        "content": "<p>okay, I've solved unsoundness thanks to your above tip! I definitely thought of that before, but then left it aside for some reason... it makes sense why it's needed now.</p>",
        "id": 136897329,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541041563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> now we want to a) make sure this checking is done at the definition of the trait alias rather than the use of it</p>",
        "id": 136897370,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541041682
    },
    {
        "content": "<p>b) more deeply dereference aliases for trait objects, as you suggested in a PR comment</p>",
        "id": 136897415,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541041718
    },
    {
        "content": "<p>it's late here, so I probably won't even get to thinking about it until tomorrow</p>",
        "id": 136897420,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541041732
    },
    {
        "content": "<p>feel free to leave tips in the meanwhile. I should be around at some point</p>",
        "id": 136897421,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541041742
    },
    {
        "content": "<p>(I've pushed now, BTW)</p>",
        "id": 136897427,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541041749
    },
    {
        "content": "<p>I think we want to dereference aliases for trait objects in <code>conv_object_ty_poly_trait_ref</code> (or thereabouts), to solve that second bug, but not sure exactly how.</p>",
        "id": 136899574,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541045471
    },
    {
        "content": "<p>ok, coming back to this now</p>",
        "id": 136932275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541089220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> btw, I think it'd be helpful to take that testing checklist and persist it somewhere, perhaps in the tracking issue, with indications of which test are testing which pattern</p>",
        "id": 136934263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091168
    },
    {
        "content": "<p>it seems like the main problem now is the \"trait object equivalence problem\"?</p>",
        "id": 136934269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091178
    },
    {
        "content": "<p>that is, this one:</p>\n<div class=\"codehilite\"><pre><span></span>trait A&lt;T: Send&gt; {}\ntrait B&lt;T: Send&gt; = A&lt;T&gt;;\n\nstruct Foo&lt;T&gt;(T);\nstruct Bar();\n\nimpl&lt;T: Send&gt; A&lt;T&gt; for Foo&lt;T&gt; {}\n\nimpl !Send for Bar {}\n\nfn main() {\n    let b: Box&lt;dyn B&lt;Bar&gt;&gt; = Box::new(Foo(Bar()));\n    let a: Box&lt;dyn A&lt;Bar&gt;&gt; = b;\n}\n</pre></div>",
        "id": 136934283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091196
    },
    {
        "content": "<p>I'm trying to decide if this is a pre-existing problem or not, to some extent :)</p>",
        "id": 136934296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091214
    },
    {
        "content": "<p>there was also the matter of specifying associated type values, right?</p>",
        "id": 136934303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091225
    },
    {
        "content": "<p>which is definitely pre-existing</p>",
        "id": 136934401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091317
    },
    {
        "content": "<p>to some extent, the \"trait object equivalence\" problem is equal to trait upcasting, but that's also a bit different</p>",
        "id": 136934418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091335
    },
    {
        "content": "<p>it's sort of a special case of upcasting in which there is a cycle</p>",
        "id": 136934428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091343
    },
    {
        "content": "<p>and of course it only sort of \"makes sense\" for the special case of <code>trait Foo = Bar</code> -- not e.g. <code>trait Foo = Bar + Baz</code>, though maybe for <code>trait Foo = Bar + Send</code></p>",
        "id": 136934686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091540
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I personally feel content to leave trait objects as \"fixme\" items for the purposes of this PR, though we should probably just turn to discussing <em>how</em> to fix</p>",
        "id": 136934923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541091747
    },
    {
        "content": "<p>I think the idea would be that <a href=\"https://github.com/rust-lang/rust/blob/f6e9a6e41cd9b1fb687e296b5a6d4c6ad399f862/src/librustc_typeck/astconv.rs#L975-L977\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f6e9a6e41cd9b1fb687e296b5a6d4c6ad399f862/src/librustc_typeck/astconv.rs#L975-L977\">right around here</a>, you would want to check the <code>principal</code> result and see if the def-id is a trait alias. If so, we need check it for object safety (which we are <a href=\"https://github.com/rust-lang/rust/blob/f6e9a6e41cd9b1fb687e296b5a6d4c6ad399f862/src/librustc_typeck/astconv.rs#L1012-L1022\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f6e9a6e41cd9b1fb687e296b5a6d4c6ad399f862/src/librustc_typeck/astconv.rs#L1012-L1022\">presently doing shortly thereafter</a>). Assuming it passes, we would \"expand it\" into the <code>supertraits</code> (or <code>predicates</code>) before <a href=\"https://github.com/rust-lang/rust/blob/f6e9a6e41cd9b1fb687e296b5a6d4c6ad399f862/src/librustc_typeck/astconv.rs#L997-L1010\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f6e9a6e41cd9b1fb687e296b5a6d4c6ad399f862/src/librustc_typeck/astconv.rs#L997-L1010\">converting to the existential predicates</a>. We also need to check that it expands to something we can represent in a trait object, so one \"main\" trait and various auto traits</p>",
        "id": 136935394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541092249
    },
    {
        "content": "<p>This seems complex enough I might rather see it in its own PR</p>",
        "id": 136935398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541092264
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> btw, I think it'd be helpful to take that testing checklist and persist it somewhere, perhaps in the tracking issue, with indications of which test are testing which pattern</p>\n</blockquote>\n<p>yes I thought about that... will do it shortly</p>",
        "id": 136936683,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541093533
    },
    {
        "content": "<blockquote>\n<p>there was also the matter of specifying associated type values, right?</p>\n</blockquote>\n<p>I think that's solved now? I forget, let me check</p>",
        "id": 136936705,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541093561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ah no, you're right of course: that still fails (but we said we'd delay it to a subsequent PR, since it's a pre-existing bug)</p>",
        "id": 136936861,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541093703
    },
    {
        "content": "<p>I commented out the test line for that</p>",
        "id": 136936869,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541093708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> anyway, I agree. let's put in a FIXME for this test too, and try to land the PR, then turn to these two issues.</p>",
        "id": 136936985,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541093787
    },
    {
        "content": "<p>I wonder if it is worth addressing upcasting properly at this point...</p>",
        "id": 136937000,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541093801
    },
    {
        "content": "<p>since we discussed it anyway at some point in the past, though I was too busy to ever get around to making notes on it...</p>",
        "id": 136937018,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541093819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> so the other question is the <code>wfcheck</code> rules... <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> and I were just discussing that over in the <a href=\"#narrow/stream/144729-wg-traits/topic/implied-bounds\" title=\"#narrow/stream/144729-wg-traits/topic/implied-bounds\">implied-bounds topic</a></p>",
        "id": 136937338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541094090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh, how could I forget heh!</p>",
        "id": 136937411,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541094141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> also could you r+ my PR now please? Provifing the answer to my above question about impl items is not importt.</p>",
        "id": 137073271,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541183265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I wanted to do a review of tests and also setup issues for the \"remaining items\" first, which I hope to do shortly</p>",
        "id": 137073494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183428
    },
    {
        "content": "<p>Okay</p>",
        "id": 137074567,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541184456
    },
    {
        "content": "<p>What about my above question on ItemlKind::Impl?</p>",
        "id": 137074644,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541184524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> to confirm, we did not (yet) fix this scenario, right:</p>\n<blockquote>\n<p>If you have <code>trait Foo { }</code> and <code>trait Bar = Foo</code>, we do not currently consider <code>dyn Foo</code> and <code>dyn Bar</code> to be the same type.</p>\n</blockquote>",
        "id": 137081270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541191455
    },
    {
        "content": "<p>Do we have an example of this? I was going to file an issue dedicated to it</p>",
        "id": 137081275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541191465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> correct. you can take the sample code from the PR if you like... it should probably be bundled in with upcasting</p>",
        "id": 137081293,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541191496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> can you please attach the code to <a href=\"https://github.com/rust-lang/rust/issues/55629\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55629\">https://github.com/rust-lang/rust/issues/55629</a> for me?</p>",
        "id": 137081309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541191513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/pull/55101#issuecomment-433772151\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55101#issuecomment-433772151\">https://github.com/rust-lang/rust/pull/55101#issuecomment-433772151</a></p>",
        "id": 137081313,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541191517
    },
    {
        "content": "<p>sure</p>",
        "id": 137081315,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541191520
    },
    {
        "content": "<p>Thanks -- also <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> if you can review <a href=\"https://github.com/rust-lang/rust/issues/55628\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55628\">https://github.com/rust-lang/rust/issues/55628</a> to see if there is anything else you know of that ought to be listed there as \"pending to do items\" it would be great</p>",
        "id": 137081337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541191548
    },
    {
        "content": "<p>in general, attaching example programs for each failing is probably also awesome, if we have them</p>",
        "id": 137081351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541191560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> earlier you wrote this</p>\n<blockquote>\n<p>Okay, I've added all the above tests (except for the ones that bound the type parameter on the LHS, since we've decided not to allow that in trait aliases, AFAIK)</p>\n</blockquote>\n<p>Do we still disallow this?</p>",
        "id": 137081444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541191622
    },
    {
        "content": "<p>Did you add the tests that use a where clause, in any case? I guess I will try to review and figure that out</p>",
        "id": 137081457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541191633
    },
    {
        "content": "<p>that's the last thing I'd like to do before merging :)</p>",
        "id": 137081463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541191639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh no, I've enabled it now :-)</p>",
        "id": 137081472,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541191656
    },
    {
        "content": "<p>I may btw push a few minor commits to your branch :)</p>",
        "id": 137081477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541191659
    },
    {
        "content": "<p>a lot has changed since that comment heh</p>",
        "id": 137081482,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541191665
    },
    {
        "content": "<p>yeah, go for it.</p>",
        "id": 137081484,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541191667
    },
    {
        "content": "<p>trying to get this r+'d before I leave for the day :)</p>",
        "id": 137081620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541191773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just left two comments on your new issue</p>",
        "id": 137081626,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541191780
    },
    {
        "content": "<p>that would be cool.</p>",
        "id": 137081630,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541191784
    },
    {
        "content": "<p>what time zone are you btw? east coast US?</p>",
        "id": 137081637,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541191790
    },
    {
        "content": "<p>maybe change <a href=\"https://gist.github.com/nikomatsakis/e4dd2807581fc868ba308382855e68f6\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/e4dd2807581fc868ba308382855e68f6\">https://gist.github.com/nikomatsakis/e4dd2807581fc868ba308382855e68f6</a> to Markdown format btw?</p>",
        "id": 137082032,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541192139
    },
    {
        "content": "<p>ok, so, it appears I will <em>not</em> get the tests checked as I had hoped</p>",
        "id": 137082044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541192156
    },
    {
        "content": "<p>I have to run now and i'm not that far :P</p>",
        "id": 137082047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541192160
    },
    {
        "content": "<p>I created <a href=\"https://hackmd.io/x26ejW_8QEaHnBtUAQIxcw\" target=\"_blank\" title=\"https://hackmd.io/x26ejW_8QEaHnBtUAQIxcw\">this HackMD document</a> from the gist</p>",
        "id": 137082114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541192207
    },
    {
        "content": "<p>and I've been attached notes to myself of where each test is</p>",
        "id": 137082122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541192214
    },
    {
        "content": "<p>anyway, I gotta go, however, I'm game to r+ and we can do the \"test checks\" later</p>",
        "id": 137082143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541192238
    },
    {
        "content": "<p>doens't really have to be \"synchronous\"</p>",
        "id": 137082163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541192257
    },
    {
        "content": "<p>any advice on the associated types stuff or not?</p>",
        "id": 137082797,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541192933
    },
    {
        "content": "<p>anyway, thanks for approving</p>",
        "id": 137082804,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541192941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 137082813,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541192954
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 146811377,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541439926
    },
    {
        "content": "<p>Get my tags on Discord/GH?</p>",
        "id": 146811382,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541439938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm curious in particular what's making <a href=\"https://github.com/rust-lang/rust/pull/55687#issuecomment-435749000\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55687#issuecomment-435749000\">https://github.com/rust-lang/rust/pull/55687#issuecomment-435749000</a> fail.</p>",
        "id": 146811954,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541440600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I could probably take a look</p>",
        "id": 146869209,
        "sender_full_name": "scalexm",
        "timestamp": 1541515739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I’d appreciate that.</p>",
        "id": 146869227,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541515763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> why are we running crater on <a href=\"https://github.com/rust-lang/rust/pull/55687\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55687\">https://github.com/rust-lang/rust/pull/55687</a>, out of curiosity?</p>",
        "id": 146873596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541519923
    },
    {
        "content": "<p>Oh, I guess this:</p>\n<blockquote>\n<p>As a by-product, this PR also makes repeated bindings of the same associated item in the same definition a hard error. This was previously a warning with a note about it becoming a hard error in the future. See <a href=\"https://github.com/rust-lang/rust/issues/50589\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/50589\">#50589</a> for more info.</p>\n</blockquote>",
        "id": 146873617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541519955
    },
    {
        "content": "<p>we shouldn't be. we should just be running it on master with <code>-Dduplicate_associated_type_bindings</code></p>",
        "id": 146873619,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541519967
    },
    {
        "content": "<p>I think we are, just the crater run is attached to that issue?</p>",
        "id": 146873622,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541519979
    },
    {
        "content": "<p>ok</p>",
        "id": 146874229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541520475
    },
    {
        "content": "<p>hmm, is there any way to determine which bound / where clause a projection predicate belongs to, from the results of <code>tcx.predicates_of</code>? <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span></p>",
        "id": 146875178,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541521176
    },
    {
        "content": "<p>I need to distinguish between e.g. <code>Iterator&lt;Item = i32&gt; + Iterator&lt;Item = u32&gt;</code> and <code>Iterator&lt;Item = i32, Item = u32&gt;</code></p>",
        "id": 146875374,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541521321
    },
    {
        "content": "<p>anyway, I think the more fundamental issue is that calling <code>predicates_of</code> here can lead to cycles</p>",
        "id": 146875759,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541521641
    },
    {
        "content": "<p>hrmm</p>",
        "id": 146875760,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541521642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I believe we should be calling <code>supertraits_of</code></p>",
        "id": 146875792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541521676
    },
    {
        "content": "<p>that is already required to be acyclic</p>",
        "id": 146875849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541521697
    },
    {
        "content": "<p>and that is what we use today for this sort of thing (e.g., to determine the set of assoc types that are in scope)</p>",
        "id": 146875857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541521711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you just mean <code>supertraits</code>? I tried that...</p>",
        "id": 146875859,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541521713
    },
    {
        "content": "<p>I do; what happened when you tried it?</p>",
        "id": 146875874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541521727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I presume we then call <code>create_substs_for_ast_trait_ref</code> iterably (that's what I tried)... the issue is, it requires a <code>Span</code> and <code>PathSegment</code> or such</p>",
        "id": 146875983,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541521804
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">create_substs_for_ast_trait_ref</span><span class=\"p\">(</span><span class=\"n\">trait_ref</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                 </span><span class=\"n\">trait_def_id</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                 </span><span class=\"n\">self_ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                 </span><span class=\"n\">trait_ref</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">segments</span><span class=\"p\">.</span><span class=\"n\">last</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">());</span><span class=\"w\"></span>\n</pre></div>",
        "id": 146875995,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541521807
    },
    {
        "content": "<p>that's what's used for the direct bindings</p>",
        "id": 146876017,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541521821
    },
    {
        "content": "<p>for supertraits, <code>trait_def_id</code> just gets replaced by <code>tr.def_id()</code> of course, but the other 2 args are more problematic...</p>",
        "id": 146876057,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541521866
    },
    {
        "content": "<p>the <code>supertraits</code>fn doesn't provide that info, because it works at the type system level, not the HIR level</p>",
        "id": 146876071,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541521882
    },
    {
        "content": "<p>afaik</p>",
        "id": 146876075,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541521886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> thoughts?</p>",
        "id": 146877367,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541522954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> you definitely want to use <code>traits::supertraits</code> because this reaches the transitive closure of all the super projection bounds</p>",
        "id": 146879822,
        "sender_full_name": "scalexm",
        "timestamp": 1541525255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> yeah, the question is what next...</p>",
        "id": 146879875,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541525294
    },
    {
        "content": "<p>now, for each projection predicate that you filter from <code>traits::supertraits</code>, I guess you could just substitute with the substitution returned by <code>create_substs_for_ast_trait_ref</code> for your principal trait?</p>",
        "id": 146879884,
        "sender_full_name": "scalexm",
        "timestamp": 1541525309
    },
    {
        "content": "<p>hmm?</p>",
        "id": 146879894,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541525340
    },
    {
        "content": "<p>well something like</p>",
        "id": 146879990,
        "sender_full_name": "scalexm",
        "timestamp": 1541525417
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">poly_projections</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">traits</span>::<span class=\"n\">supertraits</span><span class=\"p\">(</span><span class=\"n\">trait_def_id</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">filter_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">pred</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">Predicate</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">proj</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">subst</span><span class=\"p\">(</span><span class=\"n\">substs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 146880110,
        "sender_full_name": "scalexm",
        "timestamp": 1541525570
    },
    {
        "content": "<p>I don't know if <code>supertraits</code> return a <code>Span</code> along with each predicate, if not just put a <code>DUMMY_SPAN</code> for now in <code>poly_projections</code>, we're just trying to see if that works</p>",
        "id": 146880138,
        "sender_full_name": "scalexm",
        "timestamp": 1541525613
    },
    {
        "content": "<p>yeah I don't think it does</p>",
        "id": 146880144,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541525626
    },
    {
        "content": "<p>let's try though</p>",
        "id": 146880145,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541525628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> this is very similar to something I already tried actually. anyway, the iterator that <code>supertraits</code> returns is of binders...so do I just do <code>skip_binder</code> or something?</p>",
        "id": 146880304,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541525770
    },
    {
        "content": "<p>since we want <code>PolyProjectionPredicate</code> in our <code>poly_projections</code> vector, you should <code>map</code> the binder instead, we want to preserve it</p>",
        "id": 146880341,
        "sender_full_name": "scalexm",
        "timestamp": 1541525822
    },
    {
        "content": "<p>okay sure</p>",
        "id": 146880417,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541525888
    },
    {
        "content": "<p>ah ok the iterator only returns the trait bounds</p>",
        "id": 146880538,
        "sender_full_name": "scalexm",
        "timestamp": 1541526029
    },
    {
        "content": "<p>?</p>",
        "id": 146880592,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541526077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ok it might be better to call <code>traits::elaborate_trait_ref</code> instead I think</p>",
        "id": 146880604,
        "sender_full_name": "scalexm",
        "timestamp": 1541526098
    },
    {
        "content": "<p>does that give spans?</p>",
        "id": 146880607,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541526107
    },
    {
        "content": "<p>/me checks</p>",
        "id": 146880609,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541526110
    },
    {
        "content": "<p>because <code>supertraits</code> only returns trait refs, we wanted projection predicates at first</p>",
        "id": 146880619,
        "sender_full_name": "scalexm",
        "timestamp": 1541526116
    },
    {
        "content": "<p>it does not give spans but at least it gives <em>all</em> the transitive set of super predicates, including projection predicates (the ones we want)</p>",
        "id": 146880678,
        "sender_full_name": "scalexm",
        "timestamp": 1541526143
    },
    {
        "content": "<p>ah yes</p>",
        "id": 146880699,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541526167
    },
    {
        "content": "<p>good point</p>",
        "id": 146880703,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541526170
    },
    {
        "content": "<p>trying that now...</p>",
        "id": 146880729,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541526220
    },
    {
        "content": "<p>spans may be the tricky bit in fact, but that's only for error reporting at least, not correctness</p>",
        "id": 146880745,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541526238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  no actually I think that if that works, the span might be not that hard to get, because internally <code>elaborate_trait_ref</code> uses <code>super_predicates_of</code> which <em>does</em> return the spans, so we will just have to forward that info</p>",
        "id": 146880870,
        "sender_full_name": "scalexm",
        "timestamp": 1541526342
    },
    {
        "content": "<p>currently <code>elaborate_trait_ref</code> just filters out the spans</p>",
        "id": 146880887,
        "sender_full_name": "scalexm",
        "timestamp": 1541526358
    },
    {
        "content": "<p>oh I see, cool</p>",
        "id": 146880934,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541526366
    },
    {
        "content": "<p>how is predicates_of different to super_predicates of?</p>",
        "id": 146880949,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541526379
    },
    {
        "content": "<p><code>super_predicates_of</code> just includes predicates on <code>Self</code>, e.g. <code>where Self: Trait&lt;Item = Foo&gt;</code></p>",
        "id": 146881002,
        "sender_full_name": "scalexm",
        "timestamp": 1541526432
    },
    {
        "content": "<p>(which can be also written with the shorter form <code>trait Bar: Trait&lt;Item = Foo&gt; { ... }</code>)</p>",
        "id": 146881019,
        "sender_full_name": "scalexm",
        "timestamp": 1541526457
    },
    {
        "content": "<p>oh yes, duh</p>",
        "id": 146881154,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541526564
    },
    {
        "content": "<p>gah, compiling without --keep-stage 0 is so slow..</p>",
        "id": 146881867,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541527089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> and is there a fundamental difference between <code>super_predicates_of</code> and <code>elaborate_trait_ref</code> other than the latter is guaranteed to terminate?</p>",
        "id": 146882643,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541527837
    },
    {
        "content": "<p>incidentally, got an error building:</p>\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: librustc/ty/subst.rs:462: Type parameter `T/#1` (T/1) out of range when substituting (root type=Some(T)) substs=[T]\n\nthread &#39;main&#39; panicked at &#39;Box&lt;Any&gt;&#39;, librustc_errors/lib.rs:538:9\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n</pre></div>",
        "id": 146882756,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541527937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> the latter calls <code>super_predicates_of</code> recursively</p>",
        "id": 146882770,
        "sender_full_name": "scalexm",
        "timestamp": 1541527959
    },
    {
        "content": "<p>ah</p>",
        "id": 146882787,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541527981
    },
    {
        "content": "<p>Ok I guess trying to substitute with the subst returned by <code>create_substs_for_ast_trait_ref</code> does not work so easily then</p>",
        "id": 146882817,
        "sender_full_name": "scalexm",
        "timestamp": 1541528014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I’m heading to a Rust meetup, I’ll get back to you later on that substitution thing</p>",
        "id": 146882830,
        "sender_full_name": "scalexm",
        "timestamp": 1541528037
    },
    {
        "content": "<p>yep... is it necessary to do that substitution even though? <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span></p>",
        "id": 146882889,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541528076
    },
    {
        "content": "<p>okay no worries</p>",
        "id": 146882890,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541528078
    },
    {
        "content": "<p>talk later</p>",
        "id": 146882891,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541528079
    },
    {
        "content": "<p>Could you just check that the panic happens in <code>instantiate_poly_trait_ref_inner</code>?</p>",
        "id": 146882896,
        "sender_full_name": "scalexm",
        "timestamp": 1541528090
    },
    {
        "content": "<p>Or whatever that function is called</p>",
        "id": 146882909,
        "sender_full_name": "scalexm",
        "timestamp": 1541528100
    },
    {
        "content": "<p>sure</p>",
        "id": 146882927,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541528119
    },
    {
        "content": "<p>You could try without substituting, I thought it was necessary but maybe I overlooked something</p>",
        "id": 146883007,
        "sender_full_name": "scalexm",
        "timestamp": 1541528171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I'm trying to think why it would be... hmm.</p>",
        "id": 146883405,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541528606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> it doesn't ICE now:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0719]: the value of the associated type `Output` (from the trait `core::ops::Add`) is already specified\n\nerror[E0719]: the value of the associated type `Output` (from the trait `core::ops::Sub`) is already specified\n\nerror[E0719]: the value of the associated type `Output` (from the trait `core::ops::Div`) is already specified\n\nerror[E0719]: the value of the associated type `Output` (from the trait `core::ops::Shl`) is already specified\n</pre></div>",
        "id": 146883425,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541528637
    },
    {
        "content": "<p>that's what I was talking about before I think</p>",
        "id": 146883430,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541528642
    },
    {
        "content": "<p>doesn't distinguish between e.g. <code>Iterator&lt;Item = i32&gt; + Iterator&lt;Item = u32&gt;</code> and <code>Iterator&lt;Item = i32, Item = u32&gt;</code></p>",
        "id": 146883493,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541528676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span></p>",
        "id": 146883496,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541528682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> and is this a problem? It seems to me that both forms should lead to an error</p>",
        "id": 146883606,
        "sender_full_name": "scalexm",
        "timestamp": 1541528763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> okay true. but what about e.g. <code>impl&lt;'a, 'b&gt; Add&lt;&amp;'a u32&gt; for &amp;'b u32</code>and <code>impl&lt;'a&gt; Add&lt;u32&gt; for &amp;'a u32</code> together?</p>",
        "id": 146883828,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541528989
    },
    {
        "content": "<p>they both define <code>Output</code> associated types</p>",
        "id": 146883835,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541528998
    },
    {
        "content": "<p>with just different type parameters</p>",
        "id": 146883886,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541529014
    },
    {
        "content": "<p>that's the key I guess</p>",
        "id": 146883898,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541529027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> right checking duplicates basing only on <code>projection_def_id</code> is probably too restrictive</p>",
        "id": 146884297,
        "sender_full_name": "scalexm",
        "timestamp": 1541529418
    },
    {
        "content": "<p>indeed</p>",
        "id": 146884304,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541529426
    },
    {
        "content": "<p><code>tcx.associated_item(proj.projection_type.item_def_id).container</code></p>",
        "id": 146884629,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541529743
    },
    {
        "content": "<p>I think that's the <code>DefId</code> of the <code>TraitRef</code> containing the projection</p>",
        "id": 146884652,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541529762
    },
    {
        "content": "<p>maybe we want that?</p>",
        "id": 146884655,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541529765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> anyway I pushed a new attempt</p>",
        "id": 146886392,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541531461
    },
    {
        "content": "<p>got a strange failure when trying to build locally though</p>",
        "id": 146887352,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541532259
    },
    {
        "content": "<p>maybe because I had incremental on though</p>",
        "id": 146887582,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541532466
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error: Could not compile `std`.\n\nTo learn more, run the command again with --verbose.\ncommand did not execute successfully: &quot;/Users/alex/Software/rust-devel/build/x86_64-apple-darwin/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;x86_64-apple-darwin&quot; &quot;-j&quot; &quot;8&quot; &quot;--release&quot; &quot;--features&quot; &quot;panic-unwind backtrace&quot; &quot;--manifest-path&quot; &quot;/Users/alex/Software/rust-devel/src/libstd/Cargo.toml&quot; &quot;--message-format&quot; &quot;json&quot;\nexpected success, got: exit code: 101\nthread &#39;main&#39; panicked at &#39;cargo must succeed&#39;, bootstrap/compile.rs:1101:9\nstack backtrace:\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\n   1: std::sys_common::backtrace::print\n             at libstd/sys_common/backtrace.rs:71\n             at libstd/sys_common/backtrace.rs:59\n   2: std::panicking::default_hook::{{closure}}\n             at libstd/panicking.rs:211\n   3: std::panicking::default_hook\n             at libstd/panicking.rs:227\n   4: &lt;std::panicking::begin_panic::PanicPayload&lt;A&gt; as core::panic::BoxMeUp&gt;::get\n             at libstd/panicking.rs:476\n   5: &lt;core::str::CharIndices&lt;&#39;a&gt; as core::iter::iterator::Iterator&gt;::next\n             at libstd/panicking.rs:410\n   6: bootstrap::compile::run_cargo\n             at bootstrap/compile.rs:1101\n   7: std::thread::panicking\n             at bootstrap/compile.rs:115\n   8: bootstrap::builder::Builder::cargo::{{closure}}\n             at bootstrap/builder.rs:1215\n   9: bootstrap::compile::copy_apple_sanitizer_dylibs\n             at bootstrap/compile.rs:342\n  10: bootstrap::builder::Builder::cargo::{{closure}}\n             at bootstrap/builder.rs:1215\n  11: bootstrap::compile::test_cargo\n             at bootstrap/compile.rs:464\n  12: bootstrap::builder::Builder::cargo::{{closure}}\n             at bootstrap/builder.rs:1215\n  13: bootstrap::compile::compiler_file\n             at bootstrap/compile.rs:959\n  14: bootstrap::builder::Builder::cargo::{{closure}}\n             at bootstrap/builder.rs:1215\n  15: bootstrap::builder::Builder::run_step_descriptions\n             at bootstrap/builder.rs:579\n  16: bootstrap::compile::compiler_file\n             at bootstrap/compile.rs:952\n  17: bootstrap::builder::Builder::cargo::{{closure}}\n             at bootstrap/builder.rs:1215\n  18: bootstrap::builder::Builder::run_step_descriptions\n             at bootstrap/builder.rs:579\n  19: std::thread::panicking\n             at bootstrap/compile.rs:55\n  20: bootstrap::builder::StepDescription::maybe_run\n             at bootstrap/builder.rs:191\n  21: bootstrap::builder::StepDescription::run\n             at bootstrap/builder.rs:234\n  22: bootstrap::builder::Builder::run_step_descriptions\n             at bootstrap/builder.rs:571\n  23: bootstrap::builder::Builder::get_step_descriptions\n             at bootstrap/builder.rs:561\n  24: bootstrap::Crate::local_path\n             at bootstrap/lib.rs:479\n  25: bootstrap::main\n             at bootstrap/bin/main.rs:29\n  26: std::rt::lang_start::{{closure}}\n             at libstd/rt.rs:74\n  27: std::panicking::try::do_call\n             at libstd/rt.rs:59\n             at libstd/panicking.rs:310\n  28: panic_unwind::dwarf::eh::read_encoded_pointer\n             at libpanic_unwind/lib.rs:102\n  29: std::alloc::default_alloc_error_hook\n             at libstd/panicking.rs:289\n             at libstd/panic.rs:392\n             at libstd/rt.rs:58\n  30: std::rt::lang_start\n             at libstd/rt.rs:74\n  31: bootstrap::main\nfailed to run: /Users/alex/Software/rust-devel/build/bootstrap/debug/bootstrap build libstd\nBuild completed unsuccessfully in 0:02:42\n</pre></div>",
        "id": 146887841,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541532664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> was hoping this would work, but it seems not... <a href=\"https://github.com/rust-lang/rust/pull/55687/files#diff-1b4d50b82a87f1031cd5f99b64123de7R787\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55687/files#diff-1b4d50b82a87f1031cd5f99b64123de7R787\">https://github.com/rust-lang/rust/pull/55687/files#diff-1b4d50b82a87f1031cd5f99b64123de7R787</a></p>",
        "id": 146888374,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541533163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ok so the cool thing is that if I comment out the check-for-duplicates code, rustc compiles and your run-pass tests as well</p>",
        "id": 146893795,
        "sender_full_name": "scalexm",
        "timestamp": 1541537804
    },
    {
        "content": "<p>so I see that there was some existing code which outputted warnings, that you removed</p>",
        "id": 146893807,
        "sender_full_name": "scalexm",
        "timestamp": 1541537817
    },
    {
        "content": "<p>any reason why you did not just use that existing code?</p>",
        "id": 146893954,
        "sender_full_name": "scalexm",
        "timestamp": 1541537926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> it wasn’t great that existing code.</p>",
        "id": 146898407,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541541821
    },
    {
        "content": "<p>It needs to be adapted for supertraits.</p>",
        "id": 146898445,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541541843
    },
    {
        "content": "<p>And made a hard error. At the very least</p>",
        "id": 146898474,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541541860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ok well I guess this is just a matter of getting it right now</p>",
        "id": 146898494,
        "sender_full_name": "scalexm",
        "timestamp": 1541541885
    },
    {
        "content": "<p>Yep...</p>",
        "id": 146898506,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541541900
    },
    {
        "content": "<p>Will be home to test shortly</p>",
        "id": 146898518,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541541911
    },
    {
        "content": "<p>Still on the go right now</p>",
        "id": 146898525,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541541919
    },
    {
        "content": "<p>if there weren't any binders you could just use the <code>trait_ref</code> associated to the projection predicate as a unique key</p>",
        "id": 146898532,
        "sender_full_name": "scalexm",
        "timestamp": 1541541927
    },
    {
        "content": "<p>but this may not work for higher-ranked projection predicates</p>",
        "id": 146898542,
        "sender_full_name": "scalexm",
        "timestamp": 1541541952
    },
    {
        "content": "<p>True hmm</p>",
        "id": 146898823,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541542234
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I was thinking</p>",
        "id": 146899986,
        "sender_full_name": "scalexm",
        "timestamp": 1541543402
    },
    {
        "content": "<p>the former lint was designed to handle cases like <code>where T: Iterator&lt;Item = (), Item = ()&gt;</code>, i.e. it does not trigger if you write <code>where T: Iterator&lt;Item = ()&gt;, T: Iterator&lt;Item = ()&gt;</code></p>",
        "id": 146900088,
        "sender_full_name": "scalexm",
        "timestamp": 1541543472
    },
    {
        "content": "<p>which... seems ok because the latter is really harder to write \"unintentionally\"</p>",
        "id": 146900099,
        "sender_full_name": "scalexm",
        "timestamp": 1541543492
    },
    {
        "content": "<p>and if you ever write <code>where T: Iterator&lt;Item = u32&gt;, T: Iterator&lt;Item = i32&gt;</code>, you'll get an inference error in the end</p>",
        "id": 146900111,
        "sender_full_name": "scalexm",
        "timestamp": 1541543521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> correct</p>",
        "id": 146900171,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541543555
    },
    {
        "content": "<p>so I'd say: just use the former strategy of just checking <code>T: Iterator&lt;Item = (), Item = ()&gt;</code>: this should be needed only on the direct projection predicates, not the elaborated ones because they where already checked in the corresponding trait definitions</p>",
        "id": 146900226,
        "sender_full_name": "scalexm",
        "timestamp": 1541543641
    },
    {
        "content": "<p>so basically having your check in <code>ast_type_binding_to_poly_projection_predicate</code> is correct I think</p>",
        "id": 146900288,
        "sender_full_name": "scalexm",
        "timestamp": 1541543664
    },
    {
        "content": "<p>then since <code>ast_type_binding_to_poly_projection_predicate</code> talks about <em>one</em> specific projection predicate, you can just use the assoc item def-id as a unique key, as the former lint code</p>",
        "id": 146900314,
        "sender_full_name": "scalexm",
        "timestamp": 1541543689
    },
    {
        "content": "<p>(which of course you now turn into an error)</p>",
        "id": 146900342,
        "sender_full_name": "scalexm",
        "timestamp": 1541543707
    },
    {
        "content": "<p>then it's true that the type inference error you get when you write <code>T: Iterator&lt;Item = i32&gt;, T: Iterator&lt;Item = u32&gt;</code> isn't <em>great</em>, but IMO it should be a separate issue</p>",
        "id": 146900372,
        "sender_full_name": "scalexm",
        "timestamp": 1541543753
    },
    {
        "content": "<p>and really it seems like a difficult one because of higher-ranked projection predicates, you would have to check if one is \"more specific\" than the other or something like that</p>",
        "id": 146900434,
        "sender_full_name": "scalexm",
        "timestamp": 1541543786
    },
    {
        "content": "<p>hmm</p>",
        "id": 146900694,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541544049
    },
    {
        "content": "<p>you may be right yes</p>",
        "id": 146900705,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541544066
    },
    {
        "content": "<p>we can still ask <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what they think, but landing your PR as I described might be a good first step I think</p>",
        "id": 146900834,
        "sender_full_name": "scalexm",
        "timestamp": 1541544197
    },
    {
        "content": "<p>as an aside, now that we use <code>elaborate_trait_ref</code>, maybe add a test for \"transitive\" projection predicates, i.e. something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 146900970,
        "sender_full_name": "scalexm",
        "timestamp": 1541544323
    },
    {
        "content": "<p>I agree</p>",
        "id": 146901073,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541544395
    },
    {
        "content": "<p>I wish my builds would work locally though</p>",
        "id": 146901097,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541544423
    },
    {
        "content": "<p>hmm</p>",
        "id": 146901101,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541544424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> should <code>poly_projections.extend</code> for the supertraits still go in <code>instantiate_poly_trait_ref_inner</code> thoguh?</p>",
        "id": 146901183,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541544484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> yes I think so</p>",
        "id": 146901218,
        "sender_full_name": "scalexm",
        "timestamp": 1541544518
    },
    {
        "content": "<p>also you might want to tweak a bit <code>elaborate_trait_ref</code> as we discussed, so that it gives you spans</p>",
        "id": 146901226,
        "sender_full_name": "scalexm",
        "timestamp": 1541544535
    },
    {
        "content": "<p>yeah</p>",
        "id": 146901245,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541544559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> ah wait, it can't... since <code>poly_projections.extend</code> isn't called until <em>after</em> <code>ast_type_binding_to_poly_projection_predicate</code></p>",
        "id": 146901257,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541544583
    },
    {
        "content": "<p>hmm</p>",
        "id": 146901259,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541544585
    },
    {
        "content": "<p>I don't think this is a problem?</p>",
        "id": 146901318,
        "sender_full_name": "scalexm",
        "timestamp": 1541544608
    },
    {
        "content": "<p>/me wonders what <code>speculative</code> means</p>",
        "id": 146901331,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541544640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> it is a problem, because otherwise it doesn't see the <code>poly_projections</code> added for the supertraits</p>",
        "id": 146901360,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541544674
    },
    {
        "content": "<p>you mean the check for duplicates?</p>",
        "id": 146901373,
        "sender_full_name": "scalexm",
        "timestamp": 1541544688
    },
    {
        "content": "<p>huh?</p>",
        "id": 146901454,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541544750
    },
    {
        "content": "<p>sorry, when you say \"it doesn't see\"</p>",
        "id": 146901467,
        "sender_full_name": "scalexm",
        "timestamp": 1541544779
    },
    {
        "content": "<p>what is \"it\"?</p>",
        "id": 146901476,
        "sender_full_name": "scalexm",
        "timestamp": 1541544790
    },
    {
        "content": "<p><code>ast_type_binding_to_poly_projection_predicate</code></p>",
        "id": 146901491,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541544812
    },
    {
        "content": "<p>so in <code>ast_type_binding_to_poly_projection_predicate</code> we would just include the check for duplicates</p>",
        "id": 146901545,
        "sender_full_name": "scalexm",
        "timestamp": 1541544848
    },
    {
        "content": "<p>and I think we don't need to check duplicates for projection predicates coming from super traits</p>",
        "id": 146901555,
        "sender_full_name": "scalexm",
        "timestamp": 1541544866
    },
    {
        "content": "<p>because, as they come for supertraits, they have been checked at their definition site already, i.e.:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">// error here</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"c1\">// no need to check again, even if `Iterator&lt;Item = ()&gt;, Iterator&lt;Item = ()&gt;` is indeed elaborated</span>\n</pre></div>",
        "id": 146901613,
        "sender_full_name": "scalexm",
        "timestamp": 1541544946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> you're missing the all-important case of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 146901716,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541545041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I deliberately missed it</p>",
        "id": 146901724,
        "sender_full_name": "scalexm",
        "timestamp": 1541545064
    },
    {
        "content": "<p>I think that this should not considered a problem to repeat this bound</p>",
        "id": 146901770,
        "sender_full_name": "scalexm",
        "timestamp": 1541545084
    },
    {
        "content": "<p>it definitely should</p>",
        "id": 146901780,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541545092
    },
    {
        "content": "<p>but you want to leave it for another PR?</p>",
        "id": 146901802,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541545122
    },
    {
        "content": "<p>the problem which may come is if you write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>which will give a type inference error, which might be hard to understand for a user</p>",
        "id": 146901895,
        "sender_full_name": "scalexm",
        "timestamp": 1541545228
    },
    {
        "content": "<p>but at least it'll error out</p>",
        "id": 146901896,
        "sender_full_name": "scalexm",
        "timestamp": 1541545228
    },
    {
        "content": "<p>well</p>",
        "id": 146901897,
        "sender_full_name": "scalexm",
        "timestamp": 1541545228
    },
    {
        "content": "<p>I don't see how this is different from e.g. writing <code>fn foo&lt;T: Clone, T: Clone&gt;()</code></p>",
        "id": 146901906,
        "sender_full_name": "scalexm",
        "timestamp": 1541545246
    },
    {
        "content": "<p>which is accepted today (and not even linted)</p>",
        "id": 146901913,
        "sender_full_name": "scalexm",
        "timestamp": 1541545252
    },
    {
        "content": "<p>but if we really want to handle that case, you come back on the problem of the uniqueness of projection predicates, which is difficult I think</p>",
        "id": 146902000,
        "sender_full_name": "scalexm",
        "timestamp": 1541545334
    },
    {
        "content": "<p>hmm okay</p>",
        "id": 146902055,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541545411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> you're right, I think that's a very tricky problem. I'll leave it for now</p>",
        "id": 146902315,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541545681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> feel free to open an issue about it maybe</p>",
        "id": 146902366,
        "sender_full_name": "scalexm",
        "timestamp": 1541545702
    },
    {
        "content": "<p>yes, could do</p>",
        "id": 146902367,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541545709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> do you have review/r+ privileges? I'll try to tie everything up so you can have a look tomorrow morning if you like.</p>",
        "id": 146906408,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541550559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I can't replicate the code building</p>",
        "id": 146917046,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541564259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I just pushed</p>",
        "id": 146917090,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541564293
    },
    {
        "content": "<p><a href=\"https://gist.github.com/7ac67405c877c8014ad173eee1b61d6e\" target=\"_blank\" title=\"https://gist.github.com/7ac67405c877c8014ad173eee1b61d6e\">https://gist.github.com/7ac67405c877c8014ad173eee1b61d6e</a></p>",
        "id": 146917409,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541564979
    },
    {
        "content": "<blockquote>\n<p>then it's true that the type inference error you get when you write <code>T: Iterator&lt;Item = i32&gt;, T: Iterator&lt;Item = u32&gt;</code> isn't <em>great</em>, but IMO it should be a separate issue</p>\n</blockquote>\n<p>I agree this is a distinct issue</p>",
        "id": 146928817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541583043
    },
    {
        "content": "<p>I just skimmed the backscroll; what <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> said makes sense to me. I plan to carve out some time for reviewing today fyi so <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> if you can package up the PR I can review it, though i'm also happy if <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> reviews</p>",
        "id": 146928843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541583081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> when are you getting that error?</p>",
        "id": 146931835,
        "sender_full_name": "scalexm",
        "timestamp": 1541587323
    },
    {
        "content": "<p>I don’t see it in travis</p>",
        "id": 146931847,
        "sender_full_name": "scalexm",
        "timestamp": 1541587331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ok I now see the failure you described</p>",
        "id": 146936938,
        "sender_full_name": "scalexm",
        "timestamp": 1541594718
    },
    {
        "content": "<p>turns out I was not compiling enough stuff (in particular <code>std</code> was compiling fine)</p>",
        "id": 146936949,
        "sender_full_name": "scalexm",
        "timestamp": 1541594743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ok so, I remember that in one of your first commits, you were hesitating between extending the projection bounds in <code>fn instantiate_poly_trait_ref_inner</code> or in <code>fn conv_object_ty_poly_trait_ref</code></p>",
        "id": 146941899,
        "sender_full_name": "scalexm",
        "timestamp": 1541599956
    },
    {
        "content": "<p>actually the former get calls for <em>every</em> trait ref, while the latter is only about AST <code>dyn Trait</code> to <code>ty::Dynamic</code> conversion, so this is the good one :)</p>",
        "id": 146941924,
        "sender_full_name": "scalexm",
        "timestamp": 1541600005
    },
    {
        "content": "<p>I got a minimal reproduction for your failure: <a href=\"https://gist.github.com/rust-play/dc09cf51d30d50500826a7eea62bf1f6\" target=\"_blank\" title=\"https://gist.github.com/rust-play/dc09cf51d30d50500826a7eea62bf1f6\">https://gist.github.com/rust-play/dc09cf51d30d50500826a7eea62bf1f6</a></p>",
        "id": 146941933,
        "sender_full_name": "scalexm",
        "timestamp": 1541600021
    },
    {
        "content": "<p>since we extended projection bounds in <code>instantiate_poly_trait_ref_inner</code>, even where clauses were extended with these new bounds</p>",
        "id": 146941997,
        "sender_full_name": "scalexm",
        "timestamp": 1541600056
    },
    {
        "content": "<p>most of the time, this was harmless, except in cases like this one</p>",
        "id": 146942008,
        "sender_full_name": "scalexm",
        "timestamp": 1541600071
    },
    {
        "content": "<p>because this clearly generated a recursive impl</p>",
        "id": 146942028,
        "sender_full_name": "scalexm",
        "timestamp": 1541600098
    },
    {
        "content": "<p>so I tried move the code which extends the projection bounds to <code>fn conv_object_ty_poly_trait_ref</code> and now everything works fine</p>",
        "id": 146942060,
        "sender_full_name": "scalexm",
        "timestamp": 1541600131
    },
    {
        "content": "<p>I would even consider merging that code with this loop: <a href=\"https://github.com/rust-lang/rust/pull/55687/files#diff-1b4d50b82a87f1031cd5f99b64123de7L1027\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55687/files#diff-1b4d50b82a87f1031cd5f99b64123de7L1027\">https://github.com/rust-lang/rust/pull/55687/files#diff-1b4d50b82a87f1031cd5f99b64123de7L1027</a></p>",
        "id": 146942131,
        "sender_full_name": "scalexm",
        "timestamp": 1541600185
    },
    {
        "content": "<p>where we would call <code>elaborate_trait_ref</code> instead of <code>supertraits</code> and match on <code>TraitPredicate</code> and <code>ProjectionPredicate</code></p>",
        "id": 146942150,
        "sender_full_name": "scalexm",
        "timestamp": 1541600217
    },
    {
        "content": "<p>I'll sum up everything directly on your PR</p>",
        "id": 146942523,
        "sender_full_name": "scalexm",
        "timestamp": 1541600509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> yep, this is all turning out very similar to what was in my original commit hah.</p>",
        "id": 146965516,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541604265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I even had it merged with that loop ;-)</p>",
        "id": 146965520,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541604272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> lol ok, then I think we reached to a consensus now</p>",
        "id": 146965595,
        "sender_full_name": "scalexm",
        "timestamp": 1541604340
    },
    {
        "content": "<p>yep</p>",
        "id": 146965600,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541604346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and yeah, I think we all agree now it should be a separate issue... the inference error is a tricky one to solve</p>",
        "id": 146966873,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541605434
    },
    {
        "content": "<p>no straightforward solution I suspect</p>",
        "id": 146966875,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541605440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> should be ready very soon. let's try to get it merged soon after :-)</p>",
        "id": 146968086,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541606520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any more thoughts on upcasting with trait aliases btw? should we be tackling upcasting in general?</p>",
        "id": 146969598,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541607819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> hrmm, now it doesn't work...</p>",
        "id": 146973627,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541611166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> what isn’t working exactly?</p>",
        "id": 146973725,
        "sender_full_name": "scalexm",
        "timestamp": 1541611233
    },
    {
        "content": "<p>I still get:</p>",
        "id": 146973738,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541611251
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0191]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified\n  --&gt; $DIR/trait-alias-object.rs:18:13\n   |\nLL |     let _: &amp;dyn IteratorAlias = &amp;vec![123].into_iter();\n   |             ^^^^^^^^^^^^^^^^^ missing associated type `Item` value\n</pre></div>",
        "id": 146973748,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541611257
    },
    {
        "content": "<p>hrmm</p>",
        "id": 146973770,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541611280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> <br>\nmy code is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">tr</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">traits</span>::<span class=\"n\">elaborate_trait_ref</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">principal</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">tr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ty</span>::<span class=\"n\">Predicate</span>::<span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">associated_types</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">associated_items</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">AssociatedKind</span>::<span class=\"n\">Type</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ty</span>::<span class=\"n\">Predicate</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// Include projections defined on supertraits.</span>\n<span class=\"w\">                    </span><span class=\"n\">projection_bounds</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"n\">pred</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DUMMY_SP</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>in <code>conv_object_ty_poly_trait_ref</code></p>",
        "id": 146973908,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541611415
    },
    {
        "content": "<p>aha</p>",
        "id": 146973972,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541611448
    },
    {
        "content": "<p>I think I see why</p>",
        "id": 146973974,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541611450
    },
    {
        "content": "<p>no, I don't... :-(</p>",
        "id": 146973978,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541611462
    },
    {
        "content": "<p>Mmh, weird because I had this test passing</p>",
        "id": 146974075,
        "sender_full_name": "scalexm",
        "timestamp": 1541611567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I just pushed if you want to take a look</p>",
        "id": 146974087,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541611591
    },
    {
        "content": "<p>Ok</p>",
        "id": 146974094,
        "sender_full_name": "scalexm",
        "timestamp": 1541611603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> any ideas?</p>",
        "id": 146974794,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541612229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> so</p>",
        "id": 147108955,
        "sender_full_name": "scalexm",
        "timestamp": 1541612986
    },
    {
        "content": "<p>we are talking about <code>src/test/run-pass/traits/trait-alias-object.rs</code> right?</p>",
        "id": 147108965,
        "sender_full_name": "scalexm",
        "timestamp": 1541612997
    },
    {
        "content": "<p>yep <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span></p>",
        "id": 147109038,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541613021
    },
    {
        "content": "<p>well, I just compiled your code, and running <code>rustc +stage1 src/test/run-pass/traits/trait-alias-object.rs</code> just works</p>",
        "id": 147242439,
        "sender_full_name": "scalexm",
        "timestamp": 1541613160
    },
    {
        "content": "<p>huh...</p>",
        "id": 147242472,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541613201
    },
    {
        "content": "<p>and stage2?</p>",
        "id": 147242496,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541613233
    },
    {
        "content": "<p>did not try stage2, I almost never compile up to stage2 since it takes so long :p</p>",
        "id": 147242552,
        "sender_full_name": "scalexm",
        "timestamp": 1541613263
    },
    {
        "content": "<p>running <code>./x.py test src/test/run-pass --stage 1 --test-args trait-alias-object.rs</code> also passes</p>",
        "id": 147242564,
        "sender_full_name": "scalexm",
        "timestamp": 1541613284
    },
    {
        "content": "<p>I'm going to compile stage 2 just in case</p>",
        "id": 147242598,
        "sender_full_name": "scalexm",
        "timestamp": 1541613314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> stage 2 is fairly quick normally, it's stage 0 and 1 that take forever. I normally do --keep-stage 0</p>",
        "id": 147242615,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541613329
    },
    {
        "content": "<p>ah yeah you're probably right</p>",
        "id": 147242640,
        "sender_full_name": "scalexm",
        "timestamp": 1541613357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> stage1 doesn't work for me either though, funnily enough</p>",
        "id": 147243392,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541613981
    },
    {
        "content": "<p>I just rebased over latest master and recompiled, but no diff</p>",
        "id": 147243404,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541613994
    },
    {
        "content": "<p>(yeah ok it's stage 1 compiler artifacts and codegen artifacts that take very long when you run <code>./x.py build --stage 2</code>)</p>",
        "id": 147243581,
        "sender_full_name": "scalexm",
        "timestamp": 1541614186
    },
    {
        "content": "<p>indeed</p>",
        "id": 147243663,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541614223
    },
    {
        "content": "<p><code>-i --keep-stage 0</code> helps hugely heh</p>",
        "id": 147243669,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541614234
    },
    {
        "content": "<p>did you run you recompilation with <code>--keep-stage 0</code>? Maybe that could be a mis-compilation issue due to this flag?</p>",
        "id": 147243691,
        "sender_full_name": "scalexm",
        "timestamp": 1541614272
    },
    {
        "content": "<p>it's possible</p>",
        "id": 147243792,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541614392
    },
    {
        "content": "<p>but I doubt it</p>",
        "id": 147243797,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541614400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> let's see what you get, since you're compiling now</p>",
        "id": 147243803,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541614414
    },
    {
        "content": "<p><code>./x.py test src/test/run-pass --stage 2 --test-args trait-alias-object.rs</code></p>",
        "id": 147243901,
        "sender_full_name": "scalexm",
        "timestamp": 1541614505
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Check compiletest suite=run-pass mode=run-pass (x86_64-apple-darwin -&gt; x86_64-apple-darwin)\n\nrunning 1 test\n.\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 2881 filtered out\n</pre></div>",
        "id": 147243906,
        "sender_full_name": "scalexm",
        "timestamp": 1541614506
    },
    {
        "content": "<p>okay wow</p>",
        "id": 147243937,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541614546
    },
    {
        "content": "<p>I definitely think <code>--keep-stage 0</code> plays in here</p>",
        "id": 147243948,
        "sender_full_name": "scalexm",
        "timestamp": 1541614561
    },
    {
        "content": "<p>well it's the only thing I can think of</p>",
        "id": 147243995,
        "sender_full_name": "scalexm",
        "timestamp": 1541614570
    },
    {
        "content": "<p>mhm</p>",
        "id": 147243997,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541614580
    },
    {
        "content": "<p>usually not a problem though</p>",
        "id": 147244000,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541614586
    },
    {
        "content": "<p>weird</p>",
        "id": 147244002,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541614588
    },
    {
        "content": "<p>maybe that's something else but then I have no idea :p</p>",
        "id": 147244048,
        "sender_full_name": "scalexm",
        "timestamp": 1541614625
    },
    {
        "content": "<p>at worst what you could try is, get all the tests working \"theoretically\", upload the PR and see what travis says</p>",
        "id": 147244067,
        "sender_full_name": "scalexm",
        "timestamp": 1541614657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> that's precisely what I'm doing, concurrently to rebuilding without --keep-stage</p>",
        "id": 147244274,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541614838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> what are you working on these days by  the way? implied bounds mainly?</p>",
        "id": 147244648,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541615188
    },
    {
        "content": "<p>mostly chalk integration</p>",
        "id": 147244658,
        "sender_full_name": "scalexm",
        "timestamp": 1541615206
    },
    {
        "content": "<p>I think we are very near to a prototype implementation in rustc</p>",
        "id": 147244671,
        "sender_full_name": "scalexm",
        "timestamp": 1541615218
    },
    {
        "content": "<p>oh nice</p>",
        "id": 147244682,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541615226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> so what will happen... rustc will be forked, and you'll try to integrate it... then there will be a longish period of testing, before finally a PR will be made to master?</p>",
        "id": 147244755,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541615286
    },
    {
        "content": "<p>or will this first integration not even look like the final integration?</p>",
        "id": 147244776,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541615309
    },
    {
        "content": "<p>what we'll do rather is to add a compilation flag to switch between the current trait solver and the new one</p>",
        "id": 147244829,
        "sender_full_name": "scalexm",
        "timestamp": 1541615351
    },
    {
        "content": "<p>we thought about working on a fork to reduce bors waiting times, but since we are making other useful changes to the compiler for the integration with chalk to work, it's better to work on master directly</p>",
        "id": 147244872,
        "sender_full_name": "scalexm",
        "timestamp": 1541615397
    },
    {
        "content": "<p>oh okay. fair enough. so when may we see that flag in master... a few weeks? :-)</p>",
        "id": 147247130,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541617326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> yeah I hope so</p>",
        "id": 147247269,
        "sender_full_name": "scalexm",
        "timestamp": 1541617461
    },
    {
        "content": "<p>cool</p>",
        "id": 147247279,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541617477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> crater run completed. 3 regressions.</p>",
        "id": 147248077,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541618235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I built afresh and still get the error</p>",
        "id": 147248311,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541618410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> no idea why then, but I’m pretty sure it works</p>",
        "id": 147250680,
        "sender_full_name": "scalexm",
        "timestamp": 1541620392
    },
    {
        "content": "<p>Update the ui tests so that Travis doesn’t fail on them</p>",
        "id": 147250694,
        "sender_full_name": "scalexm",
        "timestamp": 1541620402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> need a working build before I start messing around...</p>",
        "id": 147255359,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541624465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> just remove <code>src/test/ui/error-codes/E0719-trait-alias.rs</code>,  <code>src/test/ui/error-codes/E0719-trait-alias-object.rs</code> and <code>src/test/ui/traits/trait-alias-object.rs</code> temporarily</p>",
        "id": 147255619,
        "sender_full_name": "scalexm",
        "timestamp": 1541624689
    },
    {
        "content": "<p>if you havent</p>",
        "id": 147255623,
        "sender_full_name": "scalexm",
        "timestamp": 1541624698
    },
    {
        "content": "<p>no, I need to creat new tests</p>",
        "id": 147255627,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541624701
    },
    {
        "content": "<p>I mean, we just want to see if travis gets the same result than me</p>",
        "id": 147255650,
        "sender_full_name": "scalexm",
        "timestamp": 1541624720
    },
    {
        "content": "<p>because what's happening is definitely weird :p</p>",
        "id": 147255660,
        "sender_full_name": "scalexm",
        "timestamp": 1541624734
    },
    {
        "content": "<p>so if you haven't touched any code since then, and that you remove these tests, we may be able to see if travis agrees with me</p>",
        "id": 147255708,
        "sender_full_name": "scalexm",
        "timestamp": 1541624768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> works now :-)</p>",
        "id": 147256044,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541625138
    },
    {
        "content": "<p>I had to completely wipe <code>build/</code></p>",
        "id": 147256050,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541625144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ah very good!</p>",
        "id": 147256056,
        "sender_full_name": "scalexm",
        "timestamp": 1541625149
    },
    {
        "content": "<p>yep</p>",
        "id": 147256674,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541625674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> done! ready for final review and r+ :-)</p>",
        "id": 147258481,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541627156
    },
    {
        "content": "<p>ok seems good</p>",
        "id": 147259201,
        "sender_full_name": "scalexm",
        "timestamp": 1541627680
    },
    {
        "content": "<p>just waiting for travis results before r+-ing</p>",
        "id": 147259221,
        "sender_full_name": "scalexm",
        "timestamp": 1541627697
    },
    {
        "content": "<p>no problem</p>",
        "id": 147259426,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541627872
    },
    {
        "content": "<p>btw the three crater regressions seem spurious</p>",
        "id": 147259523,
        "sender_full_name": "scalexm",
        "timestamp": 1541627946
    },
    {
        "content": "<p>two of them showed up already in a previous crater run, and I also checked the third one</p>",
        "id": 147259542,
        "sender_full_name": "scalexm",
        "timestamp": 1541627975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> oh okay cool. the one \"fix\" was probably spurious too heh</p>",
        "id": 147259671,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541628050
    },
    {
        "content": "<p>onto <a href=\"https://github.com/rust-lang/rust/issues/54600#issuecomment-433049875\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54600#issuecomment-433049875\">https://github.com/rust-lang/rust/issues/54600#issuecomment-433049875</a> now! <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span></p>",
        "id": 147259690,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1541628069
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> yes and anyway no chance your PR hits bors before travis finishes so it won't use bors' time needlessly in case of a test fail, so ok I r+'d</p>",
        "id": 147261266,
        "sender_full_name": "scalexm",
        "timestamp": 1541629556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> can there be lifetime binders in trait objects?</p>",
        "id": 147612814,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542132118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> you mean like in <code>fn foo(x: &amp;dyn for&lt;'a&gt; Fn(&amp;'a i32))</code>? If so, yes</p>",
        "id": 147612973,
        "sender_full_name": "scalexm",
        "timestamp": 1542132245
    },
    {
        "content": "<p>okay, thanks</p>",
        "id": 147612990,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542132269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I don't think that affects the rules about a single regular trait + arbitrary numebr of auto-traits though, right?</p>",
        "id": 147613013,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542132298
    },
    {
        "content": "<p>btw, turns out we need to make the extension to <code>elaborate_trait_ref</code> to return spans now :-P</p>",
        "id": 147613103,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542132378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> yeah I don't think neither</p>",
        "id": 147613117,
        "sender_full_name": "scalexm",
        "timestamp": 1542132406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> ugh, there's an issue: when you call <code>elaborate_trait_refs</code>, and it ends up looking at a <code>Predicate</code> that's not a trait, there's seemingly no way to get the span...</p>",
        "id": 147613831,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542133045
    },
    {
        "content": "<p>is there a way to work around this, or should we just return a DUMMY_SPAN?</p>",
        "id": 147613978,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542133139
    },
    {
        "content": "<p>I think we're only interested in the spans for traits here, luckily...</p>",
        "id": 147614006,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542133154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> doesn't <code>super_predicates_of</code> return span information?</p>",
        "id": 147615726,
        "sender_full_name": "scalexm",
        "timestamp": 1542134618
    },
    {
        "content": "<p>ah you mean</p>",
        "id": 147615729,
        "sender_full_name": "scalexm",
        "timestamp": 1542134623
    },
    {
        "content": "<p>ok let me see</p>",
        "id": 147615738,
        "sender_full_name": "scalexm",
        "timestamp": 1542134634
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  you are talking about the outlives components right?</p>",
        "id": 147615892,
        "sender_full_name": "scalexm",
        "timestamp": 1542134757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> right</p>",
        "id": 147615938,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542134766
    },
    {
        "content": "<p>I'm putting <code>DUMMY_SP</code> in there for now and seeing how it works :-P</p>",
        "id": 147615954,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542134778
    },
    {
        "content": "<p>I would put the same span as the <code>TypeOutlives</code> predicate you just got</p>",
        "id": 147616031,
        "sender_full_name": "scalexm",
        "timestamp": 1542134865
    },
    {
        "content": "<p>and probably you could initially feed <code>elaborate_trait_ref</code> with a span</p>",
        "id": 147616094,
        "sender_full_name": "scalexm",
        "timestamp": 1542134894
    },
    {
        "content": "<p>(which will end up being <code>DUMMY_SP</code> in most calls except yours I guess)</p>",
        "id": 147616106,
        "sender_full_name": "scalexm",
        "timestamp": 1542134910
    },
    {
        "content": "<p>actually how were you planning to forward than span info to begin with?</p>",
        "id": 147616123,
        "sender_full_name": "scalexm",
        "timestamp": 1542134928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> ah true</p>",
        "id": 147616292,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542135049
    },
    {
        "content": "<p>let's do that</p>",
        "id": 147616298,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542135054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> a lot of refactoring needed in the end, even though it's quite straightforward... going out now, but I'll ping you when I get back, and maybe you can kindly review and r+ my PR. :-)</p>",
        "id": 147619812,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542138180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> hi</p>",
        "id": 147633410,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542151732
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>, anything needed? :)</p>",
        "id": 147656705,
        "sender_full_name": "scalexm",
        "timestamp": 1542188097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> sorry for the delay. couldn't manage to finish it last night. and busy most of today. just wrapping things up now (I think)</p>",
        "id": 147705740,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542235686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> <a href=\"https://github.com/rust-lang/rust/pull/55994\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55994\">https://github.com/rust-lang/rust/pull/55994</a> is ready for final review and r+ I think.</p>",
        "id": 147888392,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542482306
    },
    {
        "content": "<p>awesome!</p>",
        "id": 147990049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542657190
    },
    {
        "content": "<p>I skimmed it, will read in more depth soon</p>",
        "id": 147990056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542657194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> great, thanks.</p>",
        "id": 147991181,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542658062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thanks for the review. fixed the nit, should be good to go now.</p>",
        "id": 148060008,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542740913
    },
    {
        "content": "<p>r+</p>",
        "id": 148060072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542740988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any idea about <a href=\"https://github.com/rust-lang/rust/pull/55994#issuecomment-441536830\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55994#issuecomment-441536830\">https://github.com/rust-lang/rust/pull/55994#issuecomment-441536830</a>?</p>",
        "id": 148381932,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543252467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> could you maybe try to minimize the failing example?</p>",
        "id": 148382398,
        "sender_full_name": "scalexm",
        "timestamp": 1543252805
    },
    {
        "content": "<p>I'll try yeah. Heading out now, but will be back later</p>",
        "id": 148382445,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543252851
    },
    {
        "content": "<p>not even sure the exact source it fails on mind you</p>",
        "id": 148382450,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543252857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I'll try to take a look, I have some time available</p>",
        "id": 148382564,
        "sender_full_name": "scalexm",
        "timestamp": 1543252943
    },
    {
        "content": "<p>actually <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I think you fixed a bug</p>",
        "id": 148386027,
        "sender_full_name": "scalexm",
        "timestamp": 1543256179
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=7567fa0392b7a68425ba7d0f2822c0e5\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=7567fa0392b7a68425ba7d0f2822c0e5\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=7567fa0392b7a68425ba7d0f2822c0e5</a></p>",
        "id": 148386030,
        "sender_full_name": "scalexm",
        "timestamp": 1543256181
    },
    {
        "content": "<p>but it seems like the AppVeyor test suite is also testing some popular crates (e.g. servo, ripgrep)</p>",
        "id": 148386090,
        "sender_full_name": "scalexm",
        "timestamp": 1543256272
    },
    {
        "content": "<p>one of them is depending on the <code>traitobject</code> crate, which I think is flawed: <a href=\"https://github.com/reem/rust-traitobject/blob/master/src/impls.rs\" target=\"_blank\" title=\"https://github.com/reem/rust-traitobject/blob/master/src/impls.rs\">https://github.com/reem/rust-traitobject/blob/master/src/impls.rs</a></p>",
        "id": 148386148,
        "sender_full_name": "scalexm",
        "timestamp": 1543256301
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148386166,
        "sender_full_name": "scalexm",
        "timestamp": 1543256324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> basically the <code>dedup</code> in the former code was wrong because it was only deduping <code>trait_bounds[1..]</code></p>",
        "id": 148386505,
        "sender_full_name": "scalexm",
        "timestamp": 1543256627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> Aha, good spot. I think you’re right.</p>",
        "id": 148387751,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543257666
    },
    {
        "content": "<p>I wonder what we should do here.</p>",
        "id": 148387761,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543257678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thoughts?</p>",
        "id": 148387772,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543257692
    },
    {
        "content": "<p>what is the problem exactly?</p>",
        "id": 148388435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543258126
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I wonder why that crate even does that. Any idea? I’d be tempted to break it.</p>",
        "id": 148388755,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543258392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> it may have been generated by a script?</p>",
        "id": 148388782,
        "sender_full_name": "scalexm",
        "timestamp": 1543258414
    },
    {
        "content": "<p>that crate defines a trait <code>Trait</code> and implements it for all trait objects possibly coming from <code>libstd</code></p>",
        "id": 148388828,
        "sender_full_name": "scalexm",
        "timestamp": 1543258442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> Good point. Maybe I should open an issue there.</p>",
        "id": 148388881,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543258483
    },
    {
        "content": "<p>probably so that when you bound with <code>where T: Trait</code>, you know you are receiving a trait object and can use this invariant in some unsafe code</p>",
        "id": 148388882,
        "sender_full_name": "scalexm",
        "timestamp": 1543258484
    },
    {
        "content": "<p>(and that would explain why said <code>Trait</code> is marked as unsafe)</p>",
        "id": 148388891,
        "sender_full_name": "scalexm",
        "timestamp": 1543258501
    },
    {
        "content": "<p>breaking it now is maybe not a good idea because some popular crate depends on it</p>",
        "id": 148388913,
        "sender_full_name": "scalexm",
        "timestamp": 1543258521
    },
    {
        "content": "<p>but opening a PR might be a good option</p>",
        "id": 148388919,
        "sender_full_name": "scalexm",
        "timestamp": 1543258529
    },
    {
        "content": "<p>(rather than an issue, seems like the fix is quite simple I believe)</p>",
        "id": 148388925,
        "sender_full_name": "scalexm",
        "timestamp": 1543258540
    },
    {
        "content": "<p>then wait for the upstream crates to update their dependencies (opening PRs as well might help)</p>",
        "id": 148388932,
        "sender_full_name": "scalexm",
        "timestamp": 1543258550
    },
    {
        "content": "<p>I'm still trying to understand why it must be broken</p>",
        "id": 148389447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543258948
    },
    {
        "content": "<p>because it has <code>dyn Send + Send</code>?</p>",
        "id": 148389454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543258953
    },
    {
        "content": "<p><em>oh</em></p>",
        "id": 148389476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543258977
    },
    {
        "content": "<p>because of <em>coherence</em></p>",
        "id": 148389477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543258980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> what we can do perhaps is to do a future-compatibility warning period</p>",
        "id": 148389511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543259016
    },
    {
        "content": "<p>e.g., we could detect the conflict, but permit it for traits with no items implemented on <code>dyn Send</code></p>",
        "id": 148389528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543259040
    },
    {
        "content": "<p>but issue a future-compatibility warning</p>",
        "id": 148389577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543259048
    },
    {
        "content": "<p>as <a href=\"https://forge.rust-lang.org/rustc-bug-fix-procedure.html\" target=\"_blank\" title=\"https://forge.rust-lang.org/rustc-bug-fix-procedure.html\">described here</a></p>",
        "id": 148389583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543259062
    },
    {
        "content": "<p>we may have to do this for a time at least</p>",
        "id": 148389593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543259072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yeah sounds reasonable. I’ll try to implement that tonight when I get back.</p>",
        "id": 148389949,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543259345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Anyway, not much to update you on, except that clarification on where to instantiate opaque types (regular or nll type checking phase) would be great. Tagged you in an issue about impl Trait lifetimes that I’d personally like to see addressed soon, but yeah... did you see <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>’s Discord messages about invariant lifetimes in RPIT btw?</p>",
        "id": 148390139,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543259492
    },
    {
        "content": "<p>\"RPIT\"?</p>",
        "id": 148390157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543259513
    },
    {
        "content": "<p>not sure if I saw those messages</p>",
        "id": 148390163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543259520
    },
    {
        "content": "<p>I'm still catching up on discord/zulip</p>",
        "id": 148390211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543259531
    },
    {
        "content": "<p>RPIT = return-position impl Trait. Sorry, something <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> coined a while ago, wasn’t sure if it had fully caught on yet.</p>",
        "id": 148390264,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543259601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I went scanning back my discord mentions but didn't see the comments you are referring to</p>",
        "id": 148390854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543260031
    },
    {
        "content": "<p>maybe send me a link</p>",
        "id": 148390867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543260038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I’m just on my phone sorry. Ask @eddyb if you don’t mind? I was pretty sure he tagged you though hmm.</p>",
        "id": 148392171,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543260966
    },
    {
        "content": "<p>he probably did, it's just that I have a lot of tags...</p>",
        "id": 148392509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543261278
    },
    {
        "content": "<p>I'll ping him in a bit, I have a bunch of msgs from him to catch up on anyway :)</p>",
        "id": 148392519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543261286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> hey, you around by chance?</p>",
        "id": 148650215,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543336914
    },
    {
        "content": "<p>not really, feeling quite sick today, heading back to bed :(</p>",
        "id": 148651164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543337740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sorry to hear. rest up and get well!</p>",
        "id": 148651737,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543338150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> hey. feeling any better today?</p>",
        "id": 148810602,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543519032
    },
    {
        "content": "<p>yep :) now just scrambling to catch up</p>",
        "id": 148820336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543526509
    },
    {
        "content": "<p>:-)</p>",
        "id": 148820736,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543526787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> what's up with <a href=\"https://github.com/rust-lang/rust/pull/55994\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55994\">https://github.com/rust-lang/rust/pull/55994</a> btw?</p>",
        "id": 148888995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543611607
    },
    {
        "content": "<p>Sorry, going to get to that shortly.</p>",
        "id": 148891368,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543613878
    },
    {
        "content": "<p>did you ever catch up with Eddy about the invariant lifetimes in RPIT issue btw? :-)</p>",
        "id": 148894532,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543617357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^ maybe this week? :-)</p>",
        "id": 150748354,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543808203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Btw, I think this is going to be extremely difficult to lint for. Because the bug was in astconv, but detection can only be done during coherence checking.</p>",
        "id": 150751358,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543813775
    },
    {
        "content": "<p>I wonder if we can move straight to a bug fix (hard error), and just alert the problematic crates of the issue.</p>",
        "id": 150751473,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543813991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was talking about this with <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> and <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> and we were thinking the best/easiest thing to do might actually be to lint duplicate auto traits in general, which subsumes the above case. And <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> tells me will have a go at linting on multiple impls where the auto traits are just rearranged. Sound reasonable? We can potentially turn both into hard errors in the future.</p>",
        "id": 150789648,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1543861846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Not sure if you saw my above message... probably doesn't need your immediate attention now though. Anyway, about the <code>is_trait_alias</code> fn... is the right approach to make that cross-crate... somehow?</p>",
        "id": 151027407,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544119497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> yep I think so</p>",
        "id": 151101459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544178051
    },
    {
        "content": "<p>I imagine one way to do it would be to modify the <code>DefPath</code></p>",
        "id": 151101464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544178060
    },
    {
        "content": "<p>so that we identify TraitAliases</p>",
        "id": 151101474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544178068
    },
    {
        "content": "<p>another way to do it would be to convert <code>is_trait_alias</code> into a query</p>",
        "id": 151101485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544178078
    },
    {
        "content": "<p>and implement it differently cross-crate</p>",
        "id": 151101500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544178082
    },
    {
        "content": "<p>but I .. feel like this is the kind of thing that overloading <code>DefPath</code> works well for</p>",
        "id": 151101503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544178091
    },
    {
        "content": "<blockquote>\n<p>and implement it differently cross-crate</p>\n</blockquote>\n<p>e.g. by consulting metadata</p>",
        "id": 151101506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544178100
    },
    {
        "content": "<blockquote>\n<p>And <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> tells me will have a go at linting on multiple impls where the auto traits are just rearranged. Sound reasonable? We can potentially turn both into hard errors in the future.</p>\n</blockquote>\n<p>you mean that <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> will take a stab at that?</p>",
        "id": 151101587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544178142
    },
    {
        "content": "<p>Yep, he's always submitted a PR, and the crater run is finished. It's just waiting on approval.</p>",
        "id": 151125988,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544202189
    },
    {
        "content": "<p>I've added a lint for duplicate auto traits, which is working</p>",
        "id": 151125996,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544202198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did you get a chance to chat with @eddyb yet about the invariant lifetimes in RPIT issue? :-)</p>",
        "id": 151132150,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544207661
    },
    {
        "content": "<p>(or the other lifetimes issue I tagged you in a couple of weeks ago)</p>",
        "id": 151132169,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544207678
    },
    {
        "content": "<p>oh and if you could review <a href=\"https://github.com/rust-lang/rust/pull/55994\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55994\">https://github.com/rust-lang/rust/pull/55994</a> on Monday, I'd be much obliged!</p>",
        "id": 151159754,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544239720
    },
    {
        "content": "<p>Any idea how I should modify <code>build_reduced_graph_for_external_crate_def</code> to handle <code>Def::TraitAlias</code> now?</p>",
        "id": 151504533,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544593295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> <span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span></p>",
        "id": 151624780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544722577
    },
    {
        "content": "<p>hi</p>",
        "id": 151625603,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544723290
    },
    {
        "content": "<p>I only have about 15 mins now</p>",
        "id": 151625613,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544723296
    },
    {
        "content": "<p>but let's try to fit in what we can...</p>",
        "id": 151625626,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544723306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 151625637,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544723320
    },
    {
        "content": "<p>?</p>",
        "id": 151625803,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544723507
    },
    {
        "content": "<p>ok =)</p>",
        "id": 151625804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544723509
    },
    {
        "content": "<p>sorry for the bad timing then</p>",
        "id": 151625805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544723513
    },
    {
        "content": "<p>we could reschedule for tomorrow</p>",
        "id": 151625809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544723519
    },
    {
        "content": "<p>(same time)</p>",
        "id": 151625856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544723528
    },
    {
        "content": "<p>or maybe a bit earlier</p>",
        "id": 151625863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544723539
    },
    {
        "content": "<p>can't do tomorrow.</p>",
        "id": 151625906,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544723593
    },
    {
        "content": "<p>(next week?)</p>",
        "id": 151625915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544723600
    },
    {
        "content": "<p>I could do 7:00 tonight maybe</p>",
        "id": 151625916,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544723601
    },
    {
        "content": "<p>a little over an hour</p>",
        "id": 151625920,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544723604
    },
    {
        "content": "<p>an hour from now?</p>",
        "id": 151625933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544723622
    },
    {
        "content": "<p>yeah</p>",
        "id": 151625986,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544723644
    },
    {
        "content": "<p>if you can...</p>",
        "id": 151625997,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544723652
    },
    {
        "content": "<p>I guess I can do that, sure</p>",
        "id": 151626003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544723658
    },
    {
        "content": "<p>apart from that... maybe next Tues. not sure.</p>",
        "id": 151626004,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544723661
    },
    {
        "content": "<p>okay thanks</p>",
        "id": 151626005,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544723662
    },
    {
        "content": "<p>if you have any spare moment in the meanwhile, a final review of my <a href=\"https://github.com/rust-lang/rust/pull/55994\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55994\">https://github.com/rust-lang/rust/pull/55994</a> PR would be great :-)</p>",
        "id": 151626049,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544723713
    },
    {
        "content": "<p>(you already reviewed some of it before.)</p>",
        "id": 151626053,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544723724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ?</p>",
        "id": 151725097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544728561
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 151725492,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544728907
    },
    {
        "content": "<p>apologies</p>",
        "id": 151725495,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544728908
    },
    {
        "content": "<p>my meeting from 6:00 to 7:00 overran a bit</p>",
        "id": 151725539,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544728924
    },
    {
        "content": "<p>no worries</p>",
        "id": 151725714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729075
    },
    {
        "content": "<p>so, what's on your mind :)</p>",
        "id": 151725724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did you take a look at the PR yet? :-)</p>",
        "id": 151725849,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did you have a team meeting today btw? or will that be later?</p>",
        "id": 151726003,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> do you mean this one <a href=\"https://github.com/rust-lang/rust/pull/56225\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56225\">https://github.com/rust-lang/rust/pull/56225</a> ?</p>",
        "id": 151726013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729333
    },
    {
        "content": "<p>if so, not yet</p>",
        "id": 151726022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729344
    },
    {
        "content": "<p>there is a lang team meeting in ~30 minutes</p>",
        "id": 151726030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729352
    },
    {
        "content": "<p>the one I linked to earlier</p>",
        "id": 151726032,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729354
    },
    {
        "content": "<blockquote>\n<p>Implement RFC 2338, \"Type alias enum variants\" <a href=\"https://github.com/rust-lang/rust/issues/56225\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56225\">#56225</a></p>\n</blockquote>",
        "id": 151726048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729366
    },
    {
        "content": "<p>so no, the trait alias one :-)</p>",
        "id": 151726057,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729376
    },
    {
        "content": "<p>that's the one I linked to, anyway</p>",
        "id": 151726058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> will review that one</p>",
        "id": 151726067,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729385
    },
    {
        "content": "<p>oh oh</p>",
        "id": 151726068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729385
    },
    {
        "content": "<p>he already has in fact</p>",
        "id": 151726080,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729394
    },
    {
        "content": "<p>just needs a final review</p>",
        "id": 151726087,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729398
    },
    {
        "content": "<p>I think I r+'d it</p>",
        "id": 151726092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729402
    },
    {
        "content": "<p>sorry for the confusion: I was only asking about that one because of the type inference issue</p>",
        "id": 151726154,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729411
    },
    {
        "content": "<p>This one:</p>\n<blockquote>\n<p>Various fixes to trait alias feature <a href=\"https://github.com/rust-lang/rust/issues/55994\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55994\">#55994</a></p>\n</blockquote>",
        "id": 151726160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729416
    },
    {
        "content": "<p>okay cool!</p>",
        "id": 151726166,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729422
    },
    {
        "content": "<p>I hadn't checked yet</p>",
        "id": 151726176,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729425
    },
    {
        "content": "<p>thanks</p>",
        "id": 151726189,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729429
    },
    {
        "content": "<p>yeah, those changes looked good</p>",
        "id": 151726221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544729466
    },
    {
        "content": "<p>I presume you're happy with the linting behaviour there and similarly how <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span>'s lint for trait ordering in trait objects behaves</p>",
        "id": 151726227,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729473
    },
    {
        "content": "<p>great.</p>",
        "id": 151726234,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1544729479
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 152339831,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408253
    },
    {
        "content": "<p>was wondering what your opinion is to do about the crates obstructing the bug fix for duplicate auto traits</p>",
        "id": 152339963,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> can you say more?</p>",
        "id": 152339998,
        "sender_full_name": "centril",
        "timestamp": 1545408454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> Here's a dependency graph of crates that would be broken by the bugfix: <a href=\"https://gist.github.com/d305248be22d77c97c60dc0b1833dd46\" target=\"_blank\" title=\"https://gist.github.com/d305248be22d77c97c60dc0b1833dd46\">https://gist.github.com/d305248be22d77c97c60dc0b1833dd46</a></p>",
        "id": 152340101,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  root regressions at top? -- I thought traitobject was the only root</p>",
        "id": 152340169,
        "sender_full_name": "centril",
        "timestamp": 1545408606
    },
    {
        "content": "<p>yeah I think so</p>",
        "id": 152340173,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408614
    },
    {
        "content": "<p>and I thought so too</p>",
        "id": 152340177,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408617
    },
    {
        "content": "<p>it's the <em>main</em> one by far still</p>",
        "id": 152340178,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408621
    },
    {
        "content": "<p>by number of traits, I think</p>",
        "id": 152340180,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408624
    },
    {
        "content": "<p>but definitely not the only</p>",
        "id": 152340183,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408627
    },
    {
        "content": "<p>(it seems)</p>",
        "id": 152340184,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> what do you mean by \"obstructing\" ... is there someone refusing to do it?</p>",
        "id": 152340200,
        "sender_full_name": "centril",
        "timestamp": 1545408665
    },
    {
        "content": "<p>no</p>",
        "id": 152340206,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408670
    },
    {
        "content": "<p>I mean the current state of the codebases</p>",
        "id": 152340215,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408676
    },
    {
        "content": "<p>for those crates</p>",
        "id": 152340219,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  well; filing PRs against root regressions would help the situation</p>",
        "id": 152340223,
        "sender_full_name": "centril",
        "timestamp": 1545408694
    },
    {
        "content": "<p>I'm not going to file PRs for all of them :-P</p>",
        "id": 152340234,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408704
    },
    {
        "content": "<p>issues maybe</p>",
        "id": 152340236,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> or issues; that is also good</p>",
        "id": 152340287,
        "sender_full_name": "centril",
        "timestamp": 1545408731
    },
    {
        "content": "<p>okay</p>",
        "id": 152340290,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408735
    },
    {
        "content": "<p>I could do that</p>",
        "id": 152340291,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  is this just for duplicate-auto and not for order-dependent?</p>",
        "id": 152340307,
        "sender_full_name": "centril",
        "timestamp": 1545408755
    },
    {
        "content": "<p>yes. well even more specifically than that...</p>",
        "id": 152340321,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408768
    },
    {
        "content": "<p>incoherence caused by duplicate-auto</p>",
        "id": 152340327,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408775
    },
    {
        "content": "<p>I mean, technically incoherence... auto-trait impls don't have methods of coufse</p>",
        "id": 152340348,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  well yes; the forward compat warning is about types that are different today but will become the same tomorrow</p>",
        "id": 152340361,
        "sender_full_name": "centril",
        "timestamp": 1545408827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> you might want to deal with creating issues for order-dependent as well... my feeling is that the set of root regression crates are roughly the same</p>",
        "id": 152340431,
        "sender_full_name": "centril",
        "timestamp": 1545408891
    },
    {
        "content": "<p>actually...</p>",
        "id": 152340433,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408896
    },
    {
        "content": "<p>I think the previous crater run just looked for duplicate auto traits</p>",
        "id": 152340444,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408906
    },
    {
        "content": "<p>and errored</p>",
        "id": 152340445,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408908
    },
    {
        "content": "<p>it didn't look at coherence</p>",
        "id": 152340448,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408916
    },
    {
        "content": "<p>maybe we should do another crater run</p>",
        "id": 152340454,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408928
    },
    {
        "content": "<p>where it only errors for incoherence</p>",
        "id": 152340470,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  oh; ok -- hopefully the will-error-due-to-coherence will be smaller once you've nailed down the error condition</p>",
        "id": 152340480,
        "sender_full_name": "centril",
        "timestamp": 1545408956
    },
    {
        "content": "<p>exactly</p>",
        "id": 152340494,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408962
    },
    {
        "content": "<p>and if that's really tiny...</p>",
        "id": 152340530,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408965
    },
    {
        "content": "<p>we can go straight to hard error :-)</p>",
        "id": 152340538,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408972
    },
    {
        "content": "<p>which Niko is happy with I think.</p>",
        "id": 152340547,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408976
    },
    {
        "content": "<p>certainly, if it's just traitobject</p>",
        "id": 152340549,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408984
    },
    {
        "content": "<p>or possibly just a small handful</p>",
        "id": 152340556,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545408995
    },
    {
        "content": "<p>of infrequently used crates</p>",
        "id": 152340562,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545409000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  well... traitobject is a very small root regression but it has a tonne of reverse dependencies</p>",
        "id": 152340594,
        "sender_full_name": "centril",
        "timestamp": 1545409030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> yep, annoyingly. and the author has been AWOL for like 1.5 years or more :-P</p>",
        "id": 152340606,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545409048
    },
    {
        "content": "<p>and doesn't reply to issues/PRs/emails</p>",
        "id": 152340616,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545409055
    },
    {
        "content": "<p>so at some point we may have to say \"screw it, the hard error is going into nightly, you have between 6 and 12 weeks to fix to fix your library and release before it gets broken on stable.\" ;-)</p>",
        "id": 152340691,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545409091
    },
    {
        "content": "<p>it's a bug-fix after all</p>",
        "id": 152340704,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545409107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  well no... <a href=\"https://github.com/jupyterlab/jupyterlab/issues/5789\" target=\"_blank\" title=\"https://github.com/jupyterlab/jupyterlab/issues/5789\">https://github.com/jupyterlab/jupyterlab/issues/5789</a></p>",
        "id": 152341206,
        "sender_full_name": "centril",
        "timestamp": 1545409634
    },
    {
        "content": "<p>2 days ago</p>",
        "id": 152341214,
        "sender_full_name": "centril",
        "timestamp": 1545409649
    },
    {
        "content": "<p>huh?</p>",
        "id": 152341229,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545409669
    },
    {
        "content": "<p>oh yes</p>",
        "id": 152341237,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545409679
    },
    {
        "content": "<p>he just refuses to reply to anyhting Rust related evidently :-P</p>",
        "id": 152341276,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545409690
    },
    {
        "content": "<p>at least from me</p>",
        "id": 152341284,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545409704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span></p>",
        "id": 152341876,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  maybe you can reach out to reem's \"associates\" and see if they can reach out to them?</p>",
        "id": 152341994,
        "sender_full_name": "centril",
        "timestamp": 1545410307
    },
    {
        "content": "<p>no</p>",
        "id": 152342000,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410314
    },
    {
        "content": "<p>I don't really feel it's my duty (or that of the Rust team) to do this.</p>",
        "id": 152342014,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410329
    },
    {
        "content": "<p>we've created an issue, PR, and emailed him</p>",
        "id": 152342019,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410335
    },
    {
        "content": "<p>we'll give him a bit more time</p>",
        "id": 152342021,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410338
    },
    {
        "content": "<p>its true</p>",
        "id": 152342023,
        "sender_full_name": "centril",
        "timestamp": 1545410340
    },
    {
        "content": "<p>but after that, it's his problem. :-)</p>",
        "id": 152342028,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410345
    },
    {
        "content": "<p>hopefully there won't be any more offending traits after the new crater run...</p>",
        "id": 152342048,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>   the problem with \"his problem\" / \"screw it\" is that there are all these other crates that rely on traitobject which will be broken... its not that breaking traitobject is a major problem; its breaking all those reverse dependencies</p>",
        "id": 152342069,
        "sender_full_name": "centril",
        "timestamp": 1545410401
    },
    {
        "content": "<p>so we need to be creative</p>",
        "id": 152342119,
        "sender_full_name": "centril",
        "timestamp": 1545410409
    },
    {
        "content": "<p>I agree...</p>",
        "id": 152342120,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410412
    },
    {
        "content": "<p>here's one idea:</p>",
        "id": 152342123,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410420
    },
    {
        "content": "<p>its a pickle <span class=\"emoji emoji-1f615\" title=\"confused\">:confused:</span></p>",
        "id": 152342124,
        "sender_full_name": "centril",
        "timestamp": 1545410420
    },
    {
        "content": "<p>(yep)</p>",
        "id": 152342126,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410425
    },
    {
        "content": "<p>too bad the crate doesn't have more owners</p>",
        "id": 152342140,
        "sender_full_name": "centril",
        "timestamp": 1545410458
    },
    {
        "content": "<p>-- we create a normal duplicate auto-traits lint, but add a note saying \"this is dangerous, because it can lead to incoherence if you implement the same trait for objects types differing only by duplicate auto traits\"</p>",
        "id": 152342151,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410473
    },
    {
        "content": "<p>and then hard error after one more cycle</p>",
        "id": 152342159,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410481
    },
    {
        "content": "<p>well, keep the lint around</p>",
        "id": 152342165,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410492
    },
    {
        "content": "<p>but hard error the coherence thing</p>",
        "id": 152342171,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410496
    },
    {
        "content": "<p>it's just, the coherence thing is very difficult to lint against, so the above might be a good compromise?</p>",
        "id": 152342182,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410514
    },
    {
        "content": "<p>would be curious what <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thinks of this too.</p>",
        "id": 152342184,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410521
    },
    {
        "content": "<p>yeah I'd check with niko re. implementation difficulties</p>",
        "id": 152342226,
        "sender_full_name": "centril",
        "timestamp": 1545410537
    },
    {
        "content": "<p>maybe he can help out</p>",
        "id": 152342231,
        "sender_full_name": "centril",
        "timestamp": 1545410545
    },
    {
        "content": "<p>I also meant the above strategy</p>",
        "id": 152342232,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410548
    },
    {
        "content": "<p>but yes...</p>",
        "id": 152342234,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410553
    },
    {
        "content": "<p>ideally we'd like to have a lint for duplicates which we'll keep as warn-by-default forever and then we have a second warning-will-become-error lint for the narrower subset of \"duplicates becoming different types\"-problem</p>",
        "id": 152342277,
        "sender_full_name": "centril",
        "timestamp": 1545410612
    },
    {
        "content": "<p>yes, but I'm saying the second bit might be too difficult</p>",
        "id": 152342301,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410642
    },
    {
        "content": "<p>so we could merge it into the first as a temporary \"note: dangerous\" thing</p>",
        "id": 152342346,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410651
    },
    {
        "content": "<p>but let's see</p>",
        "id": 152342348,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> Yeah I understand; maybe Niko can help make it easier for you or if you cannot maybe Niko can impl it...</p>",
        "id": 152342383,
        "sender_full_name": "centril",
        "timestamp": 1545410702
    },
    {
        "content": "<p>yes. or maybe he'll say it's too hard too...</p>",
        "id": 152342396,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410716
    },
    {
        "content": "<p>I'm not sure.</p>",
        "id": 152342397,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410718
    },
    {
        "content": "<p>hopefully he'll be around later today.</p>",
        "id": 152342405,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  we have to figure out the coherence thing anyways since otherwise we don't have the condition that will eventually become an error</p>",
        "id": 152342417,
        "sender_full_name": "centril",
        "timestamp": 1545410742
    },
    {
        "content": "<p>since we cannot just make all duplicate auto traits an error</p>",
        "id": 152342424,
        "sender_full_name": "centril",
        "timestamp": 1545410755
    },
    {
        "content": "<p>I know</p>",
        "id": 152342480,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410780
    },
    {
        "content": "<p>I wasn't suggesting that</p>",
        "id": 152342486,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410783
    },
    {
        "content": "<p>it would be a note on the duplicate traits lint (default: warning)</p>",
        "id": 152342494,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545410803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <code>note: #[deny(order_dependent_trait_objects)] on by default</code></p>",
        "id": 152349462,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417215
    },
    {
        "content": "<p>err lol wut?</p>",
        "id": 152349464,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417217
    },
    {
        "content": "<p>looks like arielby has already broken backwards compatibility haha</p>",
        "id": 152349471,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417231
    },
    {
        "content": "<p>^-- <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span></p>",
        "id": 152349551,
        "sender_full_name": "centril",
        "timestamp": 1545417300
    },
    {
        "content": "<p>I can change to warn-by-default easily enough in my PR. or he can make a separate one ASAP. I think we want that?</p>",
        "id": 152349632,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> link to PR which broke stuff?</p>",
        "id": 152349655,
        "sender_full_name": "centril",
        "timestamp": 1545417404
    },
    {
        "content": "<p>not sure</p>",
        "id": 152349667,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417421
    },
    {
        "content": "<p>ask him</p>",
        "id": 152349675,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417427
    },
    {
        "content": "<p>in <a href=\"https://github.com/rust-lang/rust/pull/56481\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56481\">https://github.com/rust-lang/rust/pull/56481</a></p>",
        "id": 152349824,
        "sender_full_name": "centril",
        "timestamp": 1545417559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> yep, looks right. :-)</p>",
        "id": 152349924,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417652
    },
    {
        "content": "<p>I was searching for \"order' in my browser history</p>",
        "id": 152349931,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417661
    },
    {
        "content": "<p>heh</p>",
        "id": 152349933,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  oh; this one had just 2 regressions where one was traitobject (not sure why it didnt break reverse dependent crates) and the other was a barely used crate</p>",
        "id": 152349937,
        "sender_full_name": "centril",
        "timestamp": 1545417663
    },
    {
        "content": "<p>no wonder</p>",
        "id": 152349940,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417664
    },
    {
        "content": "<p>so it doesn't seem so bad</p>",
        "id": 152349945,
        "sender_full_name": "centril",
        "timestamp": 1545417670
    },
    {
        "content": "<p>it must have been warn-by-default when the crater run was performed</p>",
        "id": 152349953,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417684
    },
    {
        "content": "<p>because it clearly breaks traitobject when on deny</p>",
        "id": 152349956,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417690
    },
    {
        "content": "<p>or... maybe it's the interaction of his PR with my PR?</p>",
        "id": 152350021,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417729
    },
    {
        "content": "<p>hmm</p>",
        "id": 152350024,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417730
    },
    {
        "content": "<p>hmm; cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 152350027,
        "sender_full_name": "centril",
        "timestamp": 1545417732
    },
    {
        "content": "<p>yeah, not sure any more. could be an interactional thing.</p>",
        "id": 152350046,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417753
    },
    {
        "content": "<p>ill ask on github</p>",
        "id": 152350052,
        "sender_full_name": "centril",
        "timestamp": 1545417757
    },
    {
        "content": "<p>ta</p>",
        "id": 152350059,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545417766
    },
    {
        "content": "<p>seems we went for deny in the PR</p>",
        "id": 152350089,
        "sender_full_name": "centril",
        "timestamp": 1545417812
    },
    {
        "content": "<p>so it wasnt interactional</p>",
        "id": 152350093,
        "sender_full_name": "centril",
        "timestamp": 1545417816
    },
    {
        "content": "<p>I know... but I'm whether it was deny when the crater run was made. presumably yes?</p>",
        "id": 152350269,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545418006
    },
    {
        "content": "<p>ah. he replied <span class=\"user-mention\" data-user-id=\"126931\">@centril</span></p>",
        "id": 152350672,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545418387
    },
    {
        "content": "<p>I'm not sure he's aware how many reverse deps traitobject has hehe.</p>",
        "id": 152350681,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545418399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> <a href=\"https://github.com/rust-lang/rust/pull/55994#pullrequestreview-187931740\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55994#pullrequestreview-187931740\">left a review here</a> -- curious to hear your thoughts on that</p>",
        "id": 152564090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545847605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> I left a <a href=\"https://github.com/rust-lang/rust/pull/55994#pullrequestreview-189123228\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55994#pullrequestreview-189123228\">review</a> on your PR</p>",
        "id": 154255767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546539386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> Ah okay, thanks for letting me now. We had our weekly meeting, but this is a fair excuse heh.</p>",
        "id": 156567247,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548112603
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 157141026,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548798161
    }
]