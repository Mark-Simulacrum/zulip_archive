[
    {
        "content": "<p>This error looks very similar to one we saw on <a href=\"https://github.com/rust-lang/rust/issues/83737\">#83737</a> (specifically <a href=\"https://github.com/rust-lang/rust/issues/83737#issuecomment-814442445\">this</a> comment)</p>",
        "id": 236445253,
        "sender_full_name": "tmandry",
        "timestamp": 1619581249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> do you think the binder refactor could be causing this as well?</p>",
        "id": 236445289,
        "sender_full_name": "tmandry",
        "timestamp": 1619581305
    },
    {
        "content": "<p>Probably</p>",
        "id": 236445358,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619581351
    },
    {
        "content": "<p>I imagine <code>-Zinstrument-coverage</code> is generating an erased type, maybe. So there's one that has bound vars and one that doesn't. But they generate the same symbol</p>",
        "id": 236445419,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619581429
    },
    {
        "content": "<p>A repro could help. Otherwise I have to look more into how instrument coverage works</p>",
        "id": 236445473,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619581451
    },
    {
        "content": "<p>hmm, ok</p>",
        "id": 236445488,
        "sender_full_name": "tmandry",
        "timestamp": 1619581468
    },
    {
        "content": "<p>I can't think of when it would create a type</p>",
        "id": 236445549,
        "sender_full_name": "tmandry",
        "timestamp": 1619581503
    },
    {
        "content": "<p>it does codegen empty functions for unused functions and generics</p>",
        "id": 236445573,
        "sender_full_name": "tmandry",
        "timestamp": 1619581518
    },
    {
        "content": "<p>Hmm. So that's probably where the symbol is coming from</p>",
        "id": 236445588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619581543
    },
    {
        "content": "<p>Since it doesnt pop up without that flag</p>",
        "id": 236445644,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619581568
    },
    {
        "content": "<p>yeah. okay, so we should check that code for <code>Binder</code> hygiene?</p>",
        "id": 236445687,
        "sender_full_name": "tmandry",
        "timestamp": 1619581622
    },
    {
        "content": "<p>or however it generates the symbol names</p>",
        "id": 236445738,
        "sender_full_name": "tmandry",
        "timestamp": 1619581647
    },
    {
        "content": "<p>though it's weird that it would be happening for a symbol which has another definition, when this is for unused functions</p>",
        "id": 236445817,
        "sender_full_name": "tmandry",
        "timestamp": 1619581693
    },
    {
        "content": "<p>Yeah, so theoretically the only difference between the two types that generates the same symbols are an unused set of bound vars</p>",
        "id": 236445909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619581790
    },
    {
        "content": "<p>This <em>isn't</em> captured in the symbol currently, since that only outputs <em>used</em> bound vars</p>",
        "id": 236445971,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619581822
    },
    {
        "content": "<p>so then it's actually possible to trigger this in normal Rust right?</p>",
        "id": 236446049,
        "sender_full_name": "tmandry",
        "timestamp": 1619581902
    },
    {
        "content": "<p>Yes, which is why <a href=\"https://github.com/rust-lang/rust/issues/83737\">#83737</a> is still open</p>",
        "id": 236446144,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619581967
    },
    {
        "content": "<p>Currently, I've only seen this in the generator witness problem</p>",
        "id": 236446169,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619581999
    },
    {
        "content": "<p>But I think there is potentially a more general problem around erasing regions but keeping bound vars</p>",
        "id": 236446191,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619582033
    },
    {
        "content": "<p>I see, so the <a href=\"https://github.com/rust-lang/rust/issues/83737\">#83737</a> regression likely came from not clearing bound variables when we were before</p>",
        "id": 236446312,
        "sender_full_name": "tmandry",
        "timestamp": 1619582130
    },
    {
        "content": "<p>Maybe the solution is to add a type flag for whether a type has bound vars that we need to clear</p>",
        "id": 236446368,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619582167
    },
    {
        "content": "<p>Well, so what do you mean by before?</p>",
        "id": 236446381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619582183
    },
    {
        "content": "<p>before the binder refactor?</p>",
        "id": 236446396,
        "sender_full_name": "tmandry",
        "timestamp": 1619582197
    },
    {
        "content": "<p>Before the binder refactor, we didn't track bound vars</p>",
        "id": 236446405,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619582204
    },
    {
        "content": "<p>ah :) right</p>",
        "id": 236446417,
        "sender_full_name": "tmandry",
        "timestamp": 1619582227
    },
    {
        "content": "<p>But now, there's this extra situation where we don't have any late bound vars in the type, but we have bound vars around</p>",
        "id": 236446432,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619582248
    },
    {
        "content": "<p>And erasing should probably unconditionally remove the bound vars</p>",
        "id": 236446444,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619582267
    },
    {
        "content": "<p>Right now, it won't descend into a type unless there are bound vars</p>",
        "id": 236446514,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619582326
    },
    {
        "content": "<p>Hmm. Is that the right solution...</p>",
        "id": 236446523,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619582341
    },
    {
        "content": "<p>coverage does generate functions for unused generic functions, which still results in a valid mangled symbol name, and that's all we care about.</p>",
        "id": 236446927,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1619582576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span> I'm wondering if we need to be more careful about how that name is generated, to avoid duplicates</p>",
        "id": 236447159,
        "sender_full_name": "tmandry",
        "timestamp": 1619582744
    },
    {
        "content": "<p>though I still don't understand what kind of situation would lead to that</p>",
        "id": 236447218,
        "sender_full_name": "tmandry",
        "timestamp": 1619582771
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>‍♀️I'm not entirely sure if there <em>is</em> something wrong with the codegen there</p>",
        "id": 236447273,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619582829
    },
    {
        "content": "<p>I think if the generated unused generic function was creating duplicates, then used generic functions would also generate duplicates when used with the same type (e.g., a common type like a primitive)</p>",
        "id": 236447294,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1619582852
    },
    {
        "content": "<p>In this case, the demangled symbol is <code>&lt;core::fmt::ArgumentV1&gt;::new::&lt;alloc::boxed::Box&lt;dyn predicates_core::core::Predicate&lt;str&gt; + core::marker::Send&gt;&gt;</code></p>",
        "id": 236447367,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619582898
    },
    {
        "content": "<p>So I expect that there is something like <code>Box&lt;dyn Predicate&lt;str&gt; + Send&gt;</code> as well as a <code>Box&lt;dyn for&lt;'a&gt; Predicate&lt;str&gt; + Send&gt;</code></p>",
        "id": 236447444,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619582954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296355\">Rich Kadel</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Duplicate.20symbol.20error.20.2384604/near/236447294\">said</a>:</p>\n<blockquote>\n<p>I think if the generated unused generic function was creating duplicates, then used generic functions would also generate duplicates when used with the same type (e.g., a common type like a primitive)</p>\n</blockquote>\n<p>well, this situation does indeed happen but is what weak linkage is for. it tells the linker that these duplicates are \"okay\" and actually are all the exact same function</p>",
        "id": 236447596,
        "sender_full_name": "tmandry",
        "timestamp": 1619583071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Duplicate.20symbol.20error.20.2384604/near/236446523\">said</a>:</p>\n<blockquote>\n<p>Hmm. Is that the right solution...</p>\n</blockquote>\n<p>So, double checking this now. But the good news is that commenting out <a href=\"https://github.com/rust-lang/rust/blob/27bd3f51a90733aabee45a9019a3aa785eccfd05/compiler/rustc_middle/src/ty/erase_regions.rs#L24\">this check</a> fixes the bug from <a href=\"https://github.com/rust-lang/rust/issues/83737\">#83737</a></p>",
        "id": 236447690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619583153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Duplicate.20symbol.20error.20.2384604/near/236447444\">said</a>:</p>\n<blockquote>\n<p>So I expect that there is something like <code>Box&lt;dyn Predicate&lt;str&gt; + Send&gt;</code> as well as a <code>Box&lt;dyn for&lt;'a&gt; Predicate&lt;str&gt; + Send&gt;</code></p>\n</blockquote>\n<p>hmm. that would explain the situation, but not why we're only seeing it with <code>-Zinstrument-coverage</code></p>",
        "id": 236447698,
        "sender_full_name": "tmandry",
        "timestamp": 1619583165
    },
    {
        "content": "<p><code>-Zinstrument-coverage</code>, you mean?</p>",
        "id": 236447708,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619583181
    },
    {
        "content": "<p>yes <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> getting late :)</p>",
        "id": 236447739,
        "sender_full_name": "tmandry",
        "timestamp": 1619583217
    },
    {
        "content": "<p>So, uh, if I put up a patch, could someone check if it fixes the bug?</p>",
        "id": 236447888,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619583322
    },
    {
        "content": "<p>yes!</p>",
        "id": 236447898,
        "sender_full_name": "tmandry",
        "timestamp": 1619583334
    },
    {
        "content": "<p>Okay give me two minutes</p>",
        "id": 236447967,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619583372
    },
    {
        "content": "<p><a href=\"https://github.com/jackh726/rust/tree/always-erase\">https://github.com/jackh726/rust/tree/always-erase</a></p>",
        "id": 236448134,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619583553
    },
    {
        "content": "<p>Let me know if there's something more you need me to do</p>",
        "id": 236448199,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619583613
    },
    {
        "content": "<p>All in all, an extremely small patch</p>",
        "id": 236448207,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619583623
    },
    {
        "content": "<p>But assuming it's the same bug as in <a href=\"https://github.com/rust-lang/rust/issues/83737\">#83737</a> <em>and</em> this really does fix that, then <em>shrug</em></p>",
        "id": 236448236,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619583652
    },
    {
        "content": "<p>we'll know something we didn't either way</p>",
        "id": 236448366,
        "sender_full_name": "tmandry",
        "timestamp": 1619583768
    },
    {
        "content": "<p>:)</p>",
        "id": 236448537,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619583958
    },
    {
        "content": "<p>Yep, just confirmed. That small changes fixes <a href=\"https://github.com/rust-lang/rust/issues/83737\">#83737</a></p>",
        "id": 236450025,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619585223
    },
    {
        "content": "<p>A small reproducer:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Frob</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span>::<span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Frob</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span>::<span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Frob</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Without a fix we create two different mono items here. In legacy mangling the hash is different so there is no symbol conflict, but in v0 (enabled by code coverage) the resulting symbol name for both is the same.</p>",
        "id": 236465336,
        "sender_full_name": "tm",
        "timestamp": 1619596465
    },
    {
        "content": "<p>Well, that would make sense, actually, why we have problems in <code>-Zinstrument-coverage</code>, if <code>v0</code> symbol mangling gets enabled</p>",
        "id": 236505520,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619616175
    },
    {
        "content": "<p>I can</p>",
        "id": 236507600,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619616967
    },
    {
        "content": "<p>I can't repro the issue though :/</p>",
        "id": 236507621,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619616975
    },
    {
        "content": "<p>FYI: I was reproducing this with <code>rustc 1.53.0-nightly (727d10156 2021-04-27)</code> with <code>-Zinstrument-coverage</code> or <code>-Zsymbol-mangling-version=v0</code>.</p>",
        "id": 236507937,
        "sender_full_name": "tm",
        "timestamp": 1619617096
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// check-pass</span>\n<span class=\"c1\">// compile-flags: -Zsymbol-mangling-version=v0</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Frob</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span>::<span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Frob</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span>::<span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Frob</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236507975,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617116
    },
    {
        "content": "<p>That runs fine for me</p>",
        "id": 236508014,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617136
    },
    {
        "content": "<p>check-pass stops too early to detect the issue</p>",
        "id": 236508118,
        "sender_full_name": "tm",
        "timestamp": 1619617187
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♀️right</p>",
        "id": 236508168,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617203
    },
    {
        "content": "<p>\"error: ui test compiled successfully!\"</p>",
        "id": 236508348,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617267
    },
    {
        "content": "<p>Probably need run-pass</p>",
        "id": 236508388,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617284
    },
    {
        "content": "<p>yep</p>",
        "id": 236508418,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617296
    },
    {
        "content": "<p>okay good</p>",
        "id": 236508420,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617297
    },
    {
        "content": "<p>And the fix I gave above fixes this issue too</p>",
        "id": 236509428,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617674
    },
    {
        "content": "<p>okay we tried testing the fix but are getting an ICE now</p>",
        "id": 236570350,
        "sender_full_name": "tmandry",
        "timestamp": 1619640618
    },
    {
        "content": "<p><code>Not enough bound vars: BoundRegion { var: 0, kind: BrNamed(DefId(0:152 ~ packet[8787]::records::{impl#2}::'a), 'a) } not found in []</code></p>",
        "id": 236570445,
        "sender_full_name": "tmandry",
        "timestamp": 1619640654
    },
    {
        "content": "<p>here's the <a href=\"https://gist.github.com/tmandry/637975d4ec8fe48da9351869809a5c28\">full backtrace</a></p>",
        "id": 236570471,
        "sender_full_name": "tmandry",
        "timestamp": 1619640666
    },
    {
        "content": "<p><span aria-label=\"speechless\" class=\"emoji emoji-1f636\" role=\"img\" title=\"speechless\">:speechless:</span></p>",
        "id": 236570480,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619640669
    },
    {
        "content": "<p>I think this is on a different target</p>",
        "id": 236570568,
        "sender_full_name": "tmandry",
        "timestamp": 1619640714
    },
    {
        "content": "<p>oh actually</p>",
        "id": 236570685,
        "sender_full_name": "tmandry",
        "timestamp": 1619640751
    },
    {
        "content": "<p>it doesn't seem like this is caused by your patch <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>. maybe there's something else going on</p>",
        "id": 236570785,
        "sender_full_name": "tmandry",
        "timestamp": 1619640806
    },
    {
        "content": "<p>Yeah, I mean this is definitely something different</p>",
        "id": 236570895,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619640846
    },
    {
        "content": "<p>But, I mean, it's probably <em>real</em></p>",
        "id": 236571122,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619640938
    },
    {
        "content": "<p>my current theory is it's only happening on debug builds</p>",
        "id": 236571245,
        "sender_full_name": "tmandry",
        "timestamp": 1619640976
    },
    {
        "content": "<p>of rustc</p>",
        "id": 236571259,
        "sender_full_name": "tmandry",
        "timestamp": 1619640980
    },
    {
        "content": "<p>That would be correct</p>",
        "id": 236571406,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619641050
    },
    {
        "content": "<p>though that check isn't a debug_assert or anything</p>",
        "id": 236571439,
        "sender_full_name": "tmandry",
        "timestamp": 1619641062
    },
    {
        "content": "<p>well</p>",
        "id": 236571457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619641070
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/c488f15700f15664b3bbda742c3f53f2b7a508d9/compiler/rustc_middle/src/ty/sty.rs#L1058\">https://github.com/rust-lang/rust/blob/c488f15700f15664b3bbda742c3f53f2b7a508d9/compiler/rustc_middle/src/ty/sty.rs#L1058</a></p>",
        "id": 236571529,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619641085
    },
    {
        "content": "<p>Bound var validation is specifically under <code>debug_assertions</code></p>",
        "id": 236571565,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619641100
    },
    {
        "content": "<p>I'm wondering if we turn this on for a couple days to see what pops up, then turn it off before beta cut</p>",
        "id": 236571620,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619641132
    },
    {
        "content": "<p>aha</p>",
        "id": 236571655,
        "sender_full_name": "tmandry",
        "timestamp": 1619641147
    },
    {
        "content": "<p>Theoretically, <em>not</em> having the bound vars be correct <em>shouldn't</em> break anything, since nothing uses them (yet)</p>",
        "id": 236571849,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619641233
    },
    {
        "content": "<p>But yeah, it'll pop up in debug assertions</p>",
        "id": 236571879,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619641254
    },
    {
        "content": "<p>okay, I see. once we're past this hurdle we can see if this is firing on anything that's easy to reproduce</p>",
        "id": 236572486,
        "sender_full_name": "tmandry",
        "timestamp": 1619641498
    },
    {
        "content": "<p>I mean, I would immediately go look at <code>packet[8787]::records::{impl#2}::'a</code></p>",
        "id": 236572746,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619641607
    },
    {
        "content": "<p>This is getting called from <a href=\"https://github.com/jackh726/rust/blob/7205474d6e2d251501ea0b9958402fe150fad539/compiler/rustc_infer/src/traits/util.rs#L310\">https://github.com/jackh726/rust/blob/7205474d6e2d251501ea0b9958402fe150fad539/compiler/rustc_infer/src/traits/util.rs#L310</a></p>",
        "id": 236572776,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619641632
    },
    {
        "content": "<p>I think that's <a href=\"https://cs.opensource.google/fuchsia/fuchsia/+/master:src/lib/network/packet/src/records.rs;l=87\">this one</a></p>",
        "id": 236573297,
        "sender_full_name": "tmandry",
        "timestamp": 1619641866
    },
    {
        "content": "<p>There's no <code>'a</code> though</p>",
        "id": 236573588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619642005
    },
    {
        "content": "<p>oh, it's the <a href=\"https://cs.opensource.google/fuchsia/fuchsia/+/master:src/lib/network/packet/src/records.rs;l=97\">next one</a></p>",
        "id": 236573610,
        "sender_full_name": "tmandry",
        "timestamp": 1619642025
    },
    {
        "content": "<p>yeah</p>",
        "id": 236573618,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619642029
    },
    {
        "content": "<p>I was using 1-indexing, heh</p>",
        "id": 236573744,
        "sender_full_name": "tmandry",
        "timestamp": 1619642062
    },
    {
        "content": "<p>the problem is happening during type checking of <em>one</em>  of the those functions in that impl</p>",
        "id": 236574162,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619642271
    },
    {
        "content": "<p>Did you get the query stacktrace too?</p>",
        "id": 236574247,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619642295
    },
    {
        "content": "<p>oh yeah, sorry I cut it short</p>",
        "id": 236574379,
        "sender_full_name": "tmandry",
        "timestamp": 1619642385
    },
    {
        "content": "<p>updated the gist</p>",
        "id": 236574448,
        "sender_full_name": "tmandry",
        "timestamp": 1619642407
    },
    {
        "content": "<p>Okay <code>parse_raw_with_context</code></p>",
        "id": 236574554,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619642464
    },
    {
        "content": "<p>Specifically when trying to lower the return type <code>MaybeParsed&lt;Self, (B, R::Error)&gt;</code></p>",
        "id": 236574580,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619642478
    },
    {
        "content": "<p>That tuple <code>(B, R::Error)</code></p>",
        "id": 236575209,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619642742
    },
    {
        "content": "<p><code>R::Error</code></p>",
        "id": 236576059,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619643090
    },
    {
        "content": "<p>Okay, so <code>find_bound_for_assoc_item</code></p>",
        "id": 236584056,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619645370
    },
    {
        "content": "<p>There's a few moving parts here</p>",
        "id": 236584078,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619645382
    },
    {
        "content": "<p>The first is that call to <code>get_type_parameter_bounds</code></p>",
        "id": 236584105,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619645397
    },
    {
        "content": "<p>I would <em>expect</em> that to give something like <code>R: for&lt;'a&gt; RecordsRawImpl&lt;'a&gt;</code></p>",
        "id": 236584203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619645420
    },
    {
        "content": "<p>Which means we would be getting that from <code>self.param_env.caller_bounds()</code></p>",
        "id": 236584483,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619645526
    },
    {
        "content": "<p>If we <em>aren't</em> getting that, then that would mean something further up</p>",
        "id": 236584563,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619645571
    },
    {
        "content": "<p>Which is a rabbit hole, so let's continue</p>",
        "id": 236584581,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619645580
    },
    {
        "content": "<p>So, we call <code>transitive_bounds_that_define_assoc_type</code> with the relevant bounds</p>",
        "id": 236584719,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619645633
    },
    {
        "content": "<p>In this case, this return value from <code>get_type_parameter_bounds</code></p>",
        "id": 236584851,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619645672
    },
    {
        "content": "<p>So far, nothing jumps out</p>",
        "id": 236584890,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619645702
    },
    {
        "content": "<p><code>transitive_bounds_that_define_assoc_type</code></p>",
        "id": 236584895,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619645705
    },
    {
        "content": "<p>So, first thing we do is take our trait ref</p>",
        "id": 236584966,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619645742
    },
    {
        "content": "<p>And call <code>super_predicates_that_define_assoc_type</code> for the trait (<code>RecordsRawImpl</code>)</p>",
        "id": 236584977,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619645749
    },
    {
        "content": "<p>The bounds on that are <code>:RecordsImplLayout </code></p>",
        "id": 236585184,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619645876
    },
    {
        "content": "<p>Sheesh what a rabbit hole</p>",
        "id": 236585572,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619646107
    },
    {
        "content": "<p>Let me back up</p>",
        "id": 236585762,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619646220
    },
    {
        "content": "<p>So, the trait ref <code>R: for&lt;'a&gt; RecordsRawImpl&lt;'a&gt;</code></p>",
        "id": 236585775,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619646235
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">subst_predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">super_predicate</span><span class=\"p\">.</span><span class=\"n\">subst_supertrait</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bound_predicate</span><span class=\"p\">.</span><span class=\"n\">rebind</span><span class=\"p\">(</span><span class=\"n\">trait_ref</span><span class=\"p\">.</span><span class=\"n\">skip_binder</span><span class=\"p\">()));</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236585940,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619646342
    },
    {
        "content": "<p>I think the order there is wrong</p>",
        "id": 236585950,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619646346
    },
    {
        "content": "<p>I think it needs to be <code>super_predicate.subst_supertrait(tcx, &amp;bound_predicate).rebind(trait_ref.skip_binder())</code></p>",
        "id": 236586016,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619646375
    },
    {
        "content": "<p>wait wait wait</p>",
        "id": 236586230,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619646491
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>let bound_predicate = super_predicate.kind();\nlet subst_predicate = super_predicate\n    .subst_supertrait(tcx, &amp;bound_predicate.rebind(trait_ref.skip_binder()));\n</code></pre></div>",
        "id": 236586263,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619646514
    },
    {
        "content": "<p><code>super_predicate</code>/<code>bound_predicate</code> is <code>Self: RecordsImplLayout</code></p>",
        "id": 236586426,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619646611
    },
    {
        "content": "<p>We're completely losing the bound vars on <code>trait_ref</code></p>",
        "id": 236586439,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619646622
    },
    {
        "content": "<p>We <em>want</em> <code>for&lt;'a&gt; R: RecordsImplLayout</code></p>",
        "id": 236586500,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619646658
    },
    {
        "content": "<p>I think we just want</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">subst_predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">super_predicate</span><span class=\"p\">.</span><span class=\"n\">subst_supertrait</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">trait_ref</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236587059,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619647012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> want to test another patch <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> <a href=\"https://github.com/jackh726/rust/tree/transitive_bounds_rebind\">https://github.com/jackh726/rust/tree/transitive_bounds_rebind</a></p>",
        "id": 236588661,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619647927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408606\">@Adrian Danis</span></p>",
        "id": 236589732,
        "sender_full_name": "tmandry",
        "timestamp": 1619648582
    },
    {
        "content": "<p>Btw thanks for being guinea pigs :)</p>",
        "id": 236591308,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619649579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> can confirm that <a href=\"https://github.com/jackh726/rust/tree/always-erase\">https://github.com/jackh726/rust/tree/always-erase</a> fixes <a href=\"https://github.com/rust-lang/rust/issues/84604\">#84604</a> (now that I'm building without debug). will run <a href=\"https://github.com/jackh726/rust/tree/transitive_bounds_rebind\">https://github.com/jackh726/rust/tree/transitive_bounds_rebind</a> now to be sure</p>",
        "id": 236600893,
        "sender_full_name": "Adrian Danis",
        "timestamp": 1619656048
    },
    {
        "content": "<p>and no surprise, that also fixes it <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 236603938,
        "sender_full_name": "Adrian Danis",
        "timestamp": 1619658428
    },
    {
        "content": "<p>Whoop</p>",
        "id": 236605381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619659683
    },
    {
        "content": "<p>Wait <span class=\"user-mention\" data-user-id=\"408606\">@Adrian Danis</span> did you have debug off when you tested the <code>transitive_bounds_rebind</code> branch?</p>",
        "id": 236605661,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619659925
    },
    {
        "content": "<p>wait. I just tested <a href=\"https://github.com/rust-lang/rust/pull/84653\">https://github.com/rust-lang/rust/pull/84653</a>, which is (<a href=\"https://github.com/jackh726/rust/tree/erase-flags\">https://github.com/jackh726/rust/tree/erase-flags</a>), not <a href=\"https://github.com/jackh726/rust/tree/transitive_bounds_rebind\">https://github.com/jackh726/rust/tree/transitive_bounds_rebind</a></p>",
        "id": 236605687,
        "sender_full_name": "Adrian Danis",
        "timestamp": 1619659930
    },
    {
        "content": "<p>yeah I jsut noticed that myself</p>",
        "id": 236605690,
        "sender_full_name": "Adrian Danis",
        "timestamp": 1619659934
    },
    {
        "content": "<p>I am rebuilding with debug on right now</p>",
        "id": 236605716,
        "sender_full_name": "Adrian Danis",
        "timestamp": 1619659978
    },
    {
        "content": "<p>Thank you</p>",
        "id": 236605741,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619659988
    },
    {
        "content": "<p>yep just reproduced the assertion failure, I'll patch in the right branch this time and see what happens</p>",
        "id": 236606081,
        "sender_full_name": "Adrian Danis",
        "timestamp": 1619660262
    },
    {
        "content": "<p>okay so with a debug build without your branch I get the <code>error: internal compiler error: compiler/rustc_middle/src/ty/fold.rs:908:21: Not enough bound vars: BoundRegion { var: 0, kind: BrNamed(DefId(0:152 ~ packet[8787]::records::{impl#2}::'a), 'a) } not found in []</code> error.<br>\nWith your branch the build seems to get further, but ultimately I still get <code>thread 'rustc' panicked at 'assertion failed: !self.span_bcb_is_dominated_by(self.prev(), self.curr())', compiler/rustc_mir/src/transform/coverage/spans.rs:569:9</code></p>",
        "id": 236608634,
        "sender_full_name": "Adrian Danis",
        "timestamp": 1619662305
    },
    {
        "content": "<p>Well uh...that doesn't' seem related at all</p>",
        "id": 236608734,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619662375
    },
    {
        "content": "<p>Assertion: <a href=\"https://github.com/rust-lang/rust/blob/50ca3ac24f08cc6c8bbef9ac27245f83f30bc749/compiler/rustc_mir/src/transform/coverage/spans.rs#L569\">https://github.com/rust-lang/rust/blob/50ca3ac24f08cc6c8bbef9ac27245f83f30bc749/compiler/rustc_mir/src/transform/coverage/spans.rs#L569</a></p>",
        "id": 236608759,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619662418
    },
    {
        "content": "<p>yeah I think is unrelated. I believe <a href=\"https://github.com/rust-lang/rust/pull/84582\">https://github.com/rust-lang/rust/pull/84582</a> is supposed to help with this assertion, so trying that as well now</p>",
        "id": 236608867,
        "sender_full_name": "Adrian Danis",
        "timestamp": 1619662501
    },
    {
        "content": "<p>okay well I still get that assertion failure, but your changes do fix the other failures so I'll keep investigating this one separately</p>",
        "id": 236611616,
        "sender_full_name": "Adrian Danis",
        "timestamp": 1619664999
    },
    {
        "content": "<p>Hmm. I'm not sure they're related, but I'm not sure they're <em>not</em> related.</p>",
        "id": 236614149,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619667377
    },
    {
        "content": "<p>Because I don't know anything about the coverage transform</p>",
        "id": 236614172,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619667398
    },
    {
        "content": "<p>can someone summarize the current status here?</p>",
        "id": 236671206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619702478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this spawned <a href=\"https://github.com/rust-lang/rust/issues/84682\">#84682</a> and there seems to be another (probably unrelated) bug in the coverage transform</p>",
        "id": 236676262,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619704357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I just cherry-picked your PR commits to rebuild Fuchsia, and I'm still getting errors. I have the compiler output with <code>-Zverbose</code>. Any preference where I should paste it?</p>",
        "id": 236735478,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1619726343
    },
    {
        "content": "<p>Oh :(</p>",
        "id": 236735580,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619726399
    },
    {
        "content": "<p>No preference</p>",
        "id": 236735590,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619726402
    },
    {
        "content": "<p>I'll drop it in the PR comments then</p>",
        "id": 236735742,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1619726443
    },
    {
        "content": "<p>Oh, we were talking about that above. Should be fixed by <a href=\"https://github.com/rust-lang/rust/issues/84682\">#84682</a></p>",
        "id": 236736021,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619726544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can you please look at <a href=\"https://github.com/rust-lang/rust/issues/84682\">#84682</a> today? Very very easy review but if you r+ that one, I will close <a href=\"https://github.com/rust-lang/rust/issues/84653\">#84653</a> since that's what it is rebased on</p>",
        "id": 236736420,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619726677
    },
    {
        "content": "<p>I see.... Sorry, I missed that</p>",
        "id": 236736423,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1619726679
    },
    {
        "content": "<p>nit: <a href=\"https://github.com/rust-lang/rust/issues/84653\">#84653</a> PR comment says it fixes a couple of issues. I'm not sure it does without your second PR (unless this is somehow different)</p>",
        "id": 236736591,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1619726758
    },
    {
        "content": "<p>This is different</p>",
        "id": 236737135,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619726984
    },
    {
        "content": "<p>ok, thanks</p>",
        "id": 236737159,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1619726997
    },
    {
        "content": "<p>This new issue is only being caught now because debug asserts are on</p>",
        "id": 236737190,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619727003
    },
    {
        "content": "<p>ah, gotcha</p>",
        "id": 236737397,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1619727083
    },
    {
        "content": "<p>Now I know why I was confused. There was also a bug in coverage that showed up when Adrian built with debug asserts, so when he mentioned debug asserts last night, I thought he was referring to my bug (which was fixed and merged a couple of days ago, coincidentally)</p>",
        "id": 236737725,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1619727223
    },
    {
        "content": "<p>Sorry for my confusion</p>",
        "id": 236737743,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1619727232
    },
    {
        "content": "<p>No worries :) That bug also got run into haha</p>",
        "id": 236738137,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619727386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Duplicate.20symbol.20error.20.2384604/near/236736420\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> can you please look at <a href=\"https://github.com/rust-lang/rust/issues/84682\">#84682</a> today? Very very easy review but if you r+ that one, I will close <a href=\"https://github.com/rust-lang/rust/issues/84653\">#84653</a> since that's what it is rebased on</p>\n</blockquote>\n<p>r+'d</p>",
        "id": 236741176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619728658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> Any chance you can add <a href=\"https://github.com/rust-lang/rust/issues/84582\">#84582</a> to your rollup? It shouldn't conflict, and (I'm pretty confident) is well tested. We're trying to get your fix and that PR landed, and my PR was next in the bors queue until a few minutes ago when like 5 PRs jumped in front of me ;-)</p>",
        "id": 236745659,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1619730308
    },
    {
        "content": "<p>Sure</p>",
        "id": 236745789,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619730342
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> regarding <a href=\"https://github.com/rust-lang/rust/issues/84559\">#84559</a>...</p>",
        "id": 236857196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619797808
    },
    {
        "content": "<p><em>oh</em></p>",
        "id": 236857324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619797857
    },
    {
        "content": "<p>i see what this is doing</p>",
        "id": 236857335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619797863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Duplicate.20symbol.20error.20.2384604/near/236857324\">said</a>:</p>\n<blockquote>\n<p><em>oh</em></p>\n</blockquote>\n<p>When you see this, you realize this is complicated</p>",
        "id": 236857405,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619797910
    },
    {
        "content": "<p>i hate that code</p>",
        "id": 236857467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619797929
    },
    {
        "content": "<p>left a comment</p>",
        "id": 236857497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619797941
    },
    {
        "content": "<p><span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 236857502,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619797943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Duplicate.20symbol.20error.20.2384604/near/236857467\">said</a>:</p>\n<blockquote>\n<p>i hate that code</p>\n</blockquote>\n<p>(the code that picks a victim, not your PR :)</p>",
        "id": 236857517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619797955
    },
    {
        "content": "<p>Okay, so I thought about just picking the one the candidate with no bound vars</p>",
        "id": 236857588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619797989
    },
    {
        "content": "<p>But I was imagining there's probably a case we can make where there are the same number of bound vars but different names</p>",
        "id": 236857638,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619798015
    },
    {
        "content": "<p>With something like a <code>pub trait DeserializeOwned2: for&lt;'b&gt; Deserialize&lt;'b&gt; {}</code></p>",
        "id": 236857756,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619798062
    },
    {
        "content": "<p>and <code>B::Config: DeserializeOwned2</code></p>",
        "id": 236857772,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619798070
    },
    {
        "content": "<p>Completely pathological, but valid</p>",
        "id": 236857873,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619798123
    },
    {
        "content": "<p>That said, we <em>could</em> make it first prioritize fewer bound vars</p>",
        "id": 236857942,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619798162
    },
    {
        "content": "<p>sure</p>",
        "id": 236859384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619798701
    },
    {
        "content": "<p>I was considering suggesting sorting</p>",
        "id": 236859416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619798710
    },
    {
        "content": "<p>that's the 'right thing'</p>",
        "id": 236859428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619798714
    },
    {
        "content": "<p>which would also pick the empty list first, presumably</p>",
        "id": 236859452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619798722
    },
    {
        "content": "<p>Okay, so first pick the fewest bound vars and then the first?</p>",
        "id": 236860348,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619799109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> hmm. Yes, that's probalby what we want</p>",
        "id": 236866335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619801614
    },
    {
        "content": "<p>I was at first goin to say \"sort\" but I guess you would rather have <code>['b]</code> then <code>['a, 'c]</code></p>",
        "id": 236866361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619801626
    },
    {
        "content": "<p>It's possible the candidates are already sorted</p>",
        "id": 236866499,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619801669
    },
    {
        "content": "<p>But I don't <em>know</em> that</p>",
        "id": 236866510,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619801674
    }
]