[
    {
        "content": "<p>Hey all, just wondering if anyone has any leads on <a href=\"https://github.com/rust-lang-nursery/chalk/issues/571\">chalk#571</a>? I'm working a bit on the semantic-syntactic equality lowering and I've got all tests passing except for one, which produces that panic (which makes debugging the actual issue sort of.. impossible). I've been looking into the panic a bit, but am feeling sort of lost at finding the cause</p>",
        "id": 205377418,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596038891
    },
    {
        "content": "<p>I did try to look at it a little bit, but didn't figure anything out</p>",
        "id": 205378493,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596039381
    },
    {
        "content": "<p>If the test passes for the recursive solver, I'm okay with omitting running it for SLG as long as there is a <code>FIXME</code> citing <a href=\"https://github.com/rust-lang-nursery/chalk/issues/571\">chalk#571</a> and a comment on the issue itself</p>",
        "id": 205378713,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596039484
    },
    {
        "content": "<p>Hmm so the issue is that it panics during WF checking, and right now it looks like WF checks in tests are always done with the SLG solver. So that test panics (and fails fast) even if you only want to run the recursive solver.</p>",
        "id": 205510514,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596131815
    },
    {
        "content": "<p>Oh...that's probably not what we want</p>",
        "id": 205510578,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596131856
    },
    {
        "content": "<p>I think we probably want wf checks done in the same solver that we're testing</p>",
        "id": 205510627,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596131876
    },
    {
        "content": "<p>Another test case for that issue would be nice though</p>",
        "id": 205510708,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596131909
    },
    {
        "content": "<p>if you can pick out the test program and wf goal :)</p>",
        "id": 205510740,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596131926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/.60clear_strands_after_cycle.60.20panic.20(.23571)/near/205510627\">said</a>:</p>\n<blockquote>\n<p>I think we probably want wf checks done in the same solver that we're testing</p>\n</blockquote>\n<p>I thought so too, but when I tried that I realized that the recursive solver fails (or runs infinitely) for a good number of WF checks (even on the master branch) so that's a lil unfortunate</p>",
        "id": 205511250,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596132125
    },
    {
        "content": "<p>Okay that is actually really bad</p>",
        "id": 205511295,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596132144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/.60clear_strands_after_cycle.60.20panic.20(.23571)/near/205510740\">said</a>:</p>\n<blockquote>\n<p>if you can pick out the test program and wf goal :)</p>\n</blockquote>\n<p>Sure thing! I'll add it to the issue once I pick it out</p>",
        "id": 205511339,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596132159
    },
    {
        "content": "<p>Okay, so seems like there's a few issues here!</p>",
        "id": 205511431,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596132195
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/chalk/issues/571\">chalk#571</a> obviously needs to get resolved. I looked a little bit into it, but it's tough and I didn't find the exact cause yet</p>",
        "id": 205511507,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596132224
    },
    {
        "content": "<p>The recursive solver failing for wf checks is really bad and needs to get addressed. (Please file an issue?)</p>",
        "id": 205511605,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596132254
    },
    {
        "content": "<p>And then, we should also have a way to \"opt out\" of WF checks. We want(ed) this for a separate test already.</p>",
        "id": 205511715,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596132313
    },
    {
        "content": "<p>In <a href=\"https://github.com/rust-lang-nursery/chalk/issues/569\">chalk#569</a></p>",
        "id": 205511756,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596132333
    },
    {
        "content": "<p>Maybe with a second repro for <a href=\"https://github.com/rust-lang-nursery/chalk/issues/571\">chalk#571</a>, I'll be able to find the problem</p>",
        "id": 205511890,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596132383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/.60clear_strands_after_cycle.60.20panic.20(.23571)/near/205511605\">said</a>:</p>\n<blockquote>\n<p>The recursive solver failing for wf checks is really bad and needs to get addressed. (Please file an issue?)</p>\n</blockquote>\n<p>I'll file one ASAP</p>",
        "id": 205512198,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596132503
    },
    {
        "content": "<p>Gonna make sure that <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> and <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> get tagged and hopefully see this</p>",
        "id": 205512456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596132621
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-lang-nursery/chalk/issues/587\">chalk#587</a>. (There are only 6 test cases with issues, so maybe it's not <em>too</em> bad?)</p>",
        "id": 205514212,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596133397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span> oof that repro for <a href=\"https://github.com/rust-lang-nursery/chalk/issues/571\">chalk#571</a> is <em>worse</em> oof</p>",
        "id": 205528593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596140971
    },
    {
        "content": "<p>I was hoping it would be something simple</p>",
        "id": 205528619,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596140982
    },
    {
        "content": "<p>Yeah it's pretty rough :(</p>",
        "id": 205529116,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596141237
    },
    {
        "content": "<p>So I minimized the original test case a tiny bit more (commented it on the issue). Hope it's at least of <em>some</em> help</p>",
        "id": 205608455,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596211296
    },
    {
        "content": "<p>Also, I didn't notice before but it's interesting that the panic looks like it occurs during coherence checking</p>",
        "id": 205608647,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596211400
    },
    {
        "content": "<p>I think the original panic occurs when solving the actual goal though?</p>",
        "id": 205613353,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596213917
    },
    {
        "content": "<p>Ah yep you're right whoops</p>",
        "id": 205617067,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596216025
    },
    {
        "content": "<p>Ok <em>actually</em> interesting this time: the panic (at least in the test case I posted) didn't used to happen. It started panicking with <a href=\"https://github.com/rust-lang/chalk/commit/b0fc89a22ec16a33bf7ac1c89a6133264868e7af\">this commit</a></p>",
        "id": 205617447,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596216277
    },
    {
        "content": "<p>And the same is true for the original test case in the issue, it regressed after that commit</p>",
        "id": 205618385,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596216769
    },
    {
        "content": "<p>(Well, regressed in the sense that it went from giving the wrong answer to panicking, it was never correct)</p>",
        "id": 205618715,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596216949
    },
    {
        "content": "<p>Well, that's good to know</p>",
        "id": 205629527,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596222484
    },
    {
        "content": "<p>For better or for worse</p>",
        "id": 205629535,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596222490
    },
    {
        "content": "<p>The fact that it went from giving a wrong answer to panicking makes me feel like the Ambiguous/Complete separation isn't <em>wrong</em>, there's maybe just some other logic that is and the separation highlights that</p>",
        "id": 205629598,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596222546
    },
    {
        "content": "<p>Though, that might be helpful for figuring out the problem</p>",
        "id": 205629646,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596222588
    },
    {
        "content": "<p>But that <em>does</em> hint to me why we might be getting that error</p>",
        "id": 205630028,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596222807
    },
    {
        "content": "<p>In particular, if the table is in <code>AnswerMode::Complete</code> but all remaining strands are ambiguous, then I could see the case that we might <em>expect</em> there to be strands but there aren't</p>",
        "id": 205630242,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596222924
    },
    {
        "content": "<p>or I guess, maybe the bug here is in the logic related to cycles and ambiguity</p>",
        "id": 205630277,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596222952
    },
    {
        "content": "<p>(Also remember that included in that PR was a fix for tests added in <a href=\"https://github.com/rust-lang-nursery/chalk/issues/331\">chalk#331</a>)</p>",
        "id": 205630459,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596223054
    },
    {
        "content": "<p>Might have found the problem</p>",
        "id": 205631765,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596223773
    },
    {
        "content": "<p>Right, so, I solved the <code>clear_strands_after_cycle</code> problem</p>",
        "id": 205632221,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596224024
    },
    {
        "content": "<p>But</p>",
        "id": 205632227,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596224029
    },
    {
        "content": "<p>Rather than getting ambiguous, I get <code>Unique; for&lt;?U0&gt; { substitution [?0 := {slice}&lt;^0.0&gt;, ?1 := Vec&lt;^0.0&gt;], lifetime constraints [] }</code></p>",
        "id": 205632271,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596224042
    },
    {
        "content": "<p>I changed <a href=\"http://this\">https://github.com/rust-lang/chalk/blob/master/chalk-engine/src/logic.rs#L1265</a> to only drain strands that are \"participating\"</p>",
        "id": 205632758,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596224266
    },
    {
        "content": "<p>But I don't think that's the <em>right</em> solution</p>",
        "id": 205632777,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596224280
    },
    {
        "content": "<p>I think we aren't handling cycles correctly here</p>",
        "id": 205632901,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596224338
    },
    {
        "content": "<p>Or some of the assumptions we/I made aren't correct</p>",
        "id": 205633113,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596224420
    },
    {
        "content": "<p>OK, sorry I've been so AWOL</p>",
        "id": 205639523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596228197
    },
    {
        "content": "<p>not sure if that will change for another week or so though</p>",
        "id": 205639532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596228202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> no worries :)</p>",
        "id": 205641754,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596229721
    },
    {
        "content": "<p>Okay, so digging into this a little bit more</p>",
        "id": 205697547,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596314710
    },
    {
        "content": "<p>This is such a rabbit hole</p>",
        "id": 205697557,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596314737
    },
    {
        "content": "<p>I think the <code>where T: Sized</code> in <code>impl&lt;T&gt; ToOwned for [T] where T: Sized</code> is fundamentally important here</p>",
        "id": 205697623,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596314835
    },
    {
        "content": "<p>So, we generate a goal like <code>Implemented(Rc&lt;^0.0&gt;: From&lt;&lt;^0.0 as ToOwned&gt;::Owned&gt;)</code></p>",
        "id": 205697631,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596314878
    },
    {
        "content": "<p>And we get something like <code>resolvent_clause{goal=Implemented(Rc&lt;?0&gt;: From&lt;&lt;?0 as ToOwned&gt;::Owned&gt;), clause=for&lt;type&gt; Implemented(Rc&lt;{slice}&lt;^0.0&gt;&gt;: From&lt;Vec&lt;^0.0&gt;&gt;)}</code></p>",
        "id": 205697679,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596314937
    },
    {
        "content": "<p>Which, creates a strand with a single subgoal:</p>\n<div class=\"codehilite\"><pre><span></span><code>          subst: [?0 := {slice}&lt;?0&gt;],\n          ambiguous: false,\n          constraints: [],\n          subgoals: [\n              Positive(\n                  InEnvironment {\n                      environment: Env([]),\n                      goal: AliasEq(&lt;{slice}&lt;?0&gt; as ToOwned&gt;::Owned = Vec&lt;?0&gt;),\n                  },\n              ),\n          ]\n</code></pre></div>",
        "id": 205697694,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596314990
    },
    {
        "content": "<p>Now, I want to point out here that this is only valid if <code>?0: Sized</code></p>",
        "id": 205697748,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596315056
    },
    {
        "content": "<p>Later on we end up with a table with a goal of <code>AliasEq(&lt;{slice}&lt;^0.0&gt; as ToOwned&gt;::Owned = Vec&lt;^0.0&gt;)</code></p>",
        "id": 205697767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596315108
    },
    {
        "content": "<p>With a single strand <code>Normalize(&lt;{slice}&lt;?0&gt; as ToOwned&gt;::Owned -&gt; Vec&lt;?0&gt;)</code></p>",
        "id": 205697791,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596315122
    },
    {
        "content": "<p>(I'm also mostly just rambling here because it helps me think)</p>",
        "id": 205697817,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596315156
    },
    {
        "content": "<p>So, then we end up with a clause: <code>for&lt;type&gt; Normalize(&lt;{slice}&lt;^0.0&gt; as ToOwned&gt;::Owned -&gt; Vec&lt;^0.0&gt;) :- ForAll&lt;&gt; { Implemented(^1.0: Sized) }</code></p>",
        "id": 205697827,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596315229
    },
    {
        "content": "<p>And of course, this has to end up as ambiguous, since <code>Sized</code> is non_enumerable</p>",
        "id": 205697876,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596315297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/.60clear_strands_after_cycle.60.20panic.20(.23571)/near/205697817\">said</a>:</p>\n<blockquote>\n<p>(I'm also mostly just rambling here because it helps me think)</p>\n</blockquote>\n<p>(For what it's worth, I also appreciate seeing the explanation/thought process, it's a good opportunity to learn :) )</p>",
        "id": 205697889,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596315353
    },
    {
        "content": "<p>(but if we make sized <em>not</em> non_enumerable, this actually ends up being not provable since there are no impls for <code>Sized</code>) (let me double check that)</p>",
        "id": 205697890,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596315357
    },
    {
        "content": "<p>I definitely would appreciate any thoughts</p>",
        "id": 205697938,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596315409
    },
    {
        "content": "<p>Regarding the non_enumerable part, I also did find a reproducer with an enumerable trait</p>",
        "id": 205697952,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596315460
    },
    {
        "content": "<p>Like I said, this is definitely a rabbit hole</p>",
        "id": 205697953,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596315472
    },
    {
        "content": "<p>Is that the last test case you posted?</p>",
        "id": 205697997,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596315505
    },
    {
        "content": "<p>Mmhm</p>",
        "id": 205697998,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596315511
    },
    {
        "content": "<p>Does it actually fail on <code>Only: A</code> or during the WF checks?</p>",
        "id": 205698000,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596315520
    },
    {
        "content": "<p>WF checks</p>",
        "id": 205698002,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596315525
    },
    {
        "content": "<p>Can you post the actual goal that fails?</p>",
        "id": 205698008,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596315549
    },
    {
        "content": "<p>It actually fails in coherence checking, it doesn't even make it to WF</p>",
        "id": 205698100,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596315722
    },
    {
        "content": "<p>The goal is</p>\n<div class=\"codehilite\"><pre><span></span><code>environment: Env([]),\ngoal: \n    not { \n        ForAll&lt;type&gt; { \n            if ([for&lt;&gt; Compatible, for&lt;&gt; DownstreamType(^1.0)]) { \n                Exists&lt;type&gt; { \n                    Exists&lt;type&gt; { \n                        all(\n                            (Rc&lt;ArgTaker&lt;^0.0&gt;&gt; = Rc&lt;^1.0&gt;),\n                            (Other = Other), \n                            ForAll&lt;&gt; { Implemented(^2.0: AssocTyTrait) },\n                            ForAll&lt;&gt; { Implemented(Rc&lt;^2.0&gt;: TyParamTrait&lt;&lt;^2.0 as AssocTyTrait&gt;::Ty&gt;) }\n                        ) \n                    } \n                } \n            } \n        }\n</code></pre></div>\n\n\n<p>,</p>",
        "id": 205698148,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596315757
    },
    {
        "content": "<p>Ew</p>",
        "id": 205698153,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596315785
    },
    {
        "content": "<p>Okay, well I think maybe my <code>T: Sized</code> tangent isn't correct</p>",
        "id": 205698215,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596315946
    },
    {
        "content": "<p>But, I'm only on line 1700 of the log out of ~8000</p>",
        "id": 205698271,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596316015
    },
    {
        "content": "<p>Yeah the amount of log output is kinda rough</p>",
        "id": 205698278,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596316036
    },
    {
        "content": "<p>Yeah</p>",
        "id": 205698285,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596316059
    },
    {
        "content": "<p>There's a lot of noise around canonicalization/instantiation</p>",
        "id": 205698287,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596316072
    },
    {
        "content": "<p><em>But</em> all that <code>Compatible</code> noise is gone :)</p>",
        "id": 205698351,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596316163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/.60clear_strands_after_cycle.60.20panic.20(.23571)/near/205698287\">said</a>:</p>\n<blockquote>\n<p>There's a lot of noise around canonicalization/instantiation</p>\n</blockquote>\n<p>Hmm yeah some of that could probably stand to be moved up a debug level, I'll open a PR soonish</p>",
        "id": 205698478,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596316391
    },
    {
        "content": "<p>It is debug?</p>",
        "id": 205698536,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596316480
    },
    {
        "content": "<p>Yeah it is iirc</p>",
        "id": 205698548,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596316506
    },
    {
        "content": "<p>Oh, do you mean like trace instead</p>",
        "id": 205698550,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596316507
    },
    {
        "content": "<p>Mmhm exactly</p>",
        "id": 205698554,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596316513
    },
    {
        "content": "<p>Not a bad idea</p>",
        "id": 205698558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596316531
    },
    {
        "content": "<p>I think a <em>better</em> (or I guess, orthogonal) solution would be to just canonicalize/instantiate <code>Strand</code>s <em>less</em></p>",
        "id": 205698608,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596316571
    },
    {
        "content": "<p>Which is more easily doable now that chalk-engine knows about <code>Canonical</code></p>",
        "id": 205698620,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596316595
    },
    {
        "content": "<p>we just have to be careful that we don't use a canonicalized value when we don't want to</p>",
        "id": 205698626,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596316618
    },
    {
        "content": "<p>But we can deduplicate <code>selected_subgoal</code> and <code>last_pursued_time</code></p>",
        "id": 205698637,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596316656
    },
    {
        "content": "<p>And then any time we access <code>ambiguous</code> or <code>answer_time</code> from <code>ExClause</code>, we don't even need to instantiate</p>",
        "id": 205698696,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596316712
    },
    {
        "content": "<p>I actually looked at one point briefly and there's only a few places that we actually need to instantiate the strand</p>",
        "id": 205698706,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596316745
    },
    {
        "content": "<p>Another thing that I would like to look at cleaning up is trying to remove unnecessary \"intermediate\" tables of the form <code>ForAll&lt;&gt; { &lt;goal&gt; }</code></p>",
        "id": 205698877,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596317080
    },
    {
        "content": "<p>Oh wow we do instantiate strands a lot, now that I'm looking for it</p>",
        "id": 205698887,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596317119
    },
    {
        "content": "<p>Well, we only really instantiate them in <code>ensure_root_answer</code></p>",
        "id": 205698934,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596317163
    },
    {
        "content": "<p>The problem is that we have to canonicalize them in many places</p>",
        "id": 205698936,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596317173
    },
    {
        "content": "<p>Ah yeah whoops I meant canonicalize, didn't even look at instantiation <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 205698943,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596317214
    },
    {
        "content": "<p>haha no problem</p>",
        "id": 205698949,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596317233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/.60clear_strands_after_cycle.60.20panic.20(.23571)/near/205698877\">said</a>:</p>\n<blockquote>\n<p>Another thing that I would like to look at cleaning up is trying to remove unnecessary \"intermediate\" tables of the form <code>ForAll&lt;&gt; { &lt;goal&gt; }</code></p>\n</blockquote>\n<p>I feel like in general there are a good number of these sort of \"trivial\" optimizations to be had</p>",
        "id": 205698956,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596317260
    },
    {
        "content": "<p>yes</p>",
        "id": 205698958,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596317269
    },
    {
        "content": "<p>Also, when we no longer pass around <code>Strand</code>, but instead only instantiate when needed, I think that means we wouldn't need the <code>active_strand</code></p>",
        "id": 205699001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596317314
    },
    {
        "content": "<p>(on <code>Table</code>)</p>",
        "id": 205699003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596317320
    },
    {
        "content": "<p>Okay, so the cycle that ends up failing is:</p>\n<div class=\"codehilite\"><pre><span></span><code>ForAll&lt;&gt; { Implemented(Rc&lt;^1.0&gt;: From&lt;&lt;^1.0 as ToOwned&gt;::Owned&gt;) }\nImplemented(Rc&lt;^0.0&gt;: From&lt;&lt;^0.0 as ToOwned&gt;::Owned&gt;), which has a strand that is ambiguous and a single floundered subgoal\n</code></pre></div>\n\n\n<p>But the other cycle involving that table:</p>\n<div class=\"codehilite\"><pre><span></span><code>ForAll&lt;&gt; { Implemented(Rc&lt;^1.0&gt;: From&lt;&lt;^1.0 as ToOwned&gt;::Owned&gt;) }\nImplemented(Rc&lt;^0.0&gt;: From&lt;&lt;^0.0 as ToOwned&gt;::Owned&gt;)\nForAll&lt;&gt; { Implemented(Rc&lt;^1.0&gt;: From&lt;&lt;^1.0 as ToOwned&gt;::Owned&gt;) }\n</code></pre></div>",
        "id": 205699308,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596317986
    },
    {
        "content": "<p>Basically, we get that second cycle because of <code>for&lt;type&gt; Implemented(Rc&lt;^0.0&gt;: From&lt;Cow&lt;^0.0&gt;&gt;) :- ForAll&lt;&gt; { Implemented(^1.0: ToOwned) }, ForAll&lt;&gt; { Implemented(Rc&lt;^1.0&gt;: From&lt;&lt;^1.0 as ToOwned&gt;::Owned&gt;) }</code></p>",
        "id": 205699429,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596318200
    },
    {
        "content": "<p>Which is</p>\n<div class=\"codehilite\"><pre><span></span><code>            impl&lt;B&gt; From&lt;Cow&lt;B&gt;&gt; for Rc&lt;B&gt;\n            where\n                B: ToOwned,\n                Rc&lt;B&gt;: From&lt;&lt;B as ToOwned&gt;::Owned&gt;\n            {\n            }\n</code></pre></div>",
        "id": 205699495,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596318294
    },
    {
        "content": "<p>More specifically, that strand ends up with the following subgoals: </p>\n<div class=\"codehilite\"><pre><span></span><code>[\n                                Positive(\n                                    InEnvironment {\n                                        environment: Env([]),\n                                        goal: AliasEq(&lt;^0.0 as ToOwned&gt;::Owned = Cow&lt;^0.0&gt;),\n                                    },\n                                ),\n                                Positive(\n                                    InEnvironment {\n                                        environment: Env([]),\n                                        goal: ForAll&lt;&gt; { Implemented(^1.0: ToOwned) },\n                                    },\n                                ),\n                                Positive(\n                                    InEnvironment {\n                                        environment: Env([]),\n                                        goal: ForAll&lt;&gt; { Implemented(Rc&lt;^1.0&gt;: From&lt;&lt;^1.0 as ToOwned&gt;::Owned&gt;) },\n                                    },\n                                ),\n                            ]\n</code></pre></div>",
        "id": 205699582,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596318455
    },
    {
        "content": "<p>Really, this is kind of a weird intersection</p>",
        "id": 205699638,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596318522
    },
    {
        "content": "<p>We <em>really</em> want that last goal to be <code>ForAll&lt;&gt; { Implemented(Rc&lt;^1.0&gt;: From&lt;Cow&lt;^1.0&gt;&gt;) }</code></p>",
        "id": 205699645,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596318566
    },
    {
        "content": "<p>But because of the cycle, we \"throw away\" that</p>",
        "id": 205699649,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596318583
    },
    {
        "content": "<p>Hmm, so what's the solution here...</p>",
        "id": 205699749,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596318725
    },
    {
        "content": "<p>Should cycles cause a subgoal to flounder?</p>",
        "id": 205699752,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596318742
    },
    {
        "content": "<p>Maybe</p>",
        "id": 205699755,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596318751
    },
    {
        "content": "<p>This is almost certainly the root issue though</p>",
        "id": 205699759,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596318767
    },
    {
        "content": "<p>Yeah that definitely makes sense</p>",
        "id": 205699778,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596318840
    },
    {
        "content": "<p>(Not sure about a solution though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 205699820,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596318868
    },
    {
        "content": "<p>And the reason that I think this regressed (sort of) with the Complete/Ambiguous split, is that the other strand</p>\n<div class=\"codehilite\"><pre><span></span><code>ExClause {\n                            subst: [?0 := {slice}&lt;^0.0&gt;],\n                            ambiguous: true,\n                            constraints: [],\n                            subgoals: [],\n                            delayed_subgoals: [],\n                            answer_time: TimeStamp {\n                                clock: 0,\n                            },\n                            floundered_subgoals: [\n                                FlounderedSubgoal {\n                                    floundered_literal: Positive(\n                                        InEnvironment {\n                                            environment: Env([]),\n                                            goal: AliasEq(&lt;{slice}&lt;^0.0&gt; as ToOwned&gt;::Owned = Vec&lt;^0.0&gt;),\n                                        },\n                                    ),\n                                    floundered_time: TimeStamp {\n                                        clock: 0,\n                                    },\n                                },\n                            ],\n                        }\n</code></pre></div>\n\n\n<p>would have returned an ambiguous answer?</p>",
        "id": 205699821,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596318894
    },
    {
        "content": "<p>Maybe</p>",
        "id": 205699823,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596318899
    },
    {
        "content": "<p>I have to think of a solution for this</p>",
        "id": 205699828,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596318937
    },
    {
        "content": "<p>I really wish that <code>ForAll&lt;&gt; {}</code> wasn't there though. It throws me off lol</p>",
        "id": 205699869,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596318972
    },
    {
        "content": "<p>Ah, so <span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span>, you weren't clear before. But I'm assuming that before, instead of panicking, it was giving <code>Unique; for&lt;?U0&gt; { substitution [?0 := {slice}&lt;^0.0&gt;, ?1 := Vec&lt;^0.0&gt;], lifetime constraints [] }</code></p>",
        "id": 205701156,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596321630
    },
    {
        "content": "<p>Which means that the <code>impl&lt;B&gt; From&lt;Cow&lt;B&gt;&gt; for Rc&lt;B&gt;</code> strand wasn't ever checked</p>",
        "id": 205701168,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596321668
    },
    {
        "content": "<p>Well, wasn't registered as a possible solution</p>",
        "id": 205701170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596321679
    },
    {
        "content": "<p>One thing to note is that we theoretically should be able to get a solution of <code>^0.0 = [T]</code> if <code>T: Sized</code></p>",
        "id": 205701231,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596321837
    },
    {
        "content": "<p>But I guess we can't <em>actually</em> get that</p>",
        "id": 205701268,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596321853
    },
    {
        "content": "<p>I bet if we add an <code>if (S: Sized)</code></p>",
        "id": 205701280,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596321894
    },
    {
        "content": "<p>to the goal</p>",
        "id": 205701287,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596321908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/.60clear_strands_after_cycle.60.20panic.20(.23571)/near/205701156\">said</a>:</p>\n<blockquote>\n<p>Ah, so <span class=\"user-mention silent\" data-user-id=\"230601\">Nathan Whitaker</span>, you weren't clear before. But I'm assuming that before, instead of panicking, it was giving <code>Unique; for&lt;?U0&gt; { substitution [?0 := {slice}&lt;^0.0&gt;, ?1 := Vec&lt;^0.0&gt;], lifetime constraints [] }</code></p>\n</blockquote>\n<p>Ah yup that is what I meant, should've been more specific</p>",
        "id": 205701290,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596321919
    },
    {
        "content": "<p>then we could actually get a definite solution of <code>?0 = [T]</code></p>",
        "id": 205701291,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596321931
    },
    {
        "content": "<p>Right now, we can't actually say anything about <code>ForAll&lt;&gt; { Implemented(^1.0: ToOwned) }</code>, since we don't know if <code>^1.0: Sized</code></p>",
        "id": 205701390,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322091
    },
    {
        "content": "<p>Cycles in SLG have definitely been something that <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and I have discussed. And how to potentially handle them better</p>",
        "id": 205701403,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322159
    },
    {
        "content": "<p>Because like, right now, we really have to wait until <em>all</em> strands have been checked before we do anything about cycles</p>",
        "id": 205701411,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322197
    },
    {
        "content": "<p>And I think the logical problem here is that currently we assume that if we hit a cycle, we <em>never</em> can get an answer</p>",
        "id": 205701458,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322243
    },
    {
        "content": "<p>but in reality, we <em>could</em> get an answer if we knew more</p>",
        "id": 205701460,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322255
    },
    {
        "content": "<p>So now, let's think</p>",
        "id": 205701515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322340
    },
    {
        "content": "<p>If instead of discarding the cycle, we flounder the current subgoal, what would happen</p>",
        "id": 205701516,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322355
    },
    {
        "content": "<p>And let's specifically talk about a different case</p>",
        "id": 205701521,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322375
    },
    {
        "content": "<p>Let's imagine there's only one subgoal, and it is a cycle</p>",
        "id": 205701525,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322397
    },
    {
        "content": "<p>So, we would see this and call <code>on_positive_cycle</code></p>",
        "id": 205701570,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322457
    },
    {
        "content": "<p>Right now, we essentially record that we got a cycle at this depth</p>",
        "id": 205701591,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322521
    },
    {
        "content": "<p>then re-enqueue the strand</p>",
        "id": 205701593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322548
    },
    {
        "content": "<p>Let's also assume this is the only strand</p>",
        "id": 205701632,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322564
    },
    {
        "content": "<p>Then back in <code>ensure_root_answer</code>, we would see that we've already tried to pursue that strand this call</p>",
        "id": 205701643,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322625
    },
    {
        "content": "<p>so we call <code>on_no_strands_left</code></p>",
        "id": 205701649,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322653
    },
    {
        "content": "<p>So, then we see that the current table is part of a cycle</p>",
        "id": 205701702,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322775
    },
    {
        "content": "<p>ugh this part is confusing too, the cyclic minimums</p>",
        "id": 205701768,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596322879
    },
    {
        "content": "<p>The best way I can describe cyclic minimums is we want to \"unwind\" back to the top of the stack of cycles</p>",
        "id": 205701890,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596323102
    },
    {
        "content": "<p>So anyways, the table is part of a cycle, so we do this unwinding and eventually find that we can't get any new information</p>",
        "id": 205701954,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596323203
    },
    {
        "content": "<p>Ah right, so the assumption isn't correct because we can only <em>know</em> this if we've also considered ambiguous answers</p>",
        "id": 205701971,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596323270
    },
    {
        "content": "<p>Okay I fixed it</p>",
        "id": 205702302,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596323895
    },
    {
        "content": "<p>Turns out, we can't even consider cycles unless we're accepting ambiguous answers</p>",
        "id": 205702304,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596323916
    },
    {
        "content": "<p>I feel like there's something else subtle here</p>",
        "id": 205702312,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596323951
    },
    {
        "content": "<p>but...I don't want to think about that right now</p>",
        "id": 205702316,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596323960
    },
    {
        "content": "<p>But, I guess the problem here is that there was a strand hanging around had only floundered subgoals</p>",
        "id": 205702365,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596324062
    },
    {
        "content": "<p>and the other strand on that table was part of a cycle</p>",
        "id": 205702371,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596324077
    },
    {
        "content": "<p>The problem though is because it was part of a cycle, that ambiguous answer could get back to us</p>",
        "id": 205702417,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596324148
    },
    {
        "content": "<p>Let's make sure the other tests pass</p>",
        "id": 205702536,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596324419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span> your test fails coherence: \"overlapping impls of trait <code>TyParamTrait</code>\"</p>",
        "id": 205702541,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596324464
    },
    {
        "content": "<p><em>is digesting</em></p>",
        "id": 205702581,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596324487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/.60clear_strands_after_cycle.60.20panic.20(.23571)/near/205702541\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"230601\">Nathan Whitaker</span> your test fails coherence: \"overlapping impls of trait <code>TyParamTrait</code>\"</p>\n</blockquote>\n<p>Ah yeah, it was a nonsense case so that's not surprising</p>",
        "id": 205702596,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596324559
    },
    {
        "content": "<p>hehe</p>",
        "id": 205702647,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596324675
    },
    {
        "content": "<p>that took way too long to debug</p>",
        "id": 205702658,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596324708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"230601\">@Nathan Whitaker</span> Wanna review this one?</p>",
        "id": 205702823,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596325017
    },
    {
        "content": "<p>I'm cleaning it up then gonna PR it</p>",
        "id": 205702826,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596325026
    },
    {
        "content": "<p>Sure thing, I can take a look</p>",
        "id": 205702877,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596325131
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/chalk/issues/588\">chalk#588</a></p>",
        "id": 205702888,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596325175
    },
    {
        "content": "<p>Also, I apologize to everyone who doesn't care for all my ramblings</p>",
        "id": 205703081,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596325543
    },
    {
        "content": "<p>LGTM, should we try to get <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span>' eyes on it?</p>",
        "id": 205703175,
        "sender_full_name": "Nathan Whitaker",
        "timestamp": 1596325733
    },
    {
        "content": "<p>Eh, I think it's a fairly small change. And he's not going to be around much the next week</p>",
        "id": 205703381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1596326250
    }
]