[
    {
        "content": "<p>I have a question about chalk/polonius implomatation.</p>\n<p>For Cargo's resolver, I have been looking into persistent union find data structures. The papers I am reading have had 2 examples of where these are useful:  for type resolution and for Prolog implementations. So my question is does chalk/polonius already have an implementation if not would a crate be useful for chalk/polonius?</p>",
        "id": 154574220,
        "sender_full_name": "Eh2406",
        "timestamp": 1546873034
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 154575505,
        "sender_full_name": "lqd",
        "timestamp": 1546873974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> in fact, ena supports a persistent union-find, though I've not played with it much to measure performance or anything</p>",
        "id": 154577670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546875661
    },
    {
        "content": "<p>er, sorry, to answer your question, we are using <a href=\"https://crates.io/crates/ena\" target=\"_blank\" title=\"https://crates.io/crates/ena\">https://crates.io/crates/ena</a></p>",
        "id": 154577693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546875682
    },
    {
        "content": "<p>(polonius doens't need that)</p>",
        "id": 154577702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546875688
    },
    {
        "content": "<p>Where can I find the persistent  veriton, is it on master?</p>",
        "id": 154577891,
        "sender_full_name": "Eh2406",
        "timestamp": 1546875832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> in some sense, it's <em>always</em> persistent -- you just <code>clone</code> the table whenever you want</p>",
        "id": 154578743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546876529
    },
    {
        "content": "<p>that said, the <code>persistent</code> feature enables one that uses a persistent vector under the hood</p>",
        "id": 154578754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546876541
    },
    {
        "content": "<p>this makes cloning O(1) instead of O(n)</p>",
        "id": 154578761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546876547
    },
    {
        "content": "<p>note that this does not mean it is faster</p>",
        "id": 154578764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546876550
    },
    {
        "content": "<p>I've usually found the opposite</p>",
        "id": 154578767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546876554
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/ena/blob/49d9270d95910e303061128938dafce0ae79a45e/Cargo.toml#L15\" target=\"_blank\" title=\"https://github.com/nikomatsakis/ena/blob/49d9270d95910e303061128938dafce0ae79a45e/Cargo.toml#L15\">https://github.com/nikomatsakis/ena/blob/49d9270d95910e303061128938dafce0ae79a45e/Cargo.toml#L15</a></p>",
        "id": 154578768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546876555
    },
    {
        "content": "<p>if you enable that  feature, you can create a <code>UnificationTable&lt;Persistent&gt;</code> I think</p>",
        "id": 154578838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546876593
    },
    {
        "content": "<p>where the <code>Persistent</code> type is <a href=\"https://github.com/nikomatsakis/ena/blob/master/src/unify/mod.rs#L41\" target=\"_blank\" title=\"https://github.com/nikomatsakis/ena/blob/master/src/unify/mod.rs#L41\">defined here</a></p>",
        "id": 154578841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546876603
    },
    {
        "content": "<p>here are some tests: <a href=\"https://github.com/nikomatsakis/ena/blob/master/src/unify/tests.rs#L50\" target=\"_blank\" title=\"https://github.com/nikomatsakis/ena/blob/master/src/unify/tests.rs#L50\">link</a></p>",
        "id": 154578866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546876636
    },
    {
        "content": "<p>it might be interesting to make a version based on <a href=\"http://im.rs\" target=\"_blank\" title=\"http://im.rs\">im.rs</a> or something, should be possible</p>",
        "id": 154578891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546876657
    },
    {
        "content": "<p>there is a <a href=\"https://github.com/nikomatsakis/ena/blob/master/src/unify/backing_vec.rs#L16-L17\" target=\"_blank\" title=\"https://github.com/nikomatsakis/ena/blob/master/src/unify/backing_vec.rs#L16-L17\">trait</a> that controls the backing store, here is the <a href=\"https://github.com/nikomatsakis/ena/blob/master/src/unify/backing_vec.rs#L147\" target=\"_blank\" title=\"https://github.com/nikomatsakis/ena/blob/master/src/unify/backing_vec.rs#L147\">implementation for persistent vectors</a></p>",
        "id": 154578976,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546876710
    },
    {
        "content": "<p>(as an aside, I've been thinking it would make sense to revamp ena for some time but anyway.... the basics are right)</p>",
        "id": 154579005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546876734
    },
    {
        "content": "<p>Thanks for all the links!</p>",
        "id": 154579181,
        "sender_full_name": "Eh2406",
        "timestamp": 1546876871
    },
    {
        "content": "<p>Let me see if I can say it back.</p>",
        "id": 154579195,
        "sender_full_name": "Eh2406",
        "timestamp": 1546876886
    },
    {
        "content": "<p>rustc and chalk use a ena. A persistent version is available there, but is largely not used as it is slower.</p>",
        "id": 154579305,
        "sender_full_name": "Eh2406",
        "timestamp": 1546876985
    },
    {
        "content": "<p>Work to make it faster would be interesting to its manteners.</p>",
        "id": 154579340,
        "sender_full_name": "Eh2406",
        "timestamp": 1546877023
    },
    {
        "content": "<p>sounds roughly right. Chalk in particular might benefit from a persistent setup, as it does some cloning</p>",
        "id": 154579419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546877092
    },
    {
        "content": "<p>tbh I've just not benmarked it much</p>",
        "id": 154579422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546877096
    },
    {
        "content": "<p>there are also alternative strategies for impl'ing union find, though I think they're not <em>much</em> different</p>",
        "id": 154579450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546877116
    },
    {
        "content": "<p>e.g. minikanren's impl is intended to be persistent</p>",
        "id": 154579459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546877126
    },
    {
        "content": "<p>The papers I am reading say that \"just swapping out the backing sore for a persistent version, is to slow in practice\", I can find the exact quote if you'd like.</p>",
        "id": 154579586,
        "sender_full_name": "Eh2406",
        "timestamp": 1546877225
    },
    {
        "content": "<p>seems plausible</p>",
        "id": 154579610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546877247
    },
    {
        "content": "<p>They have a page describing exactly why that destroys the Big O of the normal version.</p>",
        "id": 154579767,
        "sender_full_name": "Eh2406",
        "timestamp": 1546877383
    },
    {
        "content": "<p>Thanks for the info! I will continue researching, and try to report back to ena!</p>",
        "id": 154580012,
        "sender_full_name": "Eh2406",
        "timestamp": 1546877552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> FWIW I know petgraph has a UnionFind data structure as well but I don't think it's persistent -- might be worth looking at though.</p>",
        "id": 154584848,
        "sender_full_name": "simulacrum",
        "timestamp": 1546881768
    },
    {
        "content": "<p>Do you have a link for minikanren's impl?</p>",
        "id": 154584981,
        "sender_full_name": "Eh2406",
        "timestamp": 1546881894
    },
    {
        "content": "<p>not really</p>",
        "id": 154590515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546886725
    },
    {
        "content": "<p>Ba humbug. I miss read the abstract. The paper was about the \"ask the same object for what is value used to be\" type of persistent not the \"fast clone\" \" type of persistent. (they are related, but not the same) It is not faster for the case we care about.</p>",
        "id": 154600995,
        "sender_full_name": "Eh2406",
        "timestamp": 1546894951
    },
    {
        "content": "<blockquote>\n<p>The papers I am reading say that \"just swapping out the backing sore for a persistent version, is to slow in practice\", I can find the exact quote if you'd like.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> , can you paste a link to the papers you are hinting towards ?</p>",
        "id": 154606940,
        "sender_full_name": "blitzerr",
        "timestamp": 1546900232
    },
    {
        "content": "<p>The one that turned out to be about the wrong problem is<br>\n<a href=\"https://link.springer.com/chapter/10.1007/BFb0028283\" target=\"_blank\" title=\"https://link.springer.com/chapter/10.1007/BFb0028283\">https://link.springer.com/chapter/10.1007/BFb0028283</a></p>",
        "id": 154608580,
        "sender_full_name": "Eh2406",
        "timestamp": 1546901914
    },
    {
        "content": "<p>The quote I had in mind is from <br>\n<a href=\"https://www.lri.fr/~filliatr/ftp/publis/puf-wml07.pdf\" target=\"_blank\" title=\"https://www.lri.fr/~filliatr/ftp/publis/puf-wml07.pdf\">https://www.lri.fr/~filliatr/ftp/publis/puf-wml07.pdf</a></p>\n<p>But it goes on to suggest a somost automatic version of the snapshot idea that is already in ena</p>",
        "id": 154608710,
        "sender_full_name": "Eh2406",
        "timestamp": 1546902065
    },
    {
        "content": "<p>thanks a lot <span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span></p>",
        "id": 154615635,
        "sender_full_name": "blitzerr",
        "timestamp": 1546910974
    }
]