[
    {
        "content": "<p>So if you have <code>Foo&lt;'a, 'b: a&gt;</code> and <code>for&lt;'c, 'd&gt; fn(Foo&lt;'c, 'd&gt;)</code>, there is sort of something missing -- how do we know that <code>'c: 'd</code> after all? The same applies in a few other cases.</p>",
        "id": 200288026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591735626
    },
    {
        "content": "<p>What I had hoped to do was to use an implied-bounds like approach</p>",
        "id": 200288044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591735635
    },
    {
        "content": "<p>and make <code>for&lt;'c, 'd&gt; fn(Foo&lt;'c, 'd&gt;)</code> short for <code>for&lt;'c, 'd&gt; where WF(Foo&lt;'c, 'd&gt;) fn(Foo&lt;'c, 'd&gt;)</code></p>",
        "id": 200288085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591735661
    },
    {
        "content": "<p>I see. Would that mean that the <code>GeneratorWitness</code> type itself would store the relationships between regions?</p>",
        "id": 200288233,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1591735718
    },
    {
        "content": "<p>and <code>Wf(GeneratorWitness)</code> would require that those region requirements hold</p>",
        "id": 200288259,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1591735733
    },
    {
        "content": "<p>Ideally no, the generator witness would probably follow a similar approach</p>",
        "id": 200473924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591821916
    },
    {
        "content": "<p>i.e., it would require that its component field types are well-formed</p>",
        "id": 200473932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591821924
    },
    {
        "content": "<p>we won't know the relationships between regions anyway at the time the witness is formed</p>",
        "id": 200473943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591821936
    },
    {
        "content": "<p>I'm not sure I guess if that will suffice</p>",
        "id": 200473974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591821952
    },
    {
        "content": "<p>I don't think that's sufficient when user-defined auto trait impls come into play</p>",
        "id": 200936629,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592250650
    },
    {
        "content": "<p>Consider the following code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">assert_send</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_send</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">yield</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 200936942,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592250782
    },
    {
        "content": "<p>Currently, this does not compile, because we 'forget' that we are storing a <code>MyStruct&lt;'static&gt;</code></p>",
        "id": 200937077,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592250842
    },
    {
        "content": "<p>it's not sufficient to know that the component types are well formed, because we may need to prove an impl that imposes additional region constraints</p>",
        "id": 200937201,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592250890
    },
    {
        "content": "<p>I think that's considered \"working as intended\"</p>",
        "id": 200937873,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592251180
    },
    {
        "content": "<p>Are you saying that we never want that kind of code to compile?</p>",
        "id": 200937981,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592251214
    },
    {
        "content": "<p>that seems extremely counter-intuitive</p>",
        "id": 200937997,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592251222
    },
    {
        "content": "<p>Yes, that's what I'm saying.</p>",
        "id": 200938013,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592251230
    },
    {
        "content": "<p>I think that's going to be extremely confusing to users - when writing an <code>async fn</code>, all of the lifetimes will <em>look</em> correct, except your code may not compile</p>",
        "id": 200938567,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592251529
    },
    {
        "content": "<p>also, users have already run into this: <a href=\"https://github.com/rust-lang/rust/issues/64552\">https://github.com/rust-lang/rust/issues/64552</a> and <a href=\"https://github.com/rust-lang/rust/issues/68950\">https://github.com/rust-lang/rust/issues/68950</a></p>",
        "id": 200938715,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592251607
    },
    {
        "content": "<p>some of the minimizations in those threads would be fixed by using WF relationships, but not all of them</p>",
        "id": 200938766,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592251636
    },
    {
        "content": "<p>In particular, the <code>Box&lt;dyn FnOnce() + 'static&gt;</code> in <a href=\"https://github.com/rust-lang/rust/issues/68950\">https://github.com/rust-lang/rust/issues/68950</a> will not be solved by WF since <code>Box&lt;dyn Trait + 'static&gt;</code> and <code>Box&lt;dyn Trait + '_&gt;</code> are both well-formed</p>",
        "id": 200938882,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592251704
    },
    {
        "content": "<p>that example is particularly bad because just changing <code>fn</code> to <code>async fn</code> is enough to break the code</p>",
        "id": 200939200,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592251875
    },
    {
        "content": "<p>That's a different issue though, the issue there is the lifetime in the generator captures is not sufficiently constrained, not the type in the generator witness.</p>",
        "id": 200939207,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592251880
    },
    {
        "content": "<p>oh, I see. we're only checking the 'upvar' regions for the 'impl trait lifetime capture' check?</p>",
        "id": 200939343,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592251955
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 200939347,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592251957
    },
    {
        "content": "<p>Yes, bound regions are always for that check.</p>",
        "id": 200939406,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592251990
    },
    {
        "content": "<p>can you elaborate on why we don't want the original example to compile?</p>",
        "id": 200939448,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592252021
    },
    {
        "content": "<p>First, because who actually writes such an impl. Also it's hard to do it in a way that's stable and will work once typeck doesn't do region inference.</p>",
        "id": 200942258,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592253380
    },
    {
        "content": "<p>You don't have to write that specific impl - you just need to hit some impl that imposes any additional lifetime requirements</p>",
        "id": 200942967,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592253734
    },
    {
        "content": "<p>e.g. you could have <code>unsafe impl&lt;'a&gt; impl Send for MyStruct&lt;'a&gt; where MyStruct&lt;'a&gt;: OtherTrait</code></p>",
        "id": 200943035,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592253772
    },
    {
        "content": "<p>and the impl of <code>OtherTrait</code> for <code>MyStruct</code> could impose <code>'a: 'static</code></p>",
        "id": 200943068,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592253793
    },
    {
        "content": "<p>if handling WF correctly causes most of the errors to disappear in practice, then I understand that this might not be a priority</p>",
        "id": 200943138,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592253836
    },
    {
        "content": "<p>but I think it would be good if this kind of code worked eventually, as I think the cases where it <em>does</em> matter will otherwise be extremely confusing and un-ergonomic</p>",
        "id": 200943350,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1592253950
    },
    {
        "content": "<p>Yeah, this may be true. It's kind of a larger problem -- I'd like to at least get to the point where we can handle the implied bounds examples I gave, which would mean we have more of the required <em>infrastructure</em> to do better.</p>",
        "id": 201053103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592330827
    }
]