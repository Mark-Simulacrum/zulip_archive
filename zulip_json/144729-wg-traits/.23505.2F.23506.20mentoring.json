[
    {
        "content": "<p>Hi everyone - I'm just starting to look at <a href=\"https://github.com/rust-lang/chalk/issues/505\">https://github.com/rust-lang/chalk/issues/505</a> and <a href=\"https://github.com/rust-lang/chalk/issues/506\">https://github.com/rust-lang/chalk/issues/506</a> and I have some very entry-level questions if that's alright</p>",
        "id": 200398780,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591784342
    },
    {
        "content": "<p>Does chalk have a notion of opaque new-typed indices like rustc does?</p>",
        "id": 200398898,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591784406
    },
    {
        "content": "<p>As in - when I'm creating <code>field_type(adt_id, variant_idx, field_idx)</code> would you expect <code>variant_idx</code> and <code>field_idx</code> to be anything other than <code>usize</code>s?</p>",
        "id": 200398969,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591784455
    },
    {
        "content": "<p>We do have them, <code>AdtId</code>, <code>TraitId</code> and others</p>",
        "id": 200399048,
        "sender_full_name": "Areredify",
        "timestamp": 1591784518
    },
    {
        "content": "<p>Ah okay so they're all set-up via the interner</p>",
        "id": 200399113,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591784538
    },
    {
        "content": "<p>That being said, I am not sure there is a need for that here</p>",
        "id": 200399142,
        "sender_full_name": "Areredify",
        "timestamp": 1591784562
    },
    {
        "content": "<p>I think just make them usizes</p>",
        "id": 200399445,
        "sender_full_name": "Areredify",
        "timestamp": 1591784777
    },
    {
        "content": "<p>Ok - will do! Thanks!</p>",
        "id": 200399801,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591785026
    },
    {
        "content": "<p>Hmm, actually</p>",
        "id": 200399830,
        "sender_full_name": "Areredify",
        "timestamp": 1591785053
    },
    {
        "content": "<p>It's honestly less work to not have them <code>usize</code>s as I've already got them as opaqued haha</p>",
        "id": 200399873,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591785083
    },
    {
        "content": "<p>The most common use case is doing something like <code>for field in struct.fields(interner, variant)</code></p>",
        "id": 200399957,
        "sender_full_name": "Areredify",
        "timestamp": 1591785136
    },
    {
        "content": "<p>And here it makes sense for <code>variant</code> to be a <code>VariantId</code> or w/e</p>",
        "id": 200399988,
        "sender_full_name": "Areredify",
        "timestamp": 1591785159
    },
    {
        "content": "<p>I retract my statement about <code>usize</code></p>",
        "id": 200400057,
        "sender_full_name": "Areredify",
        "timestamp": 1591785226
    },
    {
        "content": "<p>Sorted - thanks a lot</p>",
        "id": 200400133,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591785259
    },
    {
        "content": "<p>+1 to newtypes, though it's annoying that rustc's infrastructure for this is not available on <a href=\"http://crates.io\">crates.io</a></p>",
        "id": 200474626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591822263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/.23505.2F.23506.20mentoring/near/200474626\">said</a>:</p>\n<blockquote>\n<p>+1 to newtypes, though it's annoying that rustc's infrastructure for this is not available on <a href=\"http://crates.io\">crates.io</a></p>\n</blockquote>\n<p>I always end up re-implementing <code>IdxVec</code> whenever I write a compiler in Rust</p>",
        "id": 200808030,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1592126392
    },
    {
        "content": "<p>It should definitely be a crate</p>",
        "id": 200808031,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1592126400
    },
    {
        "content": "<p>Anyway - is there a way that I can temporarily disable the <code>Unsize</code>-builtin for my work on this? I'm a bit hazy on the details of <code>Unsize</code> and I'd rather get everything else working first</p>",
        "id": 200808078,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1592126453
    },
    {
        "content": "<p>Ah - doesn't matter I figured it out</p>",
        "id": 200808299,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1592126910
    },
    {
        "content": "<p>Whats <code>IdxVec</code>?</p>",
        "id": 200811751,
        "sender_full_name": "Areredify",
        "timestamp": 1592133005
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/10326d804e42022dee3de11e7a55b94028450f53/src/librustc_index/vec.rs#L477\">https://github.com/rust-lang/rust/blob/10326d804e42022dee3de11e7a55b94028450f53/src/librustc_index/vec.rs#L477</a></p>",
        "id": 200811763,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592133059
    },
    {
        "content": "<p>It's just a <code>Vec</code> with an opaque index type</p>",
        "id": 200811769,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1592133085
    },
    {
        "content": "<p>Got it, thanks</p>",
        "id": 200811869,
        "sender_full_name": "Areredify",
        "timestamp": 1592133276
    },
    {
        "content": "<p>Can I write <code>where T: 'a + Sized</code> in chalk?</p>",
        "id": 200990578,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1592299334
    },
    {
        "content": "<p>To give some context, I'm just starting to write some tests by pulling some examples from <code>std</code></p>",
        "id": 200990663,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1592299404
    },
    {
        "content": "<p>Type outlives is not yet in</p>",
        "id": 200990747,
        "sender_full_name": "Areredify",
        "timestamp": 1592299444
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/435\">https://github.com/rust-lang/chalk/issues/435</a></p>",
        "id": 200990801,
        "sender_full_name": "Areredify",
        "timestamp": 1592299480
    },
    {
        "content": "<p>Ahhh okay</p>",
        "id": 200990820,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1592299499
    },
    {
        "content": "<p>At the moment I've got this test which passes</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">lowering_success</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Borrow</span><span class=\"o\">&lt;</span><span class=\"n\">Borrowed</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">         </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">ToOwned</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"k\">type</span> <span class=\"nc\">Owned</span>: <span class=\"nc\">Borrow</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">         </span><span class=\"k\">enum</span> <span class=\"nc\">Cow</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"nb\">ToOwned</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">Borrowed</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">Owned</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">ToOwned</span><span class=\"o\">&gt;</span>::<span class=\"n\">Owned</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But in <code>std</code> it's supposed to have <code>B: 'a</code> as well - should I stick a <code>FIXME(#435)</code> on it or leave it out?</p>",
        "id": 200990863,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1592299523
    },
    {
        "content": "<p>I think just leave a fixme</p>",
        "id": 200991068,
        "sender_full_name": "Areredify",
        "timestamp": 1592299678
    },
    {
        "content": "<p>Ok, so I'm trying to figure out a list of what's left to do for ADT support</p>",
        "id": 201019699,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1592316322
    },
    {
        "content": "<p>What would you guys expect to see in the way of tests etc? Particularly for well-formed-ness and builtins</p>",
        "id": 201019790,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1592316359
    },
    {
        "content": "<p>So, off the top of my head:</p>",
        "id": 201057076,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592332772
    },
    {
        "content": "<ul>\n<li>enums and structs are WF</li>\n<li>auto traits tests pass for both enums and structs (and fail appropriately)</li>\n<li>enums are always <code>Sized</code> and fail WF checks if any fields aren't, structs keep the existing tests</li>\n</ul>",
        "id": 201057354,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592332904
    },
    {
        "content": "<p>Ok thanks! I'll get right on that</p>",
        "id": 201114269,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1592383223
    }
]