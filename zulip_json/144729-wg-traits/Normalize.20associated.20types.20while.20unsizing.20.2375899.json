[
    {
        "content": "<p>Hi. I've started working on <a href=\"https://github.com/rust-lang/rust/issues/75899\">https://github.com/rust-lang/rust/issues/75899</a>. It's my first time working on the compiler and it feels a bit overwhelming, but I want to try anyway :)</p>\n<p>I've tried to implement <code>eddyb</code> suggestion: normalize <code>trait_pred</code> via <code>normalize_associated_types_in_as_infer_ok</code>. If I understand debug output correctly, this makes the type check pass (on a similar test to one that's in the issue). But then later on I get an error from <code>mir</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: broken MIR in DefId(0:15 ~ coerce_normalization[317d]::coerce_newtype_slice) (NoSolution): could not prove Binder(TraitPredicate(&lt;&amp;NewType&lt;[T; N]&gt; as std::ops::CoerceUnsized&lt;&amp;NewType&lt;[T]&gt;&gt;&gt;), [])\n  --&gt; /home/waffle/projects/repos/rust/src/test/ui/coercion/coerce-normalization.rs:18:5\n   |\nLL |     array\n   |     ^^^^^\n   |\n   = note: delayed at compiler/rustc_mir/src/borrow_check/type_check/mod.rs:252:27\n</code></pre></div>\n<p>I would assume that this means that <code>NewType&lt;[T; N]&gt;: Unsize&lt;NewType&lt;[T]&gt;&gt;</code> isn't confirmed and I need to change something in <code>rustc_trait_selection</code> too (this PR: <a href=\"https://github.com/rust-lang/rust/pull/80726\">https://github.com/rust-lang/rust/pull/80726</a> feels related <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span>)</p>\n<p>This is what I've got so far.</p>",
        "id": 233931778,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1618037030
    },
    {
        "content": "<p>Sorry for such a long silence, I had a lot of problems irl. I think I finally have time to work on this again, so I'm back :)</p>\n<p>So, as I said in the first message, after implementing <code>eddyb</code> suggestion the code seems to type  check:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>DEBUG rustc_typeck::check::coercion Coerce.tys(&amp;'a NewType&lt;[T3; N]&gt; =&gt; &amp;'a NewType&lt;[T3]&gt;)\n...\nDEBUG rustc_typeck::check::coercion coerce: unsize successful: Ok(InferOk { value: ([Deref(None) -&gt; NewType&lt;[T3; N]&gt;, Borrow(Ref('_#0r, Not)) -&gt; &amp;NewType&lt;[T3; N]&gt;, Pointer(Unsize) -&gt; _], _), obligations: [Obligation(predicate=Binder(OutlivesPredicate('_#3r, '_#2r), []), depth=1)] })\n</code></pre></div>\n<p>However later I get <code>broken MIR</code> error. The error comes from <a href=\"https://github.com/rust-lang/rust/blob/1c66d11a34047be1eb6c50703f8ba6689a15e716/compiler/rustc_mir/src/borrow_check/type_check/mod.rs#L2756\"><code>rustc_mir::borrow_check::type_check (prove_predicate)</code></a> as it can't prove <code>Binder(TraitPredicate(&lt;&amp;NewType&lt;[T3; N]&gt; as std::ops::CoerceUnsized&lt;&amp;NewType&lt;[T3]&gt;&gt;&gt;), [])</code>. </p>\n<p>Previously I though that something isn't right in <code>rustc_trait_selection</code>, but now checking the logs it seems that everything is fine. </p>\n<ol>\n<li><code>confirm_condidate</code> is called with <code>TraitPredicate(&lt;&amp;NewType&lt;[T3; N]&gt; as std::ops::CoerceUnsized&lt;&amp;NewType&lt;[T3]&gt;&gt;&gt;)</code> and returns (among with some uninteresting things) an obligation with <code>TraitPredicate(&lt;NewType&lt;[T3; N]&gt; as std::marker::Unsize&lt;NewType&lt;[T3]&gt;&gt;&gt;)</code></li>\n<li>then it's called with <code>TraitPredicate(&lt;NewType&lt;[T3; N]&gt; as std::marker::Unsize&lt;NewType&lt;[T3]&gt;&gt;&gt;)</code> and returns an obligation with <code>TraitPredicate(&lt;&lt;[T3; N] as Id&gt;::Assoc as std::marker::Unsize&lt;&lt;[T3] as Id&gt;::Assoc&gt;&gt;)</code></li>\n<li>then it's called with <code>TraitPredicate(&lt;_ as std::marker::Unsize&lt;_&gt;&gt;)</code> (I believe it's the normalization of previous return as <code>confirm_builtin_unsize_candidate</code> reports <code>source=[T3; N], target=[T3]</code>) and returns <code>Ok(ImplSourceBuiltinData(nested=[]))</code></li>\n</ol>\n<p>So that means that the required trait implementation <em>is</em> confirmed, right?</p>\n<p>Then during typecheck in MIR (<code>rustc_mir::borrow_check::type_check</code>), <code>confirm_candidate</code> is called with <code>TraitPredicate(&lt;&amp;NewType&lt;[T3; N]&gt; as std::ops::CoerceUnsized&lt;&amp;NewType&lt;[T3]&gt;&gt;&gt;)</code> again, this leads to an obligation with <code>TraitPredicate(&lt;&lt;[T3; N] as Id&gt;::Assoc as std::marker::Unsize&lt;&lt;[T3] as Id&gt;::Assoc&gt;&gt;</code>. Immediately after this the  <code>prove_predicate</code> fails. Here is the this weird part of log: <a href=\"https://gist.github.com/WaffleLapkin/026d1b0490d3051061352926ed649f19\">gist</a> (note, some debug statements I just added).</p>\n<p>I don't really get why this is happening...</p>",
        "id": 247073154,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627130959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> back in April you've <a href=\"https://github.com/rust-lang/rust/issues/75899#issuecomment-816249385\">said</a> that we could talk this over during some of your morning office hours (9am-10 US Eastern Time, every day but Tuesday), is this still right? :D</p>\n<p>If so, could you give me some directions where to look next? I'm a bit lost atm.</p>",
        "id": 247073829,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627131878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273349\">@Waffle Lapkin</span> maybe you can book a slot with him at this site: <a href=\"https://calendly.com/nikomatsakis/office-hours?month=2021-07\">https://calendly.com/nikomatsakis/office-hours?month=2021-07</a></p>",
        "id": 247083340,
        "sender_full_name": "Charles Lew",
        "timestamp": 1627145022
    },
    {
        "content": "<p>yes, <span class=\"user-mention\" data-user-id=\"273349\">@Waffle Lapkin</span> please book a slot! Bear in mind I'll be on vacation first two weeks of August. I need to add some August times.</p>",
        "id": 247198391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627304482
    },
    {
        "content": "<p>Yeah, sure! I booked a slot yesterday, I believe for Wednesday 28 c:</p>",
        "id": 247198823,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627304683
    },
    {
        "content": "<p>I've published the changes I've made so far: <a href=\"https://github.com/WaffleLapkin/rust/tree/coerce_normalization\">https://github.com/WaffleLapkin/rust/tree/coerce_normalization</a> (ohh, I haven't noticed before that I've done so little...)</p>",
        "id": 247447900,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627472430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273349\">@Waffle Lapkin</span> oh, shoot!!</p>",
        "id": 247451534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627475081
    },
    {
        "content": "<p>my apologies, my schedule has been off and I messed up my office hours this morning (I'm in different time zones and getting confused)</p>",
        "id": 247451562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627475100
    },
    {
        "content": "<p>I'll try to give you some async feedback here</p>",
        "id": 247451573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627475107
    },
    {
        "content": "<p>er, wait, haha, they didn't start yet :)</p>",
        "id": 247451626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627475158
    },
    {
        "content": "<p>I...knew that</p>",
        "id": 247451678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627475171
    },
    {
        "content": "<p>Time zones are very confusing! But I believe that we only start in a couple of minutes, so everything is perfectly fine :)</p>",
        "id": 247454647,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627477113
    },
    {
        "content": "<p>Yep, I'm here</p>",
        "id": 247454984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627477268
    },
    {
        "content": "<p>But you're going to have to remind me what you're trying to do :)</p>",
        "id": 247455017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627477285
    },
    {
        "content": "<p>I'm trying to allow unsizing for structs that have associated type in last field</p>",
        "id": 247455164,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627477340
    },
    {
        "content": "<p>OK, I see,  Unsizing coercion does not normalize associated types in structs. <a href=\"https://github.com/rust-lang/rust/issues/75899\">#75899</a></p>",
        "id": 247455174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627477343
    },
    {
        "content": "<p>yes</p>",
        "id": 247455200,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627477356
    },
    {
        "content": "<p>are you still stuck in roughly the same place?</p>",
        "id": 247455225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627477375
    },
    {
        "content": "<p>also, do you have a WIP PR?</p>",
        "id": 247455232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627477383
    },
    {
        "content": "<p>I don't have a WIP PR yet, but I can create it now if needed</p>",
        "id": 247455260,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627477405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Normalize.20associated.20types.20while.20unsizing.20.2375899/near/247455225\">said</a>:</p>\n<blockquote>\n<p>are you still stuck in roughly the same place?</p>\n</blockquote>\n<p>yep</p>",
        "id": 247455280,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627477420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"273349\">Waffle Lapkin</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Normalize.20associated.20types.20while.20unsizing.20.2375899/near/247455260\">said</a>:</p>\n<blockquote>\n<p>I don't have a WIP PR yet, but I can create it now</p>\n</blockquote>\n<p>that's usually helpful</p>",
        "id": 247455313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627477440
    },
    {
        "content": "<p>also, what test case are you running on?</p>",
        "id": 247455400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627477472
    },
    {
        "content": "<p>(the one in the issue, I gues?</p>",
        "id": 247455418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627477486
    },
    {
        "content": "<p>This one: <a href=\"https://github.com/WaffleLapkin/rust/commit/ebe2c08bb2a8dd98957758ffdcb47dd952b40118\">https://github.com/WaffleLapkin/rust/commit/ebe2c08bb2a8dd98957758ffdcb47dd952b40118</a></p>",
        "id": 247455465,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627477512
    },
    {
        "content": "<p>Made a WIP PR: <a href=\"https://github.com/rust-lang/rust/pull/87548\">https://github.com/rust-lang/rust/pull/87548</a></p>",
        "id": 247455683,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627477633
    },
    {
        "content": "<p>thanks</p>",
        "id": 247455741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627477674
    },
    {
        "content": "<p>I'm reading your notes</p>",
        "id": 247455747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627477678
    },
    {
        "content": "<p>ok, well, I see why you're confused</p>",
        "id": 247456400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627477997
    },
    {
        "content": "<p>as it happens, I would love to remove this part of the coercion code that you are fixing</p>",
        "id": 247456531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478053
    },
    {
        "content": "<p>I'm not sure if we can get away with it, but it's going to be really painful to make a part of chalk</p>",
        "id": 247456549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478067
    },
    {
        "content": "<p>the reason I dislike this code is that it is basically reproducing part of the normal \"evaluate whether a trait matches\" logic</p>",
        "id": 247456592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478089
    },
    {
        "content": "<p>but doing it in a custom and different way</p>",
        "id": 247456605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478095
    },
    {
        "content": "<p>anyway, I imagine that this is part of why you are seeing different behavior</p>",
        "id": 247456611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478102
    },
    {
        "content": "<p>I'm debating whether I can convince you into trying to remove this logic, instead of fixing it</p>",
        "id": 247456693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478151
    },
    {
        "content": "<p>but that could turn into quite a project</p>",
        "id": 247456774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478181
    },
    {
        "content": "<p>So one part goes through the thing I'm fixing and another part of the compiler goes through normal trait solving? That seems annoying.</p>",
        "id": 247456829,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627478213
    },
    {
        "content": "<p>I'm not sure if I'm experienced enough for this project tbh</p>",
        "id": 247456999,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627478288
    },
    {
        "content": "<p>I don't mind trying though</p>",
        "id": 247457022,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627478301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"273349\">Waffle Lapkin</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Normalize.20associated.20types.20while.20unsizing.20.2375899/near/247456829\">said</a>:</p>\n<blockquote>\n<p>So one part goes through the thing I'm fixing and another part of the compiler goes through normal trait solving? That seems annoying.</p>\n</blockquote>\n<p>I am guessing</p>",
        "id": 247457096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478337
    },
    {
        "content": "<p>hmm</p>",
        "id": 247457169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"273349\">Waffle Lapkin</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Normalize.20associated.20types.20while.20unsizing.20.2375899/near/247073154\">said</a>:</p>\n<blockquote>\n<p>Then during typecheck in MIR (<code>rustc_mir::borrow_check::type_check</code>), <code>confirm_candidate</code> is called with <code>TraitPredicate(&lt;&amp;NewType&lt;[T3; N]&gt; as std::ops::CoerceUnsized&lt;&amp;NewType&lt;[T3]&gt;&gt;&gt;)</code> again, this leads to an obligation with <code>TraitPredicate(&lt;&lt;[T3; N] as Id&gt;::Assoc as std::marker::Unsize&lt;&lt;[T3] as Id&gt;::Assoc&gt;&gt;</code>. Immediately after this the  <code>prove_predicate</code> fails. Here is the this weird part of log: <a href=\"https://gist.github.com/WaffleLapkin/026d1b0490d3051061352926ed649f19\">gist</a> (note, some debug statements I just added).</p>\n</blockquote>\n<p>specifically here, it looks like we are <em>not</em> normalizing--</p>",
        "id": 247457272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478421
    },
    {
        "content": "<p>just to check, <span class=\"user-mention\" data-user-id=\"273349\">@Waffle Lapkin</span>, <code>TraitPredicate(&lt;&lt;[T3; N] as Id&gt;::Assoc as std::marker::Unsize&lt;&lt;[T3] as Id&gt;::Assoc&gt;&gt;</code> -- is this what we were seeing before you added the normalization step?</p>",
        "id": 247457304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478440
    },
    {
        "content": "<p>Hm, let me check</p>",
        "id": 247457406,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627478498
    },
    {
        "content": "<p>do you have a backtrace from the broken MIR error?</p>",
        "id": 247457414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478504
    },
    {
        "content": "<p>that would be helpful</p>",
        "id": 247457429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478513
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>query stack during panic:\nend of query stack\n</code></pre></div>\n<p>I don't think I have</p>",
        "id": 247457663,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627478615
    },
    {
        "content": "<p>try running with <code>-Ztreat-err-as-bug</code> and use <code>RUST_BACKTRACE=1</code></p>",
        "id": 247457702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478638
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;no errors encountered even though `delay_span_bug` issued&#39;, compiler/rustc_errors/src/lib.rs:1050:13\nstack backtrace:\n   0: rust_begin_unwind\n             at ./library/std/src/panicking.rs:515:5\n   1: std::panicking::begin_panic_fmt\n             at ./library/std/src/panicking.rs:457:5\n   2: rustc_errors::HandlerInner::flush_delayed\n             at ./compiler/rustc_errors/src/lib.rs:1050:13\n   3: &lt;rustc_errors::HandlerInner as core::ops::drop::Drop&gt;::drop\n             at ./compiler/rustc_errors/src/lib.rs:385:13\n   4: core::ptr::drop_in_place&lt;rustc_errors::HandlerInner&gt;\n             at ./library/core/src/ptr/mod.rs:192:1\n   5: core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;rustc_errors::HandlerInner&gt;&gt;\n             at ./library/core/src/ptr/mod.rs:192:1\n   6: core::ptr::drop_in_place&lt;core::cell::RefCell&lt;rustc_errors::HandlerInner&gt;&gt;\n             at ./library/core/src/ptr/mod.rs:192:1\n   7: core::ptr::drop_in_place&lt;rustc_data_structures::sync::Lock&lt;rustc_errors::HandlerInner&gt;&gt;\n             at ./library/core/src/ptr/mod.rs:192:1\n   8: core::ptr::drop_in_place&lt;rustc_errors::Handler&gt;\n             at ./library/core/src/ptr/mod.rs:192:1\n   9: core::ptr::drop_in_place&lt;rustc_session::parse::ParseSess&gt;\n             at ./library/core/src/ptr/mod.rs:192:1\n  10: core::ptr::drop_in_place&lt;rustc_session::session::Session&gt;\n             at ./library/core/src/ptr/mod.rs:192:1\n  11: &lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop\n             at ./library/alloc/src/rc.rs:1443:17\n  12: core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;rustc_session::session::Session&gt;&gt;\n             at ./library/core/src/ptr/mod.rs:192:1\n  13: core::ptr::drop_in_place&lt;rustc_interface::interface::Compiler&gt;\n             at ./library/core/src/ptr/mod.rs:192:1\n  14: core::mem::drop\n             at ./library/core/src/mem/mod.rs:896:24\n  15: rustc_interface::interface::create_compiler_and_run::{{closure}}::{{closure}}\n             at ./compiler/rustc_interface/src/interface.rs:213:60\n  16: rustc_data_structures::profiling::TimingGuard::run\n             at ./compiler/rustc_data_structures/src/profiling.rs:590:9\n  17: rustc_interface::interface::create_compiler_and_run::{{closure}}\n             at ./compiler/rustc_interface/src/interface.rs:213:9\n  18: rustc_span::with_source_map\n             at ./compiler/rustc_span/src/lib.rs:911:5\n  19: rustc_interface::interface::create_compiler_and_run\n             at ./compiler/rustc_interface/src/interface.rs:203:5\n  20: rustc_interface::interface::run_compiler::{{closure}}\n             at ./compiler/rustc_interface/src/interface.rs:225:12\n  21: rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals::{{closure}}::{{closure}}\n             at ./compiler/rustc_interface/src/util.rs:157:13\n  22: scoped_tls::ScopedKey&lt;T&gt;::set\n             at /home/waffle/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-1.0.0/src/lib.rs:137:9\n  23: rustc_span::create_session_globals_then\n             at ./compiler/rustc_span/src/lib.rs:105:5\n  24: rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals::{{closure}}\n             at ./compiler/rustc_interface/src/util.rs:155:9\n  25: rustc_interface::util::scoped_thread::{{closure}}\n             at ./compiler/rustc_interface/src/util.rs:130:24\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>",
        "id": 247457942,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627478753
    },
    {
        "content": "<p>oh, that's a weird place to die</p>",
        "id": 247458254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478896
    },
    {
        "content": "<p>did you use <code>-Ztreat-err-as-bug</code>?</p>",
        "id": 247458269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478907
    },
    {
        "content": "<p>well, I'm sorry to say I don't really know the problem just now</p>",
        "id": 247458455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627478996
    },
    {
        "content": "<p>I specified <code>RUSTC_ARGS=\"-Ztreat-err-as-bug\"</code>, is it a wrong way to specify args to rustc?</p>",
        "id": 247458457,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627478997
    },
    {
        "content": "<p>that doesn't sound right</p>",
        "id": 247458513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627479005
    },
    {
        "content": "<p>RUSTFLAGS=\"-Ztreat-err-as-bug\", I think?</p>",
        "id": 247458532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627479013
    },
    {
        "content": "<p>Maybe both work</p>",
        "id": 247458539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627479015
    },
    {
        "content": "<p>or just pass them on the command line</p>",
        "id": 247458557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627479024
    },
    {
        "content": "<p>which is what I normally do</p>",
        "id": 247458564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627479027
    },
    {
        "content": "<p>are you invoking through cargo?</p>",
        "id": 247458568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627479030
    },
    {
        "content": "<p>I'm invoking though <code>x.py</code></p>",
        "id": 247458600,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627479051
    },
    {
        "content": "<p>like <code>x.py test</code>?</p>",
        "id": 247458697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627479097
    },
    {
        "content": "<p>yes</p>",
        "id": 247458715,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627479105
    },
    {
        "content": "<p>I recommend just running rustc manually</p>",
        "id": 247458725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627479111
    },
    {
        "content": "<p>though you have to find the binary</p>",
        "id": 247459053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627479239
    },
    {
        "content": "<p>I have a rustup toolchain setup</p>",
        "id": 247459107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627479247
    },
    {
        "content": "<p>so I can do <code>rustc +stage1</code> etc</p>",
        "id": 247459126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627479256
    },
    {
        "content": "<p>in any case, the main reason I recommend this is that you get control over all the flags etc very easily</p>",
        "id": 247459154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627479269
    },
    {
        "content": "<p>anyway, I've got to go :( sorry we didn't make more progress. You can schedule another slot, or we can make look for another bug. I'm having a bit of a \"not sure this one is worth the effort\" feeling :)</p>",
        "id": 247459245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627479306
    },
    {
        "content": "<p>Sure, thanks! :)</p>",
        "id": 247459321,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627479341
    },
    {
        "content": "<p>I'm working on this bug because it actually is blocking me a little, so I guess I'll stick to it at least for now :P</p>",
        "id": 247459602,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627479468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Normalize.20associated.20types.20while.20unsizing.20.2375899/near/247457304\">said</a>:</p>\n<blockquote>\n<p>just to check, <span class=\"user-mention silent\" data-user-id=\"273349\">Waffle Lapkin</span>, <code>TraitPredicate(&lt;&lt;[T3; N] as Id&gt;::Assoc as std::marker::Unsize&lt;&lt;[T3] as Id&gt;::Assoc&gt;&gt;</code> -- is this what we were seeing before you added the normalization step?</p>\n</blockquote>\n<p>Yes, I believe so. Without added normalization I see this <code>TraitPredicate</code> being returned from <code>confirm_candidate</code>, but not solved.</p>",
        "id": 247460897,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627480046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Normalize.20associated.20types.20while.20unsizing.20.2375899/near/247458725\">said</a>:</p>\n<blockquote>\n<p>I recommend just running rustc manually</p>\n</blockquote>\n<p>That turned out to be a lot better actually, thanks!</p>",
        "id": 247462189,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627480695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Normalize.20associated.20types.20while.20unsizing.20.2375899/near/247457414\">said</a>:</p>\n<blockquote>\n<p>do you have a backtrace from the broken MIR error?</p>\n</blockquote>\n<p>Hopefully this one is right: <a href=\"https://gist.github.com/WaffleLapkin/c63ff8caca9a18add419152f088fe14a\">https://gist.github.com/WaffleLapkin/c63ff8caca9a18add419152f088fe14a</a></p>",
        "id": 247463306,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1627481180
    }
]