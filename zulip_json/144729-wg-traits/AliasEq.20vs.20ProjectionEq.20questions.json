[
    {
        "content": "<p>Hi there, <br>\nrecently I've been browsing through the source code and trying to connect the different pieces with the theory from the Chalk book to get a better understanding of the code base. I noticed that the comment about to_program_clauses <a href=\"https://docs.rs/chalk-solve/0.45.0/chalk_solve/clauses/program_clauses/trait.ToProgramClauses.html#method.to_program_clauses-1\">here</a> argues about AliasEq whereas the book calls the (as far as I understand) same concept a <a href=\"https://rust-lang.github.io/chalk/book/clauses/type_equality.html#projection-equality\">ProjectionEq</a>. The latter seems to be outdated.<br>\nBased on this supposed naming inconsistency I'd like to ask two things:</p>\n<ul>\n<li>Would it be sensible to simply rename the book parts to match the code?</li>\n<li>AliasEq clauses can also be generated from opaque types. Unfortunately, the corresponding section of the book is not yet finished. Is there a semantic difference between the AliasEq generated for opaque types and for associated types?</li>\n</ul>",
        "id": 220712796,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1608657346
    },
    {
        "content": "<blockquote>\n<p>The latter seems to be outdated.</p>\n</blockquote>\n<p>Correct</p>",
        "id": 220718554,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608660920
    },
    {
        "content": "<blockquote>\n<p>Would it be sensible to simply rename the book parts to match the code?</p>\n</blockquote>\n<p>Yep!</p>",
        "id": 220718575,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608660935
    },
    {
        "content": "<blockquote>\n<p>AliasEq clauses can also be generated from opaque types. Unfortunately, the corresponding section of the book is not yet finished. Is there a semantic difference between the AliasEq generated for opaque types and for associated types?</p>\n</blockquote>\n<p>So, this a a bit of Rust \"theory\", I guess. The answer here is \"we aren't sure\". The idea I think first was brought up by <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about maybe we can think of associated type aliases similarly to opaque types. The former would be <code>&lt;T as Trait&gt;::Associated = U</code> and the latter as <code>X = U</code></p>",
        "id": 220718817,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608661101
    },
    {
        "content": "<p>Sorry about the docs being out of date. If you find things confusing, missing, or out of date, feel free to file issues. I know we've had a lot of changes over the last year and I don't think we've given enough love to the book.</p>",
        "id": 220718883,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608661175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/AliasEq.20vs.20ProjectionEq.20questions/near/220718883\">said</a>:</p>\n<blockquote>\n<p>Sorry about the docs being out of date. If you find things confusing, missing, or out of date, feel free to file issues. I know we've had a lot of changes over the last year and I don't think we've given enough love to the book.</p>\n</blockquote>\n<p>I'd say it's okay,  in my opinion the book is still a very valuable source to learn about Chalk. That's also why I try to understand and improve it. I will create a PR for the renaming part (probably) tomorrow. Nonetheless, thanks for the explanation.</p>",
        "id": 220719519,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1608661606
    },
    {
        "content": "<p>As a small follow-up, which reference style is preferred for inter section references, referencing the source <code>md</code> file or the generated <code>html</code> file? <br>\nBoth styles are already used throughout the book, yet it seems that the latter occurs more often. In addition, both styles generate the same hyperlink but the first would allow for simpler testing in e.g. VS Code.</p>",
        "id": 220774660,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1608717078
    },
    {
        "content": "<p>I think we should probably prefer the first</p>",
        "id": 220804537,
        "sender_full_name": "Jack Huey",
        "timestamp": 1608741598
    }
]