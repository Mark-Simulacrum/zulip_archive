[
    {
        "content": "<p>Is it intended that the normalization under binders PR might stop things from ICEing but still not compile?<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=6120567cf7e6862f726d428e396180f5\">this code</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">out</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Out</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">out</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Out</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">d</span>: <span class=\"nc\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">D</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Out</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">out</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>gives an error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0631]: type mismatch in closure arguments\n  --&gt; src/main.rs:21:5\n   |\n21 |     call(5, |_| ());\n   |     ^^^^    ------ found signature of `fn(u8) -&gt; _`\n   |     |\n   |     expected signature of `for&lt;&#39;a&gt; fn(&lt;u8 as Trait&lt;&#39;a&gt;&gt;::Out) -&gt; _`\n   |\n</code></pre></div>\n<p>instead of the <code>OutputTypeParameterMismatch</code> that it used to give despite the fact that <code>for&lt;'a&gt; &lt;u8 as Trait&lt;'a&gt;&gt;::Out == u8</code></p>",
        "id": 258625309,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1634854301
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/issues/88441\">#88441</a></p>",
        "id": 258625517,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634854410
    },
    {
        "content": "<p>I think that's the PR</p>",
        "id": 258625534,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634854419
    },
    {
        "content": "<p>hmm okay</p>",
        "id": 258625559,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1634854433
    },
    {
        "content": "<p>It is</p>",
        "id": 258625563,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634854436
    },
    {
        "content": "<p>is there a bunch of \"small\" stuff around to make things \"just work<span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span>\"</p>",
        "id": 258625628,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1634854448
    },
    {
        "content": "<p>I was running into other weirdness with hrtb + assoc type bounds not to do with closures <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 258625659,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1634854471
    },
    {
        "content": "<p>There are a few cases where there's stuff to do</p>",
        "id": 258625667,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634854478
    },
    {
        "content": "<p>I have a list of issue numbers</p>",
        "id": 258625682,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634854487
    },
    {
        "content": "<p>On mobile, so can't link</p>",
        "id": 258625698,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634854497
    },
    {
        "content": "<p>But they're there</p>",
        "id": 258625714,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634854503
    },
    {
        "content": "<p>hmm alright. do you know if the following is fixed by some of that stuff or if it's a separate issue?:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"n\">Assoc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span>::<span class=\"n\">Assoc</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">calls</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">has_bound</span>::<span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">((</span><span class=\"mi\">1_</span><span class=\"k\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1_</span><span class=\"k\">u8</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ no error</span>\n<span class=\"w\">    </span><span class=\"n\">has_bound</span><span class=\"p\">((</span><span class=\"mi\">1_</span><span class=\"k\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1_</span><span class=\"k\">u8</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ error: the trait bound `for&lt;'a&gt; &lt;_ as Bar&lt;'a&gt;&gt;::Assoc: Foo` is not satisfied</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">has_bound</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Assoc</span>: <span class=\"nc\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258625783,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1634854541
    },
    {
        "content": "<p>The only PR open that will fix anything is <a href=\"https://github.com/rust-lang/rust/issues/88441\">#88441</a></p>",
        "id": 258625936,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634854614
    },
    {
        "content": "<p>Everything else is more difficult and basically needs lazy norm</p>",
        "id": 258625982,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634854643
    },
    {
        "content": "<p>darn okay <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 258625997,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1634854651
    },
    {
        "content": "<p>are we at all close to lazy norm at this point or is it still far off</p>",
        "id": 258626082,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1634854693
    },
    {
        "content": "<p>In theory it's a while off. But idk someone might be able to get it to work with effort</p>",
        "id": 258626191,
        "sender_full_name": "Jack Huey",
        "timestamp": 1634854755
    },
    {
        "content": "<p>Is there a hackmd or writeup anywhere detailing exactly what lazy norm is vs how rustc currently works?</p>",
        "id": 258718966,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1634912727
    },
    {
        "content": "<p><a href=\"#narrow/stream/144729-wg-traits/topic/Rustc.20lazy.20norm\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/Rustc.20lazy.20norm</a> contains a write-up on an attempt to implement lazy norm and a link to a branch with the implementation.</p>",
        "id": 258719409,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634912923
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/chalk/book/clauses/type_equality.html\">https://rust-lang.github.io/chalk/book/clauses/type_equality.html</a> gives an overview for some context</p>",
        "id": 258719865,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634913119
    }
]