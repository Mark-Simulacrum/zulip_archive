[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>  -- are you still looking for a task to take on?</p>",
        "id": 188236674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581707731
    },
    {
        "content": "<p>I got one for ya :)</p>",
        "id": 188236677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581707736
    },
    {
        "content": "<p>On this topic, should I create a chalk issue or something?</p>",
        "id": 188236988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581707947
    },
    {
        "content": "<p>With some mentoring notes?</p>",
        "id": 188236993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581707952
    },
    {
        "content": "<p>I guess I will</p>",
        "id": 188236995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581707955
    },
    {
        "content": "<p>oh you literally beat me to it, lol</p>",
        "id": 188237034,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581707992
    },
    {
        "content": "<p>That's probably easiest</p>",
        "id": 188237036,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581707995
    },
    {
        "content": "<p>give me a few minutes</p>",
        "id": 188237108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708020
    },
    {
        "content": "<p>A chalk issue with mentoring notes would be best, yes, ty <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 188237112,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581708022
    },
    {
        "content": "<p>Ah, this raises an important question :)</p>",
        "id": 188237613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708298
    },
    {
        "content": "<p>Right now, we use the name <code>TypeFamily</code></p>",
        "id": 188237626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708305
    },
    {
        "content": "<p>We've been talking about renaming that to <code>TypeInterner</code> or maybe <code>TypeContext</code></p>",
        "id": 188237653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708323
    },
    {
        "content": "<p>The task here is going to involve threading around local variables, so we go from</p>\n<div class=\"codehilite\"><pre><span></span>fn foo&lt;TF: TypeFamily&gt;()\n</pre></div>\n\n\n<p>to </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">TF</span>: <span class=\"nc\">TypeFamily</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">tf</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">TF</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188237699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708352
    },
    {
        "content": "<p>it seems good to decide what the name of this local variable should be</p>",
        "id": 188237712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708362
    },
    {
        "content": "<p><code>tf</code> .. doesn't strike me as ideal</p>",
        "id": 188237754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708367
    },
    {
        "content": "<p><code>interner: &amp;TypeInterner</code> is maybe good, if a bit long</p>",
        "id": 188237770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708373
    },
    {
        "content": "<p><code>tcx: &amp;TypeContext</code> is very rustc-like, but <code>tcx</code> has been confusing there to new folks for some time</p>",
        "id": 188237786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708381
    },
    {
        "content": "<p>either that or passing the context as an argument into the functions</p>",
        "id": 188237825,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581708410
    },
    {
        "content": "<p>I don't get it :)</p>",
        "id": 188237861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708429
    },
    {
        "content": "<p>that is, that sounds like what I wrote</p>",
        "id": 188237876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708438
    },
    {
        "content": "<p>oh, one sec</p>",
        "id": 188237894,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581708449
    },
    {
        "content": "<p>BTW, filed <a href=\"https://github.com/rust-lang-nursery/chalk/issues/328\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/328\">chalk#328</a></p>",
        "id": 188237961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708483
    },
    {
        "content": "<p>I mean, so instead of <code>intern_ty(ty: TyData&lt;Self&gt;)</code> it could be instead <code>intern_ty(ctx: Context, ty: TyData&lt;Self&gt;)</code></p>",
        "id": 188238021,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581708531
    },
    {
        "content": "<p>and so on</p>",
        "id": 188238026,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581708536
    },
    {
        "content": "<p>I expected</p>",
        "id": 188238044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708547
    },
    {
        "content": "<p><code>fn intern_ty(&amp;self, ty: TyData&lt;Self&gt;) -&gt; Ty&lt;Self&gt;</code></p>",
        "id": 188238060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708558
    },
    {
        "content": "<p>but you could do</p>",
        "id": 188238069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708564
    },
    {
        "content": "<p><code>fn intern_ty(cx: Self::Context, ty: TyData&lt;Self&gt;) -&gt; Ty&lt;Self&gt;</code></p>",
        "id": 188238083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708575
    },
    {
        "content": "<p>which is perhaps what you mean</p>",
        "id": 188238092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708578
    },
    {
        "content": "<blockquote>\n<p>BTW, filed <a href=\"https://github.com/rust-lang-nursery/chalk/issues/328\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/328\">chalk#328</a></p>\n</blockquote>\n<p>I intentionally left this quite minimal while we hammer out the destination</p>",
        "id": 188238113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708595
    },
    {
        "content": "<p>I don't have a strong opinion about <code>&amp;self</code> vs <code>Self::Context</code> except that <code>&amp;self</code> feels slightly simpler</p>",
        "id": 188238189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708621
    },
    {
        "content": "<p>in particular</p>",
        "id": 188238194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708626
    },
    {
        "content": "<p>if you have <code>fn foo&lt;TF&gt;(interner: &amp;TF, ...)</code>, and you call it like <code>foo(interner, ...)</code></p>",
        "id": 188238204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708646
    },
    {
        "content": "<p>then the value of <code>TF</code> can be inferred from the argument</p>",
        "id": 188238213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708651
    },
    {
        "content": "<p>in contrast, today (and with the associated type design), you might sometimes need to do <code>foo::&lt;TF&gt;(...)</code> to explicitly specify <code>TF</code></p>",
        "id": 188238241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708671
    },
    {
        "content": "<p>since if you have <code>fn foo&lt;TF&gt;(interner: &amp;TF::Interner, ..)</code>  then the type of the argument doesn't really tell you what <code>TF</code> is, only what its interner is</p>",
        "id": 188238283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708696
    },
    {
        "content": "<p>I don't know which way would be better</p>",
        "id": 188238377,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581708732
    },
    {
        "content": "<p>I don't know for sure either, I'd be inclined to start with <code>&amp;self</code> and see if we hit some problems</p>",
        "id": 188238712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708949
    },
    {
        "content": "<p>(for the reasons I gave)</p>",
        "id": 188238724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581708961
    },
    {
        "content": "<p>Either way, I actually think this is <em>probably</em> a blocker for integrating chalk-solve/chalk-ir into rustc</p>",
        "id": 188238834,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581709023
    },
    {
        "content": "<p>Yes, I expect so</p>",
        "id": 188238874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709060
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/328#issuecomment-586443051\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/328#issuecomment-586443051\">see comment</a></p>",
        "id": 188238972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709118
    },
    {
        "content": "<p>I'm trying to decide if there is some \"trick\" to going about this. I think I would probably just add the <code>&amp;self</code> and start running <code>cargo check --all</code></p>",
        "id": 188239004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709152
    },
    {
        "content": "<p>I'm wondering if this is a good \"starting issue\" or not. It's going to be some work, that's for sure.</p>",
        "id": 188239020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709162
    },
    {
        "content": "<p>OTOH, it's the kind of bug where you just get it to compile, and things should \"just work\"</p>",
        "id": 188239056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709194
    },
    {
        "content": "<p>there will be a few things that need to be refactored, e.g. I think we have some <code>FromIterator</code> impls that invoke <code>TF::intern</code> and those won't work</p>",
        "id": 188239117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709210
    },
    {
        "content": "<p>I mean, <code>self.data()</code> is called in a bunch of places in debug, to start</p>",
        "id": 188239125,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581709215
    },
    {
        "content": "<p>note that I did not modify <code>data</code></p>",
        "id": 188239147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709226
    },
    {
        "content": "<p>(yet) :)</p>",
        "id": 188239151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709231
    },
    {
        "content": "<p>but yeah, you're right, we should discus how we'll solve that</p>",
        "id": 188239166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709239
    },
    {
        "content": "<p>in rustc we use thread-local data to get the tcx</p>",
        "id": 188239180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709246
    },
    {
        "content": "<p>debug already uses tls in some places</p>",
        "id": 188239242,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581709277
    },
    {
        "content": "<p>yes</p>",
        "id": 188239255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709283
    },
    {
        "content": "<p>in slightly different way</p>",
        "id": 188239260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709286
    },
    {
        "content": "<p>so that's not too strange</p>",
        "id": 188239261,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581709287
    },
    {
        "content": "<p>but it could proabbly be adapted to this purpose</p>",
        "id": 188239272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709294
    },
    {
        "content": "<p>it'd just become more imporant than ever :)</p>",
        "id": 188239279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709299
    },
    {
        "content": "<p>i.e., right now you get \"kinda usable\" debug output without good TLS</p>",
        "id": 188239293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709307
    },
    {
        "content": "<p>but it would become quite less</p>",
        "id": 188239298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709310
    },
    {
        "content": "<p>okay, its good to know this is a blocker for other stuff on integration</p>",
        "id": 188239315,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581709316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I'm going to spend a bit of time enumerating a coupel of other concrete steps, but I definitely think this is one we should try to do this sprint, whether it be you or someone else (maybe me...)</p>",
        "id": 188239383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709341
    },
    {
        "content": "<p>okay</p>",
        "id": 188239404,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581709351
    },
    {
        "content": "<p>I'm definitely gonna try to do it</p>",
        "id": 188239417,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581709358
    },
    {
        "content": "<p>ok great!</p>",
        "id": 188239425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709361
    },
    {
        "content": "<p>ill let you know quickly if I feel like im spining my wheels though</p>",
        "id": 188239436,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581709368
    },
    {
        "content": "<p>Or (and I don't know how feasible this is), but don't have <code>Ty</code> (and others) implement <code>Debug</code>, only <code>TyData</code></p>",
        "id": 188239449,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581709373
    },
    {
        "content": "<p>one thing we can do if you want</p>",
        "id": 188239453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188239449\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188239449\">said</a>:</p>\n<blockquote>\n<p>Or (and I don't know how feasible this is), but don't have <code>Ty</code> (and others) implement <code>Debug</code>, only <code>TyData</code></p>\n</blockquote>\n<p>maybe we should spin the \"debug\" conversation to a side topic</p>",
        "id": 188239490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188239453\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188239453\">said</a>:</p>\n<blockquote>\n<p>one thing we can do if you want</p>\n</blockquote>\n<p>I was going to say, <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>, if you want we could try a \"pair session\" to get started</p>",
        "id": 188239511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709406
    },
    {
        "content": "<p>sometimes that's useful</p>",
        "id": 188239517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709410
    },
    {
        "content": "<p>maybe, but I think it is slightly relevant</p>",
        "id": 188239531,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581709417
    },
    {
        "content": "<p>but we can hold for another time :)</p>",
        "id": 188239562,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581709435
    },
    {
        "content": "<p>they are related, but (a) I don't think this step depends on it and (b) we have to do this change, it's not like it's optional</p>",
        "id": 188239572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709441
    },
    {
        "content": "<p>whats your availability look like <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 188239635,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581709463
    },
    {
        "content": "<p>this afternoon I'm available; next week would be harder. I've blocked out mondays/fridays in general though</p>",
        "id": 188239658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709480
    },
    {
        "content": "<p>okay</p>",
        "id": 188239667,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581709489
    },
    {
        "content": "<p>next week I'm on vacation mon/fri is part of the problem :) but I'll be around tue-thu in the mornings (but I think you are on west coast US?)</p>",
        "id": 188239695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709506
    },
    {
        "content": "<p>im at work until 5pm pst so I cant do any voice chat things until then</p>",
        "id": 188239717,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581709521
    },
    {
        "content": "<p>yea</p>",
        "id": 188239723,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581709531
    },
    {
        "content": "<p>west coast</p>",
        "id": 188239726,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581709533
    },
    {
        "content": "<p>tues and thurs are good for me because I'm wfh and often not busy</p>",
        "id": 188239746,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581709542
    },
    {
        "content": "<p>I'm gonna attempt to start on this without the pair programming but ill msg you this afternoon if I feel like it would help</p>",
        "id": 188239806,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581709565
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 188239811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581709570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188237653\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188237653\">said</a>:</p>\n<blockquote>\n<p>We've been talking about renaming that to <code>TypeInterner</code> or maybe <code>TypeContext</code></p>\n</blockquote>\n<p>Fwiw, interner gets the meaning across best for me, and is the only one that I think makes it obvious what its doing, so I vote for this over tf or tcx, even if <code>interner</code> is longer to write, its not that long &gt;_&gt;</p>",
        "id": 188241457,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581710726
    },
    {
        "content": "<p>also</p>",
        "id": 188241681,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581710885
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">TF</span>: <span class=\"nc\">TypeFamily</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">TF</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">data</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">CastTo</span><span class=\"o\">&lt;</span><span class=\"n\">TyData</span><span class=\"o\">&lt;</span><span class=\"n\">TF</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">interned</span>: <span class=\"nc\">TF</span>::<span class=\"n\">intern_ty</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">cast</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188241685,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581710890
    },
    {
        "content": "<p>presumably this requires I construct an instance of the TF, should I add a <code>TF: Default</code> bound here?</p>",
        "id": 188241701,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581710915
    },
    {
        "content": "<p>or is this gonna pass in a TF as self also</p>",
        "id": 188241718,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581710943
    },
    {
        "content": "<p>or not self, just an arg</p>",
        "id": 188241724,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581710948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> you want to pass in an instance of <code>TF</code></p>",
        "id": 188241835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711023
    },
    {
        "content": "<p>at least in the chalk-ir code, you will <em>never</em> create one, always be given it</p>",
        "id": 188241848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711033
    },
    {
        "content": "<p>okay</p>",
        "id": 188241860,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711046
    },
    {
        "content": "<p>this is precisely the kind of pattern where we cheated a bit out of convenience :)</p>",
        "id": 188241865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711048
    },
    {
        "content": "<p>feel free, if you think it would be nicer, to experiment with changing patterns here and there</p>",
        "id": 188241889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711065
    },
    {
        "content": "<p>e.g., to make <code>interner.new_ty(data)</code> instead of <code>Ty::new(interner, data)</code> or something</p>",
        "id": 188241900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711077
    },
    {
        "content": "<p>although that particular thing doesn't look better to me</p>",
        "id": 188241903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711082
    },
    {
        "content": "<p>i would rather get more familiar with the codebase before I try to make decisions about what patterns to use</p>",
        "id": 188241908,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711085
    },
    {
        "content": "<p>yeah</p>",
        "id": 188241915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711092
    },
    {
        "content": "<p>im going to go ahead and rename TF to interner everywhere as I'm moving along</p>",
        "id": 188241930,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711109
    },
    {
        "content": "<p>the main thing I'm concerned about is I <em>think</em> there are some cases where we use <code>FromIterator</code> and <code>collect</code> and that will <em>have</em> to be rewritten</p>",
        "id": 188241942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711118
    },
    {
        "content": "<p>what should the parameter for generics be</p>",
        "id": 188241944,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711121
    },
    {
        "content": "<p>just <code>I</code>?</p>",
        "id": 188241982,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188241930\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188241930\">said</a>:</p>\n<blockquote>\n<p>im going to go ahead and rename TF to interner everywhere as I'm moving along</p>\n</blockquote>\n<p>maybe we should just do this as a first PR</p>",
        "id": 188241986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711127
    },
    {
        "content": "<p>before anything else</p>",
        "id": 188241991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711132
    },
    {
        "content": "<p>okay</p>",
        "id": 188241992,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711134
    },
    {
        "content": "<p>I would definitely recommend that</p>",
        "id": 188241993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711135
    },
    {
        "content": "<p>that sounds good</p>",
        "id": 188241995,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711136
    },
    {
        "content": "<p>okay</p>",
        "id": 188241997,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711138
    },
    {
        "content": "<p>otherwise you'll get trippe up in rebasing hell or something</p>",
        "id": 188242005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711147
    },
    {
        "content": "<p>as far as the initials..</p>",
        "id": 188242019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711166
    },
    {
        "content": "<p>should it be <code>Interner</code> or <code>TypeInterner</code></p>",
        "id": 188242030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711174
    },
    {
        "content": "<p>I guess it interns more than types</p>",
        "id": 188242033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711176
    },
    {
        "content": "<p>maybe <code>I: Interner</code> is kind of nice, actually</p>",
        "id": 188242040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711185
    },
    {
        "content": "<p>simple</p>",
        "id": 188242046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711188
    },
    {
        "content": "<p>or actually</p>",
        "id": 188242058,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711199
    },
    {
        "content": "<p>one thing is that there is also <code>TargetTypeFamily</code>, but <code>TargetInterner</code> is ok</p>",
        "id": 188242061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711201
    },
    {
        "content": "<p><code>TI</code>?</p>",
        "id": 188242064,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711202
    },
    {
        "content": "<p>okay</p>",
        "id": 188242082,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711213
    },
    {
        "content": "<p>i</p>",
        "id": 188242084,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711214
    },
    {
        "content": "<p>I and Interner</p>",
        "id": 188242088,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711216
    },
    {
        "content": "<p>I could go either way but I'm kind of leaning towards \"less is more\"</p>",
        "id": 188242108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711234
    },
    {
        "content": "<p>We should avoid TI for Interner, because that gets confusing for TargetInterner (TTI?)</p>",
        "id": 188242189,
        "sender_full_name": "detrumi",
        "timestamp": 1581711279
    },
    {
        "content": "<p>its colliding with a few I: IntoIterator calls</p>",
        "id": 188242237,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711332
    },
    {
        "content": "<p>i guess ill make those II</p>",
        "id": 188242255,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711351
    },
    {
        "content": "<p>this is fine</p>",
        "id": 188242260,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188242189\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188242189\">said</a>:</p>\n<blockquote>\n<p>We should avoid TI for Interner, because that gets confusing for TargetInterner (TTI?)</p>\n</blockquote>\n<p>I think it should be <code>I: Interner</code> or <code>TI: TypeInterner</code></p>",
        "id": 188242315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581711386
    },
    {
        "content": "<p>i went with I: Interner</p>",
        "id": 188242362,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581711440
    },
    {
        "content": "<p>this is a very large change...</p>",
        "id": 188243216,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581712052
    },
    {
        "content": "<p>yeah it's gonna be a pain</p>",
        "id": 188243237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712066
    },
    {
        "content": "<p>/me worried that every existing pr is gonna explode</p>",
        "id": 188243250,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581712071
    },
    {
        "content": "<p>this is why I'm wondering if I should find you something smaller to start with :)</p>",
        "id": 188243255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712074
    },
    {
        "content": "<p>oh well you're jus doing the rename now</p>",
        "id": 188243259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712078
    },
    {
        "content": "<p>that's not so bad</p>",
        "id": 188243260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712080
    },
    {
        "content": "<p>yea</p>",
        "id": 188243263,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581712081
    },
    {
        "content": "<p>:P</p>",
        "id": 188243264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712081
    },
    {
        "content": "<p>just wait till you see the PR</p>",
        "id": 188243317,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581712088
    },
    {
        "content": "<p>it'll touch a lot of files ...</p>",
        "id": 188243320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712090
    },
    {
        "content": "<p>i may have gone overboard</p>",
        "id": 188243324,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581712092
    },
    {
        "content": "<p>Nah it'll be fine, all open PRs just have to rebase</p>",
        "id": 188243356,
        "sender_full_name": "detrumi",
        "timestamp": 1581712131
    },
    {
        "content": "<p>it's fine. you'll just RUIN EVERYONE'S WORK</p>",
        "id": 188243387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712150
    },
    {
        "content": "<p>:P</p>",
        "id": 188243400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712158
    },
    {
        "content": "<p>(and we'll be grateful for it)</p>",
        "id": 188243414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581712163
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/mtB8LfnS5N3SHrFa21ZdTFVz/Screenshot-from-2020-02-14-12-35-23.png\" target=\"_blank\" title=\"Screenshot-from-2020-02-14-12-35-23.png\">Screenshot-from-2020-02-14-12-35-23.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/mtB8LfnS5N3SHrFa21ZdTFVz/Screenshot-from-2020-02-14-12-35-23.png\" target=\"_blank\" title=\"Screenshot-from-2020-02-14-12-35-23.png\"><img src=\"/user_uploads/4715/mtB8LfnS5N3SHrFa21ZdTFVz/Screenshot-from-2020-02-14-12-35-23.png\"></a></div>",
        "id": 188243949,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581712541
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/329/files\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/329/files\">https://github.com/rust-lang/chalk/pull/329/files</a></p>",
        "id": 188243957,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581712548
    },
    {
        "content": "<p>welp</p>",
        "id": 188244020,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581712577
    },
    {
        "content": "<p>i did the easy part</p>",
        "id": 188244024,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581712580
    },
    {
        "content": "<p>yall have fun with the merge conflicts</p>",
        "id": 188244037,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581712585
    },
    {
        "content": "<p>looool</p>",
        "id": 188244039,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581712586
    },
    {
        "content": "<p>You missed some <code>_TTF</code>'s</p>",
        "id": 188244134,
        "sender_full_name": "detrumi",
        "timestamp": 1581712672
    },
    {
        "content": "<p>aah, tyty</p>",
        "id": 188244191,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581712694
    },
    {
        "content": "<p>fixed</p>",
        "id": 188244274,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581712763
    },
    {
        "content": "<p>so I can just slap interner variables into every fn here but I'm not sure if that should be done so I'm gonna put function signatures that I'm adding interner to here for double checking</p>",
        "id": 188246932,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581714497
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TyData</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">intern</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">interner</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">I</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Ty</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">interner</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188246949,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581714509
    },
    {
        "content": "<p>this leaked into this, but im not sure i should be adding interner to the fn sig here on this <code>Folder</code> trait</p>",
        "id": 188247045,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581714581
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fold_free_var_ty</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">depth</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">binders</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fallible</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">TI</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">forbid_free_vars</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;unexpected free variable with depth `{:?}`&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">depth</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">TyData</span>::<span class=\"o\">&lt;</span><span class=\"n\">TI</span><span class=\"o\">&gt;</span>::<span class=\"n\">BoundVar</span><span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">binders</span><span class=\"p\">).</span><span class=\"n\">intern</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188247049,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581714584
    },
    {
        "content": "<p>going ahead with adding interner to both, and I've decided to prefer having <code>interner</code> before other args other than self</p>",
        "id": 188247303,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581714687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> for folders</p>",
        "id": 188248412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581715465
    },
    {
        "content": "<p>I think that the <code>Folder</code> needs a <code>fn interner(&amp;self) -&gt; &amp;I</code> function</p>",
        "id": 188248434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581715481
    },
    {
        "content": "<p>and probably a <code>fn target_interner(&amp;self) -&gt; &amp;TI</code> function as well</p>",
        "id": 188248451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581715495
    },
    {
        "content": "<p>I guess, in your PR, probably only the latter</p>",
        "id": 188248461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581715504
    },
    {
        "content": "<p>aaaah</p>",
        "id": 188248474,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581715514
    },
    {
        "content": "<p>that way, the <code>fold</code> methods can use <code>folder.target_interner()</code></p>",
        "id": 188248477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581715517
    },
    {
        "content": "<p>yea i'd just been doing</p>",
        "id": 188248479,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581715518
    },
    {
        "content": "<p>interner: &amp;TI, everywhere</p>",
        "id": 188248488,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581715527
    },
    {
        "content": "<p>and sometimes it wasnt obvious based on the usage</p>",
        "id": 188248503,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581715534
    },
    {
        "content": "<p>which one would be needed</p>",
        "id": 188248506,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581715537
    },
    {
        "content": "<p>sorry, should have had Zulip on my screen</p>",
        "id": 188248513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581715540
    },
    {
        "content": "<p>its okay</p>",
        "id": 188248529,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581715550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what about ToParameter?</p>",
        "id": 188249681,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581716423
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ToParameter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Utility for converting a list of all the binders into scope</span>\n<span class=\"w\">    </span><span class=\"sd\">/// into references to those binders. Simply pair the binders with</span>\n<span class=\"w\">    </span><span class=\"sd\">/// the indices, and invoke `to_parameter()` on the `(binder,</span>\n<span class=\"w\">    </span><span class=\"sd\">/// index)` pair. The result will be a reference to a bound</span>\n<span class=\"w\">    </span><span class=\"sd\">/// variable of appropriate kind at the corresponding index.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">to_parameter</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Parameter</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ToParameter</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">ParameterKind</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">to_parameter</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Parameter</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">binder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ParameterKind</span>::<span class=\"n\">Lifetime</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">LifetimeData</span>::<span class=\"n\">BoundVar</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">).</span><span class=\"n\">intern</span><span class=\"p\">().</span><span class=\"n\">cast</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ParameterKind</span>::<span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">TyData</span>::<span class=\"n\">BoundVar</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">).</span><span class=\"n\">intern</span><span class=\"p\">().</span><span class=\"n\">cast</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188249685,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581716425
    },
    {
        "content": "<p>ah, that :)</p>",
        "id": 188249689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581716436
    },
    {
        "content": "<p>it neets an interner for BoundVar(index).intern(&lt;interner&gt;)</p>",
        "id": 188249693,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581716439
    },
    {
        "content": "<p>yeah</p>",
        "id": 188249697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581716444
    },
    {
        "content": "<p>it should take a <code>&amp;I</code> I think</p>",
        "id": 188249701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581716449
    },
    {
        "content": "<p>as an arg into to_parameter?</p>",
        "id": 188249711,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581716457
    },
    {
        "content": "<p>right</p>",
        "id": 188249720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581716464
    },
    {
        "content": "<p>ack</p>",
        "id": 188249721,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581716466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> same thing here?</p>",
        "id": 188249747,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581716504
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">AssociatedTyDatum</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Returns the associated ty&#39;s bounds applied to the projection type, e.g.:</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// ```notrust</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Implemented(&lt;?0 as Foo&gt;::Item&lt;?1&gt;: Sized)</span>\n<span class=\"w\">    </span><span class=\"sd\">/// ```</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// these quantified where clauses are in the scope of the</span>\n<span class=\"w\">    </span><span class=\"sd\">/// `binders` field.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bounds_on_self</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">QuantifiedWhereClause</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188249751,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581716507
    },
    {
        "content": "<p>this uses to_parameters</p>",
        "id": 188249758,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581716516
    },
    {
        "content": "<p>and intern directly</p>",
        "id": 188249762,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581716519
    },
    {
        "content": "<p>both of which need an interner</p>",
        "id": 188249798,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581716523
    },
    {
        "content": "<p>yeah</p>",
        "id": 188249909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581716637
    },
    {
        "content": "<p>theres gonna be a lot of these repeat confirmations <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sorry</p>",
        "id": 188250340,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581716958
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">push_auto_trait_impls</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ClauseBuilder</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">auto_trait_id</span>: <span class=\"nc\">TraitId</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">struct_id</span>: <span class=\"nc\">StructId</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188250347,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581716962
    },
    {
        "content": "<p>add arg?</p>",
        "id": 188250352,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581716970
    },
    {
        "content": "<p>this is a free fn in <a href=\"http://clauses.rs\" target=\"_blank\" title=\"http://clauses.rs\">clauses.rs</a> in chalk-solve</p>",
        "id": 188250366,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581716984
    },
    {
        "content": "<p>hmm</p>",
        "id": 188250444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717010
    },
    {
        "content": "<p>probably yes :)</p>",
        "id": 188250457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717018
    },
    {
        "content": "<p>lol okay</p>",
        "id": 188250462,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717022
    },
    {
        "content": "<p>though I wonder if <code>builder</code> should store a <code>&amp;I</code></p>",
        "id": 188250467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717027
    },
    {
        "content": "<p>wait, <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>, did you complete the rename?</p>",
        "id": 188250498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717057
    },
    {
        "content": "<p>I guess you must've :)</p>",
        "id": 188250503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717060
    },
    {
        "content": "<p>yes</p>",
        "id": 188250504,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717060
    },
    {
        "content": "<p>the PR is waiting for approval</p>",
        "id": 188250510,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717065
    },
    {
        "content": "<p>(you could open a PR for that..if you didn't already)</p>",
        "id": 188250511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717065
    },
    {
        "content": "<p>im working on top of it</p>",
        "id": 188250515,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717067
    },
    {
        "content": "<p>oh, ok</p>",
        "id": 188250517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717069
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/329\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/329\">https://github.com/rust-lang/chalk/pull/329</a></p>",
        "id": 188250533,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717083
    },
    {
        "content": "<p>I'm merging that;)</p>",
        "id": 188250570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717120
    },
    {
        "content": "<p>awesome :)</p>",
        "id": 188250611,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717125
    },
    {
        "content": "<p>(I did page down throgh it, looked good to me)</p>",
        "id": 188250617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717130
    },
    {
        "content": "<p>and I think <code>Interner</code> was the right choice, it reads really naturally now</p>",
        "id": 188250642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717151
    },
    {
        "content": "<p><span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 188250659,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717167
    },
    {
        "content": "<p>im going to go ahead and add an interner fn to ClauseBuilder</p>",
        "id": 188250678,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717180
    },
    {
        "content": "<p>because I think thats easy to undo later</p>",
        "id": 188250686,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717184
    },
    {
        "content": "<p>yeah I suspect that is right</p>",
        "id": 188250687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717186
    },
    {
        "content": "<p>and it lets me avoid a ton of work by just putting <code>unimplemented()</code> in the initial def</p>",
        "id": 188250708,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717202
    },
    {
        "content": "<p>okay what about CoherenceSolver</p>",
        "id": 188250913,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717341
    },
    {
        "content": "<p>doesn't appear I have a ClauseBuilder available here</p>",
        "id": 188250920,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717348
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">disjoint</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ImplDatum</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ImplDatum</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>needs access to an interner for its call to <code>compatible</code></p>",
        "id": 188250996,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717377
    },
    {
        "content": "<p>gonna just go with the same approach as ClauseBuilder for same reason</p>",
        "id": 188251082,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717445
    },
    {
        "content": "<p>actually this only uses the interner in one place i think?</p>",
        "id": 188251099,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717462
    },
    {
        "content": "<p>hmm so</p>",
        "id": 188251101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717463
    },
    {
        "content": "<p>I am thinking that the RustIrDatabase trait</p>",
        "id": 188251107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717469
    },
    {
        "content": "<p>should maybe have a <code>fn interner(&amp;self) -&gt; &amp;I</code> method</p>",
        "id": 188251117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717475
    },
    {
        "content": "<p>okay</p>",
        "id": 188251162,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717484
    },
    {
        "content": "<p>that seems right anyway</p>",
        "id": 188251200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717519
    },
    {
        "content": "<p>to be honest, we could even want <code>trait RustIrDatabase: Interner</code></p>",
        "id": 188251223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717535
    },
    {
        "content": "<p>but let's not do that now</p>",
        "id": 188251226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717538
    },
    {
        "content": "<p>ack</p>",
        "id": 188251268,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717572
    },
    {
        "content": "<p>what about InferenceTable</p>",
        "id": 188251280,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717576
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">InferenceTable</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">unify</span>: <span class=\"nc\">ena</span>::<span class=\"n\">unify</span>::<span class=\"n\">InPlaceUnificationTable</span><span class=\"o\">&lt;</span><span class=\"n\">EnaVariable</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">vars</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">EnaVariable</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">max_universe</span>: <span class=\"nc\">UniverseIndex</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188251288,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717584
    },
    {
        "content": "<p>needs one for </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">instantiate_binders_universally</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">arg</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">IntoBindersAndValue</span><span class=\"o\">&lt;</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span>::<span class=\"nb\">Result</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">T</span>: <span class=\"nc\">Fold</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188251343,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717606
    },
    {
        "content": "<p>Hmm</p>",
        "id": 188251378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717634
    },
    {
        "content": "<p>you know, side note</p>",
        "id": 188251390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717642
    },
    {
        "content": "<p>we've been passing <code>&amp;I</code> everywhere</p>",
        "id": 188251406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717655
    },
    {
        "content": "<p>but we could've made it <code>Interner: Copy</code>..no, I think <code>&amp;I</code> is probably right</p>",
        "id": 188251424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717674
    },
    {
        "content": "<p>I think I would not store it in <code>InferenceTable</code></p>",
        "id": 188251446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717691
    },
    {
        "content": "<p>:3</p>",
        "id": 188251449,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717691
    },
    {
        "content": "<p>so just take as an arg for instantiate...</p>",
        "id": 188251457,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717701
    },
    {
        "content": "<p>I'm wondering if we will regret that</p>",
        "id": 188251460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717703
    },
    {
        "content": "<p>but let's try it</p>",
        "id": 188251462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717706
    },
    {
        "content": "<p>okay</p>",
        "id": 188251464,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717708
    },
    {
        "content": "<p>im going to git add rn</p>",
        "id": 188251472,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717712
    },
    {
        "content": "<p>so its easy to undo</p>",
        "id": 188251478,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717715
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">GoalExt</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Returns a canonical goal in which the outermost `exists&lt;&gt;` and</span>\n<span class=\"w\">    </span><span class=\"sd\">/// `forall&lt;&gt;` quantifiers (as well as implications) have been</span>\n<span class=\"w\">    </span><span class=\"sd\">/// &quot;peeled&quot; and are converted into free universal or existential</span>\n<span class=\"w\">    </span><span class=\"sd\">/// variables. Assumes that this goal is a &quot;closed goal&quot; which</span>\n<span class=\"w\">    </span><span class=\"sd\">/// does not -- at present -- contain any variables. Useful for</span>\n<span class=\"w\">    </span><span class=\"sd\">/// REPLs and tests but not much else.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_peeled_goal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">UCanonical</span><span class=\"o\">&lt;</span><span class=\"n\">InEnvironment</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188251591,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717807
    },
    {
        "content": "<p>need an interner here</p>",
        "id": 188251595,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717810
    },
    {
        "content": "<p>arg?</p>",
        "id": 188251597,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717811
    },
    {
        "content": "<p>yes</p>",
        "id": 188251722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581717884
    },
    {
        "content": "<p>aaand what about</p>",
        "id": 188251877,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717994
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Unifier</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188251882,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581717997
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">unify_binders</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">a</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">IntoBindersAndValue</span><span class=\"o\">&lt;</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">b</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">IntoBindersAndValue</span><span class=\"o\">&lt;</span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fallible</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">T</span>: <span class=\"nc\">Fold</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">R</span>: <span class=\"nc\">Zip</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Fold</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188251892,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718008
    },
    {
        "content": "<p>I was wondering when you would get to that one</p>",
        "id": 188251903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718022
    },
    {
        "content": "<p>that should have a <code>&amp;'t I</code> in <code>Unifier</code></p>",
        "id": 188251911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718031
    },
    {
        "content": "<p>for sure</p>",
        "id": 188251919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718037
    },
    {
        "content": "<p>okay</p>",
        "id": 188251921,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718040
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">EnaVariable</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Convert this inference variable into a type. When using this</span>\n<span class=\"w\">    </span><span class=\"sd\">/// method, naturally you should know from context that the kind</span>\n<span class=\"w\">    </span><span class=\"sd\">/// of this inference variable is a type (we can&#39;t check it).</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">to_ty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">var</span><span class=\"p\">.</span><span class=\"n\">to_ty</span>::<span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188252013,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718097
    },
    {
        "content": "<p>arg?</p>",
        "id": 188252029,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718111
    },
    {
        "content": "<p>yes</p>",
        "id": 188252050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718139
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ParameterEnaVariableExt</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ParameterEnaVariable</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">to_parameter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Parameter</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ParameterKind</span>::<span class=\"n\">Ty</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">to_ty</span><span class=\"p\">().</span><span class=\"n\">cast</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ParameterKind</span>::<span class=\"n\">Lifetime</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">to_lifetime</span><span class=\"p\">().</span><span class=\"n\">cast</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188252083,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718181
    },
    {
        "content": "<p>assuming arg</p>",
        "id": 188252086,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718184
    },
    {
        "content": "<p>and by extension adding an arg to</p>",
        "id": 188252169,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718240
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fresh_subst</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">interner</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">I</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188252173,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718244
    },
    {
        "content": "<p>in InferenceTable</p>",
        "id": 188252175,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718248
    },
    {
        "content": "<p>wait</p>",
        "id": 188252204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718269
    },
    {
        "content": "<p>awe shit this is spreading like a contagion in InferenceTable fn args</p>",
        "id": 188252205,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718270
    },
    {
        "content": "<p>I mean, it has an arg already</p>",
        "id": 188252211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718272
    },
    {
        "content": "<p>but I guess you already added it</p>",
        "id": 188252218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718280
    },
    {
        "content": "<p>only on</p>",
        "id": 188252220,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718281
    },
    {
        "content": "<p>yea</p>",
        "id": 188252222,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718284
    },
    {
        "content": "<p>i just added that</p>",
        "id": 188252226,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718285
    },
    {
        "content": "<p>sorry</p>",
        "id": 188252232,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718290
    },
    {
        "content": "<p>been posting pre changes then randomly did one post <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 188252243,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718298
    },
    {
        "content": "<p>:)</p>",
        "id": 188252312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188252205\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188252205\">said</a>:</p>\n<blockquote>\n<p>awe shit this is spreading like a contagion in InferenceTable fn args</p>\n</blockquote>\n<p>yeah .. I'm not too surprised ..</p>",
        "id": 188252324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718353
    },
    {
        "content": "<p>it might be that inference table should have a reference</p>",
        "id": 188252333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718361
    },
    {
        "content": "<p>just kind of annoying</p>",
        "id": 188252338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718367
    },
    {
        "content": "<p>hmm</p>",
        "id": 188252351,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718377
    },
    {
        "content": "<p>I wonder actually</p>",
        "id": 188252356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718382
    },
    {
        "content": "<p>I feel like I want <code>I</code> to be <code>Clone</code></p>",
        "id": 188252369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718390
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">CanonicalExt</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">HasInterner</span><span class=\"o\">&lt;</span><span class=\"n\">Interner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Maps the contents using `op`, but preserving the binders.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// NB. `op` will be invoked with an instantiated version of the</span>\n<span class=\"w\">    </span><span class=\"sd\">/// canonical value, where inference variables (from a fresh</span>\n<span class=\"w\">    </span><span class=\"sd\">/// inference context) are used in place of the quantified free</span>\n<span class=\"w\">    </span><span class=\"sd\">/// variables. The result should be in terms of those same</span>\n<span class=\"w\">    </span><span class=\"sd\">/// inference variables and will be re-canonicalized.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">map</span><span class=\"o\">&lt;</span><span class=\"n\">OP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">op</span>: <span class=\"nc\">OP</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">U</span>::<span class=\"nb\">Result</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">OP</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"nb\">Result</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">U</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">T</span>: <span class=\"nc\">Fold</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">U</span>: <span class=\"nc\">Fold</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">U</span>::<span class=\"nb\">Result</span>: <span class=\"nc\">HasInterner</span><span class=\"o\">&lt;</span><span class=\"n\">Interner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Subtle: It is only quite rarely correct to apply `op` and</span>\n<span class=\"w\">        </span><span class=\"c1\">// just re-use our existing binders. For that to be valid, the</span>\n<span class=\"w\">        </span><span class=\"c1\">// result of `op` would have to ensure that it re-uses all the</span>\n<span class=\"w\">        </span><span class=\"c1\">// existing free variables and in the same order. Otherwise,</span>\n<span class=\"w\">        </span><span class=\"c1\">// the canonical form would be different: the variables might</span>\n<span class=\"w\">        </span><span class=\"c1\">// be numbered differently, or some may not longer be used.</span>\n<span class=\"w\">        </span><span class=\"c1\">// This would mean that two canonical values could no longer</span>\n<span class=\"w\">        </span><span class=\"c1\">// be compared with `Eq`, which defeats a key invariant of the</span>\n<span class=\"w\">        </span><span class=\"c1\">// `Canonical` type (indeed, its entire reason for existence).</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">infer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InferenceTable</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">snapshot</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">infer</span><span class=\"p\">.</span><span class=\"n\">snapshot</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instantiated_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">infer</span><span class=\"p\">.</span><span class=\"n\">instantiate_canonical</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mapped_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">instantiated_value</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">infer</span><span class=\"p\">.</span><span class=\"n\">canonicalize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">mapped_value</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">infer</span><span class=\"p\">.</span><span class=\"n\">rollback_to</span><span class=\"p\">(</span><span class=\"n\">snapshot</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">quantified</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188252378,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718402
    },
    {
        "content": "<p>this needs an interner</p>",
        "id": 188252385,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718406
    },
    {
        "content": "<p>I don't know what type it would map to in rust-analyzer</p>",
        "id": 188252386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718407
    },
    {
        "content": "<p>in <em>rustc</em> it'd be no problem for it to be <code>Copy</code> and to be passed around by value everywhere</p>",
        "id": 188252396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718420
    },
    {
        "content": "<p>but I think rust-analyzer that might not be true</p>",
        "id": 188252406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718434
    },
    {
        "content": "<p>so we'd prefer to thread it as parameters</p>",
        "id": 188252411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718440
    },
    {
        "content": "<p>ack</p>",
        "id": 188252454,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718448
    },
    {
        "content": "<p>rather than store it in <code>InferenceTable</code>, since I think those can be relatively long-lived</p>",
        "id": 188252456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718451
    },
    {
        "content": "<p>lets default to &amp; for now then</p>",
        "id": 188252457,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718451
    },
    {
        "content": "<p>this CanonicalExt fn still needs an interner tho</p>",
        "id": 188252507,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718503
    },
    {
        "content": "<p>gonna do as arg</p>",
        "id": 188252554,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718536
    },
    {
        "content": "<p>seems right</p>",
        "id": 188252636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718587
    },
    {
        "content": "<p>and im gonna toss the refernece in InferenceTable</p>",
        "id": 188252639,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718587
    },
    {
        "content": "<p>see how that goes</p>",
        "id": 188252643,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718593
    },
    {
        "content": "<p>oooor maybe not</p>",
        "id": 188252823,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718760
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/EWbPW6c4vkES7_qsYLmslgb8/Screenshot-from-2020-02-14-14-19-16.png\" target=\"_blank\" title=\"Screenshot-from-2020-02-14-14-19-16.png\">Screenshot-from-2020-02-14-14-19-16.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/EWbPW6c4vkES7_qsYLmslgb8/Screenshot-from-2020-02-14-14-19-16.png\" target=\"_blank\" title=\"Screenshot-from-2020-02-14-14-19-16.png\"><img src=\"/user_uploads/4715/EWbPW6c4vkES7_qsYLmslgb8/Screenshot-from-2020-02-14-14-19-16.png\"></a></div>",
        "id": 188252834,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581718767
    },
    {
        "content": "<p>hmm not sure what's up with that</p>",
        "id": 188252931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581718822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188252386\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188252386\">said</a>:</p>\n<blockquote>\n<p>I don't know what type it would map to in rust-analyzer</p>\n</blockquote>\n<p>I'd expect it to be <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/9ba801befd70892bf40429512e890389171aa59f/crates/ra_hir_ty/src/traits.rs#L94-L98\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/9ba801befd70892bf40429512e890389171aa59f/crates/ra_hir_ty/src/traits.rs#L94-L98\">this</a></p>",
        "id": 188253170,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1581719063
    },
    {
        "content": "<p>i just backtracked to threading via args nbd</p>",
        "id": 188253178,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719073
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Folder</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">OccursCheck</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188253203,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719102
    },
    {
        "content": "<p>this raises a minor question</p>",
        "id": 188253207,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719107
    },
    {
        "content": "<p>we have <code>interner()</code> from folder and self.unifier.interner from OccursCheck</p>",
        "id": 188253225,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719135
    },
    {
        "content": "<p>is the question \"which one to use\"?</p>",
        "id": 188253326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581719197
    },
    {
        "content": "<p>it shouldn't matter</p>",
        "id": 188253338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581719205
    },
    {
        "content": "<p>gonna do self.interner</p>",
        "id": 188253345,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719210
    },
    {
        "content": "<p>I think the expectation is that the interner will be threaded around rather broadly</p>",
        "id": 188253350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581719220
    },
    {
        "content": "<p>on the assumption that this will be implemented as <code>self.unifier.interner</code></p>",
        "id": 188253351,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719220
    },
    {
        "content": "<p>right</p>",
        "id": 188253374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581719234
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">context</span>::<span class=\"n\">Context</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SlgContext</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">CanonicalGoalInEnvironment</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">InEnvironment</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">CanonicalExClause</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">ExClause</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">UCanonicalGoalInEnvironment</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">UCanonical</span><span class=\"o\">&lt;</span><span class=\"n\">InEnvironment</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">UniverseMap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">UniverseMap</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">InferenceNormalizedSubst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Substitution</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Solution</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Solution</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">InferenceTable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TruncatingInferenceTable</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Environment</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Environment</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">DomainGoal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DomainGoal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Goal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">BindersGoal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Binders</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Parameter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Parameter</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">ProgramClause</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ProgramClause</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">ProgramClauses</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">ProgramClause</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">CanonicalConstrainedSubst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">ConstrainedSubst</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">CanonicalAnswerSubst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">AnswerSubst</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">GoalInEnvironment</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InEnvironment</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Substitution</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Substitution</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">RegionConstraint</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InEnvironment</span><span class=\"o\">&lt;</span><span class=\"n\">Constraint</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Variance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188253398,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719258
    },
    {
        "content": "<p>thats a signature and a half</p>",
        "id": 188253405,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719264
    },
    {
        "content": "<p>lol</p>",
        "id": 188253409,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719268
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">identity_constrained_subst</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">goal</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">UCanonical</span><span class=\"o\">&lt;</span><span class=\"n\">InEnvironment</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">ConstrainedSubst</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188253433,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719280
    },
    {
        "content": "<p>need an interner here</p>",
        "id": 188253472,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719283
    },
    {
        "content": "<p>hmm</p>",
        "id": 188253512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581719335
    },
    {
        "content": "<p>I'm coming back again btw to the question of whether we should be allowed to take ownership of <code>Interner</code> :)</p>",
        "id": 188253572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581719390
    },
    {
        "content": "<p>because I would say that <code>SlgContext&lt;I&gt;</code> could own an <code>I</code></p>",
        "id": 188253584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581719399
    },
    {
        "content": "<p>```pub(crate) struct SlgContextOps&lt;'me, I: Interner&gt; {<br>\n    program: &amp;'me dyn RustIrDatabase&lt;I&gt;,</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 188253672,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719443
    },
    {
        "content": "<p>just noticed we have a db</p>",
        "id": 188253673,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188253170\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188253170\">said</a>:</p>\n<blockquote>\n<p>I'd expect it to be <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/9ba801befd70892bf40429512e890389171aa59f/crates/ra_hir_ty/src/traits.rs#L94-L98\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/9ba801befd70892bf40429512e890389171aa59f/crates/ra_hir_ty/src/traits.rs#L94-L98\">this</a></p>\n</blockquote>\n<p>I'm not sure about this though, because I think that these types ought to be types that are not tied to the <code>'a</code> lifetime there</p>",
        "id": 188253708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581719481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188253673\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188253673\">said</a>:</p>\n<blockquote>\n<p>just noticed we have a db</p>\n</blockquote>\n<p>ah, yes</p>",
        "id": 188253723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581719498
    },
    {
        "content": "<p>that requires me adding a <code>&amp;self</code> arg to the identity_constraitned_subst fn</p>",
        "id": 188253804,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719574
    },
    {
        "content": "<p>wait no</p>",
        "id": 188253835,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719609
    },
    {
        "content": "<p>its the Ops that has the db</p>",
        "id": 188253836,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719612
    },
    {
        "content": "<p>not the self</p>",
        "id": 188253839,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719614
    },
    {
        "content": "<p>yeah, but the method could maybe move to <code>Ops</code></p>",
        "id": 188253846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581719623
    },
    {
        "content": "<p>I check zulip and there's 132 unread messages on wg-traits, my goodness</p>",
        "id": 188253847,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581719623
    },
    {
        "content": "<p>yea,</p>",
        "id": 188253852,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719633
    },
    {
        "content": "<p>im basically being a human language based keyboard for niko rn</p>",
        "id": 188253900,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719647
    },
    {
        "content": "<p>I'm going to have to go in a bit :)</p>",
        "id": 188253906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581719657
    },
    {
        "content": "<p>okay</p>",
        "id": 188253909,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719663
    },
    {
        "content": "<p>should I stop now or should we keep going until you have to go?</p>",
        "id": 188253914,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719671
    },
    {
        "content": "<p>but I do want to sit with <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> -- or maybe just read over code a bit -- because I think we should settle this question of whether we can <em>own</em> the <code>I</code></p>",
        "id": 188253916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581719673
    },
    {
        "content": "<p>i'm beginning to think</p>",
        "id": 188253918,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719675
    },
    {
        "content": "<p>that pair programming idea is probably a good one</p>",
        "id": 188253925,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719680
    },
    {
        "content": "<p>lets plan on meeting up after my work is done?</p>",
        "id": 188253930,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719688
    },
    {
        "content": "<p>i have some work I should probably do anyways</p>",
        "id": 188253942,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719696
    },
    {
        "content": "<p>I can also answer some questions if I'm around when you ask them :)</p>",
        "id": 188254001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581719751
    },
    {
        "content": "<p>i think its okay if we wait a few hours</p>",
        "id": 188254123,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719856
    },
    {
        "content": "<p>but if niko isnt around ill definitely bother you</p>",
        "id": 188254128,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719865
    },
    {
        "content": "<p>I have to go offline now, but <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> seems like you made a lot of progress in any case :)</p>",
        "id": 188254132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581719866
    },
    {
        "content": "<p>^_^</p>",
        "id": 188254138,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581719874
    },
    {
        "content": "<p>K gonna take a break for now, I pushed my changes so far to <a href=\"https://github.com/rust-lang/chalk/pull/330/files\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/330/files\">https://github.com/rust-lang/chalk/pull/330/files</a></p>",
        "id": 188255020,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581720765
    },
    {
        "content": "<p>so feel free to take a look with it / leave suggestions / comments <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 188255029,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581720776
    },
    {
        "content": "<p>Sure I'll take a look :)</p>",
        "id": 188255056,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581720816
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/PBYpn72iebLuvumVNMP06qSE/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a> rebasing on the TF -&gt; I changes</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/PBYpn72iebLuvumVNMP06qSE/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/PBYpn72iebLuvumVNMP06qSE/pasted_image.png\"></a></div>",
        "id": 188255292,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581721063
    },
    {
        "content": "<p>im so sorry <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 188255409,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581721147
    },
    {
        "content": "<p>it's okay</p>",
        "id": 188255423,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581721162
    },
    {
        "content": "<p>at least that file (debug) was super easy because I just has to accept all current and find/replace <code>Formatter</code> with <code>Formatter&lt;'_&gt;</code></p>",
        "id": 188255455,
        "sender_full_name": "Jack Huey",
        "timestamp": 1581721201
    },
    {
        "content": "<p>:D</p>",
        "id": 188257767,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581723496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> (still afk, but I was going to say that if we can't pull off a pair session, next best thing is to push to a branch)</p>",
        "id": 188260138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581725805
    },
    {
        "content": "<p>Also, I gave it some thought, and I think that the <code>I</code> parameter in <code>rust-analyzer</code> should map to <code>DB</code>, <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span></p>",
        "id": 188260158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581725834
    },
    {
        "content": "<p>Well I already pushed a branch so we're good to go either way</p>",
        "id": 188260628,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581726311
    },
    {
        "content": "<p>so yea <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> im planning on setting aside time for working on this PR tonight, I can basically start at any time now. Just lmk when or if you're not gonna be available tonight lmk ahead of time so I can head home.</p>",
        "id": 188261321,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581727130
    },
    {
        "content": "<p>on second thought, I just realized I forgot today is valentines day, so I'm gonna have to raincheck, but I will hopefully have time to work on this on monday, if you need to get it done before then please feel free to take the branch I pushed and just finish it up.</p>",
        "id": 188262483,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1581728550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> / <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> lmk if either of you have time to help me power through the rest of the PR, today after work works well for me</p>",
        "id": 188496303,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582063443
    },
    {
        "content": "<p>I can help :)</p>",
        "id": 188500295,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582066837
    },
    {
        "content": "<p>I skimmed through your PR so far. Nothing seemed obviously <em>wrong</em>. But it's so incomplete that I didn't really want to think too hard about it</p>",
        "id": 188500481,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582067012
    },
    {
        "content": "<p>thats fair</p>",
        "id": 188501365,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582067861
    },
    {
        "content": "<p>im finishing up another PR real quick then im gonna dig back into it</p>",
        "id": 188501369,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582067871
    },
    {
        "content": "<p>as it stands I don't really feel like its a PR I could easily do on my own because I just don't know the layout of the project well enough to know which structs should have references to the interner added to them and which ones should get it via args to their fns</p>",
        "id": 188501434,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582067919
    },
    {
        "content": "<p>so its pretty much just me asking \"pass as arg here?\" over and over again</p>",
        "id": 188501448,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582067936
    },
    {
        "content": "<p>makes sense</p>",
        "id": 188501566,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582068052
    },
    {
        "content": "<p>okay so heres where I left off <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 188504581,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582070974
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">SlgContext</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">max_size</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The expected number of answers for a solution.</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Only really sseful for tests, since `make_solution`</span>\n<span class=\"w\">    </span><span class=\"sd\">/// will panic if the number of cached answers does not</span>\n<span class=\"w\">    </span><span class=\"sd\">/// equal this when a solution is made.</span>\n<span class=\"w\">    </span><span class=\"n\">expected_answers</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">phantom</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188504582,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582070977
    },
    {
        "content": "<p>should slgcontext have a reference or something to the Interner added</p>",
        "id": 188504592,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582070994
    },
    {
        "content": "<p>right now Unifiers have refernces added</p>",
        "id": 188504647,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071021
    },
    {
        "content": "<p>I'm gonna go with <em>no</em></p>",
        "id": 188504661,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582071035
    },
    {
        "content": "<p>Folders and RustIRDatabase have methods for accessing one that are currently unimplemented</p>",
        "id": 188504663,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071039
    },
    {
        "content": "<p>alright, so just thread thru in args</p>",
        "id": 188504667,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071050
    },
    {
        "content": "<p>If anything, it would go on <code>ContextOps</code>/<code>SlgContextOps</code></p>",
        "id": 188504670,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582071055
    },
    {
        "content": "<p>yea its already in SlgContextOpts technically</p>",
        "id": 188504679,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071068
    },
    {
        "content": "<p>via the irdatabase member</p>",
        "id": 188504686,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071075
    },
    {
        "content": "<p>but i need it in <code>    fn identity_constrained_subst(</code></p>",
        "id": 188504698,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071091
    },
    {
        "content": "<p>the functions in <code>Context</code> may need to be moved to <code>SlgContextOps</code></p>",
        "id": 188504702,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582071097
    },
    {
        "content": "<p>which is a method of Context impled on the SlgContext</p>",
        "id": 188504703,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071101
    },
    {
        "content": "<p>ooh</p>",
        "id": 188504712,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071107
    },
    {
        "content": "<p>whats the difference between the two pieces</p>",
        "id": 188504779,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071148
    },
    {
        "content": "<p>(trying to know how I would decide which fns to move)</p>",
        "id": 188504787,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071162
    },
    {
        "content": "<p><code>SlgContext</code> functions don't have a <code>&amp;self</code></p>",
        "id": 188504792,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582071169
    },
    {
        "content": "<p>other than \"if it needs access to the context it should be in ops\"</p>",
        "id": 188504795,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071172
    },
    {
        "content": "<p>basically only that</p>",
        "id": 188504796,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582071174
    },
    {
        "content": "<p>okay</p>",
        "id": 188504799,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071177
    },
    {
        "content": "<p>welp that makes it easy</p>",
        "id": 188504801,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071179
    },
    {
        "content": "<p><code>identity_constrained_subst</code> makes sense to be in <code>ContextOps</code> since where it's called, <code>ContextOps</code> is <code>Self</code></p>",
        "id": 188504828,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582071212
    },
    {
        "content": "<p>yea that worked out</p>",
        "id": 188505282,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071697
    },
    {
        "content": "<p>what about this one</p>",
        "id": 188505283,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071698
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">context</span>::<span class=\"n\">UnificationOps</span><span class=\"o\">&lt;</span><span class=\"n\">SlgContext</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">TruncatingInferenceTable</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">instantiate_binders_universally</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Binders</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infer</span><span class=\"p\">.</span><span class=\"n\">instantiate_binders_universally</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">instantiate_binders_existentially</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Binders</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infer</span><span class=\"p\">.</span><span class=\"n\">instantiate_binders_existentially</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188505286,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071702
    },
    {
        "content": "<p>instantiate_binders_universally needs an interner</p>",
        "id": 188505290,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582071709
    },
    {
        "content": "<p>Probably on <code>TruncatingInferenceTable</code></p>",
        "id": 188505356,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582071791
    },
    {
        "content": "<p>ooh that's gonna be tough</p>",
        "id": 188505376,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582071833
    },
    {
        "content": "<p>maybe just on the functions</p>",
        "id": 188505452,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582071915
    },
    {
        "content": "<p>need to figure out how to get the interner type available in the trait signature</p>",
        "id": 188505557,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072038
    },
    {
        "content": "<p>because its a parameter on the impl right now</p>",
        "id": 188505561,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072042
    },
    {
        "content": "<p>right, that's why I said it's gonna be tough</p>",
        "id": 188505569,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582072057
    },
    {
        "content": "<p>i noticed the HasInterner trait earlier</p>",
        "id": 188505581,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072075
    },
    {
        "content": "<p>should I just add a HasInterner bound on UnificationOps trait</p>",
        "id": 188505626,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072093
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UnificationOps</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nc\">Context</span><span class=\"o\">&gt;</span>: <span class=\"nc\">HasInterner</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Used by: simplify</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">instantiate_binders_universally</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">interner</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span>::<span class=\"n\">Interner</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">C</span>::<span class=\"n\">BindersGoal</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">C</span>::<span class=\"n\">Goal</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188505637,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072124
    },
    {
        "content": "<p>probably</p>",
        "id": 188505655,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582072171
    },
    {
        "content": "<p>looks like that wont work</p>",
        "id": 188505747,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072257
    },
    {
        "content": "<p>HasInterner is part of chalk_ir</p>",
        "id": 188505750,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072262
    },
    {
        "content": "<p>and thats not a dep of chalk_engine i guess</p>",
        "id": 188505759,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072268
    },
    {
        "content": "<p>I will just add an associated type</p>",
        "id": 188505767,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072284
    },
    {
        "content": "<p>ah right</p>",
        "id": 188505856,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582072390
    },
    {
        "content": "<p>this is gonna be tough</p>",
        "id": 188505865,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582072401
    },
    {
        "content": "<p>yea this is breaking down pretty bad</p>",
        "id": 188505959,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072491
    },
    {
        "content": "<p>My first thought was to put it on <code>TruncatingInferenceTable</code>, but you would need a lifetime, which you can't have because it would need to be a GAT</p>",
        "id": 188505961,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582072496
    },
    {
        "content": "<p>the impl for Forest has no Interner on it</p>",
        "id": 188505964,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072499
    },
    {
        "content": "<p>and we use dyn InferenceTables</p>",
        "id": 188506001,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072551
    },
    {
        "content": "<p>which require that we specify the associated type</p>",
        "id": 188506006,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072559
    },
    {
        "content": "<p>could the Context define the interner?</p>",
        "id": 188506078,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072612
    },
    {
        "content": "<p>nope, because <code>Context</code> is in <code>chalk-engine</code></p>",
        "id": 188506087,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582072626
    },
    {
        "content": "<p>i dont follow</p>",
        "id": 188506092,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072638
    },
    {
        "content": "<p>no Interner in the engine</p>",
        "id": 188506110,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582072662
    },
    {
        "content": "<p>it looks like it worked</p>",
        "id": 188506197,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072731
    },
    {
        "content": "<p>let me show you what I meant</p>",
        "id": 188506207,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072739
    },
    {
        "content": "<p>im sure im explaining this poorly</p>",
        "id": 188506210,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072743
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UnificationOps</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nc\">Context</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Used by: simplify</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">instantiate_binders_universally</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">interner</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">C</span>::<span class=\"n\">Interner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">arg</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">C</span>::<span class=\"n\">BindersGoal</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">C</span>::<span class=\"n\">Goal</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188506235,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072782
    },
    {
        "content": "<p>i added the Interner associated type to the Context trait</p>",
        "id": 188506242,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072795
    },
    {
        "content": "<p>and when Context is defined everything is parameterized on the interner</p>",
        "id": 188506292,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072809
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">context</span>::<span class=\"n\">Context</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SlgContext</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">CanonicalGoalInEnvironment</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">InEnvironment</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">CanonicalExClause</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">ExClause</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">UCanonicalGoalInEnvironment</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">UCanonical</span><span class=\"o\">&lt;</span><span class=\"n\">InEnvironment</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">UniverseMap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">UniverseMap</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">InferenceNormalizedSubst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Substitution</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Solution</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Solution</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">InferenceTable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TruncatingInferenceTable</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Environment</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Environment</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">DomainGoal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DomainGoal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Goal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">BindersGoal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Binders</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Parameter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Parameter</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">ProgramClause</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ProgramClause</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">ProgramClauses</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">ProgramClause</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">CanonicalConstrainedSubst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">ConstrainedSubst</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">CanonicalAnswerSubst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">AnswerSubst</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">GoalInEnvironment</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InEnvironment</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Substitution</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Substitution</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">RegionConstraint</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InEnvironment</span><span class=\"o\">&lt;</span><span class=\"n\">Constraint</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Variance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Interner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188506309,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072823
    },
    {
        "content": "<p>so I added that last line for Interner = I</p>",
        "id": 188506330,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072839
    },
    {
        "content": "<p>well that works</p>",
        "id": 188506363,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582072877
    },
    {
        "content": "<p>doing the same thing on this fn</p>",
        "id": 188506381,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072909
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nc\">Context</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Forest</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Simplifies an HH goal into a series of positive domain goals</span>\n<span class=\"w\">    </span><span class=\"sd\">/// and negative HH goals. This operation may fail if the HH goal</span>\n<span class=\"w\">    </span><span class=\"sd\">/// includes unifications that cannot be completed.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">simplify_hh_goal</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">interner</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">C</span>::<span class=\"n\">Interner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">infer</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">InferenceTable</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">subst</span>: <span class=\"nc\">C</span>::<span class=\"n\">Substitution</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">initial_environment</span>: <span class=\"nc\">C</span>::<span class=\"n\">Environment</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">initial_hh_goal</span>: <span class=\"nc\">HhGoal</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fallible</span><span class=\"o\">&lt;</span><span class=\"n\">ExClause</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188506383,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072912
    },
    {
        "content": "<p>i added an interner arg</p>",
        "id": 188506387,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072921
    },
    {
        "content": "<p>lmk if you think it should be a member of the Forest instead</p>",
        "id": 188506431,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072929
    },
    {
        "content": "<p>or maybe a getter fn on <code>Context</code></p>",
        "id": 188506447,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072953
    },
    {
        "content": "<p>if it were a getter fn on Context that would make this all very easy</p>",
        "id": 188506474,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582072996
    },
    {
        "content": "<p>on <code>ContextOps</code>?</p>",
        "id": 188506533,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582073047
    },
    {
        "content": "<p>On either, but that would probably be the best</p>",
        "id": 188506663,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073195
    },
    {
        "content": "<p>like here for example</p>",
        "id": 188506671,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073203
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">push_initial_strands</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">ContextOps</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">table</span>: <span class=\"nc\">TableIndex</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Instantiate the table goal with fresh inference variables.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">table_goal</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">table</span><span class=\"p\">].</span><span class=\"n\">table_goal</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">infer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">subst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">instantiate_ucanonical_goal</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">table_goal</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">push_initial_strands_instantiated</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">infer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">subst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">goal</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188506672,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073207
    },
    {
        "content": "<p>we have a ContextOps arg already</p>",
        "id": 188506679,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073213
    },
    {
        "content": "<p>oh duh we already have the getter on ContextOps technically</p>",
        "id": 188506759,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073290
    },
    {
        "content": "<p>via its program member</p>",
        "id": 188506760,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073294
    },
    {
        "content": "<p>yeah</p>",
        "id": 188506798,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582073355
    },
    {
        "content": "<p>adding a getter to <code>ContextOps</code> is probably okay</p>",
        "id": 188506804,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582073365
    },
    {
        "content": "<p>yea, doing that, cannot access the program member when the context type is behind the generic</p>",
        "id": 188506877,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073457
    },
    {
        "content": "<p>damnit</p>",
        "id": 188506959,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073580
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nc\">HasInterner</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">HasInterner</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ExClause</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Interner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span>::<span class=\"n\">Interner</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188506968,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073593
    },
    {
        "content": "<p>conflict</p>",
        "id": 188506970,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073595
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nc\">HasInterner</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">HasInterner</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ExClause</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Interner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">HasInterner</span><span class=\"o\">&gt;</span>::<span class=\"n\">Interner</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188506996,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073639
    },
    {
        "content": "<p>assuming this is Okay</p>",
        "id": 188507035,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073642
    },
    {
        "content": "<p>yep</p>",
        "id": 188507059,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582073692
    },
    {
        "content": "<p>theoretically, they're the same</p>",
        "id": 188507063,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582073700
    },
    {
        "content": "<p>Okay thats done i think!</p>",
        "id": 188507081,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073755
    },
    {
        "content": "<p>the slg stuff at least</p>",
        "id": 188507083,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073758
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">aggregate_application_tys</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">apply1</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ApplicationTy</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">apply2</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ApplicationTy</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188507086,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073762
    },
    {
        "content": "<p>this needs an interner</p>",
        "id": 188507126,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073772
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">AntiUnifier</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;infer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">infer</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;infer</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">InferenceTable</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">universe</span>: <span class=\"nc\">UniverseIndex</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188507128,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073775
    },
    {
        "content": "<p>arg?</p>",
        "id": 188507130,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073777
    },
    {
        "content": "<p>probably a field</p>",
        "id": 188507151,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582073816
    },
    {
        "content": "<p>oh okay</p>",
        "id": 188507160,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582073837
    },
    {
        "content": "<p>btw about to be on mobile. So I can probably still respond, but can't check code</p>",
        "id": 188507166,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582073846
    },
    {
        "content": "<p>(unless you post it here :P)</p>",
        "id": 188507172,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582073854
    },
    {
        "content": "<p>okay</p>",
        "id": 188507310,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074002
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">context</span>::<span class=\"n\">ResolventOps</span><span class=\"o\">&lt;</span><span class=\"n\">SlgContext</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">TruncatingInferenceTable</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Applies the SLG resolvent algorithm to incorporate a program</span>\n<span class=\"w\">    </span><span class=\"sd\">/// clause into the main X-clause, producing a new X-clause that</span>\n<span class=\"w\">    </span><span class=\"sd\">/// must be solved.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// # Parameters</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// - `goal` is the goal G that we are trying to solve</span>\n<span class=\"w\">    </span><span class=\"sd\">/// - `clause` is the program clause that may be useful to that end</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">resolvent_clause</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">environment</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Environment</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">goal</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">DomainGoal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">subst</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Substitution</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">clause</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">ProgramClause</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fallible</span><span class=\"o\">&lt;</span><span class=\"n\">ExClause</span><span class=\"o\">&lt;</span><span class=\"n\">SlgContext</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188507337,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074005
    },
    {
        "content": "<p>need an interner here</p>",
        "id": 188507344,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074008
    },
    {
        "content": "<p>arg im guessing</p>",
        "id": 188507365,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074039
    },
    {
        "content": "<p>that worked well</p>",
        "id": 188507395,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074102
    },
    {
        "content": "<p>Probably same UnificationOps</p>",
        "id": 188507397,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582074114
    },
    {
        "content": "<p>okay</p>",
        "id": 188507484,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074228
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">merge_answer_into_strand</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">strand</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Strand</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">RootSearchResult</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188507486,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074231
    },
    {
        "content": "<p>this needs an interner</p>",
        "id": 188507488,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074235
    },
    {
        "content": "<p>should I add a ContextOps arg?</p>",
        "id": 188507491,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074241
    },
    {
        "content": "<p>or can Strand somehow pass it along</p>",
        "id": 188507565,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074332
    },
    {
        "content": "<p>going ahead and adding a context arg</p>",
        "id": 188507575,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074353
    },
    {
        "content": "<p>okay i think thats that path done</p>",
        "id": 188507719,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074496
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Truncater</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;infer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">infer</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;infer</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">InferenceTable</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">current_size</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">max_size</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">overflow</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;infer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Truncater</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;infer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">infer</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;infer</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">InferenceTable</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max_size</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Truncater</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">infer</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">current_size</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">max_size</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">overflow</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">overflow</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pre_size</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">overflow</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">current_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pre_size</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">universe</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infer</span><span class=\"p\">.</span><span class=\"n\">max_universe</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infer</span><span class=\"p\">.</span><span class=\"n\">new_variable</span><span class=\"p\">(</span><span class=\"n\">universe</span><span class=\"p\">).</span><span class=\"n\">to_ty</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188507721,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074499
    },
    {
        "content": "<p>need an interner for overflow</p>",
        "id": 188507724,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074510
    },
    {
        "content": "<p>arg?</p>",
        "id": 188507726,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074511
    },
    {
        "content": "<p>this thing impls Folder</p>",
        "id": 188507736,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074525
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">interner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">I</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">target_interner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">I</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188507741,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074539
    },
    {
        "content": "<p>I can probably just use that</p>",
        "id": 188507751,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074550
    },
    {
        "content": "<p>Yep</p>",
        "id": 188507766,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582074579
    },
    {
        "content": "<p>Good so far!</p>",
        "id": 188507772,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582074586
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 188507817,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074604
    },
    {
        "content": "<p>impl&lt;I: Interner&gt; FoldInputTypes for AliasEq&lt;I&gt; {<br>\n    fn fold(&amp;self, accumulator: &amp;mut Vec&lt;Ty&lt;I&gt;&gt;) {<br>\n        TyData::Alias(self.alias.clone()).intern().fold(accumulator);<br>\n        self.ty.fold(accumulator);<br>\n    }<br>\n}</p>",
        "id": 188507819,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074606
    },
    {
        "content": "<p>gdi</p>",
        "id": 188507821,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074610
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"err\">```</span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FoldInputTypes</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AliasEq</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fold</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">accumulator</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">TyData</span>::<span class=\"n\">Alias</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">alias</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()).</span><span class=\"n\">intern</span><span class=\"p\">().</span><span class=\"n\">fold</span><span class=\"p\">(</span><span class=\"n\">accumulator</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"p\">(</span><span class=\"n\">accumulator</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188507822,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074612
    },
    {
        "content": "<p>close enough</p>",
        "id": 188507825,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074619
    },
    {
        "content": "<p>this needs an interner</p>",
        "id": 188507829,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074627
    },
    {
        "content": "<p>arg on fold? getter fn on trait?</p>",
        "id": 188507835,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074644
    },
    {
        "content": "<p>Uh</p>",
        "id": 188507845,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582074667
    },
    {
        "content": "<p>I only have 2 more errors left atm</p>",
        "id": 188507851,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074696
    },
    {
        "content": "<p>Getter on trait probably</p>",
        "id": 188507852,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582074698
    },
    {
        "content": "<p>okay</p>",
        "id": 188507855,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074702
    },
    {
        "content": "<p>Err, maybe rags</p>",
        "id": 188507913,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582074730
    },
    {
        "content": "<p>Arg</p>",
        "id": 188507916,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582074735
    },
    {
        "content": "<p>oooo shit a lot of ppl implement this trait</p>",
        "id": 188507935,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074785
    },
    {
        "content": "<p>none of the other impls need an interner</p>",
        "id": 188507958,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074821
    },
    {
        "content": "<p>at least with the change I've made so far</p>",
        "id": 188507971,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074835
    },
    {
        "content": "<p>Oof</p>",
        "id": 188508013,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582074843
    },
    {
        "content": "<p>just gonna do an associated fn on the type</p>",
        "id": 188508042,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074897
    },
    {
        "content": "<p>knowing its wrong</p>",
        "id": 188508045,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074901
    },
    {
        "content": "<p>and punt on the issue for a hot second</p>",
        "id": 188508054,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074904
    },
    {
        "content": "<p>Yeah, that's fine</p>",
        "id": 188508068,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582074932
    },
    {
        "content": "<p>ooh shit!</p>",
        "id": 188508122,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074965
    },
    {
        "content": "<p>we got to the borrow checker pass</p>",
        "id": 188508125,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582074970
    },
    {
        "content": "<p><span aria-label=\"raised hands\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"raised hands\">:raised_hands:</span></p>",
        "id": 188508156,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582075074
    },
    {
        "content": "<p>okay</p>",
        "id": 188508212,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582075142
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">RustIrDatabase</span><span class=\"o\">&lt;</span><span class=\"n\">ChalkIr</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ChalkDatabase</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188508215,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582075145
    },
    {
        "content": "<p>I have to impl the <code>interner</code> getter for RustIrDatabase</p>",
        "id": 188508218,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582075154
    },
    {
        "content": "<p>but theres no interner type here</p>",
        "id": 188508221,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582075158
    },
    {
        "content": "<p>presumably ChalkDatabase will own the interner or something?</p>",
        "id": 188508223,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582075168
    },
    {
        "content": "<p>(not sure)</p>",
        "id": 188508224,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582075170
    },
    {
        "content": "<p>ChalkIr</p>",
        "id": 188508274,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582075205
    },
    {
        "content": "<p>Probably</p>",
        "id": 188508292,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582075249
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">LowerParameterMap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">synthetic_parameters</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">chalk_ir</span>::<span class=\"n\">ParameterKind</span><span class=\"o\">&lt;</span><span class=\"n\">chalk_ir</span>::<span class=\"n\">Identifier</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">declared_parameters</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">ParameterKind</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">all_parameters</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">chalk_ir</span>::<span class=\"n\">ParameterKind</span><span class=\"o\">&lt;</span><span class=\"n\">chalk_ir</span>::<span class=\"n\">Identifier</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">synthetic_parameters</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">declared_parameters</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">id</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">.</span><span class=\"n\">lower</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"cm\">/* TODO: switch to this ordering, but adjust *all* the code to match</span>\n\n<span class=\"cm\">        self.declared_parameters()</span>\n<span class=\"cm\">            .iter()</span>\n<span class=\"cm\">            .map(|id| id.lower())</span>\n<span class=\"cm\">            .chain(self.synthetic_parameters()) // (*) see below</span>\n<span class=\"cm\">            .collect()</span>\n<span class=\"cm\">         */</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">parameter_refs</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">chalk_ir</span>::<span class=\"n\">Parameter</span><span class=\"o\">&lt;</span><span class=\"n\">ChalkIr</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">all_parameters</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">anonymize</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">..)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">to_parameter</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188508304,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582075315
    },
    {
        "content": "<p>parameter_refs needs an Interner</p>",
        "id": 188508329,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582075323
    },
    {
        "content": "<p>Maybe getter on trait</p>",
        "id": 188508353,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582075351
    },
    {
        "content": "<p>okay</p>",
        "id": 188508356,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582075356
    },
    {
        "content": "<p>Brb</p>",
        "id": 188508357,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582075364
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">LowerTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">lower</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">env</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Env</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">LowerResult</span><span class=\"o\">&lt;</span><span class=\"n\">chalk_ir</span>::<span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">ChalkIr</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">LowerTy</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">lower</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">env</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Env</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">LowerResult</span><span class=\"o\">&lt;</span><span class=\"n\">chalk_ir</span>::<span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">ChalkIr</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Ty</span>::<span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">lookup_type</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">TypeLookup</span>::<span class=\"n\">Struct</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">struct_kind</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"p\">.</span><span class=\"n\">binders</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">RustIrError</span>::<span class=\"n\">IncorrectNumberOfTypeParameters</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">identifier</span>: <span class=\"nc\">name</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">expected</span>: <span class=\"nc\">k</span><span class=\"p\">.</span><span class=\"n\">binders</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">actual</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">chalk_ir</span>::<span class=\"n\">TyData</span>::<span class=\"n\">Apply</span><span class=\"p\">(</span><span class=\"n\">chalk_ir</span>::<span class=\"n\">ApplicationTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">name</span>: <span class=\"nc\">chalk_ir</span>::<span class=\"n\">TypeName</span>::<span class=\"n\">Struct</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">substitution</span>: <span class=\"nc\">chalk_ir</span>::<span class=\"n\">Substitution</span>::<span class=\"n\">empty</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">intern</span><span class=\"p\">())</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188508380,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582075426
    },
    {
        "content": "<p>alrighty</p>",
        "id": 188508381,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582075427
    },
    {
        "content": "<p>gonna afk for a bit / work on other things</p>",
        "id": 188508435,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582075495
    },
    {
        "content": "<p>msg me when you're back</p>",
        "id": 188508438,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582075501
    },
    {
        "content": "<p>Back</p>",
        "id": 188508543,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582075641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span></p>",
        "id": 188508553,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582075661
    },
    {
        "content": "<p>Probably a function arg there</p>",
        "id": 188508613,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582075735
    },
    {
        "content": "<p>okay</p>",
        "id": 188509741,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582077248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 188509776,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582077345
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">LowerProgram</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Program</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">lower</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">LowerResult</span><span class=\"o\">&lt;</span><span class=\"n\">LoweredProgram</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188509777,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582077348
    },
    {
        "content": "<p>Maybe same?</p>",
        "id": 188510710,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582078835
    },
    {
        "content": "<p>alrighty</p>",
        "id": 188510767,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582078946
    },
    {
        "content": "<p>I'm gonna assume the same and just keep slapping interner args on all the lowering stuff</p>",
        "id": 188510860,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582079094
    },
    {
        "content": "<p>like this</p>",
        "id": 188510862,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582079096
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">LowerWhereClauseVec</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">QuantifiedWhereClause</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">lower</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">env</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Env</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">LowerResult</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">chalk_ir</span>::<span class=\"n\">QuantifiedWhereClause</span><span class=\"o\">&lt;</span><span class=\"n\">ChalkIr</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">flat_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">wc</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">wc</span><span class=\"p\">.</span><span class=\"n\">lower</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">Ok</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)],</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188510863,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582079099
    },
    {
        "content": "<p>Yeah that's good</p>",
        "id": 188510939,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582079172
    },
    {
        "content": "<p>Can always change it if needed</p>",
        "id": 188510944,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582079182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ```rust</p>",
        "id": 188511415,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582079976
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">program_ir</span><span class=\"p\">(</span><span class=\"n\">db</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">LoweringDatabase</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">Program</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ChalkError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">program_text</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Arc</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">chalk_parse</span>::<span class=\"n\">parse_program</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">text</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">lower</span><span class=\"p\">(</span><span class=\"n\">interner</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188511416,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582079980
    },
    {
        "content": "<p>need an interner there</p>",
        "id": 188511417,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582079986
    },
    {
        "content": "<p>i initially slapped it on as an arg</p>",
        "id": 188511421,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582079993
    },
    {
        "content": "<p>but that propogated back up and caused lifetime issues</p>",
        "id": 188511463,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582080004
    },
    {
        "content": "<p>Maybe on LoweringDatabase then?</p>",
        "id": 188511471,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582080032
    },
    {
        "content": "<p>also i had absolutely no idea this syntax was allowed</p>",
        "id": 188511541,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582080123
    },
    {
        "content": "<p>impling trait items as free fns</p>",
        "id": 188511557,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582080163
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">program_ir</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">interner</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">ChalkIr</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">Program</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ChalkError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188511641,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582080290
    },
    {
        "content": "<p>it doesn't want to accept this</p>",
        "id": 188511642,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582080295
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">chalk</span><span class=\"o\">-</span><span class=\"n\">integration</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"o\">|</span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mi\">261</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">undeclared</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"na\">&#39;a</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">||</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">||</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">program_ir</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">interner</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">ChalkIr</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">Program</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ChalkError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"o\">||</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                         </span><span class=\"o\">^^</span><span class=\"w\"> </span><span class=\"n\">undeclared</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"></span>\n<span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">explain</span><span class=\"w\"> </span><span class=\"n\">E0261</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188511649,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582080305
    },
    {
        "content": "<p>can you not declare lifetimes on associated fns for traits</p>",
        "id": 188511656,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582080324
    },
    {
        "content": "<p>Hmm</p>",
        "id": 188511678,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582080361
    },
    {
        "content": "<p>Weird</p>",
        "id": 188511714,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582080363
    },
    {
        "content": "<p>I have to get off for the night though</p>",
        "id": 188511724,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582080371
    },
    {
        "content": "<p>okay</p>",
        "id": 188511739,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582080401
    },
    {
        "content": "<p>eyyy, i got it compiling</p>",
        "id": 188512181,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582081285
    },
    {
        "content": "<p>with liberal usage of <code>unimplemented!()</code></p>",
        "id": 188512182,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582081292
    },
    {
        "content": "<p>the lowering stuff is almost certainly wrong</p>",
        "id": 188512183,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582081305
    },
    {
        "content": "<p>i mostly yoloed it</p>",
        "id": 188512184,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582081309
    },
    {
        "content": "<p>and I intentionally hacked it so src/main.rs wouldn't need to know about the Interner</p>",
        "id": 188512227,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582081335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this is probably far enough along where you can do code review and leave comments rather than doing synchronous help via chat</p>",
        "id": 188512311,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582081470
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/330/files\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/330/files\">https://github.com/rust-lang/chalk/pull/330/files</a></p>",
        "id": 188512312,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582081472
    },
    {
        "content": "<p>the changes in <code>chalk-integration</code> are the most suspect / in need of review</p>",
        "id": 188512372,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582081564
    },
    {
        "content": "<p>so thats probably a good place to start the code review</p>",
        "id": 188512375,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582081578
    },
    {
        "content": "<p>I haven't bothered making the tests compile yet</p>",
        "id": 188512385,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582081625
    },
    {
        "content": "<p>In <code>lowering.rs</code>, you're passing both the interner and the env to most functions. Shouldn't we add the interner to Env?</p>",
        "id": 188522412,
        "sender_full_name": "detrumi",
        "timestamp": 1582099027
    },
    {
        "content": "<p>Yeah, would work well</p>",
        "id": 188548498,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582122499
    },
    {
        "content": "<p>k moved it into env</p>",
        "id": 188570604,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582136749
    },
    {
        "content": "<p>ready for more review, I left a comment on the AliasEq stuff, don't know how to move forward on that, and I have a bunch of <code>interner() -&gt; &amp;I { unimplemented!() }</code> fns that I need to deal with</p>",
        "id": 188572968,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582138410
    },
    {
        "content": "<p>so guidance on how to deal with those would be a good next step</p>",
        "id": 188572982,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582138423
    },
    {
        "content": "<p>Just replied to your comment re. <code>AliasEq</code>. As tough as it is (since the other impls of that trait don't need an <code>Interner</code>), I do think providing the interner as an arg is the right choice</p>",
        "id": 188573307,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582138633
    },
    {
        "content": "<p>As far as the <code>unimplemented!()</code>s, most will probably just coming from a new field on the struct</p>",
        "id": 188573408,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582138685
    },
    {
        "content": "<p>Most important question of all</p>",
        "id": 188787937,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582331015
    },
    {
        "content": "<p>who should own the interner?</p>",
        "id": 188787945,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582331021
    },
    {
        "content": "<p>I feel like if I know where the concrete references to the interner are coming from a lot of this will fall into place</p>",
        "id": 188787956,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582331039
    },
    {
        "content": "<p>btw gonna start adding interner arg to the trait that AliasEq needs it on</p>",
        "id": 188788002,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582331050
    },
    {
        "content": "<p>K i pushed a version that adds the interner to the FoldInputTypes trait</p>",
        "id": 188788736,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582332061
    },
    {
        "content": "<p>I think right now the main things left to do are start actually populating the various items I added <code>interner()</code> fns to with actual references to interner</p>",
        "id": 188788756,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582332104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> very sorry for disappearing last week</p>",
        "id": 188948207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582566018
    },
    {
        "content": "<p>let me see if I can catch up...</p>",
        "id": 188948212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582566022
    },
    {
        "content": "<p>is <a href=\"https://github.com/rust-lang-nursery/chalk/issues/330\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/330\">chalk#330</a> the latest?</p>",
        "id": 188948256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582566051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yea, I believe its completely up to date with the changes I've made</p>",
        "id": 188949232,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582566816
    },
    {
        "content": "<p>comments from above are where I left off</p>",
        "id": 188949240,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582566821
    },
    {
        "content": "<p>great, ok</p>",
        "id": 188949243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582566824
    },
    {
        "content": "<p>I think the question of \"who should own\" is definitely key-- I also think that probably it should be firmly borrowed and temporary, even though that's less convenient</p>",
        "id": 188949292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582566843
    },
    {
        "content": "<p>but I think it'll fit best into the salsa model</p>",
        "id": 188949309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582566851
    },
    {
        "content": "<p>firmly borrowed?</p>",
        "id": 188949323,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582566862
    },
    {
        "content": "<p>heh, not sure what \"firmly\" means :)</p>",
        "id": 188949337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582566873
    },
    {
        "content": "<p>yea me neither</p>",
        "id": 188949341,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582566882
    },
    {
        "content": "<p>lol</p>",
        "id": 188949343,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582566883
    },
    {
        "content": "<p>well I mean that it should be passed in as a parameter and we shouldn't be able to clone it</p>",
        "id": 188949371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582566905
    },
    {
        "content": "<p>or take ownership of it</p>",
        "id": 188949376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582566908
    },
    {
        "content": "<p>so I guess \"strictly\"</p>",
        "id": 188949379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582566911
    },
    {
        "content": "<p>but let me check out the PR and see how it feels</p>",
        "id": 188949391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582566917
    },
    {
        "content": "<p>this means that potentially \"long lived\" data structures shouldn't have an <code>Interner</code> in their fields</p>",
        "id": 188949422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582566947
    },
    {
        "content": "<p>okay</p>",
        "id": 188949521,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582566993
    },
    {
        "content": "<p>if you search for instances of <code>interner(&amp;self)</code> that will give you a good idea of who currently would need to borrow it with the guesses we took at how to thread it through</p>",
        "id": 188949543,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582567019
    },
    {
        "content": "<p>(removed)</p>",
        "id": 188951473,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582568423
    },
    {
        "content": "<p>Yes, so the interner, I assume, would get passed in at <code>solve</code></p>",
        "id": 188951810,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582568701
    },
    {
        "content": "<p>similar to <code>RustIrDatabase</code></p>",
        "id": 188951829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582568712
    },
    {
        "content": "<p>so LoadedProgram should own an interner?</p>",
        "id": 188952667,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582569321
    },
    {
        "content": "<p>also, what about the target_interner</p>",
        "id": 188952690,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582569344
    },
    {
        "content": "<p>the fold trait needed two interners, not sure how the second one gets threaded through</p>",
        "id": 188952702,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582569361
    },
    {
        "content": "<p>I would have to double check. There's two (main) places in the current code where we are \"creating\" an interner: the tests, and the repl</p>",
        "id": 188952911,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582569488
    },
    {
        "content": "<p>can't say for sure about either until I look at the code, which I can't do until later</p>",
        "id": 188952934,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582569506
    },
    {
        "content": "<p>As far as target_interner, no clue. Will have to look later</p>",
        "id": 188952951,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582569515
    },
    {
        "content": "<p>okay so I'm trying to thread an interner from LoadedProgram to Env in <a href=\"http://lowering.rs\" target=\"_blank\" title=\"http://lowering.rs\">lowering.rs</a></p>",
        "id": 188954253,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582570409
    },
    {
        "content": "<p>and it requires that i add a lifetime param to Program</p>",
        "id": 188954278,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582570429
    },
    {
        "content": "<p>which is being difficult...</p>",
        "id": 188954285,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582570438
    },
    {
        "content": "<p>I think the salsa stuff might be responsible</p>",
        "id": 188954578,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582570605
    },
    {
        "content": "<p>but no matter what I do I get errors saying the lifetimes are undeclared</p>",
        "id": 188954617,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582570632
    },
    {
        "content": "<p>let me look at this a bit later and I'll get back to you</p>",
        "id": 188954861,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582570773
    },
    {
        "content": "<p>okay</p>",
        "id": 188955004,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582570836
    },
    {
        "content": "<p>i was gonna just run it through cargo expand to see what the proc macro was generating</p>",
        "id": 188955018,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582570847
    },
    {
        "content": "<p>I'm hoping its as simple as forgetting to parse / re-add the generic parameters when its transforming the trait definition</p>",
        "id": 188955117,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582570920
    },
    {
        "content": "<p>which is something I'm pretty sure I can fix</p>",
        "id": 188955173,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582570933
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">program_ir</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key0</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;i</span><span class=\"w\"> </span><span class=\"n\">ChalkIr</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">Program</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;i</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ChalkError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188955287,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582571022
    },
    {
        "content": "<p>I think I fixed it in salsa-macros</p>",
        "id": 188958023,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582572818
    },
    {
        "content": "<p>damnit apparently not</p>",
        "id": 188958030,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582572826
    },
    {
        "content": "<p>fff</p>",
        "id": 188958033,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582572827
    },
    {
        "content": "<p>apparently chalk-integration and chalk both have salsa deps</p>",
        "id": 188958123,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582572867
    },
    {
        "content": "<p>had to update path</p>",
        "id": 188958129,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582572869
    },
    {
        "content": "<p>pls work pls work pls work</p>",
        "id": 188958134,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582572873
    },
    {
        "content": "<p>wooo progress, custom attribute panicked :)</p>",
        "id": 188958204,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582572924
    },
    {
        "content": "<p>aaah shit, chalk depends on an 0.10.0 version of salsa-macros</p>",
        "id": 188958386,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582573057
    },
    {
        "content": "<p>and the volatile attribute was removed in 0.14 i guess</p>",
        "id": 188958399,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582573066
    },
    {
        "content": "<p>so this isnt even my fault</p>",
        "id": 188958403,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582573069
    },
    {
        "content": "<p>lol</p>",
        "id": 188958405,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582573070
    },
    {
        "content": "<p>aaaand now rand is fucking me over</p>",
        "id": 188958693,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582573286
    },
    {
        "content": "<p>fantastic</p>",
        "id": 188958695,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582573288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188951829\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188951829\">said</a>:</p>\n<blockquote>\n<p>similar to <code>RustIrDatabase</code></p>\n</blockquote>\n<p>if it helps, I think the interner would probably <em>be</em> the RustIrData in many cases -- or a wrapper around it</p>",
        "id": 188958834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582573402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188954278\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188954278\">said</a>:</p>\n<blockquote>\n<p>and it requires that i add a lifetime param to Program</p>\n</blockquote>\n<p>I think this is probably going in the wrong direction</p>",
        "id": 188958866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582573428
    },
    {
        "content": "<p>let me check the PR now though, I was afk for a bit</p>",
        "id": 188958942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582573453
    },
    {
        "content": "<p>awe fk this generates a lot more code than I thought</p>",
        "id": 188959004,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582573499
    },
    {
        "content": "<p>okay</p>",
        "id": 188959011,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582573504
    },
    {
        "content": "<p>i shall stop cargo culting and wait for guidance</p>",
        "id": 188959050,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582573533
    },
    {
        "content": "<p>:)</p>",
        "id": 188959051,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582573534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> ok so the branch in your PR .. builds?</p>",
        "id": 188959880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574096
    },
    {
        "content": "<p>with <code>cargo check --all</code> at least</p>",
        "id": 188959887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574102
    },
    {
        "content": "<p>does it right now?</p>",
        "id": 188959898,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582574112
    },
    {
        "content": "<p>eyy cool</p>",
        "id": 188959912,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582574123
    },
    {
        "content": "<p>yea</p>",
        "id": 188959914,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582574123
    },
    {
        "content": "<p>is the question then \"did I do it right\"</p>",
        "id": 188959932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574141
    },
    {
        "content": "<p>thats mostly thanks to creative use of <code>unimplemented!()</code></p>",
        "id": 188959943,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582574146
    },
    {
        "content": "<p>or \"egads this feels so messy in part X\"</p>",
        "id": 188959948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574148
    },
    {
        "content": "<p>ok :)</p>",
        "id": 188959952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574151
    },
    {
        "content": "<p>I see</p>",
        "id": 188960009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574172
    },
    {
        "content": "<p>I'm going to poke around a bit</p>",
        "id": 188960035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574195
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;k</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Env</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;k</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">interner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">ChalkIr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188960047,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582574202
    },
    {
        "content": "<p>probably a good place to start poking</p>",
        "id": 188960053,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582574208
    },
    {
        "content": "<p>I'm removing <code>GOal::interner</code></p>",
        "id": 188960176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574300
    },
    {
        "content": "<p>which seems wrong</p>",
        "id": 188960178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574302
    },
    {
        "content": "<p>ok</p>",
        "id": 188960198,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582574317
    },
    {
        "content": "<p>(side note, I do wonder if we should <code>trait RustIrDatabase: Interner</code>, but I'm going to leave it as is for now)</p>",
        "id": 188960218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574332
    },
    {
        "content": "<p>to explain why it seems wrong: Goals are a \"data structure\" that gets allocated in the interner, they don't own the interner</p>",
        "id": 188960390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574457
    },
    {
        "content": "<p>same is probably true of <code>Env&lt;'k&gt;</code> =)</p>",
        "id": 188960413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574469
    },
    {
        "content": "<p>oh, no, that's just used during lowering</p>",
        "id": 188960446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574482
    },
    {
        "content": "<p>i see i see</p>",
        "id": 188960450,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582574496
    },
    {
        "content": "<p>I guess that for now we can change <code>ChalkIr</code> to just <code>struct ChalkIr;</code></p>",
        "id": 188960478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574516
    },
    {
        "content": "<p>and return this global constant</p>",
        "id": 188960502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I'm debating the best way to give feedback here :)</p>",
        "id": 188961165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574966
    },
    {
        "content": "<p>I guess I can leave comments on the PR</p>",
        "id": 188961176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582574972
    },
    {
        "content": "<p>okay</p>",
        "id": 188961178,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582574972
    },
    {
        "content": "<p>im fiddling with the interner around goal</p>",
        "id": 188961190,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582574982
    },
    {
        "content": "<p>actually</p>",
        "id": 188961286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582575048
    },
    {
        "content": "<p>what I think I will do is push some commits with <code>// NDM</code> containing a few notes</p>",
        "id": 188961298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582575057
    },
    {
        "content": "<p>okay</p>",
        "id": 188961390,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582575122
    },
    {
        "content": "<p>so I see the changes you made, now we have interners all throughout chalk integration it seems</p>",
        "id": 188962069,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582575650
    },
    {
        "content": "<p>OK, I just pushed a commit with a bunch of comments</p>",
        "id": 188962071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582575652
    },
    {
        "content": "<p>one for each <code>unimplemented!</code></p>",
        "id": 188962086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582575664
    },
    {
        "content": "<p>okay</p>",
        "id": 188962087,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582575664
    },
    {
        "content": "<p>looking for that</p>",
        "id": 188962091,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582575666
    },
    {
        "content": "<p>the basic pattern is this</p>",
        "id": 188962102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582575676
    },
    {
        "content": "<p>there are structs that correspond to \"some operation\"</p>",
        "id": 188962107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582575680
    },
    {
        "content": "<p>e.g., <code>Canonicalization</code> and <code>Truncation</code></p>",
        "id": 188962120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582575691
    },
    {
        "content": "<p>those structs should store a <code>&amp;I</code> and implement <code>Folder</code></p>",
        "id": 188962128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582575699
    },
    {
        "content": "<p>but they will often need to get it from an additional argument on the method that constructs the struct</p>",
        "id": 188962141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582575710
    },
    {
        "content": "<p>(which will propagate, but hopefully not too far...)</p>",
        "id": 188962145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582575717
    },
    {
        "content": "<p>there are a few other cases, like <code>Substitution&lt;I&gt;</code>, where we were trying to get away with just having one struct that represents part of the IR <em>and</em> implements <code>TypeFolder</code>. That doesn't work I guess.</p>",
        "id": 188962191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582575746
    },
    {
        "content": "<p>The alternative would be to modify the <code>fold_with</code> methods to thread the <code>interner</code> down</p>",
        "id": 188962201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582575759
    },
    {
        "content": "<p>instead of having a <code>fn interner(&amp;self)</code> method in <code>TypeFolder</code></p>",
        "id": 188962210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582575770
    },
    {
        "content": "<p>but I <em>think</em> it's probably better this way</p>",
        "id": 188962221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582575779
    },
    {
        "content": "<p>okay</p>",
        "id": 188962434,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582575945
    },
    {
        "content": "<p>so when you say which will propogate</p>",
        "id": 188962441,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582575951
    },
    {
        "content": "<p>you mean just add interner args onto fns that call fns like <code>shift_in</code> until you get to some place where you can access a concrete interner</p>",
        "id": 188962500,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582575979
    },
    {
        "content": "<p>either as an arg thats already passed or from the db or something</p>",
        "id": 188962512,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582575996
    },
    {
        "content": "<p>or another folder that has its own self.interner() method</p>",
        "id": 188962551,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582576030
    },
    {
        "content": "<p>yeah</p>",
        "id": 188962675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582576110
    },
    {
        "content": "<p>basically</p>",
        "id": 188962681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582576117
    },
    {
        "content": "<p>I would do them one at a time :)</p>",
        "id": 188962683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582576121
    },
    {
        "content": "<p>I've not read in depth apart from searching for <code>unimplemented!</code>, though my spot checks all seemed to look roughly like what I expect</p>",
        "id": 188962718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582576154
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">needs_shift</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">shifted_in</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188962839,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582576224
    },
    {
        "content": "<p>looks like I need to add an arg here</p>",
        "id": 188962853,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582576237
    },
    {
        "content": "<p>another case where a visitor would be nice, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> =)</p>",
        "id": 188963083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582576402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188962853\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/188962853\">said</a>:</p>\n<blockquote>\n<p>looks like I need to add an arg here</p>\n</blockquote>\n<p>yes</p>",
        "id": 188963086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582576405
    },
    {
        "content": "<p>though that's quite annoying</p>",
        "id": 188963087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582576408
    },
    {
        "content": "<p>I mean mostly because we shouldn't need to do any interning here</p>",
        "id": 188963103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582576418
    },
    {
        "content": "<p>I don't think it's called in a ton of places..?</p>",
        "id": 188963121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582576428
    },
    {
        "content": "<p>I'm still working on the first unimplemented call</p>",
        "id": 188963384,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582576584
    },
    {
        "content": "<p>lol</p>",
        "id": 188963385,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582576585
    },
    {
        "content": "<p>its spreading a lot</p>",
        "id": 188963386,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582576587
    },
    {
        "content": "<p>its not bad</p>",
        "id": 188963391,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582576592
    },
    {
        "content": "<p>like not deeply</p>",
        "id": 188963395,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582576594
    },
    {
        "content": "<p>but it seems like this touches a lot of places, thankfully most already have interners threaded to them</p>",
        "id": 188963417,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582576614
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Zipper</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AnswerSubstitutor</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">zip_tys</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">answer</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pending</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fallible</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">pending</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">normalize_shallow</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">interner</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">Zip</span>::<span class=\"n\">zip_with</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">answer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">pending</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188963437,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582576635
    },
    {
        "content": "<p>this one doesn't though</p>",
        "id": 188963441,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582576638
    },
    {
        "content": "<p>also this one is a conflicting mut and shared borrow</p>",
        "id": 188963551,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582576733
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fold_ty</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">binders</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fallible</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">normalized_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infer</span><span class=\"p\">.</span><span class=\"n\">normalize_shallow</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">interner</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fold_ty</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">normalized_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">binders</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188963556,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582576736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> hmm</p>",
        "id": 188968725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582580188
    },
    {
        "content": "<p>probably <code>self.interner</code> would work fine there?</p>",
        "id": 188968742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582580196
    },
    {
        "content": "<p>i.e., the problem is using the <em>method</em> vs the field</p>",
        "id": 188968752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582580206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> im a little confused by how to handle the <code>apply</code> method for Substitution</p>",
        "id": 188976504,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582586028
    },
    {
        "content": "<p>I added a SubstFolder type and moved the Folder impl to that type instead of Substitution</p>",
        "id": 188976562,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582586054
    },
    {
        "content": "<p>and gave it a reference to the Substitution and Interner that it needs to operate</p>",
        "id": 188976571,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582586064
    },
    {
        "content": "<p>but I'm not sure how to use that from <code>apply</code> or how to use apply throughout the rest of the code</p>",
        "id": 188976579,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582586078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> well in some parts of the code that have a <code>s: Substitution</code> you will find something like <code>ty.fold_with(&amp;s, 0)</code></p>",
        "id": 189048218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582656317
    },
    {
        "content": "<p>that call can be changed to <code>s.apply(ty)</code></p>",
        "id": 189048234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582656325
    },
    {
        "content": "<p>cool</p>",
        "id": 189049060,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582656953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> pushed a bunch of changes</p>",
        "id": 189451162,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583102564
    },
    {
        "content": "<p>getting close</p>",
        "id": 189451165,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583102574
    },
    {
        "content": "<p>i've left all the things I still dont know how to handle <code>unimplemented!()</code> its mostly target_interners</p>",
        "id": 189451172,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583102595
    },
    {
        "content": "<p>theres a few places where I am pretty sure it will just need to added as an arg to the struct that Folder is implemented on</p>",
        "id": 189451180,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583102617
    },
    {
        "content": "<p>but I'll wait for general feedback before trying to guess at things</p>",
        "id": 189451188,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583102636
    },
    {
        "content": "<p>if someone is around ping me and I can switch to synchronous mode and request feedback on specific things I and how I expect it will need to be handled</p>",
        "id": 189451235,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583102674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I am around-ish</p>",
        "id": 189451990,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583103979
    },
    {
        "content": "<p>Woo</p>",
        "id": 189452000,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583104035
    },
    {
        "content": "<p>Question time it is</p>",
        "id": 189452001,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583104038
    },
    {
        "content": "<p>is it safe to add an interner member to</p>",
        "id": 189452097,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583104182
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Folder</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">OccursCheck</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189452098,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583104185
    },
    {
        "content": "<p>occurscheck</p>",
        "id": 189452100,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583104188
    },
    {
        "content": "<p>for its folder impl</p>",
        "id": 189452101,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583104192
    },
    {
        "content": "<p>Let me check</p>",
        "id": 189452144,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583104211
    },
    {
        "content": "<p>I think yes</p>",
        "id": 189452148,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583104219
    },
    {
        "content": "<p>same thing for</p>",
        "id": 189452151,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583104225
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">UMapToCanonical</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;q</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">universes</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;q</span><span class=\"w\"> </span><span class=\"n\">UniverseMap</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189452154,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583104227
    },
    {
        "content": "<p>Yeah, probably</p>",
        "id": 189452160,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583104240
    },
    {
        "content": "<p>and UMapFromCanonical</p>",
        "id": 189452164,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583104260
    },
    {
        "content": "<p>okay</p>",
        "id": 189452166,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583104261
    },
    {
        "content": "<p>I think for most of the <code>Folder</code>s adding a <code>&amp;Interner</code> field is correct</p>",
        "id": 189452173,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583104283
    },
    {
        "content": "<p>okay should I add an interner field to the universe</p>",
        "id": 189452225,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583104335
    },
    {
        "content": "<p>or thread it through the args on methods it uses that need it</p>",
        "id": 189452229,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583104354
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">UniverseMap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// A reverse map -- for each universe Ux that appears in</span>\n<span class=\"w\">    </span><span class=\"sd\">/// `quantified`, the corresponding universe in the original was</span>\n<span class=\"w\">    </span><span class=\"sd\">/// `universes[x]`.</span>\n<span class=\"w\">    </span><span class=\"n\">universes</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">UniverseIndex</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189452234,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583104372
    },
    {
        "content": "<p>I think args</p>",
        "id": 189452251,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583104412
    },
    {
        "content": "<p>okay</p>",
        "id": 189452255,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583104421
    },
    {
        "content": "<p>maybe the most general guidance is: if there is a reference in the struct, also add an interner reference, otherwise, pass it as an arg</p>",
        "id": 189452319,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583104505
    },
    {
        "content": "<p>okay so now we're down to a fun one</p>",
        "id": 189452660,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105069
    },
    {
        "content": "<p>figuring out how to appease borrowchk</p>",
        "id": 189452665,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105086
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">impl_where_clauses</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">impl_datum</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">binders</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">map_ref</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">where_clauses</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">wc</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">wc</span><span class=\"p\">.</span><span class=\"n\">substitute</span><span class=\"p\">(</span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"cm\">/* fails borrowck builder.db.interner() */</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">impl_params</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">// 2. any where-clauses from the `type` declaration in the trait: the</span>\n<span class=\"w\">            </span><span class=\"c1\">//    parameters must be substituted with those of the impl</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">assoc_ty_where_clauses</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">associated_ty</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">binders</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">map_ref</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">where_clauses</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">wc</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">wc</span><span class=\"p\">.</span><span class=\"n\">substitute</span><span class=\"p\">(</span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"cm\">/* fails borrowck builder.db.interner() */</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">projection</span><span class=\"p\">.</span><span class=\"n\">substitution</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">// Create the final program clause:</span>\n<span class=\"w\">            </span><span class=\"c1\">//</span>\n<span class=\"w\">            </span><span class=\"c1\">// ```notrust</span>\n<span class=\"w\">            </span><span class=\"c1\">// -- Rule Normalize-From-Impl</span>\n<span class=\"w\">            </span><span class=\"c1\">// forall&lt;&#39;a, T&gt; {</span>\n<span class=\"w\">            </span><span class=\"c1\">//     Normalize(&lt;Vec&lt;T&gt; as Iterable&gt;::IntoIter&lt;&#39;a&gt; -&gt; Iter&lt;&#39;a, T&gt;&gt;) :-</span>\n<span class=\"w\">            </span><span class=\"c1\">//         Implemented(T: Clone),  // (1)</span>\n<span class=\"w\">            </span><span class=\"c1\">//         Implemented(Iter&lt;&#39;a, T&gt;: &#39;a).   // (2)</span>\n<span class=\"w\">            </span><span class=\"c1\">// }</span>\n<span class=\"w\">            </span><span class=\"c1\">// ```</span>\n<span class=\"w\">            </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">push_clause</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">Normalize</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">alias</span>: <span class=\"nc\">projection</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">ty</span>: <span class=\"nc\">assoc_ty_value</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">impl_where_clauses</span><span class=\"p\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">assoc_ty_where_clauses</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189452675,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105113
    },
    {
        "content": "<p>so it wants to borrow builder as mut to do the push_clause</p>",
        "id": 189452727,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105168
    },
    {
        "content": "<p>but retrieving the interner from the db (which is a trait object) borrows the entire thing apparently</p>",
        "id": 189452732,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105186
    },
    {
        "content": "<p>ooh wait no its becasue of the closure</p>",
        "id": 189452735,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105196
    },
    {
        "content": "<p>i can fix this actually</p>",
        "id": 189452738,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105206
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">interner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">interner</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">impl_where_clauses</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">impl_datum</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">binders</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">map_ref</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">where_clauses</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">wc</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">wc</span><span class=\"p\">.</span><span class=\"n\">substitute</span><span class=\"p\">(</span><span class=\"n\">interner</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">impl_params</span><span class=\"p\">));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189452746,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105233
    },
    {
        "content": "<p>ez</p>",
        "id": 189452747,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105235
    },
    {
        "content": "<p>okay!</p>",
        "id": 189452751,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105271
    },
    {
        "content": "<p>we're almost done!</p>",
        "id": 189452753,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105275
    },
    {
        "content": "<p>everything that is left is the exact same thing</p>",
        "id": 189452791,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105283
    },
    {
        "content": "<p>all the implementors of Folder currently have</p>",
        "id": 189452794,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105292
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">target_interner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">I</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189452795,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105295
    },
    {
        "content": "<p>do I just yolo them all as <code>self.interner()</code> and type checking handle it when its wrong?</p>",
        "id": 189452802,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105319
    },
    {
        "content": "<p>also</p>",
        "id": 189452806,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105323
    },
    {
        "content": "<p>actually</p>",
        "id": 189452807,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105325
    },
    {
        "content": "<p>ooh yea this is probably easy</p>",
        "id": 189452810,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105337
    },
    {
        "content": "<p>most of these return &amp;I on both</p>",
        "id": 189452813,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105341
    },
    {
        "content": "<p>yeah, do we current have any <code>Folder</code>s where <code>Interner</code> != <code>TargetInterner</code></p>",
        "id": 189452827,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583105387
    },
    {
        "content": "<p>ooh boy here's the fun part</p>",
        "id": 189452873,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105423
    },
    {
        "content": "<p>lets see how cargo test works</p>",
        "id": 189452875,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105427
    },
    {
        "content": "<p>100% passed</p>",
        "id": 189452883,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105449
    },
    {
        "content": "<p>okay in theory this PR is done minus review</p>",
        "id": 189452884,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105453
    },
    {
        "content": "<p>Nice</p>",
        "id": 189452894,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583105486
    },
    {
        "content": "<p>okay</p>",
        "id": 189452895,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583105488
    },
    {
        "content": "<p>I won't be able to review tonight</p>",
        "id": 189452901,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583105497
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/330\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/330\">https://github.com/rust-lang/chalk/pull/330</a></p>",
        "id": 189452903,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105500
    },
    {
        "content": "<p>ack</p>",
        "id": 189452904,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105501
    },
    {
        "content": "<p>And definitely would want to defer to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> regardless</p>",
        "id": 189452906,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583105511
    },
    {
        "content": "<p>im in no rush, but its there and ready for whoever whenever they're ready to review</p>",
        "id": 189452908,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105513
    },
    {
        "content": "<p>:thumbsup:</p>",
        "id": 189452909,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105518
    },
    {
        "content": "<p>im just excited it works!</p>",
        "id": 189452918,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105522
    },
    {
        "content": "<p>not surprising but yea</p>",
        "id": 189452948,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105527
    },
    {
        "content": "<p>god i fucking love rust</p>",
        "id": 189452951,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105540
    },
    {
        "content": "<p>haha</p>",
        "id": 189452953,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583105549
    },
    {
        "content": "<p>this is actually a key piece of the rustc integration, it turns out</p>",
        "id": 189452956,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583105562
    },
    {
        "content": "<p>change almost 700 lines and break 0 tests once u get it compiling</p>",
        "id": 189452958,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105565
    },
    {
        "content": "<p>welp</p>",
        "id": 189452959,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105569
    },
    {
        "content": "<p>i hope I didnt delay things too much</p>",
        "id": 189452960,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105572
    },
    {
        "content": "<p>:S</p>",
        "id": 189452961,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105574
    },
    {
        "content": "<p>i got stuck in a mini rut this week, I have a bad habit of putting things down and then having trouble starting again</p>",
        "id": 189452968,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105592
    },
    {
        "content": "<p>been very obsessed with error handling stuff which took up a bunch of my free time</p>",
        "id": 189452973,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105608
    },
    {
        "content": "<p>no, didn't delay anything. I got around this with some hacky <code>unsafe</code> lifetime transmutation, but that's not okay to stay at merge though</p>",
        "id": 189453021,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583105676
    },
    {
        "content": "<p>thanks for all the work :)</p>",
        "id": 189453026,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583105726
    },
    {
        "content": "<p>my pleasure :D</p>",
        "id": 189453073,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105796
    },
    {
        "content": "<p>let me know if you want another something to work on ;)</p>",
        "id": 189453082,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583105843
    },
    {
        "content": "<p>I think there was something that niko was looking for help on that i offered to help with during the last meeting</p>",
        "id": 189453152,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583105990
    },
    {
        "content": "<p>possibly</p>",
        "id": 189453200,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583106043
    },
    {
        "content": "<p>some sort of \"Predicate stuff\"</p>",
        "id": 189453201,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583106045
    },
    {
        "content": "<p>maybe the binders</p>",
        "id": 189453204,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583106047
    },
    {
        "content": "<p>ohhh right</p>",
        "id": 189453205,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583106050
    },
    {
        "content": "<p>if you want to point me at that I can start investigating it</p>",
        "id": 189453211,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583106072
    },
    {
        "content": "<p>looks like refactoring it in rustc</p>",
        "id": 189453223,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583106101
    },
    {
        "content": "<p>I don't know much about it</p>",
        "id": 189453224,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583106103
    },
    {
        "content": "<p>or, really anything about it</p>",
        "id": 189453227,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583106110
    },
    {
        "content": "<p>so ill need to look at how Predicate works in rustc and in chalk</p>",
        "id": 189453228,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583106110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> this is amazing</p>",
        "id": 189507451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583166196
    },
    {
        "content": "<p>I'm going to review now</p>",
        "id": 189507455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583166200
    },
    {
        "content": "<p>happy to help with guiding the <code>Predicate</code> thing</p>",
        "id": 189507459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583166208
    },
    {
        "content": "<p><span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 189507476,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583166223
    },
    {
        "content": "<p>Hmm, <code>cargo test --all</code> doesn't build though</p>",
        "id": 189508112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583166563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> looks like a bunch of tests need updating, though I think they can be changed to just add <code>ChalkIr</code> as the interner</p>",
        "id": 189508261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583166649
    },
    {
        "content": "<p>Nope, that's good to go</p>",
        "id": 189509086,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583167151
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> did you mean that comment for <a class=\"stream-topic\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits/topic/removing.20dependency.20on.20intern\">#wg-traits &gt; removing dependency on intern</a>?)</p>",
        "id": 189509122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583167177
    },
    {
        "content": "<p>oops yes</p>",
        "id": 189509132,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583167186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> which tests do I need to add chalkir to?</p>",
        "id": 189511328,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583168483
    },
    {
        "content": "<p>it seems like making it so the db just returns a &amp;ChalkIr makes it so all the tests pass without modification</p>",
        "id": 189511444,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583168530
    },
    {
        "content": "<p>so I'm unsure what changes are needed</p>",
        "id": 189511459,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583168544
    },
    {
        "content": "<p>i did catch a few accidentally leftover lint allows tho</p>",
        "id": 189511475,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583168555
    },
    {
        "content": "<p>Will also need to rebase :)</p>",
        "id": 189511977,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583168883
    },
    {
        "content": "<p>Actually, since <a href=\"https://github.com/rust-lang/chalk/pull/338\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/338\">https://github.com/rust-lang/chalk/pull/338</a> is merged, a few of your logic changes should be nicer (don't have to pass <code>context</code>)</p>",
        "id": 189514756,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583170351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189511328\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189511328\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> which tests do I need to add chalkir to?</p>\n</blockquote>\n<p>just run <code>cargo test --all</code></p>",
        "id": 189522013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583174663
    },
    {
        "content": "<p>and you'll see...</p>",
        "id": 189522019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583174667
    },
    {
        "content": "<p>oh, lol</p>",
        "id": 189522085,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583174712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> well, let me see</p>",
        "id": 189522089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583174713
    },
    {
        "content": "<p>maybe my git fetch was out of date</p>",
        "id": 189522100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583174717
    },
    {
        "content": "<p>nope</p>",
        "id": 189522113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583174727
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>cargo test --all\n   Compiling chalk-macros v0.1.1 (/home/nmatsakis/versioned/chalk-1/chalk-macros)\n   Compiling chalk-engine v0.9.0 (/home/nmatsakis/versioned/chalk-1/chalk-engine)\n   Compiling chalk-ir v0.1.0 (/home/nmatsakis/versioned/chalk-1/chalk-ir)\n   Compiling chalk-rust-ir v0.1.0 (/home/nmatsakis/versioned/chalk-1/chalk-rust-ir)\n   Compiling chalk-solve v0.1.0 (/home/nmatsakis/versioned/chalk-1/chalk-solve)\nerror[E0061]: this function takes 1 parameter but 0 parameters were supplied\n  --&gt; chalk-solve/src/infer/test.rs:11:36\n   |\n11 |     let a = table.new_variable(U0).to_ty();\n   |                                    ^^^^^ expected 1 parameter\n   |\n  ::: chalk-solve/src/infer/var.rs:57:5\n   |\n57 |     pub(crate) fn to_ty(self, interner: &amp;I) -&gt; Ty&lt;I&gt; {\n   |     ------------------------------------------------ defined here\n\nerror[E0061]: this function takes 1 parameter but 0 parameters were supplied\n  --&gt; chalk-solve/src/infer/test.rs:12:36\n   |\n12 |     let b = table.new_variable(U0).to_ty();\n   |                                    ^^^^^ expected 1 parameter\n   |\n  ::: chalk-solve/src/infer/var.rs:57:5\n   |\n57 |     pub(crate) fn to_ty(self, interner: &amp;I) -&gt; Ty&lt;I&gt; {\n   |     ------------------------------------------------ defined here\n</pre></div>",
        "id": 189522127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583174737
    },
    {
        "content": "<p>yea no its super broken</p>",
        "id": 189523916,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583175712
    },
    {
        "content": "<p>im currently fighting the <code>ty!</code> macro</p>",
        "id": 189523921,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583175718
    },
    {
        "content": "<p>oh... hmm</p>",
        "id": 189523962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583175724
    },
    {
        "content": "<p>gonna have to take a break rq tho for a paid intermission</p>",
        "id": 189523971,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583175729
    },
    {
        "content": "<p>and by that i mean work</p>",
        "id": 189523992,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583175741
    },
    {
        "content": "<p>the hacky fix would be to have <code>ty!</code> and friends just reference some variable <code>interner</code></p>",
        "id": 189524002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583175746
    },
    {
        "content": "<p>and depend on having the surrounding context define that</p>",
        "id": 189524015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583175753
    },
    {
        "content": "<p>or.. well</p>",
        "id": 189524025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583175759
    },
    {
        "content": "<p>they can just hardcode <code>ChalkIr</code></p>",
        "id": 189524029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583175762
    },
    {
        "content": "<p>that's fine</p>",
        "id": 189524033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583175764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189523992\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189523992\">said</a>:</p>\n<blockquote>\n<p>and by that i mean work</p>\n</blockquote>\n<p>by all means :)</p>",
        "id": 189524038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583175770
    },
    {
        "content": "<p>i will just hack it to use &amp;ChalkIr for now I think</p>",
        "id": 189524089,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583175792
    },
    {
        "content": "<p>i was trying to add a <code>$interner:ident,</code> to each part of the macro</p>",
        "id": 189524115,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583175807
    },
    {
        "content": "<p>but it was getting hard to debug when all you get told is \"no rule to handle token\"</p>",
        "id": 189524127,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583175821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189524115\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189524115\">said</a>:</p>\n<blockquote>\n<p>i was trying to add a <code>$interner:ident,</code> to each part of the macro</p>\n</blockquote>\n<p>not worth it, yeah</p>",
        "id": 189524266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583175889
    },
    {
        "content": "<p>besides it'll make the macro's annoying to use</p>",
        "id": 189524271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583175894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay well when i didnt fk with the macro api the changes were easy</p>",
        "id": 189525050,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583176392
    },
    {
        "content": "<p>so <code>cargo test --all</code> should now compile and pass</p>",
        "id": 189525060,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583176399
    },
    {
        "content": "<p>Yeah, for tests, just hardcode &amp;ChalkIr since that's what it's for :)</p>",
        "id": 189526482,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583177134
    },
    {
        "content": "<p>I was just worried that ChalkIr would someday get members</p>",
        "id": 189526624,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583177198
    },
    {
        "content": "<p><code>ChalkIr</code> is essentially only for testing and <code>chalk-integration</code></p>",
        "id": 189526914,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583177354
    },
    {
        "content": "<p>I suppose if it did ever get members, we could deal with it then :)</p>",
        "id": 189526940,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583177373
    },
    {
        "content": "<p>sounds good</p>",
        "id": 189527021,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583177402
    },
    {
        "content": "<p>yep, I don't expect <code>ChalkIr</code> to ever change and get members -- I could imagine maybe renaming it to <code>TestIr</code>, but it's basically there to be the \"simple thing we use for testing\"</p>",
        "id": 189531755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583180216
    },
    {
        "content": "<p>man, this is an exciting day</p>",
        "id": 189531781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583180237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> I might merge <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>'s branch first, since I expect it'll conflict with yours, but it feels like hers would be more painful to rebase</p>",
        "id": 189531885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583180304
    },
    {
        "content": "<p>Agreed, because Jane's branch has more straightforward changes</p>",
        "id": 189531983,
        "sender_full_name": "detrumi",
        "timestamp": 1583180398
    },
    {
        "content": "<p>hype</p>",
        "id": 189532062,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583180426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189531781\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189531781\">said</a>:</p>\n<blockquote>\n<p>man, this is an exciting day</p>\n</blockquote>\n<p>Yes it is</p>",
        "id": 189532161,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583180498
    },
    {
        "content": "<p>That's 4 Chalk PRs merged today! Wow</p>",
        "id": 189537459,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583183627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Rebased. You were right, rebasing was a breeze <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 189539007,
        "sender_full_name": "detrumi",
        "timestamp": 1583184555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I hate to say it, but there's still more work to do on this refactoring...</p>",
        "id": 189539254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583184701
    },
    {
        "content": "<p>I'm going to open some follow-up issues</p>",
        "id": 189539262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583184705
    },
    {
        "content": "<p>they ought to be much smaller though</p>",
        "id": 189539268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583184709
    },
    {
        "content": "<p>we could maybe find others :)</p>",
        "id": 189539273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583184713
    },
    {
        "content": "<p>first issue: <a href=\"https://github.com/rust-lang/chalk/issues/339\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/339\">https://github.com/rust-lang/chalk/issues/339</a></p>",
        "id": 189539284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583184719
    },
    {
        "content": "<p>ez</p>",
        "id": 189539461,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583184824
    },
    {
        "content": "<p>i got this</p>",
        "id": 189539463,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583184825
    },
    {
        "content": "<p>there is also <a href=\"https://github.com/rust-lang/chalk/issues/340\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/340\">https://github.com/rust-lang/chalk/issues/340</a></p>",
        "id": 189539539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583184861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> this one might be both easier and more important</p>",
        "id": 189539553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583184878
    },
    {
        "content": "<p>okay</p>",
        "id": 189540022,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583185209
    },
    {
        "content": "<p>started vaguely working on the intern data if you want to comment on it here</p>",
        "id": 189540083,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583185270
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/342/files\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/342/files\">https://github.com/rust-lang/chalk/pull/342/files</a></p>",
        "id": 189540085,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583185270
    },
    {
        "content": "<p>will switch to the easier/more important one</p>",
        "id": 189540090,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583185277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> heres the intern_lifetime done <a href=\"https://github.com/rust-lang/chalk/pull/343\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/343\">https://github.com/rust-lang/chalk/pull/343</a></p>",
        "id": 189541371,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186023
    },
    {
        "content": "<p>do you want them as separate PRs or all as one PR for issue 340?</p>",
        "id": 189541385,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186036
    },
    {
        "content": "<p>either way</p>",
        "id": 189541441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186050
    },
    {
        "content": "<p>I figured adding <code>&amp;self</code> to intern methods would be relatively easy since you did all the plumbing already</p>",
        "id": 189541471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186065
    },
    {
        "content": "<p>k separate but im going to build off of the previous pr in each one</p>",
        "id": 189541477,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> how should i add interners to this cast_to fn</p>",
        "id": 189541762,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186243
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">CastTo</span><span class=\"o\">&lt;</span><span class=\"n\">Parameter</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Lifetime</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">cast_to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Parameter</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Parameter</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ParameterKind</span>::<span class=\"n\">Lifetime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189541814,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186273
    },
    {
        "content": "<p>arg on trait?</p>",
        "id": 189541826,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186281
    },
    {
        "content": "<p>hmm</p>",
        "id": 189542039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186380
    },
    {
        "content": "<p>I think add to <code>cast_to</code> method</p>",
        "id": 189542043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186384
    },
    {
        "content": "<p>okay so this adds an unconstrained type parameter that needs to be defined by the trait</p>",
        "id": 189542200,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186458
    },
    {
        "content": "<p>do we want to require T: HasInterner and define the interner type as <code>interner: &amp;T::Interner</code></p>",
        "id": 189542244,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186478
    },
    {
        "content": "<p>the alternative is to do <code>CastTo&lt;T, I: Interner&gt;</code> but that will duplicate the I parameter a ton in the various impls</p>",
        "id": 189542281,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186501
    },
    {
        "content": "<p>I would probably change <code>cast_to</code> to</p>",
        "id": 189542362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186531
    },
    {
        "content": "<p>ah hmm</p>",
        "id": 189542379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186539
    },
    {
        "content": "<p>so you could do</p>",
        "id": 189542395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186546
    },
    {
        "content": "<p>I'm debating :)</p>",
        "id": 189542421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186564
    },
    {
        "content": "<p>lol</p>",
        "id": 189542427,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189542244\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189542244\">said</a>:</p>\n<blockquote>\n<p>do we want to require T: HasInterner and define the interner type as <code>interner: &amp;T::Interner</code></p>\n</blockquote>\n<p>yeah this is what I was going to suggest</p>",
        "id": 189542431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186569
    },
    {
        "content": "<p>but I guess it depends on the impls</p>",
        "id": 189542438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186572
    },
    {
        "content": "<p>ill go down this path and see if it hits any snags</p>",
        "id": 189542458,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186585
    },
    {
        "content": "<p>because it seems like most of these types could easily implement HasInterner</p>",
        "id": 189542472,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186596
    },
    {
        "content": "<p>yeah</p>",
        "id": 189542515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186623
    },
    {
        "content": "<p>from a quick skim it looks fine</p>",
        "id": 189542523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186627
    },
    {
        "content": "<p>actually nope</p>",
        "id": 189542542,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186640
    },
    {
        "content": "<p>Canonical doesnt have an interner param</p>",
        "id": 189542590,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186646
    },
    {
        "content": "<p>```impl&lt;T, U&gt; CastTo&lt;Canonical&lt;U&gt;&gt; for Canonical&lt;T&gt;<br>\nwhere<br>\n    T: CastTo&lt;U&gt;,</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 189542617,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186663
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">CastTo</span><span class=\"o\">&lt;</span><span class=\"n\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Canonical</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">CastTo</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189542632,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186671
    },
    {
        "content": "<p>well</p>",
        "id": 189542662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186691
    },
    {
        "content": "<p>unfortunate :|</p>",
        "id": 189542665,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186692
    },
    {
        "content": "<p>hold up :)</p>",
        "id": 189542672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186696
    },
    {
        "content": "<p>I think we could add a <code>impl&lt;T&gt; HasInterner for Canonical&lt;T&gt; where T: HasInterner</code></p>",
        "id": 189542717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186719
    },
    {
        "content": "<p>and then a <code>T: HasInterner, U: HasInterner</code> on the <code>CastTo</code> impl</p>",
        "id": 189542727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583186727
    },
    {
        "content": "<p>okay</p>",
        "id": 189543025,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583186883
    },
    {
        "content": "<p>in the cases where theres a T -&gt; U conversion which interner should I be using? I'm guessing they're the same interners and it doesnt matter so I'm defaulting to T::Interner.</p>",
        "id": 189543245,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583187073
    },
    {
        "content": "<p>god i cant wait for implied bounds to be a thing</p>",
        "id": 189543491,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583187267
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">HasInterner</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">TypeName</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189543499,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583187282
    },
    {
        "content": "<p>shouldnt need this bound!</p>",
        "id": 189543501,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583187285
    },
    {
        "content": "<p>til derive(HasInterner)</p>",
        "id": 189544492,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583187997
    },
    {
        "content": "<p>i might be doing bad things that I'm asked to undo</p>",
        "id": 189544522,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583188023
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/15PMDwC567NxmKYG0IxR4W_J/Screenshot-from-2020-03-02-14-27-40.png\" target=\"_blank\" title=\"Screenshot-from-2020-03-02-14-27-40.png\">Screenshot-from-2020-03-02-14-27-40.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/15PMDwC567NxmKYG0IxR4W_J/Screenshot-from-2020-03-02-14-27-40.png\" target=\"_blank\" title=\"Screenshot-from-2020-03-02-14-27-40.png\"><img src=\"/user_uploads/4715/15PMDwC567NxmKYG0IxR4W_J/Screenshot-from-2020-03-02-14-27-40.png\"></a></div>",
        "id": 189544559,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583188070
    },
    {
        "content": "<p>is this too hacky??</p>",
        "id": 189544618,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583188092
    },
    {
        "content": "<p>I should just use the derive</p>",
        "id": 189544636,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583188101
    },
    {
        "content": "<p>I'm gonna just use the derive</p>",
        "id": 189544646,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583188109
    },
    {
        "content": "<p>do we have a derive, I forget?</p>",
        "id": 189545502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583188876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189543245\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189543245\">said</a>:</p>\n<blockquote>\n<p>in the cases where theres a T -&gt; U conversion which interner should I be using? I'm guessing they're the same interners and it doesnt matter so I'm defaulting to T::Interner.</p>\n</blockquote>\n<p>mmm I think you would use <code>U::Interner</code>, since presumably we are <em>creating</em> values of type <code>U</code></p>",
        "id": 189545529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583188899
    },
    {
        "content": "<p>that said</p>",
        "id": 189545531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583188903
    },
    {
        "content": "<p>I agree that we probably just want to use <code>cast_to</code> for cases where interner is the same</p>",
        "id": 189545540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583188914
    },
    {
        "content": "<p>so really we probably want <code>U: HasInterner&lt;Interner = T::Interner&gt;</code></p>",
        "id": 189545595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583188927
    },
    {
        "content": "<p>yea it was U</p>",
        "id": 189545629,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583188963
    },
    {
        "content": "<p>the compiler helped me out</p>",
        "id": 189545636,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583188966
    },
    {
        "content": "<p>yeah, though when we make <code>data</code> require an interner</p>",
        "id": 189545688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583189032
    },
    {
        "content": "<p>I thikn we'll need them to be \"equal\"</p>",
        "id": 189545694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583189037
    },
    {
        "content": "<p>or else we'd have to pass two interners down</p>",
        "id": 189545697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583189040
    },
    {
        "content": "<p>okay</p>",
        "id": 189546691,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583189890
    },
    {
        "content": "<p>can do</p>",
        "id": 189546692,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583189891
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">FromIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_iter</span><span class=\"o\">&lt;</span><span class=\"n\">II</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">iter</span>: <span class=\"nc\">II</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">II</span>: <span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Goal</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">goal0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">goal1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// More than one goal to prove</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">goals</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Goals</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">goal0</span><span class=\"p\">).</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">goal1</span><span class=\"p\">)).</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">iter</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">GoalData</span>::<span class=\"n\">All</span><span class=\"p\">(</span><span class=\"n\">goals</span><span class=\"p\">).</span><span class=\"n\">intern</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// One goal to prove</span>\n<span class=\"w\">                </span><span class=\"n\">goal0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// No goals to prove, always true</span>\n<span class=\"w\">            </span><span class=\"n\">GoalData</span>::<span class=\"n\">All</span><span class=\"p\">(</span><span class=\"n\">Goals</span>::<span class=\"n\">new</span><span class=\"p\">()).</span><span class=\"n\">intern</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189553480,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583196821
    },
    {
        "content": "<p>so for the Goals and similar types I've been avoiding adding an interner member and have been threading it through via args</p>",
        "id": 189553537,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583196845
    },
    {
        "content": "<p>but now Goals::from needs an interner in this from_iter impl</p>",
        "id": 189553550,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583196855
    },
    {
        "content": "<p>I think that means that Goal would need to store a reference to its interner</p>",
        "id": 189553575,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583196885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> / <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> what do yall think?</p>",
        "id": 189553595,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583196906
    },
    {
        "content": "<p>in general interner is sneaking into a ton of fns called from</p>",
        "id": 189553681,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583196986
    },
    {
        "content": "<p>though none of them are associated with the From trait so its not thaat bad</p>",
        "id": 189553685,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583196996
    },
    {
        "content": "<p>I did add interner to one without touching base but now I'm beginning to second guess</p>",
        "id": 189553689,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583197007
    },
    {
        "content": "<p>Alternatively you could remove these <code>FromIterator</code> impls, and change the <code>collect()</code> calls to a function similar to the current <code>from_iter</code>, which also takes the interner</p>",
        "id": 189588213,
        "sender_full_name": "detrumi",
        "timestamp": 1583238649
    },
    {
        "content": "<p>Or create a wrapper to hold the interner, and implement FromIterator/From for that, but I don't think we need to do that yet</p>",
        "id": 189588696,
        "sender_full_name": "detrumi",
        "timestamp": 1583239043
    },
    {
        "content": "<p>Or just impl <code>FromIterator</code> for <code>GoalData</code>? Not <code>Goal</code>?</p>",
        "id": 189590895,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583241143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I expected to remove that <code>FromIterator</code> impl</p>",
        "id": 189606591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583251393
    },
    {
        "content": "<p>and make some method that takes an interner</p>",
        "id": 189606607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583251404
    },
    {
        "content": "<p>if we don't have it already</p>",
        "id": 189606623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583251415
    },
    {
        "content": "<p>e.g., <code>Goal::all(interner, impl Iterator&lt;Item= Goal&gt;)</code></p>",
        "id": 189606650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583251435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189588213\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189588213\">said</a>:</p>\n<blockquote>\n<p>Alternatively you could remove these <code>FromIterator</code> impls, and change the <code>collect()</code> calls to a function similar to the current <code>from_iter</code>, which also takes the interner</p>\n</blockquote>\n<p>basically what <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> suggested &lt;3</p>",
        "id": 189606721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583251455
    },
    {
        "content": "<p>With <code>Interner</code> being <code>Copy</code>, should we be passing <code>I</code> around instead of <code>&amp;I</code>?</p>",
        "id": 189608359,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583252403
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 189611877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254640
    },
    {
        "content": "<p>yeah, hmm, I don't know if <code>Interner</code> should be copy, that's maybe a problem</p>",
        "id": 189611902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254656
    },
    {
        "content": "<p>same with clone</p>",
        "id": 189611985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254687
    },
    {
        "content": "<p>I guess this might be a problem with my argument about those bounds in general</p>",
        "id": 189612031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254719
    },
    {
        "content": "<p>Specifically I'm thinking about the rust-analyzer case, where I think <code>I</code> wants to be \"the salsa database\"</p>",
        "id": 189612042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254730
    },
    {
        "content": "<p>or at least the data you need to do interning is a ref to that database</p>",
        "id": 189612092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254761
    },
    {
        "content": "<p>it could be done by having</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Interner</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Interner</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">   </span><span class=\"k\">fn</span> <span class=\"nf\">intern</span><span class=\"p\">(</span><span class=\"n\">interner</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span>::<span class=\"n\">Interner</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">...)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>instead of <code>&amp;self</code> methods, but that will be annoying.</p>",
        "id": 189612135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254788
    },
    {
        "content": "<p>Removing the <code>Copy</code> bound is a problem</p>",
        "id": 189612146,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583254794
    },
    {
        "content": "<p>I suppose we could make our own vesions of derive and remove all those bounds</p>",
        "id": 189612154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189612146\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/189612146\">said</a>:</p>\n<blockquote>\n<p>Removing the <code>Copy</code> bound is a problem</p>\n</blockquote>\n<p>(currently)</p>",
        "id": 189612218,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583254815
    },
    {
        "content": "<p>i.e., versions that know now to add the bound to <code>I: Interner</code> parameters</p>",
        "id": 189612224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254819
    },
    {
        "content": "<p>right</p>",
        "id": 189612228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254822
    },
    {
        "content": "<p>As with all the other bounds</p>",
        "id": 189612240,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583254829
    },
    {
        "content": "<p>annoying :)</p>",
        "id": 189612265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254835
    },
    {
        "content": "<p>yeah</p>",
        "id": 189612280,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583254844
    },
    {
        "content": "<p>I wish we had a workaround for this with derive</p>",
        "id": 189612288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254849
    },
    {
        "content": "<p>even just being able to add <code>#[skip_derive]</code> to the parameter or something</p>",
        "id": 189612321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254871
    },
    {
        "content": "<p>it's unfortunate that <code>derive</code> requires that <code>I</code> have the bounds</p>",
        "id": 189612323,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583254871
    },
    {
        "content": "<p>yeah, we've been stalled on deciding the best fix for some time</p>",
        "id": 189612342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254881
    },
    {
        "content": "<p>definitely feels (to me) like a perfect enemy of good scenario</p>",
        "id": 189612368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254895
    },
    {
        "content": "<p>rather than acting more like auto traits where the derived impls have a <code>where &lt;fields&gt;: Trait</code></p>",
        "id": 189612377,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583254901
    },
    {
        "content": "<p>well, that's complicated</p>",
        "id": 189612394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254915
    },
    {
        "content": "<p>it would require all traits to be coinductive</p>",
        "id": 189612413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254921
    },
    {
        "content": "<p>which might be ok, but has other implications we'd have to work through</p>",
        "id": 189612448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254930
    },
    {
        "content": "<p>I know that's something you previously said you wanted</p>",
        "id": 189612479,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583254951
    },
    {
        "content": "<p>(notably it can create unsoundness when combined with supertraits and other forms of implied bounds, unless we fix them)</p>",
        "id": 189612480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254956
    },
    {
        "content": "<p>Yes, I do, but it's complicated and I don't know if it works :)</p>",
        "id": 189612491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254964
    },
    {
        "content": "<p>this is why I want it, though</p>",
        "id": 189612495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254968
    },
    {
        "content": "<p>this is also what I mean by \"perfect enemy of good\"</p>",
        "id": 189612507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254976
    },
    {
        "content": "<p>interesting</p>",
        "id": 189612520,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583254982
    },
    {
        "content": "<p>it's also (imo) a backwards incompatible change</p>",
        "id": 189612523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254983
    },
    {
        "content": "<p>admittedly one we could probably get away with</p>",
        "id": 189612530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583254990
    },
    {
        "content": "<p>i.e.,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Copy)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>currently makes <code>Foo&lt;T&gt;</code> copy iff <code>T: Copy</code></p>",
        "id": 189612570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583255024
    },
    {
        "content": "<p>and maybe you wanted that for some other reason</p>",
        "id": 189612572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583255028
    },
    {
        "content": "<p>like <code>Foo</code> represents something that is not \"logically\" copy (unless <code>T: Copy</code>)</p>",
        "id": 189612637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583255054
    },
    {
        "content": "<p>I'm not <em>that</em> worried about it</p>",
        "id": 189612645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583255060
    },
    {
        "content": "<p>but it is true</p>",
        "id": 189612649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583255063
    },
    {
        "content": "<p><code>derive2</code>???</p>",
        "id": 189612670,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583255083
    },
    {
        "content": "<p>/s</p>",
        "id": 189612685,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583255092
    },
    {
        "content": "<p>you could tie it to editions or something, too, or just say \"give me one <em>real</em> example\"</p>",
        "id": 189612697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583255099
    },
    {
        "content": "<p>there may not even be one</p>",
        "id": 189612707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583255102
    },
    {
        "content": "<p>anyway we don't have this stuff yet sooooo</p>",
        "id": 189612728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583255115
    },
    {
        "content": "<p>I feel like that has the potential to be subtly wrong though :/</p>",
        "id": 189612742,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583255133
    },
    {
        "content": "<p>but yeah, off topic</p>",
        "id": 189612807,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583255163
    },
    {
        "content": "<p>as for <code>Interner</code>...</p>",
        "id": 189612815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583255172
    },
    {
        "content": "<p>I'm not sure</p>",
        "id": 189612821,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583255178
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TI</span>: <span class=\"nc\">TargetInterner</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Fold</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TI</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Substitution</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nb\">Result</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Substitution</span><span class=\"o\">&lt;</span><span class=\"n\">TI</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fold_with</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">folder</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Folder</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TI</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">binders</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fallible</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span>::<span class=\"nb\">Result</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Substitution</span>::<span class=\"n\">from_fallible</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">.</span><span class=\"n\">target_interner</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">fold_with</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">binders</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189910955,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513009
    },
    {
        "content": "<p>this is running into borrowck issues because fold_with needs a &amp;mut ref to the folder but from_fallible also needs the target interner which borrows it with a shared ref</p>",
        "id": 189911000,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513040
    },
    {
        "content": "<p>the only way I can think of to fix this is to break it up so that from_fallible takes the collected / interned version of what its doing internally</p>",
        "id": 189911079,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513070
    },
    {
        "content": "<p>curious if theres a better way im not thinking of</p>",
        "id": 189911106,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513088
    },
    {
        "content": "<p>also not even sure this will work</p>",
        "id": 189911165,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513134
    },
    {
        "content": "<p>looks like i probably need to collect after the map</p>",
        "id": 189911269,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513192
    },
    {
        "content": "<p>this works</p>",
        "id": 189911328,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513259
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">folded</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">p</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">fold_with</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">binders</span><span class=\"p\">)).</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Substitution</span>::<span class=\"n\">from_fallible</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">.</span><span class=\"n\">target_interner</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">folded</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189911332,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513263
    },
    {
        "content": "<p>not sure if its an acceptable solution tho</p>",
        "id": 189911340,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513269
    },
    {
        "content": "<p>I think we specifically wanted to avoid collecting into a Vec</p>",
        "id": 189911393,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583513288
    },
    {
        "content": "<p>yeaaaa</p>",
        "id": 189911399,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513298
    },
    {
        "content": "<p>i guess we could pass the interner in</p>",
        "id": 189911415,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513311
    },
    {
        "content": "<p>that would require changing the fold trait</p>",
        "id": 189911427,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513328
    },
    {
        "content": "<p>or adding it as an arg to Goals, or making a wrapper type to run this</p>",
        "id": 189911455,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513351
    },
    {
        "content": "<p>I'm gonna keep cleaning up errors and ill make sure to add a comment to the changes when i push the PR so yall can review it and lmk if you want a diff approach</p>",
        "id": 189911497,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513380
    },
    {
        "content": "<p>or just lmk here</p>",
        "id": 189911502,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583513383
    },
    {
        "content": "<p>Yeah, I'm not sure. I'll have to look into it later</p>",
        "id": 189911811,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583513557
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/345/files\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/345/files\">https://github.com/rust-lang/chalk/pull/345/files</a> sneak preview</p>",
        "id": 189912895,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583514190
    },
    {
        "content": "<p>gonna have to stop for this morning now</p>",
        "id": 189912912,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583514201
    },
    {
        "content": "<p>Hmm</p>",
        "id": 189969273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583584566
    },
    {
        "content": "<p>I <em>think</em> in rustc the equivalent of the <code>Folder</code> trait has a lifetime parameter, partly for this reason, so that it is something like</p>",
        "id": 189969277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583584595
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Folder</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">II</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">target_interner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;i</span><span class=\"w\"> </span><span class=\"n\">II</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189969284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583584624
    },
    {
        "content": "<p>this would avoid the borrow check issue, because <code>target_interner()</code> no longer holds a borrow on <code>self</code></p>",
        "id": 189969286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583584641
    },
    {
        "content": "<p>however, it'd also be kind of annoying :)</p>",
        "id": 189969289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583584646
    },
    {
        "content": "<p>Yes, that is correct. <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/fold/trait.TypeFolder.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/fold/trait.TypeFolder.html\"><code>TypeFolder</code></a> from rustc:</p>",
        "id": 189969330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583584699
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TypeFolder</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">tcx</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">..</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189969332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583584712
    },
    {
        "content": "<p>key point is that <code>'a</code> doesn't appear in the return type :)</p>",
        "id": 189969333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583584741
    },
    {
        "content": "<p>I wonder how annoying that would actually be</p>",
        "id": 189969376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583584810
    },
    {
        "content": "<p>We would have to change the various <code>&amp;mut Folder&lt;...</code> to <code>&amp;mut Folder&lt;'_, ...</code></p>",
        "id": 189969377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583584833
    },
    {
        "content": "<p>and of course <code>impl Folder&lt;</code> but I think in all such cases they <em>have</em> a lifetime parameter already for the  <code>Interner</code></p>",
        "id": 189969381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583584860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I think this is the right approach <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 189969386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583584871
    },
    {
        "content": "<p>That sounds like a good approach</p>",
        "id": 189975241,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583596321
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 189975281,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583596327
    },
    {
        "content": "<p>I think especially so since most of the <code>Folder</code> impls now had a lifetime right?</p>",
        "id": 189987451,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583617324
    },
    {
        "content": "<p>Yea</p>",
        "id": 189987459,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583617353
    },
    {
        "content": "<p>I started trying to add the lifetime param to folder but that ended up sneaking into the Fold trait and the SuperFold trait</p>",
        "id": 190024788,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583695410
    },
    {
        "content": "<p>and that ended up breaking the Fold derive</p>",
        "id": 190024790,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583695420
    },
    {
        "content": "<p>which is where I decided to stash and see if I could find some way to prevent needing to add a lifetime parameter to the other folding traits</p>",
        "id": 190024793,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583695435
    },
    {
        "content": "<p>I think Fold derive should be easy enough to fix</p>",
        "id": 190024845,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583695514
    },
    {
        "content": "<p>okay</p>",
        "id": 190025020,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583695854
    },
    {
        "content": "<p>ill go with that approach then</p>",
        "id": 190025022,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583695860
    },
    {
        "content": "<p>do I have to add a lifetime param to every struct that implements Fold?</p>",
        "id": 190025156,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583696124
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[derive(Clone, PartialEq, Eq, Hash, Fold, HasInterner)]</span><span class=\"w\"></span>\n<span class=\"sd\">/// The set of assumptions we&#39;ve made so far, and the current number of</span>\n<span class=\"sd\">/// universal (forall) quantifiers we&#39;re within.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Environment</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">clauses</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">ProgramClause</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 190025157,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583696134
    },
    {
        "content": "<p>Hmm wait why did Fold and SuperFold need a lifetime?</p>",
        "id": 190025325,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583696490
    },
    {
        "content": "<p>because they have Folders in their signatures</p>",
        "id": 190025391,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583696630
    },
    {
        "content": "<p>so if I try to add the necessary lifetime to an impl in Fold</p>",
        "id": 190025428,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583696643
    },
    {
        "content": "<p>so that it can verify that TI lives long enough, it no longer matches the trait impl</p>",
        "id": 190025437,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583696660
    },
    {
        "content": "<p>Sorry, on mobile so not entirely sure</p>",
        "id": 190025656,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583697041
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/sSZgY9UFRAgdYp9Cxr3mu1PB/Screenshot-from-2020-03-08-12-50-48.png\" target=\"_blank\" title=\"Screenshot-from-2020-03-08-12-50-48.png\">Screenshot-from-2020-03-08-12-50-48.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/sSZgY9UFRAgdYp9Cxr3mu1PB/Screenshot-from-2020-03-08-12-50-48.png\" target=\"_blank\" title=\"Screenshot-from-2020-03-08-12-50-48.png\"><img src=\"/user_uploads/4715/sSZgY9UFRAgdYp9Cxr3mu1PB/Screenshot-from-2020-03-08-12-50-48.png\"></a></div>",
        "id": 190025663,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583697057
    },
    {
        "content": "<p>yea this is getting kinda out of hand and I'm having trouble figuring out the derive macro</p>",
        "id": 190025718,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583697160
    },
    {
        "content": "<p>well</p>",
        "id": 190025720,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583697162
    },
    {
        "content": "<p>not so much having trouble</p>",
        "id": 190025721,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583697167
    },
    {
        "content": "<p>just that it seems like a lot of work so I want to put it off for now</p>",
        "id": 190025726,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583697176
    },
    {
        "content": "<p>I'm gonna back track to where I left off, which has the collect into Vec to avoid the lifetime issue</p>",
        "id": 190025730,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583697190
    },
    {
        "content": "<p>and try to clean up all the other issues</p>",
        "id": 190025731,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583697197
    },
    {
        "content": "<p>then I'll revisit this when you're not on mobile</p>",
        "id": 190025734,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583697214
    },
    {
        "content": "<p>But why would the Fold trait need the lifetime? Because Fold takes a &amp;mut dyn Folder? So the lifetime can be on the method</p>",
        "id": 190026551,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583698846
    },
    {
        "content": "<p>Oh duh</p>",
        "id": 190026617,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583698947
    },
    {
        "content": "<p>Wait no</p>",
        "id": 190026620,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583698960
    },
    {
        "content": "<p>It's because I need to constrain TI in the fold impl</p>",
        "id": 190026623,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583698977
    },
    {
        "content": "<p>I have to add a lifetime constraint to the target interner because of the default method impls on Folder that use the target_interner fn</p>",
        "id": 190026637,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583699024
    },
    {
        "content": "<p>Can you post a screenshot? Sorry</p>",
        "id": 190027009,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583699692
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/FWU3tlj408O5GhPwXpUvyF33/Screenshot-from-2020-03-08-13-42-50.png\" target=\"_blank\" title=\"Screenshot-from-2020-03-08-13-42-50.png\">Screenshot-from-2020-03-08-13-42-50.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/FWU3tlj408O5GhPwXpUvyF33/Screenshot-from-2020-03-08-13-42-50.png\" target=\"_blank\" title=\"Screenshot-from-2020-03-08-13-42-50.png\"><img src=\"/user_uploads/4715/FWU3tlj408O5GhPwXpUvyF33/Screenshot-from-2020-03-08-13-42-50.png\"></a></div>",
        "id": 190027269,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583700180
    },
    {
        "content": "<p>I should probably put the constraint on the trait</p>",
        "id": 190027277,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583700226
    },
    {
        "content": "<p>but I think the result will be the same</p>",
        "id": 190027279,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583700230
    },
    {
        "content": "<p>the impls for Fold will not compile because they dont have the same lifetime constraint</p>",
        "id": 190027318,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583700245
    },
    {
        "content": "<p>Hmm</p>",
        "id": 190027506,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583700667
    },
    {
        "content": "<p>I'm still missing exactly the problem <span aria-label=\"exhausted\" class=\"emoji emoji-1f625\" role=\"img\" title=\"exhausted\">:exhausted:</span></p>",
        "id": 190027608,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583700891
    },
    {
        "content": "<p>I'll just wait until later when I can focus more</p>",
        "id": 190027875,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583701361
    },
    {
        "content": "<p>Do you think you can push the changes with the lifetime on Folder? Even if it doesn't compile</p>",
        "id": 190027900,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583701429
    },
    {
        "content": "<p>(It could be on a separate branch)</p>",
        "id": 190027921,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583701442
    },
    {
        "content": "<p>sure</p>",
        "id": 190028921,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583703438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> where's the code, I can take a look</p>",
        "id": 190078152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583766157
    },
    {
        "content": "<p>is it part of <a href=\"https://github.com/rust-lang-nursery/chalk/issues/345\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/345\">chalk#345</a>?</p>",
        "id": 190078239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583766210
    },
    {
        "content": "<p><a href=\"https://github.com/yaahc/chalk/tree/jane/fold\" target=\"_blank\" title=\"https://github.com/yaahc/chalk/tree/jane/fold\">https://github.com/yaahc/chalk/tree/jane/fold</a></p>",
        "id": 190080494,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583767408
    },
    {
        "content": "<p>this has at least one of the copies of the stuff I was fking with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 190080520,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583767424
    },
    {
        "content": "<p>it might be easier to start from the PR you linked tho and do the modification to the folder trait from scratch</p>",
        "id": 190080643,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583767464
    },
    {
        "content": "<p>hmm, it seems like in part a shortcoming of rustc's implied bounds</p>",
        "id": 190080972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583767671
    },
    {
        "content": "<p>specifically, <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=441147aa4422e6e1c4fdfd0a2f8dd06b\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=441147aa4422e6e1c4fdfd0a2f8dd06b\">this example</a> doesn't compile</p>",
        "id": 190081222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583767795
    },
    {
        "content": "<p>which means also that modifying <code>trait Folder</code> to <code>trait Folder&lt;'i, I: 'i, TI: 'i&gt;</code> doesn't you the defaults you would like.</p>",
        "id": 190081299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583767820
    },
    {
        "content": "<p>a bit surprising since <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=737330c78e09986191b50fea87a99a54\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=737330c78e09986191b50fea87a99a54\">the same example with structs</a> does pass</p>",
        "id": 190081376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583767860
    },
    {
        "content": "<p>_Shakes fist at one of the features that made me want to contribute to chalk in the first place_</p>",
        "id": 190082192,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583768271
    },
    {
        "content": "<p>so</p>",
        "id": 190082390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583768351
    },
    {
        "content": "<p>we can update the signature of <code>fold_with</code></p>",
        "id": 190082402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583768357
    },
    {
        "content": "<p>it will require modifying the deriving</p>",
        "id": 190082412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583768361
    },
    {
        "content": "<p>but shouldn't be too hard</p>",
        "id": 190082433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583768372
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fold_with</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;i</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">folder</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">dyn</span><span class=\"w\"> </span><span class=\"n\">Folder</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TI</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">binders</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fallible</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span>::<span class=\"nb\">Result</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">I</span>: <span class=\"na\">&#39;i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TI</span>: <span class=\"na\">&#39;i</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 190082522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583768402
    },
    {
        "content": "<p>the deriving code is in <a href=\"https://github.com/rust-lang/chalk/blob/master/chalk-derive/src/lib.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/master/chalk-derive/src/lib.rs\">chalk-derive/src/lib.rs</a></p>",
        "id": 190082620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583768447
    },
    {
        "content": "<p>there are various pieces of code where you'll find the <code>fold_with</code> signature that needs to be updated</p>",
        "id": 190082635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583768461
    },
    {
        "content": "<p>e.g., <a href=\"https://github.com/rust-lang/chalk/blob/d6fd9efaccfd29bfd651d4a45c4708140c67de65/chalk-derive/src/lib.rs#L33-L39\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/d6fd9efaccfd29bfd651d4a45c4708140c67de65/chalk-derive/src/lib.rs#L33-L39\">here</a></p>",
        "id": 190082656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583768473
    },
    {
        "content": "<p>I think there are 3 in all</p>",
        "id": 190082661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583768476
    },
    {
        "content": "<p>okay</p>",
        "id": 190090681,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583772365
    },
    {
        "content": "<p>that looks easy enough</p>",
        "id": 190090685,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583772369
    },
    {
        "content": "<p>hopefully it's enough, but it should be</p>",
        "id": 190099965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583777588
    },
    {
        "content": "<p>woo porgress</p>",
        "id": 190102422,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583778899
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/345/files\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/345/files\">https://github.com/rust-lang/chalk/pull/345/files</a></p>",
        "id": 190102424,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583778900
    },
    {
        "content": "<p>I got the fold stuff done i think, still other errors to work through but I'm back on track</p>",
        "id": 190102462,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583778920
    },
    {
        "content": "<p>and we're done!</p>",
        "id": 190106788,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583781398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> the intern-param pr is ready for review</p>",
        "id": 190106813,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583781412
    },
    {
        "content": "<p>also i checked off intern_lifetime in the tracking issue <a href=\"https://github.com/rust-lang/rust/issues/340\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/340\">#340</a></p>",
        "id": 190106921,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583781482
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/chalk/issues/340\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/340\">chalk#340</a>*</p>",
        "id": 190106968,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583781500
    },
    {
        "content": "<p>holy crap intern_goal was easy</p>",
        "id": 190107590,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583781853
    },
    {
        "content": "<p>ahahahaha, intern_goals was like 4 lines</p>",
        "id": 190107866,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583782000
    },
    {
        "content": "<p>its nice when it gets easy</p>",
        "id": 190107871,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583782005
    },
    {
        "content": "<p>welp, I've officially finished all of the PRs for 340 not counting getting them thru review</p>",
        "id": 190108493,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583782344
    },
    {
        "content": "<p>I've also got <a href=\"https://github.com/rust-lang/chalk/pull/342\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/342\">https://github.com/rust-lang/chalk/pull/342</a> compiling but I have some unresolved parts that I left as <code>unimplemented!()</code></p>",
        "id": 190111352,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583784064
    },
    {
        "content": "<p>so if when either of you have time <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> if you could take a look at that to lmk how to resolve those issues</p>",
        "id": 190111380,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583784093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> awesome! I left a minor suggestion on <a href=\"https://github.com/rust-lang-nursery/chalk/issues/345\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/345\">chalk#345</a> (using <code>#[derive]</code>), do you think you'd have a chance to push those commits?</p>",
        "id": 190202647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583862239
    },
    {
        "content": "<p>I could maybe make the change too if that's inconvenient</p>",
        "id": 190202696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583862251
    },
    {
        "content": "<p>either is fine</p>",
        "id": 190203067,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583862434
    },
    {
        "content": "<p>I'm looking rn</p>",
        "id": 190203097,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583862451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the canonical one fails to compile with the derive</p>",
        "id": 190207781,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583864864
    },
    {
        "content": "<p>I'd have to add a <code>T: HasInterner</code> bound to the generic</p>",
        "id": 190207897,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583864916
    },
    {
        "content": "<p>which breaks other things</p>",
        "id": 190207902,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583864919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> ah ok nbd</p>",
        "id": 190208014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583864998
    },
    {
        "content": "<p>then leave it as is</p>",
        "id": 190208020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583865002
    },
    {
        "content": "<p>its been updated</p>",
        "id": 190208874,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583865461
    },
    {
        "content": "<p>i also rebased the next commit in the chain, intern-goal</p>",
        "id": 190208888,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583865472
    },
    {
        "content": "<p>and I shall continue to rebase until morale improves</p>",
        "id": 190209038,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583865542
    },
    {
        "content": "<p>landed the first one</p>",
        "id": 190212377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583867215
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/chalk/issues/346\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/346\">chalk#346</a> looks good too</p>",
        "id": 190212381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583867219
    },
    {
        "content": "<p><em>opens up rust-lang/chalk to see 10 open PRs</em></p>",
        "id": 190214149,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583868267
    },
    {
        "content": "<p>(it was 12 earlier today)</p>",
        "id": 190214461,
        "sender_full_name": "detrumi",
        "timestamp": 1583868470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> I think <a href=\"https://github.com/rust-lang/chalk/pull/347\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/347\">https://github.com/rust-lang/chalk/pull/347</a> needs to be rebased</p>",
        "id": 190217257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870101
    },
    {
        "content": "<p>k <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  i rebased 347 and the one after it</p>",
        "id": 190218250,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583870677
    },
    {
        "content": "<p>just went and rebased all of them</p>",
        "id": 190218348,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583870753
    },
    {
        "content": "<p>rgreat, merged all but the last, since CI wasn't done yet</p>",
        "id": 190218644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583870949
    },
    {
        "content": "<p>crap theres Debug bounds everywhere</p>",
        "id": 190225637,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583874849
    },
    {
        "content": "<p>this is getting out of hand quickly X_X</p>",
        "id": 190226277,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875175
    },
    {
        "content": "<p>yea i think this just hit the point where its invalid without GATs</p>",
        "id": 190226535,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875274
    },
    {
        "content": "<p>nvm on figuring out how to do the display / debug stuff myself <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , the Zip and Fold traits both require : Debug</p>",
        "id": 190226669,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875319
    },
    {
        "content": "<p>and trying to change them to use TyDebug ended up spreading lifetime params throughout everywhere until eventually this needed one <code>        type InternedParameter = ParameterData&lt;'ty, ChalkIr&gt;;</code></p>",
        "id": 190226748,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875346
    },
    {
        "content": "<p>which is an unconstrainted parameter</p>",
        "id": 190226768,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> yeah ok so the problem is basically that the <code>Debug</code> impls need to invoke <code>data</code>..?</p>",
        "id": 190227163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583875581
    },
    {
        "content": "<p>yea</p>",
        "id": 190227184,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875587
    },
    {
        "content": "<p>which takes an interner</p>",
        "id": 190227192,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875589
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[allow(unreachable_code, unused_variables)]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fmt</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Formatter</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">interner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">write</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"n\">interner</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 190227217,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875600
    },
    {
        "content": "<p>so we <em>do</em> have an existing option of getting a callback from TLS</p>",
        "id": 190227228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583875604
    },
    {
        "content": "<p>:S</p>",
        "id": 190227253,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875614
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 190227268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583875621
    },
    {
        "content": "<p>we could add a new DebugLike trait that takes an interner</p>",
        "id": 190227308,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875642
    },
    {
        "content": "<p>and change all the bounds everywhere to that</p>",
        "id": 190227322,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875653
    },
    {
        "content": "<p>right, so basically have the option of a <code>DebugWith</code> trait</p>",
        "id": 190227333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583875667
    },
    {
        "content": "<p>or TLS</p>",
        "id": 190227336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583875671
    },
    {
        "content": "<p>or not support this form of interning</p>",
        "id": 190227351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583875680
    },
    {
        "content": "<p>I'm not sure theres any reason to avoid TLS</p>",
        "id": 190227395,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875688
    },
    {
        "content": "<p>i.e., you can only intern to an <code>&amp;TyData</code> sort of type</p>",
        "id": 190227404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583875693
    },
    {
        "content": "<p>ultimately we need TLS anyway</p>",
        "id": 190227411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583875700
    },
    {
        "content": "<p>aah okay</p>",
        "id": 190227416,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875705
    },
    {
        "content": "<p>I'm thinking partly about rustc here</p>",
        "id": 190227419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583875708
    },
    {
        "content": "<p>if we're already using tls then I would say just keep doing it</p>",
        "id": 190227431,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875717
    },
    {
        "content": "<p>rather than refactoring everything to use a diff debug trait</p>",
        "id": 190227454,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875732
    },
    {
        "content": "<p>sounds like an annoyingly huge refactor</p>",
        "id": 190227461,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875736
    },
    {
        "content": "<p>we might want to change <em>how</em> we've integrated TLS</p>",
        "id": 190227470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583875742
    },
    {
        "content": "<p>and we can always do it later</p>",
        "id": 190227471,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875742
    },
    {
        "content": "<p>okay</p>",
        "id": 190227488,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583875750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay heres the next one</p>",
        "id": 190229157,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583876713
    },
    {
        "content": "<p>i need an interner here</p>",
        "id": 190229163,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583876716
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"sd\">/// A fast check to see whether two things could ever possibly match.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">CouldMatch</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">could_match</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[allow(unreachable_code, unused_variables)]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">CouldMatch</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Zip</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">HasInterner</span><span class=\"o\">&lt;</span><span class=\"n\">Interner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">could_match</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">interner</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">Zip</span>::<span class=\"n\">zip_with</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">MatchZipper</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">interner</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">).</span><span class=\"n\">is_ok</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>",
        "id": 190229167,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583876719
    },
    {
        "content": "<p>Should I add an arg to CouldMatch?</p>",
        "id": 190229178,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583876730
    },
    {
        "content": "<p>note Could match doesn't have an interner, so I would have to add a HasInterner bound to the struct</p>",
        "id": 190229280,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583876777
    },
    {
        "content": "<p>went ahead and did that</p>",
        "id": 190229500,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583876922
    },
    {
        "content": "<p>K i got intern-data passing all tests using tls</p>",
        "id": 190230039,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583877250
    },
    {
        "content": "<p>I just got to write some extremely exciting code</p>",
        "id": 190233801,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583879743
    },
    {
        "content": "<p>and by that I mean bad and I feel bad</p>",
        "id": 190233812,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583879746
    },
    {
        "content": "<p>it involves this bug</p>",
        "id": 190233873,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583879765
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 190233876,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583879767
    },
    {
        "content": "<p>warning: cannot borrow <code>*zipper</code> as mutable because it is also borrowed as immutable<br>\n   --&gt; chalk-ir/src/zip.rs:334:23<br>\n    |<br>\n333 |         let interner = zipper.interner();<br>\n    |                        ------ immutable borrow occurs here<br>\n334 |         Zip::zip_with(zipper, a.data(interner), b.data(interner))<br>\n    |                       ^^^^^^         -------- immutable borrow later used here<br>\n    |                       |<br>\n    |                       mutable borrow occurs here<br>\n    |<br>\n    = note: <code>#[warn(mutable_borrow_reservation_conflict)]</code> on by default<br>\n    = warning: this borrowing pattern was not meant to be accepted, and may become a hard error in the future<br>\n    = note: for more information, see issue <a href=\"https://github.com/rust-lang/rust/issues/59159\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59159\">#59159</a> &lt;<a href=\"https://github.com/rust-lang/rust/issues/59159\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59159\">https://github.com/rust-lang/rust/issues/59159</a>&gt;</p>",
        "id": 190233877,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583879769
    },
    {
        "content": "<p>I added the interner to zipper</p>",
        "id": 190233911,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583879814
    },
    {
        "content": "<p>i think it needs a similar treatment to what the Folder trait got</p>",
        "id": 190233921,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1583879829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/190233921\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/190233921\">said</a>:</p>\n<blockquote>\n<p>i think it needs a similar treatment to what the Folder trait got</p>\n</blockquote>\n<p>yes</p>",
        "id": 190289754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/190229178\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/190229178\">said</a>:</p>\n<blockquote>\n<p>Should I add an arg to CouldMatch?</p>\n</blockquote>\n<p>yes</p>",
        "id": 190289755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/190230039\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/190230039\">said</a>:</p>\n<blockquote>\n<p>K i got intern-data passing all tests using tls</p>\n</blockquote>\n<p>neat! I'll have to check just what ya' did</p>",
        "id": 190289772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583938359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> is there a reason not to merge the first of your PRs now?</p>",
        "id": 190916768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584482616
    },
    {
        "content": "<p>you said something about some tests not passing?</p>",
        "id": 190916774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584482620
    },
    {
        "content": "<p>(In particular, I feel like  we could address any changes to the TLS strategy in follow-up PRs)</p>",
        "id": 190916816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584482641
    },
    {
        "content": "<p>let me check the first one</p>",
        "id": 190917506,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584483064
    },
    {
        "content": "<p>no <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , I think its good to merge</p>",
        "id": 190917614,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584483130
    },
    {
        "content": "<p>the test that was broken by lack of TLS is not affected by this change</p>",
        "id": 190917633,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584483152
    },
    {
        "content": "<p>the next PR in the change is the one that breaks the test</p>",
        "id": 190917648,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584483160
    },
    {
        "content": "<p>in the chain of prs i openned*</p>",
        "id": 190917659,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584483171
    },
    {
        "content": "<p>bah</p>",
        "id": 190917664,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584483175
    },
    {
        "content": "<p>how to type</p>",
        "id": 190917666,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584483178
    },
    {
        "content": "<p>OK!</p>",
        "id": 190919463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584484400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> merged and <a href=\"https://github.com/rust-lang/chalk/pull/349#pullrequestreview-376453498\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/349#pullrequestreview-376453498\">left a comment</a> on how to address the test failures</p>",
        "id": 190920017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584484789
    },
    {
        "content": "<p>when you say get the program in scope what do you mean</p>",
        "id": 190920141,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584484852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> okay i finished all the interner stuff sans one problem with the \"SeparatorTraitRef\"</p>",
        "id": 190925430,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584488758
    },
    {
        "content": "<p>which needs to have access to the program but is currently a private struct in chalk-ir</p>",
        "id": 190925479,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584488781
    },
    {
        "content": "<p>I'm gonna go ahead and export it if there are no objections...</p>",
        "id": 190925487,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584488791
    },
    {
        "content": "<p>part of me wants to just abandon all the older PRs and just combine them all into this last PR and merge it at once</p>",
        "id": 190925775,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584489058
    },
    {
        "content": "<p>is the separation helping you review them <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 190925794,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584489070
    },
    {
        "content": "<p>k well I rebased them all and all tests should be passing now</p>",
        "id": 190926881,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584489987
    },
    {
        "content": "<p>so it doesnt matter</p>",
        "id": 190926883,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584489992
    },
    {
        "content": "<p>you can merge the last one to close all the earlier ones or merge them in order</p>",
        "id": 190926893,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584490002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/190920141\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/190920141\">said</a>:</p>\n<blockquote>\n<p>when you say get the program in scope what do you mean</p>\n</blockquote>\n<p>not sure if you figured this out already, <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>, but I meant code like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">tls</span>::<span class=\"n\">with_current_program</span><span class=\"p\">(...)</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>this puts the program \"in scope\"</p>",
        "id": 190980819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584538883
    },
    {
        "content": "<p>er, sorry, that <em>accesses</em> the program in scope</p>",
        "id": 190980825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584538890
    },
    {
        "content": "<p>but there is some code that puts it in :)</p>",
        "id": 190980830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584538894
    },
    {
        "content": "<p>but i'm happy with the other fix for now</p>",
        "id": 190980857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584538908
    },
    {
        "content": "<p>coolio</p>",
        "id": 190999336,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584546343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> once you've reviewed and merged the last few PRs I think I'm ready for guidance on the builtin types issue</p>",
        "id": 191020550,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1584554992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> merged the PRs but left <a href=\"https://github.com/rust-lang/chalk/pull/353#discussion_r394930949\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/353#discussion_r394930949\">one bit of follow-up</a></p>",
        "id": 191095034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584614448
    },
    {
        "content": "<p>That seems an easy follow-up, mind me have a try?</p>",
        "id": 191122076,
        "sender_full_name": "Charles Lew",
        "timestamp": 1584628702
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/355\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/355\">https://github.com/rust-lang/chalk/pull/355</a></p>",
        "id": 191122798,
        "sender_full_name": "Charles Lew",
        "timestamp": 1584628983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> thanks! Your PR looks right, but <a href=\"https://github.com/rust-lang/chalk/pull/355#pullrequestreview-377964414\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/355#pullrequestreview-377964414\">doesn't handle all the cases yet</a> -- want to add the rest?</p>",
        "id": 191151931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584640692
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/355#issuecomment-601507783\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/355#issuecomment-601507783\">https://github.com/rust-lang/chalk/pull/355#issuecomment-601507783</a></p>",
        "id": 191199691,
        "sender_full_name": "Charles Lew",
        "timestamp": 1584674320
    },
    {
        "content": "<p>So, I feel like there's something...off...about the current <code>Interner</code> representation</p>",
        "id": 191780878,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156543
    },
    {
        "content": "<p>specifically with respect to <code>Debug</code>, at least right now</p>",
        "id": 191780913,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156560
    },
    {
        "content": "<p>let's look at <code>ty_data</code>/<code>Ty</code>/<code>TyData</code> for a second</p>",
        "id": 191780993,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156581
    },
    {
        "content": "<p>so there's this method: <code>fn ty_data&lt;'a&gt;(&amp;self, ty: &amp;'a Self::InternedType) -&gt; &amp;'a TyData&lt;Self&gt;;</code></p>",
        "id": 191781038,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156603
    },
    {
        "content": "<p>and this</p>\n<div class=\"codehilite\"><pre><span></span>pub struct Ty&lt;I: Interner&gt; {\n    interned: I::InternedType,\n}\n</pre></div>",
        "id": 191781113,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156636
    },
    {
        "content": "<p>and this </p>\n<div class=\"codehilite\"><pre><span></span>pub fn data(&amp;self, interner: &amp;I) -&gt; &amp;TyData&lt;I&gt; {\n        I::ty_data(interner, &amp;self.interned)\n}\n</pre></div>",
        "id": 191781191,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156673
    },
    {
        "content": "<p>then, if we look at this method <code>fn debug_ty(ty: &amp;Ty&lt;Self&gt;, fmt: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; Option&lt;fmt::Result&gt;;</code></p>",
        "id": 191781341,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156720
    },
    {
        "content": "<p>What <em>should</em> the body of the function there look like</p>",
        "id": 191781452,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156775
    },
    {
        "content": "<p>assuming we don't use TLS</p>",
        "id": 191781467,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156785
    },
    {
        "content": "<p>or, don't want to</p>",
        "id": 191781478,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156791
    },
    {
        "content": "<p>i think</p>",
        "id": 191781600,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585156833
    },
    {
        "content": "<p>wait sec</p>",
        "id": 191781602,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585156836
    },
    {
        "content": "<p>so, there's sort of two (maybe three) representations of <code>InternedType</code></p>",
        "id": 191781614,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156840
    },
    {
        "content": "<p>So 1) <code>I::InternedType = &amp;'tcx TyData&lt;I&gt;</code></p>",
        "id": 191781663,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156864
    },
    {
        "content": "<p>2) <code>I::InternedType = usize</code>, then we need the <code>&amp;self: Interner</code> to convert <code>usize -&gt; &amp;'tcx TyData&lt;I&gt;</code></p>",
        "id": 191781744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156911
    },
    {
        "content": "<p>(then 3 is <code>I::InternedType = Box&lt;TyData&lt;I&gt;&gt;</code>)</p>",
        "id": 191781813,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156930
    },
    {
        "content": "<p>right now though, no implementations go with option 2</p>",
        "id": 191781911,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585156978
    },
    {
        "content": "<p>so, theoretically, if we made <code>interned</code> on <code>Ty</code> pub, then <code>debug_ty</code> can just call <code>write!(fmt, \"{:?}\", ty.interned)</code></p>",
        "id": 191782100,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585157048
    },
    {
        "content": "<p>now, that alone I'm not sure is...the best</p>",
        "id": 191782189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585157096
    },
    {
        "content": "<p>which just makes me feel like maybe the design is a bit off</p>",
        "id": 191782232,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585157110
    },
    {
        "content": "<p>for path 2) how do you go from a usize to a tyData?</p>",
        "id": 191782324,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585157159
    },
    {
        "content": "<p>is that how rust would do it</p>",
        "id": 191782405,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585157179
    },
    {
        "content": "<p>rustc*</p>",
        "id": 191782411,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585157182
    },
    {
        "content": "<p>The usize could be a key to a hashmap on <code>Interner</code></p>",
        "id": 191782448,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585157200
    },
    {
        "content": "<p>no, rustc just passes around a <code>&amp;'tcx TyData</code></p>",
        "id": 191782473,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585157217
    },
    {
        "content": "<p>i see</p>",
        "id": 191782509,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585157237
    },
    {
        "content": "<p>i mean more like</p>",
        "id": 191782525,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585157246
    },
    {
        "content": "<p>this is <code>ty_data</code> on the rustc interner:</p>\n<div class=\"codehilite\"><pre><span></span>    fn ty_data&lt;&#39;a&gt;(&amp;self, ty: &amp;&#39;a Self::InternedType) -&gt; &amp;&#39;a chalk_ir::TyData&lt;Self&gt; {\n        ty\n    }\n</pre></div>",
        "id": 191782526,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585157247
    },
    {
        "content": "<p>so a different interner could implement their ty_data fn that way</p>",
        "id": 191782558,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585157262
    },
    {
        "content": "<p>but its not implemented that way anywhere in chalk rn</p>",
        "id": 191782567,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585157267
    },
    {
        "content": "<p>correct</p>",
        "id": 191782577,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585157272
    },
    {
        "content": "<p>okay that makes sense</p>",
        "id": 191782647,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585157285
    },
    {
        "content": "<p>(and I don't think rust-analyzer interns types by usize)</p>",
        "id": 191782653,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585157287
    },
    {
        "content": "<p>maybe just making <code>interned</code> on <code>Ty</code> <code>pub</code> is the right action</p>",
        "id": 191782790,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585157347
    },
    {
        "content": "<p>my very naive familiarity with the code makes me feel like maybe that should be the fallback path from here</p>",
        "id": 191782967,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585157408
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fmt</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Formatter</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">I</span>::<span class=\"n\">debug_ty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fmt</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">unimplemented</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;cannot format Ty without setting Program in tls&quot;</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191782973,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585157412
    },
    {
        "content": "<p>where you could default to trying to let the interner lookup the tydata from the ty, and fall back to using the member if the interner isnt available</p>",
        "id": 191783042,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585157447
    },
    {
        "content": "<p>so you mean add a separate <code>fn try_ty_data(&amp;I::InternedType) -&gt; Option&lt;&amp;TyData&lt;I&gt;&gt;;</code>?</p>",
        "id": 191783249,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585157528
    },
    {
        "content": "<p>I mean, if you make <code>interned</code> pub, then <code>debug_ty</code> becomes</p>\n<div class=\"codehilite\"><pre><span></span>    fn debug_ty(\n        _ty: &amp;chalk_ir::Ty&lt;Self&gt;,\n        _fmt: &amp;mut fmt::Formatter&lt;&#39;_&gt;\n    ) -&gt; Option&lt;fmt::Result&gt; {\n        Some(write!(_fmt, &quot;{:?}&quot;, _ty.interned))\n    }\n</pre></div>",
        "id": 191783399,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585157591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/191783249\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/191783249\">said</a>:</p>\n<blockquote>\n<p>so you mean add a separate <code>fn try_ty_data(&amp;I::InternedType) -&gt; Option&lt;&amp;TyData&lt;I&gt;&gt;;</code>?</p>\n</blockquote>\n<p>I don't think this is necessary, we already have the path that returns an Option here</p>",
        "id": 191784895,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158141
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">debug_ty</span><span class=\"p\">(</span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">ChalkIr</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fmt</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">tls</span>::<span class=\"n\">with_current_program</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">prog</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">prog</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">debug_ty</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fmt</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191784903,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158145
    },
    {
        "content": "<p>and im still thinking about the codepath where we could have a usize</p>",
        "id": 191784947,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158162
    },
    {
        "content": "<p>like, if I::InternedType was a usize we wouldn't want to log that right?</p>",
        "id": 191784970,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158175
    },
    {
        "content": "<p>we'd prefer to lookup the ty_data</p>",
        "id": 191784981,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158183
    },
    {
        "content": "<p>yes, but that takes a <code>Ty</code>, not an <code>InternedType</code></p>",
        "id": 191784999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585158192
    },
    {
        "content": "<p>Right</p>",
        "id": 191785019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585158200
    },
    {
        "content": "<p>so right now it works by taking in a ty, checking if we have an interner, if we do then we get the ty_data and use that to print with the assumption that it will have more info than our InternedType</p>",
        "id": 191785179,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158253
    },
    {
        "content": "<p>and if we dont have an interner we would want to format the internedtype</p>",
        "id": 191785204,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158265
    },
    {
        "content": "<p>But, essentially, it would be up  to the interner <em>in <code>debug_ty</code></em> to decide if it wants to 1) debug without looking up data 2) Lookup data (with tls, or just with <code>interned</code>)</p>",
        "id": 191785225,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585158272
    },
    {
        "content": "<p>which is already the TyData in all codepaths we use</p>",
        "id": 191785234,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158276
    },
    {
        "content": "<p>ooh</p>",
        "id": 191785264,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158287
    },
    {
        "content": "<p>you want to switch it up so the interner can avoid the TLS lookup?</p>",
        "id": 191785292,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158297
    },
    {
        "content": "<p>Well, yes</p>",
        "id": 191785347,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585158317
    },
    {
        "content": "<p>rustc I don't think we want to use tls for sure</p>",
        "id": 191785351,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585158321
    },
    {
        "content": "<p>(and actually, fixing this would mean we no longer need tls for debugging in some cases. Only if we need state not stored in the <code>Ty</code> (like names))</p>",
        "id": 191785525,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585158373
    },
    {
        "content": "<p>okay I can get behind this</p>",
        "id": 191785617,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158403
    },
    {
        "content": "<p>so long as someone who is using a usize doesnt just end up only getting numbers for their debug repr</p>",
        "id": 191785655,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158415
    },
    {
        "content": "<p>but because debug_ty is a trait method for Interner they can define that how they want</p>",
        "id": 191785715,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158438
    },
    {
        "content": "<p>because they know how they interned it</p>",
        "id": 191785724,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158442
    },
    {
        "content": "<p>I think i've finally caught up to what you mean</p>",
        "id": 191785744,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158453
    },
    {
        "content": "<p>sounds like a good plan</p>",
        "id": 191785784,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158469
    },
    {
        "content": "<p>to me at least</p>",
        "id": 191785855,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158487
    },
    {
        "content": "<p>great</p>",
        "id": 191785902,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585158517
    },
    {
        "content": "<p>the only thing I'm skeptical of is making <code>interned</code> pub</p>",
        "id": 191785932,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585158533
    },
    {
        "content": "<p>but it's...probably fine</p>",
        "id": 191785979,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585158558
    },
    {
        "content": "<p>is it a mutability concern?</p>",
        "id": 191786058,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158595
    },
    {
        "content": "<p>like someone modifying the interned type?</p>",
        "id": 191786072,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158601
    },
    {
        "content": "<p>accidentally*</p>",
        "id": 191786114,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158604
    },
    {
        "content": "<p>we could force them to go thru a method that borrows it</p>",
        "id": 191786142,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585158623
    },
    {
        "content": "<p>yeah</p>",
        "id": 191786543,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585158810
    },
    {
        "content": "<p>yeah, we could make a <code>fn interned(&amp;self: Ty&lt;I&gt;) -&gt; &amp;I::InternedType</code></p>",
        "id": 191786642,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585158858
    },
    {
        "content": "<p>So, another case where we need to have the interner around for debugging is for debugging aliases</p>",
        "id": 191799335,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585164522
    },
    {
        "content": "<p>since we need to know types of trait vs associated types</p>",
        "id": 191799377,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585164537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/191782405\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/191782405\">said</a>:</p>\n<blockquote>\n<p>is that how rust would do it</p>\n</blockquote>\n<p>this is how salsa would do it</p>",
        "id": 191806706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/191784970\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/191784970\">said</a>:</p>\n<blockquote>\n<p>like, if I::InternedType was a usize we wouldn't want to log that right?</p>\n</blockquote>\n<p>I'm not sure, I think it would be \"ok\" to log that</p>",
        "id": 191806814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168154
    },
    {
        "content": "<p>I think the idea of \"fallback to dumping the interned representation\" is ok, but we should also try to have the interner available via TLS.</p>",
        "id": 191806892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168198
    },
    {
        "content": "<p>That said, hmm,</p>",
        "id": 191806946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168206
    },
    {
        "content": "<p>so if we wanted to give up on using a <code>usize</code>, and require that the data be <em>some</em> sort of pointer, you certainly could make life a bit easier, but it is kind of a drag,</p>",
        "id": 191806977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168230
    },
    {
        "content": "<p>in particular it means that you can't have <code>Copy</code> types unless you use arena allocation like rustc</p>",
        "id": 191807004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168247
    },
    {
        "content": "<p>I considered e.g. in Lark using <code>Arc</code> to represent the types, but it means we have to maintain a ref-count, and using a <code>usize</code> felt better (while still avoiding lifetimes, which has some advantages)</p>",
        "id": 191807070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168281
    },
    {
        "content": "<p>I guess I feel like I'm not ready to give up on the ability to use a usize yet</p>",
        "id": 191807099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168295
    },
    {
        "content": "<p>but I like the \"fallback to logging the interned repr\"</p>",
        "id": 191807117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168310
    },
    {
        "content": "<p>it's not what you <em>want</em>, but in some contexts it might be ok, and it's better than nothing</p>",
        "id": 191807140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168320
    },
    {
        "content": "<p>there's nothing worse than debug logs panicking</p>",
        "id": 191807189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I didn't get the impression that jack wanted to give up on usize</p>",
        "id": 191811707,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585170728
    },
    {
        "content": "<p>just that he wanted to change the <code>debug_ty</code> impl for <code>ChalkIR</code> to not use the interner in tls and just go directly to the Interned type because we're not using usize</p>",
        "id": 191811749,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585170756
    },
    {
        "content": "<p>like debug_ty would still return Option&lt;fmt::Result&gt; and allow for the TLS + fallback paths, but we can skip it for interners where we know we dont need to lookup the tydata</p>",
        "id": 191811939,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585170847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/191811749\" title=\"#narrow/stream/144729-wg-traits/topic/adding.20context.20to.20.60TypeFamily.60.20chalk.23328/near/191811749\">said</a>:</p>\n<blockquote>\n<p>just that he wanted to change the <code>debug_ty</code> impl for <code>ChalkIR</code> to not use the interner in tls and just go directly to the Interned type because we're not using usize</p>\n</blockquote>\n<p>ok, that seems fine</p>",
        "id": 191891439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585232662
    },
    {
        "content": "<p>if the fallback is to dump the \"interned\" repr, then it could even just return <code>None</code></p>",
        "id": 191891488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585232683
    },
    {
        "content": "<p>Oo</p>",
        "id": 191891530,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585232705
    },
    {
        "content": "<p>Yeee</p>",
        "id": 191891534,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1585232708
    },
    {
        "content": "<p>ok well I think I will merge <a href=\"https://github.com/rust-lang/chalk/pull/355\" title=\"https://github.com/rust-lang/chalk/pull/355\">https://github.com/rust-lang/chalk/pull/355</a> by <span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> -- but it seems like there might be some \"follow-up work\" here?</p>",
        "id": 191944456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585254621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> maybe you want to add some notes to <a href=\"https://github.com/rust-lang/chalk/issues/341\" title=\"https://github.com/rust-lang/chalk/issues/341\">https://github.com/rust-lang/chalk/issues/341</a> about this?</p>",
        "id": 191944504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585254650
    },
    {
        "content": "<p>yes, I'll do that later today</p>",
        "id": 191944825,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585254801
    },
    {
        "content": "<p>that PR looks good to me, definitely more followup</p>",
        "id": 191944841,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585254812
    }
]