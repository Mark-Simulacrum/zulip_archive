[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> I was taking a look at your <code>QuantifiedApply</code> branch</p>",
        "id": 182816963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575676697
    },
    {
        "content": "<p>I'm starting to think that the right thing is to not make any attempt to be \"general\" and to rename <code>QuantifiedApply</code> to just <code>Fn</code></p>",
        "id": 182816971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575676716
    },
    {
        "content": "<p>I'm going to push a bit of a \"messy\" commit that passes tests and fixes your recursion problem but looks a bit funny</p>",
        "id": 182816984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575676731
    },
    {
        "content": "<p>the commit message explains a bit more what's going on</p>",
        "id": 182817165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575676901
    },
    {
        "content": "<p>the reason you were getting infinite recursion had to do with the definition of <code>substitute</code> that you had--</p>",
        "id": 182817224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575676933
    },
    {
        "content": "<p>the idea with substitute was that it would take <code>for&lt;'p0...'pn&gt; T</code>, along with some lifetimes <code>'x0...'xn</code>, and return <code>['p0=&gt;'x0...'pn=&gt;'xn] T</code></p>",
        "id": 182817267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575676988
    },
    {
        "content": "<p>i.e., it \"removed\" one level of binder</p>",
        "id": 182817270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575676993
    },
    {
        "content": "<p>but in your formulation it didn't do that</p>",
        "id": 182817276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575676997
    },
    {
        "content": "<p>it preserved the levels of binders</p>",
        "id": 182817284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677003
    },
    {
        "content": "<p>hence the infinite recursion</p>",
        "id": 182817294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677012
    },
    {
        "content": "<p>however, the only <em>need</em> for that function in the first place was so that we could do <code>unify_forall_other</code> -- i.e., unify a type like <code>for&lt;'a&gt; T</code> and <code>U</code></p>",
        "id": 182817308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677029
    },
    {
        "content": "<p>but in practice <em>all</em> <code>for&lt;'a&gt;</code> types in Rust are tied to <code>fn</code> types of some ABI or another. And in fact that's exactly the point of this change, to kind of \"fuse\" together the quantification with the <code>fn</code> type, versus having them separated as chalk was originally intending -- this matches better Rust and just generally matches the syntax of Rust types better</p>",
        "id": 182817366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677077
    },
    {
        "content": "<p>(note that the other place you get <code>for</code> is <code>dyn</code> types, and they have a binder baked in already (in both rustc and chalk))</p>",
        "id": 182817372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677090
    },
    {
        "content": "<p>anyway so what this means is that if you think of <code>for&lt;'a&gt; T</code> as <em>really</em> being like <code>for&lt;'a&gt; fn(T)</code>-- then it makes no sense to unify a <code>for&lt;'a&gt; fn(T)</code> with some other non-forall type <code>U</code></p>",
        "id": 182817397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677130
    },
    {
        "content": "<p>that's like unifying a <code>Vec</code> and a <code>fn</code></p>",
        "id": 182817399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677134
    },
    {
        "content": "<p>so if just make that an error, we don't need the function, but we have to patch up a few random tests</p>",
        "id": 182817405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677144
    },
    {
        "content": "<p><del>I'm not actually sure if I did the right thing patching up the <code>forall_projection</code> tests the way I did</del></p>",
        "id": 182817461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677169
    },
    {
        "content": "<p><del>maybe I should have added some <code>for&lt;&gt;</code> into the impl instead</del></p>",
        "id": 182817466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677177
    },
    {
        "content": "<p><del>I'm a bit confused what the intent of those tests was</del></p>",
        "id": 182817470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677183
    },
    {
        "content": "<p><del>let me tinker with that...</del></p>",
        "id": 182817486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677210
    },
    {
        "content": "<p><del>ok, yeah, I think I did that wrong...</del></p>",
        "id": 182817604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677294
    },
    {
        "content": "<p>/me fixes</p>",
        "id": 182817609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677296
    },
    {
        "content": "<p>fixed</p>",
        "id": 182817655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575677352
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 182880730,
        "sender_full_name": "detrumi",
        "timestamp": 1575788321
    },
    {
        "content": "<p>Though I'm confused as to why the <code>for&lt;&gt;</code> was introduced in tests like this:</p>\n<div class=\"codehilite\"><pre><span></span>for&lt;&#39;a&gt; &lt;Unit as DropLt&lt;&#39;a&gt;&gt;::Item: Eq&lt;for&lt;&gt; Unit&gt;\n</pre></div>\n\n\n<p>There's no functions involved in these tests?</p>",
        "id": 182880811,
        "sender_full_name": "detrumi",
        "timestamp": 1575788522
    },
    {
        "content": "<p>You mentioned that forall types will only be created for function types, but here they're used around associated types?</p>",
        "id": 182880969,
        "sender_full_name": "detrumi",
        "timestamp": 1575788852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> well in effect the <code>for&lt;&gt;</code> notation should be read as <code>fn()</code></p>",
        "id": 182987486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575917931
    },
    {
        "content": "<p>so e.g., the <code>for&lt;'a&gt; &lt;Unit as  DropLt&lt;'a&gt;&gt;::Item</code> is kind of <code>for&lt;'a&gt; fn(&lt;Unit as  DropLt&lt;'a&gt;&gt;::Item)</code></p>",
        "id": 182987546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575917958
    },
    {
        "content": "<p>(at least, with the changes I made)</p>",
        "id": 182987553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575917962
    },
    {
        "content": "<p>so in order to unify, then, we had to add a <code>fn(Unit)</code> on the other side</p>",
        "id": 182987568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575917974
    },
    {
        "content": "<p>but if we go this road, we would presumably (a) change the name to <code>Fn</code> or something and then (b) change the syntax</p>",
        "id": 182987588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575917988
    },
    {
        "content": "<p>Ah, I see. That got really confusing, but I see what you mean now</p>",
        "id": 182987845,
        "sender_full_name": "detrumi",
        "timestamp": 1575918124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> yeah it kind of confused me too for a bit, as I was working on the patch :)</p>",
        "id": 182987906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918170
    },
    {
        "content": "<p>in particular one thing I was confused about was:</p>",
        "id": 182987920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918181
    },
    {
        "content": "<p>there are two places in rust types where <code>for&lt;'a&gt;</code> comes into play</p>",
        "id": 182987934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918189
    },
    {
        "content": "<p>one of them is <code>fn</code> types, the other is <code>dyn</code> types</p>",
        "id": 182987941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918194
    },
    {
        "content": "<p>I think I originally imagined chalk would factor that out into a common place (hence the current design)</p>",
        "id": 182987964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918208
    },
    {
        "content": "<p>but in fact <code>dyn</code> already includes the binders in its setup</p>",
        "id": 182987978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918216
    },
    {
        "content": "<p>so really the only thing left for <code>for</code> is <code>fn</code></p>",
        "id": 182987989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918222
    },
    {
        "content": "<p>I think in the end, just specializing to <code>fn</code> makes the type easier to understand anyway</p>",
        "id": 182988002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918234
    },
    {
        "content": "<p>more connected to rust</p>",
        "id": 182988007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575918238
    },
    {
        "content": "<p>Yeah, being less general here makes it clearer and easier to solve</p>",
        "id": 182988136,
        "sender_full_name": "detrumi",
        "timestamp": 1575918298
    },
    {
        "content": "<p>Oh, I am re-reading our notes from last time,</p>",
        "id": 183004176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575928316
    },
    {
        "content": "<p>I see there is one more case I had overlooked -- generator witnesses</p>",
        "id": 183004218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575928325
    },
    {
        "content": "<p>maybe we'll just extend chalk with that concept directly, though</p>",
        "id": 183004221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575928332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've rebased and updated the parser, so it should be good to go. I've renamed <code>TyData::ForAll</code> to <code>TyData::Function</code> as well. Was about to ask whether that <code>Box</code> was still needed, but seems like that was already removed in the meantime <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 184656119,
        "sender_full_name": "detrumi",
        "timestamp": 1577976682
    },
    {
        "content": "<p>Nice, <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span></p>",
        "id": 184934556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578336736
    },
    {
        "content": "<p>Left one <a href=\"https://github.com/rust-lang/chalk/pull/293#pullrequestreview-338851037\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/293#pullrequestreview-338851037\">minor nit</a>, otherwise ready to merge I think</p>",
        "id": 184938612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578339635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Nit fixed!</p>",
        "id": 184951707,
        "sender_full_name": "detrumi",
        "timestamp": 1578341600
    },
    {
        "content": "<p>nice</p>",
        "id": 184951734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341627
    },
    {
        "content": "<p>merged!</p>",
        "id": 184951798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341649
    }
]