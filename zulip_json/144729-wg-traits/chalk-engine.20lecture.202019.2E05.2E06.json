[
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/chalk-engine-lecture-2019.05.06--Acnlx2JJbLGF~yZnAjI5~ZNmAg-IISt9WIs4knyZMuv5X3Fm\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/chalk-engine-lecture-2019.05.06--Acnlx2JJbLGF~yZnAjI5~ZNmAg-IISt9WIs4knyZMuv5X3Fm\">Paper document</a></p>",
        "id": 165006812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557167682
    },
    {
        "content": "<p><a href=\"https://zoom.us/j/595785544\" target=\"_blank\" title=\"https://zoom.us/j/595785544\">Zoom link</a></p>",
        "id": 165006870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557167729
    },
    {
        "content": "<p>That went well, with us adding some notes here and there</p>",
        "id": 165013052,
        "sender_full_name": "detrumi",
        "timestamp": 1557172210
    },
    {
        "content": "<p>Yeah, seems good</p>",
        "id": 165013135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557172280
    },
    {
        "content": "<p>Maybe we could also write down questions inline next time?</p>",
        "id": 165013136,
        "sender_full_name": "detrumi",
        "timestamp": 1557172280
    },
    {
        "content": "<p>Good idea</p>",
        "id": 165013138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557172288
    },
    {
        "content": "<p>So one thing I didn't make very clear at the end:</p>",
        "id": 165013929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557172858
    },
    {
        "content": "<p>I think that if we don't care about negative cycles, it somewhat simplifies the question of \"when to undelay\"</p>",
        "id": 165013946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557172869
    },
    {
        "content": "<p>But I'd like to understand better the importance of negative cycles here</p>",
        "id": 165013965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557172901
    },
    {
        "content": "<p>It seems... plausible that we could just propagate \"non-enumerable\" things all the way out, and push the \"undelay logic\" to some outer loop, too</p>",
        "id": 165014014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557172924
    },
    {
        "content": "<p>Also, one last thing: region constraints can be considered a kind of delayed literal</p>",
        "id": 165014056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557172952
    },
    {
        "content": "<p>Won't there be a problem with delaying too many things, in that you'd have to undelay in a certain order to make progress?</p>",
        "id": 165014100,
        "sender_full_name": "detrumi",
        "timestamp": 1557173008
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 165014112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173021
    },
    {
        "content": "<p>Well, it depends what you mean</p>",
        "id": 165014118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173028
    },
    {
        "content": "<p>I guess the answer is \"maybe\"</p>",
        "id": 165014181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173055
    },
    {
        "content": "<p>Heh, that's what you get for asking a vague question, I guess</p>",
        "id": 165014190,
        "sender_full_name": "detrumi",
        "timestamp": 1557173071
    },
    {
        "content": "<p>(Anyway I think we probably want to undelay more aggressively than what I was suggesting)</p>",
        "id": 165014195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173074
    },
    {
        "content": "<p>Well, so, specifically -- things like <code>Sized</code> don't \"help\" with progress</p>",
        "id": 165014201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173083
    },
    {
        "content": "<p>i.e., <code>Sized</code> never \"constrains\" its argument really</p>",
        "id": 165014211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173099
    },
    {
        "content": "<p>but this is perhaps untrue for other traits</p>",
        "id": 165014222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173104
    },
    {
        "content": "<p>(As an aside,</p>",
        "id": 165014249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173128
    },
    {
        "content": "<p>one thing I think we could/should also do is to apply some heuristics to the impls of a given trait,</p>",
        "id": 165014256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173139
    },
    {
        "content": "<p>to try and aid our selection order)</p>",
        "id": 165014259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173145
    },
    {
        "content": "<p>Another clarification: on quantum</p>",
        "id": 165014658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173414
    },
    {
        "content": "<p>It looks like the time that we use quantum is this</p>",
        "id": 165014674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173431
    },
    {
        "content": "<ul>\n<li>Each time we pursue a strand and it encounters a cycle, we save those strands into a vector</li>\n</ul>",
        "id": 165014692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173447
    },
    {
        "content": "<ul>\n<li>But if we pursue a strand and it <em>fails</em> (no answer)</li>\n</ul>",
        "id": 165014709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173462
    },
    {
        "content": "<ul>\n<li>then we re-enqueue the remaining cyclic strands onto the table and yield up \"quantum exceeded\"</li>\n</ul>",
        "id": 165014732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173481
    },
    {
        "content": "<p>because the strands are in a LIFO, we'll come back to them only after trying the other work anyway</p>",
        "id": 165014744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173498
    },
    {
        "content": "<p>you might wonder why we bother to \"stash\" the cyclic strnads into the vector anyway</p>",
        "id": 165014811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173535
    },
    {
        "content": "<p>the idea is that we want to know if ALL of the remaining strands are cyclic</p>",
        "id": 165014818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173541
    },
    {
        "content": "<p>because that means there are no more answers at all</p>",
        "id": 165014820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173547
    },
    {
        "content": "<blockquote>\n<p>one thing I think we could/should also do is to apply some heuristics to the impls of a given trait,</p>\n</blockquote>\n<p>as a strawman, we could have a hierarchy where you have<br>\n1. Traits with non-quantified impls (we can even count the impls here)<br>\n2. Traits with universally quantified impls (e.g. <code>impl&lt;T&gt; Foo for Vec&lt;T&gt;</code>)<br>\n  - maybe we should split this into bounded (e.g. <code>impl&lt;T: Bar&gt;</code>) and unbounded?<br>\n3. Auto traits<br>\n  - we can include <code>impl&lt;T&gt; Foo for T</code> in this category</p>",
        "id": 165014894,
        "sender_full_name": "tmandry",
        "timestamp": 1557173614
    },
    {
        "content": "<p>Yeah, something like that</p>",
        "id": 165014972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173650
    },
    {
        "content": "<p>I think the \"bounded and unbounded\" -- it might be that we are interesting in DAGs</p>",
        "id": 165014993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173669
    },
    {
        "content": "<p>i.e., if trait Foo includes a bound <code>T: BAr</code>, but <code>Bar</code> has no <code>T: Foo</code> bounds -- that's more ok?</p>",
        "id": 165015010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173689
    },
    {
        "content": "<p>(I always imagined we would kind of look at what impls exist \"in practice\" to help us drive said heuristics)</p>",
        "id": 165015031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173705
    },
    {
        "content": "<p>but some kind of \"locally testable heuristics\" seem very good</p>",
        "id": 165015049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557173719
    },
    {
        "content": "<p>This resembles a kind of pathfinding algorithm where our nodes are strands, and the cost of traversing each node is its outdegree</p>",
        "id": 165015525,
        "sender_full_name": "tmandry",
        "timestamp": 1557174021
    },
    {
        "content": "<p>So it seems kind of like one could think about this in terms of \"collecting constraints\", kind of like we do for regions</p>",
        "id": 165017901,
        "sender_full_name": "tmandry",
        "timestamp": 1557175927
    },
    {
        "content": "<p>basically any non-enumerable goal is added as a constraint on a particular strand</p>",
        "id": 165017962,
        "sender_full_name": "tmandry",
        "timestamp": 1557176008
    },
    {
        "content": "<p>I guess that's equivalent to the delayed literals approach niko mentioned</p>",
        "id": 165017978,
        "sender_full_name": "tmandry",
        "timestamp": 1557176034
    },
    {
        "content": "<p>except for the question of \"how does this interact with negative reasoning\"</p>",
        "id": 165018053,
        "sender_full_name": "tmandry",
        "timestamp": 1557176071
    },
    {
        "content": "<p>..maybe we could have two separate mechanisms, one (delayed literals) for negative reasoning, the other (constraints) for non-enumerable goals</p>",
        "id": 165018068,
        "sender_full_name": "tmandry",
        "timestamp": 1557176093
    },
    {
        "content": "<p>I don't know if I'm making sense :)</p>",
        "id": 165018080,
        "sender_full_name": "tmandry",
        "timestamp": 1557176103
    },
    {
        "content": "<p>you are, I've been debating if they should be unified or not</p>",
        "id": 165018101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176121
    },
    {
        "content": "<p>I've also been reading the source to remember how this logic works</p>",
        "id": 165018292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176265
    },
    {
        "content": "<p>I think I have to page back in <a href=\"https://core.ac.uk/download/pdf/82336448.pdf\" target=\"_blank\" title=\"https://core.ac.uk/download/pdf/82336448.pdf\">the EWFS paper</a> as well</p>",
        "id": 165018392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176320
    },
    {
        "content": "<p>another related question is, if we collect these non-enumerable goals as constraints, how complicated could they get, and can we solve them outside of the main engine path?</p>",
        "id": 165018449,
        "sender_full_name": "tmandry",
        "timestamp": 1557176372
    },
    {
        "content": "<p>(since we're already going to be doing this for region constraints, it seems natural to wonder if things like <code>?T: Sized</code> could take on a similar shape)</p>",
        "id": 165018693,
        "sender_full_name": "tmandry",
        "timestamp": 1557176537
    },
    {
        "content": "<p>Right, so, if we focus on the case of compiler-builtins, then they would be quite simple. It seems like you could just give up the answer including the delayed literals</p>",
        "id": 165018704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176542
    },
    {
        "content": "<p>and then have an outer loop to process them</p>",
        "id": 165018708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176548
    },
    {
        "content": "<p>this would probably include things like <code>Clone</code> though</p>",
        "id": 165018730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176578
    },
    {
        "content": "<p>process the literal itself can definitely require arbitrary logic</p>",
        "id": 165018743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176588
    },
    {
        "content": "<p>but this is roughly equivalent to our current solver, but different</p>",
        "id": 165018783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176634
    },
    {
        "content": "<p>i.e., we assume that during type-checking or whatever you have some \"fulfillment context\" accumulating things you must prove</p>",
        "id": 165018839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176654
    },
    {
        "content": "<p>so if you get back an answer with delayed things, it can just add those to its list of \"stuff to prove eventually\"</p>",
        "id": 165018855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176677
    },
    {
        "content": "<p>(the existing rustc solver does something similar)</p>",
        "id": 165018871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176696
    },
    {
        "content": "<p>( I am pondering to what extent this can solve the negative problem too )</p>",
        "id": 165018992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176772
    },
    {
        "content": "<p>let me try to spell out what i'm saying</p>",
        "id": 165018997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176783
    },
    {
        "content": "<p>imagine we had</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165019016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176803
    },
    {
        "content": "<p>and then we had to prove <code>?A: Foo</code></p>",
        "id": 165019029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176820
    },
    {
        "content": "<p>this might result in <code>?A = Vec&lt;?B&gt; modulo ?B: Sized</code></p>",
        "id": 165019055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176832
    },
    {
        "content": "<p>er, that's a confusing notation :)</p>",
        "id": 165019059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176839
    },
    {
        "content": "<p>maybe that's less unclear ;)</p>",
        "id": 165019076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176853
    },
    {
        "content": "<p>point is, it could delay the <code>?B: Sized</code> part (non-enumerable)\"</p>",
        "id": 165019082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176862
    },
    {
        "content": "<p>and hence we would consider <code>?A: Foo</code> \"proved\" but we would enqueue <code>?B: Sized</code></p>",
        "id": 165019094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176878
    },
    {
        "content": "<p>now, maybe other parts of the type-checker constrain <code>?B: Sized</code>, and so at some point we have <code>?B = u32</code></p>",
        "id": 165019150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176893
    },
    {
        "content": "<p>now when we go to \"re-prove\" <code>?B: Sized</code>, we get <code>u32: Sized</code> and we're all set</p>",
        "id": 165019174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176918
    },
    {
        "content": "<p>(it seems like a similar thing could work for the coinductive case)</p>",
        "id": 165019200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176944
    },
    {
        "content": "<p>what's nice about this is</p>",
        "id": 165019226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176966
    },
    {
        "content": "<p>the chalk-engine <em>tables</em> never change</p>",
        "id": 165019236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176975
    },
    {
        "content": "<p>one thing that's been bugging me with delayed literals is that there is this \"simplification\" step</p>",
        "id": 165019243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557176986
    },
    {
        "content": "<p>that takes the existing answers, re-evaluates their delays, and can kind of rule them as \"succeeded\", \"failed\", or \"unknown\" as a result</p>",
        "id": 165019313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177008
    },
    {
        "content": "<p>I mean I guess editing the answers in place is .. fine. It just makes me kind of nervous.</p>",
        "id": 165019322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177021
    },
    {
        "content": "<p>Because part of the reasoning here is that <code>Answer(Table, Index)</code> (once computed) is always the same</p>",
        "id": 165019337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177036
    },
    {
        "content": "<blockquote>\n<p>what's nice about this is</p>\n</blockquote>\n<p>what's less nice is that something this is silly</p>",
        "id": 165019403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177094
    },
    {
        "content": "<p>i.e., if we \"delay <code>?B: Sized</code>\" but later find out what <code>?B</code> is, we could go ahead and process it right then and there</p>",
        "id": 165019416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177105
    },
    {
        "content": "<p>otoh, who cares...</p>",
        "id": 165019463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177123
    },
    {
        "content": "<p>seems (to me) like this 'outer loop' idea is the way to go; there's caching and if it winds up being a perf problem, we could look into something more sophisticated</p>",
        "id": 165019506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177155
    },
    {
        "content": "<p>(in short, we likely got bigger perf problems to solve first)</p>",
        "id": 165019567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177203
    },
    {
        "content": "<p>is that going to avoid the \"editing answer in-place\" problem you mentioned?</p>",
        "id": 165019586,
        "sender_full_name": "tmandry",
        "timestamp": 1557177224
    },
    {
        "content": "<p>(seems like it could)</p>",
        "id": 165019600,
        "sender_full_name": "tmandry",
        "timestamp": 1557177233
    },
    {
        "content": "<p>the outer loop idea?</p>",
        "id": 165019608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177240
    },
    {
        "content": "<p>yes</p>",
        "id": 165019649,
        "sender_full_name": "tmandry",
        "timestamp": 1557177244
    },
    {
        "content": "<p>yeah, I mean, the idea is that we just .. never simplify</p>",
        "id": 165019663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177251
    },
    {
        "content": "<p>we let the outer loop do it</p>",
        "id": 165019664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177253
    },
    {
        "content": "<p>so we'd have our internal <code>ensure_answer(T0, 0)</code> returns <code>?A = Vec&lt;?B&gt; modulo ?B: Sized</code> and then we remove the <code>modulo</code> part every time</p>",
        "id": 165019686,
        "sender_full_name": "tmandry",
        "timestamp": 1557177294
    },
    {
        "content": "<p>right</p>",
        "id": 165019704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177303
    },
    {
        "content": "<p>(but those results are cached etc)</p>",
        "id": 165019733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177322
    },
    {
        "content": "<p>still, it's probably also fine to remove it in the table itself</p>",
        "id": 165019740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177332
    },
    {
        "content": "<p>if we did that we'd have to do something with the answers that don't work, i.e. do we leave a placeholder so the index doesn't change</p>",
        "id": 165019842,
        "sender_full_name": "tmandry",
        "timestamp": 1557177398
    },
    {
        "content": "<p>I don't know that this works for the negative cycle case; well, it works in a sense, I think you would wind up just \"reprocessing\" the same constraints over and over</p>",
        "id": 165019857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177416
    },
    {
        "content": "<blockquote>\n<p>if we did that we'd have to do something with the answers that don't work, i.e. do we leave a placeholder so the index doesn't change</p>\n</blockquote>\n<p>yes, they would presumably get transformed to \"fail\" or something</p>",
        "id": 165019884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177435
    },
    {
        "content": "<blockquote>\n<p>I think you would wind up just \"reprocessing\" the same constraints over and over</p>\n</blockquote>\n<p>I have to go in a sec, but don't quite see why this is true :)</p>",
        "id": 165020068,
        "sender_full_name": "tmandry",
        "timestamp": 1557177592
    },
    {
        "content": "<p>I don't know that it's entirely true :)</p>",
        "id": 165020204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177678
    },
    {
        "content": "<p>(I need to work through some of the examples)</p>",
        "id": 165020312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177746
    },
    {
        "content": "<p>I really do wonder if we should worry about negative reasoning though. Maybe this is all reason enough to rule it out and simplify our lives.</p>",
        "id": 165020332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177769
    },
    {
        "content": "<p>For some reason, I am reluctant to do that, but it's hard for me to say why that is</p>",
        "id": 165020339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177777
    },
    {
        "content": "<p>I guess beacuse I'd like to be able to articulate very precisely what the tricky cases are, at minimum, so when people ask, we can answer them</p>",
        "id": 165020368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177812
    },
    {
        "content": "<p>I realized some problems here with this \"un-enumerable predicates\" idea. I don't know how well it interacts with hereditary harrop predicates like <code>forall&lt;T&gt; { Goal }</code> and so forth. In particular, it seems like you have to capture the universe / environment and things when you propagate the goal back. I .. guess we can do this, it's just kind of an interesting twist.</p>",
        "id": 165095017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557251952
    },
    {
        "content": "<p>Was the Zoom meeting not recorded as usual? <br>\nI'm asking because there is no video on the YouTube channel.</p>",
        "id": 165189358,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1557341001
    },
    {
        "content": "<p>I just didn't post it yet</p>",
        "id": 165189653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557341244
    },
    {
        "content": "<p>Will try to do that soon</p>",
        "id": 165189655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557341246
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 165191704,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1557342591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"200368\">@Julius-Beides</span> <a href=\"https://youtu.be/hmV66tB79LM\" target=\"_blank\" title=\"https://youtu.be/hmV66tB79LM\">video is uploading at this url</a>, but it's not available yet</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"hmV66tB79LM\" href=\"https://youtu.be/hmV66tB79LM\" target=\"_blank\" title=\"https://youtu.be/hmV66tB79LM\"><img src=\"https://i.ytimg.com/vi/hmV66tB79LM/default.jpg\"></a></div>",
        "id": 165203395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557351291
    }
]