[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> -- so I've been wondering about whether it would be possible to make <strong>all</strong> trait matching coinductive.</p>",
        "id": 167876273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560277448
    },
    {
        "content": "<p>The obvious complication here has to do with implied bounds.</p>",
        "id": 167876281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560277457
    },
    {
        "content": "<p>The motivation is two-fold:</p>\n<ul>\n<li>simplicity (the mix of inductive + coinductive is a pain)</li>\n<li>so-called \"perfect derive\"</li>\n</ul>",
        "id": 167876300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560277477
    },
    {
        "content": "<p>I think this might require us to prove \"fully implemented\" predicates each time we prove <code>T: Trait</code></p>",
        "id": 167876315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560277490
    },
    {
        "content": "<p>(which <em>definitely</em> means we need to rename it =)</p>",
        "id": 167876325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560277500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> interesting</p>",
        "id": 167880326,
        "sender_full_name": "scalexm",
        "timestamp": 1560279886
    },
    {
        "content": "<p>I’ll think about it and try to see if we can make it work</p>",
        "id": 167880377,
        "sender_full_name": "scalexm",
        "timestamp": 1560279912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> i feel like it could work if we keep the separate <code>FromEnv</code> / <code>FullyImplemented</code> setting</p>",
        "id": 168148568,
        "sender_full_name": "scalexm",
        "timestamp": 1560528525
    },
    {
        "content": "<p>And that we lower all bounds to <code>FullyImplemented</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Declared(T: Foo) :- FullyImplemented(T: Bar)</span>\n</pre></div>",
        "id": 168148639,
        "sender_full_name": "scalexm",
        "timestamp": 1560528590
    },
    {
        "content": "<p>(Both <code>Declared</code> and <code>FullyImplemented</code> would be co-inductive, as always <code>FullyImplemented</code> is just a carrier traits enabling us to enumerate all the super <code>Declared</code> bounds on a trait)</p>",
        "id": 168148735,
        "sender_full_name": "scalexm",
        "timestamp": 1560528639
    },
    {
        "content": "<p>However merging <code>FullyImplemented</code> and <code>FromEnv</code> (i.e. having « true » reverse rules) is definitely not possible, i gave an example some time ago in the « alternate implied bounds lowering » stream</p>",
        "id": 168148882,
        "sender_full_name": "scalexm",
        "timestamp": 1560528737
    },
    {
        "content": "<p>Best thing to do would be to prototype in chalk, also I’ll have to re-spend a lot of time to convince myself this new setting is sound :)</p>",
        "id": 168149703,
        "sender_full_name": "scalexm",
        "timestamp": 1560529328
    },
    {
        "content": "<p>before we do that</p>",
        "id": 168152329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531314
    },
    {
        "content": "<p>I have to fix the soundness bug in today's coinductive handling</p>",
        "id": 168152337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531320
    },
    {
        "content": "<p>=)</p>",
        "id": 168152353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531327
    },
    {
        "content": "<blockquote>\n<p>However merging <code>FullyImplemented</code> and <code>FromEnv</code> (i.e. having « true » reverse rules) is definitely not possible, i gave an example some time ago in the « alternate implied bounds lowering » stream</p>\n</blockquote>\n<p>yeah I figured that the from-env/fully-impl split was the key innovation that might make this possible</p>",
        "id": 168152376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531346
    },
    {
        "content": "<blockquote>\n<p>I have to fix the soundness bug in today's coinductive handling</p>\n</blockquote>\n<p>I guess this isn't really a blocker -- <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> is this something you'd be curious to play with?</p>",
        "id": 168873602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561401056
    },
    {
        "content": "<p>Also, remind me, you proved the soundness of the current setup -- or sketched a proof -- or something like that, right? I was discussing the whole setup with <span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> a few days back and made an assertion like this, but I want to be sure I'm correct. =)</p>",
        "id": 168873661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561401100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes i sketched a proof that the current setup was correct in the absence of implied bounds from types, although I believe they’re quite trivial to add</p>",
        "id": 168874283,
        "sender_full_name": "scalexm",
        "timestamp": 1561401577
    },
    {
        "content": "<p>But the proof is very simple, basically an induction on the minimal depth of  a proof tree</p>",
        "id": 168874387,
        "sender_full_name": "scalexm",
        "timestamp": 1561401629
    },
    {
        "content": "<p>About the « coinductive all the way » setup, I could try to give it a go yeah</p>",
        "id": 168874437,
        "sender_full_name": "scalexm",
        "timestamp": 1561401672
    },
    {
        "content": "<p>I'm interested in working on lazy normalization</p>",
        "id": 173838130,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1566427244
    },
    {
        "content": "<p>Is that blocked on further integration of chalk?</p>",
        "id": 173838140,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1566427257
    },
    {
        "content": "<p>Or is it something that's reasonable to work on right now?</p>",
        "id": 173838166,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1566427287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> eddyb suggested I ask you about this</p>",
        "id": 173838286,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1566427422
    }
]