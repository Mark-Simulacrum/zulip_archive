[
    {
        "content": "<p>FYI, I filed a compiler-team MCP for refactoring rustc predicates. Discussion thread is in <a class=\"stream-topic\" data-stream-id=\"233931\" href=\"/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/intern.20predicates.2C.20introduce.20forall.2Fimplie.20compiler-team.23285\">#t-compiler/major changes &gt; intern predicates, introduce forall/implie compiler-team#285</a></p>",
        "id": 196304671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588684071
    },
    {
        "content": "<p>This is tempting now that I have <em>some</em> experience hacking on rustc</p>",
        "id": 196343166,
        "sender_full_name": "Jack Huey",
        "timestamp": 1588701599
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> -- the branch is <a href=\"https://github.com/nikomatsakis/rust/tree/predicate-goal-2\" title=\"https://github.com/nikomatsakis/rust/tree/predicate-goal-2\">nikomatsakis/predicate-goal-2</a></p>",
        "id": 196878265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933166
    },
    {
        "content": "<p>I'm working so far on the \"intern all predicates\" step</p>",
        "id": 196878274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933177
    },
    {
        "content": "<p>which is also a step towards \"extracting a shared ty library for rustc/chalk/rust-analyzer\" so <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 196878292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933194
    },
    {
        "content": "<p>my first attempt (the <code>predicate-goal</code> branch) tried to do too much at once and I just about died</p>",
        "id": 196878345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933212
    },
    {
        "content": "<p>but I've now done three steps</p>\n<ul>\n<li>rename <code>Predicate</code> to <code>PredicateKind</code>, introduce alias</li>\n<li>make <code>to_predicate</code> take a <code>tcx</code> argument </li>\n<li>introduce newtype'd <code>Predicate&lt;'tcx&gt;</code></li>\n</ul>",
        "id": 196878402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933255
    },
    {
        "content": "<p>at this point most of the hard work, I think, is done</p>",
        "id": 196878412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933263
    },
    {
        "content": "<p>the next step is to change the (existing) <code>mk_predicate</code> method to actually do interning</p>",
        "id": 196878427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933275
    },
    {
        "content": "<p>at that point, I think it's a PR worth posting,</p>",
        "id": 196878442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933294
    },
    {
        "content": "<p>and I guess we get to the interesting stuff :)</p>",
        "id": 196878447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933302
    },
    {
        "content": "<p>I guess i'll try to take that final step</p>",
        "id": 196878728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933493
    },
    {
        "content": "<p>and then we can discuss the remainder?</p>",
        "id": 196878744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933508
    },
    {
        "content": "<p>at least I still have some time this morning</p>",
        "id": 196878763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933523
    },
    {
        "content": "<p>You can do that, I would prefer you to review <a href=\"https://github.com/rust-lang/rust/pull/71973\" title=\"https://github.com/rust-lang/rust/pull/71973\">https://github.com/rust-lang/rust/pull/71973</a> while I finish your branch here though <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 196878874,
        "sender_full_name": "lcnr",
        "timestamp": 1588933604
    },
    {
        "content": "<p>lol that's..not a bad idea :)</p>",
        "id": 196878992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933687
    },
    {
        "content": "<p>that is on my morning agenda.. :)</p>",
        "id": 196879001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> I just remembered sometihng</p>",
        "id": 196879010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933700
    },
    {
        "content": "<p>well, it's minor enough, but one other bit of work is</p>",
        "id": 196879034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933713
    },
    {
        "content": "<p>currently I have a <code>Predicate</code> struct with a <code>kind()</code> method that returns <code>PredicateKind</code></p>",
        "id": 196879048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933730
    },
    {
        "content": "<p>I guess that to be \"most like\" chalk, it should return a <code>&amp;PredicateKind</code></p>",
        "id": 196879064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933740
    },
    {
        "content": "<p>though I might wait on doing that</p>",
        "id": 196879072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933746
    },
    {
        "content": "<p>it'll be a mildly annoying change because it'll cause the various matches to yield <code>&amp;DefId</code> instead of <code>DefId</code></p>",
        "id": 196879099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933765
    },
    {
        "content": "<p>/me grumbles that we don't have an ergonomic fix for that yet</p>",
        "id": 196879117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933778
    },
    {
        "content": "<p>meh, let's hold off on that, I think that's more logically part of another PR series...</p>",
        "id": 196879197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933820
    },
    {
        "content": "<blockquote>\n<p>I guess that to be \"most like\" chalk, it should return a &amp;PredicateKind</p>\n</blockquote>\n<p>won't we have to do this anyways once <code>PredicateKind</code> is interned?</p>",
        "id": 196879204,
        "sender_full_name": "lcnr",
        "timestamp": 1588933826
    },
    {
        "content": "<p>no, because it's also <code>Copy</code></p>",
        "id": 196879237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933855
    },
    {
        "content": "<p>ok, I just pushed a WIP commit</p>",
        "id": 196879246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933860
    },
    {
        "content": "<p>and now I see you need a few annoying impls, like a Lift impl and the like</p>",
        "id": 196879263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933873
    },
    {
        "content": "<p>I'll hand off that part to you :P</p>",
        "id": 196879270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933877
    },
    {
        "content": "<p>actually I need to go and prep breakfast anyway</p>",
        "id": 196879276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933884
    },
    {
        "content": "<p>but I do plan to review <a href=\"https://github.com/rust-lang/rust/issues/71973\" title=\"https://github.com/rust-lang/rust/issues/71973\">#71973</a>!</p>",
        "id": 196879296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933897
    },
    {
        "content": "<p>(though my morning coffee time is usually reserved for a bit of hacking or reading or something ;)</p>",
        "id": 196879310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588933913
    },
    {
        "content": "<blockquote>\n<p>no, because it's also Copy</p>\n</blockquote>\n<p>We still want to to use <code>&amp;T</code> for the quicker equality checks afaict <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> probably can do that later though</p>",
        "id": 196879508,
        "sender_full_name": "lcnr",
        "timestamp": 1588934052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> to be clear, 'm happy to change it to return <code>&amp;PredicateKind</code></p>",
        "id": 196879861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588934375
    },
    {
        "content": "<p>I would still do it in a separate commit, but I'd be happy to have it done</p>",
        "id": 196879875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588934396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are you using <code>cargo fmt</code> directly instead of <code>x.py fmt</code>?</p>",
        "id": 197002461,
        "sender_full_name": "lcnr",
        "timestamp": 1589045180
    },
    {
        "content": "<p>Was there a reason for choosing <code>struct Predicate { kind: &amp;'tcx PredicateKind&lt;'tcx&gt; }</code> over <code>type Predicate&lt;'tcx&gt; = &amp;'tcx PredicateKind&lt;'tcx&gt;</code>? (edit: ah, changing it to a type alias requires us to manually impl <code>TypeFoldable</code> (and probably some other stuff))</p>",
        "id": 197003187,
        "sender_full_name": "lcnr",
        "timestamp": 1589046160
    },
    {
        "content": "<p>Fixed the missing impl and opened a draft PR <a href=\"https://github.com/rust-lang/rust/pull/72055\" title=\"https://github.com/rust-lang/rust/pull/72055\">https://github.com/rust-lang/rust/pull/72055</a></p>",
        "id": 197003322,
        "sender_full_name": "lcnr",
        "timestamp": 1589046410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I think rust-analylzer was running rustfmt sometimes, I was expecting to do a <code>x.py fmt</code> at the end</p>",
        "id": 197182695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/refactoring.20rustc.20predicates.2C.20a.20MCP/near/197003187\">said</a>:</p>\n<blockquote>\n<p>Was there a reason for choosing <code>struct Predicate { kind: &amp;'tcx PredicateKind&lt;'tcx&gt; }</code> over <code>type Predicate&lt;'tcx&gt; = &amp;'tcx PredicateKind&lt;'tcx&gt;</code>? (edit: ah, changing it to a type alias requires us to manually impl <code>TypeFoldable</code> (and probably some other stuff))</p>\n</blockquote>\n<p>Yes</p>",
        "id": 197182706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220170
    },
    {
        "content": "<p>Two reasons</p>",
        "id": 197182714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220174
    },
    {
        "content": "<p>I started with the type alias, but</p>",
        "id": 197182725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220177
    },
    {
        "content": "<p>when you invoke <code>pred.fold_with(&amp;mut folder)</code>, the method resolution algorithm would pick the wrong type</p>",
        "id": 197182747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220194
    },
    {
        "content": "<p>that was the first reason.</p>",
        "id": 197182777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220204
    },
    {
        "content": "<p>Also see my WIP comment on the PR:</p>\n<blockquote>\n<p>IMO we should also replace Predicate with type Predicate&lt;'tcx&gt; = &amp;'tcx PredicateKind&lt;'tcx&gt; (edit: in this PR), even if we have to manually implement TypeFoldable and friends in this case.</p>\n</blockquote>\n<p>Let's not do that :laugh: It's quite dangerous as we can't make the constructor of <code>PredicateKind</code> private, which probably will cause some strange errors where we compare their pointers for equality</p>",
        "id": 197182804,
        "sender_full_name": "lcnr",
        "timestamp": 1589220219
    },
    {
        "content": "<p>the second reason was that I realized that this structure matched the chalk structure more closely that I'm hoping to move the compiler towards anyway</p>",
        "id": 197182813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220227
    },
    {
        "content": "<p>so actually it's what I should've done in the first place</p>",
        "id": 197182880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220245
    },
    {
        "content": "<p>yes, and that was the third reason</p>",
        "id": 197182901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220258
    },
    {
        "content": "<p>(comparing pointers for equality)</p>",
        "id": 197182910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220261
    },
    {
        "content": "<p>tl;dr I think the <code>Predicate&lt;'tcx&gt;</code> struct is what we want, but it's good to note the reasons</p>",
        "id": 197182956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220290
    },
    {
        "content": "<p>I just implemented a third option, which solves 1 and 3, but sadly not 2</p>",
        "id": 197183032,
        "sender_full_name": "lcnr",
        "timestamp": 1589220335
    },
    {
        "content": "<p>I changed <code>Predicate</code> back to <code>kind: PredicateKind</code> and interned <code>Predicate</code> itself.</p>",
        "id": 197183118,
        "sender_full_name": "lcnr",
        "timestamp": 1589220368
    },
    {
        "content": "<p>I pushed this on github, but if you think that it's better to stay with <code>Predicate { kind: &amp;'tcx PredicateKind&lt;'Tcx&gt; }</code> I can revert that last commit.</p>",
        "id": 197183197,
        "sender_full_name": "lcnr",
        "timestamp": 1589220432
    },
    {
        "content": "<p>I still think <code>Predicate&lt;'tcx&gt;</code> as a newtype struct is just correct</p>",
        "id": 197183201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220434
    },
    {
        "content": "<p>but I can check what you pushed :)</p>",
        "id": 197183242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220449
    },
    {
        "content": "<p>cause I don't quite understand</p>",
        "id": 197183246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220452
    },
    {
        "content": "<p>What is the advantage to using <code>&amp;'tcx Predicate&lt;'tcx&gt;</code> over <code>Predicate&lt;'tcx&gt;</code>? It seems less ergonomic (longer type name) and more expensive (more interning)</p>",
        "id": 197183385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220524
    },
    {
        "content": "<p>It's the same amount of interning, as predicate now contains <code>PredicateKind</code> directly</p>",
        "id": 197183446,
        "sender_full_name": "lcnr",
        "timestamp": 1589220556
    },
    {
        "content": "<p>Ah, ok, I see</p>",
        "id": 197183456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220565
    },
    {
        "content": "<p>Still seems like more typing though</p>",
        "id": 197183470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220574
    },
    {
        "content": "<p>also less consistent</p>",
        "id": 197183488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220589
    },
    {
        "content": "<p>e.g., we usually use <code>ty::Region&lt;'tcx&gt;</code> and <code>Ty&lt;'tcx&gt;</code>, etc</p>",
        "id": 197183507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220598
    },
    {
        "content": "<p><code>Eq</code> now has one less dereference <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> biggest reason tbh</p>",
        "id": 197183509,
        "sender_full_name": "lcnr",
        "timestamp": 1589220600
    },
    {
        "content": "<p>heh ok :)</p>",
        "id": 197183593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220621
    },
    {
        "content": "<p>I doubt that's relevant if we inline it though <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 197183632,
        "sender_full_name": "lcnr",
        "timestamp": 1589220651
    },
    {
        "content": "<p>The same for <code>Fold</code> etc, I don't know if there is an actual perf advantage though.</p>",
        "id": 197183825,
        "sender_full_name": "lcnr",
        "timestamp": 1589220741
    },
    {
        "content": "<p>Yeah, I doubt it</p>",
        "id": 197183843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220752
    },
    {
        "content": "<p>I guess I'd go with the struct, because it aligns with the chalk library</p>",
        "id": 197183874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220771
    },
    {
        "content": "<p>I don't really think it's going to be a big difference at runtime, though it's true we're ultimately passing pointers-to-pointers</p>",
        "id": 197183957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220810
    },
    {
        "content": "<p>(conceivably we could address this by making some of those traits pass by value, in the future;</p>",
        "id": 197183983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220829
    },
    {
        "content": "<p>as rustc has moved more and more towards interning and away from ref counting, that makes sense,</p>",
        "id": 197184040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220844
    },
    {
        "content": "<p>and I think that rust-analyzer is similar, at least if it's using the salsa interning mechanism)</p>",
        "id": 197184056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589220859
    },
    {
        "content": "<p>Ok, the PR is currently blocked on <a href=\"https://github.com/rust-lang/rust/pull/72060\">https://github.com/rust-lang/rust/pull/72060</a>.<br>\n I don't want to add <code>// ignore-tidy-filelength</code>  just to remove it the next day <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<p>Will revert the last change and update most methods to take <code>Predicate</code> by value.</p>",
        "id": 197184292,
        "sender_full_name": "lcnr",
        "timestamp": 1589220991
    },
    {
        "content": "<p>Do you know who might want to review this PR?</p>",
        "id": 197184306,
        "sender_full_name": "lcnr",
        "timestamp": 1589221001
    },
    {
        "content": "<p>either me or <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> -- perhaps them, given that I authored some share of the commits</p>",
        "id": 197184837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589221276
    },
    {
        "content": "<p>Now that <a href=\"https://github.com/rust-lang/rust/pull/72055\">https://github.com/rust-lang/rust/pull/72055</a> is merged, the next step would be</p>\n<blockquote>\n<p>Introduce forall:</p>\n<div class=\"codehilite\"><pre><span></span><code>* Introduce `forall` predicate goals and integrate into the fulfillment context\n\n  * hmm -- this may require finishing up the universe integration work, which is semi-blocked\n\n* Remove the mandatory binder on trait predicates and other predicates and use forall goals\n</code></pre></div>\n\n\n</blockquote>\n<p>What is a good place to learn more about the universe integration work?</p>",
        "id": 198416514,
        "sender_full_name": "lcnr",
        "timestamp": 1590135716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> will drop some notes here later this morning</p>",
        "id": 198429374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590145711
    },
    {
        "content": "<p>though the draft MCP I just described in <a class=\"stream-topic\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits/topic/moving.20the.20leak.20check.20to.20evaluation\">#wg-traits &gt; moving the leak check to evaluation</a> gives some abckground, I think not all that directly relevant here</p>",
        "id": 198429390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590145727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> before we dig too much into that stuff above, let's talk here</p>",
        "id": 198471212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590168996
    },
    {
        "content": "<p>so there are basically two kinds of predicates to add</p>",
        "id": 198471317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169048
    },
    {
        "content": "<p>ForAll and Implies</p>",
        "id": 198471321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169051
    },
    {
        "content": "<p>I'm not sure what's the best order, but the machinery to handle a ForAll already exists</p>",
        "id": 198471344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169065
    },
    {
        "content": "<p>so I guess that's a good place to start</p>",
        "id": 198471376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169080
    },
    {
        "content": "<p>I forget a bit what I wrote in the MCP, but thinking about it now, there's probably .. hmm .. a few steps</p>",
        "id": 198471461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169100
    },
    {
        "content": "<p>we can certainly add a <code>ForAll(Binder&lt;Predicate&lt;'tcx&gt;&gt;)</code> variant and plumb the code for it</p>",
        "id": 198471495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169121
    },
    {
        "content": "<p>the problem will be using it for anything ;)</p>",
        "id": 198471500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169125
    },
    {
        "content": "<p>I guess the next step would be that whenever you have <code>for&lt;'a&gt; T: Trait&lt;'a&gt;</code> or something, we translate that into a <code>ForAll</code> predciate --</p>",
        "id": 198471570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169164
    },
    {
        "content": "<p>right now, the ForAll is kind of banked into every <em>other</em> sort of predicate</p>",
        "id": 198471600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169173
    },
    {
        "content": "<p>eventually I would want to get to something like</p>",
        "id": 198471614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169178
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Predicate</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Constness</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">RegionOutlives</span><span class=\"p\">(</span><span class=\"n\">RegionOutlivesPredicate</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TypeOutlives</span><span class=\"p\">(</span><span class=\"n\">TypeOutlivesPredicate</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ForAll</span><span class=\"p\">(</span><span class=\"n\">Binder</span><span class=\"o\">&lt;</span><span class=\"n\">Predicate</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198471755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169241
    },
    {
        "content": "<p>instead of what we have today</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Predicate</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"n\">PolyTraitPredicate</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Constness</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">RegionOutlives</span><span class=\"p\">(</span><span class=\"n\">PolyRegionOutlivesPredicate</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TypeOutlives</span><span class=\"p\">(</span><span class=\"n\">PolyTypeOutlivesPredicate</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198471824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169272
    },
    {
        "content": "<p>I think I've implemented this like 2 or 3 times and each time it made the code much nicer ;)</p>",
        "id": 198471833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169280
    },
    {
        "content": "<p>because it means that you \"concentrate\" the logic  of how to do a for-all in one place</p>",
        "id": 198471862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169299
    },
    {
        "content": "<p>I'm trying to think the best steps to do it in</p>",
        "id": 198471880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169305
    },
    {
        "content": "<p>probably adding in ForAll, then trying to use it, then trying to remove the Poly from everywhere else</p>",
        "id": 198471900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169317
    },
    {
        "content": "<p>I sort of remember the code that generates e.g. the <code>PolyTraitPredicate</code> is a bit messy, but I guess you can always just change to generate a <code>Predicate::ForAll</code> in a fairly simple way</p>",
        "id": 198472004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169346
    },
    {
        "content": "<p>but it might be easier to remove the <code>Poly</code> and add the<code>ForAll</code> at the same time, since it doesn't change anything about the debruijn indices</p>",
        "id": 198472059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169374
    },
    {
        "content": "<p>Ok, I think I mostly understand what to do here at a high level <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 198472601,
        "sender_full_name": "lcnr",
        "timestamp": 1590169667
    },
    {
        "content": "<p>I think the change to add <code>ForAll</code> would be relatively easy, probably all happens in <a href=\"http://fulfill.rs\">fulfill.rs</a></p>",
        "id": 198472731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590169732
    },
    {
        "content": "<p>nit: I visually prefer  <code>Forall</code> over <code>ForAll</code> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> You probably already use <code>Forall</code> in chalk if I understand this correctly?</p>",
        "id": 198486278,
        "sender_full_name": "lcnr",
        "timestamp": 1590176602
    },
    {
        "content": "<p>I have no idea :)</p>",
        "id": 198486334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590176637
    },
    {
        "content": "<p>whichever is fine for me</p>",
        "id": 198486385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590176651
    },
    {
        "content": "<p>chalk is using <code>ForAll</code>, so let's just use that.</p>",
        "id": 198486532,
        "sender_full_name": "lcnr",
        "timestamp": 1590176731
    },
    {
        "content": "<p>I often have to go from <code>Binder(Predicate)</code> to <code>Predicate(Binder(data))</code> and wasn't able to come up with a good approach.</p>\n<p>While something like the following works, this seems far worse than the current solution without <code>ForAll</code> <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"p\">.</span><span class=\"n\">skip_binder</span><span class=\"p\">().</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateKind</span>::<span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Binder</span>::<span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198551403,
        "sender_full_name": "lcnr",
        "timestamp": 1590266841
    },
    {
        "content": "<p>Hmm</p>",
        "id": 198812596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590522607
    },
    {
        "content": "<p>I don't fully understand :)</p>",
        "id": 198812628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590522623
    },
    {
        "content": "<p>I guess I expect you to go from <code>Binder(Predicate)</code> to <code>Predicate::ForAll(Binder(Predicate))</code></p>",
        "id": 198812655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590522636
    },
    {
        "content": "<p>i.e., just add a layer</p>",
        "id": 198812665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590522642
    },
    {
        "content": "<p>We currently have <code>Predicate(Binder(data))</code>, not <code>Binder(Predicate(data))</code>.</p>",
        "id": 198812715,
        "sender_full_name": "lcnr",
        "timestamp": 1590522671
    },
    {
        "content": "<p>We want to change this to <code>Predicate::ForAll(Binder(Predicate(data)))</code></p>",
        "id": 198812859,
        "sender_full_name": "lcnr",
        "timestamp": 1590522727
    },
    {
        "content": "<p>So to once again correctly bind data, I currently use the above pattern</p>",
        "id": 198812917,
        "sender_full_name": "lcnr",
        "timestamp": 1590522751
    },
    {
        "content": "<p>i.e. the above snippet is inside of <code>PredicateKind::ForAll</code></p>",
        "id": 198812987,
        "sender_full_name": "lcnr",
        "timestamp": 1590522784
    },
    {
        "content": "<p>it seems like you may be making the change too \"late\" somehow</p>",
        "id": 198817397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524902
    },
    {
        "content": "<p>might help to see the branch</p>",
        "id": 198817409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590524909
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...lcnr:forall-predicate#diff-a93d21c5310d929ca75aa69ba2d970bb\">https://github.com/rust-lang/rust/compare/master...lcnr:forall-predicate#diff-a93d21c5310d929ca75aa69ba2d970bb</a></p>\n<p>this is still somewhat of a mess <em>edit: and subst_super_trait` is actually incorrect</em> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 198817886,
        "sender_full_name": "lcnr",
        "timestamp": 1590525174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  this is my current definition of <code>PredicateKind</code>: <a href=\"https://github.com/lcnr/rust/blob/a70ec3a5a1c88a7870a6cd4c8403a6bd6d0a395d/src/librustc_middle/ty/mod.rs#L1051-L1096\">https://github.com/lcnr/rust/blob/a70ec3a5a1c88a7870a6cd4c8403a6bd6d0a395d/src/librustc_middle/ty/mod.rs#L1051-L1096</a></p>",
        "id": 199086171,
        "sender_full_name": "lcnr",
        "timestamp": 1590699702
    },
    {
        "content": "<p>To be more specific, I currently do this: (<a href=\"https://github.com/rust-lang/rust/compare/master...lcnr:forall-predicate#diff-236fd1c050048463d34c039bc71b21acR74-R434\">https://github.com/rust-lang/rust/compare/master...lcnr:forall-predicate#diff-236fd1c050048463d34c039bc71b21acR74-R434</a>) if the binder can be ignored. If the binder were not irrelevant here, I don't quite know how to best solve this?</p>",
        "id": 199599502,
        "sender_full_name": "lcnr",
        "timestamp": 1591177845
    },
    {
        "content": "<p>I could either always bind the relevant elements, without caring about <code>forall</code>, which seems wierd:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// It&#39;s ok to skip binders here, because wf code is prepared for it</span>\n<span class=\"w\">        </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateKind</span>::<span class=\"n\">ForAll</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">binder</span><span class=\"p\">.</span><span class=\"n\">skip_binder</span><span class=\"p\">().</span><span class=\"n\">kind</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateKind</span>::<span class=\"n\">ForAll</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;unexpected predicate: {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateKind</span>::<span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Binder</span>::<span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// ...</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199599675,
        "sender_full_name": "lcnr",
        "timestamp": 1591177966
    },
    {
        "content": "<p>Or differentiate between <code>forall</code> and other predicates:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateKind</span>::<span class=\"n\">ForAll</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">skip_binder</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateKind</span>::<span class=\"n\">ForAll</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;unexpected predicate: {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateKind</span>::<span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Binder</span>::<span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// &lt;------------ my problem</span>\n<span class=\"w\">            </span><span class=\"c1\">// ...</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateKind</span>::<span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199599873,
        "sender_full_name": "lcnr",
        "timestamp": 1591178090
    },
    {
        "content": "<p>In all these cases I have to actively worry about rebinding inside of <code>ForAll</code>, which feels quite dangerous, as I can easily miss this and I can't think of a way to encapsulate this logic to prevent misuse.</p>",
        "id": 199600018,
        "sender_full_name": "lcnr",
        "timestamp": 1591178193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> ok thanks for the details, I meant to get back to you on that, and I remember not being quite sure what I was looking at :)</p>",
        "id": 199600076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591178247
    },
    {
        "content": "<p>I\"m skimming over some of the diffs now</p>",
        "id": 199600085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591178253
    },
    {
        "content": "<p>i.e. how can I go from <code>Binder(Predicate::Trait(TraitRef, ...)</code> to <code>Predicate::Trait(Binder(TraitRef), ...)</code>.</p>",
        "id": 199600090,
        "sender_full_name": "lcnr",
        "timestamp": 1591178255
    },
    {
        "content": "<p>although those links don't really point me at a specific diff</p>",
        "id": 199600236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591178347
    },
    {
        "content": "<p>I still don't quite understand why the question comes up</p>",
        "id": 199600251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591178356
    },
    {
        "content": "<p>Let's see where exactly it is either unclear or I am missing something:</p>",
        "id": 199600371,
        "sender_full_name": "lcnr",
        "timestamp": 1591178413
    },
    {
        "content": "<ol>\n<li>we currently have <code>PredicateKind::Variant(Binder&lt;Data&gt;)</code></li>\n</ol>",
        "id": 199600400,
        "sender_full_name": "lcnr",
        "timestamp": 1591178437
    },
    {
        "content": "<ol start=\"2\">\n<li>we want to go to <code>PredicateKind::ForAll(Binder&lt;Predicate&gt;)</code></li>\n</ol>",
        "id": 199600440,
        "sender_full_name": "lcnr",
        "timestamp": 1591178465
    },
    {
        "content": "<p>2.1. at the same time, other predicates don't need a binder anymore, so I change them to <code>PredicateKind::Variant(Data)</code>, as the <code>Binder</code> is now part of <code>ForAll</code>.</p>",
        "id": 199600497,
        "sender_full_name": "lcnr",
        "timestamp": 1591178500
    },
    {
        "content": "<p>So something like <code>for&lt;'a&gt; T: Trait&lt;'a&gt;</code> is currently represented as <code>PredicateKind::Trait(Binder(TraitPredicate[T: Trait&lt;'??&gt;]))</code></p>",
        "id": 199600617,
        "sender_full_name": "lcnr",
        "timestamp": 1591178598
    },
    {
        "content": "<p>My PR wants to change this to <code>PredicateKind::ForAll(Binder(PredicateKind::Trait(TraitPredicate)))</code></p>",
        "id": 199600768,
        "sender_full_name": "lcnr",
        "timestamp": 1591178698
    },
    {
        "content": "<p>so far seems right (I'm skimming diffs btw)</p>",
        "id": 199600915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591178801
    },
    {
        "content": "<p>When I now want to deal with this Predicate, I have to match on the internal predicate (here <code>PredicateKind::Trait</code>) for which I have to skip<br>\nthe <code>Binder</code> using something like <code>skip_binder</code> or <code>match_bound</code>.</p>",
        "id": 199600981,
        "sender_full_name": "lcnr",
        "timestamp": 1591178853
    },
    {
        "content": "<p>Inside of a <code>ForAll</code>, we should not be able to accidentally use the <code>TraitPredicate</code> directly, as this can easily lead us to forget the <code>Binder</code></p>",
        "id": 199601207,
        "sender_full_name": "lcnr",
        "timestamp": 1591179007
    },
    {
        "content": "<p>So, this part seems .. sort of wrong. I may be out of date, but usually that's indeed now how it should work.</p>",
        "id": 199601239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179029
    },
    {
        "content": "<p>I think this may be an artifact of the code having been built around Predicates having binders so deeply ingrained</p>",
        "id": 199601258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179052
    },
    {
        "content": "<p>Versus being able to separate out \"Forall\" as one orthogonal concern that the rest of the code does't have to look at</p>",
        "id": 199601279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179067
    },
    {
        "content": "<p>I'm starting to see a few diffs that look a bit suspicious</p>",
        "id": 199601289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179077
    },
    {
        "content": "<p>(that said, it <em>may</em> be somewhat hard to separate in some cases)</p>",
        "id": 199601445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179182
    },
    {
        "content": "<p>I wonder if I can find my old branches, too...</p>",
        "id": 199601470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179199
    },
    {
        "content": "<p>as an example, I suppose, this diff from traits/wf.rs</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">-    // (*) ok to skip binders, because wf code is prepared for it</span>\n<span class=\"gd\">-    match predicate.kind() {</span>\n<span class=\"gi\">+    let predicate = match predicate.kind() {</span>\n<span class=\"gi\">+        // It&#39;s ok to skip binders here, because wf code is prepared for it</span>\n<span class=\"gi\">+        ty::PredicateKind::ForAll(binder) =&gt; binder.skip_binder().kind(),</span>\n<span class=\"gi\">+        pred =&gt; pred,</span>\n<span class=\"gi\">+    };</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    match predicate {</span>\n<span class=\"gi\">+        ty::PredicateKind::ForAll(..) =&gt; bug!(&quot;unexpected predicate: {:?}&quot;, predicate),</span>\n</code></pre></div>\n\n\n<p>doesn't seem right. I think what we would want is that <code>ForAll</code> kind of \"maps\" so that you recursively produce predicates from the content and then wrap those predicates in a binder. This is awkward though since we don't have a <code>Predicate::All(..)</code>. i.e., I guess that to have the structure I am imagining, you would want to be returning a single predicate.</p>",
        "id": 199601697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179381
    },
    {
        "content": "<p>what I do remember is that the trait selection code and other bits of code got nicer after this change because we no longer had so many parts of the code responsible for thinking about binders</p>",
        "id": 199601741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179439
    },
    {
        "content": "<p>but I can't find an actual branch yet with this change:)</p>",
        "id": 199601867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179544
    },
    {
        "content": "<p>and maybe I never completed it or something :)</p>",
        "id": 199601899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179588
    },
    {
        "content": "<p>ok, found it, or found some branches, chalkify-universe-wip-predicate-poly -- there are a bunch with similar names and of course I no longer remember their relationship to one another</p>",
        "id": 199602001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179654
    },
    {
        "content": "<p>egads, 3 years ago...</p>",
        "id": 199602060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179706
    },
    {
        "content": "<p>I see I did some refactoring of select/project e.g. in commit d3c074e2aee ... anyway, I have to run now, but I'll try to spend a bit more time digging in this morning.</p>",
        "id": 199602311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179916
    },
    {
        "content": "<p>Probably there are some bits of refactoring we may want to do first</p>",
        "id": 199602325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179933
    },
    {
        "content": "<p>as another example, in that branch I refactored trait selection in commit d3c074e2aee to isolate out the places that had to deal with foralls better</p>",
        "id": 199602381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179967
    },
    {
        "content": "<p>but I'm also wondering whether -- instead of starting with <code>Predicate::ForAll</code>, we want to look at <code>Predicate::Implies</code></p>",
        "id": 199602388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591179984
    },
    {
        "content": "<p>Let's see how much I can improve my own understanding by looking at this branch, I feel like I don't yet fully get the \"big picture\" here.</p>",
        "id": 199602984,
        "sender_full_name": "lcnr",
        "timestamp": 1591180480
    },
    {
        "content": "<p>Will go ahead and start by bubbling poly predicates upwards, which probably makes it easier to handle the change to forall.</p>",
        "id": 199778911,
        "sender_full_name": "lcnr",
        "timestamp": 1591290591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> sorry I didn't have time to spend more time on this :( :(</p>",
        "id": 199814556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591308395
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 199815111,
        "sender_full_name": "lcnr",
        "timestamp": 1591308768
    },
    {
        "content": "<p>I wasn't able to spend too much time on this myself today, but I think a more correct way to handle forall predicates is to deal with the \"forall part\" separately and then use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxt.html#method.replace_bound_vars_with_placeholders\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxt.html#method.replace_bound_vars_with_placeholders</a> on the inner predicate and check that one without having to care about escaping bound vars</p>",
        "id": 199815316,
        "sender_full_name": "lcnr",
        "timestamp": 1591308887
    },
    {
        "content": "<p>Which seems closer to what you did in chalkify-universe-wip-predicate-poly</p>",
        "id": 199815392,
        "sender_full_name": "lcnr",
        "timestamp": 1591308911
    },
    {
        "content": "<p>This solves my problem of having to constantly having to rebind binders and allow us to better separate concerns.</p>",
        "id": 199815546,
        "sender_full_name": "lcnr",
        "timestamp": 1591308992
    },
    {
        "content": "<p>is this close to what you had in mind?</p>",
        "id": 199815576,
        "sender_full_name": "lcnr",
        "timestamp": 1591309005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> maybe :)</p>",
        "id": 199924228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591385869
    },
    {
        "content": "<p>well</p>",
        "id": 199924245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591385879
    },
    {
        "content": "<p>yes</p>",
        "id": 199924246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591385880
    },
    {
        "content": "<p>that sounds exactly like what I was thinking of</p>",
        "id": 199924291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591385887
    },
    {
        "content": "<p>intuitively, we should usually be \"moving downwards\", if that makes sense, and convering bound things into placeholders</p>",
        "id": 199924338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591385913
    },
    {
        "content": "<p>which reminds me, I have to rebase over your PR that breaks up <a href=\"http://select.rs\">select.rs</a> :)</p>",
        "id": 199924354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591385926
    },
    {
        "content": "<p>the most annoying kind of rebase, I wish git or some magic tool would handle it better</p>",
        "id": 199924372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591385937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/refactoring.20rustc.20predicates.2C.20a.20MCP/near/199924354\">said</a>:</p>\n<blockquote>\n<p>which reminds me, I have to rebase over your PR that breaks up <a href=\"http://select.rs\">select.rs</a> :)</p>\n</blockquote>\n<p>Your leak check PR?</p>",
        "id": 199924426,
        "sender_full_name": "lcnr",
        "timestamp": 1591385967
    },
    {
        "content": "<p>Not sure about what you mean with \"moving downwards\" here</p>",
        "id": 199924579,
        "sender_full_name": "lcnr",
        "timestamp": 1591386041
    },
    {
        "content": "<p>Do you mean we should start with converting <code>PredicateKind::Trait(PolyTraitPredicate)</code> to <code>PredicateKind::Trait(TraitPredicate)</code> and then fix all locations until it compiles again?</p>",
        "id": 199924666,
        "sender_full_name": "lcnr",
        "timestamp": 1591386101
    },
    {
        "content": "<p>instead of \"moving upwards\" which in this case would then probably mean changing all locations using <code>PolyTraitPredicate</code> without actually caring about binders first, and propagating these changes upwards until we end up at <code>PredicateKind::Trait</code>?</p>",
        "id": 199924850,
        "sender_full_name": "lcnr",
        "timestamp": 1591386200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> looking into how to correctly use <code>replace_bound_vars_with_placeholders</code>, can you explain to me why this use is sound?<br>\n<a href=\"https://github.com/rust-lang/rust/blob/826cb062a659f7b719a8a0ab1497a78229318aab/src/librustc_trait_selection/traits/select/confirmation.rs#L234\">https://github.com/rust-lang/rust/blob/826cb062a659f7b719a8a0ab1497a78229318aab/src/librustc_trait_selection/traits/select/confirmation.rs#L234</a></p>\n<p>At least to my understanding this seems like a somewhat sketchy way to remove the binder.</p>",
        "id": 199964671,
        "sender_full_name": "lcnr",
        "timestamp": 1591434417
    },
    {
        "content": "<p><code>replace_bound_vars_with_placeholders</code> should be able to change the substs of <code>poly_trait_ref</code> to contain a placeholder</p>",
        "id": 199964748,
        "sender_full_name": "lcnr",
        "timestamp": 1591434531
    },
    {
        "content": "<p>Which is then used in <code>impl_or_trait_obligations</code> and leaked from a snapshot due to <code>commit_unconditionally</code></p>",
        "id": 199964767,
        "sender_full_name": "lcnr",
        "timestamp": 1591434569
    },
    {
        "content": "<p>Which to my understanding must not happen</p>",
        "id": 199964774,
        "sender_full_name": "lcnr",
        "timestamp": 1591434585
    },
    {
        "content": "<p><code>TraitRef</code> has the following docs:</p>\n<blockquote>\n<p>Note that a TraitRef introduces a level of region binding, to account for higher-ranked trait bounds like T: for&lt;'a&gt; Foo&lt;&amp;'a U&gt; or higher-ranked object types.</p>\n</blockquote>\n<p>Is still still true? Afaik only <code>PolyTraitRef</code> actually introduces a binder</p>",
        "id": 199972441,
        "sender_full_name": "lcnr",
        "timestamp": 1591446152
    },
    {
        "content": "<p>It's not still true.</p>",
        "id": 199975865,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591451407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> so that line is an example of what I mean by \"moving downwards\" --</p>",
        "id": 200157780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591651411
    },
    {
        "content": "<p>basically I mean that trying to prove something about <code>for&lt;..&gt; X</code> should </p>\n<ul>\n<li>instantiate the bound variables with placeholders in some fresh universe</li>\n<li>then create new things to prove that are in that context</li>\n</ul>\n<p>but not try to return some result up that can be used</p>",
        "id": 200157891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591651462
    },
    {
        "content": "<p>I think in the case of normalization there is a good example</p>",
        "id": 200157904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591651470
    },
    {
        "content": "<p>if you had <code>for&lt;'a&gt; { &lt;T as Foo&lt;'a&gt;&gt;::Bar = U }</code></p>",
        "id": 200157925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591651485
    },
    {
        "content": "<p>what we <em>don't</em> want to do is try to transform that to something like</p>",
        "id": 200157933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591651491
    },
    {
        "content": "<p><code>for&lt;'a&gt; { XXX = U }</code> where we figure out what <code>XXX</code> is by normalizing</p>",
        "id": 200157949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591651501
    },
    {
        "content": "<p>what we <em>do</em> want to do is to trigger a \"subobligation\" to prove <code>&lt;T as Foo&lt;'!a&gt;&gt;::Bar = U</code>, where <code>!a</code> is a placeholder</p>",
        "id": 200158025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591651537
    },
    {
        "content": "<p>placeholders are basically just universally bound variables</p>",
        "id": 200158085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591651562
    },
    {
        "content": "<p>so e.g. on <a href=\"https://github.com/rust-lang/rust/blob/826cb062a659f7b719a8a0ab1497a78229318aab/src/librustc_trait_selection/traits/select/confirmation.rs#L234\">this line</a> we're saying that \"we need to prove all the subobligations, instantiated with placeholders\"</p>",
        "id": 200158196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591651613
    },
    {
        "content": "<p>I still don't quite get where placeholders are okay and where they are forbidden.</p>\n<p>Reading your above explanation, I am now also less sure in my understanding of the difference between <code>Placeholder</code> and <code>Bound</code></p>",
        "id": 200162505,
        "sender_full_name": "lcnr",
        "timestamp": 1591654527
    },
    {
        "content": "<p>I think this confusion is mostly caused by the afaict outdated comment of <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxt.html#method.replace_bound_vars_with_placeholders\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxt.html#method.replace_bound_vars_with_placeholders</a>. I think you updating the dev-guide and the description of <code>replace_bound_vars_with_placeholders</code> will be really helpful here.</p>",
        "id": 200162801,
        "sender_full_name": "lcnr",
        "timestamp": 1591654744
    },
    {
        "content": "<p>Most relevant for this issue is the relation of <code>Placeholder</code>s inside of <code>Predicate</code>s.</p>",
        "id": 200163128,
        "sender_full_name": "lcnr",
        "timestamp": 1591655005
    },
    {
        "content": "<p>Let's say we have want to elaborate <code>for&lt;'a&gt; &amp;'a T: Bar</code> here</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 200163230,
        "sender_full_name": "lcnr",
        "timestamp": 1591655066
    },
    {
        "content": "<p>Afaict we would go from <code>Forall(Binder(Trait[&amp;'a T: Bar]))</code> to <code>Trait[&amp;'!a T: Bar]</code> where <code>!a</code> is a placeholder</p>",
        "id": 200163326,
        "sender_full_name": "lcnr",
        "timestamp": 1591655158
    },
    {
        "content": "<p>Which we elaborate, resulting in <code>Trait[&amp;'!a T: Foo]</code></p>",
        "id": 200163400,
        "sender_full_name": "lcnr",
        "timestamp": 1591655187
    },
    {
        "content": "<p>Which we then want to turn back into <code>Forall(Binder(Trait[&amp;'a T: Foo]))</code></p>",
        "id": 200163450,
        "sender_full_name": "lcnr",
        "timestamp": 1591655223
    },
    {
        "content": "<p><code>Elaborator::elaborate</code> should be using <code>map_bound</code>, not creating placeholders.</p>",
        "id": 200163651,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591655350
    },
    {
        "content": "<p>Though that also might not be so easy with arbitrary <code>PredicateKind::Forall</code> nesting.</p>",
        "id": 200164305,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591655856
    },
    {
        "content": "<blockquote>\n<p>Elaborator::elaborate should be using map_bound, not creating placeholders.</p>\n</blockquote>\n<p>I think I get why here, which is already progress <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> sleeping may help here, let's see if it's better tomorrow</p>",
        "id": 200164687,
        "sender_full_name": "lcnr",
        "timestamp": 1591656170
    },
    {
        "content": "<p>Something to consider here (if you haven't already) is making sure that you don't get into infinite loops from creating predicates with increasing numbers of unnecessary <code>ForAll</code> wrappers.</p>",
        "id": 200188226,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1591686794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> how are you feeling about this? I'm having a hard time figuring out how to help out :)</p>",
        "id": 200474654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591822283
    },
    {
        "content": "<p>I have an exam next tuesday, so I can't really focus on this atm.</p>",
        "id": 200475439,
        "sender_full_name": "lcnr",
        "timestamp": 1591822634
    },
    {
        "content": "<p>I think it would be really helpful to update the doc comment for <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxt.html#method.replace_bound_vars_with_placeholders\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxt.html#method.replace_bound_vars_with_placeholders</a></p>",
        "id": 200475449,
        "sender_full_name": "lcnr",
        "timestamp": 1591822645
    },
    {
        "content": "<p>As this is probably a large part of what caused my confusion</p>",
        "id": 200475473,
        "sender_full_name": "lcnr",
        "timestamp": 1591822661
    },
    {
        "content": "<p>I also think that hrtb are somewhat complicated so it might just take some time until I fully understand how rustc deals with them</p>",
        "id": 200475603,
        "sender_full_name": "lcnr",
        "timestamp": 1591822716
    },
    {
        "content": "<p>is there a branch I can check out and play with?</p>",
        "id": 200476184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591822974
    },
    {
        "content": "<p>I think I've asked you before but I forget</p>",
        "id": 200476202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591822984
    },
    {
        "content": "<p>well, I pushed the current mess to <a href=\"https://github.com/lcnr/rust/tree/forall-predicate-wow\">https://github.com/lcnr/rust/tree/forall-predicate-wow</a></p>",
        "id": 200477056,
        "sender_full_name": "lcnr",
        "timestamp": 1591823383
    },
    {
        "content": "<p>I don't think looking at this is that useful though</p>",
        "id": 200477145,
        "sender_full_name": "lcnr",
        "timestamp": 1591823410
    },
    {
        "content": "<p>heh ok</p>",
        "id": 200479895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591824831
    },
    {
        "content": "<p>so</p>",
        "id": 200480332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591825057
    },
    {
        "content": "<p>well maybe I'll take a look</p>",
        "id": 200480338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591825062
    },
    {
        "content": "<p>I was thinking that maybe I can try to do some of the changes, which might either convince me this is wrong-headed, or help in handling some of the thorny bits</p>",
        "id": 200480360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591825078
    },
    {
        "content": "<p>Will spend a few hours on this now</p>",
        "id": 200562886,
        "sender_full_name": "lcnr",
        "timestamp": 1591890434
    },
    {
        "content": "<p>I think my initial approach of starting by redefining <code>Predicate</code> is quite suboptimal, as I can't really test individual changes</p>",
        "id": 200563010,
        "sender_full_name": "lcnr",
        "timestamp": 1591890484
    },
    {
        "content": "<p>I am currently thinking about changing <code>Predicate</code> to contain a temporary field with the new <code>PredicateKind</code> definition and slowly change parts of the compiler to use this new field(e.g. by using a <code>fn kint</code> instead of <code>fn kind</code>). Then, once most uses of <code>kind</code> have been replaced we can remove the old enum and rename <code>kint</code> to <code>kind</code>.</p>",
        "id": 200563714,
        "sender_full_name": "lcnr",
        "timestamp": 1591890793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Am I correct in the assumption that <code>ForAll(ForAll(inner))</code> makes no sense?</p>",
        "id": 200573926,
        "sender_full_name": "lcnr",
        "timestamp": 1591895145
    },
    {
        "content": "<p>define \"make sense\"</p>",
        "id": 200585795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899945
    },
    {
        "content": "<p>I mean it has a well-defined meaning</p>",
        "id": 200585800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899948
    },
    {
        "content": "<p>but it's not the most efficient construction I suppose</p>",
        "id": 200585818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591899954
    },
    {
        "content": "<p>Makes sense in the way that I can just panic if it comes up for now <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 200585955,
        "sender_full_name": "lcnr",
        "timestamp": 1591900020
    },
    {
        "content": "<p>heh, ok, I'm not sure why you would though :)</p>",
        "id": 200586183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900110
    },
    {
        "content": "<p>sounds mildly suspicious</p>",
        "id": 200586194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900114
    },
    {
        "content": "<p>but I don't think it would be easy to give rise to that situation right now</p>",
        "id": 200586223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591900128
    },
    {
        "content": "<p>From now on all the good stuff will probably happen on <a href=\"https://github.com/lcnr/rust/tree/forall-predicate-slow-heyho\">https://github.com/lcnr/rust/tree/forall-predicate-slow-heyho</a> instead.</p>\n<p>This should make it easier to make and review incremental changes. Will try to convert either elaborate or select this weekend.</p>",
        "id": 200614172,
        "sender_full_name": "lcnr",
        "timestamp": 1591913740
    },
    {
        "content": "<p>Getting the good error messages <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>note: required because of the requirements on the impl of `std::iter::IntoIterator` for `&amp;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;chalk_ir::Binders&lt;_&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n</code></pre></div>",
        "id": 200761330,
        "sender_full_name": "lcnr",
        "timestamp": 1592046629
    },
    {
        "content": "<p>Ok, can't spend more time on this today, tried to rework <code>process_obligation</code> to use <code>PredicateKint</code> which once again ended up infecting nearly every other part of the trait system. it might be better to add a bunch of <code>Binder::dummy</code> instead, wip commit is <a href=\"https://github.com/lcnr/rust/commit/4c95b9fdce0c9fb289efda5f5c8d983dc860488b\">here</a></p>",
        "id": 200763231,
        "sender_full_name": "lcnr",
        "timestamp": 1592050043
    },
    {
        "content": "<p>nm, I did spend more time on this today. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I experimented a bit in <a href=\"https://github.com/rust-lang/rust/compare/master...lcnr:forall-predicate-what-and-why\">https://github.com/rust-lang/rust/compare/master...lcnr:forall-predicate-what-and-why</a></p>",
        "id": 200765603,
        "sender_full_name": "lcnr",
        "timestamp": 1592053644
    },
    {
        "content": "<p>Most relevant is the last commit: <a href=\"https://github.com/rust-lang/rust/commit/578f95297cbce1885d07fa8824b33a68be828e88\">https://github.com/rust-lang/rust/commit/578f95297cbce1885d07fa8824b33a68be828e88</a></p>",
        "id": 200765612,
        "sender_full_name": "lcnr",
        "timestamp": 1592053662
    },
    {
        "content": "<p>I try to convert to <code>PredicateKint</code> and correctly deal with <code>ForAll</code> in <code>process_obligations</code></p>",
        "id": 200765668,
        "sender_full_name": "lcnr",
        "timestamp": 1592053714
    },
    {
        "content": "<p>And then instantly rebind with <code>Binder::dummy</code> so I don't have to change all of the surrounding code</p>",
        "id": 200765678,
        "sender_full_name": "lcnr",
        "timestamp": 1592053746
    },
    {
        "content": "<p>This causes the following errors + ICE when compiling libcore</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0599]: no method named `count` found for struct `iter::adapters::TakeWhile&lt;iter::adapters::Rev&lt;slice::Iter&lt;&#39;_, u32&gt;&gt;, [closure@src/libcore/num/bignum.rs:173:60: 173:72]&gt;` in the current scope\n    --&gt; src/libcore/num/bignum.rs:173:74\n     |\n100  | / macro_rules! define_bignum {\n101  | |     ($name:ident: type=$ty:ty, n=$n:expr) =&gt; {\n102  | |         /// Stack-allocated arbitrary-precision (up to certain limit) integer.\n103  | |         ///\n...    |\n173  | |                 let zeros = digits.iter().rev().take_while(|&amp;&amp;x| x == 0).count();\n     | |                                                            ------------  ^^^^^ method not found in `iter::adapters::TakeWhile&lt;iter::adapters::Rev&lt;slice::Iter&lt;&#39;_, u32&gt;&gt;, [closure@src/libcore/num/bignum.rs:173:60: 173:72]&gt;`\n     | |                                                            |\n     | |                                                            doesn&#39;t satisfy `&lt;_ as ops::function::FnOnce&lt;(&amp;&amp;u32,)&gt;&gt;::Output = bool`\n     | |                                                            doesn&#39;t satisfy `_: ops::function::FnMut&lt;(&amp;&amp;u32,)&gt;`\n...    |\n477  | |     };\n478  | | }\n     | |_- in this expansion of `define_bignum!`\n...\n483  |   define_bignum!(Big32x40: type=Digit32, n=40);\n     |   --------------------------------------------- in this macro invocation\n     |\n    ::: src/libcore/iter/adapters/mod.rs:1798:1\n     |\n1798 |   pub struct TakeWhile&lt;I, P&gt; {\n     |   --------------------------\n     |   |\n     |   method `count` not found for this\n     |   doesn&#39;t satisfy `_: iter::traits::iterator::Iterator`\n     |\n     = note: the method `count` exists but the following trait bounds were not satisfied:\n             `&lt;[closure@src/libcore/num/bignum.rs:173:60: 173:72] as ops::function::FnOnce&lt;(&amp;&amp;u32,)&gt;&gt;::Output = bool`\n             which is required by `iter::adapters::TakeWhile&lt;iter::adapters::Rev&lt;slice::Iter&lt;&#39;_, u32&gt;&gt;, [closure@src/libcore/num/bignum.rs:173:60: 173:72]&gt;: iter::traits::iterator::Iterator`\n             `[closure@src/libcore/num/bignum.rs:173:60: 173:72]: ops::function::FnMut&lt;(&amp;&amp;u32,)&gt;`\n             which is required by `iter::adapters::TakeWhile&lt;iter::adapters::Rev&lt;slice::Iter&lt;&#39;_, u32&gt;&gt;, [closure@src/libcore/num/bignum.rs:173:60: 173:72]&gt;: iter::traits::iterator::Iterator`\n             `iter::adapters::TakeWhile&lt;iter::adapters::Rev&lt;slice::Iter&lt;&#39;_, u32&gt;&gt;, [closure@src/libcore/num/bignum.rs:173:60: 173:72]&gt;: iter::traits::iterator::Iterator`\n             which is required by `&amp;mut iter::adapters::TakeWhile&lt;iter::adapters::Rev&lt;slice::Iter&lt;&#39;_, u32&gt;&gt;, [closure@src/libcore/num/bignum.rs:173:60: 173:72]&gt;: iter::traits::iterator::Iterator`\n\nerror[E0599]: no method named `count` found for struct `iter::adapters::TakeWhile&lt;iter::adapters::Rev&lt;slice::Iter&lt;&#39;_, u8&gt;&gt;, [closure@src/libcore/num/bignum.rs:173:60: 173:72]&gt;` in the current scope\n    --&gt; src/libcore/num/bignum.rs:173:74\n     |\n100  | / macro_rules! define_bignum {\n101  | |     ($name:ident: type=$ty:ty, n=$n:expr) =&gt; {\n102  | |         /// Stack-allocated arbitrary-precision (up to certain limit) integer.\n103  | |         ///\n...    |\n173  | |                 let zeros = digits.iter().rev().take_while(|&amp;&amp;x| x == 0).count();\n     | |                                                            ------------  ^^^^^ method not found in `iter::adapters::TakeWhile&lt;iter::adapters::Rev&lt;slice::Iter&lt;&#39;_, u8&gt;&gt;, [closure@src/libcore/num/bignum.rs:173:60: 173:72]&gt;`\n     | |                                                            |\n     | |                                                            doesn&#39;t satisfy `&lt;_ as ops::function::FnOnce&lt;(&amp;&amp;u8,)&gt;&gt;::Output = bool`\n     | |                                                            doesn&#39;t satisfy `_: ops::function::FnMut&lt;(&amp;&amp;u8,)&gt;`\n...    |\n477  | |     };\n478  | | }\n     | |_- in this expansion of `define_bignum!`\n...\n488  |       define_bignum!(Big8x3: type=u8, n=3);\n     |       ------------------------------------- in this macro invocation\n     |\n    ::: src/libcore/iter/adapters/mod.rs:1798:1\n     |\n1798 |   pub struct TakeWhile&lt;I, P&gt; {\n     |   --------------------------\n     |   |\n     |   method `count` not found for this\n     |   doesn&#39;t satisfy `_: iter::traits::iterator::Iterator`\n     |\n     = note: the method `count` exists but the following trait bounds were not satisfied:\n             `&lt;[closure@src/libcore/num/bignum.rs:173:60: 173:72] as ops::function::FnOnce&lt;(&amp;&amp;u8,)&gt;&gt;::Output = bool`\n             which is required by `iter::adapters::TakeWhile&lt;iter::adapters::Rev&lt;slice::Iter&lt;&#39;_, u8&gt;&gt;, [closure@src/libcore/num/bignum.rs:173:60: 173:72]&gt;: iter::traits::iterator::Iterator`\n             `[closure@src/libcore/num/bignum.rs:173:60: 173:72]: ops::function::FnMut&lt;(&amp;&amp;u8,)&gt;`\n             which is required by `iter::adapters::TakeWhile&lt;iter::adapters::Rev&lt;slice::Iter&lt;&#39;_, u8&gt;&gt;, [closure@src/libcore/num/bignum.rs:173:60: 173:72]&gt;: iter::traits::iterator::Iterator`\n             `iter::adapters::TakeWhile&lt;iter::adapters::Rev&lt;slice::Iter&lt;&#39;_, u8&gt;&gt;, [closure@src/libcore/num/bignum.rs:173:60: 173:72]&gt;: iter::traits::iterator::Iterator`\n             which is required by `&amp;mut iter::adapters::TakeWhile&lt;iter::adapters::Rev&lt;slice::Iter&lt;&#39;_, u8&gt;&gt;, [closure@src/libcore/num/bignum.rs:173:60: 173:72]&gt;: iter::traits::iterator::Iterator`\n\nerror: internal compiler error: src/librustc_middle/ich/impls_ty.rs:94: StableHasher: unexpected region RePlaceholder(Placeholder { universe: U3, name: BrAnon(0) })\n</code></pre></div>",
        "id": 200765744,
        "sender_full_name": "lcnr",
        "timestamp": 1592053821
    },
    {
        "content": "<p>OK, so I've investigated what's going on here.</p>",
        "id": 200787528,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592085511
    },
    {
        "content": "<p>Minimised (no core) repro:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(no_core, lang_items, optin_builtin_traits)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(unboxed_closures)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(unused)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![no_core]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">&quot;sized&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">&quot;copy&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Copy</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">&quot;freeze&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Freeze</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">&quot;drop_in_place&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">drop_in_place</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">&quot;dispatch_from_dyn&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">DispatchFromDyn</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Empty.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">&quot;deref&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Target</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span>::<span class=\"n\">Target</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">P</span>: <span class=\"nc\">Deref</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Deref</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">P</span>::<span class=\"n\">Target</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">deref</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">P</span>::<span class=\"n\">Target</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">&quot;receiver&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Receiver</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Empty.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Receiver</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Receiver</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">P</span>: <span class=\"nc\">Receiver</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Receiver</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">&quot;fn_once&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">Args</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The returned type after the call operator is used.</span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Performs the call operation.</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;rust-call&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">call_once</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nc\">Args</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">&quot;fn_mut&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"o\">&lt;</span><span class=\"n\">Args</span><span class=\"o\">&gt;</span>: <span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">Args</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Performs the call operation.</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;rust-call&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">call_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nc\">Args</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">&quot;fn&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"n\">Args</span><span class=\"o\">&gt;</span>: <span class=\"nb\">FnMut</span><span class=\"o\">&lt;</span><span class=\"n\">Args</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Performs the call operation.</span>\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;rust-call&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nc\">Args</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">&quot;generator_state&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">GeneratorState</span><span class=\"o\">&lt;</span><span class=\"n\">Y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Yielded</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Complete</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">&quot;pin&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pointer</span>: <span class=\"nc\">P</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">&quot;generator&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Generator</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Yield</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Return</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">resume</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span>: <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">GeneratorState</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Yield</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">Return</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">g</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 200787543,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592085545
    },
    {
        "content": "<p>The issue is that we deduce closure's signatures from the obligations on them.</p>",
        "id": 200787567,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592085601
    },
    {
        "content": "<p>Currently we have <code>for&lt;'1&gt; [closure]: FnMut(&amp;'1 i32)</code>, but with your changes it's <code>[closure]: FnMut(&amp;'!1 i32)</code></p>",
        "id": 200787632,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592085674
    },
    {
        "content": "<p>This causes us to deduce that the closure signature should be <code>fn(&amp;'? i32)</code> instead of <code>for&lt;'r&gt; fn('r i32)</code>, giving the error.</p>",
        "id": 200787684,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592085728
    },
    {
        "content": "<p>/me thinks about how to fix this</p>",
        "id": 200787694,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592085752
    },
    {
        "content": "<p>Beautiful:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">obligation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">obligation</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">alt_obligation</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">kint</span><span class=\"p\">(</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateKint</span>::<span class=\"n\">ForAll</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">replace_bound_vars_with_placeholders</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">alt_obligation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">.</span><span class=\"n\">to_predicate</span><span class=\"p\">(</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">obligation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">alt_obligation</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">continue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"c1\">// ...</span>\n</code></pre></div>",
        "id": 200789194,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592088508
    },
    {
        "content": "<p>And all the ui tests fail because this ends up being a partial impl of <a href=\"https://github.com/rust-lang/rust/issues/72493\">#72493</a></p>",
        "id": 200789396,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592088939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> <a href=\"#narrow/stream/144729-wg-traits/topic/refactoring.20rustc.20predicates.2C.20a.20MCP/near/200789194\">said</a>:</p>\n<blockquote>\n<p>Beautiful:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Is this at the start of <code>process_obligation</code>?</p>",
        "id": 200804662,
        "sender_full_name": "lcnr",
        "timestamp": 1592119999
    },
    {
        "content": "<p>It's in the middle.</p>",
        "id": 200809255,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592128656
    },
    {
        "content": "<p>where the match currently is</p>",
        "id": 200809259,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592128667
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> that's what I meant :) I don't quite get how this fixes it though. This seems to me like you mainly unwrap multiple <code>ForAll</code>s here</p>",
        "id": 200810819,
        "sender_full_name": "lcnr",
        "timestamp": 1592131353
    },
    {
        "content": "<p>Can you push your changes to github?</p>",
        "id": 200810822,
        "sender_full_name": "lcnr",
        "timestamp": 1592131379
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...matthewjasper:forall-predicate-what-and-why-2?expand=1\">https://github.com/rust-lang/rust/compare/master...matthewjasper:forall-predicate-what-and-why-2?expand=1</a> . It's rebased over  <a href=\"https://github.com/rust-lang/rust/issues/73180\">#73180</a> .</p>",
        "id": 200814355,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592137434
    },
    {
        "content": "<p>Thanks <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> Aaaah, you don't actually replace the bound vars when processing <code>ForAll(Trait | Projection)</code>.</p>",
        "id": 200814659,
        "sender_full_name": "lcnr",
        "timestamp": 1592137911
    },
    {
        "content": "<p>It's changed since I wrote that.</p>",
        "id": 200814704,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592137955
    },
    {
        "content": "<p>I thought <a href=\"https://github.com/rust-lang/rust/compare/master...matthewjasper:forall-predicate-what-and-why-2?expand=1\">https://github.com/rust-lang/rust/compare/master...matthewjasper:forall-predicate-what-and-why-2?expand=1</a> was the relevant branch <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 200815062,
        "sender_full_name": "lcnr",
        "timestamp": 1592138603
    },
    {
        "content": "<p>Sorry, since I meant wrote the comment yesterday</p>",
        "id": 200815658,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592139651
    },
    {
        "content": "<p>wait,  \"I wrote it\" refers to the comment above, not the branch you sent me?</p>",
        "id": 200815887,
        "sender_full_name": "lcnr",
        "timestamp": 1592140050
    },
    {
        "content": "<p>So your solution has changed since the above comment, and the branch you sent me is up to date</p>",
        "id": 200815893,
        "sender_full_name": "lcnr",
        "timestamp": 1592140071
    },
    {
        "content": "<p>yes. I'm saying that the comment above showing the code is outdated. The branch is not.</p>",
        "id": 200815942,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592140101
    },
    {
        "content": "<p>I am now using <a href=\"https://github.com/lcnr/rust/tree/forall-predicate-what-and-why-2\">https://github.com/lcnr/rust/tree/forall-predicate-what-and-why-2</a> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n<p>Only implemented anonymize_predice today</p>",
        "id": 201080807,
        "sender_full_name": "lcnr",
        "timestamp": 1592345753
    },
    {
        "content": "<p>so the current wf code is somewhat unfortunate, as it is not made to deal with hrtb by simply skipping any potential wf obligations with escaping bound vars.</p>",
        "id": 201195715,
        "sender_full_name": "lcnr",
        "timestamp": 1592425496
    },
    {
        "content": "<p>afaict this is needed because <code>TypeWalker</code> simply skips the binder when walking <code>FnPtr</code> and <code>GeneratorWitness</code></p>",
        "id": 201195814,
        "sender_full_name": "lcnr",
        "timestamp": 1592425551
    },
    {
        "content": "<p>I think it's easiest to just do the same with <code>Predicate::ForAll</code>, even if it makes me somewhat unhappy</p>",
        "id": 201195975,
        "sender_full_name": "lcnr",
        "timestamp": 1592425632
    },
    {
        "content": "<p>I believe that the WF code</p>",
        "id": 201196019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592425667
    },
    {
        "content": "<p>basically skips obligations that involve bound regions</p>",
        "id": 201196032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592425673
    },
    {
        "content": "<p>so .. yeah .. skipping the binder is kind of right</p>",
        "id": 201196047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592425681
    },
    {
        "content": "<p>at least in so far as how that code is designed</p>",
        "id": 201196092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592425689
    },
    {
        "content": "<p>down to 373 mentions of <code>PredicateKind</code> <span aria-label=\"party ball\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"party ball\">:party_ball:</span></p>",
        "id": 201208389,
        "sender_full_name": "lcnr",
        "timestamp": 1592432642
    },
    {
        "content": "<p>My last commit updates <code>elaborate</code>. I think this is kind of dangerous as we have to remember to rebind here.</p>\n<p>Is there a better way to implement this? <a href=\"https://github.com/rust-lang/rust/commit/47f37ecff911c4a0931fd423a5389ecd39ddd1bc\">https://github.com/rust-lang/rust/commit/47f37ecff911c4a0931fd423a5389ecd39ddd1bc</a></p>",
        "id": 201287427,
        "sender_full_name": "lcnr",
        "timestamp": 1592495523
    },
    {
        "content": "<p>it might be better to have <code>fn Predicate::kind</code> return <code>PredicateKind</code> instead of <code>Predicate</code> IMO</p>",
        "id": 201318036,
        "sender_full_name": "lcnr",
        "timestamp": 1592510142
    },
    {
        "content": "<p><code>PredicateKind</code> is dead, long live <code>PredicateKind</code>.</p>",
        "id": 201331068,
        "sender_full_name": "lcnr",
        "timestamp": 1592517784
    },
    {
        "content": "<p>So it now compiles after completely replacing <code>PredicateKind</code> with the new definition</p>",
        "id": 201331204,
        "sender_full_name": "lcnr",
        "timestamp": 1592517871
    },
    {
        "content": "<p>Still has 18 TODO's where the new impl is fairly dangerous/unclear</p>",
        "id": 201331228,
        "sender_full_name": "lcnr",
        "timestamp": 1592517895
    },
    {
        "content": "<p>and breaks while compiling libcore with</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0207]: the type parameter `B` is not constrained by the impl trait, self type, or predicates\n    --&gt; src/libcore/iter/adapters/mod.rs:2379:6\n     |\n2379 | impl&lt;B, I, St, F&gt; Iterator for Scan&lt;I, St, F&gt;\n     |      ^ unconstrained type parameter\n\nerror: aborting due to previous error\n</code></pre></div>",
        "id": 201331271,
        "sender_full_name": "lcnr",
        "timestamp": 1592517926
    },
    {
        "content": "<p>Which is kind of surprising, I think I probablly missed a match on <code>kind</code> which only checks the variant and now doesn't work because its <code>ForAll(Pred)</code> instead of <code>Pred</code>.</p>",
        "id": 201331429,
        "sender_full_name": "lcnr",
        "timestamp": 1592518023
    },
    {
        "content": "<p>Will hopefully get to look further into it tomorrow</p>",
        "id": 201331450,
        "sender_full_name": "lcnr",
        "timestamp": 1592518042
    },
    {
        "content": "<p>I also would like some feedback on the remaining <code>TODO</code>s, these are mostly sections which are now fairly ugly/unsafe in how they are dealing with binders.</p>",
        "id": 201332001,
        "sender_full_name": "lcnr",
        "timestamp": 1592518405
    },
    {
        "content": "<p>Do we want force <code>PredicateKind::ForAll</code> to always bind something, that seems like it may improve some sections?</p>",
        "id": 201332145,
        "sender_full_name": "lcnr",
        "timestamp": 1592518525
    },
    {
        "content": "<p>Added some comments, and yes. Predicate should have a method that wraps itself in a for all only if it has escaping bound regions, possibly asserting that the result doesn't have escaping bound regions.</p>",
        "id": 201333382,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592519378
    },
    {
        "content": "<p>Some <code>ForAll</code> end up with escaping bound regions:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// run-pass</span>\n<span class=\"cp\">#![allow(dead_code)]</span><span class=\"w\"></span>\n<span class=\"c1\">// Issue #2263.</span>\n\n<span class=\"c1\">// Here, `f` is a function that takes a pointer `x` and a function</span>\n<span class=\"c1\">// `g`, where `g` requires its argument `y` to be in the same region</span>\n<span class=\"c1\">// that `x` is in.</span>\n<span class=\"c1\">// pretty-expanded FIXME #23616</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">has_same_region</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// `f` should be the type that `wants_same_region` wants, but</span>\n<span class=\"w\">    </span><span class=\"c1\">// right now the compiler complains that it isn&#39;t.</span>\n<span class=\"w\">    </span><span class=\"n\">wants_same_region</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">wants_same_region</span><span class=\"p\">(</span><span class=\"n\">_f</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>HAs the following predicate: <code>ForAll(Binder(TraitPredicate(&lt;FreshTy(0) as std::ops::FnOnce&lt;(&amp;'a isize,)&gt;&gt;)))</code></p>",
        "id": 201368270,
        "sender_full_name": "lcnr",
        "timestamp": 1592558478
    },
    {
        "content": "<p>Printing opaque types contains predicates with unbound regions <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 201375096,
        "sender_full_name": "lcnr",
        "timestamp": 1592563824
    },
    {
        "content": "<p>Hmm, all remaining tests fail in chalk</p>",
        "id": 201379219,
        "sender_full_name": "lcnr",
        "timestamp": 1592567170
    },
    {
        "content": "<p>One error is</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;Skipped bound var index.&#39;, src/librustc_traits/chalk/lowering.rs:520:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n</code></pre></div>",
        "id": 201379363,
        "sender_full_name": "lcnr",
        "timestamp": 1592567305
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/pull/73503\">https://github.com/rust-lang/rust/pull/73503</a> for now, still have to fix chalk though</p>",
        "id": 201380903,
        "sender_full_name": "lcnr",
        "timestamp": 1592568475
    },
    {
        "content": "<p>More detailed: <code>error: internal compiler error: src/librustc_traits/chalk/lowering.rs:520: Skipped bound var index: ty=Binder(TraitPredicate(&lt;U as std::marker::Sized&gt;)), parameters={1: Ty(())}</code></p>",
        "id": 201382187,
        "sender_full_name": "lcnr",
        "timestamp": 1592569488
    },
    {
        "content": "<p>Is <code>U</code> a bound var? What does using <code>-Zverbose</code> show?</p>",
        "id": 201382686,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592569863
    },
    {
        "content": "<p>exactly the same <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 201382826,
        "sender_full_name": "lcnr",
        "timestamp": 1592569968
    },
    {
        "content": "<p>Ugh, -Zverbose doesn't affect bound types. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 201382988,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592570091
    },
    {
        "content": "<p>Updating the chalk lowering there <em>should</em> be fairly straightforward</p>",
        "id": 201387842,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592572600
    },
    {
        "content": "<p>I thought so too <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 201387964,
        "sender_full_name": "lcnr",
        "timestamp": 1592572658
    },
    {
        "content": "<p>These should be the only relevant changes <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <a href=\"https://github.com/rust-lang/rust/pull/73503/files#diff-c04a0fadb0b4314f668eb30e70a2f659\">https://github.com/rust-lang/rust/pull/73503/files#diff-c04a0fadb0b4314f668eb30e70a2f659</a></p>",
        "id": 201388056,
        "sender_full_name": "lcnr",
        "timestamp": 1592572687
    },
    {
        "content": "<p>It may also be that something else is still wrong which isn't checked elsewhere</p>",
        "id": 201388258,
        "sender_full_name": "lcnr",
        "timestamp": 1592572803
    },
    {
        "content": "<p>I've commented with what I think the issue is</p>",
        "id": 201388555,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592572941
    },
    {
        "content": "<p>will try</p>",
        "id": 201390773,
        "sender_full_name": "lcnr",
        "timestamp": 1592573984
    },
    {
        "content": "<p>hm, we have still 8 failing chalk tests :/</p>",
        "id": 201399701,
        "sender_full_name": "lcnr",
        "timestamp": 1592578059
    },
    {
        "content": "<p>yeah, elaboration is ungreat in general</p>",
        "id": 201404592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592580168
    },
    {
        "content": "<p>it's sort of a violation of the approach I think we should be taking</p>",
        "id": 201404608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592580175
    },
    {
        "content": "<p>(but I think it can be handled)</p>",
        "id": 201404616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592580180
    },
    {
        "content": "<p>it's not how chalk handles things though</p>",
        "id": 201404624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592580183
    },
    {
        "content": "<p>The backtraceseems to be kind of broken:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;assertion failed: `(left == right)`\n  left: `^1`,\n right: `^0`&#39;, /home/programming/rust3/src/libstd/macros.rs:16:9\nstack backtrace:\n   0: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt\n   1: core::fmt::write\n   2: std::io::Write::write_fmt\n   3: std::sys_common::backtrace::print\n   4: std::panicking::default_hook::{{closure}}\n   5: std::panicking::default_hook\n   6: &lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::Fn&lt;A&gt;&gt;::call\n             at ./src/liballoc/boxed.rs:1090\n   7: rustc_driver::report_ice\n             at src/librustc_driver/lib.rs:1159\n   8: std::panicking::rust_panic_with_hook\n   9: rust_begin_unwind\n  10: std::panicking::begin_panic_fmt\n  11: &lt;&amp;chalk_ir::SubstFolder&lt;I&gt; as chalk_ir::fold::Folder&lt;I&gt;&gt;::fold_free_var_ty\n             at ./src/libstd/macros.rs:16\n  12: &lt;chalk_ir::Ty&lt;I&gt; as chalk_ir::fold::SuperFold&lt;I,TI&gt;&gt;::super_fold_with\n             at /home/programming/.cargo/registry/src/github.com-1ecc6299db9ec823/chalk-ir-0.10.0/src/fold.rs:342\n  13: &lt;chalk_ir::Ty&lt;I&gt; as chalk_ir::fold::Fold&lt;I,TI&gt;&gt;::fold_with\n             at /home/programming/.cargo/registry/src/github.com-1ecc6299db9ec823/chalk-ir-0.10.0/src/fold.rs:315\n  14: chalk_ir::_DERIVE_chalk_ir_fold_Fold_I_TI_FOR_WellFormed::&lt;impl chalk_ir::fold::Fold&lt;I,_TI&gt; for chalk_ir::WellFormed&lt;I&gt;&gt;::fold_with\n             at /home/programming/.cargo/registry/src/github.com-1ecc6299db9ec823/chalk-ir-0.10.0/src/lib.rs:957\n  15: chalk_ir::_DERIVE_chalk_ir_fold_Fold_I_TI_FOR_DomainGoal::&lt;impl chalk_ir::fold::Fold&lt;I,_TI&gt; for chalk_ir::DomainGoal&lt;I&gt;&gt;::fold_with\n             at /home/programming/.cargo/registry/src/github.com-1ecc6299db9ec823/chalk-ir-0.10.0/src/lib.rs:1019\n  16: chalk_ir::_DERIVE_chalk_ir_fold_Fold_I_TI_FOR_GoalData::&lt;impl chalk_ir::fold::Fold&lt;I,_TI&gt; for chalk_ir::GoalData&lt;I&gt;&gt;::fold_with\n             at /home/programming/.cargo/registry/src/github.com-1ecc6299db9ec823/chalk-ir-0.10.0/src/lib.rs:1863\n  17: &lt;chalk_ir::Goal&lt;I&gt; as chalk_ir::fold::SuperFold&lt;I,TI&gt;&gt;::super_fold_with\n             at /home/programming/.cargo/registry/src/github.com-1ecc6299db9ec823/chalk-ir-0.10.0/src/fold.rs:455\n  18: &lt;chalk_ir::Goal&lt;I&gt; as chalk_ir::fold::Fold&lt;I,TI&gt;&gt;::fold_with\n             at /home/programming/.cargo/registry/src/github.com-1ecc6299db9ec823/chalk-ir-0.10.0/src/fold.rs:436\n  19: chalk_ir::_DERIVE_chalk_ir_fold_Fold_I_TI_FOR_InEnvironment::&lt;impl chalk_ir::fold::Fold&lt;_I,_TI&gt; for chalk_ir::InEnvironment&lt;G&gt;&gt;::fold_with\n             at /home/programming/.cargo/registry/src/github.com-1ecc6299db9ec823/chalk-ir-0.10.0/src/lib.rs:79\n  20: chalk_ir::Substitution&lt;I&gt;::apply\n             at /home/programming/.cargo/registry/src/github.com-1ecc6299db9ec823/chalk-ir-0.10.0/src/lib.rs:2013\n  21: chalk_solve::infer::InferenceTable&lt;I&gt;::from_canonical\n</code></pre></div>",
        "id": 201404668,
        "sender_full_name": "lcnr",
        "timestamp": 1592580216
    },
    {
        "content": "<p>It seems like rustc itself doesn't really care about bound vars, as both the previous approach and the suggestion by <span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> seem to work</p>",
        "id": 201404815,
        "sender_full_name": "lcnr",
        "timestamp": 1592580285
    },
    {
        "content": "<p>Ok, so the panic location is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fold_free_var_ty</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">bound_var</span>: <span class=\"nc\">BoundVar</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">outer_binder</span>: <span class=\"nc\">DebruijnIndex</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fallible</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">bound_var</span><span class=\"p\">.</span><span class=\"n\">debruijn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DebruijnIndex</span>::<span class=\"n\">INNERMOST</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"n\">bound_var</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">assert_ty_ref</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">interner</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">shifted_in_from</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">interner</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">outer_binder</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201407274,
        "sender_full_name": "lcnr",
        "timestamp": 1592581507
    },
    {
        "content": "<p>in chalk itself, so afaict chalk expects <code>Predicate</code>s to not have unbound variables</p>",
        "id": 201407435,
        "sender_full_name": "lcnr",
        "timestamp": 1592581574
    },
    {
        "content": "<p>And I missed a binder somewhere</p>",
        "id": 201407494,
        "sender_full_name": "lcnr",
        "timestamp": 1592581608
    },
    {
        "content": "<p>Well, probably. I'll try to go through the PR soon.</p>",
        "id": 201409183,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592582350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> oh interesting</p>",
        "id": 201410393,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592582884
    },
    {
        "content": "<p>I'm having that problem locally</p>",
        "id": 201410409,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592582893
    },
    {
        "content": "<p>(When I updated with the <code>ProgramClauseData</code> update)</p>",
        "id": 201410478,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592582927
    },
    {
        "content": "<p>I feel like I probably missing something somewhere</p>",
        "id": 201410527,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592582953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> the strange backtraces or the ICE?</p>",
        "id": 201411152,
        "sender_full_name": "lcnr",
        "timestamp": 1592583251
    },
    {
        "content": "<p>The assertion panic</p>",
        "id": 201412630,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592584036
    },
    {
        "content": "<p>Actually, I might have fixed it. Let me check</p>",
        "id": 201412873,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592584163
    },
    {
        "content": "<p>yeah nevermind, I did fix it</p>",
        "id": 201413608,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592584611
    },
    {
        "content": "<p>can you push your changes to the chalk lowering? I'll take a look</p>",
        "id": 201413913,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592584798
    },
    {
        "content": "<p>Actually, I found something suspect</p>",
        "id": 201414165,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592584942
    },
    {
        "content": "<p>These are the changes to lowering, which should not actually change anything for chalk <a href=\"https://github.com/rust-lang/rust/pull/73503/files#diff-c04a0fadb0b4314f668eb30e70a2f659\">https://github.com/rust-lang/rust/pull/73503/files#diff-c04a0fadb0b4314f668eb30e70a2f659</a></p>\n<p>obv not how <code>ForAll</code> should actually be handled</p>",
        "id": 201414167,
        "sender_full_name": "lcnr",
        "timestamp": 1592584943
    },
    {
        "content": "<p>made some comments</p>",
        "id": 201414371,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592585064
    },
    {
        "content": "<p>basically, you're wrapping the predicates in a <code>bind</code>, but don't shift the vars. Then the code below wraps them in a <code>ForAll</code>, so the bound vars are wrong</p>",
        "id": 201414463,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592585144
    },
    {
        "content": "<p>I don't think that's the problem, as I only rebind the binders skipped at the beginning of the match</p>",
        "id": 201414600,
        "sender_full_name": "lcnr",
        "timestamp": 1592585216
    },
    {
        "content": "<p>I match on <code>pred.ignore_qualifiers(tcx).skip_binder().kind()</code></p>",
        "id": 201414624,
        "sender_full_name": "lcnr",
        "timestamp": 1592585237
    },
    {
        "content": "<p>And <code>ignore_qualifiers</code> should correctly shift the bound vars</p>",
        "id": 201414646,
        "sender_full_name": "lcnr",
        "timestamp": 1592585253
    },
    {
        "content": "<p>So this should be equal to <code>Binder::bind(value.skip_binder())</code> which should just be <code>identity</code></p>",
        "id": 201414740,
        "sender_full_name": "lcnr",
        "timestamp": 1592585287
    },
    {
        "content": "<p>ah, hmm</p>",
        "id": 201414801,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592585325
    },
    {
        "content": "<p>But I realized I am doing the same thing somewhere else where it shouldn't be correct</p>",
        "id": 201414839,
        "sender_full_name": "lcnr",
        "timestamp": 1592585346
    },
    {
        "content": "<p>thanks <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 201414853,
        "sender_full_name": "lcnr",
        "timestamp": 1592585354
    },
    {
        "content": "<p>Why not just call <code>collect_bound_vars</code> at the top of the function? Rather than <code>skip_binders</code>?</p>",
        "id": 201414934,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592585401
    },
    {
        "content": "<p>or I think I do...</p>",
        "id": 201414936,
        "sender_full_name": "lcnr",
        "timestamp": 1592585401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/refactoring.20rustc.20predicates.2C.20a.20MCP/near/201414934\">said</a>:</p>\n<blockquote>\n<p>Why not just call <code>collect_bound_vars</code> at the top of the function? Rather than <code>skip_binders</code>?</p>\n</blockquote>\n<p>Yeah, that's honestly the easier/cleaner/correct way</p>",
        "id": 201415176,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592585516
    },
    {
        "content": "<p>and more or less how I <em>expected</em> this code to be written</p>",
        "id": 201415250,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592585536
    },
    {
        "content": "<p>(I'm not saying it <em>is</em> the problem)</p>",
        "id": 201415284,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592585552
    },
    {
        "content": "<p>Oh, I guess you use that pattern everywhere</p>",
        "id": 201415487,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592585672
    },
    {
        "content": "<p>I had about 300 errors to comb through, so I did a lot of semi automatic binder movement <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nI think that pattern is absolutely horrible, as we are forced to manually rebind the given variant.</p>",
        "id": 201415877,
        "sender_full_name": "lcnr",
        "timestamp": 1592585888
    },
    {
        "content": "<p>I don't really know how to fix this, except by adding a <code>PolyPredicateKind</code> enum which is similar to the old one and building it on the fly when calling <code>ignore_qualifiers</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 201415965,
        "sender_full_name": "lcnr",
        "timestamp": 1592585944
    },
    {
        "content": "<p>found another potentially suspect place</p>",
        "id": 201416912,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592586432
    },
    {
        "content": "<p>though it's not in chalk lowering</p>",
        "id": 201416926,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592586443
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/73503/files#diff-be27d6a6af7ff4ca2d8882a7d8d44d21R152\">https://github.com/rust-lang/rust/pull/73503/files#diff-be27d6a6af7ff4ca2d8882a7d8d44d21R152</a></p>",
        "id": 201416953,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592586460
    },
    {
        "content": "<p>For predicate, you <code>skip_binder</code> in one case (<code>ForAll</code>), but not in the other</p>",
        "id": 201417035,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592586493
    },
    {
        "content": "<p>jup</p>",
        "id": 201417044,
        "sender_full_name": "lcnr",
        "timestamp": 1592586496
    },
    {
        "content": "<p>but below you unconditionally bind</p>",
        "id": 201417054,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592586504
    },
    {
        "content": "<p>thanks <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> let's see if this fixes it</p>",
        "id": 201417274,
        "sender_full_name": "lcnr",
        "timestamp": 1592586645
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/73503/files#diff-d50f263d8091a7b5a01fb336a499c4b9R1071\">https://github.com/rust-lang/rust/pull/73503/files#diff-d50f263d8091a7b5a01fb336a499c4b9R1071</a> <code>cond</code> is missing a <code>bind</code>?</p>",
        "id": 201417448,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592586737
    },
    {
        "content": "<p>oh you rebind below</p>",
        "id": 201417505,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592586775
    },
    {
        "content": "<p>(not a problem but <a href=\"https://github.com/rust-lang/rust/pull/73503/files#diff-d50f263d8091a7b5a01fb336a499c4b9R1459\">https://github.com/rust-lang/rust/pull/73503/files#diff-d50f263d8091a7b5a01fb336a499c4b9R1459</a> doesn't actually need a bind I don't think)</p>",
        "id": 201417711,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592586925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/refactoring.20rustc.20predicates.2C.20a.20MCP/near/201416953\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/73503/files#diff-be27d6a6af7ff4ca2d8882a7d8d44d21R152\">https://github.com/rust-lang/rust/pull/73503/files#diff-be27d6a6af7ff4ca2d8882a7d8d44d21R152</a></p>\n</blockquote>\n<p>sadly not enough, I still have 7 failing tests</p>",
        "id": 201417867,
        "sender_full_name": "lcnr",
        "timestamp": 1592586995
    },
    {
        "content": "<p>that's one fewer right?</p>",
        "id": 201417926,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592587027
    },
    {
        "content": "<p>I think <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 201417966,
        "sender_full_name": "lcnr",
        "timestamp": 1592587046
    },
    {
        "content": "<p><span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 201417980,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592587055
    },
    {
        "content": "<p>it is</p>",
        "id": 201417994,
        "sender_full_name": "lcnr",
        "timestamp": 1592587063
    },
    {
        "content": "<p>at least if I didn't fat finger before</p>",
        "id": 201418013,
        "sender_full_name": "lcnr",
        "timestamp": 1592587075
    },
    {
        "content": "<p>so much diff to go through</p>",
        "id": 201418309,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592587229
    },
    {
        "content": "<blockquote>\n<p>let proj = proj;</p>\n</blockquote>\n<p>The good code</p>",
        "id": 201418998,
        "sender_full_name": "lcnr",
        "timestamp": 1592587558
    },
    {
        "content": "<p>Okay, I didn't see anything else :(</p>",
        "id": 201419577,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592587863
    },
    {
        "content": "<p>I think I know what the problem is... <code>Binder::wrap_nonbinding</code> currently also shifts already bound vars if I am not mistaken</p>",
        "id": 201434435,
        "sender_full_name": "lcnr",
        "timestamp": 1592597028
    },
    {
        "content": "<p>so if we have <code>Trait(for&lt;'a&gt; fn(&amp;'a (), &amp;'b ()): Clone)</code> where <code>'b</code> is unbound, <code>Binder::wrap_nonbinding</code> currently also shifts <code>'a</code> outwards,<br>\nmeaning that this is changed to <code>Forall(for&lt;'a&gt;: Trait(fn(&amp;'a (), &amp;'b ()): Clone)</code>, which is incorrect</p>",
        "id": 201434778,
        "sender_full_name": "lcnr",
        "timestamp": 1592597270
    },
    {
        "content": "<p>or did I miss something?</p>",
        "id": 201434848,
        "sender_full_name": "lcnr",
        "timestamp": 1592597296
    },
    {
        "content": "<p>It shouldn't. shift_in should handle that.</p>",
        "id": 201434867,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592597308
    },
    {
        "content": "<p>/me wishes that there were unit tests for this sort of thing.</p>",
        "id": 201434953,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592597362
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">amount</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">debruijn</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">current_index</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">r</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201435169,
        "sender_full_name": "lcnr",
        "timestamp": 1592597511
    },
    {
        "content": "<p>we start with index 0</p>",
        "id": 201435180,
        "sender_full_name": "lcnr",
        "timestamp": 1592597519
    },
    {
        "content": "<p>nm, that seems correct</p>",
        "id": 201435257,
        "sender_full_name": "lcnr",
        "timestamp": 1592597547
    },
    {
        "content": "<p>was confused for a second</p>",
        "id": 201435274,
        "sender_full_name": "lcnr",
        "timestamp": 1592597560
    },
    {
        "content": "<p>I really don't know what is going wrong here :/ I think all remaining failures are in</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fold_free_var_ty</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">bound_var</span>: <span class=\"nc\">BoundVar</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">outer_binder</span>: <span class=\"nc\">DebruijnIndex</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fallible</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">bound_var</span><span class=\"p\">.</span><span class=\"n\">debruijn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DebruijnIndex</span>::<span class=\"n\">INNERMOST</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// here</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"n\">bound_var</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">assert_ty_ref</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">interner</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">shifted_in_from</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">interner</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">outer_binder</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201470705,
        "sender_full_name": "lcnr",
        "timestamp": 1592646617
    },
    {
        "content": "<p>I don't <em>think</em> it's a Chalk problem</p>",
        "id": 201487244,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592673064
    },
    {
        "content": "<p>But it is a little interesting you're only getting errors in Chalk tests</p>",
        "id": 201487270,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592673114
    },
    {
        "content": "<p>Though Chalk is probably a bit more sensitive to debruijn indices than rustc</p>",
        "id": 201487338,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592673158
    },
    {
        "content": "<p>Or maybe there's a code path that the Chalk integration is hitting that the rest of rustc isn't</p>",
        "id": 201487357,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592673183
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I pulled your changes, not all of them fail there. <code>builtin-copy-clone</code> fails in <code>fold_free_var_lifetime</code></p>",
        "id": 201489599,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592676380
    },
    {
        "content": "<p>If it helps, this is an example of one of the goals that is failing:</p>\n<div class=\"codehilite\"><pre><span></span><code>: :     canonical: Canonical {\n: :         value: InEnvironment {\n: :             environment: Env([for[] FromEnv(Ty(!0_0): TraitId(Trait(DefId(2:1910 ~ core[13dc]::marker[0]::Sized[0])))), for[] FromEnv(Ty(!0_0): TraitId(Trait(DefId(2:1604 ~ core[13dc]::clone[0]::Clone[0])))), FromEnv(!0_0)]),\n: :             goal: WellFormed(for&lt;0&gt; [Ty(StructId(Ref(Not))&lt;Lifetime(&#39;^2.0), Ty(!0_0)&gt;), Ty(!0_0)]),\n: :         },\n: :         binders: [Lifetime(U0)],\n: :     },\n: :     universes: 1,\n</code></pre></div>",
        "id": 201489651,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592676474
    },
    {
        "content": "<p>Pretty sure it's that <code>'^2.0</code> there</p>",
        "id": 201489699,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592676505
    },
    {
        "content": "<p>Which comes from this <code>ChalkEnvironmentAndGoal</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>ChalkEnvironmentAndGoal {\n        environment: [\n            Predicate(\n                TraitPredicate(&lt;T as std::marker::Sized&gt;),\n            ),\n            Predicate(\n                TraitPredicate(&lt;T as std::clone::Clone&gt;),\n            ),\n            TypeFromEnv(\n                T,\n            ),\n        ],\n        goal: WellFormed(fn(&amp;T) -&gt; T),\n    }\n</code></pre></div>",
        "id": 201490000,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592676927
    },
    {
        "content": "<p>It's probably this line: <a href=\"https://github.com/rust-lang/rust/pull/73503/files#diff-c04a0fadb0b4314f668eb30e70a2f659L185\">https://github.com/rust-lang/rust/pull/73503/files#diff-c04a0fadb0b4314f668eb30e70a2f659L185</a></p>",
        "id": 201490173,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592677113
    },
    {
        "content": "<p>yep that's the problem</p>",
        "id": 201490720,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592677902
    },
    {
        "content": "<p>Changing that to <code>WellFormed</code> goal to </p>\n<div class=\"codehilite\"><pre><span></span><code>                    _ =&gt; {\n                        let (ty, binders, _named_regions) = collect_bound_vars(interner, interner.tcx, &amp;ty::Binder::bind(ty));\n\n                        chalk_ir::GoalData::Quantified(\n                            chalk_ir::QuantifierKind::ForAll,\n                            chalk_ir::Binders::new(\n                                binders,\n                                chalk_ir::GoalData::DomainGoal(chalk_ir::DomainGoal::WellFormed(\n                                    chalk_ir::WellFormed::Ty(ty.lower_into(interner)),\n                                ))\n                                .intern(interner),\n                            ),\n                        )\n                    }\n</code></pre></div>\n\n\n<p>fixes it</p>",
        "id": 201490786,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592677989
    },
    {
        "content": "<p>ahhhhh, so well formed can now be bound <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 201496727,
        "sender_full_name": "lcnr",
        "timestamp": 1592686056
    },
    {
        "content": "<p>thank you for taking your time and looking into this <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> I really appreciate this</p>",
        "id": 201496789,
        "sender_full_name": "lcnr",
        "timestamp": 1592686098
    },
    {
        "content": "<p>Well, no, the issue is that <code>ignore_qualifiers</code> adjusts the indices as if it were.</p>",
        "id": 201497009,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592686406
    },
    {
        "content": "<p>ok, let's see if I got the correct now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 201498008,
        "sender_full_name": "lcnr",
        "timestamp": 1592687675
    },
    {
        "content": "<p>so we can have unbound variables in predicates</p>",
        "id": 201498016,
        "sender_full_name": "lcnr",
        "timestamp": 1592687693
    },
    {
        "content": "<p>Yes, it's not common, but it can happen.</p>",
        "id": 201498039,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592687715
    },
    {
        "content": "<p><code>ignore_qualifiers</code> binds the predicate and moves unbound variables one level outwards, so they remain unbound</p>",
        "id": 201498042,
        "sender_full_name": "lcnr",
        "timestamp": 1592687720
    },
    {
        "content": "<p>Well, it's common when we canonicalize, since that replaces inference variables with bound vars.</p>",
        "id": 201498070,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592687754
    },
    {
        "content": "<p>as we don't use this newly introduced binder for <code>WellFormed</code> predicates, the original unbound variables are now on the wrong level</p>",
        "id": 201498073,
        "sender_full_name": "lcnr",
        "timestamp": 1592687760
    },
    {
        "content": "<p>yes</p>",
        "id": 201498129,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592687781
    },
    {
        "content": "<p>ok, that makes sense to me <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> This seems kind of dangerous as we don't use the binder in other situations too which only works right now because these locations don't have to deal with unbound variables</p>",
        "id": 201498238,
        "sender_full_name": "lcnr",
        "timestamp": 1592687922
    },
    {
        "content": "<p>I think I should probably split <code>ignore_qualifiers</code> into two versions where the recommended one panics on unbound variables</p>",
        "id": 201498254,
        "sender_full_name": "lcnr",
        "timestamp": 1592687954
    },
    {
        "content": "<p>Makes sense.</p>",
        "id": 201498333,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592688015
    },
    {
        "content": "<p>In this case, the bound var (lifetime) comes from the binders in canonicalization</p>",
        "id": 201507307,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592699802
    },
    {
        "content": "<p>it's also worth nothing that the chalk lowering is especially sensitive to bound vars (and shifting since we replace some things with them eagerly</p>",
        "id": 201507385,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592699914
    },
    {
        "content": "<p>In <em>this</em> particular case, we <em>might</em> just be able to use <code>VariableKinds::empty()</code> for the binders, but I'm not sure</p>",
        "id": 201507486,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592700060
    },
    {
        "content": "<p>might be ready for review now, tests are now all passing</p>",
        "id": 201531761,
        "sender_full_name": "lcnr",
        "timestamp": 1592741470
    },
    {
        "content": "<p>rustdoc still fails some tests, will look into them later :/</p>",
        "id": 201531998,
        "sender_full_name": "lcnr",
        "timestamp": 1592741972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> so I've not read the ~100 unread comments I had in this topic but should I review the PR now?</p>",
        "id": 201664525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592862004
    },
    {
        "content": "<p>seems like yes</p>",
        "id": 201664534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592862008
    },
    {
        "content": "<p>I think so <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 201691971,
        "sender_full_name": "lcnr",
        "timestamp": 1592894569
    },
    {
        "content": "<p>There is still the fairly general problem of using <code>predicate.ignore_qualifiers().skip_binder().kind()</code> in a lot of places,<br>\nbut I am not sure what's the best solution here</p>",
        "id": 201695202,
        "sender_full_name": "lcnr",
        "timestamp": 1592897575
    },
    {
        "content": "<p>Yeah, I'm reading it through and making some notes</p>",
        "id": 201793301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592952059
    },
    {
        "content": "<p>I am reminded of some things I did in the past, e.g., splitting out <code>Predicate</code> into <code>PredicateAtom</code> (no binders) and <code>Predicate</code></p>",
        "id": 201793322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592952080
    },
    {
        "content": "<p>though I can't remember if that was a change I wound up abandoning in the end</p>",
        "id": 201793332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592952090
    },
    {
        "content": "<p>in any case I feel like we can do this cleaner</p>",
        "id": 201793340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592952096
    },
    {
        "content": "<p>though I admit it's not totally obvious how ;)</p>",
        "id": 201793365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592952111
    },
    {
        "content": "<p>one question to consider is how much to iterate \"in branch\" versus iterating 'in tree' -- i.e., should we land even if we plan to iterate</p>",
        "id": 201793436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592952144
    },
    {
        "content": "<p>we should proabbly do a perf run too</p>",
        "id": 201793448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592952153
    },
    {
        "content": "<p>I'm pushing to nikomatsakis/forall-predicate-what-and-why-2 in any case</p>",
        "id": 201793505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592952195
    },
    {
        "content": "<p>going to have to stop soon but I will resume</p>",
        "id": 201793515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592952200
    },
    {
        "content": "<p>(I'm just editing comments into the source for now, since a change of this size is easier to review \"in tree\" than via github)</p>",
        "id": 201793533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592952212
    },
    {
        "content": "<p>looking at your branch, what's the best way to interact here? Should I open comments on your commit?</p>",
        "id": 201818476,
        "sender_full_name": "lcnr",
        "timestamp": 1592983897
    },
    {
        "content": "<p>also what does ndm mean?</p>",
        "id": 201818483,
        "sender_full_name": "lcnr",
        "timestamp": 1592983901
    },
    {
        "content": "<p>those are my initials for easy grepping :)</p>",
        "id": 201857708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593010353
    },
    {
        "content": "<p>as for interaction, idk, you can just ping me here I guess, I'll convert them to comments on the PR, or I could push the commits to your branch...</p>",
        "id": 201857749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593010380
    },
    {
        "content": "<blockquote>\n<p>Is there a good reason NOT to always create the <code>ForAll</code> here? Perhaps we want a helper that, given a <code>Binder&lt;Predicate&gt;</code> checks for escaping variables in the predicate and either constructs a for-all or discards the binder?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> <a href=\"#narrow/stream/144729-wg-traits/topic/refactoring.20rustc.20predicates.2C.20a.20MCP/near/201333382\">said</a>:</p>\n<blockquote>\n<p>Added some comments, and yes. Predicate should have a method that wraps itself in a for all only if it has escaping bound regions, possibly asserting that the result doesn't have escaping bound regions.</p>\n</blockquote>\n<p>Was the reason for this design, I have since added <code>fn potentially_qualified</code> which does exactly that (and has to be renamed to <code>potentially_quantified</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>)</p>",
        "id": 201861798,
        "sender_full_name": "lcnr",
        "timestamp": 1593012083
    },
    {
        "content": "<blockquote>\n<p>ndm let's add <code>to_predicate_or_return</code> or something?</p>\n</blockquote>\n<p>yes</p>",
        "id": 201861835,
        "sender_full_name": "lcnr",
        "timestamp": 1593012101
    },
    {
        "content": "<p>about <code>ignore_quantifiers</code></p>\n<blockquote>\n<p>this doesn't quite work like I expect. I expected it to return <code>Option&lt;Predicate&lt;'tcx&gt;&gt;</code> probably, just \"skipping\" the binders basically. Interesting.</p>\n</blockquote>\n<p>I wanted to make skipping binders explicit, as it can lead to problems if not handled correctly and think that simply <code>ignore_quantifiers</code> is \"too easy to use\".</p>",
        "id": 201862484,
        "sender_full_name": "lcnr",
        "timestamp": 1593012362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/refactoring.20rustc.20predicates.2C.20a.20MCP/near/201861835\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>ndm let's add <code>to_predicate_or_return</code> or something?</p>\n</blockquote>\n<p>yes</p>\n</blockquote>\n<p>Added <code>tcx.reuse_or_mk_predicate</code>, copying the signature of <code>reuse_or_mk_region</code></p>",
        "id": 201868106,
        "sender_full_name": "lcnr",
        "timestamp": 1593014798
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>    // XXX ndm it feels like we can get cleaner here, can&#39;t we?\n    // XXX certainly the *straightforward* thing would be to have\n    // XXX nested foralls. I.e., if we have `forall&lt;...&gt; X`, then\n    // XXX we can elaborate XXX `X` in a straightforward way, but\n    // XXX we&#39;ll get `forall&lt;...&gt; forall&lt;..&gt; X`. How much of a problem is that?\n    // XXX\n    // XXX we could certainly &quot;flatten&quot; predicates too.\n    // XXX\n    // XXX I&#39;m sort of reminded now why I had a `PredicateAtom` in some PRs...\n</code></pre></div>\n\n\n</blockquote>",
        "id": 201869041,
        "sender_full_name": "lcnr",
        "timestamp": 1593015232
    },
    {
        "content": "<p>(fn elaborate): I considered using something along the lines of <code>PredicateKind::ForAll(binder) =&gt; binder.map_bound(recurse),</code> here</p>",
        "id": 201869293,
        "sender_full_name": "lcnr",
        "timestamp": 1593015362
    },
    {
        "content": "<p>I was reviewing my older branches</p>",
        "id": 201869395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015401
    },
    {
        "content": "<p>One of the things I see I was doing (but I can't remember if I halted for a good reason) was to have</p>",
        "id": 201869426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015416
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Predicate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ForAll</span><span class=\"p\">(</span><span class=\"n\">Binder</span><span class=\"o\">&lt;</span><span class=\"n\">Predicate</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Atom</span><span class=\"p\">(</span><span class=\"n\">PredicateAtom</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">PredicateAtom</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201869477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015447
    },
    {
        "content": "<p>but that was also kind of messy as we both ĥave to keep the currently implicit invariant of ForAll intact and change a lot places as this doesn't just return the elaborated predicates</p>",
        "id": 201869552,
        "sender_full_name": "lcnr",
        "timestamp": 1593015483
    },
    {
        "content": "<p>which I think corresponds to the pattern we see a lot of wanting to \"skip past\" binders</p>",
        "id": 201869569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015488
    },
    {
        "content": "<p>almost always in these cases, we are looking for things that don't involve bound regions</p>",
        "id": 201869585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015500
    },
    {
        "content": "<p>I was thinking of going back to check and verify that, basically looking at all the sites that use the (very common) <code>ignore_quantifiers().skip_binders()</code> pattern</p>",
        "id": 201869635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015532
    },
    {
        "content": "<p>(as an aside, the name ignore quantifiers really misled me; it seems to do more the opposite, of introducing (possibly empty) forall quantifiers)</p>",
        "id": 201869672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015551
    },
    {
        "content": "<p>in any case, my point is, I could imagine this being cleaner if we had something like <code>fn atom(&amp;self) -&gt; Option&lt;&amp;PredicateAtom&lt;'tcx&gt;)</code></p>",
        "id": 201869774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015600
    },
    {
        "content": "<p>where it returns <code>None</code> if bound regions are involved</p>",
        "id": 201869832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015609
    },
    {
        "content": "<p>(though that may be too strict or some of the code)</p>",
        "id": 201869845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015617
    },
    {
        "content": "<p>an alternative would be something like <code>fn skip_binders_to_atom(&amp;self) -&gt; &amp;Atom</code> that recursively skips through binders, but anyway</p>",
        "id": 201869920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015669
    },
    {
        "content": "<p>I am not sure if I really think this is a good idea but it seems clear from the PR that there's a pattern here that we are ill-capturing</p>",
        "id": 201869947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015689
    },
    {
        "content": "<p>I was also thinking about the fact that we lump everything into one <code>Predicate</code>, whereas chalk separates things a bit more</p>",
        "id": 201869993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015712
    },
    {
        "content": "<p>e.g., it distinguishes <em>clauses</em> from <em>goals</em> and isolates out <em>where clauses</em></p>",
        "id": 201870046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015723
    },
    {
        "content": "<p>so I wanted to try and think about things from that angle too; like, first off, maybe we should distinguish \"where clauses\" from other sorts of predicates (this would rule out those bits of code that have <code>bug!</code> for things a user could not have typed)</p>",
        "id": 201870111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015761
    },
    {
        "content": "<p>but secondly I guess that part of the pattern today arises because users cannot type nested <code>for</code> binders and the like</p>",
        "id": 201870138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015778
    },
    {
        "content": "<p>(although the elaboration code would most naturally make use of them)</p>",
        "id": 201870171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015793
    },
    {
        "content": "<p>I'm not sure whether that is something we would just \"never\" want? I've gotten so used to thinking about chalk style goals with <code>for</code> and <code>if</code>...</p>",
        "id": 201870307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015851
    },
    {
        "content": "<p>anywaY I guess the real question is whether that code that currently kind of matches can be rewritten in some other style that feels \"just as natural\"</p>",
        "id": 201870360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593015895
    },
    {
        "content": "<p><code>fn skip_binders_to_atom(&amp;self) -&gt; Atom</code> might work, though this still has the dangers that we have to remember to rebind in a lot of cases</p>",
        "id": 201872178,
        "sender_full_name": "lcnr",
        "timestamp": 1593016837
    },
    {
        "content": "<p>I think the main problem is that there is no nice way to go from <code>Binder(Enum)</code> to <code>Enum::Variant(Binder)</code></p>",
        "id": 201872236,
        "sender_full_name": "lcnr",
        "timestamp": 1593016877
    },
    {
        "content": "<p>It might be fairly clean to add a <code>BoundPredicate</code> enum which has the same definition as the old <code>PredicateKind</code> and which is returned by <code>ignore/unfold_quantifiers</code>.</p>",
        "id": 201872413,
        "sender_full_name": "lcnr",
        "timestamp": 1593016962
    },
    {
        "content": "<p>at which point we could just keep the current definition to begin with <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 201872460,
        "sender_full_name": "lcnr",
        "timestamp": 1593017006
    },
    {
        "content": "<p>Sigh, yeah, I mean the current definition <em>is</em> capturing something -- that we don't permit multiple levels of binder -- and the code was written kind of around that.</p>",
        "id": 202144026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206451
    },
    {
        "content": "<p>So there are two questions</p>",
        "id": 202144034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206458
    },
    {
        "content": "<ol>\n<li>do we want that invariant?</li>\n</ol>",
        "id": 202144041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206462
    },
    {
        "content": "<ol start=\"2\">\n<li>is there another way to write the code that doesn't rely on that? I thik that would imply a more recursive structure</li>\n</ol>",
        "id": 202144098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206500
    },
    {
        "content": "<p>I guess the other question is why I was so motivated to remove the binder.</p>",
        "id": 202144171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593206541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/refactoring.20rustc.20predicates.2C.20a.20MCP/near/202144041\">said</a>:</p>\n<blockquote>\n<ol>\n<li>do we want that invariant?</li>\n</ol>\n</blockquote>\n<p>I think you are talking about \"ForAll must bind something\" here. I believe so, if we don't have that invariant we have to handle every usage of <code>PredicateKind</code> as if unused <code>ForAll</code> might exist. So afaict most things, which do not use <code>infcx.replace_bound_vars_with_placeholders</code>, now have to deal with <code>ForAll</code>. Which makes this kind of worse IMO.</p>",
        "id": 202155683,
        "sender_full_name": "lcnr",
        "timestamp": 1593214570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/refactoring.20rustc.20predicates.2C.20a.20MCP/near/202144098\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>is there another way to write the code that doesn't rely on that? I thik that would imply a more recursive structure</li>\n</ol>\n</blockquote>\n<p>maybe <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I might be able to get a better idea if I keep thinking about this for a while, but we tend to have a few different ways we use <code>Predicate</code>s</p>",
        "id": 202155854,
        "sender_full_name": "lcnr",
        "timestamp": 1593214750
    },
    {
        "content": "<ul>\n<li>don't care about binders, e.g. they might only look at the <code>DefId</code> of a <code>PredicateKind::Trait</code><ul>\n<li>I think these usecases will always get equally or slightly more cumbersome if we add <code>ForAll</code></li>\n</ul>\n</li>\n</ul>",
        "id": 202155885,
        "sender_full_name": "lcnr",
        "timestamp": 1593214792
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202155969,
        "sender_full_name": "lcnr",
        "timestamp": 1593214870
    },
    {
        "content": "<ul>\n<li>simply have to rebind the bound vars of the input, e.g. <code>elaborate</code><ul>\n<li><code>PredicateKind::ForAll</code> probably doesn't help too much here as well (I think it at least doesn't make it worse)</li>\n</ul>\n</li>\n</ul>",
        "id": 202156154,
        "sender_full_name": "lcnr",
        "timestamp": 1593215061
    },
    {
        "content": "<ul>\n<li>actually deal with binding predicates in a different manner, e.g. <code>process_predicate</code> and some outlives bound stuff IIRC.<ul>\n<li>I think these are cleaner when using <code>PredicateKind::ForAll</code></li>\n</ul>\n</li>\n</ul>",
        "id": 202156202,
        "sender_full_name": "lcnr",
        "timestamp": 1593215152
    },
    {
        "content": "<p>While implementing <a href=\"https://github.com/rust-lang/rust/pull/73503\">https://github.com/rust-lang/rust/pull/73503</a> it felt like I mostly had to deal with the first 2 types. There may be some additional places which are actually of type 3, but it still felt like we are mostly doing more work here</p>",
        "id": 202156471,
        "sender_full_name": "lcnr",
        "timestamp": 1593215486
    },
    {
        "content": "<blockquote>\n<p>I think you are talking about \"ForAll must bind something\" here.</p>\n</blockquote>\n<p>or wait, you probably mean \"that we don't permit multiple levels of binder\"  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I think this depends on if there are situations where multiple levels of binders are useful when dealing with predicates</p>",
        "id": 202236603,
        "sender_full_name": "lcnr",
        "timestamp": 1593350755
    },
    {
        "content": "<p>looking at <code>for&lt;'a&gt; for&lt;'b&gt; T: Trait&lt;'a, 'b&gt;</code>, this should be identical to <code>for&lt;'a, 'b&gt; T: Trait&lt;'a, 'b&gt;</code>.</p>",
        "id": 202236734,
        "sender_full_name": "lcnr",
        "timestamp": 1593350968
    },
    {
        "content": "<p>So if there are no semantic differences between these two representations I think it's easier if we only have to deal with one of them.</p>",
        "id": 202236812,
        "sender_full_name": "lcnr",
        "timestamp": 1593351074
    },
    {
        "content": "<p>I'm not sure.</p>",
        "id": 202369178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593465405
    },
    {
        "content": "<p>Elaboration, for example, would be easier if we permitted nesting.</p>",
        "id": 202369202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593465421
    },
    {
        "content": "<p>And cleaner overall then it was.</p>",
        "id": 202369211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593465426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/refactoring.20rustc.20predicates.2C.20a.20MCP/near/202155885\">said</a>:</p>\n<blockquote>\n<ul>\n<li>don't care about binders, e.g. they might only look at the <code>DefId</code> of a <code>PredicateKind::Trait</code><ul>\n<li>I think these usecases will always get equally or slightly more cumbersome if we add <code>ForAll</code></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>this is the case that I was kind of going after with the \"atom\" idea</p>",
        "id": 202369246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593465450
    },
    {
        "content": "<p>I agree that there is some inherent \"tension\" around skipping the binder and how visible to make it</p>",
        "id": 202369262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593465463
    },
    {
        "content": "<p>but I think that having <code>predicate.skip_binders()</code> which returns a <code>PredicateAtom</code> would be fairly clean</p>",
        "id": 202369338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593465488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/refactoring.20rustc.20predicates.2C.20a.20MCP/near/202369211\">said</a>:</p>\n<blockquote>\n<p>And cleaner overall then it was.</p>\n</blockquote>\n<p>but I guess there would be a canonicalization concern</p>",
        "id": 202369441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593465566
    },
    {
        "content": "<p><code>predicate.skip_binders() -&gt; PredicateAtom</code> seems both fairly explicit in what it's doing and still fairly short, I like it <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 202372388,
        "sender_full_name": "lcnr",
        "timestamp": 1593467486
    },
    {
        "content": "<blockquote>\n<p>but I guess there would be a canonicalization concern</p>\n</blockquote>\n<p>yeah, didn't even consider that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> so not having minimum required quantifiers is somewhat bad for caching</p>",
        "id": 202372671,
        "sender_full_name": "lcnr",
        "timestamp": 1593467655
    },
    {
        "content": "<p>What is the plan for <code>PredicateKind::Implies</code>? That was one of the reasons why this change is desirable IIUC</p>",
        "id": 202374338,
        "sender_full_name": "lcnr",
        "timestamp": 1593468737
    },
    {
        "content": "<p>Well, we basically just need to add it =) it would extend the <code>ParamEnv</code> with new clauses</p>",
        "id": 202474697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540949
    },
    {
        "content": "<p>Overall, I still think we should do the change just because I think we should be aligning rustc with a general logical language</p>",
        "id": 202474769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540969
    },
    {
        "content": "<p>However, I think the PR as is doesn't feel \"right\" to me, which suggests to me we ought to refine <code>Predicate</code> some more</p>",
        "id": 202474825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593540990
    },
    {
        "content": "<p>I think the <code>PredicateAtom</code> feels pretty plausible, I also suspect we may want to pull out a <code>WhereClause</code> from within that <code>Atom</code> that corresponds to things the <em>user</em> can write</p>",
        "id": 202474906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593541025
    },
    {
        "content": "<p>which in turn means that some parts of the code might just use <code>Binders&lt;WhereClause&gt;</code></p>",
        "id": 202474940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593541046
    },
    {
        "content": "<p>but I think we should look at that afterwards probably..</p>",
        "id": 202475040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593541083
    },
    {
        "content": "<p>... are you game to experiment with a <code>Atom</code>?</p>",
        "id": 202475050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593541088
    },
    {
        "content": "<p>also, i'm not sure where I came up with that name</p>",
        "id": 202475060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593541093
    },
    {
        "content": "<p>it's short, but I'm not sure how much it corresponds to the typical usage of the term \"atom\", which is more like \"a single token\" or something</p>",
        "id": 202475094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593541114
    },
    {
        "content": "<p>(something \"indivisible\")</p>",
        "id": 202475116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593541129
    },
    {
        "content": "<p>it's really a \"first order\" predicate I guess, or a \"core\" predicate?</p>",
        "id": 202475151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593541146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/refactoring.20rustc.20predicates.2C.20a.20MCP/near/202475050\">said</a>:</p>\n<blockquote>\n<p>... are you game to experiment with a <code>Atom</code>?</p>\n</blockquote>\n<p>jup, might take one or two weeks until I can get to this though</p>",
        "id": 202478397,
        "sender_full_name": "lcnr",
        "timestamp": 1593542768
    },
    {
        "content": "<p>updated it to use</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">PredicateKind</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ForAll</span><span class=\"p\">(</span><span class=\"n\">Binder</span><span class=\"o\">&lt;</span><span class=\"n\">Predicate</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Atom</span><span class=\"p\">(</span><span class=\"n\">PredicateAtom</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>while there is still one issue with incorrect bound vars I think it is far enough to make the decision if this change is worth it (at least in terms of readability)</p>",
        "id": 203332192,
        "sender_full_name": "lcnr",
        "timestamp": 1594247873
    },
    {
        "content": "<p>I personally think most situations are more readable now, except <code>FulfillProcessor::process_obligation</code>, which can probably also be cleaned up.</p>",
        "id": 203332468,
        "sender_full_name": "lcnr",
        "timestamp": 1594248090
    },
    {
        "content": "<p>on multiple foralls:</p>\n<blockquote>\n<p>but I guess there would be a canonicalization concern</p>\n</blockquote>\n<p>One thing to consider is if we want to change <code>ForAll</code> to <code>ForAll(Binder&lt;PredicateAtom&lt;'tcx&gt;)</code>, which would encode the single forall depth as part of the type system, which seems fairly nice to me</p>",
        "id": 203332939,
        "sender_full_name": "lcnr",
        "timestamp": 1594248374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> feel free to look at <a href=\"https://github.com/rust-lang/rust/pull/73503\">https://github.com/rust-lang/rust/pull/73503</a> for a first impression on the new impl</p>",
        "id": 203333196,
        "sender_full_name": "lcnr",
        "timestamp": 1594248546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> cool!</p>",
        "id": 204256704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595018609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/refactoring.20rustc.20predicates.2C.20a.20MCP/near/203332939\">said</a>:</p>\n<blockquote>\n<p>One thing to consider is if we want to change <code>ForAll</code> to <code>ForAll(Binder&lt;PredicateAtom&lt;'tcx&gt;)</code>, which would encode the single forall depth as part of the type system, which seems fairly nice to me</p>\n</blockquote>\n<p>I think we should probably do this so long as we are taking advantage of, or enforcing, this invariant. The main reason I can see <em>not</em> to do it would be to give ourselves the freedom to implement one or two things in a slightly more natural way.</p>",
        "id": 204261205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595021052
    },
    {
        "content": "<p>But as we said, it opens up some new problems...</p>",
        "id": 204261229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595021069
    },
    {
        "content": "<p>Reading the diff, so far, this seems a <strong>lot</strong> better, curious to get your opinion though</p>",
        "id": 204261275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595021092
    },
    {
        "content": "<p>So we currently use <code>Binder&lt;PredicateAtom&gt;</code> in <code>ForAll</code> and I tried to respond/implement all a reviews for now.</p>\n<p>I also think this at least isn't worse than the previous state and considering that we can now more easily decouple higher ranked bounds during trait resolution this PR should make future changes easier.</p>",
        "id": 204543448,
        "sender_full_name": "lcnr",
        "timestamp": 1595336203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you are also satisfied with this approach, I will look through this PR myself and do some more cleanup. After this it should be ready for a final review + merge</p>",
        "id": 204543676,
        "sender_full_name": "lcnr",
        "timestamp": 1595336302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I was feeling satisfied. I am confident that we can go from here to further simplifications, though I think the PR itself is kind of 'neutral' in its effects (not cleaner or less clean per se)</p>",
        "id": 204558061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595343483
    },
    {
        "content": "<p>nit: we currently have <code>Predicate::skip_binders</code> which can at most skip one binder. Should we rename this to <code>skip_binder</code>, even if it has the same name as <code>Binder::skip_binder</code>?</p>",
        "id": 204573030,
        "sender_full_name": "lcnr",
        "timestamp": 1595350432
    },
    {
        "content": "<p>nit: I original renamed <code>Obligation&lt;'tcx, ty::PolyTraitPredicate&lt;'tcx&gt;&gt;</code>  from <code>TraitPredicate</code> to <code>PolyTraitObligation</code> and added <code>Obligation&lt;'tcx, ty::TraitPredicate&lt;'tcx&gt;&gt;</code> as <code>TraitObligation</code>.</p>\n<p>Considering that we never actually use <code>TraitObligation</code>, it might be better to revert that change</p>",
        "id": 204577550,
        "sender_full_name": "lcnr",
        "timestamp": 1595352644
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/CK7nOdmziWN2kNt5Jopl2pbf/Screenshot-from-2020-07-21-19-47-35.png\">end</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/CK7nOdmziWN2kNt5Jopl2pbf/Screenshot-from-2020-07-21-19-47-35.png\" title=\"end\"><img src=\"/user_uploads/4715/CK7nOdmziWN2kNt5Jopl2pbf/Screenshot-from-2020-07-21-19-47-35.png\"></a></div>",
        "id": 204579728,
        "sender_full_name": "lcnr",
        "timestamp": 1595353750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> maybe <code>skip_forall</code>?</p>",
        "id": 204595923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595361573
    },
    {
        "content": "<p>or <code>skip_forall_binders</code></p>",
        "id": 204595942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595361584
    },
    {
        "content": "<p>something like that?</p>",
        "id": 204595947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595361586
    },
    {
        "content": "<p>technically, plural is perhaps appropriate since it may skip zero binders</p>",
        "id": 204595960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595361596
    },
    {
        "content": "<p>Will we ever be able to skip a different binder for predicates?</p>",
        "id": 204712186,
        "sender_full_name": "lcnr",
        "timestamp": 1595446462
    },
    {
        "content": "<p>i.e.<br>\n<code>PredicateKind::Implies</code> will probably be defined as <code>Implies(Predicate&lt;'tcx&gt;, Predicate&lt;'tcx&gt;)</code> so I don't know how skip binder makes sense here</p>",
        "id": 204712321,
        "sender_full_name": "lcnr",
        "timestamp": 1595446519
    },
    {
        "content": "<p>And merging <code>ExistentialPredicate</code>s with forall doesn't seem too desirable from what I can tell</p>",
        "id": 204712405,
        "sender_full_name": "lcnr",
        "timestamp": 1595446561
    },
    {
        "content": "<p>in which case <code>skip_forall</code> looks like a good idea</p>",
        "id": 204712472,
        "sender_full_name": "lcnr",
        "timestamp": 1595446583
    },
    {
        "content": "<p>I think that <code>Implies</code> is an <code>Atom</code></p>",
        "id": 205148866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595873002
    },
    {
        "content": "<p>Well, that's not obvious</p>",
        "id": 205148895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595873014
    },
    {
        "content": "<p>anyway, <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>, I'm not really claer on whether <a href=\"https://github.com/rust-lang/rust/issues/73503\">#73503</a> is ready to merge?</p>",
        "id": 205148912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595873025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/144729-wg-traits/topic/refactoring.20rustc.20predicates.2C.20a.20MCP/near/204712186\">said</a>:</p>\n<blockquote>\n<p>Will we ever be able to skip a different binder for predicates?</p>\n</blockquote>\n<p>I don't think so, to directly answer the question. <code>Implies</code> is not a binder, in any case.</p>",
        "id": 205148934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595873041
    },
    {
        "content": "<p>In particular I don't think Rust will ever have <code>exists&lt;T&gt; { ... }</code> goals</p>",
        "id": 205148987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595873053
    },
    {
        "content": "<p>But if we do, we'll deal with the name then :)</p>",
        "id": 205149017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595873069
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> tbh I don't really care. I reverted the change to <code>TraitObligation</code>, so if you are fine with <code>skip_binders</code> I would just merge this as is</p>",
        "id": 205149188,
        "sender_full_name": "lcnr",
        "timestamp": 1595873163
    },
    {
        "content": "<p>OK, I don't care too much either.</p>",
        "id": 205149218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595873175
    },
    {
        "content": "<p>I just delegated the PR to you but it appears to need a rebase</p>",
        "id": 205149230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595873183
    },
    {
        "content": "<p>rebased and r+</p>",
        "id": 205162108,
        "sender_full_name": "lcnr",
        "timestamp": 1595880360
    },
    {
        "content": "<blockquote>\n<p>Introduce implication predicates, which extend the <code>ParamEnv</code> with new predicates</p>\n</blockquote>",
        "id": 205207172,
        "sender_full_name": "lcnr",
        "timestamp": 1595923490
    },
    {
        "content": "<p>The MCP has the example <code>forall&lt;T&gt; { if (T: Debug) { Vec&lt;T&gt;: Debug } }</code></p>",
        "id": 205207288,
        "sender_full_name": "lcnr",
        "timestamp": 1595923564
    },
    {
        "content": "<p>this should probably be modeled as <code>ForAll(Implies(Trait, Trait))</code></p>",
        "id": 205207322,
        "sender_full_name": "lcnr",
        "timestamp": 1595923613
    },
    {
        "content": "<p>or <code>Implies(Binder(Trait, Trait))</code></p>",
        "id": 205207340,
        "sender_full_name": "lcnr",
        "timestamp": 1595923646
    },
    {
        "content": "<p>From what I can tell <code>ForAll(Implies(Trait, Trait))</code> is better</p>",
        "id": 205207362,
        "sender_full_name": "lcnr",
        "timestamp": 1595923675
    },
    {
        "content": "<p>So we probably want to define <code>Implies</code> as <code>PredicateAtom::Implies(Predicate&lt;'tcx&gt;, Predicate&lt;'tcx&gt;)</code></p>",
        "id": 205207495,
        "sender_full_name": "lcnr",
        "timestamp": 1595923789
    },
    {
        "content": "<p>I still don't know what we want to use implies for <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> it seems like implies is fairly similar to what <code>elaborate</code> is doing rn.</p>",
        "id": 205208165,
        "sender_full_name": "lcnr",
        "timestamp": 1595924292
    },
    {
        "content": "<p>From what I can tell the goal is to replace elaborate with something like <a href=\"https://rust-lang.github.io/chalk/book/clauses/implied_bounds.html?highlight=IMplies#computing-implied-bounds-with-fromenv\">https://rust-lang.github.io/chalk/book/clauses/implied_bounds.html?highlight=IMplies#computing-implied-bounds-with-fromenv</a></p>",
        "id": 205208196,
        "sender_full_name": "lcnr",
        "timestamp": 1595924318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I think it would be <code>ForAll(Implies(...))</code>, i.e., we would add a <code>Implies</code></p>",
        "id": 205620172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596217744
    },
    {
        "content": "<p>it does't really have much to do with elaboration</p>",
        "id": 205620189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596217756
    },
    {
        "content": "<p>rather, it lets you introduce <em>where clauses</em></p>",
        "id": 205620198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596217763
    },
    {
        "content": "<p>the idea is that we would want to be able to add 'foralls' to talk about GATs and things</p>",
        "id": 205620312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596217809
    },
    {
        "content": "<p>we don't really have a suitable surface syntax for this in Rust though</p>",
        "id": 205620350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596217831
    }
]