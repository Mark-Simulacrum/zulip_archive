[
    {
        "content": "<p>So I put in some time this morning working on changing chalk's debruijn system to count binders and not variables (<a href=\"https://github.com/rust-lang-nursery/chalk/issues/334\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/334\">chalk#334</a>). The motivation here is to make chalk match rustc more closely. However, I realized part-way through that I'm not sure (a) it will achieve that goal and (b) what we should really be shooting for.</p>\n<p>I started writing up some notes. So far I wrote up some short description of how chalk/rustc works:</p>\n<p><a href=\"https://gist.github.com/fe440aec437f7e8ad4cce8319954a973\" target=\"_blank\" title=\"https://gist.github.com/fe440aec437f7e8ad4cce8319954a973\">https://gist.github.com/fe440aec437f7e8ad4cce8319954a973</a></p>\n<p>I didn't get as far yet as some of the downsides to adopting the model I was trying to adopt, I'll try to add more notes on that at some point. But maybe what's there is already of interest (and/or people have questions, since I imagine it could be quite confusing). </p>\n<p>This is also related to the questions that <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> and <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> were raising about how to represent parameters (or how to translate from rustc's representation of parameters). </p>\n<p>It seems worth taking a step back to think about <em>what representation we want</em> a bit more and then maybe adapting both rustc/chalk accordingly (particularly in light of the design meeting from Friday).</p>",
        "id": 189969176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583584413
    },
    {
        "content": "<blockquote>\n<p>Here, the type (Self, T, U) would be (^0, ^1, ^2). This is because the trait effectively has a binder for&lt;Self, T&gt; and then the Bar further introduces a binder for&lt;U&gt; (nested within).</p>\n</blockquote>\n<p>shouldn't it be <code>(^1, ^2, ^0)</code>?</p>",
        "id": 189971525,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583589466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/144729-wg-traits/topic/debruijn.20indices.20and.20bound.20variables.20chalk.23334/near/189971525\" title=\"#narrow/stream/144729-wg-traits/topic/debruijn.20indices.20and.20bound.20variables.20chalk.23334/near/189971525\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Here, the type (Self, T, U) would be (^0, ^1, ^2). This is because the trait effectively has a binder for&lt;Self, T&gt; and then the Bar further introduces a binder for&lt;U&gt; (nested within).</p>\n</blockquote>\n<p>shouldn't it be <code>(^1, ^2, ^0)</code>?</p>\n</blockquote>\n<p>Or <code>(^2, ^1, ^0)</code> if <code>'a</code> is innermost right to left?</p>",
        "id": 189987027,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583616693
    },
    {
        "content": "<p>err nvm</p>",
        "id": 189987082,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583616763
    },
    {
        "content": "<p>nvm, I'm confused</p>",
        "id": 189987094,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583616800
    },
    {
        "content": "<p>Would this essentially be <code>for&lt;Self, T&gt; for&lt;U&gt;  (Self, T, U)</code></p>",
        "id": 189987139,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583616846
    },
    {
        "content": "<p>Which gets indexed as <code>for&lt;^1,^2&gt; for&lt;^0&gt; (^1, ^2, ^0)</code></p>",
        "id": 189987159,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583616935
    },
    {
        "content": "<p>So yeah, what <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> said</p>",
        "id": 189987207,
        "sender_full_name": "Jack Huey",
        "timestamp": 1583616970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/144729-wg-traits/topic/debruijn.20indices.20and.20bound.20variables.20chalk.23334/near/189971525\" title=\"#narrow/stream/144729-wg-traits/topic/debruijn.20indices.20and.20bound.20variables.20chalk.23334/near/189971525\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Here, the type (Self, T, U) would be (^0, ^1, ^2). This is because the trait effectively has a binder for&lt;Self, T&gt; and then the Bar further introduces a binder for&lt;U&gt; (nested within).</p>\n</blockquote>\n<p>shouldn't it be <code>(^1, ^2, ^0)</code>?</p>\n</blockquote>\n<p>Sigh. Yes!</p>",
        "id": 190077547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583765858
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 190077562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583765867
    },
    {
        "content": "<p>OK, I guess I'm going to use this topic to keep discussion alive on how to represent debruijn indices and the like in chalk.</p>",
        "id": 191534459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996633
    },
    {
        "content": "<p>I was reading a bit more into the code and realized that some of the comments are wrong</p>",
        "id": 191534477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996645
    },
    {
        "content": "<p>In particular, in the existing chalk-rust-ir types, afaict we only have one level of binders at the outermost level</p>",
        "id": 191534514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996669
    },
    {
        "content": "<p>In particular, <code>AssociatedTyValue</code> and <code>AssociatedTyDatum</code> contain <code>Binders&lt;...&gt;</code> values, and those binders include <em>both</em> the parameters from the outer impl <em>and</em> the parameters from the associated type</p>",
        "id": 191534590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996708
    },
    {
        "content": "<p>For some reason, I thought that this was not the case (perhaps because the comments say as much)</p>",
        "id": 191534671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996725
    },
    {
        "content": "<p>but the comments are wrong</p>",
        "id": 191534680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996729
    },
    {
        "content": "<p>This is good</p>",
        "id": 191534733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996758
    },
    {
        "content": "<p>The <em>order</em> of those parameters is different from rustc, but having a single binder level may mean that we can adopt the \"count binder levels, not bindings\" model without ever needing to apply more than one level of binder at once.</p>",
        "id": 191535020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584996894
    },
    {
        "content": "<p>it would also be easy enough to change the order</p>",
        "id": 191536047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584997332
    },
    {
        "content": "<p>What comments in particular?</p>",
        "id": 191537155,
        "sender_full_name": "Jack Huey",
        "timestamp": 1584997913
    },
    {
        "content": "<p>so <a href=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-rust-ir/src/lib.rs#L310-L315\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-rust-ir/src/lib.rs#L310-L315\">this comment</a> is correct, <a href=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-rust-ir/src/lib.rs#L406-L415\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/1ac0d00e61b427964c2b9b10e21bd8cd183e5932/chalk-rust-ir/src/lib.rs#L406-L415\">but this one</a> is wrong</p>",
        "id": 191539329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584999002
    },
    {
        "content": "<p>As an update: I pushed more on my debruijn branch. I'm working on getting the tests to pass using the approach I was using, and just saying that we have only one binding level for things like associated types (which combines the variables from the two binders into one). </p>\n<p>Once this is done there will remain two things to reconcile vis a vis how rustc does things:</p>\n<ul>\n<li>for each binders, chalk has a list of kinds, whereas rustc assumes lifetimes (this should be changed in rustc)</li>\n<li>we are using indices for bound variables, rustc uses names (if we change the above, I think then that rustc should be refactored here too, though it may want to include the name/def-id <em>too</em> for debug output, as we do for \"early bound\" things today)</li>\n</ul>\n<p>I think that the latter in particular will have to be reconciled on the rustc side to make chalk integration possible in the way I was originally envisioning. However, we could do a \"quick-n-dirty\" chalk integration today without making <em>any</em> of these changes, but I'll cover that a bit in the <a class=\"stream-topic\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits/topic/reintegrating.20chalk.20into.20rustc\">#wg-traits &gt; reintegrating chalk into rustc</a> topic.</p>",
        "id": 191636362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585067206
    },
    {
        "content": "<p>After putting some more time in this morning before the household woke up, I've got my debruijn branch building now and passing tests.</p>",
        "id": 191736124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585138936
    },
    {
        "content": "<p>/me -&gt; breakfast time</p>",
        "id": 191736137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585138943
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> -- so I should probably go do the other things I meant to do today, but I keep being tempted to try and make this PR more beautiful. Anyway I was playing about with the <code>DebruijnIndex</code> APIs, trying to rejigger the code so that most things which talk about binding levels do so via <code>DebruijnIndex</code> values, and not via raw integers.</p>",
        "id": 192056113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585331767
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , see my new comments. But overall, I would say that there's only a couple things that definitely should be fixed <em>in this PR</em></p>",
        "id": 192056534,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585331961
    },
    {
        "content": "<p>I think changing code to use <code>DebruijnIndex</code> instead of raw integers can be left for a followup PR</p>",
        "id": 192056610,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585331994
    },
    {
        "content": "<p>Because this should help a lot with rustc integration, and I would rather get it in sooner rather than later</p>",
        "id": 192056708,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585332016
    },
    {
        "content": "<p>Also, can you file followup issues about the implied bounds problem?</p>",
        "id": 192056814,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585332068
    },
    {
        "content": "<p>If you have some time later today, we should block out some time and get the blog post finished</p>",
        "id": 192056865,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585332098
    },
    {
        "content": "<p>I'm gonna try to finish writing it soon and you can edit</p>",
        "id": 192056887,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585332115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/debruijn.20indices.20and.20bound.20variables.20chalk.23334/near/192056865\" title=\"#narrow/stream/144729-wg-traits/topic/debruijn.20indices.20and.20bound.20variables.20chalk.23334/near/192056865\">said</a>:</p>\n<blockquote>\n<p>If you have some time later today, we should block out some time and get the blog post finished</p>\n</blockquote>\n<p>yeah this was one of the things I wanted to do today</p>",
        "id": 192058088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585332657
    },
    {
        "content": "<p>ok I'm going to force myself to stop this branch for a second :)</p>",
        "id": 192058100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585332663
    },
    {
        "content": "<p>What time is good for you?</p>",
        "id": 192059423,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585333212
    },
    {
        "content": "<p>ok I lied, I couldn't stop until that damn thing was building. Just pushed those commits.</p>",
        "id": 192061149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585334039
    },
    {
        "content": "<p>I didn't try to remove the as-u32 and as-usize business but I think the rest worked out quite well.</p>",
        "id": 192061206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585334051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I have a call at 3 for a bit, but I am going to go poke at the blog post now</p>",
        "id": 192061239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585334068
    },
    {
        "content": "<p>Ok, I'll review/merge later</p>",
        "id": 192062180,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585334480
    },
    {
        "content": "<p>there's probably some out of date docs</p>",
        "id": 192062197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585334493
    },
    {
        "content": "<p>though I tried to do a good job with the doc comments</p>",
        "id": 192062207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585334500
    },
    {
        "content": "<p>Test failed :(</p>",
        "id": 192062298,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585334530
    },
    {
        "content": "<p>/me tests locally</p>",
        "id": 192062329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585334542
    },
    {
        "content": "<p>I thought they were passing</p>",
        "id": 192062331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585334545
    },
    {
        "content": "<p>doc comment test</p>",
        "id": 192062416,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585334580
    },
    {
        "content": "<p>src/lib.rs:445:8<br>\n  |<br>\n3 | for&lt;A&gt; for&lt;B&gt; for&lt;C&gt; for&lt;D&gt;<br>\n  |        ^^^ expected one of <code>async</code>, <code>move</code>, <code>static</code>, <code>|</code>, or <code>||</code></p>",
        "id": 192062445,
        "sender_full_name": "Jack Huey",
        "timestamp": 1585334589
    },
    {
        "content": "<p>yeah</p>",
        "id": 192062548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585334634
    },
    {
        "content": "<p>I figured it'd be something like that</p>",
        "id": 192062560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585334638
    },
    {
        "content": "<p>just a missing ignore</p>",
        "id": 192062567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585334640
    },
    {
        "content": "<p>pushed a fix</p>",
        "id": 192062609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585334646
    }
]