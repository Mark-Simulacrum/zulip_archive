[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 215508433,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604436642
    },
    {
        "content": "<p>10 minutes until meeting</p>",
        "id": 215508446,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604436648
    },
    {
        "content": "<p>not entirely sure what we'll talk about today</p>",
        "id": 215508457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604436658
    },
    {
        "content": "<p>Alright <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span> , meeting time</p>",
        "id": 215509382,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437223
    },
    {
        "content": "<p>So, for anyone who didn't see or couldn't join: we had a call on Friday to discuss the type library</p>",
        "id": 215509435,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437261
    },
    {
        "content": "<p>Ah yeah that reminds me, did I post the video?</p>",
        "id": 215509492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437295
    },
    {
        "content": "<p>Presumably not</p>",
        "id": 215509496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437298
    },
    {
        "content": "<p>nope</p>",
        "id": 215509503,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437301
    },
    {
        "content": "<p>I propose we make that the focus of the next sprint. Which, if we start today, would end Dec. 15</p>",
        "id": 215509581,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437328
    },
    {
        "content": "<p>That seems correct</p>",
        "id": 215509594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437336
    },
    {
        "content": "<p>Which would be a good place to start for the holidays</p>",
        "id": 215509599,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437339
    },
    {
        "content": "<p>and we did wind up with a <em>fairly</em> concrete-ish set of tasks</p>",
        "id": 215509609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437347
    },
    {
        "content": "<p>Yes</p>",
        "id": 215509620,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437354
    },
    {
        "content": "<p>hackmd link:<a href=\"https://hackmd.io/vSz1MfmBSDSx5NkowiIUfQ\">https://hackmd.io/vSz1MfmBSDSx5NkowiIUfQ</a></p>",
        "id": 215509640,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437366
    },
    {
        "content": "<p>We already have a couple PRs up</p>",
        "id": 215509702,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437389
    },
    {
        "content": "<p>nice</p>",
        "id": 215509734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437414
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/644\">chalk#644</a> and <a href=\"https://github.com/rust-lang/chalk/issues/645\">chalk#645</a>/chalk#646 notably</p>",
        "id": 215509774,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437439
    },
    {
        "content": "<p>in addition to <a href=\"https://github.com/rust-lang/chalk/issues/639\">chalk#639</a>, which was up before Friday</p>",
        "id": 215509837,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437456
    },
    {
        "content": "<p>One thing to point out, if anyone has any strong opinions on <a href=\"#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/215213725\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/type.20library.20discussion/near/215213725</a>, feel free to comment there</p>",
        "id": 215509946,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437510
    },
    {
        "content": "<p>Other than that, maybe if anyone has any annoucements?</p>",
        "id": 215509993,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437543
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/644\">chalk#644</a> is a bit tricky because we might be cloning in more places now</p>",
        "id": 215510076,
        "sender_full_name": "detrumi",
        "timestamp": 1604437578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-11-03/near/215509581\">said</a>:</p>\n<blockquote>\n<p>I propose we make that the focus of the next sprint. Which, if we start today, would end Dec. 15</p>\n</blockquote>\n<p>should we write a blog post about this or other such things?</p>",
        "id": 215510085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437584
    },
    {
        "content": "<p>For me, I got my rustc binder refactor work to a point where all bound variables in <code>Binder</code> are contiguous and don't skip any</p>",
        "id": 215510090,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437588
    },
    {
        "content": "<p>and/or convert the hackmd into issues</p>",
        "id": 215510096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-11-03/near/215510085\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-11-03/near/215509581\">said</a>:</p>\n<blockquote>\n<p>I propose we make that the focus of the next sprint. Which, if we start today, would end Dec. 15</p>\n</blockquote>\n<p>should we write a blog post about this or other such things?</p>\n</blockquote>\n<p>I was thinking maybe we just write a blog post at the end of this next sprint</p>",
        "id": 215510117,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437613
    },
    {
        "content": "<p>Definitely issues for what there aren't already</p>",
        "id": 215510149,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-11-03/near/215510076\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/chalk/issues/644\">chalk#644</a> is a bit tricky because we might be cloning in more places now</p>\n</blockquote>\n<p>Yeah, so I was thinking about that</p>",
        "id": 215510195,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437672
    },
    {
        "content": "<p>And I think it's highlighting a potential flaw in <code>data()</code> calls</p>",
        "id": 215510278,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437708
    },
    {
        "content": "<p>Right, calls like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>self.data(folder.interner()).clone()\n</code></pre></div>",
        "id": 215510316,
        "sender_full_name": "detrumi",
        "timestamp": 1604437736
    },
    {
        "content": "<p>In that the reference have a lifetime of the self, rather than of the interner</p>",
        "id": 215510326,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437742
    },
    {
        "content": "<p>(for ProgramClause in this case)</p>",
        "id": 215510353,
        "sender_full_name": "detrumi",
        "timestamp": 1604437751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-11-03/near/215510326\">said</a>:</p>\n<blockquote>\n<p>In that the reference have a lifetime of the self, rather than of the interner</p>\n</blockquote>\n<p>well</p>",
        "id": 215510377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437766
    },
    {
        "content": "<p>that is by design</p>",
        "id": 215510380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437768
    },
    {
        "content": "<p>though maybe a problem :)</p>",
        "id": 215510389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437773
    },
    {
        "content": "<p>Right</p>",
        "id": 215510396,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437779
    },
    {
        "content": "<p>Which, kind of also was brought up for rustc's <code>GenericArg</code></p>",
        "id": 215510438,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437802
    },
    {
        "content": "<p>I would expect more cloning as part of the change to make <code>Fold</code> be \"by-value\"</p>",
        "id": 215510507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437829
    },
    {
        "content": "<p>Most of the time the values are Copy</p>",
        "id": 215510520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437841
    },
    {
        "content": "<p>This is partly why I was saying that it might be worth <em>requiring</em> values to be Copy</p>",
        "id": 215510534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437849
    },
    {
        "content": "<p>I can't 100% remember the exact  issue, but it was based on the fact that <code>data()</code> functions return a reference</p>",
        "id": 215510563,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604437868
    },
    {
        "content": "<p>even though it'd be limiting for our testing harness, which would then be forced to use an interning scheme of some kind</p>",
        "id": 215510565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-11-03/near/215510563\">said</a>:</p>\n<blockquote>\n<p>I can't 100% remember the exact  issue, but it was based on the fact that <code>data()</code> functions return a reference</p>\n</blockquote>\n<p>I remember</p>",
        "id": 215510574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437877
    },
    {
        "content": "<p>the problem here is a classic and annoying Rust one</p>",
        "id": 215510582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437882
    },
    {
        "content": "<p>if you have a signature <code>fn(&amp;self) -&gt; &amp;Data</code>, you <em>must</em> return a reference to <code>Data</code> that is owned by <code>self</code> (well, or <code>static</code>)</p>",
        "id": 215510604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437898
    },
    {
        "content": "<p>you can't <em>synthesize</em> a fresh value</p>",
        "id": 215510610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437904
    },
    {
        "content": "<p>Or maybe cheat and just clone for the testing harness</p>",
        "id": 215510614,
        "sender_full_name": "detrumi",
        "timestamp": 1604437906
    },
    {
        "content": "<p>we can certainly just add clones that will generally be optimized away</p>",
        "id": 215510648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437923
    },
    {
        "content": "<p>it's just less ergonomic to write the code and probably longer compilation times</p>",
        "id": 215510684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437932
    },
    {
        "content": "<p>though who knows by how much</p>",
        "id": 215510691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-11-03/near/215510610\">said</a>:</p>\n<blockquote>\n<p>you can't <em>synthesize</em> a fresh value</p>\n</blockquote>\n<p>in particular this doesn't work well with the \"tagged pointer\" style</p>",
        "id": 215510708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437951
    },
    {
        "content": "<p>which wants to generate a \"fresh\" value</p>",
        "id": 215510718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437956
    },
    {
        "content": "<p>we could certainly change <code>GenericArg</code> in particular to return by value etc</p>",
        "id": 215510733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437966
    },
    {
        "content": "<p>yeah, that was it</p>",
        "id": 215510775,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438001
    },
    {
        "content": "<p>I guess I'm not overly worried about the clones in <a href=\"https://github.com/rust-lang/chalk/pull/644\">https://github.com/rust-lang/chalk/pull/644</a>, but I do think it's going to be push us (and rust-analyzer) towards <br>\n more use of <code>Copy</code></p>",
        "id": 215510790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438012
    },
    {
        "content": "<p>rust-analyzer will probably require some improved interning mechanism, I haven't looked closely into that</p>",
        "id": 215510808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438025
    },
    {
        "content": "<p>Well, I feel like some of the clones don't need to be there</p>",
        "id": 215510826,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438041
    },
    {
        "content": "<p>or...I guess it's a flaw in the design</p>",
        "id": 215510872,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438050
    },
    {
        "content": "<p>That the <code>TyData</code> is getting cloned</p>",
        "id": 215510881,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438057
    },
    {
        "content": "<p>instead of <code>Ty</code></p>",
        "id": 215510883,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438061
    },
    {
        "content": "<p>The latter will essentially be free for interned types</p>",
        "id": 215510915,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438079
    },
    {
        "content": "<p>the former though idk</p>",
        "id": 215510927,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438089
    },
    {
        "content": "<p>where is <code>TyData</code> being cloned</p>",
        "id": 215510958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438109
    },
    {
        "content": "<p>let me look</p>",
        "id": 215510974,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438120
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/644/files#diff-dff175ffd78d7636e8e02e183ee3d12519510907b0f5f2d1bd0c314e775984d4R334\">https://github.com/rust-lang/chalk/pull/644/files#diff-dff175ffd78d7636e8e02e183ee3d12519510907b0f5f2d1bd0c314e775984d4R334</a></p>",
        "id": 215511016,
        "sender_full_name": "detrumi",
        "timestamp": 1604438146
    },
    {
        "content": "<p>beat me</p>",
        "id": 215511087,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438171
    },
    {
        "content": "<p>plus I really think we should remove this impl: <a href=\"https://github.com/rust-lang/chalk/pull/644/files#diff-dff175ffd78d7636e8e02e183ee3d12519510907b0f5f2d1bd0c314e775984d4R12\">https://github.com/rust-lang/chalk/pull/644/files#diff-dff175ffd78d7636e8e02e183ee3d12519510907b0f5f2d1bd0c314e775984d4R12</a></p>",
        "id": 215511125,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438211
    },
    {
        "content": "<p>since I think it's hiding basically a ton of clones</p>",
        "id": 215511146,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438224
    },
    {
        "content": "<p>Could maybe be avoided by pushing the <code>.data()</code> call deeper down</p>",
        "id": 215511149,
        "sender_full_name": "detrumi",
        "timestamp": 1604438225
    },
    {
        "content": "<p>potentially</p>",
        "id": 215511289,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438292
    },
    {
        "content": "<p>hmm</p>",
        "id": 215511315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-11-03/near/215511016\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/chalk/pull/644/files#diff-dff175ffd78d7636e8e02e183ee3d12519510907b0f5f2d1bd0c314e775984d4R334\">https://github.com/rust-lang/chalk/pull/644/files#diff-dff175ffd78d7636e8e02e183ee3d12519510907b0f5f2d1bd0c314e775984d4R334</a></p>\n</blockquote>\n<p>so wait</p>",
        "id": 215511325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438330
    },
    {
        "content": "<p>The reference impl for fold looked hard to remove though</p>",
        "id": 215511328,
        "sender_full_name": "detrumi",
        "timestamp": 1604438335
    },
    {
        "content": "<p>that is <code>ProgramClause</code></p>",
        "id": 215511339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438344
    },
    {
        "content": "<p>ok ok</p>",
        "id": 215511345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438351
    },
    {
        "content": "<p>I see</p>",
        "id": 215511347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438352
    },
    {
        "content": "<p>it's just kind of \"the general pattern\" that is the problem</p>",
        "id": 215511357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438357
    },
    {
        "content": "<p>not specifically <code>TyData</code></p>",
        "id": 215511383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438367
    },
    {
        "content": "<p>yeah</p>",
        "id": 215511387,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438369
    },
    {
        "content": "<p>yeah so.. hmm...</p>",
        "id": 215511405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438385
    },
    {
        "content": "<p>I think partly what is going on here</p>",
        "id": 215511424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438400
    },
    {
        "content": "<p>is a desire to leverage (and rightly so...) the <code>derive</code> logic</p>",
        "id": 215511480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438418
    },
    {
        "content": "<p>how so</p>",
        "id": 215511613,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438500
    },
    {
        "content": "<p>I guess I need to browse the source better</p>",
        "id": 215511699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438533
    },
    {
        "content": "<p>Yeah, I haven't put deep thought into if this is <em>actually</em> a problem we want to try to avoid</p>",
        "id": 215511742,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438560
    },
    {
        "content": "<p>but what I was refrring to was</p>",
        "id": 215511745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438562
    },
    {
        "content": "<p>the <a href=\"https://github.com/rust-lang/chalk/blob/9fb4a13f23dfbd1f781fd1f71d778e86c3cace19/chalk-ir/src/fold.rs#L394-L408\">way that we handle <code>Ty&lt;I&gt;</code></a> doesnt' have this problem</p>",
        "id": 215511759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438570
    },
    {
        "content": "<p>and if so, what the potential solutions are</p>",
        "id": 215511764,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438573
    },
    {
        "content": "<p>what we do there is to implement <code>SuperFoldWith</code> on <code>Ty&lt;I&gt;</code> and then we hand-write the match -- this is because we want to delegate to specialized methods</p>",
        "id": 215511788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438586
    },
    {
        "content": "<p>this is kind of annoying because it requires hand-writing the match :)</p>",
        "id": 215511802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438594
    },
    {
        "content": "<p>but for <code>ProgramClause</code> I was happy not to have to do that</p>",
        "id": 215511820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438602
    },
    {
        "content": "<p>note that I think <code>Fold</code> is not even <em>implemented</em> for <code>TyData</code></p>",
        "id": 215511841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438617
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 215511848,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438623
    },
    {
        "content": "<p>because that is kind of <em>wrong</em></p>",
        "id": 215511859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438630
    },
    {
        "content": "<p>I think this would maybe ideally be how other interned things work too</p>",
        "id": 215511920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438645
    },
    {
        "content": "<p>it makes me wonder if (egads) we want a secondary fold trait-- FoldRef :P</p>",
        "id": 215511944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438659
    },
    {
        "content": "<p>or maybe this could be how <code>superFoldWith</code> works or somethig, probably no</p>",
        "id": 215511966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438670
    },
    {
        "content": "<p>I think we only derive <code>SuperFoldWith</code> for a limited set of types..</p>",
        "id": 215511982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202020-11-03/near/215511944\">said</a>:</p>\n<blockquote>\n<p>it makes me wonder if (egads) we want a secondary fold trait-- FoldRef :P</p>\n</blockquote>\n<p>not fold ref -- fold interned or something</p>",
        "id": 215511997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438684
    },
    {
        "content": "<p>kind of horrible but it is sort of a distinct operation in some sense</p>",
        "id": 215512013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438695
    },
    {
        "content": "<p>Also, to give an example of where an implicit clone is happening with that impl we saw before: <a href=\"https://github.com/rust-lang/chalk/blob/9fb4a13f23dfbd1f781fd1f71d778e86c3cace19/chalk-ir/src/fold.rs#L425\">https://github.com/rust-lang/chalk/blob/9fb4a13f23dfbd1f781fd1f71d778e86c3cace19/chalk-ir/src/fold.rs#L425</a></p>",
        "id": 215512020,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438702
    },
    {
        "content": "<p>really the ideal signature would be something like</p>",
        "id": 215512029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438705
    },
    {
        "content": "<p><code>fn(Ty&lt;I&gt;, &amp;TyData&lt;I&gt;) -&gt; Ty&lt;I&gt;</code></p>",
        "id": 215512042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438716
    },
    {
        "content": "<p>i.e., we would not return an \"un-interned\" result</p>",
        "id": 215512065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438732
    },
    {
        "content": "<p>(I took in the interned result because it might be a micro-optimization to be able to re-use it)</p>",
        "id": 215512086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438744
    },
    {
        "content": "<p>hmm</p>",
        "id": 215512105,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438759
    },
    {
        "content": "<p>(though I'm not sure how realistic that is)</p>",
        "id": 215512161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438778
    },
    {
        "content": "<p>(it's hard to tell when you can just re-use, I think? I guess you can compare for equality)</p>",
        "id": 215512198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438800
    },
    {
        "content": "<p>although that needs a fast equality method</p>",
        "id": 215512236,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1604438827
    },
    {
        "content": "<p>yeah it's not obviously a win</p>",
        "id": 215512248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438834
    },
    {
        "content": "<p>might be sometimes, might not</p>",
        "id": 215512255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438842
    },
    {
        "content": "<p>Feels similar to <code>Cow</code></p>",
        "id": 215512313,
        "sender_full_name": "detrumi",
        "timestamp": 1604438872
    },
    {
        "content": "<p>oh goodness</p>",
        "id": 215512383,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438901
    },
    {
        "content": "<p>I'm not sure I see the comparison to <code>Cow</code> but no matter</p>",
        "id": 215512398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438915
    },
    {
        "content": "<p>Alright so, I guess for <code>ProgramClause</code>, the solution is to instead match in that function instead of having <code>Fold</code> on <code>ProgramClauseData</code></p>",
        "id": 215512435,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438946
    },
    {
        "content": "<p>I guess I should look/think more closely in general</p>",
        "id": 215512446,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604438957
    },
    {
        "content": "<p>yeah so if we adopted the thing I'm vaguely proposing</p>",
        "id": 215512500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438998
    },
    {
        "content": "<p><code>ProgramClause</code> would look like</p>",
        "id": 215512566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439013
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">fold</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ProgramClause</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">me</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">fold_interned</span><span class=\"p\">(</span><span class=\"n\">me</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215512625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439058
    },
    {
        "content": "<p>and we would have <code>#[derive(FoldInterned)]</code> on <code>ProgramClauseData</code> or whatever</p>",
        "id": 215512652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439072
    },
    {
        "content": "<p>which would be a perhaps a bit tricky to write :)</p>",
        "id": 215512664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439076
    },
    {
        "content": "<p>because it might have to be informed of things like the \"interned\" form</p>",
        "id": 215512683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439088
    },
    {
        "content": "<p>I guess we can use attributes for that</p>",
        "id": 215512692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439094
    },
    {
        "content": "<p>I feel like that just moves us further from rustc :/</p>",
        "id": 215512700,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604439099
    },
    {
        "content": "<p>well</p>",
        "id": 215512710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439108
    },
    {
        "content": "<p>rustc would eventually adopt this samestructure presumably</p>",
        "id": 215512714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439115
    },
    {
        "content": "<p>it's kind of an \"implementation detail\"</p>",
        "id": 215512723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439120
    },
    {
        "content": "<p>hmm</p>",
        "id": 215512761,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604439125
    },
    {
        "content": "<p>i.e., nobody would invoke <code>fold_interned</code> except for <code>fold</code> impls</p>",
        "id": 215512767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439130
    },
    {
        "content": "<p>the only reason for it though is to avoid boilerplate</p>",
        "id": 215512775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439138
    },
    {
        "content": "<p>arguably not worth it</p>",
        "id": 215512786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439147
    },
    {
        "content": "<p>Just for <code>derive</code>, I don't think so</p>",
        "id": 215512819,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604439183
    },
    {
        "content": "<p>Of the interned types, most don't derive Foldable</p>",
        "id": 215512849,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604439202
    },
    {
        "content": "<p>ok then never mind ignore me :P</p>",
        "id": 215512877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439219
    },
    {
        "content": "<p>just inline it and be done</p>",
        "id": 215512881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439226
    },
    {
        "content": "<p>could be a fixme too I guess</p>",
        "id": 215512938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439245
    },
    {
        "content": "<p>potentially, yeah</p>",
        "id": 215512948,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604439254
    },
    {
        "content": "<p>i didn't expect to spend half an hour discussing the cloning</p>",
        "id": 215512977,
        "sender_full_name": "detrumi",
        "timestamp": 1604439282
    },
    {
        "content": "<p>was there something else to talk about?</p>",
        "id": 215512988,
        "sender_full_name": "detrumi",
        "timestamp": 1604439294
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 215513003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604439305
    },
    {
        "content": "<p>lol well we could use the time to do a bit of reviewing etc</p>",
        "id": 215513019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439326
    },
    {
        "content": "<p>or I could anyway</p>",
        "id": 215513020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439328
    },
    {
        "content": "<p>We can potentially end early if nobody has anything to discuss (and give Niko time to review)</p>",
        "id": 215513027,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604439330
    },
    {
        "content": "<p>beat me</p>",
        "id": 215513031,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604439333
    },
    {
        "content": "<p>I'm not really going to have time the next 2 weeks for non-trivial reviews, just fyi</p>",
        "id": 215513050,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604439351
    },
    {
        "content": "<p>fwiw I think the cloning was worth talking out, I think that the boilerplate pain is real :)</p>",
        "id": 215513055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439353
    },
    {
        "content": "<p>100% worth discussing</p>",
        "id": 215513111,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604439370
    },
    {
        "content": "<p>though maybe as things have settled down some</p>",
        "id": 215513112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439371
    },
    {
        "content": "<p>it's less of a pain</p>",
        "id": 215513115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439373
    },
    {
        "content": "<p>I've just spent too many hours of my life manually writing these sorts of impls</p>",
        "id": 215513128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604439383
    },
    {
        "content": "<p>Anyways, so if nobody has anything else to discuss, we can end early</p>",
        "id": 215513247,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604439475
    },
    {
        "content": "<p>The only other thing that comes to mind to <em>maybe</em> discuss sometime is the skill tree</p>",
        "id": 215513302,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604439491
    },
    {
        "content": "<p>But I imagine that's mostly just someone going to be updating it to the current state of things</p>",
        "id": 215513355,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604439533
    },
    {
        "content": "<p>versus something that needs a bunch of discussion</p>",
        "id": 215513361,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604439542
    },
    {
        "content": "<p>Right, we <a href=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\">crossed off</a> quite a lot, so someone can just open a PR (<a href=\"https://github.com/rust-lang/wg-traits/blob/master/roadmap.toml\">source</a>)</p>",
        "id": 215513764,
        "sender_full_name": "detrumi",
        "timestamp": 1604439846
    },
    {
        "content": "<p>Sorry I missed the meeting last night. I still have to grok the <code>ProgramClause</code> thing (I'm not really familiar with the code). Do you think we can clone in the <code>Fold&lt;I, TI&gt; for &amp;'a T</code> impl to avoid having the PR bitrot, then clean things up later?</p>",
        "id": 215550171,
        "sender_full_name": "Laurențiu",
        "timestamp": 1604476722
    },
    {
        "content": "<p>I would be ok with landing the PR with extra clones</p>",
        "id": 215649250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604528920
    },
    {
        "content": "<p>agreed</p>",
        "id": 215651457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604530396
    }
]