[
    {
        "content": "<p>So I'm starting this topic to try and log some intermediate thoughts. </p>\n<p>I've been thinking a lot about lazy normalization in chalk since <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> opened <a href=\"https://github.com/rust-lang-nursery/chalk/issues/234\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/234\">chalk#234</a>. I just posted a <a href=\"https://github.com/rust-lang/chalk/issues/234#issuecomment-530823193\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/234#issuecomment-530823193\">new comment here</a> about the interaction of lazy norm and floundering with the \"on demand\" API changes. In particular, I wanted to try and ensure that we never request \"all impls\" of a trait (or, at least, not outside coherence), but chalk's existing approach to lazy norm is a complication there.</p>",
        "id": 175528528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568294714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I'm interested to hear what you think about <a href=\"https://github.com/rust-lang/chalk/issues/234#issuecomment-530823193\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/234#issuecomment-530823193\">the lazy norm desugaring I proposed here</a>. I'm sort of planning to pursue implementing it a bit as an experiment. It seems increasingly important to be able to know the \"self type\" we are looking for.</p>",
        "id": 176410939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569273770
    }
]