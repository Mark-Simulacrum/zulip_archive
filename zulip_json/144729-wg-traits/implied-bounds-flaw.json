[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> For a moment I thought the world was tearing apart, but that's ok</p>",
        "id": 154759918,
        "sender_full_name": "scalexm",
        "timestamp": 1547069995
    },
    {
        "content": "<p>we just overlooked something with implied bounds</p>",
        "id": 154759924,
        "sender_full_name": "scalexm",
        "timestamp": 1547070002
    },
    {
        "content": "<p>I mean I overlooked something, with my \"optimization\" that if you have say a function <code>fn foo&lt;T: Foo&gt;()</code>, and you call it with e.g. <code>foo::&lt;SomeType&gt;</code>, the caller only has to prove <code>Implemented(SomeType: Foo)</code> while the function can rely on <code>FromEnv(T: Foo)</code></p>",
        "id": 154760001,
        "sender_full_name": "scalexm",
        "timestamp": 1547070048
    },
    {
        "content": "<p>well guess what, this optimization is wrong</p>",
        "id": 154760010,
        "sender_full_name": "scalexm",
        "timestamp": 1547070057
    },
    {
        "content": "<p>the caller should be proving the full <code>WellFormed(SomeType: Foo)</code></p>",
        "id": 154760028,
        "sender_full_name": "scalexm",
        "timestamp": 1547070070
    },
    {
        "content": "<p>trivial example of why this optimization is wrong:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(trivial_bounds)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span>: <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// `WF(S) :- Implemented(S: Foo).` ok</span>\n<span class=\"c1\">// and the implied bound:</span>\n<span class=\"c1\">// `FromEnv(S: Foo) :- FromEnv(S)`</span>\n<span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"c1\">// We have `FromEnv(S)` which implies `Implemented(S: Foo)` and `Implemented(S: Bar)`,</span>\n<span class=\"c1\">// so we can prove `WellFormed(S: Foo)`.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Well `T = S` here and we never wrote a `Bar` impl for `S` actually.</span>\n<span class=\"w\">    </span><span class=\"n\">T</span>::<span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// I can rely on `FromEnv(T: Foo)`, hence I can prove `Implemented(T: Bar)`.</span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Ok I can prove `Implemented(S: Foo)` because of the impl</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154760044,
        "sender_full_name": "scalexm",
        "timestamp": 1547070094
    },
    {
        "content": "<p>makes sense</p>",
        "id": 154760272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547070321
    },
    {
        "content": "<p>amazing how subtle this can be :)</p>",
        "id": 154760285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547070336
    },
    {
        "content": "<p>I guess we won't lose a lot without this optimization thanks to caching</p>",
        "id": 154760287,
        "sender_full_name": "scalexm",
        "timestamp": 1547070341
    },
    {
        "content": "<p>I don't even remember this optimization, I have to admit</p>",
        "id": 154760288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547070341
    },
    {
        "content": "<p>yep</p>",
        "id": 154760295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547070348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> should I be putting this on some list of \"things we need to follow up on\"?</p>",
        "id": 155111465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547495687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes</p>",
        "id": 155111510,
        "sender_full_name": "scalexm",
        "timestamp": 1547495754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>\n<blockquote>\n<p>We can see that we have this asymmetry between well-formedness check, which only verifies that the direct superbounds hold, and implied bounds which gives access to all bounds transitively implied by the where clauses. In that case this is ok because as we said, we don't use FromEnv(Type&lt;...&gt;) to deduce other FromEnv(OtherType&lt;...&gt;) things, nor do we use FromEnv(Type: Trait) to deduce FromEnv(OtherType&lt;...&gt;) things. So in that sense type definitions are \"less recursive\" than traits, and we saw in a previous subsection that it was the combination of asymmetry and recursive trait / impls that led to unsoundness. As such, the WellFormed(Type&lt;...&gt;) predicate does not need to be co-inductive.</p>\n</blockquote>",
        "id": 156721531,
        "sender_full_name": "scalexm",
        "timestamp": 1548274842
    }
]