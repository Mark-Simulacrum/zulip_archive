[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span>, almost meeting time</p>",
        "id": 199544881,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591127998
    },
    {
        "content": "<p>Decided to drop the \"design\" part of the topic</p>",
        "id": 199544950,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128014
    },
    {
        "content": "<p>Since we usually do a mix of design, triage, etc.</p>",
        "id": 199544994,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128036
    },
    {
        "content": "<p>Good with everyone?</p>",
        "id": 199545002,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128041
    },
    {
        "content": "<p>I've also been thinking the title is outdated</p>",
        "id": 199545067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128067
    },
    {
        "content": "<p>Did we pick a topic for this meeting last time, or is that still up in the air?</p>",
        "id": 199545099,
        "sender_full_name": "detrumi",
        "timestamp": 1591128083
    },
    {
        "content": "<blockquote>\n<p>Possible future meeting topics<br>\n- implied bounds – continuing from last meeting<br>\n- how to manage consts in chalk writer<br>\n- shared type library next steps<br>\n- wf checks on types<br>\n-   chalk’s support for coherence</p>\n</blockquote>",
        "id": 199545223,
        "sender_full_name": "detrumi",
        "timestamp": 1591128132
    },
    {
        "content": "<p>link: <a href=\"https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg\">https://hackmd.io/nrhN5A8sR2eY9UdfJTKcJg</a></p>",
        "id": 199545259,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128156
    },
    {
        "content": "<p>I didn't realize someone had added those hehe</p>",
        "id": 199545330,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128195
    },
    {
        "content": "<p>I think I typed them in :)</p>",
        "id": 199545345,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128207
    },
    {
        "content": "<p>I don't think we had any conversation about it last week (there's....been a lot going on)</p>",
        "id": 199545396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128234
    },
    {
        "content": "<p>One thing that I had thought about this weekend</p>",
        "id": 199545456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128250
    },
    {
        "content": "<p>and maybe we might want to discuss a bit</p>",
        "id": 199545466,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128257
    },
    {
        "content": "<p>is subtyping, and how we want to handle it in chalk</p>",
        "id": 199545490,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128269
    },
    {
        "content": "<p>yeah, we could talk about that</p>",
        "id": 199545515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128279
    },
    {
        "content": "<p>(though, I also didn't realize there was an issue already with a bit of guidance, or forgot)</p>",
        "id": 199545538,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128290
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/chalk/issues/418\">chalk#418</a></p>",
        "id": 199545541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128291
    },
    {
        "content": "<p>yeah, I left some notes, not too detailed</p>",
        "id": 199545595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128309
    },
    {
        "content": "<p>maybe enough for an intrepid person to piece it together :)</p>",
        "id": 199545609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128316
    },
    {
        "content": "<p>but I'd be happy to talk it out in a bit more detail</p>",
        "id": 199545640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128330
    },
    {
        "content": "<p>Anyways, looking that over. Is it \"blocked\" on sem-syn equality?</p>",
        "id": 199545671,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128344
    },
    {
        "content": "<p>(should we open the floor for updates/general questions first?)</p>",
        "id": 199545682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.2006.2E02.2E2020/near/199545671\">said</a>:</p>\n<blockquote>\n<p>Anyways, looking that over. Is it \"blocked\" on sem-syn equality?</p>\n</blockquote>\n<p>I don't... think so... let me re-read :)</p>",
        "id": 199545773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128376
    },
    {
        "content": "<p>0.11.0 is published :)</p>",
        "id": 199545781,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128379
    },
    {
        "content": "<p>that's awesome</p>",
        "id": 199545803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128388
    },
    {
        "content": "<p>after a bit of trying to get things going</p>",
        "id": 199545825,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128395
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"254853\">@pksunkara</span></p>",
        "id": 199545853,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128404
    },
    {
        "content": "<p>Yep, nice to see the crates here: <a href=\"https://crates.io/crates/chalk-engine\">https://crates.io/crates/chalk-engine</a></p>",
        "id": 199545941,
        "sender_full_name": "detrumi",
        "timestamp": 1591128439
    },
    {
        "content": "<p>Other than that, I feel like it's been a pretty calm week</p>",
        "id": 199545974,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128451
    },
    {
        "content": "<p>I mentioned I was working on some docs for the recursive solver</p>",
        "id": 199546011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128470
    },
    {
        "content": "<p>Yeah, looking at merged PRs, it's mostly some refactorings</p>",
        "id": 199546017,
        "sender_full_name": "detrumi",
        "timestamp": 1591128473
    },
    {
        "content": "<p>I think the number of open PRs has been cut down quite a lot since last week, good job on that!</p>",
        "id": 199546108,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1591128498
    },
    {
        "content": "<p>I've been run kind of ragged last few weeks, I want to start opening up issues for folks, but I'm finding it hard to get enough context to figure out what to open :P</p>",
        "id": 199546157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128525
    },
    {
        "content": "<p>too many things going on?</p>",
        "id": 199546203,
        "sender_full_name": "detrumi",
        "timestamp": 1591128546
    },
    {
        "content": "<p>but if anybody has suggestions -- things they want to do but feel a bit blocked -- do ask</p>",
        "id": 199546226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128555
    },
    {
        "content": "<p>There was actually a pretty big/important PR related to chalk-engine that got merged</p>",
        "id": 199546231,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128559
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> we should add <a href=\"https://github.com/rust-lang-nursery/chalk/issues/418\">chalk#418</a> to the \"extend chalk-solve to support Rust semantics\", I guess</p>",
        "id": 199546349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128606
    },
    {
        "content": "<p>I think the recursive solver docs have been quite useful</p>",
        "id": 199546354,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1591128609
    },
    {
        "content": "<p>that goal is a bit narrow</p>",
        "id": 199546358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128609
    },
    {
        "content": "<p>Bleh I'm building LLVM locally and my computer is just churning for everything lol</p>",
        "id": 199546388,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128623
    },
    {
        "content": "<p>that is, I think the \"goal\" is probably \"extend chalk to support Rust semantics\" more than chalk-solve particularly</p>",
        "id": 199546426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128640
    },
    {
        "content": "<p>indeed</p>",
        "id": 199546439,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128650
    },
    {
        "content": "<p>Also looking through the sprint goals</p>",
        "id": 199546714,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128766
    },
    {
        "content": "<p>crate structure got cleaned up a lot</p>",
        "id": 199546751,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128783
    },
    {
        "content": "<p>so chalk-engine now depends on chalk-ir, instead of the other way around</p>",
        "id": 199546779,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128795
    },
    {
        "content": "<p>huh, sounds they're not too tightly coupled then, if you can switch that around</p>",
        "id": 199546907,
        "sender_full_name": "detrumi",
        "timestamp": 1591128843
    },
    {
        "content": "<p>The only thing left from the original \"crate structure, publish\" goal is setting up bors-ng</p>",
        "id": 199546908,
        "sender_full_name": "pksunkara",
        "timestamp": 1591128843
    },
    {
        "content": "<p>well, and \"integrate recursive/slg solvers at compatable level\"</p>",
        "id": 199546991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128876
    },
    {
        "content": "<p>we far as \"improve caching strategy for recursive solver\", there's been a lot of good \"thinking\"</p>",
        "id": 199547043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283967\">@Zahari Dichev</span> has a draft PR about coinduction, and we had a long chat about an alternative approach, and I sketched out some docs + how salsa might look</p>",
        "id": 199547089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> so it was pretty easy, since chalk-engine basically needed all the types, but used them as associated types on <code>Context</code></p>",
        "id": 199547096,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128921
    },
    {
        "content": "<p>At some point I think we decided to leave the recursive solver as is instead of abstracting it, to avoid unnecessary work? <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> do you remember this?</p>",
        "id": 199547143,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1591128943
    },
    {
        "content": "<p>I was thinking that a good place to start might be to try \"separating\" out the parts of recursive solver I think salsa could handle from the rest, so we can see how the two interact</p>",
        "id": 199547150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591128945
    },
    {
        "content": "<p>and <code>chalk-ir</code> only really need the debug macros and a couple types from <code>chalk-engine</code>and <code>chalk-base</code></p>",
        "id": 199547168,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591128956
    },
    {
        "content": "<p>I do think that the recursive/SLG solvers ought to live at a comparable place</p>",
        "id": 199547267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129000
    },
    {
        "content": "<p>Well, now that the dependency is switched around, it might be useful to take a look again to see if it's worth abstracting it out</p>",
        "id": 199547271,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591129002
    },
    {
        "content": "<p>that said, there is one other thing about the recursive solver</p>",
        "id": 199547279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129013
    },
    {
        "content": "<p>that is worth mentioning here</p>",
        "id": 199547300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129022
    },
    {
        "content": "<p>I'd like to alter it to separate \"shared state\" from \"state for a single session\"</p>",
        "id": 199547327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129036
    },
    {
        "content": "<p>in particular, it has a \"cache\" that would be (I think) global, and probably guarded by a mutex</p>",
        "id": 199547354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129047
    },
    {
        "content": "<p>but when you solve a specific query, you could do that in parallel from multiple threads (the stack / search graph would be local to each thread)</p>",
        "id": 199547396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129063
    },
    {
        "content": "<p>it might be interesting to try and factor out the API to figure out how we would expose that</p>",
        "id": 199547407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129073
    },
    {
        "content": "<p>I don't .. know how SLG can be factored this way</p>",
        "id": 199547413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129080
    },
    {
        "content": "<p>I can think of a way :)</p>",
        "id": 199547462,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591129090
    },
    {
        "content": "<p>(to make SLG multithreaded)</p>",
        "id": 199547474,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591129096
    },
    {
        "content": "<p>what about the \"locked\" queries that you mentioned briefly in the docs. How would you determine which one should be locked or not ?</p>",
        "id": 199547508,
        "sender_full_name": "Zahari Dichev",
        "timestamp": 1591129119
    },
    {
        "content": "<p>I'm interesting to hear about it, but my main point here was that it may impact the \"public API\" we want, though I think it shouldn't really hold us off from refactoring</p>",
        "id": 199547520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129127
    },
    {
        "content": "<p>whereever we end up I think if we have multiple solvers they should ideally be factored to a single interface that works in comparable ways</p>",
        "id": 199547560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129145
    },
    {
        "content": "<p>That would be nice</p>",
        "id": 199547592,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591129167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283967\">Zahari Dichev</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.2006.2E02.2E2020/near/199547508\">said</a>:</p>\n<blockquote>\n<p>what about the \"locked\" queries that you mentioned briefly in the docs. How would you determine which one should be locked or not ?</p>\n</blockquote>\n<p>(that's not really related to chalk, but more to other things in rust-analyzer/salsa, but it comes down to whether the output is deterministic and/or very expensive)</p>",
        "id": 199547615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129181
    },
    {
        "content": "<p>so on a  related note</p>",
        "id": 199547767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129234
    },
    {
        "content": "<p>when we landed the predicate refactoring in <a href=\"https://github.com/rust-lang/rust/issues/72055\">#72055</a> -- towards the \"GAT support in rustc\" goal but also the \"shraed library represetnting types\"</p>",
        "id": 199547793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129255
    },
    {
        "content": "<p>there was some perf hit, though I think <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> has mostly recovered it now</p>",
        "id": 199547814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129265
    },
    {
        "content": "<p>anyway I was thinking about the steps I listed under \"extracting a shared library\", and trying to figure out how much to start making those changes incrementally -- do we have to know more about our ultimate direction we starting to add <code>kind</code> and so forth?</p>",
        "id": 199547908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129303
    },
    {
        "content": "<p>that is, starting to modify rustc to do <code>ty.kind()</code> instead of <code>ty.kind</code></p>",
        "id": 199547934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129313
    },
    {
        "content": "<p>and eventually <code>ty.kind(tcx)</code></p>",
        "id": 199547944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129319
    },
    {
        "content": "<p>anyway I felt a bit of hesitation, although right now I feel like I'm not sure why I was hesitating</p>",
        "id": 199548004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129332
    },
    {
        "content": "<p>I guess just because it's invasive</p>",
        "id": 199548015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129337
    },
    {
        "content": "<p>I'll probably make an MCP for that to describe it but I think it's a good candidate for someone who wants to poke at rustc</p>",
        "id": 199548079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129365
    },
    {
        "content": "<p>Yeah, I think performance is something we really want to keep an eye on</p>",
        "id": 199548142,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591129393
    },
    {
        "content": "<p>I don't think this change will have perf impact</p>",
        "id": 199548157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129405
    },
    {
        "content": "<p>I'd like to get a bit more into rustc dev at some point (will build a new pc soon so I'll have more cores, which would be nice first)</p>",
        "id": 199548165,
        "sender_full_name": "detrumi",
        "timestamp": 1591129409
    },
    {
        "content": "<p>the predicate impact was largely caused by adding interning (and hence hashing)</p>",
        "id": 199548176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129412
    },
    {
        "content": "<p>Well, we do a lot of interning in Chalk</p>",
        "id": 199548222,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591129439
    },
    {
        "content": "<p>point being, we already intern types in rustc</p>",
        "id": 199548279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129448
    },
    {
        "content": "<p>So maybe we need to think about being more careful with it</p>",
        "id": 199548288,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591129453
    },
    {
        "content": "<p>I guess this is orthogonal though</p>",
        "id": 199548323,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591129471
    },
    {
        "content": "<p>we may want to have some helper like</p>",
        "id": 199548344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129480
    },
    {
        "content": "<p><code>p.intern_if_changed(q)</code></p>",
        "id": 199548359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129490
    },
    {
        "content": "<p>which would be used during folding</p>",
        "id": 199548379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129497
    },
    {
        "content": "<p>the idea woud be: check first if <code>p == q.data()</code> and, if so, just return <code>q</code></p>",
        "id": 199548419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129519
    },
    {
        "content": "<p>this is roughly the optimization we did for predicate construction</p>",
        "id": 199548449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129529
    },
    {
        "content": "<p>anyway I think the lesson learned for <em>rustc</em> is -- whenever we are going to add new interning, do perf runs first, and try to optimize before landing :)</p>",
        "id": 199548480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129546
    },
    {
        "content": "<p>sounds good</p>",
        "id": 199548591,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591129582
    },
    {
        "content": "<p>I'm skimming down the list of goals, looking for places where we might have updates</p>",
        "id": 199548595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129583
    },
    {
        "content": "<p>for opaque types, any updates <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>? we did land some PRs</p>",
        "id": 199548617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129593
    },
    {
        "content": "<p>there was a list for that somewhere right</p>",
        "id": 199548665,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591129620
    },
    {
        "content": "<p>Still need to dive into the WF checks</p>",
        "id": 199548666,
        "sender_full_name": "detrumi",
        "timestamp": 1591129621
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/issues/335#issuecomment-615254659\">https://github.com/rust-lang/chalk/issues/335#issuecomment-615254659</a></p>",
        "id": 199548700,
        "sender_full_name": "detrumi",
        "timestamp": 1591129636
    },
    {
        "content": "<p>Ah, forgot to check one off</p>",
        "id": 199548780,
        "sender_full_name": "detrumi",
        "timestamp": 1591129677
    },
    {
        "content": "<p>Looks like it's getting close though</p>",
        "id": 199548829,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591129683
    },
    {
        "content": "<p>ok, should we discuss subtyping?</p>",
        "id": 199548856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129703
    },
    {
        "content": "<p>Is there a concrete code example that might help explain it? The issue is a bit confusing</p>",
        "id": 199548944,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1591129762
    },
    {
        "content": "<p>Yes</p>",
        "id": 199548945,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591129762
    },
    {
        "content": "<p>(some harder details left such as implied bound interactions, but those might not be that important at first)</p>",
        "id": 199548948,
        "sender_full_name": "detrumi",
        "timestamp": 1591129763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218805\">@Mark Drobnak</span> do you mean opaque types or subtyping?</p>",
        "id": 199548977,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591129783
    },
    {
        "content": "<p>subtyping</p>",
        "id": 199548986,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1591129788
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/chalk/issues/418\">chalk#418</a> right?</p>",
        "id": 199549074,
        "sender_full_name": "detrumi",
        "timestamp": 1591129812
    },
    {
        "content": "<p>Ya</p>",
        "id": 199549083,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1591129818
    },
    {
        "content": "<p>well, I'm not sure what kind of <em>code example</em> we would give exactly,</p>",
        "id": 199549110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129830
    },
    {
        "content": "<p>perhaps this</p>",
        "id": 199549120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129835
    },
    {
        "content": "<p>you might have a rust program like</p>",
        "id": 199549132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129840
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"nc\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199549160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129859
    },
    {
        "content": "<p>so here, the type of <code>p</code> is being inferred</p>",
        "id": 199549236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129898
    },
    {
        "content": "<p>this is really outside the realm of chalk to some extent but</p>",
        "id": 199549248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129904
    },
    {
        "content": "<p>btw I found this chapter in the rustc-dev-guide to be helpful: <a href=\"https://rustc-dev-guide.rust-lang.org/variance.html\">https://rustc-dev-guide.rust-lang.org/variance.html</a></p>",
        "id": 199549259,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591129911
    },
    {
        "content": "<p>the type of <code>x</code> is <code>&amp;'a u32</code></p>",
        "id": 199549290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129920
    },
    {
        "content": "<p>but the type of <code>p</code> would be <code>&amp;'r u32</code> where <code>'r</code> is some other region,</p>",
        "id": 199549356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129933
    },
    {
        "content": "<p>and we have the constraints that <code>'a: 'r</code> and <code>'b: 'r</code> (from the second <code>p = y</code> assignment)</p>",
        "id": 199549380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129944
    },
    {
        "content": "<p>so you could imagine that rustc would be generating <code>Subtype(&amp;'a u32, ?P)</code> goals for something like <code>let p: _ = x</code>, where <code>?P</code> is the inference variable for the type of <code>p</code></p>",
        "id": 199549470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591129982
    },
    {
        "content": "<p>there is code in rustc to do this</p>",
        "id": 199549546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130028
    },
    {
        "content": "<p>chalk however only has code for \"unification\" -- meaning making types <strong>equal</strong> -- and that code is also a bit wrong</p>",
        "id": 199549623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130045
    },
    {
        "content": "<p>this is because, in trait matching, we don't typically get subtyping relationships</p>",
        "id": 199549638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130057
    },
    {
        "content": "<p>basically because rust trait matching is defined to work on exactly the same types (\"invariant\")</p>",
        "id": 199549673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130083
    },
    {
        "content": "<p>but in rustc we have these subtyping predicates for various reasons, and it turns out that to really get \"type equality\" right, we kind of need them too anyhow</p>",
        "id": 199549727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130125
    },
    {
        "content": "<p>not sure <span class=\"user-mention\" data-user-id=\"218805\">@Mark Drobnak</span> if that \"sets the stage\" a bit better?</p>",
        "id": 199549759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130139
    },
    {
        "content": "<p>Ya, that helps, thanks!</p>",
        "id": 199549772,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1591130148
    },
    {
        "content": "<p>so I'm reading over what I wrote in <a href=\"https://github.com/rust-lang-nursery/chalk/issues/418\">chalk#418</a></p>",
        "id": 199549885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130201
    },
    {
        "content": "<p>I'm not sure what is most fruitful to talk about, maybe <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> you have a question?</p>",
        "id": 199549931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130230
    },
    {
        "content": "<p>I'm not entirely sure why I said \"Separate semantic from syntactic equality\" was a necessary step</p>",
        "id": 199549995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130269
    },
    {
        "content": "<p>but anyway I can explain a bit how rustc handles things like <code>T1 &lt;: T2</code> and so forth</p>",
        "id": 199550048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130285
    },
    {
        "content": "<p>if you're familiar with chalk's unification code, the \"core bit\" is kind of similar to the <code>Zip</code> trait -- i.e., we walk down the types we are unifying, matching up their structures</p>",
        "id": 199550156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130339
    },
    {
        "content": "<p><code>T1 &lt;: T2</code> means a type/lifetime T2 lives longer than T2?</p>",
        "id": 199550174,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1591130348
    },
    {
        "content": "<p>I guess, the question is, working backwards, if we have a <code>Subtype</code> goal, how would chalk solve that</p>",
        "id": 199550191,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591130359
    },
    {
        "content": "<p>sorry, <code>T1 &lt;: T2</code> means \"<code>T1</code> is a subtype of <code>T2</code>\"</p>",
        "id": 199550196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130362
    },
    {
        "content": "<p><code>T1 == T2</code> means <code>T1</code> is the same type as <code>T2</code></p>",
        "id": 199550226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130380
    },
    {
        "content": "<p>which implies both <code>T1 &lt;: T2</code> and <code>T2 &lt;: T1</code></p>",
        "id": 199550233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130387
    },
    {
        "content": "<p>that is, <code>T1 &lt;: T2, T2 &lt;: T1</code> if and only if <code>T1 == T2</code></p>",
        "id": 199550297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130403
    },
    {
        "content": "<p>at least that is the desired relationship :)</p>",
        "id": 199550320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130411
    },
    {
        "content": "<p>it is more or less the same as <code>&lt;=</code> with numbers</p>",
        "id": 199550327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130416
    },
    {
        "content": "<p>i.e., <code>T1 &lt;: T2</code> if <code>T1</code> represents some smaller set of values, all of which are also part of the set <code>T2</code>...</p>",
        "id": 199550360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130433
    },
    {
        "content": "<p>anyway</p>",
        "id": 199550361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130434
    },
    {
        "content": "<p>(at least that is one way to interpret types)</p>",
        "id": 199550399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.2006.2E02.2E2020/near/199550191\">said</a>:</p>\n<blockquote>\n<p>I guess, the question is, working backwards, if we have a <code>Subtype</code> goal, how would chalk solve that</p>\n</blockquote>\n<p>circling back to this</p>",
        "id": 199550403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130459
    },
    {
        "content": "<p>(let's not get into lattices now <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> )</p>",
        "id": 199550434,
        "sender_full_name": "detrumi",
        "timestamp": 1591130480
    },
    {
        "content": "<p>rustc actually has two copies of the code that handles this, but I think the <a href=\"https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src/librustc_infer/infer/nll_relate/mod.rs#L696\"><code>nll_relate</code></a> code is the one I would want to emulate</p>",
        "id": 199550461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130498
    },
    {
        "content": "<p>and basically the idea is that just as unification kind of \"zips\" down the type structure</p>",
        "id": 199550493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130512
    },
    {
        "content": "<p>we do the same thing, but we carry with us a \"direction\" (what we call the \"ambient variance\", which is a term I kind of made up)</p>",
        "id": 199550550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130526
    },
    {
        "content": "<p>so basically we always have a left (<code>a</code>) and a right (<code>b</code>) \"thing\"</p>",
        "id": 199550601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130554
    },
    {
        "content": "<blockquote>\n<p>This code is intended for use in NLL and chalk</p>\n</blockquote>\n<p>Huh, interesting</p>",
        "id": 199550622,
        "sender_full_name": "detrumi",
        "timestamp": 1591130565
    },
    {
        "content": "<p>but we might be checking one of three things:</p>\n<ul>\n<li><code>a &lt;: b</code></li>\n<li><code>a :&gt; b</code> (same as <code>b &lt;: a</code>)</li>\n<li><code>a == b</code></li>\n</ul>",
        "id": 199550644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130577
    },
    {
        "content": "<p>which one we are enforcing is determined by the ambient variance</p>",
        "id": 199550705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130618
    },
    {
        "content": "<ul>\n<li>covariant == <code>a &lt; :b</code></li>\n<li>contravariant == <code>b &lt;: a</code></li>\n<li>invariant == <code>a == b</code></li>\n</ul>",
        "id": 199550727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130635
    },
    {
        "content": "<p><code>a</code> and <code>b</code> might not be types, so you can kind of extend the concept...e.g. to regions</p>",
        "id": 199550792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130654
    },
    {
        "content": "<p>actually how regions/lifetimes and \"variance\" interact is an itneresting question let me check what the code did :)</p>",
        "id": 199550827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130676
    },
    {
        "content": "<p>but the bottom line is that you are enforcing</p>",
        "id": 199550841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130683
    },
    {
        "content": "<p>one of the following</p>\n<ul>\n<li><code>'a: 'b</code></li>\n<li><code>'b: 'a</code></li>\n<li><code>'a == 'b</code> (which is the same as <code>'a: 'b</code> and <code>'b: 'a</code>)</li>\n</ul>",
        "id": 199550869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130701
    },
    {
        "content": "<p>Yeah, I guess types with possible subtypes is the same as regions with possible subregions</p>",
        "id": 199550881,
        "sender_full_name": "detrumi",
        "timestamp": 1591130705
    },
    {
        "content": "<p>so with lifetimes as they are currently defined in rustc we usually call <code>'a: 'b</code> \"contravariant\", basically, because <code>'a: 'b</code> is kind of <code>'a &gt;= 'b</code></p>",
        "id": 199550920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130730
    },
    {
        "content": "<p>I suspect that's what the code does now</p>",
        "id": 199550932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130736
    },
    {
        "content": "<p>so for example <code>'static: 'x</code> is true for all <code>'x</code> beacuse it is the \"longest lifetime\" (largest)</p>",
        "id": 199550947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130746
    },
    {
        "content": "<p>At some point for types, will it always come down to lifetimes? Or can types be subtypes without lifetimes involved?</p>",
        "id": 199550950,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1591130748
    },
    {
        "content": "<p>(polonius kind of messes with this)</p>",
        "id": 199550960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"218805\">Mark Drobnak</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.2006.2E02.2E2020/near/199550950\">said</a>:</p>\n<blockquote>\n<p>At some point for types, will it always come down to lifetimes? Or can types be subtypes without lifetimes involved?</p>\n</blockquote>\n<p>in rust, it always comes down to lifetimes, though sometimes it comes down to binding of lifetimes and not just relationships of lifetimes</p>",
        "id": 199551031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130776
    },
    {
        "content": "<p>i.e., <code>for&lt;'a, 'b&gt; fn(&amp;'a u32, &amp;'b u32) -&gt; &amp;'a u32</code> and <code>for&lt;'a&gt; fn(&amp;'a u32, &amp;'a u32) -&gt; &amp;'a u32</code> have a relationship</p>",
        "id": 199551117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130816
    },
    {
        "content": "<p>the first one returns its first argment always</p>",
        "id": 199551125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130822
    },
    {
        "content": "<p>(or a static)</p>",
        "id": 199551141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130827
    },
    {
        "content": "<p>the second one returns one of its two arguments</p>",
        "id": 199551146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130830
    },
    {
        "content": "<p>so you can say that the first one is a \"subtype\" of the latter</p>",
        "id": 199551160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130838
    },
    {
        "content": "<p>because any function that returns its first argument is <em>also</em> a function that returns one of its two arguments</p>",
        "id": 199551183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130852
    },
    {
        "content": "<p>(the reverse is not true, clearly)</p>",
        "id": 199551258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130883
    },
    {
        "content": "<p>anyway, so to get back to specifics, to some extent what we would be doing is modifying the unification code to thread a bit of \"variance\" down</p>",
        "id": 199551326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130915
    },
    {
        "content": "<p>or maybe it'd be better to call it \"direction\"</p>",
        "id": 199551341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130921
    },
    {
        "content": "<p>(i.e., I kind of abused an existing enum here in rustc)</p>",
        "id": 199551353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130928
    },
    {
        "content": "<p>Aren't we partially doing borrow checking by introducing all this? Feels like the boundary with polonius is getting fuzzy</p>",
        "id": 199551365,
        "sender_full_name": "detrumi",
        "timestamp": 1591130935
    },
    {
        "content": "<p>nope</p>",
        "id": 199551371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130939
    },
    {
        "content": "<p>we are producing constraints that polonius wants as input</p>",
        "id": 199551379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130945
    },
    {
        "content": "<p>polonius doesn't understand types, it just wants to know things like <code>'a: 'b</code></p>",
        "id": 199551403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130963
    },
    {
        "content": "<p>and we're not failing to solve when the borrows are invalid?</p>",
        "id": 199551427,
        "sender_full_name": "detrumi",
        "timestamp": 1591130979
    },
    {
        "content": "<p>right, the borows etc are not computed (yet)</p>",
        "id": 199551446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591130988
    },
    {
        "content": "<p>ah, so the ordering (of inputs/outputs) avoids that problem. Got it</p>",
        "id": 199551514,
        "sender_full_name": "detrumi",
        "timestamp": 1591131013
    },
    {
        "content": "<p>we are producing the constraints that the borrows must meet -- polonius's (or the existing NLL checker's) job is to figure out if you can satisfy those constraints without violating the other borrow checker rules</p>",
        "id": 199551522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.2006.2E02.2E2020/near/199551326\">said</a>:</p>\n<blockquote>\n<p>anyway, so to get back to specifics, to some extent what we would be doing is modifying the unification code to thread a bit of \"variance\" down</p>\n</blockquote>\n<p>yeah so let's say we have <code>Subtype(T1, T2)</code>, it might invoke the \"TypeRelation\" code with <code>(T1, &lt;:, T2)</code></p>",
        "id": 199551614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131073
    },
    {
        "content": "<p>whereas the existing unification might invoke that code with <code>(T1, ==, T2)</code></p>",
        "id": 199551635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131085
    },
    {
        "content": "<p>(does that notation make sense?)</p>",
        "id": 199551657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131102
    },
    {
        "content": "<p>so what does that mean?</p>",
        "id": 199551764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131136
    },
    {
        "content": "<p>well, for regular types, it doesn't mean too much yet</p>",
        "id": 199551774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131141
    },
    {
        "content": "<p>that is to say</p>",
        "id": 199551786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131147
    },
    {
        "content": "<p>mostly the code is the same until you get to the point where you are relating lifetimes</p>",
        "id": 199551800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131154
    },
    {
        "content": "<p>(I'll get to the point where it's not)</p>",
        "id": 199551829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131166
    },
    {
        "content": "<p>but mostly you're just kidn of propagating that \"direction\" (<code>&lt;:</code>, <code>==</code>, etc) down</p>",
        "id": 199551852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131178
    },
    {
        "content": "<p>when you get to two lifetimes, though, the region constraints we produce will depend on the constraint</p>",
        "id": 199551878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131192
    },
    {
        "content": "<p>so that's why I said the first step is to modify our approach to region constraints</p>",
        "id": 199551893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131200
    },
    {
        "content": "<p>today we only produce equality constraints</p>",
        "id": 199551897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131204
    },
    {
        "content": "<p>So, would we just add a <code>Variance</code> argument to <code>Zip</code>?</p>",
        "id": 199551907,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591131210
    },
    {
        "content": "<p>but if we instead produce 'outlives' constraints (<code>'a: 'b</code>, not <code>'a == 'b</code>)</p>",
        "id": 199551912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131214
    },
    {
        "content": "<p>then we can look at the direction and either produce <code>'a: 'b</code>, <code>'b: 'a</code>, or both</p>",
        "id": 199551939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131231
    },
    {
        "content": "<p>depending on what it is</p>",
        "id": 199551946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.2006.2E02.2E2020/near/199551907\">said</a>:</p>\n<blockquote>\n<p>So, would we just add a <code>Variance</code> argument to <code>Zip</code>?</p>\n</blockquote>\n<p>probably yes. This is not what rustc did, instead it is tracked in a field, but I think the code would be cleaner if it were a parameter. The question is whether the rustc equivalent of <code>Zip</code> (<code>TypeRelation</code>) is used in any context where it doesn't care about ambient variance? I think the answer is actually no, though some of the code is factored in a way as to make it seem like the answer is yes :)</p>",
        "id": 199552074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131283
    },
    {
        "content": "<p>so there are a few twists I didn't get to</p>",
        "id": 199552183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131346
    },
    {
        "content": "<p>but that's the high-level idea</p>",
        "id": 199552191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131351
    },
    {
        "content": "<p>I had never realized that <code>Zip</code> was the equivalent of <code>TypeRelation</code></p>",
        "id": 199552199,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591131354
    },
    {
        "content": "<p>pretty much</p>",
        "id": 199552279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131377
    },
    {
        "content": "<p>I like the name Zip a bit better ;)</p>",
        "id": 199552291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131386
    },
    {
        "content": "<p>in that I think it's kind of clearer what it does (by analogy...)</p>",
        "id": 199552307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131394
    },
    {
        "content": "<p>but you all would be the ones to tell me which is more confusing in real life</p>",
        "id": 199552329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131403
    },
    {
        "content": "<p>I like <code>Zip</code></p>",
        "id": 199552347,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591131411
    },
    {
        "content": "<p>in any case, the main twist I didn't get to is variance</p>",
        "id": 199552378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131430
    },
    {
        "content": "<p>which is basically \"how does the direction change as we walk down the type\"</p>",
        "id": 199552402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131445
    },
    {
        "content": "<p>3 minute summary?</p>",
        "id": 199552404,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591131445
    },
    {
        "content": "<p>heh that's probably the \"summary\" part</p>",
        "id": 199552424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131458
    },
    {
        "content": "<p>lol</p>",
        "id": 199552441,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591131464
    },
    {
        "content": "<p>I guess I'll try this</p>",
        "id": 199552452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131473
    },
    {
        "content": "<p>consider <code>fn(T1) &lt;: fn(T2)</code></p>",
        "id": 199552515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131488
    },
    {
        "content": "<p>i.e., we have a function that takes T1 values</p>",
        "id": 199552531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131495
    },
    {
        "content": "<p>and a function taht takes T2 values</p>",
        "id": 199552539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131500
    },
    {
        "content": "<p>if T1 &lt;: T2, so every T1 is a T2,</p>",
        "id": 199552564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131512
    },
    {
        "content": "<p>then is fn(T1) &lt;: fn(T2)?</p>",
        "id": 199552591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131521
    },
    {
        "content": "<p>the answer is no</p>",
        "id": 199552592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131522
    },
    {
        "content": "<p>basically because every function that takes T2 values is also a function that takes T1 values</p>",
        "id": 199552674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131555
    },
    {
        "content": "<p>since every T1 value is a T2 value</p>",
        "id": 199552683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131560
    },
    {
        "content": "<p>therefore the correct relation is <code>fn(T2) &lt;: fn(T1)</code></p>",
        "id": 199552703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131569
    },
    {
        "content": "<p>note the reverse in direction</p>",
        "id": 199552711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131574
    },
    {
        "content": "<p>this is called \"contravariance\"</p>",
        "id": 199552720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131579
    },
    {
        "content": "<p>and I feel like my choice of names (T1, T2) or the way I approached the topic did not make it particularly clear ;)</p>",
        "id": 199552762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131596
    },
    {
        "content": "<p>but basically what I'm trying to say is that when you are relating <code>fn(A)</code> and <code>fn(B)</code>, you will need to recursively relate <code>A</code> and <code>B</code>, but the direction switches (beacuse function parameters are \"contra\" variant)</p>",
        "id": 199552884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131634
    },
    {
        "content": "<p>i.e., contra == against, the direction changes</p>",
        "id": 199552898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131639
    },
    {
        "content": "<p>co == with, so if things are <em>covariant</em> the direction stays the same</p>",
        "id": 199552924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131649
    },
    {
        "content": "<p>invariant == they must be equal, diretion changes to equality</p>",
        "id": 199552953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131660
    },
    {
        "content": "<p>so anyway the bottom line is that when you are zipping \"component types\" of some type T you have to alter the direction based on the variance of that component with respect to T</p>",
        "id": 199553068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131704
    },
    {
        "content": "<p>let me just point you to how that looks in the rustc code and make it's clearer</p>",
        "id": 199553105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131718
    },
    {
        "content": "<p>I know we're a bit past time</p>",
        "id": 199553199,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591131740
    },
    {
        "content": "<p>But, do we have to keep track of those switches in Chalk</p>",
        "id": 199553224,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591131751
    },
    {
        "content": "<p>yes, there is going to have to be a <code>RustIrDatabase</code> callback</p>",
        "id": 199553283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131770
    },
    {
        "content": "<p>because for things like structs or ADTs</p>",
        "id": 199553318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131777
    },
    {
        "content": "<p>we infer the variance and chalk will have to ask for it</p>",
        "id": 199553335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131783
    },
    {
        "content": "<p>i.e., <code>Vec</code> is covariant with respect to its type parameter, so if you have <code>Vec&lt;T&gt;</code> related to <code>Vec&lt;U&gt;</code>, you keep the direction unchanged when you zip <code>T</code> and <code>U</code></p>",
        "id": 199553401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131815
    },
    {
        "content": "<p>but <code>Cell</code> is invariant, so there we would change direction to <code>==</code></p>",
        "id": 199553430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131825
    },
    {
        "content": "<p>here is <a href=\"https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src/librustc_middle/ty/relate.rs#L144-L147\">code from rustc that handles the case of ADTs</a></p>",
        "id": 199553514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131848
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/db98d32ea04438cf759b749d5cbeba4f77222664/src/librustc_middle/ty/relate.rs#L185\">this code handles function arguments</a></p>",
        "id": 199553569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131867
    },
    {
        "content": "<p>huh, didn't think that variance would be inferred. interesting</p>",
        "id": 199553596,
        "sender_full_name": "detrumi",
        "timestamp": 1591131878
    },
    {
        "content": "<p>interesting quirk of rust for you</p>",
        "id": 199553619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131889
    },
    {
        "content": "<p>gotta run hope that helped some</p>",
        "id": 199553680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131911
    },
    {
        "content": "<p>maybe we can add a link to this from <a href=\"https://github.com/rust-lang-nursery/chalk/issues/418\">chalk#418</a></p>",
        "id": 199553701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131918
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 199553712,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591131921
    },
    {
        "content": "<p>Yeah, I can add a link</p>",
        "id": 199553727,
        "sender_full_name": "Jack Huey",
        "timestamp": 1591131928
    },
    {
        "content": "<p>(happy to dive in more detail later)</p>",
        "id": 199553748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591131934
    },
    {
        "content": "<p>I know that C# for example allows you to annotate variance if it can't be inferred, I guess that's not relevant for Rust?</p>",
        "id": 199553891,
        "sender_full_name": "detrumi",
        "timestamp": 1591131980
    },
    {
        "content": "<p>we don't allow it, we could</p>",
        "id": 199554069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1591132061
    }
]