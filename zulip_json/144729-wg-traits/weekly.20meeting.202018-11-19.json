[
    {
        "content": "<p><span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span> <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-compiler-traits</span></p>",
        "id": 147986009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654091
    },
    {
        "content": "<p>Some quick notes:</p>\n<ul>\n<li>This is Thanksgiving week in the US, which means that Thu-Fri many of us (including me) won't be around.</li>\n<li>It's also the week of a \"self-imposed\" deadline on Rust 2018 beta backports and things, which has kind of kept me busy. I'm running a bit behind on reviews (<em>cough</em> sorry <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> <em>cough</em>).</li>\n<li>The good news (from my POV) is that, theoretically, after Thanksgiving, there'll be a lot less to do.</li>\n</ul>",
        "id": 147986112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654175
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/WG-Traits-Planning-Meeting-oDfr6ct8xx63HSAOOmIZX#:uid=463067912981955114240329&amp;h2=2018.04.09\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/WG-Traits-Planning-Meeting-oDfr6ct8xx63HSAOOmIZX#:uid=463067912981955114240329&amp;h2=2018.04.09\">Planning meeting document</a></p>",
        "id": 147986127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654191
    },
    {
        "content": "<p>PS <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> I see you r+'d <a href=\"https://github.com/rust-lang/rust/issues/55517\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55517\">#55517</a> — thanks =) I was thinking in the meantime that maybe I should add something to try and give a \"This behavior recently changed\" note on the new coherence errors</p>",
        "id": 147986413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes seems good</p>",
        "id": 147986527,
        "sender_full_name": "scalexm",
        "timestamp": 1542654529
    },
    {
        "content": "<p>I'm not 100% sure how to do that :)</p>",
        "id": 147986535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654537
    },
    {
        "content": "<p>I guess I could probably skim over the pending region obligations</p>",
        "id": 147986554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654553
    },
    {
        "content": "<p>(which we just drop on the floor presently)</p>",
        "id": 147986559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654562
    },
    {
        "content": "<p>and look for any that involve a placeholder</p>",
        "id": 147986564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>, btw, you around? I wanted to sync up with you at some point</p>",
        "id": 147986579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654580
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> in terms of \"how to actually integrate\"</p>",
        "id": 147986670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654644
    },
    {
        "content": "<p>how's that going?</p>",
        "id": 147986673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think I'm going to hit some coherence problems actually</p>",
        "id": 147986693,
        "sender_full_name": "scalexm",
        "timestamp": 1542654668
    },
    {
        "content": "<p>because the <code>TraitEngine</code> trait is defined in <code>librustc</code>, and the chalk types are defined in <code>librustc_traits</code></p>",
        "id": 147986714,
        "sender_full_name": "scalexm",
        "timestamp": 1542654698
    },
    {
        "content": "<p>bah</p>",
        "id": 147986726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654714
    },
    {
        "content": "<p>we <em>could</em> just move them</p>",
        "id": 147986729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654717
    },
    {
        "content": "<p>or we can do the \"bridge trick\" I guess</p>",
        "id": 147986790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654736
    },
    {
        "content": "<p>well, I'm not sure I know what the problem is yet</p>",
        "id": 147986797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654745
    },
    {
        "content": "<p>ok so I have some additional questions for that work anyway :p</p>",
        "id": 147986829,
        "sender_full_name": "scalexm",
        "timestamp": 1542654777
    },
    {
        "content": "<p>carry on :)</p>",
        "id": 147986862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654810
    },
    {
        "content": "<p>I've had some personal stuff come up in the past couple weeks, and it's been eating all of my free-time and brain space. If someone needs to steal  <a href=\"https://github.com/rust-lang/rust/issues/55097\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55097\">#55097</a> to make progress, that's totally great. If I manage to get back to it before then, also great. I am not worried about finding more things to work on... :)</p>",
        "id": 147986951,
        "sender_full_name": "Josh Huber",
        "timestamp": 1542654894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120512\">@uberjay</span> thanks for mentioning :)</p>",
        "id": 147986973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542654909
    },
    {
        "content": "<p>well basically this is about how long the <code>ChalkContext</code> will live</p>",
        "id": 147986976,
        "sender_full_name": "scalexm",
        "timestamp": 1542654913
    },
    {
        "content": "<p>since it carries a <code>TyCtxt&lt;'cx, 'gcx, 'gcx&gt;</code>, I guess it will live only as long as a call to e.g. <code>TraitEngine::select_all_or_error</code>?</p>",
        "id": 147987001,
        "sender_full_name": "scalexm",
        "timestamp": 1542654950
    },
    {
        "content": "<p>presumably</p>",
        "id": 147987112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655056
    },
    {
        "content": "<p>this is at least how I imagined it <em>initially</em></p>",
        "id": 147987128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655076
    },
    {
        "content": "<p>but I guess longer term we would like it to persist</p>",
        "id": 147987163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655083
    },
    {
        "content": "<p>so we can leverage the tables for caching</p>",
        "id": 147987184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655089
    },
    {
        "content": "<p>TBH, I hadn't really planned this part out precisely. I considered either creating a \"global\" <code>ChalkContext</code>, or maybe trying to factor out the persistent part ...</p>",
        "id": 147987232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655160
    },
    {
        "content": "<p>I guess refactor such that it doesn't need to carry a <code>TyCtxt</code></p>",
        "id": 147987242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655175
    },
    {
        "content": "<p>on rustc guide stuff, I just need to set a date to knock out a bunch of the smaller tasks</p>",
        "id": 147987385,
        "sender_full_name": "tmandry",
        "timestamp": 1542655266
    },
    {
        "content": "<p>but I think I figured that for the first version we'd just recreate context all the time</p>",
        "id": 147987389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655269
    },
    {
        "content": "<p>I have interviews going on, so not sure when exactly it will happen, but it will :D</p>",
        "id": 147987399,
        "sender_full_name": "tmandry",
        "timestamp": 1542655284
    },
    {
        "content": "<p>also on the guide, I am thinking more about how to _reduce dependence_ between sections</p>",
        "id": 147987470,
        "sender_full_name": "tmandry",
        "timestamp": 1542655331
    },
    {
        "content": "<p>i.e. it would be great if you could go to a random section in the traits chapter, and the beginning introduces the problem enough to where you can understand it with minimal context</p>",
        "id": 147987507,
        "sender_full_name": "tmandry",
        "timestamp": 1542655377
    },
    {
        "content": "<p>yeah, that can be a challenge</p>",
        "id": 147987541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655414
    },
    {
        "content": "<p>I'm not sure how feasible it is, but my feeling is that it would make it dramatically easier to get started / pick things up after awhile</p>",
        "id": 147987543,
        "sender_full_name": "tmandry",
        "timestamp": 1542655416
    },
    {
        "content": "<p>anyway, something to be thinking about perhaps</p>",
        "id": 147987649,
        "sender_full_name": "tmandry",
        "timestamp": 1542655486
    },
    {
        "content": "<p>I'm not too worried about \"adding noise\" for everyone who already knows it, because you can just skim the intro and it gives you a slight confidence boost for the rest of the section :)</p>",
        "id": 147987656,
        "sender_full_name": "tmandry",
        "timestamp": 1542655492
    },
    {
        "content": "<p>yeah</p>",
        "id": 147987687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655520
    },
    {
        "content": "<p>I think that's a really good point</p>",
        "id": 147987692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655524
    },
    {
        "content": "<p>at minimum, if we can kind of \"chart out\" the things you need to read</p>",
        "id": 147987708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655536
    },
    {
        "content": "<p>i.e., provide a few links to a the most important places</p>",
        "id": 147987715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655541
    },
    {
        "content": "<p>vs just assuming you've read everything</p>",
        "id": 147987717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok so second thing I'm not sure to understand is when you currently call <code>tcx.param_env(def_id)</code> where <code>def_id</code> refers to a function say <code>fn foo&lt;'a, T&gt;() where T: 'a</code>, in the <code>ParamEnv</code> you get as a result, the <code>'a</code> lifetime is referred to with an <code>ReEarlyBound</code> right?</p>",
        "id": 147987783,
        "sender_full_name": "scalexm",
        "timestamp": 1542655580
    },
    {
        "content": "<p>yeah, that helps. but if we are linking to several blog-post-length sections, it can be intimidating :)</p>",
        "id": 147987803,
        "sender_full_name": "tmandry",
        "timestamp": 1542655610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> yes that is correct</p>",
        "id": 147987820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655626
    },
    {
        "content": "<p>more generally, there are a set of early-bound things (which include all types)</p>",
        "id": 147987827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655635
    },
    {
        "content": "<p>those are identified by the <code>generics_of(def_id)</code></p>",
        "id": 147987832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655644
    },
    {
        "content": "<p>ok but then in <code>typeck_tables_of</code> the code first gets the <code>param_env</code> for the fn with def-if <code>def_id</code> and signature <code>fn_sig</code>, and then calls <code>tcx.liberate_late_bound_regions(def_id, &amp;fn_sig);</code></p>",
        "id": 147987920,
        "sender_full_name": "scalexm",
        "timestamp": 1542655700
    },
    {
        "content": "<p>so what I don't understand it that there seems to be <code>ReEarlyBound</code> regions in the <code>param_env</code>, but <code>ReFree</code> regions in the <code>fn_sig</code></p>",
        "id": 147987947,
        "sender_full_name": "scalexm",
        "timestamp": 1542655729
    },
    {
        "content": "<p>right</p>",
        "id": 147987986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655762
    },
    {
        "content": "<p>so</p>",
        "id": 147987998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655773
    },
    {
        "content": "<p>I actually forget if we changed this, I guess not</p>",
        "id": 147988007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655785
    },
    {
        "content": "<p>let me quickly review the code :)</p>",
        "id": 147988019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655793
    },
    {
        "content": "<p>ok so</p>",
        "id": 147988099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655821
    },
    {
        "content": "<p>we have this split (iirc)</p>",
        "id": 147988114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655829
    },
    {
        "content": "<p>early-bound things (types, regions) we don't change, we just know from context</p>",
        "id": 147988125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655839
    },
    {
        "content": "<p>if something is bound or not</p>",
        "id": 147988130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655841
    },
    {
        "content": "<p>basically, when we first access a term (e.g., the signature), it contains references to early-bound things in it (<code>ReEarlyBound</code>, <code>TyParam</code>). If those should be instantiated existentially, then the first thing we do is to substitute</p>",
        "id": 147988183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655887
    },
    {
        "content": "<p>when otoh we are type-checking the function (or impl, whatever), we leave them in place</p>",
        "id": 147988201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655900
    },
    {
        "content": "<p>and then they are treated as placeholders</p>",
        "id": 147988209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655905
    },
    {
        "content": "<p>does that sound right so far, <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> ?</p>",
        "id": 147988217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes that sounds right</p>",
        "id": 147988268,
        "sender_full_name": "scalexm",
        "timestamp": 1542655929
    },
    {
        "content": "<p>otoh, for late-bound things, we sort of do the opposite :)</p>",
        "id": 147988272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655933
    },
    {
        "content": "<p>they are stored in \"bound form\"</p>",
        "id": 147988277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655940
    },
    {
        "content": "<p>so when you reference, you get back a <code>Binder&lt;Term&gt;</code>, which you can just use \"as is\"</p>",
        "id": 147988292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655960
    },
    {
        "content": "<p>but when you want to type-check the fn, we invoke <code>liberate_late_bound_regions</code>, which basically replaces the bound regions with placeholders (making them \"free\", in some sense -- \"liberating\" them)</p>",
        "id": 147988313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542655984
    },
    {
        "content": "<p>they are free in the sense that they are not bound in the term, anyway</p>",
        "id": 147988325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656001
    },
    {
        "content": "<p>I'm not wild about this scheme, but it reflects the \"essence\" of the early- vs late-bound distinction:</p>",
        "id": 147988407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656044
    },
    {
        "content": "<p>early-bound things are always fully instantiated when you reference something, so they never appear bound in a type</p>",
        "id": 147988433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656070
    },
    {
        "content": "<p>but late-bound things <em>do</em> appear bound in the resulting type, and are instantiated later (e.g., at the point of calling a function)</p>",
        "id": 147988440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656087
    },
    {
        "content": "<p>mmh ok so if I have a function say</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">...;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>then the type of <code>x</code> as seen from inside the body of <code>foo</code> will use an <code>ReEarlyBound</code>?</p>",
        "id": 147988511,
        "sender_full_name": "scalexm",
        "timestamp": 1542656155
    },
    {
        "content": "<p>I mean during typecheck</p>",
        "id": 147988516,
        "sender_full_name": "scalexm",
        "timestamp": 1542656161
    },
    {
        "content": "<p>well</p>",
        "id": 147988610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656219
    },
    {
        "content": "<p>that particular example is I <em>think</em> going to be late-bound</p>",
        "id": 147988625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656226
    },
    {
        "content": "<p>let me give you a canonical example :)</p>",
        "id": 147988630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656231
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;early</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;late</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;late</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;early</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;late</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Bar</span>: <span class=\"nc\">SomeTrait</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;early</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 147988664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656260
    },
    {
        "content": "<p>in this case, <code>'early</code> will (in typeck) be represented by an <code>ReEarlyBound</code></p>",
        "id": 147988675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656272
    },
    {
        "content": "<p><code>fn_sig(foo)</code> will give back a <code>Binder&lt;FnSig&gt;</code>, where the <code>FnSig</code> references <code>'early</code>  represented using an <code>ReEarlyBound</code>, but references <code>'late</code> with a debruijn depth of <code>INNERMOST</code></p>",
        "id": 147988755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656336
    },
    {
        "content": "<p>when type-checking the body then, the <code>ReBound</code> for <code>'late</code> would be converted to a <code>ReFree</code></p>",
        "id": 147988773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656348
    },
    {
        "content": "<p>The rule for what is early vs late is something like this: we prefer late, but we use early if:</p>\n<ul>\n<li>the region appears in the return type but not a parameter</li>\n<li>or, the region is referenced in a where clause</li>\n</ul>",
        "id": 147988854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656406
    },
    {
        "content": "<p>relevant docs for those trying to follow along.. <a href=\"https://rust-lang-nursery.github.io/rustc-guide/appendix/background.html#free-vs-bound\" target=\"_blank\" title=\"https://rust-lang-nursery.github.io/rustc-guide/appendix/background.html#free-vs-bound\">free-vs-bound</a>, <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/enum.RegionKind.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/enum.RegionKind.html\">RegionKind (early vs late bound)</a>, <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.Binder.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.Binder.html\">Binder</a>, <a href=\"https://rust-lang-nursery.github.io/chalk/doc/chalk_engine/context/trait.Context.html\" target=\"_blank\" title=\"https://rust-lang-nursery.github.io/chalk/doc/chalk_engine/context/trait.Context.html\">chalk Context</a> :)</p>",
        "id": 147988862,
        "sender_full_name": "tmandry",
        "timestamp": 1542656416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok I see, then why couldn't we just eagerly replace all parameter regions with placeholders or something during typeck?</p>",
        "id": 147988928,
        "sender_full_name": "scalexm",
        "timestamp": 1542656488
    },
    {
        "content": "<p>one way to think about it is, if you were to write a </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;early</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;late</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"o\">&lt;</span><span class=\"n\">ArgumentTypes</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SomeFunctionType</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">WC</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">...;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>would the <code>'early</code> have to be appear in the <code>SomeFunctionType</code> for this to be legal?</p>",
        "id": 147988934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656495
    },
    {
        "content": "<p>(if so, it is early)</p>",
        "id": 147988945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> we actually used to do that, we used to use <code>ReFree</code> for <em>all</em> regions</p>",
        "id": 147989024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656529
    },
    {
        "content": "<p>it was effectively a U0 \"placeholder\", in this role</p>",
        "id": 147989043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> refactored it some time back</p>",
        "id": 147989049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656552
    },
    {
        "content": "<p>I'd like to eventually move <em>back</em> to that scheme, but treating types + regions analogously</p>",
        "id": 147989052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656562
    },
    {
        "content": "<p>it seems that now that we have <code>Placeholder</code> types we could do that</p>",
        "id": 147989090,
        "sender_full_name": "scalexm",
        "timestamp": 1542656596
    },
    {
        "content": "<p>yeah, plausibly</p>",
        "id": 147989100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656606
    },
    {
        "content": "<p>it'd be good to revisit the PR where <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> made the change</p>",
        "id": 147989122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656618
    },
    {
        "content": "<p>to try and remember the motivations</p>",
        "id": 147989138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656621
    },
    {
        "content": "<p>there might be some runtime cost</p>",
        "id": 147989147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656631
    },
    {
        "content": "<p>er, compile-time</p>",
        "id": 147989149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656634
    },
    {
        "content": "<p>from doing more substitutions etc</p>",
        "id": 147989150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656637
    },
    {
        "content": "<p>(in my <code>environment</code> query which returns a <code>traits::Environment</code>, the <code>traits::Environment</code> just refers to <code>BoundVar</code> things so that we could substitute them with anything we want)</p>",
        "id": 147989191,
        "sender_full_name": "scalexm",
        "timestamp": 1542656644
    },
    {
        "content": "<p>(in general, I am not super happy with the whole early vs late distinction; though removing it altogether is not entirely backwards compatible)</p>",
        "id": 147989208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656663
    },
    {
        "content": "<p>(but maybe something we could get away with)</p>",
        "id": 147989217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656670
    },
    {
        "content": "<p>in short, once we have higher-ranked trait-bounds over types, everything could plausibly become late-bound</p>",
        "id": 147989251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656698
    },
    {
        "content": "<p>(er, is this true...maybe not...)</p>",
        "id": 147989268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656710
    },
    {
        "content": "<p>that may not be true actually :)</p>",
        "id": 147989293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656732
    },
    {
        "content": "<p>e.g., <code>fn foo&lt;'a&gt;() -&gt; &amp;'a usize</code>, I believe this cannot be late-bound -- if you go back to my impl, it would be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>which is illegal. The <code>'a</code> must be \"constrained\" by <em>some</em> input type to the trait</p>",
        "id": 147989395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656778
    },
    {
        "content": "<p>otherwise, you could \"project\" <code>&lt;Foo as Fn&gt;::Output</code> to different types each time</p>",
        "id": 147989420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656804
    },
    {
        "content": "<p>(does that make sense? I'm not sure if that impl analogy is clear to others :)</p>",
        "id": 147989452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656821
    },
    {
        "content": "<p>it makes sense to me at least</p>",
        "id": 147989473,
        "sender_full_name": "scalexm",
        "timestamp": 1542656835
    },
    {
        "content": "<p><em>anyway</em> I'd still think we might be able to erase the distinction in some sense, such that they are treated more analogously. i.e., there is one set of parameters (as you would have on the impl...) but only some of them are \"constrained\" to be part of the resulting self type, and hence cannot be higher-ranked</p>",
        "id": 147989579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656898
    },
    {
        "content": "<p>I haven't really thought hard about this</p>",
        "id": 147989595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656913
    },
    {
        "content": "<p>well I guess you could imagine that the resulting type of a function has <em>all</em> its parameters</p>",
        "id": 147989622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656939
    },
    {
        "content": "<p>but maybe has a <code>for</code> binder in it</p>",
        "id": 147989630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656944
    },
    {
        "content": "<p>anyway</p>",
        "id": 147989648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656952
    },
    {
        "content": "<p>way far afield</p>",
        "id": 147989653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656955
    },
    {
        "content": "<p>tl;dr I think <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> there is room to represent things better, but that's how it works today...</p>",
        "id": 147989682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542656972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ok then I think I won't try to do anything clever for now and just use the same lifetimes in <code>traits::Environment</code> as it would be in the <code>ty::ParamEnv</code> analog</p>",
        "id": 147989811,
        "sender_full_name": "scalexm",
        "timestamp": 1542657034
    },
    {
        "content": "<p>seems good</p>",
        "id": 147989844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542657054
    },
    {
        "content": "<p>gotta run to another meeting :)</p>",
        "id": 147990025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542657175
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span></p>",
        "id": 147991259,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542658139
    },
    {
        "content": "<p>how's your work going? started on serious integration of chalk stuff yet?</p>",
        "id": 147991293,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542658156
    },
    {
        "content": "<p>ooh, I see in the notes you've been doing some work on that on your local branch :-)</p>",
        "id": 147992228,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542658956
    },
    {
        "content": "<p>super</p>",
        "id": 147992230,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542658958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> gone for the day?</p>",
        "id": 147995821,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542662159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let me know when you're around for a catch-up</p>",
        "id": 148048972,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1542729773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if you are looking for someone to continue the work on <a href=\"https://github.com/rust-lang/rust/issues/55097\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55097\">#55097</a>, I'm available <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
        "id": 148059855,
        "sender_full_name": "DPC",
        "timestamp": 1542740779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> go for it! Unless <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> has already done it</p>",
        "id": 148060010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542740920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> yeah I’ve done it in a local branch :p</p>",
        "id": 148060079,
        "sender_full_name": "scalexm",
        "timestamp": 1542741001
    },
    {
        "content": "<p>Ah no problems</p>",
        "id": 148065599,
        "sender_full_name": "DPC",
        "timestamp": 1542745745
    }
]