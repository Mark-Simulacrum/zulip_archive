[
    {
        "content": "<p>About 10 minutes until meeting time.<br>\nPotential topics:</p>\n<ul>\n<li>Sync up/progress</li>\n<li>rustc integration</li>\n<li><code>Sized</code> traits</li>\n<li>recursive solver</li>\n<li>Problems with <code>any_future_answer</code>/<code>MayInvalidate</code> (<a href=\"https://github.com/rust-lang/chalk/pull/331\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/331\">https://github.com/rust-lang/chalk/pull/331</a>)</li>\n</ul>",
        "id": 189060154,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582664044
    },
    {
        "content": "<p>Anything else?</p>",
        "id": 189060158,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582664047
    },
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span>. Meeting time (Pretty sure...). Who's around?</p>",
        "id": 189060684,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582664439
    },
    {
        "content": "<p>Oh, no <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 189060727,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582664488
    },
    {
        "content": "<p>Meeting time should be right (shifts for me an hour in 2 weeks because of summer time, so I keep checking)</p>",
        "id": 189060817,
        "sender_full_name": "detrumi",
        "timestamp": 1582664547
    },
    {
        "content": "<p>Right</p>",
        "id": 189060843,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582664567
    },
    {
        "content": "<p>I think this is the first meeting at the new time?</p>",
        "id": 189060846,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582664573
    },
    {
        "content": "<p>oh, no</p>",
        "id": 189060863,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582664585
    },
    {
        "content": "<p>I'm here</p>",
        "id": 189060868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664587
    },
    {
        "content": "<p>My internet was malfunctioning</p>",
        "id": 189060874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664594
    },
    {
        "content": "<p>I think the thing I would add to the agenda</p>",
        "id": 189060909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664621
    },
    {
        "content": "<p>or maybe it is \"sync up\"</p>",
        "id": 189060912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664627
    },
    {
        "content": "<p>is that I think we haven't 100% clarified the sprint goals so to speak</p>",
        "id": 189060958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664642
    },
    {
        "content": "<p>Ah yeah, that's a good point</p>",
        "id": 189060985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582664654
    },
    {
        "content": "<p>I was hoping to have a nice tidy list of issues next to my name</p>",
        "id": 189060989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664659
    },
    {
        "content": "<p>but somehow that didn't happen yesterday</p>",
        "id": 189060993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664665
    },
    {
        "content": "<p>So, who all is \"working on\" the sprint right now?</p>",
        "id": 189061051,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582664716
    },
    {
        "content": "<p>Heh, a good question</p>",
        "id": 189061078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664741
    },
    {
        "content": "<p>Me, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>(?), <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span>, <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>, <span class=\"user-mention\" data-user-id=\"198819\">@David Barsky</span>(?)</p>",
        "id": 189061079,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582664741
    },
    {
        "content": "<p>it seems like <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span></p>",
        "id": 189061084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664743
    },
    {
        "content": "<p>I wanted to sync a bit with <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> in terms of what they are doing (impl trait?)</p>",
        "id": 189061107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664762
    },
    {
        "content": "<p>I am not sure whether <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> wound up doing anything</p>",
        "id": 189061144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664769
    },
    {
        "content": "<p>but maybe the start is to list out the things that we have each done?</p>",
        "id": 189061148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664775
    },
    {
        "content": "<p>here</p>",
        "id": 189061152,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582664779
    },
    {
        "content": "<p>Yeah, I got a bit further with impl trait, but I'm not sure how to continue at the moment</p>",
        "id": 189061169,
        "sender_full_name": "detrumi",
        "timestamp": 1582664798
    },
    {
        "content": "<p>Things Niko did on Monday:</p>\n<ul>\n<li>started poking at debruijn indices in chalk</li>\n<li>worked a bit more on the wg-traits skill-tree, I wanted to add statuses and refine a few things</li>\n<li>worked with <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> on introducing <code>&amp;self</code> for interner methods</li>\n<li>wrote the recursive solver write-up</li>\n</ul>",
        "id": 189061234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664836
    },
    {
        "content": "<p>Not necessarily part of the sprint, but I need to get around to addressing review for engine book. Working on integrating chalk-solve into rustc. And making what I have integrated less hacky</p>",
        "id": 189061247,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582664849
    },
    {
        "content": "<p>Ok all I saw was \"wrote the recursive solver\" and my jaw half dropped</p>",
        "id": 189061314,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582664885
    },
    {
        "content": "<p>lol not quite</p>",
        "id": 189061325,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664895
    },
    {
        "content": "<p>though I actually think it wouldn't take me that long</p>",
        "id": 189061338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664901
    },
    {
        "content": "<p>er</p>",
        "id": 189061392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664949
    },
    {
        "content": "<p>to get an initial prototype, I meant to add :)</p>",
        "id": 189061398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189061169\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189061169\">said</a>:</p>\n<blockquote>\n<p>Yeah, I got a bit further with impl trait, but I'm not sure how to continue at the moment</p>\n</blockquote>\n<p>Do you maybe want to explain a bit about what you've done and what you're stuck on?</p>",
        "id": 189061403,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582664957
    },
    {
        "content": "<p>but the Zulip app logged me out in the middle of typing :P</p>",
        "id": 189061415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582664964
    },
    {
        "content": "<p>Sure</p>",
        "id": 189061419,
        "sender_full_name": "detrumi",
        "timestamp": 1582664968
    },
    {
        "content": "<p>So I'm trying to get this test working:</p>\n<div class=\"codehilite\"><pre><span></span>program {\n    trait Trait { }\n    struct Ty { }\n    impl Trait for Ty { }\n\n    opaque type T: Trait = Ty;\n}\n\ngoal {\n    T: Trait\n} yields {\n    &quot;Unique; substitution []&quot;\n}\n</pre></div>",
        "id": 189061437,
        "sender_full_name": "detrumi",
        "timestamp": 1582664983
    },
    {
        "content": "<p>I've got most things in place, but I'm confused about how to create the goal</p>",
        "id": 189061514,
        "sender_full_name": "detrumi",
        "timestamp": 1582665014
    },
    {
        "content": "<p>yeah so <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> I think we need to talk out the high-level architecture of <code>opaque type</code></p>",
        "id": 189061519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665018
    },
    {
        "content": "<p>ah well I see that this includes some of the ideas I was thinking, i.e. that we have to specify for now the private type</p>",
        "id": 189061551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665038
    },
    {
        "content": "<p>I think it should be a <code>TraitRef</code>, but that takes a <code>TraitId</code> instead of an <code>ImplTraitId</code> (placeholder for <code>T</code>)</p>",
        "id": 189061594,
        "sender_full_name": "detrumi",
        "timestamp": 1582665087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189061514\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189061514\">said</a>:</p>\n<blockquote>\n<p>I've got most things in place, but I'm confused about how to create the goal</p>\n</blockquote>\n<p>which goal are you referring to?</p>",
        "id": 189061597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> The <code>T: Trait</code> part</p>",
        "id": 189061623,
        "sender_full_name": "detrumi",
        "timestamp": 1582665106
    },
    {
        "content": "<p>are you saying you're not sure how to represent the type <code>T</code>?</p>",
        "id": 189061699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665134
    },
    {
        "content": "<p>ok ok I see</p>",
        "id": 189061723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665154
    },
    {
        "content": "<p>seems like this is a question of how to adjust chalk-ir then</p>",
        "id": 189061729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665161
    },
    {
        "content": "<p>hmm</p>",
        "id": 189061794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665233
    },
    {
        "content": "<p>The whole <code>TraitRef</code> type is confusing me, but yeah, that might be the case</p>",
        "id": 189061800,
        "sender_full_name": "detrumi",
        "timestamp": 1582665237
    },
    {
        "content": "<p>I was going to say that maybe to start we add a variant to <code>TypeName</code></p>",
        "id": 189061805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665241
    },
    {
        "content": "<p>yeah <code>TraitRef</code> is I think the wrong direction</p>",
        "id": 189061858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665253
    },
    {
        "content": "<p>I did add a variant there</p>",
        "id": 189061873,
        "sender_full_name": "detrumi",
        "timestamp": 1582665265
    },
    {
        "content": "<p>maybe we should dig in in a dedicated topic?</p>",
        "id": 189061920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665282
    },
    {
        "content": "<p>ideally you + I could schedule a time tomorrow to talk about it in more depth or something</p>",
        "id": 189061981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665298
    },
    {
        "content": "<p>Sounds good</p>",
        "id": 189062044,
        "sender_full_name": "detrumi",
        "timestamp": 1582665315
    },
    {
        "content": "<p>So <code>TraitRef</code> is a bit confusing, especially when asking if some type implements another. Really the trait would be <code>Trait</code> and Substitution would be <code>&lt;T&gt;</code>?</p>",
        "id": 189062070,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582665322
    },
    {
        "content": "<p>right ?</p>",
        "id": 189062077,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582665324
    },
    {
        "content": "<p>(reading along!)</p>",
        "id": 189062152,
        "sender_full_name": "David Barsky",
        "timestamp": 1582665358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189062070\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189062070\">said</a>:</p>\n<blockquote>\n<p>So <code>TraitRef</code> is a bit confusing, especially when asking if some type implements another. Really the trait would be <code>Trait</code> and Substitution would be <code>&lt;T&gt;</code>?</p>\n</blockquote>\n<p>That's actually the reverse of what I was thinking of</p>",
        "id": 189062201,
        "sender_full_name": "detrumi",
        "timestamp": 1582665369
    },
    {
        "content": "<p>Anyways, a dedicated topic works for that too</p>",
        "id": 189062204,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582665370
    },
    {
        "content": "<p>A <code>TraitRef</code> is basically a trait + its type parameters, and is used when asking queries like <code>Implemented(&lt;TraitRef&gt;)</code></p>",
        "id": 189062211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665380
    },
    {
        "content": "<p>it's not really used as part of a <em>type</em></p>",
        "id": 189062218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665384
    },
    {
        "content": "<p>except sort of for <code>dyn</code> types, because a <code>dyn</code> type is augmented with a list of bounds</p>",
        "id": 189062231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665401
    },
    {
        "content": "<p>The goal would be <code>Implemented(&lt;TraitRef&gt;)</code> though?</p>",
        "id": 189062257,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582665428
    },
    {
        "content": "<p>Or, is the confusion how to represent <code>T</code> alone?</p>",
        "id": 189062275,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582665442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189062257\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189062257\">said</a>:</p>\n<blockquote>\n<p>The goal would be <code>Implemented(&lt;TraitRef&gt;)</code> though?</p>\n</blockquote>\n<p>I think the goal here would be <code>Implemented(T: Trait)</code>, and the <code>T: Trait</code> is a trait-ref, but we need to settle up the right way to represent <code>T</code>...</p>",
        "id": 189062305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665472
    },
    {
        "content": "<p>I also think it should be the same as how we represent associated types, more or less</p>",
        "id": 189062314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665482
    },
    {
        "content": "<p>though I'm feeling a bit unsure about how we should represent <em>those</em> :)</p>",
        "id": 189062364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665495
    },
    {
        "content": "<p>but the core concept of an unnormalized type + a placeholder is right I think</p>",
        "id": 189062374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665504
    },
    {
        "content": "<p>just not sure literally how I think the variants should be in the <code>Ty</code> enum</p>",
        "id": 189062385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665515
    },
    {
        "content": "<p>right now, the placeholder is part of <code>ApplicationTy</code>, and maybe that's right</p>",
        "id": 189062399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665530
    },
    {
        "content": "<p>See, this goes back to me being confused how <code>Alias</code> can replace <code>Opaque</code></p>",
        "id": 189062436,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582665565
    },
    {
        "content": "<p>I had a branch though where I made the <code>Placeholder</code> variant include both simple generics like the <code>A</code> in <code>fn foo&lt;A&gt;</code> as well as associated type projections like <code>T::Item</code>, which <em>also</em> makes some sense to me, since they are both logically placeholders (i.e., they stand for \"some specific type that we don't know\")</p>",
        "id": 189062440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665570
    },
    {
        "content": "<p>well maybe we can dig into it a bit more :)</p>",
        "id": 189062507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665605
    },
    {
        "content": "<p>in short, an opaque type <strong>is</strong> an alias</p>",
        "id": 189062509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665610
    },
    {
        "content": "<p>Does chalk even need to care about the difference between type projections and impl trait?</p>",
        "id": 189062533,
        "sender_full_name": "detrumi",
        "timestamp": 1582665620
    },
    {
        "content": "<p>yes, but only slightly</p>",
        "id": 189062574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665653
    },
    {
        "content": "<p>it depends on what you mean by \"chalk\" I guess</p>",
        "id": 189062579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665658
    },
    {
        "content": "<p>so, an <em>alias</em> is basically \"a type <code>A</code> that is <em>equivalent</em> to some other type <code>B</code>\"</p>",
        "id": 189062618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665692
    },
    {
        "content": "<p>so <code>&lt;vec::IntoIter&lt;u32&gt; as Iterator&gt;::Item</code> is an <em>alias</em> for <code>u32</code></p>",
        "id": 189062631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665704
    },
    {
        "content": "<p>the thing about aliases, though, is that <em>sometimes</em> you don't know the type <code>B</code></p>",
        "id": 189062694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665725
    },
    {
        "content": "<p>Actually, this makes me think a sort interesting thought</p>",
        "id": 189062696,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582665728
    },
    {
        "content": "<p>you know there <strong>is</strong> a type <code>B</code>, but you don't know what it is</p>",
        "id": 189062698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665730
    },
    {
        "content": "<p>this is when you have placeholders</p>",
        "id": 189062705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665739
    },
    {
        "content": "<p>about projections</p>",
        "id": 189062711,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582665748
    },
    {
        "content": "<p>I guess</p>",
        "id": 189062721,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582665757
    },
    {
        "content": "<p>I guess I just realized that they're the same thing</p>",
        "id": 189062735,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582665768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189062533\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189062533\">said</a>:</p>\n<blockquote>\n<p>Does chalk even need to care about the difference between type projections and impl trait?</p>\n</blockquote>\n<p>to be specific, chalk-solve generates slightly different rules between the two cases</p>",
        "id": 189062739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665776
    },
    {
        "content": "<p>but we sort of are treating them differently</p>",
        "id": 189062743,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582665779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189062735\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189062735\">said</a>:</p>\n<blockquote>\n<p>I guess I just realized that they're the same thing</p>\n</blockquote>\n<p>what is \"they\" in this sentence?</p>",
        "id": 189062767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665802
    },
    {
        "content": "<p>projections and impl Trait, as aliases</p>",
        "id": 189062784,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582665821
    },
    {
        "content": "<p>I guess</p>",
        "id": 189062789,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582665824
    },
    {
        "content": "<p>Why are the rules different?</p>",
        "id": 189062871,
        "sender_full_name": "detrumi",
        "timestamp": 1582665892
    },
    {
        "content": "<p>there are two differences, <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span></p>",
        "id": 189062902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665910
    },
    {
        "content": "<p>first off, opaque types are never normalized until monomorphization time (\"reveal mode\")</p>",
        "id": 189062922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665928
    },
    {
        "content": "<p>secondly, we do permit auto-trait leakage</p>",
        "id": 189062935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582665939
    },
    {
        "content": "<p>so when generating the clauses for <code>Implemented(X: Send)</code></p>",
        "id": 189063171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666105
    },
    {
        "content": "<p>(or any auto-trait)</p>",
        "id": 189063188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666115
    },
    {
        "content": "<p>if <code>X</code> is the <em>placeholder for an opaque type</em></p>",
        "id": 189063196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666123
    },
    {
        "content": "<p>we would treat it differently than the <em>placeholder for an associated type</em></p>",
        "id": 189063203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666134
    },
    {
        "content": "<p>Opaque types generate rules like <code>Implemented(T: Send) :- Implemented(Trait: Send).</code>, don't associated types do the same? Or is this different?</p>",
        "id": 189063205,
        "sender_full_name": "detrumi",
        "timestamp": 1582666134
    },
    {
        "content": "<p>it's worth here distinguishing the unnormalized form (I'll write that as <code>T</code>) from the placeholder form (<code>!T</code>)</p>",
        "id": 189063231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666165
    },
    {
        "content": "<p>if you have <code>opaque type T: Trait = Ty</code></p>",
        "id": 189063258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666195
    },
    {
        "content": "<p>then you would generate rules like</p>\n<p><code>Implemented(!T: Trait).</code></p>\n<p>and</p>\n<p><code>Implemented(!T: Send) :- Implemented(Ty: Send).</code> (for any auto-trait, really)</p>",
        "id": 189063311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666215
    },
    {
        "content": "<p>Okay, but that points to the first difference (normalizing only at monomorphization time)</p>",
        "id": 189063447,
        "sender_full_name": "detrumi",
        "timestamp": 1582666334
    },
    {
        "content": "<p>right, and that shows up in the <code>Normalize</code> rules</p>",
        "id": 189063475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666377
    },
    {
        "content": "<p>we're definitely going deep down the rabbit hole a bit here :)</p>",
        "id": 189063483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666384
    },
    {
        "content": "<p>which is ok</p>",
        "id": 189063489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666388
    },
    {
        "content": "<p>Indeed</p>",
        "id": 189063491,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666390
    },
    {
        "content": "<p>but maybe we should spark up that separate topic and return to the agenda</p>",
        "id": 189063495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666400
    },
    {
        "content": "<p>Let me look at what's on the list</p>",
        "id": 189063515,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666422
    },
    {
        "content": "<p>rustc integration?</p>",
        "id": 189063566,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666443
    },
    {
        "content": "<p>yeah that's a good one to check on</p>",
        "id": 189063614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666494
    },
    {
        "content": "<p>so you did some initial work, I haven't reviewed the PR but I will try to</p>",
        "id": 189063622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666502
    },
    {
        "content": "<p>So, basically, from what I've gathered. There's a couple big \"hurtles\" for integration right now</p>",
        "id": 189063630,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666506
    },
    {
        "content": "<p>First one is the interner, which <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> is working on</p>",
        "id": 189063642,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666521
    },
    {
        "content": "<p>(I've managed to get around it for testing by using a tls with unsafe to change the lifetime, but this is bad, obviously)</p>",
        "id": 189063666,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666556
    },
    {
        "content": "<p>:thumbsup:</p>",
        "id": 189063667,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582666557
    },
    {
        "content": "<p>another thing that's confusing me a bunch, and has been brought up, is the difference in binders and such</p>",
        "id": 189063731,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666579
    },
    {
        "content": "<p>Yes</p>",
        "id": 189063735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666580
    },
    {
        "content": "<p>yea im working on it, gonna get more done today, its just hard because I get stuck if niko or jack aren't around to help me navigate things</p>",
        "id": 189063739,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582666581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189063731\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189063731\">said</a>:</p>\n<blockquote>\n<p>another thing that's confusing me a bunch, and has been brought up, is the difference in binders and such</p>\n</blockquote>\n<p>I'm working on that in a branch</p>",
        "id": 189063749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666588
    },
    {
        "content": "<p>albeit a bit slowly</p>",
        "id": 189063759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666597
    },
    {
        "content": "<p>but both of these are non-trivial things</p>",
        "id": 189063780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666607
    },
    {
        "content": "<p>I guess that for <em>rustc integration</em> we only need <code>&amp;self</code> in intern methods</p>",
        "id": 189063797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666619
    },
    {
        "content": "<p>I wonder if there's a more minimal \"remove chalk from rustc-traits\" PR that we could lang in the interim that wouldn't stand in the way of further integration</p>",
        "id": 189063840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666644
    },
    {
        "content": "<p>yeah, I mean just remove any <code>chalk-engine</code> code</p>",
        "id": 189063888,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666682
    },
    {
        "content": "<p>(but like I said, if the full removal lands in master, it's easy enough to revert that in the PR)</p>",
        "id": 189063989,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666740
    },
    {
        "content": "<p>Another hurtle  is <code>Sized</code></p>",
        "id": 189064002,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666752
    },
    {
        "content": "<p>Particularly, we have to generate a <code>T: Sized</code> implementation <em>somewhere</em></p>",
        "id": 189064028,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189063888\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189063888\">said</a>:</p>\n<blockquote>\n<p>yeah, I mean just remove any <code>chalk-engine</code> code</p>\n</blockquote>\n<p>right, this</p>",
        "id": 189064118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189064028\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189064028\">said</a>:</p>\n<blockquote>\n<p>Particularly, we have to generate a <code>T: Sized</code> implementation <em>somewhere</em></p>\n</blockquote>\n<p>yes, and I think <code>chalk-solve</code> is the right place</p>",
        "id": 189064128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666839
    },
    {
        "content": "<p>but as far as I can tell, we have to know the struct and trait (which is obviously <code>Sized</code> here) together</p>",
        "id": 189064136,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666849
    },
    {
        "content": "<p>right</p>",
        "id": 189064145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666856
    },
    {
        "content": "<p>but the only place in the current <code>RustIrDatabase</code> that you have a trait and struct together is <code>impl_provided_for</code></p>",
        "id": 189064188,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666897
    },
    {
        "content": "<p>which, if false, <code>chalk-solve</code> will generate that impl</p>",
        "id": 189064211,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666913
    },
    {
        "content": "<p>But</p>",
        "id": 189064292,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666951
    },
    {
        "content": "<p>so your comparison to auto traits was apt in that</p>",
        "id": 189064297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666955
    },
    {
        "content": "<p>I think that the place where we generate auto trait impls</p>",
        "id": 189064302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666960
    },
    {
        "content": "<p>that is used for auto-traits only</p>",
        "id": 189064304,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666960
    },
    {
        "content": "<p>yes</p>",
        "id": 189064308,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666965
    },
    {
        "content": "<p>is the same place roughly we should generate sized impls</p>",
        "id": 189064309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666969
    },
    {
        "content": "<p>exactly</p>",
        "id": 189064317,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666977
    },
    {
        "content": "<p>and indeed maybe they share code in chalk-solve for convenience</p>",
        "id": 189064328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666982
    },
    {
        "content": "<p>which is what I was saying in the other thread</p>",
        "id": 189064338,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666986
    },
    {
        "content": "<p>it's just that there isn't a \"deeper\" connection between them</p>",
        "id": 189064351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666989
    },
    {
        "content": "<p>right</p>",
        "id": 189064357,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582666995
    },
    {
        "content": "<p>yeah, sorry, maybe I misunderstood a bit</p>",
        "id": 189064361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582666996
    },
    {
        "content": "<p>no problem</p>",
        "id": 189064370,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667001
    },
    {
        "content": "<p>I was basically saying that instead of <code>auto_trait: true</code> meaning <em>everything</em> it means now, it only means that we need to generate the impl</p>",
        "id": 189064442,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667043
    },
    {
        "content": "<p>so basically <a href=\"https://github.com/rust-lang/chalk/blob/2939913fb7bb94ac2a6721087dc086be11410702/chalk-solve/src/clauses.rs#L159\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/2939913fb7bb94ac2a6721087dc086be11410702/chalk-solve/src/clauses.rs#L159\">on this line of code, roughly</a>,</p>",
        "id": 189064452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667051
    },
    {
        "content": "<p>I would expect something like</p>",
        "id": 189064461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667056
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">well_known_trait</span><span class=\"p\">(</span><span class=\"n\">trait_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">WellKnownTrait</span>::<span class=\"nb\">Sized</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">push_sized_trait_impls</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trait_ref</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189064499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667085
    },
    {
        "content": "<p>I mean, if we be super specific</p>",
        "id": 189064533,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667108
    },
    {
        "content": "<p>I see <a href=\"https://github.com/rust-lang/chalk/blob/2939913fb7bb94ac2a6721087dc086be11410702/chalk-solve/src/clauses.rs#L235\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/blob/2939913fb7bb94ac2a6721087dc086be11410702/chalk-solve/src/clauses.rs#L235\">there is a TODO here</a> :)</p>",
        "id": 189064568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189064442\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189064442\">said</a>:</p>\n<blockquote>\n<p>I was basically saying that instead of <code>auto_trait: true</code> meaning <em>everything</em> it means now, it only means that we need to generate the impl</p>\n</blockquote>\n<p>well, the thing is, I think there are a number of custom traits, and I don't think we can generalize that much</p>",
        "id": 189064598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667158
    },
    {
        "content": "<p>well, maybe that's not true :)</p>",
        "id": 189064651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667168
    },
    {
        "content": "<p>but e.g. for <code>Clone</code> we have some built-in cases -- and, yes, I guess they will always convert to walking the field types recursively -- but it only applies for tuples, closure types, and some specific examples</p>",
        "id": 189064678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667192
    },
    {
        "content": "<p>similarly, for <em>auto traits</em>, we only generate the impl <em>if there isn't a user-given impl already</em></p>",
        "id": 189064696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667213
    },
    {
        "content": "<p>so I feel like a flag on the trait may not be that useful</p>",
        "id": 189064700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667221
    },
    {
        "content": "<p>but I guess we could generalize the <code>well_known_trait</code> to return <code>Some(AutoTrait)</code> or something</p>",
        "id": 189064709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667233
    },
    {
        "content": "<p>i.e., it's like \"does this trait require special logic or what\"</p>",
        "id": 189064716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667242
    },
    {
        "content": "<p>anyway I guess this is kind of a \"how does the code work out cleanest\" sort of refactoring, and the truth is I don't have a strong opinion</p>",
        "id": 189064739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667259
    },
    {
        "content": "<p>So, my thoughts</p>",
        "id": 189064749,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667269
    },
    {
        "content": "<p>I was mostly concerned that this should be resolved at the \"chalk-solve\" layer, where we are translating from rust concepts into \"logical\" concepts</p>",
        "id": 189064766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667281
    },
    {
        "content": "<p>well, not entirely sure</p>",
        "id": 189064801,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667282
    },
    {
        "content": "<p>for sure</p>",
        "id": 189064816,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  do you think <code>Unsize</code> implementations should also be handled in Chalk? in particular, the ones for unsizing the last field in a generic type?</p>",
        "id": 189064882,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582667348
    },
    {
        "content": "<p>Yeah, that's sort what I'm trying to think about</p>",
        "id": 189064931,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> yes</p>",
        "id": 189064991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667409
    },
    {
        "content": "<p>in rustc, those are currently handled in <a href=\"http://select.rs\" target=\"_blank\" title=\"http://select.rs\">select.rs</a></p>",
        "id": 189065008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667422
    },
    {
        "content": "<p>for auto traits, it's more or else easy: a struct implements the auto trait if all it's fields do</p>",
        "id": 189065009,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667422
    },
    {
        "content": "<p>basically all that logic should move to chalk-solve imo</p>",
        "id": 189065015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667426
    },
    {
        "content": "<p>I've started implementing the built-in <code>Unsize</code> impls in RA, maybe I should just do that in Chalk then <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 189065084,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1582667471
    },
    {
        "content": "<p>I agree some of this will be non-trivial, but that's what's involved in modeling rust I think</p>",
        "id": 189065087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189065084\" title=\"#narrow/stream/144729-wg-traits/topic/design.20meeting.202020.2E02.2E25/near/189065084\">said</a>:</p>\n<blockquote>\n<p>I've started implementing the built-in <code>Unsize</code> impls in RA, maybe I should just do that in Chalk then <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>\n</blockquote>\n<p>ideally yes, I think</p>",
        "id": 189065091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667478
    },
    {
        "content": "<p>So, what would the that clause look like?</p>",
        "id": 189065108,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667491
    },
    {
        "content": "<p>for <code>Unsize</code>?</p>",
        "id": 189065226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667564
    },
    {
        "content": "<p>we would inspect the self type and generate clauses that are specific to it</p>",
        "id": 189065252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667582
    },
    {
        "content": "<p>this is part of the reason that we flounder if the self type is not known</p>",
        "id": 189065259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667588
    },
    {
        "content": "<p>Hmm</p>",
        "id": 189065291,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667624
    },
    {
        "content": "<p>I'm trying to figure out if there are any other \"blockers\" that I've encountered yet</p>",
        "id": 189065400,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667705
    },
    {
        "content": "<p>OK, well, I'm going to have to go in 5 minutes, but I want to go to one topic</p>",
        "id": 189065412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667718
    },
    {
        "content": "<p>nobody really took me up on the sprint goals that were targeting rustc, i.e., simplifying <code>Predicate</code></p>",
        "id": 189065423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667731
    },
    {
        "content": "<p>unfortunate :(</p>",
        "id": 189065438,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667744
    },
    {
        "content": "<p>I might try to make a goal to open up some issues on rustc (if I didn't already) and tweet out a bit about those</p>",
        "id": 189065448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667749
    },
    {
        "content": "<p>I really should have written a blog post lol</p>",
        "id": 189065454,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667755
    },
    {
        "content": "<p>a tweet might be good</p>",
        "id": 189065504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667767
    },
    {
        "content": "<p>heh, I think we should take it easy on ourselves, we have to iteate a few times to make this into a smooth machine :)</p>",
        "id": 189065509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667775
    },
    {
        "content": "<p>Right, but some involvement on rustc's side would be nice</p>",
        "id": 189065554,
        "sender_full_name": "detrumi",
        "timestamp": 1582667821
    },
    {
        "content": "<p>Yeah, I am super busy with work for a few weeks, I think</p>",
        "id": 189065592,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667856
    },
    {
        "content": "<p>so like, the only thing I can really touch is the rustc integration for now</p>",
        "id": 189065601,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667868
    },
    {
        "content": "<p>which is plenty &lt;3</p>",
        "id": 189065706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667925
    },
    {
        "content": "<p>With that being said, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we should schedule a time maybe later this week that you might be on and I can ask questions and talk about rustc-related things</p>",
        "id": 189065717,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667932
    },
    {
        "content": "<p>I'm still baby-stepping through things</p>",
        "id": 189065728,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667942
    },
    {
        "content": "<p>ok, I'll try to follow up on the rustc <code>Predicate</code> stuff a bit tomorrow, though I may not have a ton of time to do so</p>",
        "id": 189065734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667946
    },
    {
        "content": "<p>OK, I should be dedicating basically all day friday to traits</p>",
        "id": 189065761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667963
    },
    {
        "content": "<p>except for the 10am compile team design mtg</p>",
        "id": 189065786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> im not sure how long the context change will take but if that gets done soon enough I dont mind taking on the Predicate stuff next</p>",
        "id": 189065789,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1582667984
    },
    {
        "content": "<p>Sure, we can discuss</p>",
        "id": 189065791,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582667985
    },
    {
        "content": "<p>happy to schedule some time with folks on that day</p>",
        "id": 189065799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582667993
    },
    {
        "content": "<p>But I think that's meeting over?</p>",
        "id": 189065852,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582668005
    },
    {
        "content": "<p>Thanks all who attended :)</p>",
        "id": 189065862,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582668012
    },
    {
        "content": "<p>thanks all &lt;3</p>",
        "id": 189065884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1582668027
    }
]