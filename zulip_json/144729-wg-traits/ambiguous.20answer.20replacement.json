[
    {
        "content": "<p>So, let's talk about <a href=\"https://github.com/rust-lang/chalk/issues/302\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/302\">https://github.com/rust-lang/chalk/issues/302</a></p>",
        "id": 184865130,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578258669
    },
    {
        "content": "<p>Been thinking about this, and the \"correct\" way to solve it</p>",
        "id": 184865133,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578258685
    },
    {
        "content": "<p>So, before, we set the existing subst to not ambiguous when we encounter a new non-ambiguous subst. But showed in the issue, this <em>could</em> have caused a panic (or maybe bad logic) because the way it was handled, we assumed elsewhere that that was a \"new\" answer</p>",
        "id": 184865267,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578258846
    },
    {
        "content": "<p>But thinking about this, having an ambiguous answer for a table means that strands that depend on that table could also be ambiguous</p>",
        "id": 184865308,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578258949
    },
    {
        "content": "<p>and if the original answer is no longer ambiguous, then those dependent strands don't need to be ambiguous either</p>",
        "id": 184865361,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578258985
    },
    {
        "content": "<p>now, its obvious (since the new panic didn't cause any tests to fail), that this case isn't tested</p>",
        "id": 184865372,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578259023
    },
    {
        "content": "<p>so it's mostly theoretical</p>",
        "id": 184865376,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578259028
    },
    {
        "content": "<p>but I had an interesting idea, that I'm not sure if it can work</p>",
        "id": 184865431,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578259102
    },
    {
        "content": "<p>but, what if instead of \"ambiguous\", we stored that ambiguity as a delayed subgoals?</p>",
        "id": 184865434,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578259123
    },
    {
        "content": "<p>So, right now there are two cases where an strand can be ambiguous (without depending on an ambiguous strand): <code>CannotProve</code> and truncation</p>",
        "id": 184865493,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578259206
    },
    {
        "content": "<p>there is one more that is slightly different, which is one when the root table flounders, the aggregator uses an ambiguous identity subst</p>",
        "id": 184865520,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578259322
    },
    {
        "content": "<p>but that also matters for whether an answer is <code>Unique</code> or not</p>",
        "id": 184865641,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578259469
    },
    {
        "content": "<p>(now that I'm thinking about it, I'm wondering if storing truncation as a delayed subgoal could also have fixed <a href=\"https://github.com/rust-lang/chalk/issues/280\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/280\">https://github.com/rust-lang/chalk/issues/280</a>)</p>",
        "id": 184865746,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578259591
    },
    {
        "content": "<p>it's also a bit interesting because the delayed subgoals are similar to the delayed literals</p>",
        "id": 184865922,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578259848
    },
    {
        "content": "<p>and that got removed in favor of marking as ambiguous</p>",
        "id": 184865930,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578259861
    },
    {
        "content": "<p>and this is somewhat thinking the opposite: all ambiguity is represented as a delayed subgoal</p>",
        "id": 184865941,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578259881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any thoughts about this (don't know if you've put any thought into it)</p>",
        "id": 184940944,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578341126
    },
    {
        "content": "<p>one thought I had is that</p>",
        "id": 184941037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341176
    },
    {
        "content": "<p>when we were discussing coinduction</p>",
        "id": 184941051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341189
    },
    {
        "content": "<p>I was at some point advocating for including the idea of a \"canceled\" answer -- or something like that --</p>",
        "id": 184941062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341202
    },
    {
        "content": "<p>you wound up adding it, but only at the \"top level\"</p>",
        "id": 184941069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341207
    },
    {
        "content": "<p>but I think that \"canceling\" the existing answer and adding a new one seems .. maybe reasonable here</p>",
        "id": 184941083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341221
    },
    {
        "content": "<p>So, I thought about that</p>",
        "id": 184941096,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578341235
    },
    {
        "content": "<p>But I think ultimately that would be <em>wrong</em></p>",
        "id": 184941103,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578341243
    },
    {
        "content": "<p>Because there might have been other answers that \"depended\" on that answer</p>",
        "id": 184941122,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578341263
    },
    {
        "content": "<p>(so, they were ambiguous when they could have not been)</p>",
        "id": 184941141,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578341280
    },
    {
        "content": "<p>I don't see the problem</p>",
        "id": 184951544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341475
    },
    {
        "content": "<p>if there was a thread that was pulling from the table</p>",
        "id": 184951560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341483
    },
    {
        "content": "<p>it will <em>also</em> see the new answer</p>",
        "id": 184951562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341486
    },
    {
        "content": "<p>and so the dependent answers will eventually be themselves canceled</p>",
        "id": 184951576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341499
    },
    {
        "content": "<p>(I could see a concern around <em>efficiency</em>, perhaps)</p>",
        "id": 184951589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341509
    },
    {
        "content": "<p>ah, true</p>",
        "id": 184951660,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578341550
    },
    {
        "content": "<p>(that said, I wonder if I should review how some of the existing solvers I was copying from handled this situation)</p>",
        "id": 184951683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341579
    },
    {
        "content": "<p>the papers are a bit opaque but \"mappable\" :)</p>",
        "id": 184951693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341587
    },
    {
        "content": "<p>hmm</p>",
        "id": 184951708,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578341602
    },
    {
        "content": "<p>(specifically the \"Efficient Top-Down Computation of Queries Under the Well-formed Semantics (Chen, Swift, and Warren; Journal of Logic Programming '95)\" paper)</p>",
        "id": 184951969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341766
    },
    {
        "content": "<p>maybe I should take a look at it</p>",
        "id": 184952025,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578341817
    },
    {
        "content": "<p>it's a good paper but it took me many, many reads to understand it</p>",
        "id": 184952044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341832
    },
    {
        "content": "<p>it's written I think for a narrow set of folks, all of whom have implemented Prolog WAM engines :)</p>",
        "id": 184952063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341847
    },
    {
        "content": "<p>of course at this point you sort of have :)</p>",
        "id": 184952077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578341860
    },
    {
        "content": "<p>I suppose that's true</p>",
        "id": 184952187,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578341920
    },
    {
        "content": "<p>I'll give your idea a try</p>",
        "id": 184952403,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578342077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've implemented this idea to test here: <a href=\"https://github.com/jackh726/chalk/compare/tests_refactor...jackh726:ambiguous_as_cannotprove\" target=\"_blank\" title=\"https://github.com/jackh726/chalk/compare/tests_refactor...jackh726:ambiguous_as_cannotprove\">https://github.com/jackh726/chalk/compare/tests_refactor...jackh726:ambiguous_as_cannotprove</a></p>",
        "id": 184959998,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578347052
    },
    {
        "content": "<p>in case you're interested</p>",
        "id": 184960006,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578347057
    },
    {
        "content": "<p>still going to try to implement your idea before I PR anything</p>",
        "id": 184960027,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578347078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you around</p>",
        "id": 185052690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578429785
    },
    {
        "content": "<p>Implemented your idea: <a href=\"https://github.com/jackh726/chalk/compare/tests_refactor...jackh726:invalid_answers\" target=\"_blank\" title=\"https://github.com/jackh726/chalk/compare/tests_refactor...jackh726:invalid_answers\">https://github.com/jackh726/chalk/compare/tests_refactor...jackh726:invalid_answers</a></p>",
        "id": 185052798,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578429845
    },
    {
        "content": "<p>Need to come up with a test that would fail if I didn't check an an answer is invalid, because none of the tests cover that case now</p>",
        "id": 185052869,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578429894
    },
    {
        "content": "<p>I'm around, but real busy today running from meeting to meeting</p>",
        "id": 185062647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578436784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> How should I do this? Should I make two separate PRs to discuss? Just one? Do you want just look at the compare links above for now?</p>",
        "id": 185128903,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578500311
    },
    {
        "content": "<p>Mm the compare links are probably ok for now, sorry, I might not get to this until Friday though  :(</p>",
        "id": 185148890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578512351
    },
    {
        "content": "<p>No problem</p>",
        "id": 185151496,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578514044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> if there's some experimental PR we can plug into rust-analyzer, I'll be glad to try it out! I think we know observe these panics pretty regularly :(</p>",
        "id": 185300193,
        "sender_full_name": "matklad",
        "timestamp": 1578654000
    },
    {
        "content": "<p>hmm... actually even if this gets fixed, we'll have to decide between the fix and support for <code>impl Trait</code> since that got removed without so far a replacement, AFAIK <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 185302669,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1578656588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> there's two different branches right now that both should fix this</p>",
        "id": 185340064,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578682886
    },
    {
        "content": "<p>Just waiting for <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> to take a look</p>",
        "id": 185340086,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578682895
    },
    {
        "content": "<p><a href=\"https://github.com/jackh726/chalk/tree/ambiguous_as_cannotprove\" target=\"_blank\" title=\"https://github.com/jackh726/chalk/tree/ambiguous_as_cannotprove\">https://github.com/jackh726/chalk/tree/ambiguous_as_cannotprove</a></p>",
        "id": 185340163,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578682923
    },
    {
        "content": "<p><a href=\"https://github.com/jackh726/chalk/tree/invalid_answers\" target=\"_blank\" title=\"https://github.com/jackh726/chalk/tree/invalid_answers\">https://github.com/jackh726/chalk/tree/invalid_answers</a></p>",
        "id": 185340196,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578682936
    },
    {
        "content": "<p>I'm also currently working on a way to make it possible to yield before an answer is actually generated</p>",
        "id": 185340321,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578683016
    },
    {
        "content": "<p>simplest would be to just yield based on time</p>",
        "id": 185340354,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578683032
    },
    {
        "content": "<p>but, that would allow to use a larger max size without worrying about taking too long</p>",
        "id": 185340455,
        "sender_full_name": "Jack Huey",
        "timestamp": 1578683069
    }
]