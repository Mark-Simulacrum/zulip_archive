[
    {
        "content": "<p>I have a trait impl that's unique but can't be solved by the current Rust compiler for reasons. I'm currently trying to write it as a program to load into the repl to see if chalk can solve it but I can't get it to understand associated types. What exactly is the syntax for associated types in the repl?</p>",
        "id": 186456740,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1579831587
    },
    {
        "content": "<p>It requires full specified type syntax aka <code>&lt;T as X&gt;::Y</code> doesn't it.</p>",
        "id": 186457294,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1579832427
    },
    {
        "content": "<p>To use an associated type, yes you need <code>&lt;T as X&gt;::Y</code></p>",
        "id": 186457558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1579832830
    },
    {
        "content": "<p>I'm actually surprised there isn't an example of associated types in the <code>libstd.chalk</code></p>",
        "id": 186457568,
        "sender_full_name": "Jack Huey",
        "timestamp": 1579832858
    },
    {
        "content": "<p>Alright, new question: why doesn't this solve.</p>\n<div class=\"codehilite\"><pre><span></span>trait Sized { }\n\ntrait ValueType {\n    type Inner;\n}\ntrait Value&lt;V&gt; where V: ValueType&lt;Inner = Self&gt; { }\ntrait Packable where Self: ValueType { }\nstruct Packed&lt;V&gt; where V: Packable { }\nimpl&lt;V&gt; ValueType for Packed&lt;V&gt; where V: Packable {\n    type Inner = &lt;V as ValueType&gt;::Inner;\n}\n\nstruct i32 { }\nstruct Int32 { }\nimpl ValueType for Int32 {\n    type Inner = i32;\n}\nimpl Packable for Int32 { }\nimpl Value&lt;Int32&gt; for i32 { }\n\nstruct Vec&lt;T&gt; where T: Sized { }\ntrait RepeatedField&lt;V&gt; { }\nimpl&lt;V&gt; RepeatedField&lt;V&gt; for Vec&lt;&lt;V as ValueType&gt;::Inner&gt; where V: ValueType, &lt;V as ValueType&gt;::Inner: Value&lt;V&gt; { }\nimpl&lt;V&gt; RepeatedField&lt;Packed&lt;V&gt;&gt; for Vec&lt;&lt;Packed&lt;V&gt; as ValueType&gt;::Inner&gt; where V: Packable, &lt;V as ValueType&gt;::Inner: Value&lt;V&gt; { }\n</pre></div>\n\n\n<p>Chalk says there's an overlapping impl, but I can't see it. The impl over Packed should be different from <code>V: ValueType, V::Inner: Value&lt;V&gt;</code> since <code>Packed&lt;V&gt;::Inner</code> doesn't implement <code>Value&lt;Packed&lt;V&gt;&gt;</code>. So it should be unique, right?</p>",
        "id": 186457646,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1579832968
    },
    {
        "content": "<p>Damn, after explaining it now I see it.</p>",
        "id": 186457719,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1579833048
    },
    {
        "content": "<p>I have figured out a fix though that falls inline with my original logic for why this was valid earlier</p>\n<div class=\"codehilite\"><pre><span></span>struct Packed&lt;V&gt; where V: Packable, &lt;V as ValueType&gt;::Inner: Value&lt;V&gt; { }\nimpl&lt;V&gt; ValueType for Packed&lt;V&gt; where V: Packable, &lt;V as ValueType&gt;::Inner: Value&lt;V&gt; {\n    type Inner = &lt;V as ValueType&gt;::Inner;\n}\n</pre></div>",
        "id": 186460181,
        "sender_full_name": "Sydney Acksman",
        "timestamp": 1579836869
    }
]