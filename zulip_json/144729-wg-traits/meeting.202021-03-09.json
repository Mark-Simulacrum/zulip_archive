[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 229552481,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615323484
    },
    {
        "content": "<p>Meeting in 2ish minutes</p>",
        "id": 229552513,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615323488
    },
    {
        "content": "<p>Okay, meeting time</p>",
        "id": 229552903,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615323627
    },
    {
        "content": "<p>Hello all :)</p>",
        "id": 229552914,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615323630
    },
    {
        "content": "<p>Hey <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 229552994,
        "sender_full_name": "detrumi",
        "timestamp": 1615323647
    },
    {
        "content": "<p>Let's start with announcements and updates?</p>",
        "id": 229553008,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615323652
    },
    {
        "content": "<p>I started looking at the coinduction PR</p>",
        "id": 229553089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615323683
    },
    {
        "content": "<p>I've this feeling like we can make it simpler</p>",
        "id": 229553109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615323691
    },
    {
        "content": "<p>Then i remembered that <span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span> was saying something about a deadline of sorts</p>",
        "id": 229553135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615323701
    },
    {
        "content": "<p>I hope I didn't cause you any problems, <span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span></p>",
        "id": 229553155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615323708
    },
    {
        "content": "<p>There are a couple PRs by <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> regarding <code>type_alias_impl_trait</code> :) nice to see that</p>",
        "id": 229553166,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615323711
    },
    {
        "content": "<p>yes!</p>",
        "id": 229553179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615323716
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> told me that they wanted to talk about them, but I'm not sure what they wanted to say :)</p>",
        "id": 229553250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615323726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span> said the 16th :)</p>",
        "id": 229553258,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615323728
    },
    {
        "content": "<p>I had a look a <code>StreamingIterator</code> last week, I posted some notes in the topic for last weeks meeting but the short version is that <code>StreamingIterator</code> combinators don't really work without some changes to normalization (maybe we can get avoid lazy norm, but it will need more normalization)</p>",
        "id": 229553297,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615323742
    },
    {
        "content": "<p>I better hurry then :)</p>",
        "id": 229553303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615323744
    },
    {
        "content": "<p>(Oli's PRs are <a href=\"https://github.com/rust-lang/rust/issues/82558\">#82558</a> and <a href=\"https://github.com/rust-lang/rust/issues/82898\">#82898</a>)</p>",
        "id": 229553343,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615323764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> I feel like there are definitely some rough edges with normalization that are easier to hit with GATs</p>",
        "id": 229553414,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615323791
    },
    {
        "content": "<p>if it helps <span class=\"user-mention\" data-user-id=\"365822\">@FireFighterDuck</span> I'd probably not be opposed to landing the PR and then revamping it :)</p>",
        "id": 229553439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615323799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229553439\">said</a>:</p>\n<blockquote>\n<p>if it helps <span class=\"user-mention silent\" data-user-id=\"365822\">FireFighterDuck</span> I'd probably not be opposed to landing the PR and then revamping it :)</p>\n</blockquote>\n<p>Also good with me :) I definitely like the \"land changes then iterate\" approach</p>",
        "id": 229553521,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615323837
    },
    {
        "content": "<p>(ps, completely off topic, but recent topics got a lot nicer!)</p>",
        "id": 229553607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615323857
    },
    {
        "content": "<p>any other announcements?</p>",
        "id": 229553707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615323912
    },
    {
        "content": "<p>Also, crater run for binder refactor PR (<a href=\"https://github.com/rust-lang/rust/issues/76814\">#76814</a>) came back. Looks clean. But if someone with more experience reading crater reports could take a second look :)</p>",
        "id": 229553711,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615323913
    },
    {
        "content": "<p>We can perhaps discuss more in a bit, but I've been doing some hacking related to that in regards to changing how we resolve late lifetimes (<a href=\"https://github.com/rust-lang/rust/issues/82743\">#82743</a> as a start)</p>",
        "id": 229553866,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615323964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> told me that they've been talking to you a fair bit about this PR too :)</p>",
        "id": 229553891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615323968
    },
    {
        "content": "<p>Yes :)</p>",
        "id": 229553912,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615323977
    },
    {
        "content": "<p>We've discussed a couple times</p>",
        "id": 229553931,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615323985
    },
    {
        "content": "<p>I'm skimming the crater results</p>",
        "id": 229553978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324008
    },
    {
        "content": "<p>I have some tasks out of that, that I need to start working on :)</p>",
        "id": 229553979,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615324010
    },
    {
        "content": "<p>they look pretty darn good, there are some odd things in there</p>",
        "id": 229553988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324013
    },
    {
        "content": "<p>While the current state is a bit hectic and requires kind of a lot to take in, they might be interested in some followup wor</p>",
        "id": 229553992,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324018
    },
    {
        "content": "<p>some overflows</p>",
        "id": 229554007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324026
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[INFO] [stderr]     Checking circular-error-reprod v0.1.0 (/opt/rustwide/workdir)\n[INFO] [stderr]\n[INFO] [stderr] thread &#39;rustc&#39; has overflowed its stack\n[INFO] [stderr] fatal runtime error: stack overflow\n[INFO] [stderr]\n[INFO] [stderr] thread &#39;rustc&#39; has overflowed its stack\n[INFO] [stderr] fatal runtime error: stack overflow\n[INFO] [stderr] error: could not compile `circular-error-reprod`\n</code></pre></div>",
        "id": 229554038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324036
    },
    {
        "content": "<p>also those!</p>",
        "id": 229554048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324039
    },
    {
        "content": "<p>those probably need the \"stack extender\" thing inserted here or there</p>",
        "id": 229554067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324046
    },
    {
        "content": "<p>but by and large it looks good, I'm not sure it's worth tracking these down yet</p>",
        "id": 229554091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324058
    },
    {
        "content": "<p>I'm not sure if they are related, or spurious. Probably worth looking into a bit</p>",
        "id": 229554136,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229553439\">said</a>:</p>\n<blockquote>\n<p>if it helps <span class=\"user-mention silent\" data-user-id=\"365822\">FireFighterDuck</span> I'd probably not be opposed to landing the PR and then revamping it :)</p>\n</blockquote>\n<p>Whatever you're okay with would work for me as well. I just wanted to include a short paragraph about the review process in my report, the PR doesn't need to be merged before you are okay with it. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 229554215,
        "sender_full_name": "FireFighterDuck",
        "timestamp": 1615324094
    },
    {
        "content": "<p>ok, if it doesn't help you, let's keep it as aPR for now, but I promise you some feedback</p>",
        "id": 229554462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324190
    },
    {
        "content": "<p>the short version is that I am wondering why we can't just track the top of the stack</p>",
        "id": 229554546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324211
    },
    {
        "content": "<p>basically there is already a mechanism for \"temporary cached results\"</p>",
        "id": 229554609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324236
    },
    {
        "content": "<p>and I'm trying to figure out why we need a new one</p>",
        "id": 229554616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324241
    },
    {
        "content": "<p>I need to allocate an hour to walk through it again I guess:)</p>",
        "id": 229554635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324248
    },
    {
        "content": "<p>Anyone been working on anything else?</p>",
        "id": 229554805,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324321
    },
    {
        "content": "<p>I know the last few meetings we haven't really had much to discuss</p>",
        "id": 229555082,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324410
    },
    {
        "content": "<p>We did say at one point that we should schedule a meeting to talk about lazy normalization</p>",
        "id": 229555129,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324433
    },
    {
        "content": "<p>yep</p>",
        "id": 229555147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324439
    },
    {
        "content": "<p>But unsure exactly <em>when</em> we want to do that</p>",
        "id": 229555179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> had some stuff prepared</p>",
        "id": 229555197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324445
    },
    {
        "content": "<p>Oh, well that's great</p>",
        "id": 229555227,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324453
    },
    {
        "content": "<p>I guess the question is whether he'd prefer to schedule that in advance</p>",
        "id": 229555231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324454
    },
    {
        "content": "<p>well, I am not sure what I mean</p>",
        "id": 229555249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324460
    },
    {
        "content": "<p>I think it might've been a topic with a bunch of notes ?</p>",
        "id": 229555266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324468
    },
    {
        "content": "<p>We can pick one of the current wg traits meetings for it. Or schedule something else.</p>",
        "id": 229555299,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1615324491
    },
    {
        "content": "<p>I guess the question is how mcuh you want us to prepare in advance :)</p>",
        "id": 229555353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324511
    },
    {
        "content": "<p>I'd be game to do it next week</p>",
        "id": 229555360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324514
    },
    {
        "content": "<p>but I'd like some links to what to read up on</p>",
        "id": 229555381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324520
    },
    {
        "content": "<p>That sounds good to me</p>",
        "id": 229555384,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324523
    },
    {
        "content": "<p>This week, I could potentially give some updates on recent progress (\"progress\") on the binder refactor PR</p>",
        "id": 229555619,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324626
    },
    {
        "content": "<p>I've had some lengthy discussions with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> about bits and pieces</p>",
        "id": 229555661,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324650
    },
    {
        "content": "<p>let's do that</p>",
        "id": 229555679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615324660
    },
    {
        "content": "<p>But unsure if everyone else might be interested in getting a summary update</p>",
        "id": 229555682,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324662
    },
    {
        "content": "<p>Okay :)</p>",
        "id": 229555690,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324667
    },
    {
        "content": "<p>go for it</p>",
        "id": 229555693,
        "sender_full_name": "detrumi",
        "timestamp": 1615324669
    },
    {
        "content": "<p>Oof I'm not prepared</p>",
        "id": 229555705,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324679
    },
    {
        "content": "<p>But that's okay</p>",
        "id": 229555707,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324681
    },
    {
        "content": "<p>I've gone through this enough I should know it by heart</p>",
        "id": 229555762,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324692
    },
    {
        "content": "<p>Alright, so maybe let's just start by an overview of what we expect the PR to do</p>",
        "id": 229555811,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324723
    },
    {
        "content": "<p>(Actually there are some notes here: <a href=\"https://hackmd.io/zk5OcnysTJKK64iBr_002g\">https://hackmd.io/zk5OcnysTJKK64iBr_002g</a>)</p>",
        "id": 229555837,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324741
    },
    {
        "content": "<p>Basically, in rustc, there is <code>struct Binder&lt;T&gt;(T)</code> and in Chalk there is <code>struct Binders&lt;T: HasInterner&gt;(T, T::BoundVars)</code></p>",
        "id": 229555908,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324770
    },
    {
        "content": "<p>more or less</p>",
        "id": 229556022,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324808
    },
    {
        "content": "<p>essentially, in Chalk, we know what bound vars are in <code>T</code></p>",
        "id": 229556053,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324823
    },
    {
        "content": "<p>Now, I've already got this implemented</p>",
        "id": 229556216,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324884
    },
    {
        "content": "<p>And we're now much better at keeping track of the bound vars as we move <code>T</code> around</p>",
        "id": 229556254,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324907
    },
    {
        "content": "<p>However, actually figuring out what those bound vars are turns out to be a bit difficult</p>",
        "id": 229556330,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324932
    },
    {
        "content": "<p>in a subtle way</p>",
        "id": 229556345,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324936
    },
    {
        "content": "<p>So, let's start with something simple</p>",
        "id": 229556366,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324946
    },
    {
        "content": "<p><code>fn foo&lt;T&gt;() where for&lt;'a&gt; T: Bar&lt;'a&gt;</code></p>",
        "id": 229556412,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324977
    },
    {
        "content": "<p>If we ask, \"what are the bound vars on <code>T: Bar&lt;'a&gt;</code>, that's pretty simple: <code>['a]</code></p>",
        "id": 229556457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615324997
    },
    {
        "content": "<p>Next level of difficulty:</p>",
        "id": 229556491,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325014
    },
    {
        "content": "<p>Well</p>",
        "id": 229556603,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325057
    },
    {
        "content": "<p>Hmm, how do I want to summarize this</p>",
        "id": 229556618,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325063
    },
    {
        "content": "<p>Let's start with associated types</p>",
        "id": 229556639,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325074
    },
    {
        "content": "<p>So, imagine we have:</p>",
        "id": 229556649,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325082
    },
    {
        "content": "<p><code>fn foo&lt;T&gt;() where for&lt;'a&gt; T: Bar&lt;'a, As = &amp;'a ()</code></p>",
        "id": 229556678,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325099
    },
    {
        "content": "<p>Let's think about the predicates we generate: <code>for&lt;'a&gt; T: Bar&lt;'a&gt;</code> and <code>for&lt;'a&gt; &lt;T as Bar&lt;'a&gt;&gt;::As = &amp;'a ()</code></p>",
        "id": 229556767,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325133
    },
    {
        "content": "<p>Does everyone see that?</p>",
        "id": 229556781,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325141
    },
    {
        "content": "<p>Now let's look at</p>\n<div class=\"codehilite\"><pre><span></span><code>trait Foo&lt;&#39;a&gt; { type As; }\ntrait Bar&lt;&#39;b&gt;: for&lt;&#39;a&gt; Foo&lt;&#39;a&gt; {}\nfn foo&lt;T&gt;() where for&lt;&#39;c&gt; T: Bar&lt;&#39;c, As = &amp;&#39;c ()&gt; {}\n</code></pre></div>",
        "id": 229556958,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325211
    },
    {
        "content": "<p>And let's think about the predicates we generate</p>",
        "id": 229556987,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325224
    },
    {
        "content": "<p><code>for&lt;'c&gt; T: Bar&lt;'c&gt;</code> and <code>for&lt;'c&gt; &lt;T as Bar&lt;'c&gt;&gt;::As = &amp;'c ()</code></p>",
        "id": 229557047,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325257
    },
    {
        "content": "<p>But, this isn't quite correct</p>",
        "id": 229557058,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325264
    },
    {
        "content": "<p>Since <code>As</code> isn't defined on <code>Bar</code>, it's defined on <code>Foo</code></p>",
        "id": 229557085,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325276
    },
    {
        "content": "<p>So, that second predicate is actually <code>for&lt;'c&gt; &lt;T as Bar&lt;'a&gt;&gt;::As = &amp;'c ()</code></p>",
        "id": 229557179,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325311
    },
    {
        "content": "<p>Which, isn't correct</p>",
        "id": 229557184,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325316
    },
    {
        "content": "<p>(Also, ignore that this isn't quite WF since <code>'c</code> isn't in the trait input types)</p>",
        "id": 229557209,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325333
    },
    {
        "content": "<p>because now <code>'a</code> is a bound var, but it's not in our list of bound vars <code>['c]</code></p>",
        "id": 229557268,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325358
    },
    {
        "content": "<p>Turns out, this is pretty simple to deal with</p>",
        "id": 229557292,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325375
    },
    {
        "content": "<p>We essentially just extend the bound vars with super trait HRTB vars</p>",
        "id": 229557335,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325396
    },
    {
        "content": "<p>so our bound var list becomes <code>['c, 'a]</code></p>",
        "id": 229557397,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325409
    },
    {
        "content": "<p>And we get <code>for&lt;'c, 'a&gt; &lt;T as Bar&lt;'a&gt;&gt;::As = &amp;'c ()</code></p>",
        "id": 229557429,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325424
    },
    {
        "content": "<p>Now, in current rustc, this is all done sort of implicitly</p>",
        "id": 229557476,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325444
    },
    {
        "content": "<p>(<code>subst_supertrait</code> is the relevant fn)</p>",
        "id": 229557504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325456
    },
    {
        "content": "<p>But, in the binder refactor PR, we actually have to be careful</p>",
        "id": 229557549,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325470
    },
    {
        "content": "<p>Since the <code>'a</code> we have to start references the bound var with index <code>0</code>, whereas in the final predicate, it references <code>1</code></p>",
        "id": 229557617,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325504
    },
    {
        "content": "<p>Again, this is <em>fairly</em> simple to handle</p>",
        "id": 229557640,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325514
    },
    {
        "content": "<p>Okay, so next problem:</p>",
        "id": 229557656,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325522
    },
    {
        "content": "<p>Well, before I go on, everyone good?</p>",
        "id": 229557737,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325536
    },
    {
        "content": "<p>Any questions?</p>",
        "id": 229557746,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325538
    },
    {
        "content": "<p>I'm with you so far :)</p>",
        "id": 229557778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615325551
    },
    {
        "content": "<p>(but then we've been over this a time or two)</p>",
        "id": 229557789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615325556
    },
    {
        "content": "<p>I guess I have one question</p>",
        "id": 229557812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615325570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229557640\">said</a>:</p>\n<blockquote>\n<p>Again, this is <em>fairly</em> simple to handle</p>\n</blockquote>\n<p>is this mostly being handled in <code>subst_supertrait</code>?</p>",
        "id": 229557822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615325578
    },
    {
        "content": "<p>Okay shoot :)</p>",
        "id": 229557823,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325578
    },
    {
        "content": "<p>I would've expected <code>as Foo</code> somewhere, but this works too I guess</p>",
        "id": 229557825,
        "sender_full_name": "detrumi",
        "timestamp": 1615325579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes</p>",
        "id": 229557859,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229557825\">said</a>:</p>\n<blockquote>\n<p>I would've expected <code>as Foo</code> somewhere, but this works too I guess</p>\n</blockquote>\n<p>I think that's a typo</p>",
        "id": 229557890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615325598
    },
    {
        "content": "<p>Oops, yes</p>",
        "id": 229557899,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325604
    },
    {
        "content": "<p><code>for&lt;'c, 'a&gt; &lt;T as Foo&lt;'a&gt;&gt;::As = &amp;'c ()</code> is the final predicate</p>",
        "id": 229557965,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325642
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span></p>",
        "id": 229558025,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325652
    },
    {
        "content": "<p>So, currently in rustc, there's a nightly feature called associated type bounds. It allows you to write something like <code>for&lt;'a&gt; T: Bar&lt;'a, As: Baz&lt;'a&gt;&gt;</code></p>",
        "id": 229558098,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325674
    },
    {
        "content": "<p>Where <code>Baz</code> is a new trait</p>",
        "id": 229558110,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229557179\">said</a>:</p>\n<blockquote>\n<p>So, that second predicate is actually <code>for&lt;'c&gt; &lt;T as Bar&lt;'a&gt;&gt;::As = &amp;'c ()</code></p>\n</blockquote>\n<p>I'm not sure what kind of algorithm are you executing to come up with this, I'd have said <code>for&lt;'c, 'a&gt; &lt;T as Foo&lt;'a&gt;&gt;::As = &amp;'c ()</code> just right away but you're executing some intermediate steps that I don't remember why</p>",
        "id": 229558141,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615325695
    },
    {
        "content": "<p>The \"algorithm\" is that we have to \"upcast\" the <code>T: Bar&lt;'c&gt;</code> predicate to <code>Foo</code></p>",
        "id": 229558200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615325728
    },
    {
        "content": "<p>So, that actually isn't generated anywhere</p>",
        "id": 229558203,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325729
    },
    {
        "content": "<p>It's more or less what you \"might\" expect</p>",
        "id": 229558231,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325741
    },
    {
        "content": "<p>We <em>do</em> actually just generate that final predicate</p>",
        "id": 229558308,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325765
    },
    {
        "content": "<p>(because <code>As</code> is defined in <code>Foo</code>)</p>",
        "id": 229558315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615325765
    },
    {
        "content": "<p>But I'm skipping over the implementation details</p>",
        "id": 229558343,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325773
    },
    {
        "content": "<p>actually, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, it falls out from that code you were editing to eliminate the cycles</p>",
        "id": 229558371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615325789
    },
    {
        "content": "<p>if you recall, we were enumerating all the supertraits of things</p>",
        "id": 229558382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615325798
    },
    {
        "content": "<p>yep</p>",
        "id": 229558392,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615325804
    },
    {
        "content": "<p>that was doing those upcasts</p>",
        "id": 229558405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615325809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229558098\">said</a>:</p>\n<blockquote>\n<p>So, currently in rustc, there's a nightly feature called associated type bounds. It allows you to write something like <code>for&lt;'a&gt; T: Bar&lt;'a, As: Baz&lt;'a&gt;&gt;</code></p>\n</blockquote>\n<p>Now, another way you could write this is <code>for&lt;'a&gt; T: Bar&lt;'a&gt;, for&lt;'a&gt; &lt;T as Bar&lt;'a&gt;::As: Baz&lt;'a&gt;</code></p>",
        "id": 229558430,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325821
    },
    {
        "content": "<p>so when we are looking for the <code>As</code> associated type</p>",
        "id": 229558438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615325824
    },
    {
        "content": "<p>we're actually looking at the <code>Foo</code> predicate</p>",
        "id": 229558466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615325830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229558430\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229558098\">said</a>:</p>\n<blockquote>\n<p>So, currently in rustc, there's a nightly feature called associated type bounds. It allows you to write something like <code>for&lt;'a&gt; T: Bar&lt;'a, As: Baz&lt;'a&gt;&gt;</code></p>\n</blockquote>\n<p>Now, another way you could write this is <code>for&lt;'a&gt; T: Bar&lt;'a&gt;, for&lt;'a&gt; &lt;T as Bar&lt;'a&gt;::As: Baz&lt;'a&gt;</code></p>\n</blockquote>\n<p>But anyways, the same concern we have from before applies: the actual predicate that gets generated will actually look something like <code>...&lt;T as Foo&lt;'a&gt;&gt;...</code></p>",
        "id": 229558639,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325906
    },
    {
        "content": "<p>But coming back to the \"simple\" form : <code>for&lt;'a&gt; T: Bar&lt;'a, As: Baz&lt;'a&gt;&gt;</code></p>",
        "id": 229558681,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325934
    },
    {
        "content": "<p>What makes this complicated, is we can actually do something like <code>for&lt;'a&gt; T: Bar&lt;'a, As: for&lt;'b&gt; Baz&lt;'a, 'b&gt;&gt;</code></p>",
        "id": 229558724,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325957
    },
    {
        "content": "<p>Where we introduce new lifetimes in the inner trait ref</p>",
        "id": 229558738,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325967
    },
    {
        "content": "<p>And we're starting the get to the like key issue where the current PR fails</p>",
        "id": 229558774,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615325997
    },
    {
        "content": "<p>(finally)</p>",
        "id": 229558779,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326001
    },
    {
        "content": "<p>When we ask for what bound vars are in scope for <code>...::As: Baz&lt;'a, 'b&gt;</code>, at first glance, it looks like <code>['a, 'b]</code></p>",
        "id": 229558906,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326043
    },
    {
        "content": "<p>at this point</p>",
        "id": 229558997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326091
    },
    {
        "content": "<p>Ergh I changed lifetime names, so this might be confusing</p>",
        "id": 229558998,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326092
    },
    {
        "content": "<p>it might be useful for me to understand a bit more precisely</p>",
        "id": 229559003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326099
    },
    {
        "content": "<p>where in the code these questions are coming up</p>",
        "id": 229559007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326102
    },
    {
        "content": "<p>This would be in <code>instantiate_poly_trait_ref</code> in astconv/mod</p>",
        "id": 229559090,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326134
    },
    {
        "content": "<p>Let's change trait ref from above to <code>for&lt;'c&gt; T: Bar&lt;'c, As: for&lt;'b&gt; Baz&lt;'c, 'b&gt;&gt;</code> (just changing <code>'a</code> -&gt; <code>'c</code>)</p>",
        "id": 229559157,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326175
    },
    {
        "content": "<p>The predicate that gets generated by rustc ends up being <code>for&lt;'a, 'b, 'c&gt; &lt;T as Foo&lt;'a&gt;&gt;::As: Baz&lt;'c, 'b&gt;</code></p>",
        "id": 229559250,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326216
    },
    {
        "content": "<p>Here, not only are both the bound vars from <code>for&lt;'c&gt;</code> and <code>for&lt;'b&gt;</code> in scope, but also the super trait HRTB's <code>for&lt;'a&gt;</code></p>",
        "id": 229559384,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326254
    },
    {
        "content": "<p>And <em>that</em> ends up being the crux of the issue: keeping track of the lifetimes in scope</p>",
        "id": 229559424,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326277
    },
    {
        "content": "<p>And, moreso, making sure that when we lower the lifetimes in the final predicate, we're referring to the correct bound var index</p>",
        "id": 229559508,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326308
    },
    {
        "content": "<p>I'll pause here. Any questions?</p>",
        "id": 229559595,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326344
    },
    {
        "content": "<p>I have a question</p>",
        "id": 229559625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326361
    },
    {
        "content": "<p>Let's hear it :)</p>",
        "id": 229559686,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326371
    },
    {
        "content": "<p>trying to think how to formulate it</p>",
        "id": 229559703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326378
    },
    {
        "content": "<p>who has to compute the index, is maybe the question</p>",
        "id": 229559719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326386
    },
    {
        "content": "<p>good question</p>",
        "id": 229559735,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326396
    },
    {
        "content": "<p>I guess that the region resolution code is managing that?</p>",
        "id": 229559764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326410
    },
    {
        "content": "<p>So, as it is now, that's in <code>late/lifetimes</code>, yes</p>",
        "id": 229559775,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326416
    },
    {
        "content": "<p>But...not quite</p>",
        "id": 229559792,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326427
    },
    {
        "content": "<p>Since the approach in the current PR actually does some shifting based on the supertrait bound vars</p>",
        "id": 229559848,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326455
    },
    {
        "content": "<p>(which isn't entirely correct once you start nesting these)</p>",
        "id": 229559887,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326466
    },
    {
        "content": "<p>my belief is partly that this should be easy</p>",
        "id": 229559909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326479
    },
    {
        "content": "<p>:P</p>",
        "id": 229559966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326486
    },
    {
        "content": "<p>Well, you would think so</p>",
        "id": 229559980,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326491
    },
    {
        "content": "<p>our problems derive in part from the fact that we're forcing our predicates to have one level of binder</p>",
        "id": 229559990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326495
    },
    {
        "content": "<p>Somewhat</p>",
        "id": 229560011,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326505
    },
    {
        "content": "<p>But</p>",
        "id": 229560017,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326510
    },
    {
        "content": "<p>in what way not?</p>",
        "id": 229560031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229558430\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229558098\">said</a>:</p>\n<blockquote>\n<p>So, currently in rustc, there's a nightly feature called associated type bounds. It allows you to write something like <code>for&lt;'a&gt; T: Bar&lt;'a, As: Baz&lt;'a&gt;&gt;</code></p>\n</blockquote>\n<p>Now, another way you could write this is <code>for&lt;'a&gt; T: Bar&lt;'a&gt;, for&lt;'a&gt; &lt;T as Bar&lt;'a&gt;::As: Baz&lt;'a&gt;</code></p>\n</blockquote>\n<p>Going back to this</p>",
        "id": 229560039,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326523
    },
    {
        "content": "<p>You want those to be interchangable</p>",
        "id": 229560056,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326534
    },
    {
        "content": "<p>And it's a bit difficult if you have multiple levels of binders</p>",
        "id": 229560079,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326546
    },
    {
        "content": "<p>but, maybe not</p>",
        "id": 229560124,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326568
    },
    {
        "content": "<p>I'm not sure I follow this</p>",
        "id": 229560226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326615
    },
    {
        "content": "<p>Well</p>",
        "id": 229560238,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326622
    },
    {
        "content": "<p>For <code>for&lt;'a&gt; T: Bar&lt;'a, As: for&lt;'b&gt; Baz&lt;'a, 'b&gt;&gt;</code></p>",
        "id": 229560261,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326634
    },
    {
        "content": "<p>I did try the naive thing of just lowering it so that <code>'a</code> in <code>Baz&lt;'a, 'b&gt;</code> essentially lowers to <code>'^1.0</code></p>",
        "id": 229560316,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326665
    },
    {
        "content": "<p>I guess my question is</p>",
        "id": 229560320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326666
    },
    {
        "content": "<p>But that runs into problems</p>",
        "id": 229560339,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326673
    },
    {
        "content": "<p>those should be interchangeable, ok, but why is that more difficult?</p>",
        "id": 229560340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229560339\">said</a>:</p>\n<blockquote>\n<p>But that runs into problems</p>\n</blockquote>\n<p>At least, without a way to represent multiple levels of binders</p>",
        "id": 229560381,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326706
    },
    {
        "content": "<p>one thing I'm debating is having a repr that supports multiple levels of bindrs</p>",
        "id": 229560452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229560340\">said</a>:</p>\n<blockquote>\n<p>those should be interchangeable, ok, but why is that more difficult?</p>\n</blockquote>\n<p>I'm not sure if it is</p>",
        "id": 229560455,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326727
    },
    {
        "content": "<p>and then \"collapsing\" them</p>",
        "id": 229560466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326730
    },
    {
        "content": "<p>I think that collapsing them is easy</p>",
        "id": 229560480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326740
    },
    {
        "content": "<p>I've thought about that too</p>",
        "id": 229560503,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326748
    },
    {
        "content": "<p>and generating multiple levels <em>ought to be</em> easy (but I could be wrong)</p>",
        "id": 229560507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326750
    },
    {
        "content": "<p>One problem is that there are plenty of places in the compiler that we ask for an arbitrary hir ty to be lowered</p>",
        "id": 229560538,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326772
    },
    {
        "content": "<p>And so we have to have \"precomputed\" the lifetimes/binders</p>",
        "id": 229560561,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326787
    },
    {
        "content": "<p>ok</p>",
        "id": 229560642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326835
    },
    {
        "content": "<p>I'm not sure yet if this is a problem</p>",
        "id": 229560765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326869
    },
    {
        "content": "<p>my expectation is</p>",
        "id": 229560796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326884
    },
    {
        "content": "<p>we should be computing those indices and things based on what's \"naively\" in the tree</p>",
        "id": 229560819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326897
    },
    {
        "content": "<p>I can't imagine any other approach being sustainable</p>",
        "id": 229560831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326903
    },
    {
        "content": "<p>so I guess the problem has to arise when that is...somehow...wrong</p>",
        "id": 229560868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326915
    },
    {
        "content": "<p>define \"naively\"</p>",
        "id": 229560898,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326926
    },
    {
        "content": "<p>maybe we should dig a more into where the <code>As: Foo</code> lowering happens</p>",
        "id": 229560905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615326929
    },
    {
        "content": "<p>If you mean just <code>for&lt;'c&gt; for&lt;'b&gt;</code>, then <em>yes</em></p>",
        "id": 229560935,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326945
    },
    {
        "content": "<p>that's immediately wrong when considering supertrait HRTBs</p>",
        "id": 229560959,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615326954
    },
    {
        "content": "<p><code>As: Foo</code> lowering happens in <code>astconv/mod</code> I think <code>add_predicates_for_ast_type_binding</code> and <code>add_bounds</code></p>",
        "id": 229561136,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615327019
    },
    {
        "content": "<p>what i meant is that if you have <code>for&lt;'a&gt; T: Bar&lt;for&lt;'b&gt; As: Bar&lt;'b&gt;&gt;</code>, then i expect the <code>'b</code> to be computed under 2 levels of binder</p>",
        "id": 229561241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615327060
    },
    {
        "content": "<p>Did anyone else have questions?</p>",
        "id": 229561248,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615327063
    },
    {
        "content": "<p>I'm thining we should schedule a follow-up</p>",
        "id": 229561270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615327076
    },
    {
        "content": "<p>maybe tomorrow?</p>",
        "id": 229561277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615327079
    },
    {
        "content": "<p>while this remains fresh in my brain</p>",
        "id": 229561312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615327084
    },
    {
        "content": "<p>Potentially, yeah. If it's early morning</p>",
        "id": 229561351,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615327097
    },
    {
        "content": "<p>how early? :)</p>",
        "id": 229561425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615327136
    },
    {
        "content": "<p>9?</p>",
        "id": 229561433,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615327140
    },
    {
        "content": "<p>Before 10</p>",
        "id": 229561451,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615327147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229561241\">said</a>:</p>\n<blockquote>\n<p>what i meant is that if you have <code>for&lt;'a&gt; T: Bar&lt;for&lt;'b&gt; As: Bar&lt;'b&gt;&gt;</code>, then i expect the <code>'b</code> to be computed under 2 levels of binder</p>\n</blockquote>\n<p>can you explain the meaning of this?</p>",
        "id": 229561525,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615327176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229561241\">said</a>:</p>\n<blockquote>\n<p>what i meant is that if you have <code>for&lt;'a&gt; T: Bar&lt;for&lt;'b&gt; As: Bar&lt;'b&gt;&gt;</code>, then i expect the <code>'b</code> to be computed under 2 levels of binder</p>\n</blockquote>\n<p>Well, that's how it's currently done. The problem is that you then have to go back and know as you lower <code>for&lt;'b&gt; As: Bar&lt;'b&gt;</code> that <code>for&lt;'a&gt;</code> is in scope (and the supertrait bounds)</p>",
        "id": 229561578,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615327195
    },
    {
        "content": "<p>what did you mean by two level of binders?</p>",
        "id": 229561594,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615327201
    },
    {
        "content": "<p><code>for&lt;'a&gt;</code> and <code>for&lt;'b&gt;</code></p>",
        "id": 229561744,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615327219
    },
    {
        "content": "<p>ahh right :)</p>",
        "id": 229561781,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615327226
    },
    {
        "content": "<p>I'm not sure what we currently do or what we plan to do, but isn't that <code>for&lt;'a, 'b&gt;</code></p>",
        "id": 229561937,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615327255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229561578\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229561241\">said</a>:</p>\n<blockquote>\n<p>what i meant is that if you have <code>for&lt;'a&gt; T: Bar&lt;for&lt;'b&gt; As: Bar&lt;'b&gt;&gt;</code>, then i expect the <code>'b</code> to be computed under 2 levels of binder</p>\n</blockquote>\n<p>Well, that's how it's currently done. The problem is that you then have to go back and know as you lower <code>for&lt;'b&gt; As: Bar&lt;'b&gt;</code> that <code>for&lt;'a&gt;</code> is in scope (and the supertrait bounds)</p>\n</blockquote>\n<p>You <em>can</em> know this when you <code>instantiate</code> the full trait ref, if you keep track of everything (and I've done this and it works</p>",
        "id": 229562050,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615327274
    },
    {
        "content": "<p>unsure if that also qualifies as 2 level of binders also or it's just one level</p>",
        "id": 229562053,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615327274
    },
    {
        "content": "<p>But, again, it becomes a problem when you want to ask to lower a <em>specific</em> hir ty</p>",
        "id": 229562153,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615327294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so <code>for&lt;'a&gt; for&lt;'b&gt;</code> is pretty close to <code>for&lt;'a, 'b&gt;</code></p>",
        "id": 229562416,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615327337
    },
    {
        "content": "<p>In our case, we should be able to convert one to the other</p>",
        "id": 229562477,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615327354
    },
    {
        "content": "<p>Assuming we keep track of the debruijn indices and var indices inside</p>",
        "id": 229562546,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615327373
    },
    {
        "content": "<p>(Also, thanks everyone for indulging me in my long-winded summary)</p>",
        "id": 229563537,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615327627
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 229572134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615330927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> regarding tomorrow -- maybe <time datetime=\"2021-03-10T15:00:00Z\">2021-03-10T10:00:00-05:00</time></p>",
        "id": 229578700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615334381
    },
    {
        "content": "<p>Sure, but I'll have to call it at the hour if we make it there</p>",
        "id": 229578806,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615334419
    },
    {
        "content": "<p>Also btw I think I've basically got things working how I want them too. Gonna hack on that and we can discuss tomorrow. (there are some things related more directly to <a href=\"https://github.com/rust-lang/rust/issues/82743\">#82743</a>) that I need to work out too</p>",
        "id": 229578919,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615334491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> please ping me or the group, interested in participating :)</p>",
        "id": 229588901,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1615341032
    },
    {
        "content": "<p>Will do :)</p>",
        "id": 229589035,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615341135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/meeting.202021-03-09/near/229578806\">said</a>:</p>\n<blockquote>\n<p>Sure, but I'll have to call it at the hour if we make it there</p>\n</blockquote>\n<p>ok, I may be availlable earlier</p>",
        "id": 229591549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615343022
    },
    {
        "content": "<p>No worries if you aren't</p>",
        "id": 229592032,
        "sender_full_name": "Jack Huey",
        "timestamp": 1615343321
    }
]