[
    {
        "content": "<p>I was wondering <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>  if you wanted to discuss <a href=\"https://github.com/rust-lang-nursery/chalk/issues/176\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/issues/176\">chalk#176</a></p>",
        "id": 135470427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539092758
    },
    {
        "content": "<p>yes</p>",
        "id": 135470578,
        "sender_full_name": "scalexm",
        "timestamp": 1539092877
    },
    {
        "content": "<p><a href=\"https://appear.in/i-heart-rust\" target=\"_blank\" title=\"https://appear.in/i-heart-rust\">https://appear.in/i-heart-rust</a></p>",
        "id": 135470839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539093055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've been pondering for a while, but I fear the way I changed the rule regarding implied bounds on assoc types is too restrictive</p>",
        "id": 135971229,
        "sender_full_name": "scalexm",
        "timestamp": 1539781606
    },
    {
        "content": "<p>here is an example where it is not expressive enough: <a href=\"https://gist.github.com/rust-play/f5710ea680dabc7ec2b15888a70b83d0\" target=\"_blank\" title=\"https://gist.github.com/rust-play/f5710ea680dabc7ec2b15888a70b83d0\">https://gist.github.com/rust-play/f5710ea680dabc7ec2b15888a70b83d0</a></p>",
        "id": 135971240,
        "sender_full_name": "scalexm",
        "timestamp": 1539781619
    },
    {
        "content": "<p>(for having things back in cache)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;</span><span class=\"p\">...</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Bound</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">WC</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// old rule: `FromEnv(&lt;Self as Foo&gt;::Item&lt;...&gt;: Bounds) :- FromEnv(Self: Foo)`</span>\n<span class=\"c1\">// new rule after #176: `FromEnv(&lt;Self as Foo&gt;::Item&lt;...&gt;: Bounds) :- FromEnv(Self: Foo), FromEnv(WC)`</span>\n</pre></div>",
        "id": 135971465,
        "sender_full_name": "scalexm",
        "timestamp": 1539781808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> it looks like your \"new rule\" is cutoff</p>",
        "id": 135971525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539781909
    },
    {
        "content": "<p>oh, I see, when I copy-and-patse I see it all :)</p>",
        "id": 135971537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539781922
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// new rule after #176:\n\nFromEnv(&lt;Self as Foo&gt;::Item&lt;...&gt;: Bounds) :-\n    FromEnv(Self: Foo),\n    FromEnv(WC)\n</pre></div>",
        "id": 135971583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539781940
    },
    {
        "content": "<p>it feels like the problem is that we have <code>FromEnv(WC)</code></p>",
        "id": 135971613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539781985
    },
    {
        "content": "<p>and not just <code>WC</code></p>",
        "id": 135971617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539781987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> right</p>",
        "id": 135971627,
        "sender_full_name": "scalexm",
        "timestamp": 1539782002
    },
    {
        "content": "<p>it also feels like it would be <em>ok</em> to just have <code>Implemented(WC)</code> there</p>",
        "id": 135971633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782015
    },
    {
        "content": "<p>but I've not thought deeply about it</p>",
        "id": 135971653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782031
    },
    {
        "content": "<p>the main thing is that</p>",
        "id": 135971657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782037
    },
    {
        "content": "<p>it <em>looks</em> like it'd be ok yes, however I would find the rule a bit \"weird\", like we don't have any rules <code>FromEnv(...) :-Implemented(...)</code></p>",
        "id": 135971659,
        "sender_full_name": "scalexm",
        "timestamp": 1539782038
    },
    {
        "content": "<p>the impl does not \"provide\" those facts</p>",
        "id": 135971662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782041
    },
    {
        "content": "<p>so we don't need to be sure that they come from the <em>environment</em></p>",
        "id": 135971704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782049
    },
    {
        "content": "<p>yes I think this is right</p>",
        "id": 135971711,
        "sender_full_name": "scalexm",
        "timestamp": 1539782058
    },
    {
        "content": "<p>I just hope it would not lead to weird cycles</p>",
        "id": 135971718,
        "sender_full_name": "scalexm",
        "timestamp": 1539782066
    },
    {
        "content": "<p>it is asymmetric, but i'm arguing why it is different than the other cases :)</p>",
        "id": 135971722,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782070
    },
    {
        "content": "<p>these where clauses are not 'like' the others</p>",
        "id": 135971727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782085
    },
    {
        "content": "<p>yes I agree</p>",
        "id": 135971730,
        "sender_full_name": "scalexm",
        "timestamp": 1539782091
    },
    {
        "content": "<p>rather, they are more like where clauses on <em>methods</em></p>",
        "id": 135971731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782091
    },
    {
        "content": "<p>(but methods don't have implied bounds...)</p>",
        "id": 135971756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782119
    },
    {
        "content": "<p>(yet...)</p>",
        "id": 135971763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782125
    },
    {
        "content": "<p>well they might have, the analogy I was drawing in my head was:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">item</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">WC</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Bound</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135971834,
        "sender_full_name": "scalexm",
        "timestamp": 1539782183
    },
    {
        "content": "<p>if we permitted you to \"name\" this return type...</p>",
        "id": 135971866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782231
    },
    {
        "content": "<p>...that would be quite analogous indeed</p>",
        "id": 135971873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782240
    },
    {
        "content": "<p>well I guess you can't name it</p>",
        "id": 135971885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782258
    },
    {
        "content": "<p>but the point is</p>",
        "id": 135971886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782261
    },
    {
        "content": "<p>after you call the method</p>",
        "id": 135971888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782263
    },
    {
        "content": "<p>the value you get back has a type that we \"assume\" to implement bound</p>",
        "id": 135971894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782273
    },
    {
        "content": "<p>in effect this is desugaring, of course, to an associated type</p>",
        "id": 135971902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782281
    },
    {
        "content": "<p>(and I'd hope that eventually we are <em>literally</em> desugaring to that)</p>",
        "id": 135971950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539782295
    },
    {
        "content": "<p>yeah, I think it's ok indeed to just have <code>:- Implemented(Bar)</code></p>",
        "id": 135971992,
        "sender_full_name": "scalexm",
        "timestamp": 1539782357
    },
    {
        "content": "<p>because as you said this does not come from the <code>Bar</code> trait declaration</p>",
        "id": 135972001,
        "sender_full_name": "scalexm",
        "timestamp": 1539782373
    },
    {
        "content": "<p>so it seems ok</p>",
        "id": 135972004,
        "sender_full_name": "scalexm",
        "timestamp": 1539782380
    },
    {
        "content": "<p>ok cool</p>",
        "id": 135972153,
        "sender_full_name": "scalexm",
        "timestamp": 1539782517
    },
    {
        "content": "<p>I'd like to also ask <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> what they think, just in case</p>",
        "id": 135972195,
        "sender_full_name": "scalexm",
        "timestamp": 1539782529
    },
    {
        "content": "<p>yep, maybe they'll weigh in</p>",
        "id": 135973025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539783288
    }
]