[
    {
        "content": "<p>Okay, so we should definitely talk about <a href=\"https://github.com/rust-lang/rust/issues/83737\">#83737</a></p>",
        "id": 236399909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554004
    },
    {
        "content": "<p>(perf literally just came in for <a href=\"https://github.com/rust-lang/rust/issues/82272\">#82272</a>; slight regression in everything, but less than 1%. I'll take that)</p>",
        "id": 236399999,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554052
    },
    {
        "content": "<p>So, for <a href=\"https://github.com/rust-lang/rust/issues/83737\">#83737</a>, how do you want to approach this? How much do you remember?</p>",
        "id": 236400098,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554090
    },
    {
        "content": "<p>about the symbol name stuff?</p>",
        "id": 236400145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554104
    },
    {
        "content": "<p>a fair amount I guess</p>",
        "id": 236400152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554106
    },
    {
        "content": "<p>Nope, this one isn't symbol name</p>",
        "id": 236400196,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554140
    },
    {
        "content": "<p>This is the generator witness one</p>",
        "id": 236400202,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554145
    },
    {
        "content": "<p><em>ah</em></p>",
        "id": 236400223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554156
    },
    {
        "content": "<p>I.e. this MCVE:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">future</span>::<span class=\"n\">Future</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">slf</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Unpin</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">slf</span><span class=\"p\">)(</span><span class=\"o\">&amp;</span><span class=\"p\">()).</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236400230,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554159
    },
    {
        "content": "<p>ok, we've been putting off talking about that for a while</p>",
        "id": 236400243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554163
    },
    {
        "content": "<p>yes</p>",
        "id": 236400257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554172
    },
    {
        "content": "<p>Sort of</p>",
        "id": 236400262,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554173
    },
    {
        "content": "<p>let me run that locally</p>",
        "id": 236400264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554174
    },
    {
        "content": "<p>The problem is: I have no clue where the <code>local_decl</code> <code>&amp;mut (dyn for&lt;'a&gt; Future&lt;Output = ()&gt; + Unpin)</code> gets added to <code>Body</code></p>",
        "id": 236400409,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554226
    },
    {
        "content": "<p>Actually, I keep doing this, but I use <code>Box&lt;dyn for&lt;'a&gt; Future&lt;Output = ()&gt; + Unpin&gt;</code> instead, so we don't have the lifetime on <code>&amp;mut</code> to think about</p>",
        "id": 236400456,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554262
    },
    {
        "content": "<p>ok so</p>",
        "id": 236400660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554351
    },
    {
        "content": "<p>i'm not reproducing any problem with that MCVE</p>",
        "id": 236400674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554358
    },
    {
        "content": "<p>perhaps my build is too old or something</p>",
        "id": 236400681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554362
    },
    {
        "content": "<p>Make sure it's an rlib</p>",
        "id": 236400699,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554375
    },
    {
        "content": "<p>heh</p>",
        "id": 236400704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554382
    },
    {
        "content": "<p>right</p>",
        "id": 236400707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554383
    },
    {
        "content": "<p>k</p>",
        "id": 236400721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554389
    },
    {
        "content": "<p>I remember this from before :)</p>",
        "id": 236400731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554393
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// build-pass</span>\n<span class=\"c1\">// compile-flags: --edition 2018</span>\n<span class=\"c1\">// compile-flags: --crate-type rlib</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">future</span>::<span class=\"n\">Future</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">slf</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Unpin</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">slf</span><span class=\"p\">)(</span><span class=\"o\">&amp;</span><span class=\"p\">()).</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236400798,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554431
    },
    {
        "content": "<p>Except with the <code>for&lt;'a&gt;</code></p>",
        "id": 236400820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554442
    },
    {
        "content": "<p>It's been a sec since I've gone through to try to debug this, but I basically tried to find every place a <code>Body</code> was either created or <code>local_decls</code> was <code>push</code>ed or <code>extend</code>ed and <code>dbg</code>ed them to try to find where that particular local got added</p>",
        "id": 236400994,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554528
    },
    {
        "content": "<p>And came up with literally nothing</p>",
        "id": 236401007,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554534
    },
    {
        "content": "<p>So I missed something somewhere and got stuck</p>",
        "id": 236401036,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554550
    },
    {
        "content": "<p>ok</p>",
        "id": 236401116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554572
    },
    {
        "content": "<p>I'm running with some debuginfo to try and populate my cache</p>",
        "id": 236401141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554582
    },
    {
        "content": "<p>Really, the best solution is to not have any bound vars in the local declaration that goes into the <code>Body</code>, since lifetimes should be erased at that point</p>",
        "id": 236401177,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554602
    },
    {
        "content": "<p>hmm</p>",
        "id": 236401385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554704
    },
    {
        "content": "<p>thread 'rustc' panicked at 'found unstable fingerprints for evaluate_obligation(cc9f2525495a3a8a-e5fadaab4a16a58c): Ok(EvaluatedToOk)', /rustc/215738137bcbef2c3637a5bd290ef612cffe6ba5/compiler/rustc_query_system/src/query/plumbing.rs:593:5</p>",
        "id": 236401418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554722
    },
    {
        "content": "<p>fun</p>",
        "id": 236401421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554723
    },
    {
        "content": "<p>I guess I should work with <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> to fix that bug ;)</p>",
        "id": 236401439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619554732
    },
    {
        "content": "<p>That's popped up a bunch for me</p>",
        "id": 236401481,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554750
    },
    {
        "content": "<p>Not just for <code>evaluate_obligations</code></p>",
        "id": 236401497,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619554758
    },
    {
        "content": "<p>Each different query in that error is a separate bug</p>",
        "id": 236401521,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1619554770
    },
    {
        "content": "<p>The <code>predicate_of</code> bug is being worked on</p>",
        "id": 236401538,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1619554778
    },
    {
        "content": "<p>extra fun</p>",
        "id": 236402039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619555005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any luck?</p>",
        "id": 236402706,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619555318
    },
    {
        "content": "<p>not yet</p>",
        "id": 236402847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619555392
    },
    {
        "content": "<p>this unstable fingerprints bug is pretty frustrating</p>",
        "id": 236402887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619555404
    },
    {
        "content": "<p>I just <code>./x.py clean</code> and redo</p>",
        "id": 236402933,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619555417
    },
    {
        "content": "<p>yes</p>",
        "id": 236402937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619555420
    },
    {
        "content": "<p>it's just slower :)</p>",
        "id": 236402940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619555423
    },
    {
        "content": "<p>Yeah :/</p>",
        "id": 236402951,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619555427
    },
    {
        "content": "<p>so</p>",
        "id": 236403466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619555683
    },
    {
        "content": "<p>since this is taking way longer than I hoped</p>",
        "id": 236403478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619555689
    },
    {
        "content": "<p>Are you stuck on something? Like, is there something I can help with?</p>",
        "id": 236403811,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619555838
    },
    {
        "content": "<p>sorry, I got distracted b4ecause my build finished</p>",
        "id": 236403839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619555853
    },
    {
        "content": "<p>I'm reading print outs</p>",
        "id": 236403844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619555854
    },
    {
        "content": "<p>so</p>",
        "id": 236404513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619556142
    },
    {
        "content": "<p>I'm adding some more printouts, which takes too dang long right now</p>",
        "id": 236404534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619556153
    },
    {
        "content": "<p>but ok I sort of see the \"canonicalization problem\"</p>",
        "id": 236404555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619556164
    },
    {
        "content": "<p>I'm not 100% sure what type the witness has etc but where is that type set?</p>",
        "id": 236404565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619556176
    },
    {
        "content": "<p>in typeck somewhere</p>",
        "id": 236404568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619556179
    },
    {
        "content": "<p>One sec</p>",
        "id": 236404598,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619556192
    },
    {
        "content": "<p><code>generator_interior</code></p>",
        "id": 236404648,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619556216
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/83ebb00645cfa3288546b947aa557e90cc355bfa/compiler/rustc_typeck/src/check/generator_interior.rs#L177\">here</a></p>",
        "id": 236404754,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619556248
    },
    {
        "content": "<p>For this case, the witness has the type <code>Box&lt;dyn Future&lt;Output = ()&gt; + Unpin&gt;</code> but the \"local declaration\" in <code>Body</code> is <code>Box&lt;dyn for&lt;'a&gt; Future&lt;Output = ()&gt; + Unpin&gt;</code></p>",
        "id": 236405116,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619556402
    },
    {
        "content": "<p>yeah</p>",
        "id": 236405289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619556476
    },
    {
        "content": "<p>Really, that local declaration has already gone through an <code>erase_late_bound_regions</code> and <code>erase_regions</code> <em>probably</em>. But really should go through the same recursive erasing that gets done for adding types into the witness. <em>But I can't find where it gets added</em></p>",
        "id": 236405291,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619556478
    },
    {
        "content": "<p>yeah</p>",
        "id": 236405344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619556489
    },
    {
        "content": "<p>ugh I hate how this issue has taken me like 50 minutes to get to the point whereI can debug it :)</p>",
        "id": 236405381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619556500
    },
    {
        "content": "<p>Blame the slow builds</p>",
        "id": 236405466,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619556540
    },
    {
        "content": "<p>I do</p>",
        "id": 236405484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619556548
    },
    {
        "content": "<p>And on top, even if you only add a <code>dbg</code> statement, that will take a few minutes to build</p>",
        "id": 236405561,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619556584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thoughts?</p>",
        "id": 236409338,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619557666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> not really, I got pulled away for other meetings, I will poke a bit more now, and I should I think have time tomorrow morning</p>",
        "id": 236421020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619563183
    },
    {
        "content": "<p>Okay <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm around for a bit if you have questions</p>",
        "id": 236422577,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619564012
    },
    {
        "content": "<p>not a lot of debug printouts there, are there</p>",
        "id": 236424918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619565279
    },
    {
        "content": "<p>so.... <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ...</p>",
        "id": 236425364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619565541
    },
    {
        "content": "<p>this is the \"recursive erasing\" you are referring to, I think</p>",
        "id": 236425402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619565569
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/83ebb00645cfa3288546b947aa557e90cc355bfa/compiler/rustc_typeck/src/check/generator_interior.rs#L188-L196\">https://github.com/rust-lang/rust/blob/83ebb00645cfa3288546b947aa557e90cc355bfa/compiler/rustc_typeck/src/check/generator_interior.rs#L188-L196</a></p>",
        "id": 236425404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619565570
    },
    {
        "content": "<p>that's some pretty aggressive erasure</p>",
        "id": 236425434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619565584
    },
    {
        "content": "<p>I'm a bit surprised I accepted that code :)</p>",
        "id": 236425443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619565590
    },
    {
        "content": "<p>Whoops lol</p>",
        "id": 236425990,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619565894
    },
    {
        "content": "<p>\"aggresive erasure\" - new catchphrase</p>",
        "id": 236426032,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619565916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> still around?</p>",
        "id": 236428502,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619567500
    },
    {
        "content": "<p>That code, I think, doesn't matter <em>too</em> much in the grand scheme of things</p>",
        "id": 236428614,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619567559
    },
    {
        "content": "<p>The recursive bit I was talking about, I think, is the <code>RegionEraserVisitor</code></p>",
        "id": 236428661,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619567597
    },
    {
        "content": "<p>Specifically, found every <code>Binder&lt;T&gt;</code> it will anonymize the values and remove unused bound vars</p>",
        "id": 236428688,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619567623
    },
    {
        "content": "<p>But it's kind of important, because if a type has already had <code>erase_late_bound_regions</code> on it, that does <em>not</em> remove unused bound vars</p>",
        "id": 236428790,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619567686
    },
    {
        "content": "<p><em>But</em>, because there aren't and late-bound regions in it, if <code>erase_regions</code> is later call, the type won't be recursed into, and the unused bound vars won't be removed</p>",
        "id": 236428832,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619567725
    },
    {
        "content": "<p>well, adding that call to fold in the assertion didn't change anything, for sure</p>",
        "id": 236433514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619571238
    },
    {
        "content": "<p>does <code>fold_regions</code> not visit bound regions?</p>",
        "id": 236433556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619571246
    },
    {
        "content": "<p>ok, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, spawned this otu</p>",
        "id": 236506029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619616368
    },
    {
        "content": "<p>I'm only 50% here</p>",
        "id": 236506039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619616375
    },
    {
        "content": "<p>but I'm going to poke a bit more</p>",
        "id": 236506046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619616378
    },
    {
        "content": "<p>So, don't know if you read any of the other stream</p>",
        "id": 236506564,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619616581
    },
    {
        "content": "<p>But what do you think of this fix: <a href=\"https://github.com/jackh726/rust/tree/always-erase\">https://github.com/jackh726/rust/tree/always-erase</a></p>",
        "id": 236506595,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619616596
    },
    {
        "content": "<p>I didn't catch up on that one yet</p>",
        "id": 236508862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617463
    },
    {
        "content": "<p>Almost nothing is relevant except that I realized that fix</p>",
        "id": 236508907,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617488
    },
    {
        "content": "<p>I am weirded out by that fix</p>",
        "id": 236508928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617500
    },
    {
        "content": "<p>it suggests that this is not just an optiimization :)</p>",
        "id": 236508953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617508
    },
    {
        "content": "<p>Well</p>",
        "id": 236508971,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617517
    },
    {
        "content": "<p>I think the fix is correct</p>",
        "id": 236509005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617530
    },
    {
        "content": "<p>I see the problem</p>",
        "id": 236509010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617533
    },
    {
        "content": "<p>basically those flags indicated the <em>use</em> of regions</p>",
        "id": 236509025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617539
    },
    {
        "content": "<p>Importantly, now we can have bound vars without having the bound regions in the type</p>",
        "id": 236509030,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617541
    },
    {
        "content": "<p>yes, exactly</p>",
        "id": 236509037,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617545
    },
    {
        "content": "<p>but non-empty binders also count?</p>",
        "id": 236509038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617545
    },
    {
        "content": "<p>that should be another flag perhaps</p>",
        "id": 236509047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617549
    },
    {
        "content": "<p>Hehe that is one thing I said</p>",
        "id": 236509068,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617558
    },
    {
        "content": "<p>or just any non-empty binder could set <code>HAS_RE_LATE_BOUND</code></p>",
        "id": 236509079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617561
    },
    {
        "content": "<p>Probably easier</p>",
        "id": 236509145,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617575
    },
    {
        "content": "<p>I wonder if that'll mess with some normalizations that require <code>!data.has_escaping_bound_vars()</code></p>",
        "id": 236509232,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617610
    },
    {
        "content": "<p>I guess that uses the <code>innermost</code></p>",
        "id": 236509253,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617620
    },
    {
        "content": "<p>that seems distinct</p>",
        "id": 236509457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617683
    },
    {
        "content": "<p>Okay, so this fixes everything so far</p>",
        "id": 236509498,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617687
    },
    {
        "content": "<p>including the new issue</p>",
        "id": 236509535,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617702
    },
    {
        "content": "<p>I think we should set the <code>HAS_RE_LATE_BOUND</code> flag on anything with non-empty binders</p>",
        "id": 236509537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617703
    },
    {
        "content": "<p>I really hate how type flags don't have precise semantic meanings</p>",
        "id": 236509584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617720
    },
    {
        "content": "<p>Yes, I will do that. That's a <em>better</em> fix</p>",
        "id": 236509585,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617720
    },
    {
        "content": "<p>it's always hard to tell when it's appropriate to set them and if it'll break some code</p>",
        "id": 236509600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617730
    },
    {
        "content": "<p>but how i read that flag is \"a late-bound variable appears in this type somewhere'</p>",
        "id": 236509634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617744
    },
    {
        "content": "<p>in particular <em>not</em> 'appears free'</p>",
        "id": 236509644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617748
    },
    {
        "content": "<p>just 'appears'</p>",
        "id": 236509652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617751
    },
    {
        "content": "<p>(in contrast to \"escaping\", which means \"appears free')</p>",
        "id": 236509673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619617760
    },
    {
        "content": "<p>I don't think for that flag it matters</p>",
        "id": 236509693,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617771
    },
    {
        "content": "<p>The problem is not so much in the semantics, but in how they get uses</p>",
        "id": 236509739,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617797
    },
    {
        "content": "<p>I'm <em>hoping</em> that this only gets used for optimizations and not correctness</p>",
        "id": 236509883,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619617841
    },
    {
        "content": "<p>Ugh so...</p>",
        "id": 236510581,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619618141
    },
    {
        "content": "<p>There's <code>HAS_RE_LATE_BOUND</code></p>",
        "id": 236510631,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619618162
    },
    {
        "content": "<p>But not the equivalent for types or consts</p>",
        "id": 236510691,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619618172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I think we should generate that flag</p>",
        "id": 236511858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619618576
    },
    {
        "content": "<p><code>HAS_RE_LATE_BOUND</code>?</p>",
        "id": 236512110,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619618645
    },
    {
        "content": "<p>That's what I'm trying; building</p>",
        "id": 236512137,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619618655
    },
    {
        "content": "<p>Yes that works</p>",
        "id": 236512733,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619618880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/generator.20witness.20erasure.20.2383737/near/236512110\">said</a>:</p>\n<blockquote>\n<p><code>HAS_RE_LATE_BOUND</code>?</p>\n</blockquote>\n<p>right</p>",
        "id": 236512955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619618948
    },
    {
        "content": "<p>sorry, I meant to write <em>generalize</em></p>",
        "id": 236512978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619618957
    },
    {
        "content": "<p>I'm not sure where it's used though</p>",
        "id": 236512988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1619618963
    },
    {
        "content": "<p><code>fn has_late_bound_regions</code> is used in 3 places</p>",
        "id": 236513290,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619619052
    },
    {
        "content": "<p>One in <code>v0</code> mangling, when decided whether late bound regions need to be collected. (Optimization)</p>",
        "id": 236513347,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619619082
    },
    {
        "content": "<p>Another in <code>candidate_should_be_dropped_in_favor_of</code>, when setting <code>is_global</code></p>",
        "id": 236513441,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619619120
    },
    {
        "content": "<p>The is <em>potentially</em> a correctness thing</p>",
        "id": 236513493,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619619128
    },
    {
        "content": "<p>And the last in <code>wfcheck</code> <code>check_false_global_bounds</code>, which seems to be used to decide whether a predicate is \"global\" for trivial bounds, I think</p>",
        "id": 236513743,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619619230
    },
    {
        "content": "<p>This says to me that in something like <code>fn foo() where for&lt;'a&gt; u32: Sized {}</code> <code>for&lt;'a&gt; u32: Sized </code> would no longer be \"trivial\"</p>",
        "id": 236514075,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619619353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/pull/84653\">https://github.com/rust-lang/rust/pull/84653</a></p>",
        "id": 236514876,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619619631
    }
]