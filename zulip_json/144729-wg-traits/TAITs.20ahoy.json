[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> or others-- can we sync on Zuliptoday?</p>",
        "id": 247205934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308067
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>, sure!</p>",
        "id": 247205955,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627308086
    },
    {
        "content": "<p>zulip party sgtm</p>",
        "id": 247205960,
        "sender_full_name": "oli",
        "timestamp": 1627308090
    },
    {
        "content": "<p>I was going to ask, what's the plan with <code>min_type_alias_impl_trait</code>?</p>",
        "id": 247206014,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627308114
    },
    {
        "content": "<p>put it into a bunker next to a nuke and run</p>",
        "id": 247206085,
        "sender_full_name": "oli",
        "timestamp": 1627308132
    },
    {
        "content": "<p>lol</p>",
        "id": 247206104,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627308141
    },
    {
        "content": "<p>idk, we can still use it for syntactical gating</p>",
        "id": 247206112,
        "sender_full_name": "oli",
        "timestamp": 1627308147
    },
    {
        "content": "<p>but the usefulness of that is... unclear</p>",
        "id": 247206130,
        "sender_full_name": "oli",
        "timestamp": 1627308156
    },
    {
        "content": "<p>ok</p>",
        "id": 247206153,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627308166
    },
    {
        "content": "<p>like, we can't really protect against using it <em>everywhere</em> with the new system</p>",
        "id": 247206166,
        "sender_full_name": "oli",
        "timestamp": 1627308174
    },
    {
        "content": "<p>I think at this point the idea should be scrapped</p>",
        "id": 247206176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308180
    },
    {
        "content": "<p>and we should just run with <code>type_alias_impl_trait</code> and stabilize the \"whole thing\"</p>",
        "id": 247206192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308191
    },
    {
        "content": "<p>or move any remaining details to other feature gates</p>",
        "id": 247206199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308197
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 247206204,
        "sender_full_name": "oli",
        "timestamp": 1627308202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> how goes the hacking on the newer approach?</p>",
        "id": 247206241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308224
    },
    {
        "content": "<p>well... as we discussed on Friday, there is an unfortunate coupling of the current eager <code>instantiate</code> scheme that does both infer var generation and bound generation</p>",
        "id": 247206334,
        "sender_full_name": "oli",
        "timestamp": 1627308264
    },
    {
        "content": "<p>I am now splitting this up. The eager thing will still generate the infer vars, but the bound generation will happen after inference is done</p>",
        "id": 247206428,
        "sender_full_name": "oli",
        "timestamp": 1627308313
    },
    {
        "content": "<p>i.e., if we have <code>-&gt; impl Debug</code>, which we instantiate to <code>?X</code>, then \"bound generation\" means adding <code>?X: Debug</code>?</p>",
        "id": 247206459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308327
    },
    {
        "content": "<p>I've crossed a lot of time zones since Friday, so forgive me while I page things back in</p>",
        "id": 247206481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308335
    },
    {
        "content": "<p>yea</p>",
        "id": 247206505,
        "sender_full_name": "oli",
        "timestamp": 1627308350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247206428\">said</a>:</p>\n<blockquote>\n<p>I am now splitting this up. The eager thing will still generate the infer vars, but the bound generation will happen after inference is done</p>\n</blockquote>\n<p>unification does return a set of obligations</p>",
        "id": 247206516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308354
    },
    {
        "content": "<p>that's exactly it</p>",
        "id": 247206521,
        "sender_full_name": "oli",
        "timestamp": 1627308356
    },
    {
        "content": "<p>(the <code>InferOk</code> list)</p>",
        "id": 247206523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308358
    },
    {
        "content": "<p>so plausibly we could return the bounds in there, right?</p>",
        "id": 247206578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308365
    },
    {
        "content": "<p>hmm</p>",
        "id": 247206587,
        "sender_full_name": "oli",
        "timestamp": 1627308370
    },
    {
        "content": "<p>the problem was that we can't compute the bounds</p>",
        "id": 247206606,
        "sender_full_name": "oli",
        "timestamp": 1627308383
    },
    {
        "content": "<p>because <code>rustc_infer</code> doesn't have access to <code>rustc_trait_resolve</code></p>",
        "id": 247206624,
        "sender_full_name": "oli",
        "timestamp": 1627308395
    },
    {
        "content": "<p>it seems ok to generate the bounds later</p>",
        "id": 247206647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308412
    },
    {
        "content": "<p>but remind me why this matters :)</p>",
        "id": 247206655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308417
    },
    {
        "content": "<p>sec, I need to link to code to explain</p>",
        "id": 247206735,
        "sender_full_name": "oli",
        "timestamp": 1627308452
    },
    {
        "content": "<p>argml, vscode doesn't link to lines anymore, just to files</p>",
        "id": 247207126,
        "sender_full_name": "oli",
        "timestamp": 1627308642
    },
    {
        "content": "<p>anyway, so we have a FnCtxt for typeck to check an entire function. This currently eagerly instantiates opaque types from the return type</p>",
        "id": 247207200,
        "sender_full_name": "oli",
        "timestamp": 1627308680
    },
    {
        "content": "<p>the obligations generated during that (returned via <code>InferOk</code>) are stored in the FnCtxt</p>",
        "id": 247207306,
        "sender_full_name": "oli",
        "timestamp": 1627308729
    },
    {
        "content": "<p>are they handled specially somewhere?</p>",
        "id": 247207372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308769
    },
    {
        "content": "<p>The obligations are generated in <code>instantiate_opaque_types_in_map</code> or more precisely <code>fold_opaque_ty</code></p>",
        "id": 247207397,
        "sender_full_name": "oli",
        "timestamp": 1627308779
    },
    {
        "content": "<p>right</p>",
        "id": 247207410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308786
    },
    {
        "content": "<p>not really, they are just generated right when we create the inference variable</p>",
        "id": 247207426,
        "sender_full_name": "oli",
        "timestamp": 1627308803
    },
    {
        "content": "<p>but doing this at the same time is not necessary</p>",
        "id": 247207443,
        "sender_full_name": "oli",
        "timestamp": 1627308812
    },
    {
        "content": "<p>right</p>",
        "id": 247207450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308815
    },
    {
        "content": "<p>I definitely think we <em>can</em> do it later</p>",
        "id": 247207460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308821
    },
    {
        "content": "<p>I might have expected us to do it via <code>InferOk</code></p>",
        "id": 247207484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308836
    },
    {
        "content": "<p>but I am ok with either approach</p>",
        "id": 247207491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308840
    },
    {
        "content": "<p>at least for now</p>",
        "id": 247207540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308847
    },
    {
        "content": "<p>I imagine that you are thinking we'll have the <code>FnCtxt</code> iterate over the hashmap of \"instantiated opaque types\" in the inferctxt and add the relevant obligations, probably at the very end of typecheck?</p>",
        "id": 247207580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308875
    },
    {
        "content": "<p>yes</p>",
        "id": 247207591,
        "sender_full_name": "oli",
        "timestamp": 1627308881
    },
    {
        "content": "<p>we may have to do it more than once</p>",
        "id": 247207601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308885
    },
    {
        "content": "<p>or-- perhaps--</p>",
        "id": 247207608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308889
    },
    {
        "content": "<p>I would probably add that logic into the \"fulfill obligations if necessary\" callback-- let me find it</p>",
        "id": 247207657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247206655\">said</a>:</p>\n<blockquote>\n<p>but remind me why this matters <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>the problem is that inference happens in <code>rustc_infer</code>, but obligation generation needs to call code from <code>rustc_trait_selection</code>, and I don't want to even try to add a dependency to <code>rustc_infer</code></p>",
        "id": 247207809,
        "sender_full_name": "oli",
        "timestamp": 1627308974
    },
    {
        "content": "<p>ok ok, I'm not sure why they should ahve to, but I believe you</p>",
        "id": 247208163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309131
    },
    {
        "content": "<p>it may be possible to untangle them</p>",
        "id": 247208210,
        "sender_full_name": "oli",
        "timestamp": 1627309151
    },
    {
        "content": "<p>but it is very entangled right now</p>",
        "id": 247208216,
        "sender_full_name": "oli",
        "timestamp": 1627309158
    },
    {
        "content": "<p>so I would add the automatic generation here I think</p>",
        "id": 247208289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309194
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">select_obligations_where_possible</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fallback_has_occurred</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mutate_fulfillment_errors</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">traits</span>::<span class=\"n\">FulfillmentError</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247208296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309196
    },
    {
        "content": "<p>in <code>impl FnCtxt</code></p>",
        "id": 247208344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309204
    },
    {
        "content": "<p>I can't easily generate my github links this second</p>",
        "id": 247208379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309212
    },
    {
        "content": "<p>I see it</p>",
        "id": 247208397,
        "sender_full_name": "oli",
        "timestamp": 1627309218
    },
    {
        "content": "<p>but to explain my thinking:</p>",
        "id": 247208406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309220
    },
    {
        "content": "<p>we call that function when we want to try to solve obligations-- either because we have to (at the end of compilation) or because doing so may give us more typing hints</p>",
        "id": 247208458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309244
    },
    {
        "content": "<p>this does require us to be a bit smarter around the inference contxt, i.e., we'd have to be able to say \"have we already added the obligations? if so, don't do it again\"</p>",
        "id": 247208504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309261
    },
    {
        "content": "<p>but that's not hard</p>",
        "id": 247208517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309265
    },
    {
        "content": "<p>yea, that sounds like the right spot</p>",
        "id": 247208539,
        "sender_full_name": "oli",
        "timestamp": 1627309271
    },
    {
        "content": "<p>there are two things I like about this</p>",
        "id": 247208565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309281
    },
    {
        "content": "<ul>\n<li>in the future, I'd like us to be able to conclude that <code>?T: Debug</code> based on the fact that we're going to have to prove it later</li>\n</ul>",
        "id": 247208587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309295
    },
    {
        "content": "<p>for that to work, we'd need the <code>?T: Debug</code> obligation to be registered :)</p>",
        "id": 247208612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309308
    },
    {
        "content": "<p>and e.g. method dispatch (if I'm not mistaken) calls into this function</p>",
        "id": 247208656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309323
    },
    {
        "content": "<p>on the hopes that it will figure out what <code>?T</code> is</p>",
        "id": 247208696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309332
    },
    {
        "content": "<ul>\n<li>we may have to do obligation generation in rounds anyway:</li>\n</ul>",
        "id": 247208726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309351
    },
    {
        "content": "<p>the end of type check is this fixed point thing where we try to solve all the obligatios, then do some defaulting, and try to prove some more, etc</p>",
        "id": 247208783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309370
    },
    {
        "content": "<p>I could imagine that that process may wind up touching on some TAITs that are in scope</p>",
        "id": 247208812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309383
    },
    {
        "content": "<p>and hence growing the set</p>",
        "id": 247208820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309385
    },
    {
        "content": "<p>it'd be good to try and make a test case for that though :) sounds a bit complex lol</p>",
        "id": 247208840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309398
    },
    {
        "content": "<p>make sense?</p>",
        "id": 247208844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309401
    },
    {
        "content": "<p>yes, both points</p>",
        "id": 247208859,
        "sender_full_name": "oli",
        "timestamp": 1627309411
    },
    {
        "content": "<p>cool</p>",
        "id": 247209040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309482
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> not sure what you're up to :) test cases?</p>",
        "id": 247209123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> do you have a sense for timeline here?</p>",
        "id": 247209167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247209123\">said</a>:</p>\n<blockquote>\n<p>so <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> not sure what you're up to :) test cases?</p>\n</blockquote>\n<p>yes, I'm with the test cases</p>",
        "id": 247209196,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309547
    },
    {
        "content": "<p>there are tests that exist in the test suite but we don't have in the document</p>",
        "id": 247209273,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309567
    },
    {
        "content": "<p>I'm adding a section in a document I own, saying what they are them about</p>",
        "id": 247209298,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309579
    },
    {
        "content": "<p>but also, I'd be fine to get some coding tasks too if there's any to do</p>",
        "id": 247209331,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309596
    },
    {
        "content": "<p>oh one other point, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, as a final consistency check, we should check that the set of types for which we have instantiated obligations, and the set of types we have instantiated within inferctxt, are the same set :)</p>",
        "id": 247209481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309666
    },
    {
        "content": "<p>ok, that all sounds good <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 247209567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309691
    },
    {
        "content": "<p>as far as coding, I <em>think</em> right now we're still blocked on <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s refactoring before it makes sense to do anything else</p>",
        "id": 247209595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247209167\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> do you have a sense for timeline here?</p>\n</blockquote>\n<p>well, so far it has been an \"looks good, oh weird situation -&gt; lots more work\", this pattern may continue. Other than that, probably two weeks for the impl plus another for testing? Also got a weird ICE after removing the typeck dependency for tait information during mir borrowck: <a href=\"https://github.com/rust-lang/rust/issues/87455#issue-952299650\">https://github.com/rust-lang/rust/issues/87455#issue-952299650</a></p>",
        "id": 247209624,
        "sender_full_name": "oli",
        "timestamp": 1627309721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247209595\">said</a>:</p>\n<blockquote>\n<p>as far as coding, I <em>think</em> right now we're still blocked on <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span>'s refactoring before it makes sense to do anything else</p>\n</blockquote>\n<p>removing min_tait can be done in parallel</p>",
        "id": 247209647,
        "sender_full_name": "oli",
        "timestamp": 1627309734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247209481\">said</a>:</p>\n<blockquote>\n<p>oh one other point, <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span>, as a final consistency check, we should check that the set of types for which we have instantiated obligations, and the set of types we have instantiated within inferctxt, are the same set <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>that will require a bit of tracking overhead, but seems ok to do right now and remove later</p>",
        "id": 247209746,
        "sender_full_name": "oli",
        "timestamp": 1627309777
    },
    {
        "content": "<p>I'm imagining you have to do that anyway</p>",
        "id": 247209843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247209647\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247209595\">said</a>:</p>\n<blockquote>\n<p>as far as coding, I <em>think</em> right now we're still blocked on <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span>'s refactoring before it makes sense to do anything else</p>\n</blockquote>\n<p>removing min_tait can be done in parallel</p>\n</blockquote>\n<p>do you think we should remove the feature flag and just leave <code>type_alias_impl_trait</code>?</p>",
        "id": 247209884,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309825
    },
    {
        "content": "<p>I was thinking that, in the <code>FnCtxt</code>, there would be a hashset of \"all TAITs that have had their obligations created\"</p>",
        "id": 247209892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309829
    },
    {
        "content": "<p>and we would compare its contents against the set \"all TAITs taht have inference variables\"</p>",
        "id": 247209910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309840
    },
    {
        "content": "<p>ok, I can remove the feature flag then</p>",
        "id": 247209931,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309849
    },
    {
        "content": "<p>in order to create any obligations that are needed</p>",
        "id": 247209935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309850
    },
    {
        "content": "<p>is \"let binding impl trait\" fully removed?</p>",
        "id": 247209961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309862
    },
    {
        "content": "<p>yes</p>",
        "id": 247209974,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309867
    },
    {
        "content": "<p>also, I've adjusted our dashboard</p>",
        "id": 247210000,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309876
    },
    {
        "content": "<p>very nice</p>",
        "id": 247210003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309877
    },
    {
        "content": "<p>moved some tasks to complete</p>",
        "id": 247210008,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309880
    },
    {
        "content": "<p>also the work we were doing together is merged</p>",
        "id": 247210049,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309896
    },
    {
        "content": "<p>talking about <a href=\"https://github.com/rust-lang/rust/issues/87287\">#87287</a>, which closes <a href=\"https://github.com/rust-lang/rust/issues/86465\">#86465</a></p>",
        "id": 247210098,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247209935\">said</a>:</p>\n<blockquote>\n<p>in order to create any obligations that are needed</p>\n</blockquote>\n<p>I was considering just adding a \"todo\" queue that gets emptied every time we resolve some, but just having a set works, too</p>",
        "id": 247210101,
        "sender_full_name": "oli",
        "timestamp": 1627309916
    },
    {
        "content": "<p>and <a href=\"https://github.com/rust-lang/rust/issues/86410\">#86410</a> is merged too</p>",
        "id": 247210201,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> a to-do- queue could work, yeah, in that case checking for consistency is just checking that the queue is empty.</p>",
        "id": 247210768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627310185
    },
    {
        "content": "<p>cool, seems like not much to talk about then?</p>",
        "id": 247211224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627310388
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> can remove the <code>min_tait</code> feature gate</p>",
        "id": 247211287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627310405
    },
    {
        "content": "<p>I'm wondering then about the issue triage -- butI think we'll just revisit it after the \"reimplement the core engine\" work is done</p>",
        "id": 247211316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627310422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247211316\">said</a>:</p>\n<blockquote>\n<p>I'm wondering then about the issue triage -- butI think we'll just revisit it after the \"reimplement the core engine\" work is done</p>\n</blockquote>\n<p>someone already did a PR to close all the impl trait in bindings ICE issues by creating tests for them</p>",
        "id": 247211531,
        "sender_full_name": "oli",
        "timestamp": 1627310518
    },
    {
        "content": "<p>but yea, the rest needs a full review with the new information we have now</p>",
        "id": 247211624,
        "sender_full_name": "oli",
        "timestamp": 1627310538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247211531\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247211316\">said</a>:</p>\n<blockquote>\n<p>I'm wondering then about the issue triage -- butI think we'll just revisit it after the \"reimplement the core engine\" work is done</p>\n</blockquote>\n<p>someone already did a PR to close all the impl trait in bindings ICE issues by creating tests for them</p>\n</blockquote>\n<p>can you provide a link to that?</p>",
        "id": 247214364,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627311647
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/87383\">https://github.com/rust-lang/rust/pull/87383</a></p>",
        "id": 247215714,
        "sender_full_name": "oli",
        "timestamp": 1627312158
    },
    {
        "content": "<p>I caused an ICE with the mir borrowck/typeck decoupling. The fix is up in <a href=\"https://github.com/rust-lang/rust/pull/87483\">https://github.com/rust-lang/rust/pull/87483</a></p>",
        "id": 247501681,
        "sender_full_name": "oli",
        "timestamp": 1627498550
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> -- shall we chat here?</p>",
        "id": 249592631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629122646
    },
    {
        "content": "<p>I'm back from vacation today =)</p>",
        "id": 249592654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629122656
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 249592668,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629122659
    },
    {
        "content": "<p>welcome back</p>",
        "id": 249592673,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629122661
    },
    {
        "content": "<p>probably jus going to \"mark all as read\"</p>",
        "id": 249592678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629122664
    },
    {
        "content": "<p>so I'm going to need some context :)</p>",
        "id": 249592685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629122669
    },
    {
        "content": "<p><span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span></p>",
        "id": 249592691,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629122673
    },
    {
        "content": "<p>wise decision :)</p>",
        "id": 249592699,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629122677
    },
    {
        "content": "<p><a href=\"https://hackmd.io/FNLjLrevQcSKoIDAsf9ivQ\">https://hackmd.io/FNLjLrevQcSKoIDAsf9ivQ</a> &lt;-- hackmd</p>",
        "id": 249592723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629122689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> is the one that made the important progress here</p>",
        "id": 249592757,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629122706
    },
    {
        "content": "<p>I just did some minor stuff</p>",
        "id": 249592766,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629122712
    },
    {
        "content": "<p>but would be waiting also to take new tasks</p>",
        "id": 249592791,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629122723
    },
    {
        "content": "<p>ok</p>",
        "id": 249592797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629122727
    },
    {
        "content": "<p><code>min_type_alias_impl_trait</code> is also removed as it was the bindings</p>",
        "id": 249592900,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629122770
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> was doing some refactors</p>",
        "id": 249592918,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629122783
    },
    {
        "content": "<p>that's great</p>",
        "id": 249592926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629122789
    },
    {
        "content": "<p>I wonder if <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> is around now</p>",
        "id": 249592951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629122805
    },
    {
        "content": "<p>this is all I did :) + reviewing some of <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s PRs and minor cleanups</p>",
        "id": 249592994,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629122824
    },
    {
        "content": "<p>ahh I've also finished a table with the tests</p>",
        "id": 249593018,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629122840
    },
    {
        "content": "<p>going to share that a bit later, so I can polish it</p>",
        "id": 249593045,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629122849
    },
    {
        "content": "<p>ah, very cool</p>",
        "id": 249593055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629122854
    },
    {
        "content": "<p>and after that I guess I can implement missing tests</p>",
        "id": 249593062,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629122857
    },
    {
        "content": "<p>(got to run to the bathroom, brb)</p>",
        "id": 249593146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629122889
    },
    {
        "content": "<p>but I'd like to sync with you and <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> to see if you think we are covered with the tests that we have in the table</p>",
        "id": 249593150,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629122891
    },
    {
        "content": "<p>can you link your test hackmd again?</p>",
        "id": 249593452,
        "sender_full_name": "oli",
        "timestamp": 1629123030
    },
    {
        "content": "<p>on my end: the refactorings already mentioned by santiago, I managed to completely resolve the issues we had. The previous code required normalization, but we can just register obligations with the <code>InferCtxt</code> that state that said projections must hold instead of immediately trying to prove them</p>",
        "id": 249593602,
        "sender_full_name": "oli",
        "timestamp": 1629123107
    },
    {
        "content": "<p>sure, I will a bit later, let me polish it :)</p>",
        "id": 249593604,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629123109
    },
    {
        "content": "<p>back now</p>",
        "id": 249593718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629123162
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can you catch me up on what you've been up to?</p>",
        "id": 249593802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629123211
    },
    {
        "content": "<p>I am currently in a state where the opaque type system (without eagerly (or lazily) using inference vars for each opaque type) works to resolve the opaque type, but I'm still crashing badly because there seem to be some unresolved inference vars (e.g. within closures that are the defining type of the opaque type) that writeback cannot resolve.</p>",
        "id": 249593813,
        "sender_full_name": "oli",
        "timestamp": 1629123218
    },
    {
        "content": "<p>hmm</p>",
        "id": 249593893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629123248
    },
    {
        "content": "<p>is there a PR?</p>",
        "id": 249593900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629123254
    },
    {
        "content": "<p>no</p>",
        "id": 249593915,
        "sender_full_name": "oli",
        "timestamp": 1629123258
    },
    {
        "content": "<p>a branch? :</p>",
        "id": 249593982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629123297
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...oli-obk:lazy_tait2?expand=1\">https://github.com/rust-lang/rust/compare/master...oli-obk:lazy_tait2?expand=1</a></p>",
        "id": 249594019,
        "sender_full_name": "oli",
        "timestamp": 1629123315
    },
    {
        "content": "<p>was just pushing</p>",
        "id": 249594025,
        "sender_full_name": "oli",
        "timestamp": 1629123318
    },
    {
        "content": "<p>oh yea, one interesting thing I noticed is that the opaque type storage did not support snapshots/rollback</p>",
        "id": 249594084,
        "sender_full_name": "oli",
        "timestamp": 1629123352
    },
    {
        "content": "<p>I had to introduce that</p>",
        "id": 249594094,
        "sender_full_name": "oli",
        "timestamp": 1629123357
    },
    {
        "content": "<p>it didn't matter before, because all resolutions happened outside of snapshots <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 249594168,
        "sender_full_name": "oli",
        "timestamp": 1629123378
    },
    {
        "content": "<p>The last WIP commit is the actually interesting change, and the only commit that doesn't work, all others pass all tests</p>",
        "id": 249594224,
        "sender_full_name": "oli",
        "timestamp": 1629123417
    },
    {
        "content": "<p>ok</p>",
        "id": 249594339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629123481
    },
    {
        "content": "<p>I've just checked it out locally</p>",
        "id": 249594409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629123500
    },
    {
        "content": "<p>but I guess we can dig into the details later</p>",
        "id": 249594468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629123540
    },
    {
        "content": "<p>yea</p>",
        "id": 249594472,
        "sender_full_name": "oli",
        "timestamp": 1629123545
    },
    {
        "content": "<p>I'm adding updates to <a href=\"https://hackmd.io/FNLjLrevQcSKoIDAsf9ivQ\">https://hackmd.io/FNLjLrevQcSKoIDAsf9ivQ</a></p>",
        "id": 249594535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629123580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/249593602\">said</a>:</p>\n<blockquote>\n<p>on my end: the refactorings already mentioned by santiago, I managed to completely resolve the issues we had. The previous code required normalization, but we can just register obligations with the <code>InferCtxt</code> that state that said projections must hold instead of immediately trying to prove them</p>\n</blockquote>\n<p>have these all landed?</p>",
        "id": 249594692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629123647
    },
    {
        "content": "<p>no, part of that branch</p>",
        "id": 249594748,
        "sender_full_name": "oli",
        "timestamp": 1629123672
    },
    {
        "content": "<p>but we can land them on their own</p>",
        "id": 249594753,
        "sender_full_name": "oli",
        "timestamp": 1629123677
    },
    {
        "content": "<p>ok</p>",
        "id": 249594778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629123691
    },
    {
        "content": "<p>at this point I guess we are still basically blocked on landing this refactoring?</p>",
        "id": 249594796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629123698
    },
    {
        "content": "<p>yes</p>",
        "id": 249595083,
        "sender_full_name": "oli",
        "timestamp": 1629123824
    },
    {
        "content": "<p>then why don't I dig into this branch</p>",
        "id": 249595216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629123868
    },
    {
        "content": "<p>so... my current hypothesis is that the previous system that generated an inference var for opaque types in return position allowed the inference system to compare said inference var with more complex things like closures containing inference vars and this allowed everything to work out. The part that I can't figure out is why this doesn't work if we just use the first closure&lt;&gt;opaquety comparison to start replacing all opaque types of the same type with the closure from now on.</p>",
        "id": 249595850,
        "sender_full_name": "oli",
        "timestamp": 1629124170
    },
    {
        "content": "<p>is there a specific example that fails?</p>",
        "id": 249596006,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124224
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0282]: type annotations needed\n   --&gt; library/core/src/iter/adapters/mod.rs:194:54\n    |\n194 |         fn ok&lt;B, T&gt;(mut f: impl FnMut(B, T) -&gt; B) -&gt; impl FnMut(B, T) -&gt; Result&lt;B, !&gt; {\n    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for opaque type `impl FnMut&lt;(B, T)&gt;`\n</code></pre></div>",
        "id": 249596110,
        "sender_full_name": "oli",
        "timestamp": 1629124281
    },
    {
        "content": "<p>ok :) fun</p>",
        "id": 249596131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124298
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/73d96b090bb68065cd3a469b27cbd568e39bf0e7/library/core/src/iter/adapters/mod.rs#L194\">https://github.com/rust-lang/rust/blob/73d96b090bb68065cd3a469b27cbd568e39bf0e7/library/core/src/iter/adapters/mod.rs#L194</a></p>",
        "id": 249596164,
        "sender_full_name": "oli",
        "timestamp": 1629124316
    },
    {
        "content": "<p>have you tried to minimize it or anything</p>",
        "id": 249596167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124319
    },
    {
        "content": "<blockquote>\n<p>Resolver::fold_ty: input type <code>Closure(DefId(0:6779 ~ core[c54b]::iter::adapters::{impl#0}::fold::ok::{closure#0}), [B, T, impl FnMut(B, T) -&gt; B, _, extern \"rust-call\" fn((_, _)) -&gt; _, _])</code> not fully resolvable: unconstrained type</p>\n</blockquote>",
        "id": 249596223,
        "sender_full_name": "oli",
        "timestamp": 1629124332
    },
    {
        "content": "<p>well... I was debating whether to feature gate this and then write tests</p>",
        "id": 249596252,
        "sender_full_name": "oli",
        "timestamp": 1629124350
    },
    {
        "content": "<p>I have a hunch</p>",
        "id": 249596300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124386
    },
    {
        "content": "<p>I wonder if what is going wrong has to do with the \"infer closure signature\" logic</p>",
        "id": 249596331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124399
    },
    {
        "content": "<p>note that we can resolve it to <code>[B, T, impl FnMut(B, T) -&gt; B, _, extern \"rust-call\" fn((B, T)) -&gt; Result&lt;T, _&gt;, _]</code> or maybe even a bit further</p>",
        "id": 249596351,
        "sender_full_name": "oli",
        "timestamp": 1629124410
    },
    {
        "content": "<p>looks like I am reproducing the same failure now</p>",
        "id": 249596368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124419
    },
    {
        "content": "<p>if you move the <code>visit_opaque_types</code> call before the <code>visit_body</code> in <code>writeback.rs</code>, you get the partial resolution</p>",
        "id": 249596513,
        "sender_full_name": "oli",
        "timestamp": 1629124472
    },
    {
        "content": "<p>from the logs:</p>",
        "id": 249596583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124513
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>(#0), None), span: library/core/src/iter/adapters/mod.rs:195:13: 195:40 (#0) },expected=ExpectHasType(impl ops::function::FnMut&lt;(B, T)&gt;))\nDEBUG rustc_typeck::check::closure deduce_expectations_from_expected_type(expected_ty=impl ops::function::FnMut&lt;(B, T)&gt;)\nDEBUG rustc_typeck::check::closure check_closure(opt_kind=None, expected_sig=None)\nDEBUG rustc_typeck::check::closure sig_of_closure_no_expectation() &lt;------ this line in particular\n</code></pre></div>",
        "id": 249596603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124528
    },
    {
        "content": "<p>hmm</p>",
        "id": 249596622,
        "sender_full_name": "oli",
        "timestamp": 1629124542
    },
    {
        "content": "<p>I believe how this <em>used</em> to work</p>",
        "id": 249596635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124549
    },
    {
        "content": "<p>is that (a) we have an inference variable as the expected type</p>",
        "id": 249596651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124558
    },
    {
        "content": "<p>(b) we have pending obligations in the fulfillment context like <code>?X: FnMut(...)</code></p>",
        "id": 249596724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124576
    },
    {
        "content": "<p>from which we can deduce the signature</p>",
        "id": 249596738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124589
    },
    {
        "content": "<p>that's the thing, we don't have such obligations</p>",
        "id": 249596745,
        "sender_full_name": "oli",
        "timestamp": 1629124594
    },
    {
        "content": "<p>like, even before we don't generate them afaict</p>",
        "id": 249596753,
        "sender_full_name": "oli",
        "timestamp": 1629124604
    },
    {
        "content": "<p>that doesn't seem correct</p>",
        "id": 249596781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124620
    },
    {
        "content": "<p>DEBUG rustc_typeck:<span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span>:closure deduce_expectations_from_expected_type(expected_ty=impl ops::function::FnMut&lt;(B, T)&gt;)</p>",
        "id": 249596802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124630
    },
    {
        "content": "<p>my change is minimal, it does not do less</p>",
        "id": 249596806,
        "sender_full_name": "oli",
        "timestamp": 1629124631
    },
    {
        "content": "<p>that's interesting</p>",
        "id": 249596807,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124632
    },
    {
        "content": "<p>it just doesn't use the inference var, but uses the first type we compare with</p>",
        "id": 249596830,
        "sender_full_name": "oli",
        "timestamp": 1629124646
    },
    {
        "content": "<p>your change to what?</p>",
        "id": 249596862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124661
    },
    {
        "content": "<p>maybe I need to read what your commit does :)</p>",
        "id": 249596874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124668
    },
    {
        "content": "<p>my last commit</p>",
        "id": 249596877,
        "sender_full_name": "oli",
        "timestamp": 1629124669
    },
    {
        "content": "<p>it comments out one eager return type instantiation and uses the same logic that used to be there for lazy instantiation with a concrete type instead of an inference var</p>",
        "id": 249596974,
        "sender_full_name": "oli",
        "timestamp": 1629124705
    },
    {
        "content": "<p>I can probably split up that commit to make it more obvious what is not a functional change and what is, but this was my local WIP <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 249597040,
        "sender_full_name": "oli",
        "timestamp": 1629124742
    },
    {
        "content": "<p>is the assumption in <code>replace_if_defining</code> that this <code>opaque_type_storage</code> table will be populated</p>",
        "id": 249597077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124761
    },
    {
        "content": "<p>yes</p>",
        "id": 249597093,
        "sender_full_name": "oli",
        "timestamp": 1629124774
    },
    {
        "content": "<p>presumably this is an incremental step towards the final goal?</p>",
        "id": 249597098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124775
    },
    {
        "content": "<p>no, the first one puts something in</p>",
        "id": 249597120,
        "sender_full_name": "oli",
        "timestamp": 1629124788
    },
    {
        "content": "<p>all future uses just compare with the value that is there</p>",
        "id": 249597139,
        "sender_full_name": "oli",
        "timestamp": 1629124797
    },
    {
        "content": "<p>oic</p>",
        "id": 249597191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124805
    },
    {
        "content": "<p>which I assumed would work due to all the inference logic that happens on comparisons</p>",
        "id": 249597230,
        "sender_full_name": "oli",
        "timestamp": 1629124827
    },
    {
        "content": "<p>but even if I lazily generate an inference var, we get the same error</p>",
        "id": 249597272,
        "sender_full_name": "oli",
        "timestamp": 1629124853
    },
    {
        "content": "<p>should've probably started with that information -.-</p>",
        "id": 249597289,
        "sender_full_name": "oli",
        "timestamp": 1629124859
    },
    {
        "content": "<p>I think the problem is more <em>when</em> it is happening</p>",
        "id": 249597293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124861
    },
    {
        "content": "<p>ah wait</p>",
        "id": 249597361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/249597139\">said</a>:</p>\n<blockquote>\n<p>all future uses just compare with the value that is there</p>\n</blockquote>\n<p>I see</p>",
        "id": 249597370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124902
    },
    {
        "content": "<p>so you never generate an inference variable, right</p>",
        "id": 249597396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/249597272\">said</a>:</p>\n<blockquote>\n<p>but even if I lazily generate an inference var, we get the same error</p>\n</blockquote>\n<p>I was here a week ago, but then decided to implement what we actually discussed, and ended up in the same position again</p>",
        "id": 249597401,
        "sender_full_name": "oli",
        "timestamp": 1629124916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/249597396\">said</a>:</p>\n<blockquote>\n<p>so you never generate an inference variable, right</p>\n</blockquote>\n<p>no</p>",
        "id": 249597430,
        "sender_full_name": "oli",
        "timestamp": 1629124923
    },
    {
        "content": "<p>so</p>",
        "id": 249597484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124948
    },
    {
        "content": "<p>the closure inference logic has some very specific reasoning</p>",
        "id": 249597496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124955
    },
    {
        "content": "<p><em>probably</em> the right thing to do, given this new pathway</p>",
        "id": 249597511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124967
    },
    {
        "content": "<p>is to expand it to cover <code>Opaque</code> types</p>",
        "id": 249597523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124977
    },
    {
        "content": "<p>and/or to invoke <code>replace_if_defining</code>, but in this case we woudln't have much to replace it with</p>",
        "id": 249597546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124988
    },
    {
        "content": "<p>check out <code>deduce_expectations_from_expected_type</code></p>",
        "id": 249597568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629124998
    },
    {
        "content": "<p>note that it <em>specifically</em> looks for unresolved inference variables</p>",
        "id": 249597604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125014
    },
    {
        "content": "<p>the logs indicate that the expected_ty is now now an opaque type</p>",
        "id": 249597708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125051
    },
    {
        "content": "<p>I think we could treat that the same as we treat <code>Dynamic</code></p>",
        "id": 249597718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125058
    },
    {
        "content": "<p>and it should work ok</p>",
        "id": 249597723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125061
    },
    {
        "content": "<p>oh</p>",
        "id": 249598054,
        "sender_full_name": "oli",
        "timestamp": 1629125213
    },
    {
        "content": "<p>yea, <code>deduce_expectations_from_expected_type</code> sounds very much like it is the culprit</p>",
        "id": 249598099,
        "sender_full_name": "oli",
        "timestamp": 1629125231
    },
    {
        "content": "<p>do you see what I mean by treat it like we treat dynamic?</p>",
        "id": 249598403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125357
    },
    {
        "content": "<p>not literally the same, but basically look up the obligations from the <code>impl Trait</code> and dedcide it from there</p>",
        "id": 249598435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125370
    },
    {
        "content": "<p>not yet, I am comparing dynamic with infer to see what these do</p>",
        "id": 249598440,
        "sender_full_name": "oli",
        "timestamp": 1629125371
    },
    {
        "content": "<p>do you understand the purpose of the fn overall?</p>",
        "id": 249598749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125497
    },
    {
        "content": "<p>yes, but I don't see how the inference var got its projections</p>",
        "id": 249598773,
        "sender_full_name": "oli",
        "timestamp": 1629125515
    },
    {
        "content": "<p>I just found <code>fcx.demand_suptype(span, revealed_ret_ty, actual_return_ty);</code></p>",
        "id": 249598834,
        "sender_full_name": "oli",
        "timestamp": 1629125527
    },
    {
        "content": "<p>but I think that is just never type related</p>",
        "id": 249598929,
        "sender_full_name": "oli",
        "timestamp": 1629125585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/249598773\">said</a>:</p>\n<blockquote>\n<p>yes, but I don't see how the inference var got its projections</p>\n</blockquote>\n<p>do you mean obligations?</p>",
        "id": 249598974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125617
    },
    {
        "content": "<p>uh yea</p>",
        "id": 249598988,
        "sender_full_name": "oli",
        "timestamp": 1629125626
    },
    {
        "content": "<p>obligations</p>",
        "id": 249598991,
        "sender_full_name": "oli",
        "timestamp": 1629125628
    },
    {
        "content": "<p>well</p>",
        "id": 249598999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125633
    },
    {
        "content": "<p>let me send you a link</p>",
        "id": 249599138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> wasn't it <a href=\"https://github.com/rust-lang/rust/blob/73d96b090bb68065cd3a469b27cbd568e39bf0e7/compiler/rustc_trait_selection/src/opaque_types.rs#L1030-L1042\">this code</a>?</p>",
        "id": 249599334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125791
    },
    {
        "content": "<p>that never touched the inference var</p>",
        "id": 249599430,
        "sender_full_name": "oli",
        "timestamp": 1629125843
    },
    {
        "content": "<p>I'm not sure what you mean</p>",
        "id": 249599444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125850
    },
    {
        "content": "<p>by \"touched\", specifically</p>",
        "id": 249599503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125881
    },
    {
        "content": "<p>well, \"used\" or did anything with it. That function is completely independent of the inference var generated for the opaque type</p>",
        "id": 249599585,
        "sender_full_name": "oli",
        "timestamp": 1629125905
    },
    {
        "content": "<p>ok so -- <a href=\"https://github.com/rust-lang/rust/blob/73d96b090bb68065cd3a469b27cbd568e39bf0e7/compiler/rustc_trait_selection/src/opaque_types.rs#L967-L970\">here</a> is where we created the inference var</p>",
        "id": 249599639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125925
    },
    {
        "content": "<p>and we <a href=\"https://github.com/rust-lang/rust/blob/73d96b090bb68065cd3a469b27cbd568e39bf0e7/compiler/rustc_trait_selection/src/opaque_types.rs#L991\">insert</a> that into this map here</p>",
        "id": 249599669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629125937
    },
    {
        "content": "<p>that map is only ever used for the fallback</p>",
        "id": 249599775,
        "sender_full_name": "oli",
        "timestamp": 1629125991
    },
    {
        "content": "<p>if the opaque type is used opaquely</p>",
        "id": 249599788,
        "sender_full_name": "oli",
        "timestamp": 1629125999
    },
    {
        "content": "<p>yeah I'm reading, I admit it's a bit curious, the code doesn't <em>quite</em> look like I expected</p>",
        "id": 249599853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629126007
    },
    {
        "content": "<p>in <code>fn foo(x: Opaque) -&gt; Opaque { x }</code></p>",
        "id": 249599879,
        "sender_full_name": "oli",
        "timestamp": 1629126011
    },
    {
        "content": "<p>and that logic (and the map) will go away completely with the lazy system</p>",
        "id": 249599925,
        "sender_full_name": "oli",
        "timestamp": 1629126026
    },
    {
        "content": "<p>do you have a copy of master lying around? I'd be curious to see what result gets printed by <a href=\"https://github.com/rust-lang/rust/blob/73d96b090bb68065cd3a469b27cbd568e39bf0e7/compiler/rustc_trait_selection/src/opaque_types.rs#L1040\">this debug statement</a></p>",
        "id": 249599930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629126029
    },
    {
        "content": "<p>I don't have one ready right now</p>",
        "id": 249600062,
        "sender_full_name": "oli",
        "timestamp": 1629126082
    },
    {
        "content": "<p>I guess I can just checkout HEAD^ on your branch</p>",
        "id": 249600099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629126098
    },
    {
        "content": "<p>oh</p>",
        "id": 249600119,
        "sender_full_name": "oli",
        "timestamp": 1629126104
    },
    {
        "content": "<p>heh I see what you are saying</p>",
        "id": 249600159,
        "sender_full_name": "oli",
        "timestamp": 1629126118
    },
    {
        "content": "<p>yes, you can see this even on the lazy_tait2 branch</p>",
        "id": 249600233,
        "sender_full_name": "oli",
        "timestamp": 1629126135
    },
    {
        "content": "<p>and yes, this is how obligations on the inference var get generated</p>",
        "id": 249600256,
        "sender_full_name": "oli",
        "timestamp": 1629126145
    },
    {
        "content": "<p>oof</p>",
        "id": 249600261,
        "sender_full_name": "oli",
        "timestamp": 1629126147
    },
    {
        "content": "<p>this recursion has gotten me a few times</p>",
        "id": 249600290,
        "sender_full_name": "oli",
        "timestamp": 1629126155
    },
    {
        "content": "<p>right right, I see it now</p>",
        "id": 249600433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629126210
    },
    {
        "content": "<p>so... while we still do the same thing for non-inference vars, that is obviously not enough, as we need to do the special closure logic as you said</p>",
        "id": 249600436,
        "sender_full_name": "oli",
        "timestamp": 1629126212
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/73d96b090bb68065cd3a469b27cbd568e39bf0e7/compiler/rustc_trait_selection/src/opaque_types.rs#L987-L990\">this line</a> does the store</p>",
        "id": 249600438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629126212
    },
    {
        "content": "<p>I understand now what happens! wheeee! thanks <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 249600466,
        "sender_full_name": "oli",
        "timestamp": 1629126224
    },
    {
        "content": "<p>great!</p>",
        "id": 249600478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629126229
    },
    {
        "content": "<p>the code threw me for a bit too with that recursion :)</p>",
        "id": 249600520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629126242
    },
    {
        "content": "<p>but it all makes sense now</p>",
        "id": 249600558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629126257
    },
    {
        "content": "<p>ok... I have learned a lot about <code>InferCtxt</code> probing and fallback in the last 10 days. And I finally understand where our troubles are coming from. When we haven't found a concrete type for an opaque type yet, we may go into a probe that compares a random type with our opaque type. This will always succeed if we are in a defining use scope, as we will assume that this is the hidden type. So all <code>eq</code>/<code>sub</code>/<code>...</code> probes from a yet unknown opaque type against anything else will succeed, and register the obligations of that opaque type for whatever we temporarily set it to. Then we revert the probe, but keep the new obligations (I think? That's what I assumed and this is what the errors seem to hint at).</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0309]: the parameter type `R` may not live long enough\n  --&gt; library/core/src/iter/adapters/enumerate.rs:82:14\n   |\n82 |         ) -&gt; impl FnMut(Acc, T) -&gt; R + &#39;a {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: consider adding an explicit lifetime bound `R: &#39;a`...\n</code></pre></div>",
        "id": 250005644,
        "sender_full_name": "oli",
        "timestamp": 1629388212
    },
    {
        "content": "<p>so... my guess is that what we should be doing is not generate obligations so eagerly? I'm currently trying to find out where these obligations leak from the probe..</p>",
        "id": 250006039,
        "sender_full_name": "oli",
        "timestamp": 1629388380
    },
    {
        "content": "<p>found it... yea, we shouldn't generate obligations when we hit a defining use</p>",
        "id": 250010038,
        "sender_full_name": "oli",
        "timestamp": 1629390194
    },
    {
        "content": "<p>ugh</p>",
        "id": 250052834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629409180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> zoom or zulip?</p>",
        "id": 250355633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629727319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> same for me</p>",
        "id": 250355794,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629727380
    },
    {
        "content": "<p>OK, well, i'm in Zoom but happy to do Zulip</p>",
        "id": 250355925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629727435
    },
    {
        "content": "<p><a href=\"https://hackmd.io/y1HwFSBUQS2ZKrSFuQ0Dnw?view\">https://hackmd.io/y1HwFSBUQS2ZKrSFuQ0Dnw?view</a></p>",
        "id": 250356330,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1629727615
    },
    {
        "content": "<p><a href=\"https://hackmd.io/FNLjLrevQcSKoIDAsf9ivQ?edit\">https://hackmd.io/FNLjLrevQcSKoIDAsf9ivQ?edit</a></p>",
        "id": 250356418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629727660
    },
    {
        "content": "<p><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">from_generator</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">gen</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Return</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">Generator</span><span class=\"o\">&lt;</span><span class=\"n\">ResumeTy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Yield</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">GenFuture</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Generator</span><span class=\"o\">&lt;</span><span class=\"n\">ResumeTy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Yield</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// We rely on the fact that async/await futures are immovable in order to create</span>\n<span class=\"w\">    </span><span class=\"c1\">// self-referential borrows in the underlying generator.</span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Generator</span><span class=\"o\">&lt;</span><span class=\"n\">ResumeTy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Yield</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"nb\">Unpin</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">GenFuture</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Generator</span><span class=\"o\">&lt;</span><span class=\"n\">ResumeTy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Yield</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">GenFuture</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">Return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">poll</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Poll</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Output</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// SAFETY: Safe because we're !Unpin + !Drop, and this is just a field projection.</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">gen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Pin</span>::<span class=\"n\">map_unchecked_mut</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">// Resume the generator, turning the `&amp;mut Context` into a `NonNull` raw pointer. The</span>\n<span class=\"w\">            </span><span class=\"c1\">// `.await` lowering will safely cast that back to a `&amp;mut Context`.</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">resume</span><span class=\"p\">(</span><span class=\"n\">ResumeTy</span><span class=\"p\">(</span><span class=\"n\">NonNull</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">).</span><span class=\"n\">cast</span>::<span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">GeneratorState</span>::<span class=\"n\">Yielded</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Poll</span>::<span class=\"n\">Pending</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">GeneratorState</span>::<span class=\"n\">Complete</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Poll</span>::<span class=\"n\">Ready</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">GenFuture</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0391]: cycle detected when computing type of `from_generator::{opaque#0}`\n  --&gt; /home/ubuntu/rust/src/test/ui/lazy-type-alias-impl-trait/freeze_cycle.rs:20:43\n   |\nLL | pub const fn from_generator&lt;T&gt;(gen: T) -&gt; impl Future&lt;Output = T::Return&gt;\n   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nnote: ...which requires borrow-checking `from_generator`...\n  --&gt; /home/ubuntu/rust/src/test/ui/lazy-type-alias-impl-trait/freeze_cycle.rs:20:1\n   |\nLL | / pub const fn from_generator&lt;T&gt;(gen: T) -&gt; impl Future&lt;Output = T::Return&gt;\nLL | | where\nLL | |     T: Generator&lt;ResumeTy, Yield = ()&gt;,\n   | |_______________________________________^\nnote: ...which requires processing `from_generator`...\n  --&gt; /home/ubuntu/rust/src/test/ui/lazy-type-alias-impl-trait/freeze_cycle.rs:20:1\n   |\nLL | / pub const fn from_generator&lt;T&gt;(gen: T) -&gt; impl Future&lt;Output = T::Return&gt;\nLL | | where\nLL | |     T: Generator&lt;ResumeTy, Yield = ()&gt;,\n   | |_______________________________________^\nnote: ...which requires const checking `from_generator`...\n  --&gt; /home/ubuntu/rust/src/test/ui/lazy-type-alias-impl-trait/freeze_cycle.rs:20:1\n   |\nLL | / pub const fn from_generator&lt;T&gt;(gen: T) -&gt; impl Future&lt;Output = T::Return&gt;\nLL | | where\nLL | |     T: Generator&lt;ResumeTy, Yield = ()&gt;,\n   | |_______________________________________^\n   = note: ...which requires computing whether `impl std::future::Future` is freeze...\n   = note: ...which requires evaluating trait selection obligation `impl std::future::Future: std::marker::Freeze`...\n   = note: ...which again requires computing type of `from_generator::{opaque#0}`, completing the cycle\nnote: cycle used when checking item types in top-level module\n  --&gt; /home/ubuntu/rust/src/test/ui/lazy-type-alias-impl-trait/freeze_cycle.rs:2:1\n   |\nLL | / #![feature(lazy_impl_trait)]\nLL | | #![feature(gen_future, generator_trait, negative_impls, const_fn_trait_bound, const_impl_trait)]\nLL | |\nLL | | use std::ops::{Generator, GeneratorState};\n...  |\nLL | |     GenFuture(gen)\nLL | | }\n   | |_^\n</code></pre></div>\n<p>with lazy tait, because the MIR now contains lots of \"ty::Opaque\" instead of already knowing the hidden type due to typeck having run earlier. This causes const checking to ask whether that opaque type is freeze, which causes <code>type_of</code> to be called on the opaque type, but the opaque type is defined by the current function</p>",
        "id": 251233113,
        "sender_full_name": "oli",
        "timestamp": 1630331874
    },
    {
        "content": "<p>Oh, I should mention that mir borrowck runs <em>after</em> const checking, so we haven't done type inference yet</p>",
        "id": 251233628,
        "sender_full_name": "oli",
        "timestamp": 1630332051
    },
    {
        "content": "<p>hey folks</p>",
        "id": 251233654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332059
    },
    {
        "content": "<p>if we can chat on Zulip today, I'd be obliged</p>",
        "id": 251233667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332065
    },
    {
        "content": "<p>sgtm</p>",
        "id": 251233678,
        "sender_full_name": "oli",
        "timestamp": 1630332069
    },
    {
        "content": "<p>good news: I have found the lifetime issue, so all 3 examples we extracted from libcore last time work now</p>",
        "id": 251233838,
        "sender_full_name": "oli",
        "timestamp": 1630332132
    },
    {
        "content": "<p>bad news: see above <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 251233850,
        "sender_full_name": "oli",
        "timestamp": 1630332137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/251233838\">said</a>:</p>\n<blockquote>\n<p>good news: I have found the lifetime issue, so all 3 examples we extracted from libcore last time work now</p>\n</blockquote>\n<p>oooh, great</p>",
        "id": 251234007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/251233850\">said</a>:</p>\n<blockquote>\n<p>bad news: see above :D</p>\n</blockquote>\n<p>ok</p>",
        "id": 251234010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332207
    },
    {
        "content": "<p>I just realized there was a \"see more\" on that</p>",
        "id": 251234239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332292
    },
    {
        "content": "<p>(also, cc <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>)</p>",
        "id": 251234256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332297
    },
    {
        "content": "<p>basically, without lazy tait, the <code>RETURN_PLACE</code> has type <code>GenFuture</code></p>",
        "id": 251234365,
        "sender_full_name": "oli",
        "timestamp": 1630332351
    },
    {
        "content": "<p>with lazy tait, it has type <code>impl Future&lt;Output = T::Return&gt;</code></p>",
        "id": 251234517,
        "sender_full_name": "oli",
        "timestamp": 1630332408
    },
    {
        "content": "<p>yeah; I'm thinking a bit to myself about why this is</p>",
        "id": 251234538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332416
    },
    {
        "content": "<p>because lazy tait only resolves these once it gets to mir borrowck</p>",
        "id": 251234559,
        "sender_full_name": "oli",
        "timestamp": 1630332424
    },
    {
        "content": "<p>when MIR build runs, we have computed <em>the function's</em> view at least</p>",
        "id": 251234563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332427
    },
    {
        "content": "<p>yea, we technically have this information due to typeck having run before building MIR</p>",
        "id": 251234603,
        "sender_full_name": "oli",
        "timestamp": 1630332445
    },
    {
        "content": "<p>well</p>",
        "id": 251234615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332452
    },
    {
        "content": "<p>we have a partial view on it</p>",
        "id": 251234622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332455
    },
    {
        "content": "<p>i.e., we know the constraints introduced by this function</p>",
        "id": 251234650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332465
    },
    {
        "content": "<p>we also have done some type inference</p>",
        "id": 251234698,
        "sender_full_name": "oli",
        "timestamp": 1630332482
    },
    {
        "content": "<p>in Ye Olde Days, we would store this \"interview view\" of the signature separately</p>",
        "id": 251234737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332486
    },
    {
        "content": "<p>right?</p>",
        "id": 251234762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332498
    },
    {
        "content": "<p>i.e., in \"eager TAIT\" (or on master)</p>",
        "id": 251234787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332512
    },
    {
        "content": "<p>yea, we had the signature from the view from within the function</p>",
        "id": 251234823,
        "sender_full_name": "oli",
        "timestamp": 1630332527
    },
    {
        "content": "<p>presumably we <em>could</em> apply the substitutions still</p>",
        "id": 251234884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332553
    },
    {
        "content": "<p>i.e., at the end of type check, we can go and replace the \"TAIT\" with the type that we inferred locally</p>",
        "id": 251234928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332572
    },
    {
        "content": "<p>yea</p>",
        "id": 251234949,
        "sender_full_name": "oli",
        "timestamp": 1630332580
    },
    {
        "content": "<p>then we still know that we will go and do a global check that all fns have defined the same type</p>",
        "id": 251234955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332583
    },
    {
        "content": "<p>that is not even the issue</p>",
        "id": 251234992,
        "sender_full_name": "oli",
        "timestamp": 1630332601
    },
    {
        "content": "<p>let's stay within a single function for now</p>",
        "id": 251235050,
        "sender_full_name": "oli",
        "timestamp": 1630332612
    },
    {
        "content": "<p>I know it's not the issue here</p>",
        "id": 251235058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332615
    },
    {
        "content": "<p>just trying to put the whole thing together in my head</p>",
        "id": 251235075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332624
    },
    {
        "content": "<p>right</p>",
        "id": 251235077,
        "sender_full_name": "oli",
        "timestamp": 1630332627
    },
    {
        "content": "<p>And of course there's been this question of whether we can \"defer\" auto trait resolution</p>",
        "id": 251235165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332670
    },
    {
        "content": "<p>which would be useful also for generators</p>",
        "id": 251235181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332679
    },
    {
        "content": "<p>it interacts poorly with specialization</p>",
        "id": 251235190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332683
    },
    {
        "content": "<p>so... the reason master mir borrock has all this whacky logic around opaque types is that there are no more opaque types that the current function constrains to a concrete hidden type</p>",
        "id": 251235207,
        "sender_full_name": "oli",
        "timestamp": 1630332690
    },
    {
        "content": "<p>and with lazy tait, a lot of it goes away</p>",
        "id": 251235245,
        "sender_full_name": "oli",
        "timestamp": 1630332708
    },
    {
        "content": "<p>because there is no distinction of this kind?</p>",
        "id": 251235315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332725
    },
    {
        "content": "<p>I see</p>",
        "id": 251235329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332731
    },
    {
        "content": "<p>well wait</p>",
        "id": 251235351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332739
    },
    {
        "content": "<p>it will go away because mir borrowck will actually see the opaque types and do the \"proper thing\"</p>",
        "id": 251235356,
        "sender_full_name": "oli",
        "timestamp": 1630332741
    },
    {
        "content": "<p>there's another alternative here</p>",
        "id": 251235380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332752
    },
    {
        "content": "<p>and not have to patch up the world after it's done</p>",
        "id": 251235387,
        "sender_full_name": "oli",
        "timestamp": 1630332755
    },
    {
        "content": "<p>but first let me repeat back to you what you are saying</p>",
        "id": 251235407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332765
    },
    {
        "content": "<p>to make sure I understand it</p>",
        "id": 251235413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332768
    },
    {
        "content": "<p>I think you are saying that: it was painful before because the types that MIR borrowck didn't contain the impl trait</p>",
        "id": 251235458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332786
    },
    {
        "content": "<p>but rather they had the hidden type in its place</p>",
        "id": 251235479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332792
    },
    {
        "content": "<p>and we had to kind of \"reconstruct\" which impl trait that came from etc</p>",
        "id": 251235505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332804
    },
    {
        "content": "<p>and in general we had to juggle this logic, where sometimes we saw the hidden type, and sometimes we didn't</p>",
        "id": 251235543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332818
    },
    {
        "content": "<p>ok, that makes sense to me, and I agree that is worth keeping</p>",
        "id": 251235653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332847
    },
    {
        "content": "<blockquote>\n<p>= note: ...which requires computing whether <code>impl std::future::Future</code> is freeze...</p>\n</blockquote>",
        "id": 251235705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332867
    },
    {
        "content": "<p>yea, and the only place we actually checked any of this was in return types, so I'm not even sure how it would interact with mentioning opaque types in local variable's types</p>",
        "id": 251235709,
        "sender_full_name": "oli",
        "timestamp": 1630332869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/251235705\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>= note: ...which requires computing whether <code>impl std::future::Future</code> is freeze...</p>\n</blockquote>\n</blockquote>\n<p>we can delay this, const checking doesn't actually need to prove this immediately</p>",
        "id": 251235771,
        "sender_full_name": "oli",
        "timestamp": 1630332892
    },
    {
        "content": "<p>it just needs to be sure this will get proven before the code compiles</p>",
        "id": 251235830,
        "sender_full_name": "oli",
        "timestamp": 1630332913
    },
    {
        "content": "<p>no</p>",
        "id": 251235833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332913
    },
    {
        "content": "<p>there's another option</p>",
        "id": 251235845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332916
    },
    {
        "content": "<p>we could replace the hidden type <em>there</em></p>",
        "id": 251235870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332929
    },
    {
        "content": "<p>can this be a problem if the lifetimes aren't known?</p>",
        "id": 251235922,
        "sender_full_name": "oli",
        "timestamp": 1630332950
    },
    {
        "content": "<p>that doesn't affect whether something is <code>Freeze</code></p>",
        "id": 251235949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332961
    },
    {
        "content": "<p>oh because it's not user definable</p>",
        "id": 251236009,
        "sender_full_name": "oli",
        "timestamp": 1630332973
    },
    {
        "content": "<p>we haven't stabilized auto traits, we probably need to define some rules to that effect, we should note it on the tracking issue</p>",
        "id": 251236030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332985
    },
    {
        "content": "<p>but in any case ... for now ... no :)</p>",
        "id": 251236045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630332990
    },
    {
        "content": "<p>there can't be <code>impl Freeze for Foo&lt;'static&gt;</code></p>",
        "id": 251236077,
        "sender_full_name": "oli",
        "timestamp": 1630332999
    },
    {
        "content": "<p>and I think it would be an imporatnt invariant anyway</p>",
        "id": 251236089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333002
    },
    {
        "content": "<p>because of specialization</p>",
        "id": 251236116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333014
    },
    {
        "content": "<p>(actually, hmm, ... )</p>",
        "id": 251236134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333022
    },
    {
        "content": "<p>anyway, off topic</p>",
        "id": 251236148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333026
    },
    {
        "content": "<p>I'm just thinking about specialization a bit now :)</p>",
        "id": 251236155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333030
    },
    {
        "content": "<p>/me desperately wants to get back to that</p>",
        "id": 251236171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/251236089\">said</a>:</p>\n<blockquote>\n<p>and I think it would be an imporatnt invariant anyway</p>\n</blockquote>\n<p>invariant being \"all auto traits must be the same for all impls (of the same type)\"?</p>",
        "id": 251236173,
        "sender_full_name": "oli",
        "timestamp": 1630333038
    },
    {
        "content": "<p>all auto trait impls must be <a href=\"https://smallcultfollowing.com/babysteps/blog/2018/02/09/maximally-minimal-specialization-always-applicable-impls/\">\"always applicable\"</a></p>",
        "id": 251236351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333093
    },
    {
        "content": "<p>or something in that vein</p>",
        "id": 251236360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333098
    },
    {
        "content": "<p>it's not clear to me that we would ever stabilize the ability to add new auto traits</p>",
        "id": 251236423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333122
    },
    {
        "content": "<p>they are a semver hazard</p>",
        "id": 251236440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333127
    },
    {
        "content": "<p>they might just be an \"implementation mechanism\" for special traits</p>",
        "id": 251236469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333138
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this works on stable today, but... we are way off topic and it's probably not relevant here</p>",
        "id": 251236540,
        "sender_full_name": "oli",
        "timestamp": 1630333168
    },
    {
        "content": "<p>regardless, I think I favor at the moment substituting the hidden type here</p>",
        "id": 251236543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333169
    },
    {
        "content": "<p>hmm</p>",
        "id": 251236570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333182
    },
    {
        "content": "<p>yes, off topic :)</p>",
        "id": 251236578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333187
    },
    {
        "content": "<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I guess we need to put the hidden type back into <code>TypeckResult</code></p>",
        "id": 251236584,
        "sender_full_name": "oli",
        "timestamp": 1630333188
    },
    {
        "content": "<p>Well, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 251236668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333208
    },
    {
        "content": "<p>I guess we could also separate this part of const checking and have it run post borrow check?</p>",
        "id": 251236691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333217
    },
    {
        "content": "<p>(or maybe run <em>all</em> of const checking post borrow check?)</p>",
        "id": 251236707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333224
    },
    {
        "content": "<p>that was my original suggestion</p>",
        "id": 251236723,
        "sender_full_name": "oli",
        "timestamp": 1630333234
    },
    {
        "content": "<p>oh, sorry</p>",
        "id": 251236728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333238
    },
    {
        "content": "<p>I am nervous about deferring auto trait solving <em>in general</em></p>",
        "id": 251236763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333250
    },
    {
        "content": "<p>although I think it would be a cool thing</p>",
        "id": 251236773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333255
    },
    {
        "content": "<p>can't run all of it afterwards, we need it for promotion, which <em>must</em> run before borrowck</p>",
        "id": 251236780,
        "sender_full_name": "oli",
        "timestamp": 1630333258
    },
    {
        "content": "<p>ah, yes</p>",
        "id": 251236790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333263
    },
    {
        "content": "<p>but this particular check is \"just\" a safety check</p>",
        "id": 251236812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333271
    },
    {
        "content": "<p>I'm ok with either approach. The key thing is that this is kind of a narrow problem.</p>",
        "id": 251236866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333303
    },
    {
        "content": "<p>Not something that we expect to hit us generally</p>",
        "id": 251236882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333313
    },
    {
        "content": "<p>(Right?)</p>",
        "id": 251236908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333323
    },
    {
        "content": "<p>Now i'm wondering. :)</p>",
        "id": 251236939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333326
    },
    {
        "content": "<p>I... hope so</p>",
        "id": 251236947,
        "sender_full_name": "oli",
        "timestamp": 1630333328
    },
    {
        "content": "<p>If it did, I thnk the approach I was suggesting can probably be extended</p>",
        "id": 251236977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333344
    },
    {
        "content": "<p>Send and Sync cycles with async/futures are... weird</p>",
        "id": 251236978,
        "sender_full_name": "oli",
        "timestamp": 1630333344
    },
    {
        "content": "<p>yeah, the logic is all a bit tortured</p>",
        "id": 251237019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333366
    },
    {
        "content": "<p>I wonder how much of it is covered in the rustc-dev-guide</p>",
        "id": 251237211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333438
    },
    {
        "content": "<p>I'd like to go write up a little diagram, beacuse I have a hard time remembering how the queries etc interact</p>",
        "id": 251237269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/251236977\">said</a>:</p>\n<blockquote>\n<p>If it did, I thnk the approach I was suggesting can probably be extended</p>\n</blockquote>\n<p>in other words: if we find this arising more often, we can probably patch the various spots in between type check and borrow check so that they substitute the hidden types</p>",
        "id": 251237328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/251237269\">said</a>:</p>\n<blockquote>\n<p>I'd like to go write up a little diagram, beacuse I have a hard time remembering how the queries etc interact</p>\n</blockquote>\n<p>I wish we just generated this automatically on every commit</p>",
        "id": 251237336,
        "sender_full_name": "oli",
        "timestamp": 1630333479
    },
    {
        "content": "<p>yea, I was mainly amused with this one, not worried it was hard to fix, but let's see what else comes up in libcore <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 251237460,
        "sender_full_name": "oli",
        "timestamp": 1630333533
    },
    {
        "content": "<p>yeah those things would be great to have</p>",
        "id": 251237694,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630333633
    },
    {
        "content": "<p>to be honest I'm not really sure how much is covered in rustc dev guide</p>",
        "id": 251237710,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630333642
    },
    {
        "content": "<p>I'm re-reading certain parts and there are parts that I've never read so I will read them, hope I have a more clear picture about the guide soon :)</p>",
        "id": 251237809,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630333683
    },
    {
        "content": "<p>so what else is on the agenda for today</p>",
        "id": 251238039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333771
    },
    {
        "content": "<p>I created this repository <a href=\"https://github.com/rust-lang/impl-trait-initiative\">https://github.com/rust-lang/impl-trait-initiative</a></p>",
        "id": 251238066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333786
    },
    {
        "content": "<p>new stuff for santiago to do</p>",
        "id": 251238071,
        "sender_full_name": "oli",
        "timestamp": 1630333787
    },
    {
        "content": "<p>I plan to start writing stuff into it</p>",
        "id": 251238076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333791
    },
    {
        "content": "<p>but we should maybe make a project baord to help us track the overall plan</p>",
        "id": 251238088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333797
    },
    {
        "content": "<p>yeah 2 things</p>",
        "id": 251238222,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630333842
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/impl-trait-initiative/projects/2?add_cards_query=is%3Aopen\">https://github.com/rust-lang/impl-trait-initiative/projects/2?add_cards_query=is%3Aopen</a></p>",
        "id": 251238246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333853
    },
    {
        "content": "<p>I've completed the tests, please check that out and we should probably close the issue</p>",
        "id": 251238254,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630333856
    },
    {
        "content": "<p>what's the PR?</p>",
        "id": 251238293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333870
    },
    {
        "content": "<p>I guess I'll see it as I go through my notifications</p>",
        "id": 251238313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333875
    },
    {
        "content": "<p>and the other thing as <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> have said is ... what else could I do?</p>",
        "id": 251238317,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630333878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/251238293\">said</a>:</p>\n<blockquote>\n<p>what's the PR?</p>\n</blockquote>\n<p>there were like 20 PRs</p>",
        "id": 251238343,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630333886
    },
    {
        "content": "<p>lol ok</p>",
        "id": 251238393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333906
    },
    {
        "content": "<p>start from here <a href=\"https://github.com/rust-lang/rust/issues/86727\">#86727</a></p>",
        "id": 251238396,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630333907
    },
    {
        "content": "<p>so what should I check out</p>",
        "id": 251238404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333909
    },
    {
        "content": "<p>and everything is linked</p>",
        "id": 251238420,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630333917
    },
    {
        "content": "<p>but I guess the most reasonable thing to do is to check <a href=\"https://hackmd.io/y1HwFSBUQS2ZKrSFuQ0Dnw?view\">https://hackmd.io/y1HwFSBUQS2ZKrSFuQ0Dnw?view</a></p>",
        "id": 251238473,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630333929
    },
    {
        "content": "<p>see what are we covering, see if we need to cover more or if we can just say that this is finished</p>",
        "id": 251238522,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630333954
    },
    {
        "content": "<p>that's super awesome</p>",
        "id": 251238537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630333962
    },
    {
        "content": "<p>but yeah, I don't have other tasks to do</p>",
        "id": 251238571,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630333974
    },
    {
        "content": "<p>I guess I could check <a href=\"https://github.com/rust-lang/rust/issues/83190\">#83190</a></p>",
        "id": 251238615,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630333994
    },
    {
        "content": "<p>unsure if you <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> have checked it out or what's the status</p>",
        "id": 251238673,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630334023
    },
    {
        "content": "<p>because it's also a <code>P-high</code> beta regression</p>",
        "id": 251238704,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630334038
    },
    {
        "content": "<p>that should be fixed</p>",
        "id": 251238800,
        "sender_full_name": "oli",
        "timestamp": 1630334082
    },
    {
        "content": "<p>check if it works on beta and close the issue if it does</p>",
        "id": 251238826,
        "sender_full_name": "oli",
        "timestamp": 1630334094
    },
    {
        "content": "<p>on master, or on your branch?</p>",
        "id": 251238829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630334095
    },
    {
        "content": "<p>my PR that fixed it on master was backported</p>",
        "id": 251238854,
        "sender_full_name": "oli",
        "timestamp": 1630334109
    },
    {
        "content": "<p>to beta</p>",
        "id": 251238863,
        "sender_full_name": "oli",
        "timestamp": 1630334112
    },
    {
        "content": "<p>but we never checked if the issue is actually fixed</p>",
        "id": 251238883,
        "sender_full_name": "oli",
        "timestamp": 1630334123
    },
    {
        "content": "<p>ohh I see</p>",
        "id": 251238885,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1630334125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/251238829\">said</a>:</p>\n<blockquote>\n<p>on master, or on your branch?</p>\n</blockquote>\n<p>master and beta, haven't run my branch on all ui tests yet... libcore is failing after all ^^</p>",
        "id": 251239054,
        "sender_full_name": "oli",
        "timestamp": 1630334186
    },
    {
        "content": "<p>well, that would be convenient</p>",
        "id": 251239079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630334198
    },
    {
        "content": "<p>(if it were indeed already fixed)</p>",
        "id": 251239127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630334220
    },
    {
        "content": "<p>so apart from that--- <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I guess we are still kind of blocked on oli, I am wondering about \"redploying\" you temporarily to a few other potential \"areas\"</p>",
        "id": 251239457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630334363
    },
    {
        "content": "<p>e.g. I was thining about having somebody work a bit on async fn sugar :)</p>",
        "id": 251239473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630334372
    },
    {
        "content": "<p>async fn in traits, specifically</p>",
        "id": 251239508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630334387
    },
    {
        "content": "<p>(bbiab)</p>",
        "id": 251241695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630335267
    },
    {
        "content": "<p>I actually found a better way than heavily modifying how const checking works... if there are opaque types involved, just don't try to take the short circuit that checks marker traits but take the long route by running the actual analysis that would run if the marker trait were not implemented</p>",
        "id": 251264681,
        "sender_full_name": "oli",
        "timestamp": 1630344883
    },
    {
        "content": "<p>aaaand we are a go for libcore</p>",
        "id": 251265342,
        "sender_full_name": "oli",
        "timestamp": 1630345144
    },
    {
        "content": "<p>next boss: liballoc</p>",
        "id": 251265361,
        "sender_full_name": "oli",
        "timestamp": 1630345151
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0161]: cannot move a value of type impl Iterator: the size of impl Iterator cannot be statically determined\n  --&gt; library/alloc/src/collections/vec_deque/pair_slices.rs:41:9\n   |\n41 |         IntoIterator::into_iter([self.b0, self.b1])\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>",
        "id": 251265942,
        "sender_full_name": "oli",
        "timestamp": 1630345435
    },
    {
        "content": "<p><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(lazy_impl_trait)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(unsized_fn_params)]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>an unholy combination</p>",
        "id": 251267256,
        "sender_full_name": "oli",
        "timestamp": 1630345996
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">PairSlices</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a0</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a1</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">b0</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">b1</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">b</span> <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">PairSlices</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">remainder</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">IntoIterator</span>::<span class=\"n\">into_iter</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">b0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">b1</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 251267292,
        "sender_full_name": "oli",
        "timestamp": 1630346015
    },
    {
        "content": "<p>out of some reason, with <code>unsized_fn_params</code> this will fail to figure out that <code>&lt;[&amp;'b [T]; 2] as IntoIterator&gt;::IntoIter: Sized</code></p>",
        "id": 251267766,
        "sender_full_name": "oli",
        "timestamp": 1630346224
    },
    {
        "content": "<p>I mean... technically <code>self</code> could be unsized, and that can only be if the last field is unsized, so <code>&amp;'b [T]</code> could be unsized, and probably somewhere with lazy tait we can't figure this out anymore...</p>",
        "id": 251267945,
        "sender_full_name": "oli",
        "timestamp": 1630346288
    },
    {
        "content": "<p>will look at this tomorrow</p>",
        "id": 251267966,
        "sender_full_name": "oli",
        "timestamp": 1630346300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/251267966\">said</a>:</p>\n<blockquote>\n<p>will look at this tomorrow</p>\n</blockquote>\n<p>that was easy.. just needed a carefully placed <code>resolve_vars_if_possible</code> so we can see the hidden type</p>",
        "id": 251382076,
        "sender_full_name": "oli",
        "timestamp": 1630415664
    },
    {
        "content": "<p>which... reminds me.. we should change the variable names and fields names in opaque type stuff from the confusing <code>concrete_ty</code> to <code>hidden_ty</code></p>",
        "id": 251382135,
        "sender_full_name": "oli",
        "timestamp": 1630415693
    },
    {
        "content": "<p>yes</p>",
        "id": 251414494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630427320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> when you said that TAIT replaced <code>typeof</code>, can you elaborate?</p>",
        "id": 251414509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630427329
    },
    {
        "content": "<p>was it basically that you can do </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and then talk about <code>Foo</code>?</p>",
        "id": 251414549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630427349
    },
    {
        "content": "<p>yea, basically that. A full example has been written in <a href=\"https://github.com/rust-lang/rust/issues/88531#issuecomment-909282314\">https://github.com/rust-lang/rust/issues/88531#issuecomment-909282314</a></p>",
        "id": 251414853,
        "sender_full_name": "oli",
        "timestamp": 1630427457
    },
    {
        "content": "<p>Local bindings doesn't seem to count as defining use right now though, so I had to use a closure like <code>|| -&gt; Foo { x }</code></p>",
        "id": 251420259,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1630429668
    },
    {
        "content": "<p>yea, but they will work as defining uses soonish</p>",
        "id": 251423492,
        "sender_full_name": "oli",
        "timestamp": 1630430965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/251239508\">said</a>:</p>\n<blockquote>\n<p>async fn in traits, specifically</p>\n</blockquote>\n<p>Wouldn't that need an RFC first?</p>",
        "id": 251490622,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1630463442
    },
    {
        "content": "<p>No, it does need a proposal before we land code.</p>",
        "id": 251551034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630500278
    },
    {
        "content": "<p>(That's underway)</p>",
        "id": 251551066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630500296
    },
    {
        "content": "<p>Some unknowns, but some things are clear enough</p>",
        "id": 251551075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630500303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/251551066\">said</a>:</p>\n<blockquote>\n<p>(That's underway)</p>\n</blockquote>\n<p>The code is underway, or the proposal is?</p>",
        "id": 251572066,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1630507798
    },
    {
        "content": "<p>The proposal; you can see <a href=\"https://rust-lang.github.io/wg-async-foundations/vision/roadmap.html\">https://rust-lang.github.io/wg-async-foundations/vision/roadmap.html</a> for more details</p>",
        "id": 251575394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1630508806
    },
    {
        "content": "<p>Ah right, okay</p>",
        "id": 251576836,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1630509342
    },
    {
        "content": "<p>So the first goal is allowing <code>trait Foo { fn bar() -&gt; impl Trait; }</code>?</p>",
        "id": 251576857,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1630509354
    },
    {
        "content": "<p>Or is the first goal allowing <code>trait Foo { async fn bar() -&gt; usize; }</code>, and later extending that to any <code>impl Trait</code>.</p>",
        "id": 251577297,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1630509512
    },
    {
        "content": "<p>I would be interested in working on this, but it's probably well above my knowledge of rustc :)</p>",
        "id": 251626559,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1630529204
    },
    {
        "content": "<p><del>So... I found a problem with the \"treat opaque types as inference vars in many situations\" approach: if we are trying to prove that some type is Sized (or anything else really, but I have an example for Sized), we always return an ambiguity \"error\" (it's just a marker, not a real error, as it may get resolved elsewhere). For inference vars this is fine, as afaict we never <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> (rustdoc does this, there may be good uses for it?) have parameter environments that contain e.g. <code>_$some_inf_var: Sized</code> bounds. Now... we \"suddenly\" are doing this for opaque types, too, even though (in contrast to inference vars) we know a bunch of things about opaque types, so we can try to prove things about them. This gets us into the fun situation where we cache said inference failure...</del></p>\n<p>aaand I just answered my own question: Don't cache opaque types in the global cache if we treat that opaque type inference-var-like</p>",
        "id": 251870555,
        "sender_full_name": "oli",
        "timestamp": 1630671391
    },
    {
        "content": "<p>Hmm... looks like wf-checking used to be redoing type inference from scratch. I made it not do that for opaque types (by fetching the hidden type via the type_of query), but this seems like a general thing that we may want to have a look at. Seems wasteful to do type inference three times, when we could do it just twice, or potentially just 1.3 times depending on how much of it we can do in mir borrowck's typeck instead of the HIR typeck</p>",
        "id": 251886051,
        "sender_full_name": "oli",
        "timestamp": 1630678153
    },
    {
        "content": "<p>And we have a working libcore + libstd</p>",
        "id": 251886362,
        "sender_full_name": "oli",
        "timestamp": 1630678270
    },
    {
        "content": "<p>perfect timing, I'm going on vacation in 2h <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 251886408,
        "sender_full_name": "oli",
        "timestamp": 1630678286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/251886051\">said</a>:</p>\n<blockquote>\n<p>Hmm... looks like wf-checking used to be redoing type inference from scratch. I made it not do that for opaque types (by fetching the hidden type via the type_of query), but this seems like a general thing that we may want to have a look at. Seems wasteful to do type inference three times, when we could do it just twice, or potentially just 1.3 times depending on how much of it we can do in mir borrowck's typeck instead of the HIR typeck</p>\n</blockquote>\n<p>nevermind, looks like generators don't like it if you ask their type with typeof, even if you do it as late as wf-checking</p>",
        "id": 251886729,
        "sender_full_name": "oli",
        "timestamp": 1630678395
    },
    {
        "content": "<p>oh lol</p>",
        "id": 251887317,
        "sender_full_name": "oli",
        "timestamp": 1630678594
    },
    {
        "content": "<p>uh</p>",
        "id": 251887320,
        "sender_full_name": "oli",
        "timestamp": 1630678595
    },
    {
        "content": "<p>this is due to mir validation being run on mir-opt tests</p>",
        "id": 251887353,
        "sender_full_name": "oli",
        "timestamp": 1630678612
    },
    {
        "content": "<p>and mir validation reveal-all's all types</p>",
        "id": 251887369,
        "sender_full_name": "oli",
        "timestamp": 1630678620
    },
    {
        "content": "<blockquote>\n<p>test result: FAILED. 11709 passed; 376 failed; 97 ignored; 0 measured; 0 filtered out; finished in 28.77s</p>\n</blockquote>",
        "id": 251887572,
        "sender_full_name": "oli",
        "timestamp": 1630678691
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0282]: type annotations needed\n  --&gt; /home/ubuntu/rust/src/test/ui/type-alias-impl-trait/type-alias-impl-trait.rs:9:22\n   |\nLL |     assert_eq!(foo().to_string(), &quot;foo&quot;);\n   |                      ^^^^^^^^^ cannot infer type\n   |\n   = note: type must be known at this point\n\nerror[E0599]: no method named `to_string` found for opaque type `impl std::fmt::Display` in the current scope\n  --&gt; /home/ubuntu/rust/src/test/ui/type-alias-impl-trait/type-alias-impl-trait.rs:9:22\n   |\nLL |     assert_eq!(foo().to_string(), &quot;foo&quot;);\n   |                      ^^^^^^^^^ method not found in `impl std::fmt::Display`\n   |\n   = note: `foo()` is a function, perhaps you wish to call it\n</code></pre></div>\n<p>ok this was expected. We end up with unconstrained opaque types within a defining use scope. If this op is done outside of the defining use, then it works.</p>",
        "id": 251888071,
        "sender_full_name": "oli",
        "timestamp": 1630678882
    },
    {
        "content": "<p>I pushed my current status to <a href=\"https://github.com/oli-obk/rust/tree/lazy_tait2\">https://github.com/oli-obk/rust/tree/lazy_tait2</a> (note that the second to last commit doesn't compile, it contains notes on where to continue in plain text in the code). Things that need doing:</p>\n<ul>\n<li>adjust tests (often duplicating them, recording the current errors in one version and adjusting the other version to move the TAITs into a submodule so the defining use scopes work out)</li>\n<li>Fix ICEs by adding some appropriate delay_span_bug with fallback</li>\n<li>Fix async stuff by implementing what the second to last commit states (add infer <code>Future</code> type from obligations on the opaque type, which now isn't an inference var anymore).</li>\n<li>Triage the other issues</li>\n</ul>",
        "id": 251906227,
        "sender_full_name": "oli",
        "timestamp": 1630686061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> are you around today?</p>",
        "id": 253083019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631537212
    },
    {
        "content": "<p>If so, can we meet on Zulip</p>",
        "id": 253083031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631537217
    },
    {
        "content": "<p>I am, zulip sounds good</p>",
        "id": 253084682,
        "sender_full_name": "oli",
        "timestamp": 1631537951
    },
    {
        "content": "<p>Ok, so update to the above: I fixed 170 of the 370 failing tests (they were all async fn/block tests). They were failing because there was some code still assuming that opaque types are eagerly converted to inference vars. That code was searching the entire obligation space for obligations on the inferctxt to find one that was a <code>&lt;_ as Future&gt;::Output</code>. This is now much simpler, since we just grab the trait bounds on the opaque type and go through these</p>",
        "id": 253094087,
        "sender_full_name": "oli",
        "timestamp": 1631541662
    },
    {
        "content": "<p>ok, I'm here</p>",
        "id": 253094217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631541704
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 253094344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631541741
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>)</p>",
        "id": 253094426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631541771
    },
    {
        "content": "<p>The thing I am tackling right now is that associated tait stopped working. Same issue: type_of on associated types was just grabbing the type from the ast and converting that to a Ty, which just gave us an opaque type again. We could fix this by adding an <code>ImplItemKind::TyOpaque</code>, or by simply detecting that we got an opaque type and trying to resolve it</p>",
        "id": 253094433,
        "sender_full_name": "oli",
        "timestamp": 1631541774
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 253094445,
        "sender_full_name": "oli",
        "timestamp": 1631541777
    },
    {
        "content": "<p>/me reads</p>",
        "id": 253094546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631541809
    },
    {
        "content": "<p>the two text blocks sum up what I did today, everything is proceeding well, I skimmed the failing tests, but haven't triaged them yet, am mostly playing whack-a-mole while they are obvious</p>",
        "id": 253094622,
        "sender_full_name": "oli",
        "timestamp": 1631541831
    },
    {
        "content": "<p>ok, it took me like 3 tries to read that sentence</p>",
        "id": 253094886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631541921
    },
    {
        "content": "<p>uh</p>",
        "id": 253094903,
        "sender_full_name": "oli",
        "timestamp": 1631541927
    },
    {
        "content": "<p>which one? D</p>",
        "id": 253094914,
        "sender_full_name": "oli",
        "timestamp": 1631541931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/253094433\">said</a>:</p>\n<blockquote>\n<p>The thing I am tackling right now is that associated tait stopped working. Same issue: type_of on associated types was just grabbing the type from the ast and converting that to a Ty, which just gave us an opaque type again. We could fix this by adding an <code>ImplItemKind::TyOpaque</code>, or by simply detecting that we got an opaque type and trying to resolve it</p>\n</blockquote>\n<p>this one :)</p>",
        "id": 253094919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631541932
    },
    {
        "content": "<p>but I read it now :)</p>",
        "id": 253094928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631541935
    },
    {
        "content": "<p>ah</p>",
        "id": 253094930,
        "sender_full_name": "oli",
        "timestamp": 1631541936
    },
    {
        "content": "<p>That said, I don't quite know how <code>ImplItemKind::TyOpaque</code> would help or what what would mean exactly</p>",
        "id": 253094979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631541954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/253094087\">said</a>:</p>\n<blockquote>\n<p>Ok, so update to the above: I fixed 170 of the 370 failing tests (they were all async fn/block tests). They were failing because there was some code still assuming that opaque types are eagerly converted to inference vars. That code was searching the entire obligation space for obligations on the inferctxt to find one that was a <code>&lt;_ as Future&gt;::Output</code>. This is now much simpler, since we just grab the trait bounds on the opaque type and go through these</p>\n</blockquote>\n<p>this sounds very good</p>",
        "id": 253095088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631541979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/253094979\">said</a>:</p>\n<blockquote>\n<p>That said, I don't quite know how <code>ImplItemKind::TyOpaque</code> would help or what what would mean exactly</p>\n</blockquote>\n<p>I guess you mean that if we had <code>type Foo = impl Bar</code> we would add such an item?</p>",
        "id": 253095130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631541996
    },
    {
        "content": "<p>yea, just like with free taits</p>",
        "id": 253095180,
        "sender_full_name": "oli",
        "timestamp": 1631542015
    },
    {
        "content": "<p>(where we do have a separate variant)</p>",
        "id": 253095205,
        "sender_full_name": "oli",
        "timestamp": 1631542024
    },
    {
        "content": "<p>but... I am still investigating</p>",
        "id": 253095224,
        "sender_full_name": "oli",
        "timestamp": 1631542031
    },
    {
        "content": "<p>the thing is</p>",
        "id": 253095256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542046
    },
    {
        "content": "<p>it is different from other impl items</p>",
        "id": 253095272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542052
    },
    {
        "content": "<p>it doesn't correspond to something in the trait</p>",
        "id": 253095284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542058
    },
    {
        "content": "<p>yea</p>",
        "id": 253095300,
        "sender_full_name": "oli",
        "timestamp": 1631542064
    },
    {
        "content": "<p>and there could be like <code>type Foo = (impl Bar, impl Baz)</code></p>",
        "id": 253095307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542065
    },
    {
        "content": "<p>I always imagined it would be more like the opaque types we attach to functions</p>",
        "id": 253095358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542081
    },
    {
        "content": "<p>I guess that's...maybe the point, that functions \"have\" nested items, but impls normally don't?</p>",
        "id": 253095459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542106
    },
    {
        "content": "<p>kind of yea, but since everything was working before, this can't really be an issue</p>",
        "id": 253095514,
        "sender_full_name": "oli",
        "timestamp": 1631542136
    },
    {
        "content": "<p>It is probably just that I haven't fully understood the failing tests yet</p>",
        "id": 253095645,
        "sender_full_name": "oli",
        "timestamp": 1631542191
    },
    {
        "content": "<p>ok</p>",
        "id": 253095734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542211
    },
    {
        "content": "<p>are you blocked on anything I can help with at this point?</p>",
        "id": 253095748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542217
    },
    {
        "content": "<p>Nope, this is the fun part. whack-a-mole <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 253095789,
        "sender_full_name": "oli",
        "timestamp": 1631542230
    },
    {
        "content": "<p>with simple tests, too <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 253095830,
        "sender_full_name": "oli",
        "timestamp": 1631542245
    },
    {
        "content": "<p>So, santiago opened all those PRs that cover the tests</p>",
        "id": 253095887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542266
    },
    {
        "content": "<p>you're fixing up the implementation</p>",
        "id": 253095895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542269
    },
    {
        "content": "<p>jup</p>",
        "id": 253095906,
        "sender_full_name": "oli",
        "timestamp": 1631542273
    },
    {
        "content": "<p>I don't think we have any design questions left at this point</p>",
        "id": 253095912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542275
    },
    {
        "content": "<p>I think I will just kepe working today a bit on the explainer for <a href=\"https://rust-lang.github.io/impl-trait-initiative/\">https://rust-lang.github.io/impl-trait-initiative/</a></p>",
        "id": 253095957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542292
    },
    {
        "content": "<p>I am duplicating some tests, because now we have the situation where we don't allow mixing non-defining uses in the defining scope</p>",
        "id": 253095977,
        "sender_full_name": "oli",
        "timestamp": 1631542302
    },
    {
        "content": "<p>I'm trying to lay out the whole scheme in one place</p>",
        "id": 253095983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/253095977\">said</a>:</p>\n<blockquote>\n<p>I am duplicating some tests, because now we have the situation where we don't allow mixing non-defining uses in the defining scope</p>\n</blockquote>\n<p>example?</p>",
        "id": 253096000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542314
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">defining_scope</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">unit</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">defining_scope</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ice</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unit</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 253096071,
        "sender_full_name": "oli",
        "timestamp": 1631542329
    },
    {
        "content": "<p>is a duplicated one</p>",
        "id": 253096080,
        "sender_full_name": "oli",
        "timestamp": 1631542332
    },
    {
        "content": "<p>the original one has no module</p>",
        "id": 253096093,
        "sender_full_name": "oli",
        "timestamp": 1631542339
    },
    {
        "content": "<p>dear god</p>",
        "id": 253096169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542367
    },
    {
        "content": "<p>this one is a bit over the top</p>",
        "id": 253096183,
        "sender_full_name": "oli",
        "timestamp": 1631542372
    },
    {
        "content": "<p>what am I looking at</p>",
        "id": 253096185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542372
    },
    {
        "content": "<p>ok, I think I see</p>",
        "id": 253096205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542380
    },
    {
        "content": "<p>let me give you a simpler one <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 253096208,
        "sender_full_name": "oli",
        "timestamp": 1631542380
    },
    {
        "content": "<p>actually i'm a bit confused by that one</p>",
        "id": 253096283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542406
    },
    {
        "content": "<p>I wouldn't expect the behavior to change with the new code</p>",
        "id": 253096307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542416
    },
    {
        "content": "<p>did it?</p>",
        "id": 253096323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542423
    },
    {
        "content": "<p>simpler one now</p>",
        "id": 253096348,
        "sender_full_name": "oli",
        "timestamp": 1631542431
    },
    {
        "content": "<p>ok, this one I could imagine changing</p>",
        "id": 253096372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542441
    },
    {
        "content": "<p>yea it did, the <code>ice</code> function failed</p>",
        "id": 253096425,
        "sender_full_name": "oli",
        "timestamp": 1631542448
    },
    {
        "content": "<p>and it would be good to test both I would think</p>",
        "id": 253096429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542450
    },
    {
        "content": "<p>that's what I thought, too, so I'm duplicating them</p>",
        "id": 253096461,
        "sender_full_name": "oli",
        "timestamp": 1631542460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/253096425\">said</a>:</p>\n<blockquote>\n<p>yea it did, the <code>ice</code> function failed</p>\n</blockquote>\n<p>!</p>",
        "id": 253096474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542465
    },
    {
        "content": "<p>to be clear, i'm taling about the test with the pattern</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">ice</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Into</span>::<span class=\"n\">into</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 253096539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542490
    },
    {
        "content": "<p>the \"defining scope\" for that opaque type <em>should</em> just be <code>fn foo</code></p>",
        "id": 253096576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542504
    },
    {
        "content": "<p>ah yea, sorry, that was just a case of me copying a very similar test</p>",
        "id": 253096594,
        "sender_full_name": "oli",
        "timestamp": 1631542511
    },
    {
        "content": "<p>yea and it is</p>",
        "id": 253096602,
        "sender_full_name": "oli",
        "timestamp": 1631542514
    },
    {
        "content": "<p>ok ok</p>",
        "id": 253096607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631542516
    },
    {
        "content": "<p><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> uh, so I found the issue with the other one that I mentioned:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">unit</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;&lt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span>::<span class=\"n\">Assoc</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ice</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Into</span>::<span class=\"n\">into</span><span class=\"p\">(</span><span class=\"n\">unit</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>unit</code> does not detect any definition of the opaque return type, because in MIR the <code>RETURN_PLACE</code> is already <code>()</code>, and not <code>ty::Opaque</code></p>",
        "id": 253097974,
        "sender_full_name": "oli",
        "timestamp": 1631543005
    },
    {
        "content": "<p>oh dear :)</p>",
        "id": 253099466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631543554
    },
    {
        "content": "<p>maybe someone did something smart in MIR building for empty bodies XD</p>",
        "id": 253099549,
        "sender_full_name": "oli",
        "timestamp": 1631543582
    },
    {
        "content": "<p>well wait</p>",
        "id": 253099577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631543593
    },
    {
        "content": "<p>is it particular to the empty body?</p>",
        "id": 253099597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631543598
    },
    {
        "content": "<p>ah, you're saying that maybe MIR building has some kind of shortcut for that?</p>",
        "id": 253099647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631543616
    },
    {
        "content": "<p>I did it with a 42 in the body and Assoc = i32, and that compiled</p>",
        "id": 253099653,
        "sender_full_name": "oli",
        "timestamp": 1631543618
    },
    {
        "content": "<p>could well be</p>",
        "id": 253099661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631543621
    },
    {
        "content": "<p>(what about <code>()</code> in the body?)</p>",
        "id": 253099681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631543628
    },
    {
        "content": "<p>but I imagine it would be the same, yeah</p>",
        "id": 253099697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631543635
    },
    {
        "content": "<p>yea, <code>()</code> in the body compiles, too</p>",
        "id": 253099783,
        "sender_full_name": "oli",
        "timestamp": 1631543656
    },
    {
        "content": "<p>it's just empty bodies XD</p>",
        "id": 253099799,
        "sender_full_name": "oli",
        "timestamp": 1631543661
    },
    {
        "content": "<p>there probably is some special case</p>",
        "id": 253099920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631543717
    },
    {
        "content": "<p>wait what?</p>\n<p>mir for empty body on stable</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">unit</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_0</span>: <span class=\"p\">();</span><span class=\"w\">                      </span><span class=\"c1\">// return place in scope 0 at src/lib.rs:9:14: 9:45</span>\n\n<span class=\"w\">    </span><span class=\"n\">bb0</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\">                   </span><span class=\"c1\">// scope 0 at src/lib.rs:9:46: 9:48</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\">                          </span><span class=\"c1\">// scope 0 at src/lib.rs:9:48: 9:48</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>mir for <code>()</code> body on stable</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">unit</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_0</span>: <span class=\"p\">();</span><span class=\"w\">                      </span><span class=\"c1\">// return place in scope 0 at src/lib.rs:9:14: 9:45</span>\n\n<span class=\"w\">    </span><span class=\"n\">bb0</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\">                          </span><span class=\"c1\">// scope 0 at src/lib.rs:9:52: 9:52</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and no, I did not accidentally swap them</p>",
        "id": 253100079,
        "sender_full_name": "oli",
        "timestamp": 1631543774
    },
    {
        "content": "<p>this is mir after mir opts, but still</p>",
        "id": 253100117,
        "sender_full_name": "oli",
        "timestamp": 1631543786
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2fb0ba631d685c8474be55c847b24a0f\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2fb0ba631d685c8474be55c847b24a0f</a></p>",
        "id": 253100203,
        "sender_full_name": "oli",
        "timestamp": 1631543816
    },
    {
        "content": "<p>yea, so there's some code that checks \"if no_body &amp;&amp; ret_type.is_unit() {} else { assume divergence }\",</p>",
        "id": 253105145,
        "sender_full_name": "oli",
        "timestamp": 1631545513
    },
    {
        "content": "<p>I am stuck. <code>expected_inputs_for_expected_output</code> compares an inference var against a <code>ty::Opaque</code> and then throws this information away, so we never know that they are equal. This is problematic when we figure out a closure's kind, as the <code>ty::Opaque</code> may not contain the information we need (no <code>Fn*</code> bound), but instead the information exists as a pending obligation on the inference type.</p>\n<p>this happens for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">F</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>we correctly propagate <code>X</code> through the return type of <code>bar</code> into the argument of <code>bar</code> and then try to figure out the closure kind.</p>\n<p>The problem is that the bounds on <code>F</code> do not get put on <code>X</code>, but on some inference variable. That inference variable gets instantiated to <code>X</code> in a probe (well, in a fudge, which is the problem we have), propagated to the arguments, and then the fact that the inference var was instantiated is forgotten. This forgetting is on purpose, as a bunch of lifetimes will die horribly otherwise, and the instantiation happens again later. So everything normally works out. Unless you have a closure as an argument to a generic identity function. Essentially we try to figure out the closure kind too early, as we try to figure it out when processing the arguments of the function call (as the closure is an argument), and only once all that is done, we process the type of the call expression.</p>",
        "id": 253288893,
        "sender_full_name": "oli",
        "timestamp": 1631640127
    },
    {
        "content": "<p>I think it would be wrong to do the call expression type check before checking its arguments, as we first need to figure out the arguments to be really sure about the return type if there's enough projections involved.</p>",
        "id": 253289615,
        "sender_full_name": "oli",
        "timestamp": 1631640386
    },
    {
        "content": "<p>the main thing I'm wondering, and which the docs don't really make clear is <em>why</em> we do a probe here instead of just plainly equating the return type with the expected type</p>",
        "id": 253289673,
        "sender_full_name": "oli",
        "timestamp": 1631640412
    },
    {
        "content": "<p>I was thinking about this while falling asleep yesterday (no it's not so boring it puts me to sleep, but it's calming/relaxing XD) and I think I know what to do. I have a specific check that ensures that opaque types never get a concrete type that is in fact an inference var, but we don't need that anymore now that we don't use unconstrained opaque types in the trait solver until we manage to resolve them (just like we do with inference vars). That way, the moment an inference var is compared with an opaque type, the opaque type's concrete type becomes the inference var and we resolve the opaque type to the inference var from now on. Thus the \"equality\"of them is preserved</p>",
        "id": 253380838,
        "sender_full_name": "oli",
        "timestamp": 1631695420
    },
    {
        "content": "<p>this reverts most of the closure changes I did for lazy tait</p>",
        "id": 253380925,
        "sender_full_name": "oli",
        "timestamp": 1631695453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I didn't follow this.</p>",
        "id": 253468149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631732062
    },
    {
        "content": "<p>Should I?</p>",
        "id": 253468153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1631732063
    },
    {
        "content": "<p>I think I figured it out, I'll let you know once I tried it</p>",
        "id": 253483851,
        "sender_full_name": "oli",
        "timestamp": 1631738286
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> I found one reason why impl trait in bindings was broken before: wf-checks never ran for them, we only run wf-checks for opaque types on return types of functions</p>",
        "id": 253561637,
        "sender_full_name": "oli",
        "timestamp": 1631789490
    },
    {
        "content": "<p>I'm going to start splitting out things from the lazy TAIT mega-branch</p>",
        "id": 253712003,
        "sender_full_name": "oli",
        "timestamp": 1631869559
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/89024\">https://github.com/rust-lang/rust/pull/89024</a> and <a href=\"https://github.com/rust-lang/rust/pull/89045\">https://github.com/rust-lang/rust/pull/89045</a> are the first two such PRs and should be trivial to review as they don't meaningfully (beyond diagnostics) change the behaviour</p>",
        "id": 253752733,
        "sender_full_name": "oli",
        "timestamp": 1631889718
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 254054331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632146502
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 254054360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632146515
    },
    {
        "content": "<p>hey!</p>",
        "id": 254054445,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1632146537
    },
    {
        "content": "<p>Zoom or Zulip wfm</p>",
        "id": 254054454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632146543
    },
    {
        "content": "<p>but maybe Zulip mildly preferred</p>",
        "id": 254054483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632146550
    },
    {
        "content": "<p>whatever is fine for me</p>",
        "id": 254054534,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1632146577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you around today?</p>",
        "id": 254054601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632146607
    },
    {
        "content": "<p>I'm here</p>",
        "id": 254054660,
        "sender_full_name": "oli",
        "timestamp": 1632146636
    },
    {
        "content": "<p>I am currently in the process of getting parts of my huge PR merged, because I now ended up adding some refactorings that also apply to the current system.</p>",
        "id": 254054777,
        "sender_full_name": "oli",
        "timestamp": 1632146681
    },
    {
        "content": "<p>it will also make merging the huge PR easier in the end</p>",
        "id": 254054801,
        "sender_full_name": "oli",
        "timestamp": 1632146692
    },
    {
        "content": "<p>Yes. I saw some PRs</p>",
        "id": 254054815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632146700
    },
    {
        "content": "<p>seems like a good idea!</p>",
        "id": 254054825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632146704
    },
    {
        "content": "<p>in terms of the overall state you've reached, how are things going?</p>",
        "id": 254054852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632146716
    },
    {
        "content": "<p>there are still around 180 tests failing, most of which are tests that should error and are now additionally ICEing</p>",
        "id": 254054892,
        "sender_full_name": "oli",
        "timestamp": 1632146734
    },
    {
        "content": "<p>ok, any idea why that is?</p>",
        "id": 254054944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632146762
    },
    {
        "content": "<p>not yet, I believe some if it may be fixed by one of the current small PRs, as it will ensure that we don't miss invalid opaque types inside function bodies</p>",
        "id": 254055073,
        "sender_full_name": "oli",
        "timestamp": 1632146812
    },
    {
        "content": "<p>OK. Is there anything to discuss today?</p>",
        "id": 254055228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632146874
    },
    {
        "content": "<p>My impression is that you are basically just churning through the code and don't really need anything but reviews</p>",
        "id": 254055296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632146890
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 254055305,
        "sender_full_name": "oli",
        "timestamp": 1632146892
    },
    {
        "content": "<p>yea, I am progressing all the time, so I'm not worried. It's just slow work figuring out what is actually wrong with each new kind of failing test</p>",
        "id": 254055388,
        "sender_full_name": "oli",
        "timestamp": 1632146923
    },
    {
        "content": "<p>OK, then we can end the meeting super early from my POV</p>",
        "id": 254055465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1632146954
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 254055550,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1632146993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> are you around by any chance?</p>",
        "id": 256266349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1633447627
    },
    {
        "content": "<p>Kind of</p>",
        "id": 256275282,
        "sender_full_name": "oli",
        "timestamp": 1633450816
    },
    {
        "content": "<p>The lazy TAIT PR has a small problem with </p>\n<div class=\"codehilite\"><pre><span></span><code>fn main() {}\n\ntrait T {}\nimpl T for () {}\n\nfn should_ret_unit() -&gt; impl T {\n    panic!()\n}\n</code></pre></div>\n<p>this passes on stable right now, but will fail with lazy TAIT, as the opaque type is never actually compared with any other type in MIR. Previously this wasn't a problem, as without TAITs in general we don't need to wait for mir borrowck, we were able to just grab the hidden types from typeck and just figure out their lifetimes in mir borrowck. With TAIT, there can be multiple assignments to the same opaque type, and they can have different generic (including lifetime) parameters <em>on the opaque type</em>, as TAITs can have generic parameters in contrast to RPIT.</p>",
        "id": 262814611,
        "sender_full_name": "oli",
        "timestamp": 1637943920
    },
    {
        "content": "<p>We can either get fancy with fallback things, or revisit our strategy of resolving opaque types solely from the MIR and going back to the previous scheme of figuring out all the hidden types in typeck and giving them fresh lifetimes in mir borrowck</p>",
        "id": 262814839,
        "sender_full_name": "oli",
        "timestamp": 1637944132
    },
    {
        "content": "<p>some more info, because the above mentions various topics that I didn't explain:</p>",
        "id": 262814867,
        "sender_full_name": "oli",
        "timestamp": 1637944163
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">u</span>: <span class=\"nc\">U</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is basically the situation I'm wondering about. The two uses of <code>Foo</code> can get unified, but we'd first need to \"normalize\" their generic parameters somehow so that we can actually compare their hidden types in some way.</p>",
        "id": 262814956,
        "sender_full_name": "oli",
        "timestamp": 1637944224
    },
    {
        "content": "<p>TLDR: I think I screwed up by throwing away the hidden types from typeck and figuring them out all over again in mir borrowck, because mir borrowck doesn't find all of them</p>",
        "id": 262815486,
        "sender_full_name": "oli",
        "timestamp": 1637944667
    },
    {
        "content": "<blockquote>\n<p><code>_ : Foo&lt;T, U&gt; = (t, u)</code></p>\n</blockquote>\n<p>This looks like a higher-order unification problem -- <code>Foo</code> is a unification variable representing a function of two arguments, and the goal is to solve it as <code>λ T U. (T, U)</code>.  (This particular case is in the pattern fragment of higher-order unification problems, so it's efficiently solvable.)  I think typically the specific problem of unifying <code>λ T U. (T, U)</code> with <code>λ U T. (U, T)</code> is solved in dependent typecheckers/lambda prolog implementations by either (a) using de Bruijn indices/levels; or (b) when unifying two lambdas, invent a fresh constant <code>x</code> for their argument, and unify the results of applying them to that constant.  (Or both (a) and (b).)  Sorry if I'm stating the obvious here; I'm not familiar enough with rustc internals to completely understand the problem.</p>\n<p>Does Rustc maintain enough info to know during unification whether <code>type Foo&lt;X,Y&gt; = (T, U)</code> would be a legal instantiation, or does it only check wf-ness after unification?</p>\n<p>(Also, hi <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'm new to rustc, but I have some logic programming knowledge (I recently made a <a href=\"https://github.com/mb64/simple-lambda-prolog\">lambda prolog interpreter</a>) and I'd love to contribute to traits/typechecking however I can!)</p>",
        "id": 263103649,
        "sender_full_name": "Mark Barbone",
        "timestamp": 1638250409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/262815486\">said</a>:</p>\n<blockquote>\n<p>TLDR: I think I screwed up by throwing away the hidden types from typeck and figuring them out all over again in mir borrowck, because mir borrowck doesn't find all of them</p>\n</blockquote>\n<p>Nope, that isn't the issue XD it's actually that some things are performed in queries, and we do not feed the \"defining use scope\" of the caller of the query into the query. Thus the query does not instantiate any opaque types's hidden types, thus some things fail. I'm actually amazed that this is not a more frequent issue, but I worked around the issue in some places where there was a non-query fallback path</p>",
        "id": 263464974,
        "sender_full_name": "oli",
        "timestamp": 1638463171
    },
    {
        "content": "<p>So... basically, my current idea is that we add a new <code>PredicateKind</code>: <code>DefiningUseScope(LocalDefId)</code> that is automatically added to a param env at creation time, where we know for which item we are creating the param env</p>",
        "id": 263465185,
        "sender_full_name": "oli",
        "timestamp": 1638463247
    },
    {
        "content": "<p>hmm... that will brick a lot of caching though</p>",
        "id": 263468646,
        "sender_full_name": "oli",
        "timestamp": 1638464569
    },
    {
        "content": "<p>Ah, but we can fix that with some fancy use of <code>ParamEnvAnd</code></p>",
        "id": 263469233,
        "sender_full_name": "oli",
        "timestamp": 1638464805
    },
    {
        "content": "<p>I have a solution that is both efficient, simple to implement and probably simple to understand: the defining scope of an <code>impl Trait</code> (no matter what kind) is the crate it is defined in</p>",
        "id": 263602840,
        "sender_full_name": "oli",
        "timestamp": 1638548626
    },
    {
        "content": "<p>problem solved</p>",
        "id": 263602850,
        "sender_full_name": "oli",
        "timestamp": 1638548631
    },
    {
        "content": "<p>async stuff will probably break badly XD</p>",
        "id": 263602869,
        "sender_full_name": "oli",
        "timestamp": 1638548640
    },
    {
        "content": "<p>ah we can just do this for TAIT and leave RPIT untouched</p>",
        "id": 263610701,
        "sender_full_name": "oli",
        "timestamp": 1638552223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/263610701\">said</a>:</p>\n<blockquote>\n<p>ah we can just do this for TAIT and leave RPIT untouched</p>\n</blockquote>\n<p>unsure if you've talked with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about his RPIT solution</p>",
        "id": 263617389,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1638555260
    },
    {
        "content": "<p>Uuh what solution? XD</p>",
        "id": 263623358,
        "sender_full_name": "oli",
        "timestamp": 1638558176
    },
    {
        "content": "<p>except for docs, diagnostics (just open issues) and the two thread I started here, <a href=\"https://github.com/rust-lang/rust/pull/92007\">https://github.com/rust-lang/rust/pull/92007</a> is ready!</p>",
        "id": 269451081,
        "sender_full_name": "oli",
        "timestamp": 1643218776
    },
    {
        "content": "<p>I just want to share this beautiful piece of code that we're sadly accepting on stable</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">b</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">IntoIterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[()];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[()].</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://github.com/rust-lang/rust/issues/93794\">https://github.com/rust-lang/rust/issues/93794</a> is the issue</p>\n<p>It's not really compatible with lazy tait to allow this, because</p>\n<blockquote>\n<p>the trait <code>FromIterator&lt;()&gt;</code> is not implemented for <code>impl IntoIterator&lt;Item = ()&gt;</code></p>\n</blockquote>\n<p>is exactly the error I would expect from this with lazy TAIT</p>",
        "id": 271312354,
        "sender_full_name": "oli",
        "timestamp": 1644426738
    },
    {
        "content": "<p>but the fix for this is afaict to change how typeck handles the expected type of return expressions in case they are RPIT</p>",
        "id": 271312696,
        "sender_full_name": "oli",
        "timestamp": 1644426864
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♂️</p>",
        "id": 271315625,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644427905
    },
    {
        "content": "<p>How widespread is that kind of code? Could with get away with calling it a semver-allowed inference breakage?</p>",
        "id": 271315908,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1644427987
    },
    {
        "content": "<p>would we want to check the lazy tait PR on crater to see ? (the exact piece of code above was ofc only recently allowed in edition 2021, but the pattern may be more widespread)</p>",
        "id": 271321890,
        "sender_full_name": "lqd",
        "timestamp": 1644429874
    },
    {
        "content": "<p>Someone already linked a from a real crate's repo to the issue. I think i'll look into writing a (likely hacky) fix and then we can discuss phasing it out.</p>",
        "id": 271324632,
        "sender_full_name": "oli",
        "timestamp": 1644430892
    },
    {
        "content": "<p>So...would it have been better to do a crater run on <a href=\"https://github.com/rust-lang/rust/issues/92007\">#92007</a> before landing?</p>",
        "id": 271347700,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644440942
    },
    {
        "content": "<p>Proooobably</p>",
        "id": 271349079,
        "sender_full_name": "oli",
        "timestamp": 1644441613
    },
    {
        "content": "<p>I'll try to squash the bugs as they appear.</p>",
        "id": 271349126,
        "sender_full_name": "oli",
        "timestamp": 1644441647
    },
    {
        "content": "<p>It's not <em>too</em> late to revert and try again</p>",
        "id": 271349146,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644441664
    },
    {
        "content": "<p>True</p>",
        "id": 271349160,
        "sender_full_name": "oli",
        "timestamp": 1644441671
    },
    {
        "content": "<p>But that's not ideal</p>",
        "id": 271349164,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644441673
    },
    {
        "content": "<p>Not against that, but yea... not too great</p>",
        "id": 271349222,
        "sender_full_name": "oli",
        "timestamp": 1644441700
    },
    {
        "content": "<p>A revert only gets more difficult as time passes</p>",
        "id": 271349304,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644441739
    },
    {
        "content": "<p>Another alternative: start a crater run <em>right now</em></p>",
        "id": 271349339,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644441761
    },
    {
        "content": "<p>As opposed to a revert now or just waiting for bug reports</p>",
        "id": 271349363,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644441775
    },
    {
        "content": "<p>Hmm... how long is the queue?</p>",
        "id": 271349426,
        "sender_full_name": "oli",
        "timestamp": 1644441810
    },
    {
        "content": "<p>empty as of yesterday</p>",
        "id": 271349462,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644441837
    },
    {
        "content": "<p>oh, one thing</p>",
        "id": 271349514,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644441849
    },
    {
        "content": "<p>I'd argue that checking lazy TAIT is p=1 though</p>",
        "id": 271349547,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644441874
    },
    {
        "content": "<p>(given it's already landed)</p>",
        "id": 271349564,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644441886
    },
    {
        "content": "<p>Yea. I guess running crater now helps catch things before the beta</p>",
        "id": 271349650,
        "sender_full_name": "oli",
        "timestamp": 1644441931
    },
    {
        "content": "<p>And I keep squashing bugs in parallel</p>",
        "id": 271349665,
        "sender_full_name": "oli",
        "timestamp": 1644441944
    },
    {
        "content": "<p>yeah basically</p>",
        "id": 271349678,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644441952
    },
    {
        "content": "<p>I guess we can run crater on the merge commit's build?</p>",
        "id": 271349778,
        "sender_full_name": "oli",
        "timestamp": 1644441998
    },
    {
        "content": "<p>Uh, probably on yesterday's nightly</p>",
        "id": 271349830,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644442021
    },
    {
        "content": "<p>so your fix from yesterday is included</p>",
        "id": 271349847,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644442027
    },
    {
        "content": "<p>Ah right, we can just compare over a larger period of time</p>",
        "id": 271349895,
        "sender_full_name": "oli",
        "timestamp": 1644442059
    },
    {
        "content": "<p>doing a crater run now means 1) no revert (for now at least) 2) Longer lead time before beta to decide if we <em>do</em> need a revert 3) Less time elapsed before revert if needed</p>",
        "id": 271349902,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644442063
    },
    {
        "content": "<p>Sgtm</p>",
        "id": 271349935,
        "sender_full_name": "oli",
        "timestamp": 1644442081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> can you help set this up?</p>",
        "id": 271350012,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644442098
    },
    {
        "content": "<p>I can help -- is there something beyond the docs <a href=\"https://github.com/rust-lang/crater/blob/master/docs/bot-usage.md\">https://github.com/rust-lang/crater/blob/master/docs/bot-usage.md</a> that's needed?</p>",
        "id": 271350080,
        "sender_full_name": "simulacrum",
        "timestamp": 1644442143
    },
    {
        "content": "<p>probably not</p>",
        "id": 271350152,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644442186
    },
    {
        "content": "<p>I'm just afraid of messing it up</p>",
        "id": 271350165,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644442193
    },
    {
        "content": "<p>I mean, worst case extra comments? :)</p>",
        "id": 271350252,
        "sender_full_name": "simulacrum",
        "timestamp": 1644442219
    },
    {
        "content": "<p>maybe</p>",
        "id": 271350328,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644442267
    },
    {
        "content": "<p>not sure how to specify the two nightlies. Just by the name you would give e.g. rustup?</p>",
        "id": 271350378,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644442293
    },
    {
        "content": "<p>\"You can specify a toolchain using a rustup name\"</p>",
        "id": 271350420,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644442321
    },
    {
        "content": "<p>That would work, yeah, or you can use master#&lt;sha&gt; and master#&lt;sha2&gt; for the start/end</p>",
        "id": 271350428,
        "sender_full_name": "simulacrum",
        "timestamp": 1644442322
    },
    {
        "content": "<p>Okay, let me try this</p>",
        "id": 271350480,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644442335
    },
    {
        "content": "<p>I'll open a new issue for this</p>",
        "id": 271350486,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644442341
    },
    {
        "content": "<p>so...when exactly do nightlies get built</p>",
        "id": 271350905,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644442596
    },
    {
        "content": "<p>Try using the PR's merge before my lazy TAIT PR and the merge of my fix PR instead of specific nightlies</p>",
        "id": 271351039,
        "sender_full_name": "oli",
        "timestamp": 1644442679
    },
    {
        "content": "<p>Sorry I'm not any help, basically asleep already xD</p>",
        "id": 271351098,
        "sender_full_name": "oli",
        "timestamp": 1644442699
    },
    {
        "content": "<p>How do you have crater yield to a higher priority run?</p>",
        "id": 271351354,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644442870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> the current one should be done quite soon</p>",
        "id": 271351610,
        "sender_full_name": "simulacrum",
        "timestamp": 1644443012
    },
    {
        "content": "<p>but if you prioritize (p=1) it'll automatically yield</p>",
        "id": 271351619,
        "sender_full_name": "simulacrum",
        "timestamp": 1644443021
    },
    {
        "content": "<p>I did prioritize. Maybe it just takes a second</p>",
        "id": 271351696,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644443045
    },
    {
        "content": "<p>It'll take 30 minutes or so -- the current set of crates running on each builder needs to run out</p>",
        "id": 271351762,
        "sender_full_name": "simulacrum",
        "timestamp": 1644443075
    },
    {
        "content": "<p>but on the next request I believe the new one will take priority, not 100%, but I believe so</p>",
        "id": 271351791,
        "sender_full_name": "simulacrum",
        "timestamp": 1644443097
    },
    {
        "content": "<p>if not it'll start in around 24 hours.</p>",
        "id": 271351829,
        "sender_full_name": "simulacrum",
        "timestamp": 1644443115
    },
    {
        "content": "<p>yeah, not <em>too</em> worried about it</p>",
        "id": 271351862,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644443136
    },
    {
        "content": "<p>I think we have reached the point where we revert. I'm not going to be able to catch up with the bugs before the beta cut off</p>",
        "id": 271537302,
        "sender_full_name": "oli",
        "timestamp": 1644561830
    },
    {
        "content": "<p>revert PR:  <a href=\"https://github.com/rust-lang/rust/issues/93893\">#93893</a></p>",
        "id": 271540971,
        "sender_full_name": "oli",
        "timestamp": 1644565697
    },
    {
        "content": "<p>We probably should have kept the crater run issue open</p>",
        "id": 271573415,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644585122
    },
    {
        "content": "<p>I'll do a new one with the various fixes</p>",
        "id": 271575930,
        "sender_full_name": "oli",
        "timestamp": 1644586137
    },
    {
        "content": "<p>That way we get more precise results (fixes can easily result in more regressions)</p>",
        "id": 271575985,
        "sender_full_name": "oli",
        "timestamp": 1644586163
    },
    {
        "content": "<p>That's fair</p>",
        "id": 271576021,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644586188
    }
]