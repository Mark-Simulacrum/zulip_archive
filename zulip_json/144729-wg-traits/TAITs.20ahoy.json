[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> or others-- can we sync on Zuliptoday?</p>",
        "id": 247205934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308067
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>, sure!</p>",
        "id": 247205955,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627308086
    },
    {
        "content": "<p>zulip party sgtm</p>",
        "id": 247205960,
        "sender_full_name": "oli",
        "timestamp": 1627308090
    },
    {
        "content": "<p>I was going to ask, what's the plan with <code>min_type_alias_impl_trait</code>?</p>",
        "id": 247206014,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627308114
    },
    {
        "content": "<p>put it into a bunker next to a nuke and run</p>",
        "id": 247206085,
        "sender_full_name": "oli",
        "timestamp": 1627308132
    },
    {
        "content": "<p>lol</p>",
        "id": 247206104,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627308141
    },
    {
        "content": "<p>idk, we can still use it for syntactical gating</p>",
        "id": 247206112,
        "sender_full_name": "oli",
        "timestamp": 1627308147
    },
    {
        "content": "<p>but the usefulness of that is... unclear</p>",
        "id": 247206130,
        "sender_full_name": "oli",
        "timestamp": 1627308156
    },
    {
        "content": "<p>ok</p>",
        "id": 247206153,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627308166
    },
    {
        "content": "<p>like, we can't really protect against using it <em>everywhere</em> with the new system</p>",
        "id": 247206166,
        "sender_full_name": "oli",
        "timestamp": 1627308174
    },
    {
        "content": "<p>I think at this point the idea should be scrapped</p>",
        "id": 247206176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308180
    },
    {
        "content": "<p>and we should just run with <code>type_alias_impl_trait</code> and stabilize the \"whole thing\"</p>",
        "id": 247206192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308191
    },
    {
        "content": "<p>or move any remaining details to other feature gates</p>",
        "id": 247206199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308197
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 247206204,
        "sender_full_name": "oli",
        "timestamp": 1627308202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> how goes the hacking on the newer approach?</p>",
        "id": 247206241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308224
    },
    {
        "content": "<p>well... as we discussed on Friday, there is an unfortunate coupling of the current eager <code>instantiate</code> scheme that does both infer var generation and bound generation</p>",
        "id": 247206334,
        "sender_full_name": "oli",
        "timestamp": 1627308264
    },
    {
        "content": "<p>I am now splitting this up. The eager thing will still generate the infer vars, but the bound generation will happen after inference is done</p>",
        "id": 247206428,
        "sender_full_name": "oli",
        "timestamp": 1627308313
    },
    {
        "content": "<p>i.e., if we have <code>-&gt; impl Debug</code>, which we instantiate to <code>?X</code>, then \"bound generation\" means adding <code>?X: Debug</code>?</p>",
        "id": 247206459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308327
    },
    {
        "content": "<p>I've crossed a lot of time zones since Friday, so forgive me while I page things back in</p>",
        "id": 247206481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308335
    },
    {
        "content": "<p>yea</p>",
        "id": 247206505,
        "sender_full_name": "oli",
        "timestamp": 1627308350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247206428\">said</a>:</p>\n<blockquote>\n<p>I am now splitting this up. The eager thing will still generate the infer vars, but the bound generation will happen after inference is done</p>\n</blockquote>\n<p>unification does return a set of obligations</p>",
        "id": 247206516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308354
    },
    {
        "content": "<p>that's exactly it</p>",
        "id": 247206521,
        "sender_full_name": "oli",
        "timestamp": 1627308356
    },
    {
        "content": "<p>(the <code>InferOk</code> list)</p>",
        "id": 247206523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308358
    },
    {
        "content": "<p>so plausibly we could return the bounds in there, right?</p>",
        "id": 247206578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308365
    },
    {
        "content": "<p>hmm</p>",
        "id": 247206587,
        "sender_full_name": "oli",
        "timestamp": 1627308370
    },
    {
        "content": "<p>the problem was that we can't compute the bounds</p>",
        "id": 247206606,
        "sender_full_name": "oli",
        "timestamp": 1627308383
    },
    {
        "content": "<p>because <code>rustc_infer</code> doesn't have access to <code>rustc_trait_resolve</code></p>",
        "id": 247206624,
        "sender_full_name": "oli",
        "timestamp": 1627308395
    },
    {
        "content": "<p>it seems ok to generate the bounds later</p>",
        "id": 247206647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308412
    },
    {
        "content": "<p>but remind me why this matters :)</p>",
        "id": 247206655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308417
    },
    {
        "content": "<p>sec, I need to link to code to explain</p>",
        "id": 247206735,
        "sender_full_name": "oli",
        "timestamp": 1627308452
    },
    {
        "content": "<p>argml, vscode doesn't link to lines anymore, just to files</p>",
        "id": 247207126,
        "sender_full_name": "oli",
        "timestamp": 1627308642
    },
    {
        "content": "<p>anyway, so we have a FnCtxt for typeck to check an entire function. This currently eagerly instantiates opaque types from the return type</p>",
        "id": 247207200,
        "sender_full_name": "oli",
        "timestamp": 1627308680
    },
    {
        "content": "<p>the obligations generated during that (returned via <code>InferOk</code>) are stored in the FnCtxt</p>",
        "id": 247207306,
        "sender_full_name": "oli",
        "timestamp": 1627308729
    },
    {
        "content": "<p>are they handled specially somewhere?</p>",
        "id": 247207372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308769
    },
    {
        "content": "<p>The obligations are generated in <code>instantiate_opaque_types_in_map</code> or more precisely <code>fold_opaque_ty</code></p>",
        "id": 247207397,
        "sender_full_name": "oli",
        "timestamp": 1627308779
    },
    {
        "content": "<p>right</p>",
        "id": 247207410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308786
    },
    {
        "content": "<p>not really, they are just generated right when we create the inference variable</p>",
        "id": 247207426,
        "sender_full_name": "oli",
        "timestamp": 1627308803
    },
    {
        "content": "<p>but doing this at the same time is not necessary</p>",
        "id": 247207443,
        "sender_full_name": "oli",
        "timestamp": 1627308812
    },
    {
        "content": "<p>right</p>",
        "id": 247207450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308815
    },
    {
        "content": "<p>I definitely think we <em>can</em> do it later</p>",
        "id": 247207460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308821
    },
    {
        "content": "<p>I might have expected us to do it via <code>InferOk</code></p>",
        "id": 247207484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308836
    },
    {
        "content": "<p>but I am ok with either approach</p>",
        "id": 247207491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308840
    },
    {
        "content": "<p>at least for now</p>",
        "id": 247207540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308847
    },
    {
        "content": "<p>I imagine that you are thinking we'll have the <code>FnCtxt</code> iterate over the hashmap of \"instantiated opaque types\" in the inferctxt and add the relevant obligations, probably at the very end of typecheck?</p>",
        "id": 247207580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308875
    },
    {
        "content": "<p>yes</p>",
        "id": 247207591,
        "sender_full_name": "oli",
        "timestamp": 1627308881
    },
    {
        "content": "<p>we may have to do it more than once</p>",
        "id": 247207601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308885
    },
    {
        "content": "<p>or-- perhaps--</p>",
        "id": 247207608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308889
    },
    {
        "content": "<p>I would probably add that logic into the \"fulfill obligations if necessary\" callback-- let me find it</p>",
        "id": 247207657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627308908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247206655\">said</a>:</p>\n<blockquote>\n<p>but remind me why this matters <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>the problem is that inference happens in <code>rustc_infer</code>, but obligation generation needs to call code from <code>rustc_trait_selection</code>, and I don't want to even try to add a dependency to <code>rustc_infer</code></p>",
        "id": 247207809,
        "sender_full_name": "oli",
        "timestamp": 1627308974
    },
    {
        "content": "<p>ok ok, I'm not sure why they should ahve to, but I believe you</p>",
        "id": 247208163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309131
    },
    {
        "content": "<p>it may be possible to untangle them</p>",
        "id": 247208210,
        "sender_full_name": "oli",
        "timestamp": 1627309151
    },
    {
        "content": "<p>but it is very entangled right now</p>",
        "id": 247208216,
        "sender_full_name": "oli",
        "timestamp": 1627309158
    },
    {
        "content": "<p>so I would add the automatic generation here I think</p>",
        "id": 247208289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309194
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">select_obligations_where_possible</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fallback_has_occurred</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mutate_fulfillment_errors</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">traits</span>::<span class=\"n\">FulfillmentError</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247208296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309196
    },
    {
        "content": "<p>in <code>impl FnCtxt</code></p>",
        "id": 247208344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309204
    },
    {
        "content": "<p>I can't easily generate my github links this second</p>",
        "id": 247208379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309212
    },
    {
        "content": "<p>I see it</p>",
        "id": 247208397,
        "sender_full_name": "oli",
        "timestamp": 1627309218
    },
    {
        "content": "<p>but to explain my thinking:</p>",
        "id": 247208406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309220
    },
    {
        "content": "<p>we call that function when we want to try to solve obligations-- either because we have to (at the end of compilation) or because doing so may give us more typing hints</p>",
        "id": 247208458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309244
    },
    {
        "content": "<p>this does require us to be a bit smarter around the inference contxt, i.e., we'd have to be able to say \"have we already added the obligations? if so, don't do it again\"</p>",
        "id": 247208504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309261
    },
    {
        "content": "<p>but that's not hard</p>",
        "id": 247208517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309265
    },
    {
        "content": "<p>yea, that sounds like the right spot</p>",
        "id": 247208539,
        "sender_full_name": "oli",
        "timestamp": 1627309271
    },
    {
        "content": "<p>there are two things I like about this</p>",
        "id": 247208565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309281
    },
    {
        "content": "<ul>\n<li>in the future, I'd like us to be able to conclude that <code>?T: Debug</code> based on the fact that we're going to have to prove it later</li>\n</ul>",
        "id": 247208587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309295
    },
    {
        "content": "<p>for that to work, we'd need the <code>?T: Debug</code> obligation to be registered :)</p>",
        "id": 247208612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309308
    },
    {
        "content": "<p>and e.g. method dispatch (if I'm not mistaken) calls into this function</p>",
        "id": 247208656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309323
    },
    {
        "content": "<p>on the hopes that it will figure out what <code>?T</code> is</p>",
        "id": 247208696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309332
    },
    {
        "content": "<ul>\n<li>we may have to do obligation generation in rounds anyway:</li>\n</ul>",
        "id": 247208726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309351
    },
    {
        "content": "<p>the end of type check is this fixed point thing where we try to solve all the obligatios, then do some defaulting, and try to prove some more, etc</p>",
        "id": 247208783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309370
    },
    {
        "content": "<p>I could imagine that that process may wind up touching on some TAITs that are in scope</p>",
        "id": 247208812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309383
    },
    {
        "content": "<p>and hence growing the set</p>",
        "id": 247208820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309385
    },
    {
        "content": "<p>it'd be good to try and make a test case for that though :) sounds a bit complex lol</p>",
        "id": 247208840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309398
    },
    {
        "content": "<p>make sense?</p>",
        "id": 247208844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309401
    },
    {
        "content": "<p>yes, both points</p>",
        "id": 247208859,
        "sender_full_name": "oli",
        "timestamp": 1627309411
    },
    {
        "content": "<p>cool</p>",
        "id": 247209040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309482
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> not sure what you're up to :) test cases?</p>",
        "id": 247209123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> do you have a sense for timeline here?</p>",
        "id": 247209167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247209123\">said</a>:</p>\n<blockquote>\n<p>so <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> not sure what you're up to :) test cases?</p>\n</blockquote>\n<p>yes, I'm with the test cases</p>",
        "id": 247209196,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309547
    },
    {
        "content": "<p>there are tests that exist in the test suite but we don't have in the document</p>",
        "id": 247209273,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309567
    },
    {
        "content": "<p>I'm adding a section in a document I own, saying what they are them about</p>",
        "id": 247209298,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309579
    },
    {
        "content": "<p>but also, I'd be fine to get some coding tasks too if there's any to do</p>",
        "id": 247209331,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309596
    },
    {
        "content": "<p>oh one other point, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, as a final consistency check, we should check that the set of types for which we have instantiated obligations, and the set of types we have instantiated within inferctxt, are the same set :)</p>",
        "id": 247209481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309666
    },
    {
        "content": "<p>ok, that all sounds good <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 247209567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309691
    },
    {
        "content": "<p>as far as coding, I <em>think</em> right now we're still blocked on <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s refactoring before it makes sense to do anything else</p>",
        "id": 247209595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247209167\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> do you have a sense for timeline here?</p>\n</blockquote>\n<p>well, so far it has been an \"looks good, oh weird situation -&gt; lots more work\", this pattern may continue. Other than that, probably two weeks for the impl plus another for testing? Also got a weird ICE after removing the typeck dependency for tait information during mir borrowck: <a href=\"https://github.com/rust-lang/rust/issues/87455#issue-952299650\">https://github.com/rust-lang/rust/issues/87455#issue-952299650</a></p>",
        "id": 247209624,
        "sender_full_name": "oli",
        "timestamp": 1627309721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247209595\">said</a>:</p>\n<blockquote>\n<p>as far as coding, I <em>think</em> right now we're still blocked on <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span>'s refactoring before it makes sense to do anything else</p>\n</blockquote>\n<p>removing min_tait can be done in parallel</p>",
        "id": 247209647,
        "sender_full_name": "oli",
        "timestamp": 1627309734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247209481\">said</a>:</p>\n<blockquote>\n<p>oh one other point, <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span>, as a final consistency check, we should check that the set of types for which we have instantiated obligations, and the set of types we have instantiated within inferctxt, are the same set <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>that will require a bit of tracking overhead, but seems ok to do right now and remove later</p>",
        "id": 247209746,
        "sender_full_name": "oli",
        "timestamp": 1627309777
    },
    {
        "content": "<p>I'm imagining you have to do that anyway</p>",
        "id": 247209843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247209647\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247209595\">said</a>:</p>\n<blockquote>\n<p>as far as coding, I <em>think</em> right now we're still blocked on <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span>'s refactoring before it makes sense to do anything else</p>\n</blockquote>\n<p>removing min_tait can be done in parallel</p>\n</blockquote>\n<p>do you think we should remove the feature flag and just leave <code>type_alias_impl_trait</code>?</p>",
        "id": 247209884,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309825
    },
    {
        "content": "<p>I was thinking that, in the <code>FnCtxt</code>, there would be a hashset of \"all TAITs that have had their obligations created\"</p>",
        "id": 247209892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309829
    },
    {
        "content": "<p>and we would compare its contents against the set \"all TAITs taht have inference variables\"</p>",
        "id": 247209910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309840
    },
    {
        "content": "<p>ok, I can remove the feature flag then</p>",
        "id": 247209931,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309849
    },
    {
        "content": "<p>in order to create any obligations that are needed</p>",
        "id": 247209935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309850
    },
    {
        "content": "<p>is \"let binding impl trait\" fully removed?</p>",
        "id": 247209961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309862
    },
    {
        "content": "<p>yes</p>",
        "id": 247209974,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309867
    },
    {
        "content": "<p>also, I've adjusted our dashboard</p>",
        "id": 247210000,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309876
    },
    {
        "content": "<p>very nice</p>",
        "id": 247210003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627309877
    },
    {
        "content": "<p>moved some tasks to complete</p>",
        "id": 247210008,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309880
    },
    {
        "content": "<p>also the work we were doing together is merged</p>",
        "id": 247210049,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309896
    },
    {
        "content": "<p>talking about <a href=\"https://github.com/rust-lang/rust/issues/87287\">#87287</a>, which closes <a href=\"https://github.com/rust-lang/rust/issues/86465\">#86465</a></p>",
        "id": 247210098,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247209935\">said</a>:</p>\n<blockquote>\n<p>in order to create any obligations that are needed</p>\n</blockquote>\n<p>I was considering just adding a \"todo\" queue that gets emptied every time we resolve some, but just having a set works, too</p>",
        "id": 247210101,
        "sender_full_name": "oli",
        "timestamp": 1627309916
    },
    {
        "content": "<p>and <a href=\"https://github.com/rust-lang/rust/issues/86410\">#86410</a> is merged too</p>",
        "id": 247210201,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627309939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> a to-do- queue could work, yeah, in that case checking for consistency is just checking that the queue is empty.</p>",
        "id": 247210768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627310185
    },
    {
        "content": "<p>cool, seems like not much to talk about then?</p>",
        "id": 247211224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627310388
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> can remove the <code>min_tait</code> feature gate</p>",
        "id": 247211287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627310405
    },
    {
        "content": "<p>I'm wondering then about the issue triage -- butI think we'll just revisit it after the \"reimplement the core engine\" work is done</p>",
        "id": 247211316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1627310422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247211316\">said</a>:</p>\n<blockquote>\n<p>I'm wondering then about the issue triage -- butI think we'll just revisit it after the \"reimplement the core engine\" work is done</p>\n</blockquote>\n<p>someone already did a PR to close all the impl trait in bindings ICE issues by creating tests for them</p>",
        "id": 247211531,
        "sender_full_name": "oli",
        "timestamp": 1627310518
    },
    {
        "content": "<p>but yea, the rest needs a full review with the new information we have now</p>",
        "id": 247211624,
        "sender_full_name": "oli",
        "timestamp": 1627310538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247211531\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/144729-wg-traits/topic/TAITs.20ahoy/near/247211316\">said</a>:</p>\n<blockquote>\n<p>I'm wondering then about the issue triage -- butI think we'll just revisit it after the \"reimplement the core engine\" work is done</p>\n</blockquote>\n<p>someone already did a PR to close all the impl trait in bindings ICE issues by creating tests for them</p>\n</blockquote>\n<p>can you provide a link to that?</p>",
        "id": 247214364,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1627311647
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/87383\">https://github.com/rust-lang/rust/pull/87383</a></p>",
        "id": 247215714,
        "sender_full_name": "oli",
        "timestamp": 1627312158
    },
    {
        "content": "<p>I caused an ICE with the mir borrowck/typeck decoupling. The fix is up in <a href=\"https://github.com/rust-lang/rust/pull/87483\">https://github.com/rust-lang/rust/pull/87483</a></p>",
        "id": 247501681,
        "sender_full_name": "oli",
        "timestamp": 1627498550
    }
]