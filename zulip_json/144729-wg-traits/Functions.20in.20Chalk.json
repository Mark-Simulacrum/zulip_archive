[
    {
        "content": "<p>So, I'm trying to work on <a href=\"https://github.com/rust-lang/rust/issues/688\">#688</a>, particularly I'm trying to change chalk-integration's closure model to match that of rustc/rust-analyzer (where we store the closure parameters, closure kind, closure sig, and upvars all in the substitution) and honestly just opening a can of worms</p>",
        "id": 231500112,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616516833
    },
    {
        "content": "<p>Maybe we can discuss this during the meeting today</p>",
        "id": 231500151,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616516848
    },
    {
        "content": "<p>But, let me just go through a few things:</p>",
        "id": 231500189,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616516860
    },
    {
        "content": "<p>1) <em>Why</em> the heck do we store the closure kind, sig, and upvars in the <code>Substitution</code>, instead of just alongside the <code>Id</code>. Like <code>Closure(Id, Kind, Sig, Upvars, Subst)</code></p>",
        "id": 231500504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616516957
    },
    {
        "content": "<p>I'm guessing it's because we have to infer the kind/sig/upvars</p>",
        "id": 231500556,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616516980
    },
    {
        "content": "<p>2) I think the fact that Chalk's <code>Function</code> variant is <code>FnPointer</code> whereas rustc's  <code>FnPtr</code> is <code>PolyFnSig</code> is biting us here</p>",
        "id": 231500827,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616517069
    },
    {
        "content": "<p>But, maybe not</p>",
        "id": 231501169,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616517205
    },
    {
        "content": "<p>Re. 2: yes, it is. Since we need to represent closures with bound types too, not just bound lifetimes</p>",
        "id": 231516296,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616522771
    },
    {
        "content": "<p>I.e. <code>closure foo&lt;T, U, V&gt;(&amp;self, a: &amp;'static (T, &amp;'static U), b: &amp;'static (V, U)) -&gt; Ordering {}</code> we need something like <code>for&lt;T, U, V&gt; fn(...) -&gt; Ordering</code> as a \"function signature\"</p>",
        "id": 231516461,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616522841
    },
    {
        "content": "<p>Going back to the rust-analyzer repro:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn query_and_sort_catalog(addons: &amp;[()]) {\n    let mut catalog_rows_and_score = addons\n        .iter()\n        .filter_map(|a| Some((a, 0)))\n        .filter(|(a, _)| true)\n        .map(|(a, score)| (a, 0))\n        .collect::&lt;Vec&lt;_&gt;&gt;();\n\n    catalog_rows_and_score.sort_by(|(addon_a, score_a), (addon_b, score_b)| score_a.cmp(&amp;score_b));\n}\n</code></pre></div>\n<p>We're trying to model that last closure</p>",
        "id": 231516740,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616522931
    },
    {
        "content": "<p>I feel like I'm a little confused</p>",
        "id": 231516936,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616523008
    },
    {
        "content": "<p>I guess that's not right</p>",
        "id": 231517413,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616523201
    },
    {
        "content": "<p>The fn sig rust-analyzer was passing is:</p>\n<div class=\"codehilite\"><pre><span></span><code>for&lt;0&gt; [\n    ?0 := (&amp;&#39;static 2&lt;[?0 := ^1.0, ?1 := (&amp;&#39;static ^1.1)]&gt;),\n    ?1 := (&amp;&#39;static 2&lt;[?0 := ^1.2, ?1 := ^1.1]&gt;),\n    ?2 := Ordering&lt;[]&gt;]\n]\n</code></pre></div>",
        "id": 231517507,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616523238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Functions.20in.20Chalk/near/231500827\">said</a>:</p>\n<blockquote>\n<p>2) I think the fact that Chalk's <code>Function</code> variant is <code>FnPointer</code> whereas rustc's  <code>FnPtr</code> is <code>PolyFnSig</code> is biting us here</p>\n</blockquote>\n<p>With the latter being <code>type PolyFnSig&lt;'tcx&gt; = Binder&lt;FnSig&lt;'tcx&gt;&gt;</code>, is the difference here just that chalk is not doing <code>Binders&lt;FnSubst&lt;I&gt;&gt;</code>?</p>",
        "id": 231517764,
        "sender_full_name": "detrumi",
        "timestamp": 1616523344
    },
    {
        "content": "<p>Well, so in Chalk, <code>FnPointer</code> looks like <code>{ num_binders: u32, sig: FnSig, subst: FnSubst }</code></p>",
        "id": 231517867,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616523376
    },
    {
        "content": "<p>So the <code>Binder</code> in rustc is represented in <code>num_binders</code></p>",
        "id": 231517924,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616523407
    },
    {
        "content": "<p>It's weird. Because when we see <code>for&lt;'a&gt; fn(...) -&gt; Ordering</code> in Rust, you can't really have \"bound vars\" in the arguments</p>",
        "id": 231517977,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616523442
    },
    {
        "content": "<p>Huh, but <code>FnPointer.into_binders(..)</code>fills those with all lifetimes. And you just said it can also be types?</p>",
        "id": 231517997,
        "sender_full_name": "detrumi",
        "timestamp": 1616523457
    },
    {
        "content": "<p>But maybe that's wrong</p>",
        "id": 231518019,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616523469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125131\">detrumi</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Functions.20in.20Chalk/near/231517997\">said</a>:</p>\n<blockquote>\n<p>Huh, but <code>FnPointer.into_binders(..)</code>fills those with all lifetimes. And you just said it can also be types?</p>\n</blockquote>\n<p>Well, this is what I'm confused about</p>",
        "id": 231518086,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616523486
    },
    {
        "content": "<p>Is essentially how to represent that closure</p>",
        "id": 231518156,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616523522
    },
    {
        "content": "<p>(<a href=\"https://github.com/detrumi/chalk/blob/2b4b3376f5d3ce1dea604e5e78c860b9eb880225/chalk-ir/src/lib.rs#L1120-L1120\">the function I was talking about</a>)</p>",
        "id": 231518242,
        "sender_full_name": "detrumi",
        "timestamp": 1616523571
    },
    {
        "content": "<p>So, a <code>FnPtr</code> or <code>FnPointer</code> essentially you can think about as literally a pointer to a function</p>",
        "id": 231518402,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616523623
    },
    {
        "content": "<p>And, more so, a <em>monomorphized</em> function</p>",
        "id": 231518455,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616523639
    },
    {
        "content": "<p>So, it doesn't <em>quite</em> make sense to write <code>for&lt;T&gt; fn(T)</code></p>",
        "id": 231518539,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616523677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Functions.20in.20Chalk/near/231517507\">said</a>:</p>\n<blockquote>\n<p>The fn sig rust-analyzer was passing is:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>for&lt;0&gt; [\n    ?0 := (&amp;&#39;static 2&lt;[?0 := ^1.0, ?1 := (&amp;&#39;static ^1.1)]&gt;),\n    ?1 := (&amp;&#39;static 2&lt;[?0 := ^1.2, ?1 := ^1.1]&gt;),\n    ?2 := Ordering&lt;[]&gt;]\n]\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I guess, going back to this, I need to figure out how to represent \"some unknown closure\" in the chalk tests</p>",
        "id": 231518775,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616523802
    },
    {
        "content": "<p>That would at the very least help with reproducing these bugs</p>",
        "id": 231518833,
        "sender_full_name": "detrumi",
        "timestamp": 1616523832
    },
    {
        "content": "<p>The existing infrastructure is all based around the state where we <em>know</em> the signature of a function</p>",
        "id": 231518939,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616523862
    },
    {
        "content": "<p>It's also kind of weird to try to fit the current testing into the rustc/rust-analyzer style</p>",
        "id": 231519275,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616524002
    },
    {
        "content": "<p>Because the current form <em>does allow</em> bound types</p>",
        "id": 231519322,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616524023
    },
    {
        "content": "<p>closures can't have type parameters, in my understanding</p>",
        "id": 231519351,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616524034
    },
    {
        "content": "<p>(maybe)</p>",
        "id": 231519365,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616524040
    },
    {
        "content": "<p>the unknown types in the closure are represented by type variables</p>",
        "id": 231519401,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616524060
    },
    {
        "content": "<p>But, should those be bound vars or placeholders?</p>",
        "id": 231519524,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616524089
    },
    {
        "content": "<p>during inference, they're actual type variables. when passing them to chalk they get canonicalized and turned into bound vars</p>",
        "id": 231519619,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616524131
    },
    {
        "content": "<p>the other difference, is in the chalk-integration tests, the closure parameters can be named in the upvars</p>",
        "id": 231519750,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616524192
    },
    {
        "content": "<p>Okay, yeah, talking through this, I'm convinced that I need need to change the way closures are written/parsed</p>",
        "id": 231520113,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616524314
    },
    {
        "content": "<p>Specifically, we need <em>two</em> levels of parameters</p>",
        "id": 231520170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616524324
    },
    {
        "content": "<p>well</p>",
        "id": 231520197,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616524335
    },
    {
        "content": "<p>actually, I guess I could get away with just not doing late bound vars</p>",
        "id": 231520267,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616524361
    },
    {
        "content": "<p>I have a feeling things are going to blow up because I'm going to have escaping bound vars</p>",
        "id": 231521208,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616524692
    },
    {
        "content": "<p>Okay, who's around for me to bounce thoughts off of? <span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span>?</p>",
        "id": 231838799,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616691843
    },
    {
        "content": "<p>So, closures and such aside</p>",
        "id": 231838845,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616691853
    },
    {
        "content": "<p>let's look at</p>\n<div class=\"codehilite\"><pre><span></span><code>Implemented({closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [\n    ?0 := (&amp;&#39;static 2&lt;[?0 := ^1.0, ?1 := (&amp;&#39;static ^1.1)]&gt;),\n    ?1 := (&amp;&#39;static 2&lt;[?0 := ^1.2, ?1 := ^1.1]&gt;),\n    ?2 := Ordering&lt;[]&gt;]\n]&gt; : FnMut&lt;2&lt;[\n    ?0 := (&amp;&#39;static 2&lt;[?0 := ^0.3, ?1 := ^0.4]&gt;),\n    ?1 := (&amp;&#39;static 2&lt;[?0 := ^0.3, ?1 := ^0.4]&gt;)\n]&gt;&gt;)\n</code></pre></div>",
        "id": 231838875,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616691861
    },
    {
        "content": "<p>oh hey</p>",
        "id": 231838955,
        "sender_full_name": "detrumi",
        "timestamp": 1616691888
    },
    {
        "content": "<p>Essentially, this creates a goal: </p>\n<div class=\"codehilite\"><pre><span></span><code>for&lt;0&gt; [\n    ?0 := (&amp;&#39;static 2&lt;[?0 := ^1.0, ?1 := (&amp;&#39;static ^1.1)]&gt;),\n    ?1 := (&amp;&#39;static 2&lt;[?0 := ^1.2, ?1 := ^1.1]&gt;),\n    ?2 := Ordering&lt;[]&gt;]\n]: FnMut&lt;2&lt;[\n    ?0 := (&amp;&#39;static 2&lt;[?0 := ^0.3, ?1 := ^0.4]&gt;),\n    ?1 := (&amp;&#39;static 2&lt;[?0 := ^0.3, ?1 := ^0.4]&gt;)\n]&gt;&gt;\n</code></pre></div>",
        "id": 231839025,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616691906
    },
    {
        "content": "<p>And look at that</p>",
        "id": 231839074,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616691920
    },
    {
        "content": "<p>Eventually, we're going to end up with something like:<br>\n<code>(&amp;'static 2&lt;[?0 := ^1.0, ?1 := (&amp;'static ^1.1)]&gt;) == (&amp;'static 2&lt;[?0 := ^0.3, ?1 := ^0.4]&gt;)</code> and <code>(&amp;'static 2&lt;[?0 := ^1.2, ?1 := ^1.1]&gt;) == (&amp;'static 2&lt;[?0 := ^0.3, ?1 := ^0.4]&gt;)</code></p>",
        "id": 231839236,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616691973
    },
    {
        "content": "<p>Do the two <code>?0</code>'s in <code>?0 := (&amp;'static 2&lt;[?0</code> refer to the same thing here?</p>",
        "id": 231839309,
        "sender_full_name": "detrumi",
        "timestamp": 1616691994
    },
    {
        "content": "<p>no :/</p>",
        "id": 231839355,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692011
    },
    {
        "content": "<p>debug here is a bit confusing</p>",
        "id": 231839420,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692028
    },
    {
        "content": "<p>I would prefer it just as a list</p>",
        "id": 231839437,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692035
    },
    {
        "content": "<p>Yeah, having trouble parsing this</p>",
        "id": 231839490,
        "sender_full_name": "detrumi",
        "timestamp": 1616692059
    },
    {
        "content": "<p>Something like </p>\n<div class=\"codehilite\"><pre><span></span><code>for&lt;0&gt; [\n    (&amp;&#39;static 2&lt;[^1.0, (&amp;&#39;static ^1.1)]&gt;),\n    (&amp;&#39;static 2&lt;[^1.2, ^1.1]&gt;),\n    Ordering&lt;[]&gt;]\n]: FnMut&lt;2&lt;[\n    (&amp;&#39;static 2&lt;[^0.3, ^0.4]&gt;),\n    (&amp;&#39;static 2&lt;[^0.3, ^0.4]&gt;)\n]&gt;&gt;\n</code></pre></div>",
        "id": 231839601,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692087
    },
    {
        "content": "<p>Better?</p>",
        "id": 231839667,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692105
    },
    {
        "content": "<p>Sort of importantly</p>",
        "id": 231839697,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692114
    },
    {
        "content": "<p>Both <code>(&amp;'static ^1.1)</code> and <code>^1.1</code> get unifed with <code>^0.4</code></p>",
        "id": 231839735,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692136
    },
    {
        "content": "<p>And yeah, that's gonna cause a cycle if we don't detect that</p>",
        "id": 231839798,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692158
    },
    {
        "content": "<p>I've also been able to refactor things around to get this goal locally: <code>Normalize(&lt;{closure:ClosureId(#4)}&lt;^0.0, ^0.1, ^0.2, Int(I8), \"rust\" for&lt;0&gt; [?0 := (&amp;'static 2&lt;^1.0, (&amp;'static ^1.1)&gt;), ?1 := (&amp;'static 2&lt;^1.2, ^1.1&gt;), ?2 := Ordering], 0&gt; as FnOnce&lt;2&lt;(&amp;'static 2&lt;^0.3, ^0.4&gt;), (&amp;'static 2&lt;^0.3, ^0.4&gt;)&gt;&gt;&gt;::Output -&gt; Ordering)</code></p>",
        "id": 231839982,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692222
    },
    {
        "content": "<p>which looks very similar</p>",
        "id": 231840003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692227
    },
    {
        "content": "<p>But I'm not getting a cycle, just \"No solution\"</p>",
        "id": 231840032,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692239
    },
    {
        "content": "<p>So not sure if maybe the refactorings I've made locally <em>fixed</em> it, or if still no reproing</p>",
        "id": 231840080,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692261
    },
    {
        "content": "<p>Actually though, we <em>do</em> catch this locally:</p>\n<div class=\"codehilite\"><pre><span></span><code>0ms DEBUG trying fold_with on (&amp;&#39;static ?8)\n0ms DEBUG OccursCheck aborting because ?8 unioned with ?6\n0ms DEBUG failed to fold (&amp;&#39;static ?8)\n</code></pre></div>",
        "id": 231840199,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692311
    },
    {
        "content": "<p>So OccursCheck is what's preventing the cycle normally, right?</p>",
        "id": 231840348,
        "sender_full_name": "detrumi",
        "timestamp": 1616692360
    },
    {
        "content": "<p>Yeah</p>",
        "id": 231840373,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692376
    },
    {
        "content": "<p>So the question then becomes, what's special about the earlier goal that's not being caught by the check</p>",
        "id": 231840510,
        "sender_full_name": "detrumi",
        "timestamp": 1616692421
    },
    {
        "content": "<p>Right. It's a bit difficult because in the debug log you sent, there's no <code>chalk_solve</code> debugging, only <code>chalk_recursive</code></p>",
        "id": 231840629,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692453
    },
    {
        "content": "<p>Hm. Let me spin up the repro again</p>",
        "id": 231840865,
        "sender_full_name": "detrumi",
        "timestamp": 1616692535
    },
    {
        "content": "<p>Though it's weird how there's no <code>chalk_solve</code> logging then, since that's just controlled by <code>CHALK_DEBUG=3</code> here</p>",
        "id": 231840977,
        "sender_full_name": "detrumi",
        "timestamp": 1616692577
    },
    {
        "content": "<p>I guess it mentions OccursCheck once with <code>CHALK_DEBUG=4</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>│ │ │ │ │ │ │ ├─0ms DEBUG zip_tys Invariant, (&amp;&#39;static 2&lt;[?0 := ?3, ?1 := ?4]&gt;), (&amp;&#39;static 2&lt;[?0 := ?7, ?1 := ?6]&gt;)\n│ │ │ │ │ │ │ ├─┐relate_ty_ty variance=Invariant, a=(&amp;&#39;static 2&lt;[?0 := ?3, ?1 := ?4]&gt;), b=(&amp;&#39;static 2&lt;[?0 := ?7, ?1 := ?6]&gt;)\n│ │ │ │ │ │ │ │ ├─┐relate_lifetime_lifetime variance=Invariant, a=&#39;static, b=&#39;static\n│ │ │ │ │ │ │ │ ├─┘\n│ │ │ │ │ │ │ │ ├─0ms DEBUG zip_tys Invariant, 2&lt;[?0 := ?3, ?1 := ?4]&gt;, 2&lt;[?0 := ?7, ?1 := ?6]&gt;\n│ │ │ │ │ │ │ │ ├─┐relate_ty_ty variance=Invariant, a=2&lt;[?0 := ?3, ?1 := ?4]&gt;, b=2&lt;[?0 := ?7, ?1 := ?6]&gt;\n│ │ │ │ │ │ │ │ │ ├─0ms DEBUG zip_tys Invariant, ?3, ?7\n│ │ │ │ │ │ │ │ │ ├─┐relate_ty_ty variance=Invariant, a=?3, b=?7\n│ │ │ │ │ │ │ │ │ │ ├─┐unify_var_var a=?3, b=?7\n│ │ │ │ │ │ │ │ │ │ ├─┘\n│ │ │ │ │ │ │ │ │ ├─┘\n│ │ │ │ │ │ │ │ │ ├─0ms DEBUG zip_tys Invariant, ?4, ?6\n│ │ │ │ │ │ │ │ │ ├─┐relate_ty_ty variance=Invariant, a=(&amp;&#39;static ?10), b=?6\n│ │ │ │ │ │ │ │ │ │ ├─┐relate_var_ty variance=Invariant, var=?6, var_kind=General, ty=(&amp;&#39;static ?10)\n│ │ │ │ │ │ │ │ │ │ │ ├─0ms DEBUG relate_var_ty: universe index of var: U0\n│ │ │ │ │ │ │ │ │ │ │ ├─0ms DEBUG trying fold_with on (&amp;&#39;static ?10)\n│ │ │ │ │ │ │ │ │ │ │ ├─0ms DEBUG OccursCheck aborting because ?10 unioned with ?6\n│ │ │ │ │ │ │ │ │ │ │ ├─0ms DEBUG failed to fold (&amp;&#39;static ?10)\n│ │ │ │ │ │ │ │ │ │ ├─┘\n</code></pre></div>",
        "id": 231841356,
        "sender_full_name": "detrumi",
        "timestamp": 1616692742
    },
    {
        "content": "<p>I would just do <code>CHALK_DEBUG=debug</code></p>",
        "id": 231841545,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692823
    },
    {
        "content": "<p>That gets me the same output style</p>",
        "id": 231841650,
        "sender_full_name": "detrumi",
        "timestamp": 1616692862
    },
    {
        "content": "<p>as <code>=4</code>?</p>",
        "id": 231841739,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692896
    },
    {
        "content": "<p>yeah</p>",
        "id": 231841755,
        "sender_full_name": "detrumi",
        "timestamp": 1616692902
    },
    {
        "content": "<p>Can you post the log with chalk_solve output?</p>",
        "id": 231841781,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616692912
    },
    {
        "content": "<p>GitHub doesn't like 200K lines in a gist, one moment...</p>",
        "id": 231842048,
        "sender_full_name": "detrumi",
        "timestamp": 1616693011
    },
    {
        "content": "<p>I really only need the first few cycles</p>",
        "id": 231842246,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616693071
    },
    {
        "content": "<p>I think 3-4 is generally more than enough</p>",
        "id": 231842275,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616693083
    },
    {
        "content": "<p>From what I could tell, it seems like it's growing in two different places, alternating</p>",
        "id": 231842339,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616693104
    },
    {
        "content": "<p>That OccursCheck snippet I sent above is on line 100443, so not entirely sure about that</p>",
        "id": 231842387,
        "sender_full_name": "detrumi",
        "timestamp": 1616693123
    },
    {
        "content": "<p>woah</p>",
        "id": 231842420,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616693136
    },
    {
        "content": "<p>I mean, I would expect the OccursCheck to happen much sooner</p>",
        "id": 231842457,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616693151
    },
    {
        "content": "<p>Locally it happens line 225</p>",
        "id": 231842558,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616693180
    },
    {
        "content": "<p><a href=\"https://gist.github.com/detrumi/5d91e8fc419f9107bfa86ec9514d1e8f\">https://gist.github.com/detrumi/5d91e8fc419f9107bfa86ec9514d1e8f</a></p>",
        "id": 231842696,
        "sender_full_name": "detrumi",
        "timestamp": 1616693233
    },
    {
        "content": "<p>That's 94K lines until the OccursCheck mention</p>",
        "id": 231842794,
        "sender_full_name": "detrumi",
        "timestamp": 1616693273
    },
    {
        "content": "<p>(with invocation <code>CHALK_DEBUG=debug cargo run --release -p rust-analyzer -- analysis-stats ../tryout</code>)</p>",
        "id": 231842877,
        "sender_full_name": "detrumi",
        "timestamp": 1616693297
    },
    {
        "content": "<p>What is the <code>../tryout</code></p>",
        "id": 231843063,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616693378
    },
    {
        "content": "<p><code>analysis-stats</code> takes as argument a path to a directory with rust files, <code>tryout</code> holds a cargo project with the repro</p>",
        "id": 231843209,
        "sender_full_name": "detrumi",
        "timestamp": 1616693424
    },
    {
        "content": "<p>oh okay</p>",
        "id": 231843234,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616693434
    },
    {
        "content": "<p>It's an useful rust-analyzer tool to analyze a project from the command line instead of from the editor</p>",
        "id": 231843390,
        "sender_full_name": "detrumi",
        "timestamp": 1616693495
    },
    {
        "content": "<p>I also wonder if the repro could be minimized a bit more</p>",
        "id": 231843511,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616693525
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    let mut catalog_rows_and_score = addons\n        .iter()\n        .map(|a| (a, 0))\n        .collect::&lt;Vec&lt;_&gt;&gt;();\n</code></pre></div>",
        "id": 231843601,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616693563
    },
    {
        "content": "<p>Or if rust-analyzer doesn't give Chalk such an obscure goal</p>",
        "id": 231843747,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616693603
    },
    {
        "content": "<p>That doesn't reproduce it</p>",
        "id": 231844014,
        "sender_full_name": "detrumi",
        "timestamp": 1616693716
    },
    {
        "content": "<p>interesting</p>",
        "id": 231844163,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616693763
    },
    {
        "content": "<p>I was wondering why I couldn't find the relevant goal then I realized github hid everything after 9k lines</p>",
        "id": 231844362,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616693848
    },
    {
        "content": "<p>Interesting how even that <code>filter(|(a, _)| true)</code> makes a difference</p>",
        "id": 231844533,
        "sender_full_name": "detrumi",
        "timestamp": 1616693917
    },
    {
        "content": "<p>Though replacing that part with <code>map(|x| x)</code> still reproduces, so apparently it's the indirection that's important</p>",
        "id": 231844671,
        "sender_full_name": "detrumi",
        "timestamp": 1616693983
    },
    {
        "content": "<p>So the relevant goal doesn't actually happen until near the end of the file</p>",
        "id": 231844847,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616694043
    },
    {
        "content": "<p>But, this is different anyways: <code>Implemented({closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := ^1.0, ?1 := ^1.1, ?2 := ^1.2]]&gt;: FnMut&lt;2&lt;[?0 := (&amp;'static ^0.3), ?1 := (&amp;'static ^0.3)]&gt;&gt;)</code></p>",
        "id": 231844915,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616694072
    },
    {
        "content": "<p>So I don't know if you captured the goal</p>",
        "id": 231845239,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616694195
    },
    {
        "content": "<p>err nvm</p>",
        "id": 231845324,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616694237
    },
    {
        "content": "<p>Given that it only mentions <code>OccursCheck aborting</code> once, maybe it only starts nesting goals after that</p>",
        "id": 231845481,
        "sender_full_name": "detrumi",
        "timestamp": 1616694293
    },
    {
        "content": "<p>in which case I didn't put the relevant part of the log in the gist</p>",
        "id": 231845528,
        "sender_full_name": "detrumi",
        "timestamp": 1616694310
    },
    {
        "content": "<p>Okay I see <code>AliasEq(&lt;{closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;'static 2&lt;[?0 := ^1.0, ?1 := ^1.1]&gt;), ?1 := (&amp;'static 2&lt;[?0 := ^1.2, ?1 := ^1.3]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt; as FnOnce&lt;2&lt;[?0 := (&amp;'static 2&lt;[?0 := ^0.4, ?1 := ^0.5]&gt;), ?1 := (&amp;'static 2&lt;[?0 := ^0.4, ?1 := ^0.5]&gt;)]&gt;&gt;&gt;::Output = Ordering&lt;[]&gt;)</code></p>",
        "id": 231845721,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616694370
    },
    {
        "content": "<p>Okay found <code>Normalize(&lt;{closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;'static 2&lt;[?0 := ^1.0, ?1 := ^1.1]&gt;), ?1 := (&amp;'static 2&lt;[?0 := ^1.2, ?1 := ^1.3]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt; as FnOnce&lt;2&lt;[?0 := (&amp;'static 2&lt;[?0 := ^0.4, ?1 := ^0.5]&gt;), ?1 := (&amp;'static 2&lt;[?0 := ^0.4, ?1 := ^0.5]&gt;)]&gt;&gt;&gt;::Output -&gt; Ordering&lt;[]&gt;)</code></p>",
        "id": 231846202,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616694559
    },
    {
        "content": "<p><code>pushed clause Some(for&lt;type, type, type, type&gt; Normalize(&lt;{closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;'static 2&lt;[?0 := ^1.0, ?1 := ^1.1]&gt;), ?1 := (&amp;'static 2&lt;[?0 := ^1.2, ?1 := ^1.3]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt; as FnOnce&lt;2&lt;[?0 := (&amp;'static 2&lt;[?0 := ^0.0, ?1 := ^0.1]&gt;), ?1 := (&amp;'static 2&lt;[?0 := ^0.2, ?1 := ^0.3]&gt;)]&gt;&gt;&gt;::Output -&gt; Ordering&lt;[]&gt;))</code></p>",
        "id": 231846686,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616694736
    },
    {
        "content": "<p><code>pushed clause Some(for&lt;type, type, type&gt; Normalize(&lt;{closure:ClosureId(#4)}&lt;^0.0, ^0.1, ^0.2, Int(I8), \"rust\" for&lt;0&gt; [?0 := (&amp;'static 2&lt;^1.0, (&amp;'static ^1.1)&gt;), ?1 := (&amp;'static 2&lt;^1.2, ^1.1&gt;), ?2 := Ordering], 0&gt; as FnOnce&lt;2&lt;(&amp;'static 2&lt;^0.0, (&amp;'static ^0.1)&gt;), (&amp;'static 2&lt;^0.2, ^0.1&gt;)&gt;&gt;&gt;::Output -&gt; Ordering))</code></p>",
        "id": 231846719,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616694749
    },
    {
        "content": "<p>key difference between what you gave and what's happening locally</p>",
        "id": 231846747,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616694760
    },
    {
        "content": "<p>Welp I think I know what fixed it locally</p>",
        "id": 231847013,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616694851
    },
    {
        "content": "<p>It was a solver bug then?</p>",
        "id": 231847189,
        "sender_full_name": "detrumi",
        "timestamp": 1616694916
    },
    {
        "content": "<p>I'm not saying it's anything yet</p>",
        "id": 231847264,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616694943
    },
    {
        "content": "<p>Until I know this is why it's fixed</p>",
        "id": 231847275,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616694951
    },
    {
        "content": "<p>Welp nope</p>",
        "id": 231847366,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616694974
    },
    {
        "content": "<p>I mean, this is <em>probably</em> the correct point of failure</p>",
        "id": 231847549,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616695040
    },
    {
        "content": "<p>And more so.<br>\nLocally, I have </p>\n<div class=\"codehilite\"><pre><span></span><code>push_binders{binders=for&lt;&gt; FnDefInputsAndOutputDatum { argument_types: [(&amp;&#39;static 2&lt;^1.0, (&amp;&#39;static ^1.1)&gt;), (&amp;&#39;static 2&lt;^1.2, ^1.1&gt;)], return_type: Ordering }}\n</code></pre></div>\n<p>In rust-analyzer, it:</p>\n<div class=\"codehilite\"><pre><span></span><code>push_binders binders=for&lt;&gt; FnDefInputsAndOutputDatum { argument_types: [(&amp;&#39;static 2&lt;[?0 := ^1.0, ?1 := ^1.1]&gt;), (&amp;&#39;static 2&lt;[?0 := ^1.2, ?1 := ^1.3]&gt;)], return_type: Ordering&lt;[]&gt; }\n</code></pre></div>",
        "id": 231848432,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616695334
    },
    {
        "content": "<p>So, rust-analyzer just isn't giving Chalk the right <code>FnDefInputsAndOutputDatum</code>?</p>",
        "id": 231849113,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616695567
    },
    {
        "content": "<p>So <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/8e7e405f6ab0c1ee10bfdd3d55a97628fe4cd6dd/crates/hir_ty/src/traits/chalk.rs#L281-L281\">closure_inputs_and_output</a>?</p>",
        "id": 231849230,
        "sender_full_name": "detrumi",
        "timestamp": 1616695616
    },
    {
        "content": "<p>Yeah but I don't <em>see</em> anything wrong with that</p>",
        "id": 231849310,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616695652
    },
    {
        "content": "<p>oh wait</p>",
        "id": 231849425,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616695688
    },
    {
        "content": "<p>nvm</p>",
        "id": 231849426,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616695689
    },
    {
        "content": "<p><code>value={closure:ClosureId(#4)}&lt;^0.0, ^0.1, ^0.2, Int(I8), \"rust\" for&lt;0&gt; [?0 := (&amp;'static 2&lt;^1.0, (&amp;'static ^1.1)&gt;), ?1 := (&amp;'static 2&lt;^1.2, ^1.1&gt;), ?2 := Ordering], 0&gt;</code> local</p>",
        "id": 231849501,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616695710
    },
    {
        "content": "<p><code>value={closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;'static 2&lt;[?0 := ^1.0, ?1 := ^1.1]&gt;), ?1 := (&amp;'static 2&lt;[?0 := ^1.2, ?1 := ^1.3]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt;</code> rust-analyzer</p>",
        "id": 231849540,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616695725
    },
    {
        "content": "<p>So it's further up from there</p>",
        "id": 231849567,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616695737
    },
    {
        "content": "<p>So how do we get from <code>program_clauses_that_could_match goal=UCanonical { canonical: Canonical { value: InEnvironment { environment: Env([]), goal: Normalize(&lt;{closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;'static 2&lt;[?0 := ^1.0, ?1 := ^1.1]&gt;), ?1 := (&amp;'static 2&lt;[?0 := ^1.2, ?1 := ^1.3]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt; as FnOnce&lt;2&lt;[?0 := (&amp;'static 2&lt;[?0 := ^0.4, ?1 := ^0.5]&gt;), ?1 := (&amp;'static 2&lt;[?0 := ^0.4, ?1 := ^0.5]&gt;)]&gt;&gt;&gt;::Output -&gt; Ordering&lt;[]&gt;) }, binders: [U0 with kind type, U0 with kind type, U0 with kind type, U0 with kind type, U0 with kind type, U0 with kind type] }, universes: 1 }</code></p>",
        "id": 231850520,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616696086
    },
    {
        "content": "<p>To <code>push_binders binders=for&lt;type, type, type, type&gt; {closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;'static 2&lt;[?0 := ^1.0, ?1 := ^1.1]&gt;), ?1 := (&amp;'static 2&lt;[?0 := ^1.2, ?1 := ^1.3]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt;</code></p>",
        "id": 231850548,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616696097
    },
    {
        "content": "<p>oops</p>",
        "id": 231850619,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616696126
    },
    {
        "content": "<p>okay wait</p>",
        "id": 231850831,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616696197
    },
    {
        "content": "<p>I've confused myself</p>",
        "id": 231850839,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616696201
    },
    {
        "content": "<p>These aren't the same goals</p>",
        "id": 231850985,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616696269
    },
    {
        "content": "<p>Okay so it seems like the goal in <a href=\"https://github.com/rust-lang/rust/issues/688\">#688</a> isn't necessarily the \"start\" of the madness</p>",
        "id": 231851593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616696499
    },
    {
        "content": "<p>There's a lot of queries before that yeah</p>",
        "id": 231851793,
        "sender_full_name": "detrumi",
        "timestamp": 1616696578
    },
    {
        "content": "<p>yeah I don't actually see this goal here</p>",
        "id": 231852494,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616696872
    },
    {
        "content": "<p>OccursCheck happens under: <code>solve_from_clauses clause=for&lt;type, type, type, type, type&gt; Implemented({closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;'static 2&lt;[?0 := ^1.0, ?1 := (&amp;'static ^1.1)]&gt;), ?1 := (&amp;'static 2&lt;[?0 := ^1.2, ?1 := ^1.1]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt;: FnMut&lt;2&lt;[?0 := (&amp;'static 2&lt;[?0 := ^0.0, ?1 := (&amp;'static ^0.1)]&gt;), ?1 := (&amp;'static 2&lt;[?0 := ^0.2, ?1 := ^0.1]&gt;)]&gt;&gt;)</code></p>",
        "id": 231852683,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616696941
    },
    {
        "content": "<p>I assume it's the last top-level goal, so this one:</p>\n<div class=\"codehilite\"><pre><span></span><code>[INFO hir_ty::traits] trait_solve_query(Normalize(&lt;|&amp;(?0.0, &amp;?0.1), &amp;(?0.2, ?0.1)| -&gt; Ordering as FnOnce&lt;(&amp;(?0.3, ?0.4), &amp;(?0.3, ?0.4))&gt;&gt;::Output =&gt; Ordering))\n</code></pre></div>",
        "id": 231852771,
        "sender_full_name": "detrumi",
        "timestamp": 1616696979
    },
    {
        "content": "<p>(from the list I included <a href=\"https://github.com/rust-lang/chalk/issues/688#issuecomment-798983783\">here</a>)</p>",
        "id": 231852810,
        "sender_full_name": "detrumi",
        "timestamp": 1616696995
    },
    {
        "content": "<p>yes</p>",
        "id": 231852931,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616697018
    },
    {
        "content": "<p>can you post the ouput with chalk_solve debug</p>",
        "id": 231853021,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616697052
    },
    {
        "content": "<p>huh?</p>",
        "id": 231853136,
        "sender_full_name": "detrumi",
        "timestamp": 1616697107
    },
    {
        "content": "<p>I already posted the full output, or did you need more of the output there after the occurs check?</p>",
        "id": 231853258,
        "sender_full_name": "detrumi",
        "timestamp": 1616697147
    },
    {
        "content": "<p>oh yeah, way more after the occurs check</p>",
        "id": 231853432,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616697209
    },
    {
        "content": "<p>I think the last query you posted is the query <em>before</em> the one we want</p>",
        "id": 231853631,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616697266
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[INFO hir_ty::traits] trait_solve_query(Implements(|&amp;(?0.0, &amp;?0.1), &amp;(?0.2, ?0.1)| -&gt; Ordering: FnMut&lt;(&amp;(?0.3, ?0.4), &amp;(?0.3, ?0.4))&gt;))\n[INFO hir_ty::traits] trait_solve_query(Normalize(&lt;|&amp;(?0.0, &amp;?0.1), &amp;(?0.2, ?0.1)| -&gt; Ordering as FnOnce&lt;(&amp;(?0.3, ?0.4), &amp;(?0.3, ?0.4))&gt;&gt;::Output =&gt; Ordering))\n</code></pre></div>",
        "id": 231853655,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616697277
    },
    {
        "content": "<p>Another run, but this time from the occurs check onwards: <a href=\"https://gist.github.com/detrumi/f279f38e4116e7779e0a3e9e0ba6ffdd\">https://gist.github.com/detrumi/f279f38e4116e7779e0a3e9e0ba6ffdd</a></p>",
        "id": 231853998,
        "sender_full_name": "detrumi",
        "timestamp": 1616697381
    },
    {
        "content": "<p><code>goal: AliasEq(&lt;{closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;'static 2&lt;[?0 := ^1.0, ?1 := (&amp;'static ^1.1)]&gt;), ?1 := (&amp;'static 2&lt;[?0 := ^1.2, ?1 := ^1.1]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt; as FnOnce&lt;2&lt;[?0 := (&amp;'static 2&lt;[?0 := ^0.3, ?1 := ^0.4]&gt;), ?1 := (&amp;'static 2&lt;[?0 := ^0.3, ?1 := ^0.4]&gt;)]&gt;&gt;&gt;::Output = Ordering&lt;[]&gt;)</code></p>",
        "id": 231854095,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616697423
    },
    {
        "content": "<p>there we go</p>",
        "id": 231854100,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616697426
    },
    {
        "content": "<p>Okay, so local: </p>\n<div class=\"codehilite\"><pre><span></span><code>Normalize(&lt;{closure:ClosureId(#4)}&lt;^0.0, &#39;^0.1, ^0.2, ^0.3, ^0.4, Int(I8), &quot;rust&quot; for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;^1.0, (&amp;&#39;^1.1 ^1.2)&gt;), ?1 := (&amp;&#39;static 2&lt;^1.3, ^1.4&gt;), ?2 := Ordering], 0&gt; as FnOnce&lt;2&lt;(&amp;&#39;static 2&lt;^0.5, ^0.6&gt;), (&amp;&#39;static 2&lt;^0.5, ^0.6&gt;)&gt;&gt;&gt;::Output -&gt; Ordering)\n</code></pre></div>",
        "id": 231855949,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616698186
    },
    {
        "content": "<p>rust-analyzer</p>\n<div class=\"codehilite\"><pre><span></span><code>Normalize(&lt;{closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;[?0 := ^1.0, ?1 := (&amp;&#39;^1.1 ^1.2)]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ^1.3, ?1 := ^1.4]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt; as FnOnce&lt;2&lt;[?0 := (&amp;&#39;static 2&lt;[?0 := ^0.5, ?1 := ^0.6]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ^0.5, ?1 := ^0.6]&gt;)]&gt;&gt;&gt;::Output -&gt; Ordering&lt;[]&gt;)\n</code></pre></div>",
        "id": 231856055,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616698212
    },
    {
        "content": "<p>Those look identical except of the extra fn substs locally</p>",
        "id": 231856215,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616698281
    },
    {
        "content": "<p>Yeah, they look the same</p>",
        "id": 231856385,
        "sender_full_name": "detrumi",
        "timestamp": 1616698348
    },
    {
        "content": "<p>The inputs and output and we get back is different:<br>\nrust-analyzer</p>\n<div class=\"codehilite\"><pre><span></span><code>for&lt;&gt; FnDefInputsAndOutputDatum { argument_types: [(&amp;&#39;static 2&lt;[?0 := ^1.0, ?1 := (&amp;&#39;static ^1.2)]&gt;), (&amp;&#39;static 2&lt;[?0 := ^1.3, ?1 := ^1.4]&gt;)], return_type: Ordering&lt;[]&gt; }\n</code></pre></div>\n<p>local</p>\n<div class=\"codehilite\"><pre><span></span><code>for&lt;&gt; FnDefInputsAndOutputDatum { argument_types: [(&amp;&#39;static 2&lt;^1.0, (&amp;&#39;^1.1 ^1.2)&gt;), (&amp;&#39;static 2&lt;^1.3, ^1.4&gt;)], return_type: Ordering }\n</code></pre></div>",
        "id": 231860185,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616699812
    },
    {
        "content": "<p>Particularly that <code>'^1.1</code> gets replaced by <code>'static</code>; let's see if that makes a difference</p>",
        "id": 231860282,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616699852
    },
    {
        "content": "<p>More differences:</p>\n<p>rust-analyzer</p>\n<div class=\"codehilite\"><pre><span></span><code>unify(Normalize(&lt;{closure:ClosureId(3)}&lt;[                                     for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;?0, (&amp;&#39;?1 ?2)&gt;), ?1 := (&amp;&#39;static 2&lt;?3, ?4&gt;), ?2 := Ordering]&gt;    as FnOnce&lt;2&lt;(&amp;&#39;static 2&lt;?5, ?6&gt;), (&amp;&#39;static 2&lt;?5, ?6&gt;)&gt;&gt;&gt;::Output -&gt; Ordering), Normalize(&lt;{closure:ClosureId(3)}&lt;                                        for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;?7, (&amp;&#39;?8 ?9)&gt;), ?1 := (&amp;&#39;static 2&lt;?10, ?11&gt;), ?2 := Ordering]   &gt; as FnOnce&lt;2&lt;(&amp;&#39;static 2&lt;?7, (&amp;&#39;static ?9)&gt;), (&amp;&#39;static 2&lt;?10, ?11&gt;)&gt;&gt;&gt;::Output -&gt; Ordering)) succeeded\n</code></pre></div>\n<p>local</p>\n<div class=\"codehilite\"><pre><span></span><code>unify(Normalize(&lt;{closure:ClosureId(#4)}&lt;?0, &#39;?1, ?2, ?3, ?4, Int(I8), &quot;rust&quot; for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;?0, (&amp;&#39;?1 ?2)&gt;), ?1 := (&amp;&#39;static 2&lt;?3, ?4&gt;), ?2 := Ordering], 0&gt; as FnOnce&lt;2&lt;(&amp;&#39;static 2&lt;?5, ?6&gt;), (&amp;&#39;static 2&lt;?5, ?6&gt;)&gt;&gt;&gt;::Output -&gt; Ordering), Normalize(&lt;{closure:ClosureId(#4)}&lt;?7, &#39;?8, ?9, ?10, ?11, Int(I8), &quot;rust&quot; for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;?7, (&amp;&#39;?8 ?9)&gt;), ?1 := (&amp;&#39;static 2&lt;?10, ?11&gt;), ?2 := Ordering], 0&gt; as FnOnce&lt;2&lt;(&amp;&#39;static 2&lt;?7, (&amp;&#39;?8 ?9)    &gt;), (&amp;&#39;static 2&lt;?10, ?11&gt;)&gt;&gt;&gt;::Output -&gt; Ordering)) succeeded\n</code></pre></div>",
        "id": 231861964,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616700389
    },
    {
        "content": "<p>local, no goals; rust-analyzer: </p>\n<div class=\"codehilite\"><pre><span></span><code>goals=[InEnvironment { environment: Env([]), goal: (?0 &lt;: ?7) }, InEnvironment { environment: Env([]), goal: (?2 &lt;: ?9) }, InEnvironment { environment: Env([]), goal: (?3 &lt;: ?10) }, InEnvironment { environment: Env([]), goal: (?4 &lt;: ?11) }, InEnvironment { environment: Env([]), goal: (?7 &lt;: ?0) }, InEnvironment { environment: Env([]), goal: (?9 &lt;: ?2) }, InEnvironment { environment: Env([]), goal: (?10 &lt;: ?3) }, InEnvironment { environment: Env([]), goal: (?11 &lt;: ?4) }]\n</code></pre></div>",
        "id": 231862178,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616700463
    },
    {
        "content": "<p>In particular, I'm a bit concerned about <code>InEnvironment { environment: Env([]), goal: (?0 &lt;: ?7) }</code> and <code>InEnvironment { environment: Env([]), goal: (?7 &lt;: ?0) }</code>, though I don't know if that's necessarily the problem here</p>",
        "id": 231863429,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616700891
    },
    {
        "content": "<p>why the subtype goals all of a sudden? something to do with FnMut?</p>",
        "id": 231863714,
        "sender_full_name": "detrumi",
        "timestamp": 1616701015
    },
    {
        "content": "<p>It's because of </p>\n<div class=\"codehilite\"><pre><span></span><code>relate_ty_ty variance=Invariant, a=() for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;[?0 := ?0, ?1 := (&amp;&#39;?1 ?2)]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ?3, ?1 := ?4]&gt;), ?2 := Ordering&lt;[]&gt;], b=() for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;[?0 := ?7, ?1 := (&amp;&#39;?8 ?9)]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ?10, ?1 := ?11]&gt;), ?2 := Ordering&lt;[]&gt;]\n</code></pre></div>",
        "id": 231864054,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616701192
    },
    {
        "content": "<p>But why the heck is the rust-analyzer solve generating goals but not locally</p>",
        "id": 231864571,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616701412
    },
    {
        "content": "<p>ohh</p>",
        "id": 231865453,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616701736
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>                0ms DEBUG zip_tys Invariant, ?0, ?7\n                relate_ty_ty{variance=Invariant, a=?0, b=?7}\n                  unify_var_var{a=?0, b=?7}\n                relate_lifetime_lifetime{variance=Invariant, a=&#39;?1, b=&#39;?8}\n                  0ms DEBUG var_a=?1, var_b=?8\n                0ms DEBUG zip_tys Invariant, ?2, ?9\n                relate_ty_ty{variance=Invariant, a=?2, b=?9}\n                  unify_var_var{a=?2, b=?9}\n                1ms DEBUG zip_tys Invariant, ?3, ?10\n                relate_ty_ty{variance=Invariant, a=?3, b=?10}\n                  unify_var_var{a=?3, b=?10}\n                1ms DEBUG zip_tys Invariant, ?4, ?11\n                relate_ty_ty{variance=Invariant, a=?4, b=?11}\n                  unify_var_var{a=?4, b=?11}\n</code></pre></div>",
        "id": 231865508,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616701761
    },
    {
        "content": "<p>It's because they are a part of the \"function signature\" part of the substitution</p>",
        "id": 231865557,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616701790
    },
    {
        "content": "<p>Okay so let's see if it's these goals that bite us</p>",
        "id": 231865720,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616701848
    },
    {
        "content": "<p>Well, why are we normalizing these</p>",
        "id": 231865758,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616701867
    },
    {
        "content": "<p>Right because we have a clause that basically says \"the output of this closure normalizes to <code>Ordering</code>\"</p>",
        "id": 231865888,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616701932
    },
    {
        "content": "<p>and so we need to unify that clause we the goal</p>",
        "id": 231865924,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616701949
    },
    {
        "content": "<p>I think when we unify closures, we should only unify their \"function substitution\"</p>",
        "id": 231865987,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616701989
    },
    {
        "content": "<p>But maybe that's not right</p>",
        "id": 231865997,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616701996
    },
    {
        "content": "<p>So, again, let's see if it's these goals that bite us</p>",
        "id": 231866033,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616702011
    },
    {
        "content": "<p>Okay, so still going through that</p>",
        "id": 231867914,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616702799
    },
    {
        "content": "<p>But fix for rust-analyzer: put any vars found in the signature in the closure substitution <em>not</em> in function signature</p>",
        "id": 231868040,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616702852
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span></p>",
        "id": 231868064,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616702866
    },
    {
        "content": "<p>I think I'm going to PR a change to Chalk regardless to change <code>closure_inputs_and_output</code> to return <code>Binders&lt;Binders&lt;FnDefInputsAndOutput&gt;&gt;</code> since this more closely matches action fn defs: one level of \"early bound\" vars and one level of \"late bound\" vars</p>",
        "id": 231868340,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616702991
    },
    {
        "content": "<p>But once again we're faced with the problem of generating goals like <code>?0 &lt;: ?7</code> and <code>?7 &lt;: ?0</code>. I'm somewhat convinced we should just also convert that to a unification</p>",
        "id": 231868665,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616703103
    },
    {
        "content": "<p>Basically <em>every</em> issue that's come up related to variance would have been solved by that</p>",
        "id": 231868699,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616703121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/144729-wg-traits/topic/Functions.20in.20Chalk/near/231868040\">said</a>:</p>\n<blockquote>\n<p>But fix for rust-analyzer: put any vars found in the signature in the closure substitution <em>not</em> in function signature</p>\n</blockquote>\n<p>I don't think I understand what you mean by that</p>",
        "id": 231868797,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616703148
    },
    {
        "content": "<p>So</p>",
        "id": 231869110,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616703294
    },
    {
        "content": "<p>/me goes to find code</p>",
        "id": 231869146,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616703314
    },
    {
        "content": "<p>Well,</p>",
        "id": 231869216,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616703347
    },
    {
        "content": "<p>Right now, only the fn sig is stored in the closure substitution</p>",
        "id": 231869292,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616703366
    },
    {
        "content": "<p>But there are some vars in that signature (in this case, 3) that <em>aren't</em> returned by <code>closure_fn_substitution</code></p>",
        "id": 231869529,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616703472
    },
    {
        "content": "<p>Well, in the <code>Normalize</code> goal, there's 5 (4 types, 1 lifetime)</p>",
        "id": 231869835,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616703614
    },
    {
        "content": "<p>So if you imagine the closure as having a signature of <code>closure foo&lt;T, 'y, U, V, W&gt;(&amp;self, a: &amp;'static (T, &amp;'y U), b: &amp;'static (V, W)) -&gt; Ordering {}</code></p>",
        "id": 231869908,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616703642
    },
    {
        "content": "<p>And then you imagine your goal being:</p>\n<div class=\"codehilite\"><pre><span></span><code>exists&lt;T, &#39;y, U, V, W, A, B&gt; {\n  Normalize(&lt;foo&lt;T, &#39;y, U, V, W&gt; as FnOnce&lt;(&amp;&#39;static (A, B), &amp;&#39;static (A, B))&gt;&gt;::Output -&gt; Ordering)\n}\n</code></pre></div>",
        "id": 231870082,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616703719
    },
    {
        "content": "<p>But that <code>foo&lt;T, 'y, U, V, W&gt;</code> is actually represented as </p>\n<div class=\"codehilite\"><pre><span></span><code>Closure(foo, [T, &#39;y, U, V, W, for&lt;&gt; fn(&amp;&#39;static (T, &amp;&#39;y U), &amp;&#39;static (V, W)) -&gt; Ordering])\n</code></pre></div>",
        "id": 231870301,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616703808
    },
    {
        "content": "<p>Hmm. I was under the impression that that closure substitution would only ever contain lifetimes?</p>",
        "id": 231870477,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616703876
    },
    {
        "content": "<p>Well, so this is where things sort of deviate from rustc, right</p>",
        "id": 231870513,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616703899
    },
    {
        "content": "<p>And why I'm going to PR making <code>closure_inputs_and_output</code> return <code>Binder&lt;Binder&lt;FnDefInputsAndOutput&gt;&gt;</code></p>",
        "id": 231870552,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616703923
    },
    {
        "content": "<p>In rustc, the \"function substitution\" <em>does</em> contain more than lifetimes</p>",
        "id": 231870737,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616704011
    },
    {
        "content": "<p>See: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.ClosureSubsts.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.ClosureSubsts.html</a></p>",
        "id": 231870750,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616704016
    },
    {
        "content": "<p>(actually, the function substitution part contains <em>all</em> generic parameters in scope, not just those used in the closure)</p>",
        "id": 231870852,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616704080
    },
    {
        "content": "<p>This actually might just be <em>the</em> fix, not <em>a</em> fix</p>",
        "id": 231870937,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616704113
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> might want to chime in and give thoughts</p>",
        "id": 231870956,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616704126
    },
    {
        "content": "<p>Hmm. I'm still confused. We never pass lifetime variables to Chalk</p>",
        "id": 231871025,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616704173
    },
    {
        "content": "<p>no, but you pass type variables in the function signature</p>",
        "id": 231871154,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616704224
    },
    {
        "content": "<p>In rustc, I'm pretty sure those might be represented as <code>Param</code>s and so it wouldn't matter</p>",
        "id": 231871471,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616704346
    },
    {
        "content": "<p>but those aren't type parameters of the function, they're type variables coming from some type that needs to be inferred. the number of those could change with every query</p>",
        "id": 231872175,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616704628
    },
    {
        "content": "<p>the closure isn't generic over them either, as opposed to the lifetime variables that the function substitution is for</p>",
        "id": 231872413,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616704737
    },
    {
        "content": "<p>huh?</p>",
        "id": 231872676,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616704850
    },
    {
        "content": "<p>Oh, I think I see what you mean</p>",
        "id": 231872783,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616704920
    },
    {
        "content": "<p>Poke <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 231873952,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616705407
    },
    {
        "content": "<p>Okay so I've identified the problem and a hacky temp fix that can used</p>",
        "id": 231875562,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616706174
    },
    {
        "content": "<p>But unsure what the \"proper\" solution is here</p>",
        "id": 231875578,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616706183
    },
    {
        "content": "<p>just for completeness: in the original example we have (with shortened names)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">sort_by</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">aa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sa</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ab</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sb</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">sa</span><span class=\"p\">.</span><span class=\"n\">cmp</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">sb</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and RA knows nothing about the elements of <code>v</code>. So during inference of the function, type variables get introduced for <code>aa</code>, <code>sa</code>, <code>ab</code>, <code>sb</code> (let's say <code>?1</code>, <code>?2</code>, <code>?3</code>, <code>?4</code>). The closure would then be represented as <code>closure&lt;fn&lt;&gt;(&amp;(?1, ?2), &amp;(?3, ?4)) -&gt; Ordering&gt;</code>, and when that gets canonicalized you get the bound vars. I think interestingly <code>closure_inputs_and_output</code> gets called with just the substitution for the closure, which contains bound vars referring to binders further out</p>",
        "id": 231877329,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616706923
    },
    {
        "content": "<p>the reason that we get this circular <code>(&amp;(?1, &amp;?2), &amp;(?3, ?2))</code> parameter signature is that when resolving <code>sa.cmp(&amp;sb)</code>, we haven't resolved the types of <code>sa</code> and <code>sb</code> yet, so we don't do the autoref that would actually happen there, and assume that <code>typeof sa == typeof &amp;sb</code></p>",
        "id": 231877948,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616707239
    },
    {
        "content": "<p>(but that's not really relevant to the problem at hand)</p>",
        "id": 231877969,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616707256
    },
    {
        "content": "<p>Yeah the problem here is we have the goal:</p>\n<div class=\"codehilite\"><pre><span></span><code>for&lt;type, lifetime, type, type, type&gt; Normalize(&lt;{closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;[?0 := ^1.0, ?1 := (&amp;&#39;^1.1 ^1.2)]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ^1.3, ?1 := ^1.4]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt; as FnOnce&lt;2&lt;[?0 := (&amp;&#39;static 2&lt;[?0 := ^0.5, ?1 := ^0.6]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ^0.5, ?1 := ^0.6]&gt;)]&gt;&gt;&gt;::Output -&gt; Ordering&lt;[]&gt;)\n</code></pre></div>\n<p>And the clause</p>\n<div class=\"codehilite\"><pre><span></span><code>for&lt;type, lifetime, type, type, type&gt; Normalize(&lt;{closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;[?0 := ^1.0, ?1 := (&amp;&#39;^1.1 ^1.2)]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ^1.3, ?1 := ^1.4]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt; as FnOnce&lt;2&lt;[?0 := (&amp;&#39;static 2&lt;[?0 := ^0.0, ?1 := (&amp;&#39;static ^0.2)]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ^0.3, ?1 := ^0.4]&gt;)]&gt;&gt;&gt;::Output -&gt; Ordering&lt;[]&gt;)\n</code></pre></div>",
        "id": 231878504,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616707488
    },
    {
        "content": "<p>So we try relate</p>\n<div class=\"codehilite\"><pre><span></span><code>Normalize(&lt;{closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;[?0 := ?0, ?1 := (&amp;&#39;?1 ?2)]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ?3, ?1 := ?4]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt; as FnOnce&lt;2&lt;[?0 := (&amp;&#39;static 2&lt;[?0 := ?5, ?1 := ?6]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ?5, ?1 := ?6]&gt;)]&gt;&gt;&gt;::Output -&gt; Ordering&lt;[]&gt;)\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code>Normalize(&lt;{closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;[?0 := ?7, ?1 := (&amp;&#39;?8 ?9)]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ?10, ?1 := ?11]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt; as FnOnce&lt;2&lt;[?0 := (&amp;&#39;static 2&lt;[?0 := ?7, ?1 := (&amp;&#39;static ?9)]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ?10, ?1 := ?11]&gt;)]&gt;&gt;&gt;::Output -&gt; Ordering&lt;[]&gt;)\n</code></pre></div>",
        "id": 231878587,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616707523
    },
    {
        "content": "<p>And further:</p>\n<div class=\"codehilite\"><pre><span></span><code>{closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;[?0 := ?0, ?1 := (&amp;&#39;?1 ?2)]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ?3, ?1 := ?4]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt;\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\"><pre><span></span><code>{closure:ClosureId(3)}&lt;[?0 := () for&lt;0&gt; [?0 := (&amp;&#39;static 2&lt;[?0 := ?7, ?1 := (&amp;&#39;?8 ?9)]&gt;), ?1 := (&amp;&#39;static 2&lt;[?0 := ?10, ?1 := ?11]&gt;), ?2 := Ordering&lt;[]&gt;]]&gt;\n</code></pre></div>",
        "id": 231880657,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616708434
    },
    {
        "content": "<p>where does this lifetime variable in the goal and the clause come from though?</p>",
        "id": 231880883,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616708539
    },
    {
        "content": "<p>The <code>AliasEq</code> goal gets generalized</p>",
        "id": 231881220,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616708716
    },
    {
        "content": "<p>tbh I think maybe <code>generalize_lifetime</code> shouldn't try to generalize <code>'static</code></p>",
        "id": 231881356,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616708778
    },
    {
        "content": "<p>But it shouldn't matter</p>",
        "id": 231881428,
        "sender_full_name": "Jack Huey",
        "timestamp": 1616708816
    },
    {
        "content": "<p>hm yeah I guess so</p>",
        "id": 231882166,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1616709167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> if it helps, this is the thread that I was digging into <a href=\"https://github.com/rust-lang/chalk/issues/688\">chalk#688</a></p>",
        "id": 239088385,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621258098
    },
    {
        "content": "<p>oh, I just made a fresh one</p>",
        "id": 239088531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621258163
    },
    {
        "content": "<p>let's use that one because it has the bug # in the topic name</p>",
        "id": 239088555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621258172
    },
    {
        "content": "<p>Yes</p>",
        "id": 239088572,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621258177
    }
]