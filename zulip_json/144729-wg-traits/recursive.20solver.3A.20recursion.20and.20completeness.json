[
    {
        "content": "<p>I was reading up on the recursive solver and found the <a href=\"https://rust-lang.github.io/chalk/book/recursive.html#recursion-and-completeness\">Recursion and Completeness</a> section of the recursive solver docs. It shows a program and goal which is not solvable by the recursive solver, but is solvable using SLG (i.e., the recursive solver gets ambiguity while SLG gets a unique solution).</p>\n<p>Is this a fundamental problem, or is there some method to work around it?</p>",
        "id": 200826592,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1592157390
    },
    {
        "content": "<p>If I understand it correctly, this is a fundamental \"problem\" with the recursive solver</p>",
        "id": 200828048,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592159857
    },
    {
        "content": "<p>Hmm</p>",
        "id": 200828170,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592160038
    },
    {
        "content": "<p>Well, I <em>thought</em> that the current trait solver fails to find a solution here, so I went and made a playground: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e25912b11a57df522b7c0ad2bb05451f\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e25912b11a57df522b7c0ad2bb05451f</a></p>",
        "id": 200828183,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592160079
    },
    {
        "content": "<p>But I guess rustc is smart to resolve this</p>",
        "id": 200828186,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592160089
    },
    {
        "content": "<p>If I remember correctly, this might be due to how rustc handles the ambiguity</p>",
        "id": 200828192,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592160114
    },
    {
        "content": "<p>For the recursive solver to be viable I assume we need to fix this issue, right?</p>",
        "id": 200828943,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1592161247
    },
    {
        "content": "<p>Am I doing this wrong? The following test passes:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">not_really_ambig</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">program</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">struct</span> <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">goal</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">exists</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">yields</span><span class=\"p\">[</span><span class=\"n\">SolverChoice</span>::<span class=\"n\">recursive</span><span class=\"p\">()]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">&quot;Unique; substitution [?0 := Uint(U32)], lifetime constraints []&quot;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 200833702,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592168937
    },
    {
        "content": "<p>huh</p>",
        "id": 200833785,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592169116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was there a different example?</p>",
        "id": 200833832,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592169163
    },
    {
        "content": "<p>Maybe there was supposed to be an <code>impl B for i8 { }</code> in the example?</p>",
        "id": 200834635,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592170476
    },
    {
        "content": "<p>I don't see how that would change things?</p>",
        "id": 200835374,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592171694
    },
    {
        "content": "<p>In the example from the book, the unique impl of <code>B</code> can be used to make progress, force unifying <code>?1 = u32</code> which allows progress on <code>?1: A</code>, which is now <code>u32: A</code>.  If both <code>A</code> and <code>B</code> have multiple impls, then neither alone can make progress, so the recursive solver can't make progress.</p>",
        "id": 200836869,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592174123
    },
    {
        "content": "<p>That indeed is ambiguous</p>",
        "id": 200838617,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592177377
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>#[test]\nfn not_really_ambig() {\n    test! {\n        program {\n            struct Vec&lt;T&gt; { }\n\n            trait A { }\n            trait B { }\n\n            impl&lt;T&gt; A for Vec&lt;T&gt; where T: A, T: B { }\n\n            impl A for u32 { }\n            impl B for u32 { }\n\n            impl A for i32 { }\n            impl B for i8 { }\n        }\n\n        goal {\n            exists&lt;T&gt; { Vec&lt;T&gt;: A }\n        } yields[SolverChoice::slg_default()] {\n            &quot;Unique; substitution [?0 := Uint(U32)], lifetime constraints []&quot;\n        } yields[SolverChoice::recursive()] {\n            &quot;Ambiguous&quot;\n        }\n    }\n}\n</code></pre></div>",
        "id": 200838845,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592177705
    },
    {
        "content": "<p>yes I gave the wrong example -- <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> pointed this out earlier -- but I forgot to fix it</p>",
        "id": 200955105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592261297
    },
    {
        "content": "<p><a href=\"#narrow/stream/144729-wg-traits/topic/documenting.20the.20recursive.20solver/near/199737532\">link to our conversation earlier</a></p>",
        "id": 200955128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592261327
    },
    {
        "content": "<p>I'd welcome a PR fixing the example :)</p>",
        "id": 200955133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592261334
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/chalk/pull/528\">https://github.com/rust-lang/chalk/pull/528</a></p>\n<p>I'm still curious about this being a fundamental issue. If rustc currently handles this, then at some point if we want to use the recursive solver we will have to fix this. Therefore, either it can't be a fundamental issue (or we could tweak the solver design to fix it) and we continue pursuing the recursive solver, or it is a fundamental issue and we should not continue pursuing the recursive solver.</p>",
        "id": 200961404,
        "sender_full_name": "Mark Drobnak",
        "timestamp": 1592266986
    },
    {
        "content": "<p>as far as I can see, rustc <em>doesn't</em> handle this: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=00fe0459959ad1d1223bae9154fce2dd\">playground</a> (even if there's just one impl for <code>A</code> and <code>B</code> each)</p>\n<p>Jack's playground has no variables, in which case there's no ambiguity (the goal is just <code>Vec&lt;u32&gt;: A</code>, that's easy to solve)</p>",
        "id": 200994848,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592302246
    },
    {
        "content": "<p>Rustc always treats <code>_: A</code> as ambiguous. It handles <code>{{integer}}: A</code> though (using <code>vec![0]</code> instead of <code>Vec::new()</code>).</p>",
        "id": 200996941,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592303954
    },
    {
        "content": "<p>the example still doesn't work with an integer variable though</p>",
        "id": 200997466,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592304377
    },
    {
        "content": "<p>it <em>does</em> work with an integer variable if there's only one applicable impl for both A and B, but that's fine</p>",
        "id": 200997524,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592304415
    },
    {
        "content": "<p>(although it'll require some tweaks to the floundering logic to handle)</p>",
        "id": 200997561,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592304451
    },
    {
        "content": "<p>e.g. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f7ef4768d9d73201abd5c02079fa0e75\">playground</a></p>",
        "id": 200997958,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1592304755
    },
    {
        "content": "<p>That's what I meant. I don't think that there are any real problems for the recursive solver here.</p>",
        "id": 200998627,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592305299
    },
    {
        "content": "<p>Oh whoops, bad example :D</p>",
        "id": 201057530,
        "sender_full_name": "Jack Huey",
        "timestamp": 1592332984
    },
    {
        "content": "<p>no problem relative to rustc, anyway, since it already takes a \"recursive-solver-like\" approach</p>",
        "id": 201059484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1592333954
    }
]